id,title,description,difficulty,url,companies,related_topics,likes,similar_questions,question,examples,constraints,follow_up
1,Two Sum,"Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.


Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

Constraints:
`2 <= nums.length <= 103`
`-109 <= nums[i] <= 109`
`-109 <= target <= 109`
Only one valid answer exists.",Easy,https://leetcode.com/problems/two-sum,"Amazon,Google,Apple,Adobe,Microsoft,Bloomberg,Facebook,Oracle,Uber,Expedia,Twitter,Nagarro,SAP,Yahoo,Cisco,Qualcomm,tcs,Goldman Sachs,Yandex,ServiceNow","Array,Hash Table",20217,"[3Sum, /problems/3sum/, Medium], [4Sum, /problems/4sum/, Medium], [Two Sum II - Input array is sorted, /problems/two-sum-ii-input-array-is-sorted/, Easy], [Two Sum III - Data structure design, /problems/two-sum-iii-data-structure-design/, Easy], [Subarray Sum Equals K, /problems/subarray-sum-equals-k/, Medium], [Two Sum IV - Input is a BST, /problems/two-sum-iv-input-is-a-bst/, Easy], [Two Sum Less Than K, /problems/two-sum-less-than-k/, Easy], [Max Number of K-Sum Pairs, /problems/max-number-of-k-sum-pairs/, Medium], [Count Good Meals, /problems/count-good-meals/, Medium]","given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`. you may assume that each input would have exactly one solution, and you may not use the same element twice. you can return the answer in any order.","input: nums = [2,7,11,15], target = 9 output: [0,1] output: because nums[0] + nums[1] == 9, we return [0, 1]. example 2: input: nums = [3,2,4], target = 6 output: [1,2] example 3: input: nums = [3,3], target = 6 output: [0,1]",`2 <= nums.length <= 10^3` `-10^9 <= nums[i] <= 10^9` `-10^9 <= target <= 10^9` only one valid answer exists.,
2,Add Two Numbers,"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.


Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

Constraints:
The number of nodes in each linked list is in the range `[1, 100]`.

`0 <= Node.val <= 9`
It is guaranteed that the list represents a number that does not have leading zeros.",Medium,https://leetcode.com/problems/add-two-numbers,"Bloomberg,Microsoft,Amazon,Google,Facebook,Apple,Adobe,Paypal,Coupang,Oracle,Uber,VMware,Yahoo","Linked List,Math,Recursion",11350,"[Multiply Strings, /problems/multiply-strings/, Medium], [Add Binary, /problems/add-binary/, Easy], [Sum of Two Integers, /problems/sum-of-two-integers/, Medium], [Add Strings, /problems/add-strings/, Easy], [Add Two Numbers II, /problems/add-two-numbers-ii/, Medium], [Add to Array-Form of Integer, /problems/add-to-array-form-of-integer/, Easy], [Add Two Polynomials Represented as Linked Lists, /problems/add-two-polynomials-represented-as-linked-lists/, Medium]","you are given two non-empty linked lists representing two non-negative integers. the digits are stored in reverse order, and each of their nodes contains a single digit. add the two numbers and return the sum as a linked list. you may assume the two numbers do not contain any leading zero, except the number 0 itself.","input: l1 = [2,4,3], l2 = [5,6,4] output: [7,0,8] explanation: 342 + 465 = 807. example 2: input: l1 = [0], l2 = [0] output: [0] example 3: input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] output: [8,9,9,9,0,0,0,1]","the number of nodes in each linked list is in the range `[1, 10^0]`. `0 <= node.val <= 9` it is guaranteed that the list represents a number that does not have leading zeros.",
3,Longest Substring Without Repeating Characters,"Given a string `s`, find the length of the longest substring without repeating characters.


Example 1:
Input: s = ""abcabcbb""
Output: 3
Explanation: The answer is ""abc"", with the length of 3.


Example 2:
Input: s = ""bbbbb""
Output: 1
Explanation: The answer is ""b"", with the length of 1.


Example 3:
Input: s = ""pwwkew""
Output: 3
Explanation: The answer is ""wke"", with the length of 3.

Notice that the answer must be a substring, ""pwke"" is a subsequence and not a substring.


Example 4:
Input: s = """"
Output: 0

Constraints:
`0 <= s.length <= 5 * 104`
`s` consists of English letters, digits, symbols and spaces.",Medium,https://leetcode.com/problems/longest-substring-without-repeating-characters,"Amazon,Bloomberg,Microsoft,Facebook,Apple,Adobe,eBay,Goldman Sachs,Google,Alation,VMware,Oracle,ByteDance,Yahoo,Uber,SAP,Salesforce,Coupang,Splunk,Spotify","Hash Table,Two Pointers,String,Sliding Window",13810,"[Longest Substring with At Most Two Distinct Characters, /problems/longest-substring-with-at-most-two-distinct-characters/, Medium], [Longest Substring with At Most K Distinct Characters, /problems/longest-substring-with-at-most-k-distinct-characters/, Medium], [Subarrays with K Different Integers, /problems/subarrays-with-k-different-integers/, Hard], [Maximum Erasure Value, /problems/maximum-erasure-value/, Medium]","given a string `s`, find the length of the longest substring without repeating characters.","input: s = ""abcabcbb"" output: 3 explanation: the answer is ""abc"", with the length of 3. example 2: input: s = ""bbbbb"" output: 1 explanation: the answer is ""b"", with the length of 1. example 3: input: s = ""pwwkew"" output: 3 explanation: the answer is ""wke"", with the length of 3. notice that the answer must be a substring, ""pwke"" is a subsequence and not a substring. example 4: input: s = """" output: 0","`0 <= s.length <= 5 * 10^4` `s` consists of english letters, digits, symbols and spaces.",
4,Median of Two Sorted Arrays,"Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays.


Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.


Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.


Example 3:
Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000

Example 4:
Input: nums1 = [], nums2 = [1]
Output: 1.00000

Example 5:
Input: nums1 = [2], nums2 = []
Output: 2.00000

Constraints:
`nums1.length == m`
`nums2.length == n`
`0 <= m <= 1000`
`0 <= n <= 1000`
`1 <= m + n <= 2000`
`-106 <= nums1[i], nums2[i] <= 106`
Follow up: The overall run time complexity should be `O(log (m+n))`.",Hard,https://leetcode.com/problems/median-of-two-sorted-arrays,"Amazon,Goldman Sachs,Facebook,Microsoft,Apple,Adobe,Google,Bloomberg,Zillow,Uber,Flipkart,Paypal","Array,Binary Search,Divide and Conquer",9665,,"given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays.","input: nums1 = [1,3], nums2 = [2] output: 2.00000 explanation: merged array = [1,2,3] and median is 2. example 2: input: nums1 = [1,2], nums2 = [3,4] output: 2.50000 explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5. example 3: input: nums1 = [0,0], nums2 = [0,0] output: 0.00000 example 4: input: nums1 = [], nums2 = [1] output: 1.00000 example 5: input: nums1 = [2], nums2 = [] output: 2.00000","`nums1.length == m` `nums2.length == n` `0 <= m <= 1000` `0 <= n <= 1000` `1 <= m + n <= 2000` `-10^6 <= nums1[i], nums2[i] <= 10^6`",the overall run time complexity should be `o(log (m+n))`.
5,Longest Palindromic Substring,"Given a string `s`, return the longest palindromic substring in `s`.


Example 1:
Input: s = ""babad""
Output: ""bab""
Note: ""aba"" is also a valid answer.


Example 2:
Input: s = ""cbbd""
Output: ""bb""

Example 3:
Input: s = ""a""
Output: ""a""

Example 4:
Input: s = ""ac""
Output: ""a""

Constraints:
`1 <= s.length <= 1000`
`s` consist of only digits and English letters (lower-case and/or upper-case),",Medium,https://leetcode.com/problems/longest-palindromic-substring,"Amazon,Microsoft,Wayfair,Facebook,Adobe,eBay,Google,Oracle,Goldman Sachs,Yandex,Qualcomm","String,Dynamic Programming",10271,"[Shortest Palindrome, /problems/shortest-palindrome/, Hard], [Palindrome Permutation, /problems/palindrome-permutation/, Easy], [Palindrome Pairs, /problems/palindrome-pairs/, Hard], [Longest Palindromic Subsequence, /problems/longest-palindromic-subsequence/, Medium], [Palindromic Substrings, /problems/palindromic-substrings/, Medium]","given a string `s`, return the longest palindromic substring in `s`.","input: s = ""babad"" output: ""bab"" note: ""aba"" is also a valid answer. example 2: input: s = ""cbbd"" output: ""bb"" example 3: input: s = ""a"" output: ""a"" example 4: input: s = ""ac"" output: ""a""","`1 <= s.length <= 1000` `s` consist of only digits and english letters (lower-case and/or upper-case),",
6,ZigZag Conversion,"The string `""PAYPALISHIRING""` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: `""PAHNAPLSIIGYIR""`
Write the code that will take a string and make this conversion given a number of rows:
string convert(string s, int numRows);

Example 1:
Input: s = ""PAYPALISHIRING"", numRows = 3
Output: ""PAHNAPLSIIGYIR""

Example 2:
Input: s = ""PAYPALISHIRING"", numRows = 4
Output: ""PINALSIGYAHRPI""
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I

Example 3:
Input: s = ""A"", numRows = 1
Output: ""A""

Constraints:
`1 <= s.length <= 1000`
`s` consists of English letters (lower-case and upper-case), `','` and `'.'`.

`1 <= numRows <= 1000`",Medium,https://leetcode.com/problems/zigzag-conversion,Microsoft,String,2270,,"the string `""paypalishiring""` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility) p a h n a p l s i i g y i r and then read line by line: `""pahnaplsiigyir""` write the code that will take a string and make this conversion given a number of rows: string convert(string s, int numrows);","input: s = ""paypalishiring"", numrows = 3 output: ""pahnaplsiigyir"" example 2: input: s = ""paypalishiring"", numrows = 4 output: ""pinalsigyahrpi"" explanation: p i n a l s i g y a h r p i example 3: input: s = ""a"", numrows = 1 output: ""a""","`1 <= s.length <= 1000` `s` consists of english letters (lower-case and upper-case), `','` and `'.'`. `1 <= numrows <= 1000`",
7,Reverse Integer,"Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).


Example 1:
Input: x = 123
Output: 321

Example 2:
Input: x = -123
Output: -321

Example 3:
Input: x = 120
Output: 21

Example 4:
Input: x = 0
Output: 0

Constraints:
`-231 <= x <= 231 - 1`",Easy,https://leetcode.com/problems/reverse-integer,"Amazon,Google,Apple,Facebook,Bloomberg,American Express,Microsoft,Adobe,Uber",Math,4548,"[String to Integer (atoi), /problems/string-to-integer-atoi/, Medium], [Reverse Bits, /problems/reverse-bits/, Easy]","given a signed 32-bit integer `x`, return `x` with its digits reversed. if reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`. assume the environment does not allow you to store 64-bit integers (signed or unsigned).",input: x = 123 output: 321 example 2: input: x = -123 output: -321 example 3: input: x = 120 output: 21 example 4: input: x = 0 output: 0,`-231 <= x <= 231 - 1`,
8,String to Integer (atoi),"Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).

The algorithm for `myAtoi(string s)` is as follows:
Read in and ignore any leading whitespace.

Check if the next character (if not already at the end of the string) is `'-'` or `'+'`. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.

Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.

Convert these digits into an integer (i.e. `""123"" -> 123`, `""0032"" -> 32`). If no digits were read, then the integer is `0`. Change the sign as necessary (from step 2).

If the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then clamp the integer so that it remains in the range. Specifically, integers less than `-231` should be clamped to `-231`, and integers greater than `231 - 1` should be clamped to `231 - 1`.

Return the integer as the final result.

Note:
Only the space character `' '` is considered a whitespace character.

Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.


Example 1:
Input: s = ""42""
Output: 42
Explanation: The underlined characters are what is read in, the caret is the current reader position.

Step 1: ""42"" (no characters read because there is no leading whitespace)
         ^
Step 2: ""42"" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: ""42"" (""42"" is read in)
           ^
The parsed integer is 42.

Since 42 is in the range [-231, 231 - 1], the final result is 42.


Example 2:
Input: s = ""   -42""
Output: -42
Explanation:
Step 1: ""   -42"" (leading whitespace is read and ignored)
            ^
Step 2: ""   -42"" ('-' is read, so the result should be negative)
             ^
Step 3: ""   -42"" (""42"" is read in)
               ^
The parsed integer is -42.

Since -42 is in the range [-231, 231 - 1], the final result is -42.


Example 3:
Input: s = ""4193 with words""
Output: 4193
Explanation:
Step 1: ""4193 with words"" (no characters read because there is no leading whitespace)
         ^
Step 2: ""4193 with words"" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: ""4193 with words"" (""4193"" is read in; reading stops because the next character is a non-digit)
             ^
The parsed integer is 4193.

Since 4193 is in the range [-231, 231 - 1], the final result is 4193.


Example 4:
Input: s = ""words and 987""
Output: 0
Explanation:
Step 1: ""words and 987"" (no characters read because there is no leading whitespace)
         ^
Step 2: ""words and 987"" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: ""words and 987"" (reading stops immediately because there is a non-digit 'w')
         ^
The parsed integer is 0 because no digits were read.

Since 0 is in the range [-231, 231 - 1], the final result is 0.


Example 5:
Input: s = ""-91283472332""
Output: -2147483648
Explanation:
Step 1: ""-91283472332"" (no characters read because there is no leading whitespace)
         ^
Step 2: ""-91283472332"" ('-' is read, so the result should be negative)
          ^
Step 3: ""-91283472332"" (""91283472332"" is read in)
                     ^
The parsed integer is -91283472332.

Since -91283472332 is less than the lower bound of the range [-231, 231 - 1], the final result is clamped to -231 = -2147483648. 

Constraints:
`0 <= s.length <= 200`
`s` consists of English letters (lower-case and upper-case), digits (`0-9`), `' '`, `'+'`, `'-'`, and `'.'`.",Medium,https://leetcode.com/problems/string-to-integer-atoi,"Facebook,Amazon,Microsoft,Google,Goldman Sachs,Apple,Adobe,Bloomberg,Intel","Math,String",189,"[Reverse Integer, /problems/reverse-integer/, Easy], [Valid Number, /problems/valid-number/, Hard]","implement the `myatoi(string s)` function, which converts a string to a 32-bit signed integer (similar to c/c++'s `atoi` function). the algorithm for `myatoi(string s)` is as follows: read in and ignore any leading whitespace. check if the next character (if not already at the end of the string) is `'-'` or `'+'`. read this character in if it is either. this determines if the final result is negative or positive respectively. assume the result is positive if neither is present. read in next the characters until the next non-digit charcter or the end of the input is reached. the rest of the string is ignored. convert these digits into an integer (i.e. `""123"" -> 123`, `""0032"" -> 32`). if no digits were read, then the integer is `0`. change the sign as necessary (from step 2). if the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then clamp the integer so that it remains in the range. specifically, integers less than `-231` should be clamped to `-231`, and integers greater than `231 - 1` should be clamped to `231 - 1`. return the integer as the final result. note: only the space character `' '` is considered a whitespace character. do not ignore any characters other than the leading whitespace or the rest of the string after the digits.","input: s = ""42"" output: 42 explanation: the underlined characters are what is read in, the caret is the current reader position. step 1: ""42"" (no characters read because there is no leading whitespace) ^ step 2: ""42"" (no characters read because there is neither a '-' nor '+') ^ step 3: ""42"" (""42"" is read in) ^ the parsed integer is 42. since 42 is in the range [-231, 231 - 1], the final result is 42. example 2: input: s = "" -42"" output: -42 explanation: step 1: "" -42"" (leading whitespace is read and ignored) ^ step 2: "" -42"" ('-' is read, so the result should be negative) ^ step 3: "" -42"" (""42"" is read in) ^ the parsed integer is -42. since -42 is in the range [-231, 231 - 1], the final result is -42. example 3: input: s = ""4193 with words"" output: 4193 explanation: step 1: ""4193 with words"" (no characters read because there is no leading whitespace) ^ step 2: ""4193 with words"" (no characters read because there is neither a '-' nor '+') ^ step 3: ""4193 with words"" (""4193"" is read in; reading stops because the next character is a non-digit) ^ the parsed integer is 4193. since 4193 is in the range [-231, 231 - 1], the final result is 4193. example 4: input: s = ""words and 987"" output: 0 explanation: step 1: ""words and 987"" (no characters read because there is no leading whitespace) ^ step 2: ""words and 987"" (no characters read because there is neither a '-' nor '+') ^ step 3: ""words and 987"" (reading stops immediately because there is a non-digit 'w') ^ the parsed integer is 0 because no digits were read. since 0 is in the range [-231, 231 - 1], the final result is 0. example 5: input: s = ""-91283472332"" output: -2147483648 explanation: step 1: ""-91283472332"" (no characters read because there is no leading whitespace) ^ step 2: ""-91283472332"" ('-' is read, so the result should be negative) ^ step 3: ""-91283472332"" (""91283472332"" is read in) ^ the parsed integer is -91283472332. since -91283472332 is less than the lower bound of the range [-231, 231 - 1], the final result is clamped to -231 = -2147483648.","`0 <= s.length <= 200` `s` consists of english letters (lower-case and upper-case), digits (`0-9`), `' '`, `'+'`, `'-'`, and `'.'`.",
9,Palindrome Number,"Given an integer `x`, return `true` if `x` is palindrome integer.

An integer is a palindrome when it reads the same backward as forward. For example, `121` is palindrome while `123` is not.


Example 1:
Input: x = 121
Output: true

Example 2:
Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.


Example 3:
Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.


Example 4:
Input: x = -101
Output: false

Constraints:
`-231 <= x <= 231 - 1`
Follow up: Could you solve it without converting the integer to a string?",Easy,https://leetcode.com/problems/palindrome-number,"Microsoft,Adobe,Bloomberg,Facebook,Google,Yahoo",Math,3199,"[Palindrome Linked List, /problems/palindrome-linked-list/, Easy]","given an integer `x`, return `true` if `x` is palindrome integer. an integer is a palindrome when it reads the same backward as forward. for example, `121` is palindrome while `123` is not.","input: x = 121 output: true example 2: input: x = -121 output: false explanation: from left to right, it reads -121. from right to left, it becomes 121-. therefore it is not a palindrome. example 3: input: x = 10 output: false explanation: reads 01 from right to left. therefore it is not a palindrome. example 4: input: x = -101 output: false",`-231 <= x <= 231 - 1`,could you solve it without converting the integer to a string?
10,Regular Expression Matching,"Given an input string (`s`) and a pattern (`p`), implement regular expression matching with support for `'.'` and `'*'` where:` `
`'.'` Matches any single character.​​​​
`'*'` Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).


Example 1:
Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".


Example 2:
Input: s = ""aa"", p = ""a*""
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes ""aa"".


Example 3:
Input: s = ""ab"", p = "".*""
Output: true
Explanation: "".*"" means ""zero or more (*) of any character (.)"".


Example 4:
Input: s = ""aab"", p = ""c*a*b""
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches ""aab"".


Example 5:
Input: s = ""mississippi"", p = ""mis*is*p*.""
Output: false

Constraints:
`0 <= s.length <= 20`
`0 <= p.length <= 30`
`s` contains only lowercase English letters.

`p` contains only lowercase English letters, `'.'`, and `'*'`.

It is guaranteed for each appearance of the character `'*'`, there will be a previous valid character to match.",Hard,https://leetcode.com/problems/regular-expression-matching,"Facebook,Amazon,Microsoft,Google,Adobe,Coursera,Apple","String,Dynamic Programming,Backtracking",5583,"[Wildcard Matching, /problems/wildcard-matching/, Hard]","given an input string (`s`) and a pattern (`p`), implement regular expression matching with support for `'.'` and `'*'` where:` ` `'.'` matches any single character.​​​​ `'*'` matches zero or more of the preceding element. the matching should cover the entire input string (not partial).","input: s = ""aa"", p = ""a"" output: false explanation: ""a"" does not match the entire string ""aa"". example 2: input: s = ""aa"", p = ""a*"" output: true explanation: '*' means zero or more of the preceding element, 'a'. therefore, by repeating 'a' once, it becomes ""aa"". example 3: input: s = ""ab"", p = "".*"" output: true explanation: "".*"" means ""zero or more (*) of any character (.)"". example 4: input: s = ""aab"", p = ""c*a*b"" output: true explanation: c can be repeated 0 times, a can be repeated 1 time. therefore, it matches ""aab"". example 5: input: s = ""mississippi"", p = ""mis*is*p*."" output: false","`0 <= s.length <= 20` `0 <= p.length <= 30` `s` contains only lowercase english letters. `p` contains only lowercase english letters, `'.'`, and `'*'`. it is guaranteed for each appearance of the character `'*'`, there will be a previous valid character to match.",
11,Container With Most Water,"Given `n` non-negative integers `a1, a2, ..., an` , where each represents a point at coordinate `(i, ai)`. `n` vertical lines are drawn such that the two endpoints of the line `i` is at `(i, ai)` and `(i, 0)`. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.


Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.


Example 2:
Input: height = [1,1]
Output: 1

Example 3:
Input: height = [4,3,2,1,4]
Output: 16

Example 4:
Input: height = [1,2,1]
Output: 2

Constraints:
`n == height.length`
`2 <= n <= 105`
`0 <= height[i] <= 104`",Medium,https://leetcode.com/problems/container-with-most-water,"Amazon,Google,Microsoft,Facebook,Goldman Sachs,Adobe,Apple","Array,Two Pointers",9031,"[Trapping Rain Water, /problems/trapping-rain-water/, Hard]","given `n` non-negative integers `a1, a2, ..., an` , where each represents a point at coordinate `(i, ai)`. `n` vertical lines are drawn such that the two endpoints of the line `i` is at `(i, ai)` and `(i, 0)`. find two lines, which, together with the x-axis forms a container, such that the container contains the most water. notice that you may not slant the container.","input: height = [1,8,6,2,5,4,8,3,7] output: 49 explanation: the above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. in this case, the max area of water (blue section) the container can contain is 49. example 2: input: height = [1,1] output: 1 example 3: input: height = [4,3,2,1,4] output: 16 example 4: input: height = [1,2,1] output: 2",`n == height.length` `2 <= n <= 10^5` `0 <= height[i] <= 10^4`,
12,Integer to Roman,"Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:
`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. 
`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. 
`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.

Given an integer, convert it to a roman numeral.


Example 1:
Input: num = 3
Output: ""III""

Example 2:
Input: num = 4
Output: ""IV""

Example 3:
Input: num = 9
Output: ""IX""

Example 4:
Input: num = 58
Output: ""LVIII""
Explanation: L = 50, V = 5, III = 3.


Example 5:
Input: num = 1994
Output: ""MCMXCIV""
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


Constraints:
`1 <= num <= 3999`",Medium,https://leetcode.com/problems/integer-to-roman,"Amazon,Bloomberg,Microsoft,Adobe,Google,Apple,Oracle","Math,String",1675,"[Roman to Integer, /problems/roman-to-integer/, Easy], [Integer to English Words, /problems/integer-to-english-words/, Hard]","roman numerals are represented by seven different symbols: `i`, `v`, `x`, `l`, `c`, `d` and `m`. symbol value i 1 v 5 x 10 l 50 c 100 d 500 m 1000 for example, `2` is written as `ii` in roman numeral, just two one's added together. `12` is written as `xii`, which is simply `x + ii`. the number `27` is written as `xxvii`, which is `xx + v + ii`. roman numerals are usually written largest to smallest from left to right. however, the numeral for four is not `iiii`. instead, the number four is written as `iv`. because the one is before the five we subtract it making four. the same principle applies to the number nine, which is written as `ix`. there are six instances where subtraction is used: `i` can be placed before `v` (5) and `x` (10) to make 4 and 9. `x` can be placed before `l` (50) and `c` (100) to make 40 and 90. `c` can be placed before `d` (500) and `m` (1000) to make 400 and 900. given an integer, convert it to a roman numeral.","input: num = 3 output: ""iii"" example 2: input: num = 4 output: ""iv"" example 3: input: num = 9 output: ""ix"" example 4: input: num = 58 output: ""lviii"" explanation: l = 50, v = 5, iii = 3. example 5: input: num = 1994 output: ""mcmxciv"" explanation: m = 1000, cm = 900, xc = 90 and iv = 4.",`1 <= num <= 3999`,
13,Roman to Integer,"Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:
`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. 
`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. 
`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.


Example 1:
Input: s = ""III""
Output: 3

Example 2:
Input: s = ""IV""
Output: 4

Example 3:
Input: s = ""IX""
Output: 9

Example 4:
Input: s = ""LVIII""
Output: 58
Explanation: L = 50, V= 5, III = 3.


Example 5:
Input: s = ""MCMXCIV""
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


Constraints:
`1 <= s.length <= 15`
`s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.

It is guaranteed that `s` is a valid roman numeral in the range `[1, 3999]`.",Easy,https://leetcode.com/problems/roman-to-integer,"Amazon,Roblox,Microsoft,Adobe,Facebook,LinkedIn,Google,Apple,Uber,Qualtrics,Oracle,eBay","Math,String",419,"[Integer to Roman, /problems/integer-to-roman/, Medium]","roman numerals are represented by seven different symbols: `i`, `v`, `x`, `l`, `c`, `d` and `m`. symbol value i 1 v 5 x 10 l 50 c 100 d 500 m 1000 for example, `2` is written as `ii` in roman numeral, just two one's added together. `12` is written as `xii`, which is simply `x + ii`. the number `27` is written as `xxvii`, which is `xx + v + ii`. roman numerals are usually written largest to smallest from left to right. however, the numeral for four is not `iiii`. instead, the number four is written as `iv`. because the one is before the five we subtract it making four. the same principle applies to the number nine, which is written as `ix`. there are six instances where subtraction is used: `i` can be placed before `v` (5) and `x` (10) to make 4 and 9. `x` can be placed before `l` (50) and `c` (100) to make 40 and 90. `c` can be placed before `d` (500) and `m` (1000) to make 400 and 900. given a roman numeral, convert it to an integer.","input: s = ""iii"" output: 3 example 2: input: s = ""iv"" output: 4 example 3: input: s = ""ix"" output: 9 example 4: input: s = ""lviii"" output: 58 explanation: l = 50, v= 5, iii = 3. example 5: input: s = ""mcmxciv"" output: 1994 explanation: m = 1000, cm = 900, xc = 90 and iv = 4.","`1 <= s.length <= 15` `s` contains only the characters `('i', 'v', 'x', 'l', 'c', 'd', 'm')`. it is guaranteed that `s` is a valid roman numeral in the range `[1, 3999]`.",
14,Longest Common Prefix,"Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string `""""`.


Example 1:
Input: strs = [""flower"",""flow"",""flight""]
Output: ""fl""

Example 2:
Input: strs = [""dog"",""racecar"",""car""]
Output: """"
Explanation: There is no common prefix among the input strings.


Constraints:
`0 <= strs.length <= 200`
`0 <= strs[i].length <= 200`
`strs[i]` consists of only lower-case English letters.",Easy,https://leetcode.com/problems/longest-common-prefix,"Facebook,Adobe,Amazon,Apple,Bloomberg,Microsoft,Yahoo,Google",String,3958,,"write a function to find the longest common prefix string amongst an array of strings. if there is no common prefix, return an empty string `""""`.","input: strs = [""flower"",""flow"",""flight""] output: ""fl"" example 2: input: strs = [""dog"",""racecar"",""car""] output: """" explanation: there is no common prefix among the input strings.",`0 <= strs.length <= 200` `0 <= strs[i].length <= 200` `strs[i]` consists of only lower-case english letters.,
15,3Sum,"Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.

Notice that the solution set must not contain duplicate triplets.


Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:
Input: nums = []
Output: []

Example 3:
Input: nums = [0]
Output: []

Constraints:
`0 <= nums.length <= 3000`
`-105 <= nums[i] <= 105`",Medium,https://leetcode.com/problems/3sum,"Amazon,Facebook,Microsoft,Bloomberg,Apple,Adobe,VMware,Google,Cisco,Tesla,Goldman Sachs,eBay","Array,Two Pointers",10032,"[Two Sum, /problems/two-sum/, Easy], [3Sum Closest, /problems/3sum-closest/, Medium], [4Sum, /problems/4sum/, Medium], [3Sum Smaller, /problems/3sum-smaller/, Medium]","given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`. notice that the solution set must not contain duplicate triplets.","input: nums = [-1,0,1,2,-1,-4] output: [[-1,-1,2],[-1,0,1]] example 2: input: nums = [] output: [] example 3: input: nums = [0] output: []",`0 <= nums.length <= 3000` `-10^5 <= nums[i] <= 10^5`,
16,3Sum Closest,"Given an array `nums` of n integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.


Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).


Constraints:
`3 <= nums.length <= 10^3`
`-10^3 <= nums[i] <= 10^3`
`-10^4 <= target <= 10^4`",Medium,https://leetcode.com/problems/3sum-closest,"Amazon,Apple,Google,Facebook,Bloomberg","Array,Two Pointers",3095,"[3Sum, /problems/3sum/, Medium], [3Sum Smaller, /problems/3sum-smaller/, Medium]","given an array `nums` of n integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. return the sum of the three integers. you may assume that each input would have exactly one solution.","input: nums = [-1,2,1,-4], target = 1 output: 2 explanation: the sum that is closest to the target is 2. (-1 + 2 + 1 = 2).",`3 <= nums.length <= 10^3` `-10^3 <= nums[i] <= 10^3` `-10^4 <= target <= 10^4`,
17,Letter Combinations of a Phone Number,"Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


Example 1:
Input: digits = ""23""
Output: [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]

Example 2:
Input: digits = """"
Output: []

Example 3:
Input: digits = ""2""
Output: [""a"",""b"",""c""]

Constraints:
`0 <= digits.length <= 4`
`digits[i]` is a digit in the range `['2', '9']`.",Medium,https://leetcode.com/problems/letter-combinations-of-a-phone-number,"Amazon,Microsoft,Twilio,Facebook,Capital One,eBay,Google,Uber,Apple,Oracle,JPMorgan,Morgan Stanley,Tesla,Qualtrics,Samsung","String,Backtracking,Depth-first Search,Recursion",5684,"[Generate Parentheses, /problems/generate-parentheses/, Medium], [Combination Sum, /problems/combination-sum/, Medium], [Binary Watch, /problems/binary-watch/, Easy]","given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. return the answer in any order. a mapping of digit to letters (just like on the telephone buttons) is given below. note that 1 does not map to any letters.","input: digits = ""23"" output: [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""] example 2: input: digits = """" output: [] example 3: input: digits = ""2"" output: [""a"",""b"",""c""]","`0 <= digits.length <= 4` `digits[i]` is a digit in the range `['2', '9']`.",
18,4Sum,"Given an array `nums` of n integers and an integer `target`, are there elements a, b, c, and d in `nums` such that a + b + c + d = `target`? Find all unique quadruplets in the array which gives the sum of `target`.

Notice that the solution set must not contain duplicate quadruplets.


Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:
Input: nums = [], target = 0
Output: []

Constraints:
`0 <= nums.length <= 200`
`-109 <= nums[i] <= 109`
`-109 <= target <= 109`",Medium,https://leetcode.com/problems/4sum,"Amazon,Bloomberg","Array,Hash Table,Two Pointers",3154,"[Two Sum, /problems/two-sum/, Easy], [3Sum, /problems/3sum/, Medium], [4Sum II, /problems/4sum-ii/, Medium]","given an array `nums` of n integers and an integer `target`, are there elements a, b, c, and d in `nums` such that a + b + c + d = `target`? find all unique quadruplets in the array which gives the sum of `target`. notice that the solution set must not contain duplicate quadruplets.","input: nums = [1,0,-1,0,-2,2], target = 0 output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] example 2: input: nums = [], target = 0 output: []",`0 <= nums.length <= 200` `-10^9 <= nums[i] <= 10^9` `-10^9 <= target <= 10^9`,
19,Remove Nth Node From End of List,"Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.

Follow up: Could you do this in one pass?

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]

Constraints:
The number of nodes in the list is `sz`.

`1 <= sz <= 30`
`0 <= Node.val <= 100`
`1 <= n <= sz`",Medium,https://leetcode.com/problems/remove-nth-node-from-end-of-list,"Facebook,Amazon,Microsoft,Bloomberg,Apple","Linked List,Two Pointers",5039,"[Swapping Nodes in a Linked List, /problems/swapping-nodes-in-a-linked-list/, Medium], [Delete N Nodes After M Nodes of a Linked List, /problems/delete-n-nodes-after-m-nodes-of-a-linked-list/, Easy]","given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.","input: head = [1,2,3,4,5], n = 2 output: [1,2,3,5] example 2: input: head = [1], n = 1 output: [] example 3: input: head = [1,2], n = 1 output: [1]",the number of nodes in the list is `sz`. `1 <= sz <= 30` `0 <= node.val <= 10^0` `1 <= n <= sz`,"could you do this in one pass? example 1: input: head = [1,2,3,4,5], n = 2 output: [1,2,3,5] example 2: input: head = [1], n = 1 output: [] example 3: input: head = [1,2], n = 1 output: [1] constraints: the number of nodes in the list is `sz`. `1 <= sz <= 30` `0 <= node.val <= 100` `1 <= n <= sz`"
20,Valid Parentheses,"Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.

An input string is valid if:
Open brackets must be closed by the same type of brackets.

Open brackets must be closed in the correct order.


Example 1:
Input: s = ""()""
Output: true

Example 2:
Input: s = ""()[]{}""
Output: true

Example 3:
Input: s = ""(]""
Output: false

Example 4:
Input: s = ""([)]""
Output: false

Example 5:
Input: s = ""{[]}""
Output: true

Constraints:
`1 <= s.length <= 104`
`s` consists of parentheses only `'()[]{}'`.",Easy,https://leetcode.com/problems/valid-parentheses,"Amazon,Bloomberg,Facebook,Apple,Microsoft,Expedia,Spotify,Google,LinkedIn,Goldman Sachs,Oracle,IBM,JPMorgan,Intuit,Paypal,Atlassian,eBay,Adobe,ServiceNow,Qualcomm","String,Stack",7188,"[Generate Parentheses, /problems/generate-parentheses/, Medium], [Longest Valid Parentheses, /problems/longest-valid-parentheses/, Hard], [Remove Invalid Parentheses, /problems/remove-invalid-parentheses/, Hard], [Check If Word Is Valid After Substitutions, /problems/check-if-word-is-valid-after-substitutions/, Medium]","given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid. an input string is valid if: open brackets must be closed by the same type of brackets. open brackets must be closed in the correct order.","input: s = ""()"" output: true example 2: input: s = ""()[]{}"" output: true example 3: input: s = ""(]"" output: false example 4: input: s = ""([)]"" output: false example 5: input: s = ""{[]}"" output: true",`1 <= s.length <= 10^4` `s` consists of parentheses only `'()[]{}'`.,
21,Merge Two Sorted Lists,"Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.


Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: l1 = [], l2 = []
Output: []

Example 3:
Input: l1 = [], l2 = [0]
Output: [0]

Constraints:
The number of nodes in both lists is in the range `[0, 50]`.

`-100 <= Node.val <= 100`
Both `l1` and `l2` are sorted in non-decreasing order.",Easy,https://leetcode.com/problems/merge-two-sorted-lists,"Amazon,Adobe,Bloomberg,Capital One,Facebook,Microsoft,Oracle,LinkedIn,Uber,VMware,IBM,ByteDance","Linked List,Recursion",6467,"[Merge k Sorted Lists, /problems/merge-k-sorted-lists/, Hard], [Merge Sorted Array, /problems/merge-sorted-array/, Easy], [Sort List, /problems/sort-list/, Medium], [Shortest Word Distance II, /problems/shortest-word-distance-ii/, Medium], [Add Two Polynomials Represented as Linked Lists, /problems/add-two-polynomials-represented-as-linked-lists/, Medium]",merge two sorted linked lists and return it as a sorted list. the list should be made by splicing together the nodes of the first two lists.,"input: l1 = [1,2,4], l2 = [1,3,4] output: [1,1,2,3,4,4] example 2: input: l1 = [], l2 = [] output: [] example 3: input: l1 = [], l2 = [0] output: [0]","the number of nodes in both lists is in the range `[0, 50]`. `-10^0 <= node.val <= 10^0` both `l1` and `l2` are sorted in non-decreasing order.",
22,Generate Parentheses,"Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.


Example 1:
Input: n = 3
Output: [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]

Example 2:
Input: n = 1
Output: [""()""]

Constraints:
`1 <= n <= 8`",Medium,https://leetcode.com/problems/generate-parentheses,"Microsoft,Facebook,Google,Bloomberg,Amazon,Apple,Adobe,Walmart Labs,ByteDance,Nvidia,Oracle","String,Backtracking",7496,"[Letter Combinations of a Phone Number, /problems/letter-combinations-of-a-phone-number/, Medium], [Valid Parentheses, /problems/valid-parentheses/, Easy]","given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.","input: n = 3 output: [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""] example 2: input: n = 1 output: [""()""]",`1 <= n <= 8`,
23,Merge k Sorted Lists,"You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.


Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []

Constraints:
`k == lists.length`
`0 <= k <= 10^4`
`0 <= lists[i].length <= 500`
`-10^4 <= lists[i][j] <= 10^4`
`lists[i]` is sorted in ascending order.

The sum of `lists[i].length` won't exceed `10^4`.",Hard,https://leetcode.com/problems/merge-k-sorted-lists,"Amazon,Facebook,Microsoft,Bloomberg,Apple,Oracle,Databricks,Google,Twitter,Uber,Adobe,Wish,ByteDance,Palantir Technologies,Tesla","Linked List,Divide and Conquer,Heap",6892,"[Merge Two Sorted Lists, /problems/merge-two-sorted-lists/, Easy], [Ugly Number II, /problems/ugly-number-ii/, Medium]","you are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order. merge all the linked-lists into one sorted linked-list and return it.","input: lists = [[1,4,5],[1,3,4],[2,6]] output: [1,1,2,3,4,4,5,6] explanation: the linked-lists are: [ 1->4->5, 1->3->4, 2->6 ] merging them into one sorted list: 1->1->2->3->4->4->5->6 example 2: input: lists = [] output: [] example 3: input: lists = [[]] output: []",`k == lists.length` `0 <= k <= 10^4` `0 <= lists[i].length <= 500` `-10^4 <= lists[i][j] <= 10^4` `lists[i]` is sorted in ascending order. the sum of `lists[i].length` won't exceed `10^4`.,
24,Swap Nodes in Pairs,"Given a linked list, swap every two adjacent nodes and return its head.


Example 1:
Input: head = [1,2,3,4]
Output: [2,1,4,3]

Example 2:
Input: head = []
Output: []

Example 3:
Input: head = [1]
Output: [1]

Constraints:
The number of nodes in the list is in the range `[0, 100]`.

`0 <= Node.val <= 100`
Follow up: Can you solve the problem without modifying the values in the list's nodes? (i.e., Only nodes themselves may be changed.)",Medium,https://leetcode.com/problems/swap-nodes-in-pairs,"Microsoft,Amazon,Facebook,Google,eBay,ByteDance","Linked List,Recursion",3482,"[Reverse Nodes in k-Group, /problems/reverse-nodes-in-k-group/, Hard], [Swapping Nodes in a Linked List, /problems/swapping-nodes-in-a-linked-list/, Medium]","given a linked list, swap every two adjacent nodes and return its head.","input: head = [1,2,3,4] output: [2,1,4,3] example 2: input: head = [] output: [] example 3: input: head = [1] output: [1]","the number of nodes in the list is in the range `[0, 10^0]`. `0 <= node.val <= 10^0`","can you solve the problem without modifying the values in the list's nodes? (i.e., only nodes themselves may be changed.)"
25,Reverse Nodes in k-Group,"Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

Follow up:
Could you solve the problem in `O(1)` extra memory space?
You may not alter the values in the list's nodes, only nodes itself may be changed.


Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

Example 3:
Input: head = [1,2,3,4,5], k = 1
Output: [1,2,3,4,5]

Example 4:
Input: head = [1], k = 1
Output: [1]

Constraints:
The number of nodes in the list is in the range `sz`.

`1 <= sz <= 5000`
`0 <= Node.val <= 1000`
`1 <= k <= sz`",Hard,https://leetcode.com/problems/reverse-nodes-in-k-group,"Amazon,Microsoft,Apple,ByteDance,Facebook,Google",Linked List,3490,"[Swap Nodes in Pairs, /problems/swap-nodes-in-pairs/, Medium], [Swapping Nodes in a Linked List, /problems/swapping-nodes-in-a-linked-list/, Medium]","given a linked list, reverse the nodes of a linked list k at a time and return its modified list. k is a positive integer and is less than or equal to the length of the linked list. if the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.","input: head = [1,2,3,4,5], k = 2 output: [2,1,4,3,5] example 2: input: head = [1,2,3,4,5], k = 3 output: [3,2,1,4,5] example 3: input: head = [1,2,3,4,5], k = 1 output: [1,2,3,4,5] example 4: input: head = [1], k = 1 output: [1]",the number of nodes in the list is in the range `sz`. `1 <= sz <= 5000` `0 <= node.val <= 1000` `1 <= k <= sz`,"could you solve the problem in `o(1)` extra memory space? you may not alter the values in the list's nodes, only nodes itself may be changed. example 1: input: head = [1,2,3,4,5], k = 2 output: [2,1,4,3,5] example 2: input: head = [1,2,3,4,5], k = 3 output: [3,2,1,4,5] example 3: input: head = [1,2,3,4,5], k = 1 output: [1,2,3,4,5] example 4: input: head = [1], k = 1 output: [1] constraints: the number of nodes in the list is in the range `sz`. `1 <= sz <= 5000` `0 <= node.val <= 1000` `1 <= k <= sz`"
26,Remove Duplicates from Sorted Array,"Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Clarification:
Confused why the returned value is an integer but your answer is an array?
Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.

Internally you can think of this:
// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);
// any modification to nums in your function would be known by the caller.

// using the length returned by your function, it prints the first len elements.

for (int i = 0; i < len; i++) {
    print(nums[i]);
}

Example 1:
Input: nums = [1,1,2]
Output: 2, nums = [1,2]
Explanation: Your function should return length = `2`, with the first two elements of `nums` being `1` and `2` respectively. It doesn't matter what you leave beyond the returned length.


Example 2:
Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4]
Explanation: Your function should return length = `5`, with the first five elements of `nums` being modified to `0`, `1`, `2`, `3`, and `4` respectively. It doesn't matter what values are set beyond the returned length.


Constraints:
`0 <= nums.length <= 3 * 104`
`-104 <= nums[i] <= 104`
`nums` is sorted in ascending order.",Easy,https://leetcode.com/problems/remove-duplicates-from-sorted-array,"Google,Facebook,Amazon,Microsoft","Array,Two Pointers",3727,"[Remove Element, /problems/remove-element/, Easy], [Remove Duplicates from Sorted Array II, /problems/remove-duplicates-from-sorted-array-ii/, Medium]","given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length. do not allocate extra space for another array, you must do this by modifying the input array in-place with o(1) extra memory. clarification: confused why the returned value is an integer but your answer is an array? note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well. internally you can think of this: // nums is passed in by reference. (i.e., without making a copy) int len = removeduplicates(nums); // any modification to nums in your function would be known by the caller. // using the length returned by your function, it prints the first len elements. for (int i = 0; i < len; i++) { print(nums[i]); }","input: nums = [1,1,2] output: 2, nums = [1,2] explanation: your function should return length = `2`, with the first two elements of `nums` being `1` and `2` respectively. it doesn't matter what you leave beyond the returned length. example 2: input: nums = [0,0,1,1,1,2,2,3,3,4] output: 5, nums = [0,1,2,3,4] explanation: your function should return length = `5`, with the first five elements of `nums` being modified to `0`, `1`, `2`, `3`, and `4` respectively. it doesn't matter what values are set beyond the returned length.",`0 <= nums.length <= 3 * 10^4` `-10^4 <= nums[i] <= 10^4` `nums` is sorted in ascending order.,
27,Remove Element,"Given an array nums and a value `val`, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with `O(1)` extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Clarification:
Confused why the returned value is an integer but your answer is an array?
Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.

Internally you can think of this:
// nums is passed in by reference. (i.e., without making a copy)
int len = removeElement(nums, val);
// any modification to nums in your function would be known by the caller.

// using the length returned by your function, it prints the first len elements.

for (int i = 0; i < len; i++) {
    print(nums[i]);
}

Example 1:
Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2]
Explanation: Your function should return length = 2, with the first two elements of nums being 2.

It doesn't matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.


Example 2:
Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3]
Explanation: Your function should return length = `5`, with the first five elements of `nums` containing `0`, `1`, `3`, `0`, and 4. Note that the order of those five elements can be arbitrary. It doesn't matter what values are set beyond the returned length.


Constraints:
`0 <= nums.length <= 100`
`0 <= nums[i] <= 50`
`0 <= val <= 100`",Easy,https://leetcode.com/problems/remove-element,"Adobe,Amazon,Oracle","Array,Two Pointers",2044,"[Remove Duplicates from Sorted Array, /problems/remove-duplicates-from-sorted-array/, Easy], [Remove Linked List Elements, /problems/remove-linked-list-elements/, Easy], [Move Zeroes, /problems/move-zeroes/, Easy]","given an array nums and a value `val`, remove all instances of that value in-place and return the new length. do not allocate extra space for another array, you must do this by modifying the input array in-place with `o(1)` extra memory. the order of elements can be changed. it doesn't matter what you leave beyond the new length. clarification: confused why the returned value is an integer but your answer is an array? note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well. internally you can think of this: // nums is passed in by reference. (i.e., without making a copy) int len = removeelement(nums, val); // any modification to nums in your function would be known by the caller. // using the length returned by your function, it prints the first len elements. for (int i = 0; i < len; i++) { print(nums[i]); }","input: nums = [3,2,2,3], val = 3 output: 2, nums = [2,2] explanation: your function should return length = 2, with the first two elements of nums being 2. it doesn't matter what you leave beyond the returned length. for example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted. example 2: input: nums = [0,1,2,2,3,0,4,2], val = 2 output: 5, nums = [0,1,4,0,3] explanation: your function should return length = `5`, with the first five elements of `nums` containing `0`, `1`, `3`, `0`, and 4. note that the order of those five elements can be arbitrary. it doesn't matter what values are set beyond the returned length.",`0 <= nums.length <= 10^0` `0 <= nums[i] <= 50` `0 <= val <= 10^0`,
28,Implement strStr(),"Implement strStr().

Return the index of the first occurrence of needle in haystack, or `-1` if `needle` is not part of `haystack`.

Clarification:
What should we return when `needle` is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when `needle` is an empty string. This is consistent to C's strstr() and Java's indexOf().


Example 1:
Input: haystack = ""hello"", needle = ""ll""
Output: 2

Example 2:
Input: haystack = ""aaaaa"", needle = ""bba""
Output: -1

Example 3:
Input: haystack = """", needle = """"
Output: 0

Constraints:
`0 <= haystack.length, needle.length <= 5 * 104`
`haystack` and `needle` consist of only lower-case English characters.",Easy,https://leetcode.com/problems/implement-strstr,"Facebook,Apple,Amazon","Two Pointers,String",2261,"[Shortest Palindrome, /problems/shortest-palindrome/, Hard], [Repeated Substring Pattern, /problems/repeated-substring-pattern/, Easy]","implement strstr(). return the index of the first occurrence of needle in haystack, or `-1` if `needle` is not part of `haystack`. clarification: what should we return when `needle` is an empty string? this is a great question to ask during an interview. for the purpose of this problem, we will return 0 when `needle` is an empty string. this is consistent to c's strstr() and java's indexof().","input: haystack = ""hello"", needle = ""ll"" output: 2 example 2: input: haystack = ""aaaaa"", needle = ""bba"" output: -1 example 3: input: haystack = """", needle = """" output: 0","`0 <= haystack.length, needle.length <= 5 * 10^4` `haystack` and `needle` consist of only lower-case english characters.",
29,Divide Two Integers,"Given two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and mod operator.

Return the quotient after dividing `dividend` by `divisor`.

The integer division should truncate toward zero, which means losing its fractional part. For example, `truncate(8.345) = 8` and `truncate(-2.7335) = -2`.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: `[−231, 231 − 1]`. For this problem, assume that your function returns `231 − 1` when the division result overflows.


Example 1:
Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = truncate(3.33333..) = 3.


Example 2:
Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = truncate(-2.33333..) = -2.


Example 3:
Input: dividend = 0, divisor = 1
Output: 0

Example 4:
Input: dividend = 1, divisor = 1
Output: 1

Constraints:
`-231 <= dividend, divisor <= 231 - 1`
`divisor != 0`",Medium,https://leetcode.com/problems/divide-two-integers,"Facebook,Amazon","Math,Binary Search",1727,,"given two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and mod operator. return the quotient after dividing `dividend` by `divisor`. the integer division should truncate toward zero, which means losing its fractional part. for example, `truncate(8.345) = 8` and `truncate(-2.7335) = -2`. note: assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: `[−231, 231 − 1]`. for this problem, assume that your function returns `231 − 1` when the division result overflows.","input: dividend = 10, divisor = 3 output: 3 explanation: 10/3 = truncate(3.33333..) = 3. example 2: input: dividend = 7, divisor = -3 output: -2 explanation: 7/-3 = truncate(-2.33333..) = -2. example 3: input: dividend = 0, divisor = 1 output: 0 example 4: input: dividend = 1, divisor = 1 output: 1","`-231 <= dividend, divisor <= 231 - 1` `divisor != 0`",
30,Substring with Concatenation of All Words,"You are given a string `s` and an array of strings `words` of the same length. Return all starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once, in any order, and without any intervening characters.

You can return the answer in any order.


Example 1:
Input: s = ""barfoothefoobarman"", words = [""foo"",""bar""]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are ""barfoo"" and ""foobar"" respectively.

The output order does not matter, returning [9,0] is fine too.


Example 2:
Input: s = ""wordgoodgoodgoodbestword"", words = [""word"",""good"",""best"",""word""]
Output: []

Example 3:
Input: s = ""barfoofoobarthefoobarman"", words = [""bar"",""foo"",""the""]
Output: [6,9,12]

Constraints:
`1 <= s.length <= 104`
`s` consists of lower-case English letters.

`1 <= words.length <= 5000`
`1 <= words[i].length <= 30`
`words[i]` consists of lower-case English letters.",Hard,https://leetcode.com/problems/substring-with-concatenation-of-all-words,"Amazon,Adobe","Hash Table,Two Pointers,String",1209,"[Minimum Window Substring, /problems/minimum-window-substring/, Hard]","you are given a string `s` and an array of strings `words` of the same length. return all starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once, in any order, and without any intervening characters. you can return the answer in any order.","input: s = ""barfoothefoobarman"", words = [""foo"",""bar""] output: [0,9] explanation: substrings starting at index 0 and 9 are ""barfoo"" and ""foobar"" respectively. the output order does not matter, returning [9,0] is fine too. example 2: input: s = ""wordgoodgoodgoodbestword"", words = [""word"",""good"",""best"",""word""] output: [] example 3: input: s = ""barfoofoobarthefoobarman"", words = [""bar"",""foo"",""the""] output: [6,9,12]",`1 <= s.length <= 10^4` `s` consists of lower-case english letters. `1 <= words.length <= 5000` `1 <= words[i].length <= 30` `words[i]` consists of lower-case english letters.,
31,Next Permutation,"Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

The replacement must be in place and use only constant extra memory.


Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]

Example 3:
Input: nums = [1,1,5]
Output: [1,5,1]

Example 4:
Input: nums = [1]
Output: [1]

Constraints:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 100`",Medium,https://leetcode.com/problems/next-permutation,"Facebook,Amazon,Google,Microsoft,Rubrik,Bloomberg,Apple,Morgan Stanley,Goldman Sachs,Atlassian,tcs",Array,5271,"[Permutations, /problems/permutations/, Medium], [Permutations II, /problems/permutations-ii/, Medium], [Permutation Sequence, /problems/permutation-sequence/, Hard], [Palindrome Permutation II, /problems/palindrome-permutation-ii/, Medium]","implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers. if such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order). the replacement must be in place and use only constant extra memory.","input: nums = [1,2,3] output: [1,3,2] example 2: input: nums = [3,2,1] output: [1,2,3] example 3: input: nums = [1,1,5] output: [1,5,1] example 4: input: nums = [1] output: [1]",`1 <= nums.length <= 10^0` `0 <= nums[i] <= 10^0`,
32,Longest Valid Parentheses,"Given a string containing just the characters `'('` and `')'`, find the length of the longest valid (well-formed) parentheses substring.


Example 1:
Input: s = ""(()""
Output: 2
Explanation: The longest valid parentheses substring is ""()"".


Example 2:
Input: s = "")()())""
Output: 4
Explanation: The longest valid parentheses substring is ""()()"".


Example 3:
Input: s = """"
Output: 0

Constraints:
`0 <= s.length <= 3 * 104`
`s[i]` is `'('`, or `')'`.",Hard,https://leetcode.com/problems/longest-valid-parentheses,"Amazon,Facebook,Apple,ByteDance","String,Dynamic Programming",5015,"[Valid Parentheses, /problems/valid-parentheses/, Easy]","given a string containing just the characters `'('` and `')'`, find the length of the longest valid (well-formed) parentheses substring.","input: s = ""(()"" output: 2 explanation: the longest valid parentheses substring is ""()"". example 2: input: s = "")()())"" output: 4 explanation: the longest valid parentheses substring is ""()()"". example 3: input: s = """" output: 0","`0 <= s.length <= 3 * 10^4` `s[i]` is `'('`, or `')'`.",
33,Search in Rotated Sorted Array,"There is an integer array `nums` sorted in ascending order (with distinct values).

Prior to being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`.

Given the array `nums` after the rotation and an integer `target`, return the index of `target` if it is in `nums`, or `-1` if it is not in `nums`.


Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1

Constraints:
`1 <= nums.length <= 5000`
`-104 <= nums[i] <= 104`
All values of `nums` are unique.

`nums` is guaranteed to be rotated at some pivot.

`-104 <= target <= 104`
Follow up: Can you achieve this in `O(log n)` time complexity?",Medium,https://leetcode.com/problems/search-in-rotated-sorted-array,"Amazon,Facebook,Microsoft,LinkedIn,Oracle,Apple,Bloomberg,Nvidia,Expedia,Google,Adobe,Zillow,ByteDance,eBay,Cisco,ServiceNow,C3 IoT","Array,Binary Search",7349,"[Search in Rotated Sorted Array II, /problems/search-in-rotated-sorted-array-ii/, Medium], [Find Minimum in Rotated Sorted Array, /problems/find-minimum-in-rotated-sorted-array/, Medium]","there is an integer array `nums` sorted in ascending order (with distinct values). prior to being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). for example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`. given the array `nums` after the rotation and an integer `target`, return the index of `target` if it is in `nums`, or `-1` if it is not in `nums`.","input: nums = [4,5,6,7,0,1,2], target = 0 output: 4 example 2: input: nums = [4,5,6,7,0,1,2], target = 3 output: -1 example 3: input: nums = [1], target = 0 output: -1",`1 <= nums.length <= 5000` `-10^4 <= nums[i] <= 10^4` all values of `nums` are unique. `nums` is guaranteed to be rotated at some pivot. `-10^4 <= target <= 10^4`,can you achieve this in `o(log n)` time complexity?
34,Find First and Last Position of Element in Sorted Array,"Given an array of integers `nums` sorted in ascending order, find the starting and ending position of a given `target` value.

If `target` is not found in the array, return `[-1, -1]`.

Follow up: Could you write an algorithm with `O(log n)` runtime complexity?

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

Constraints:
`0 <= nums.length <= 105`
`-109 <= nums[i] <= 109`
`nums` is a non-decreasing array.

`-109 <= target <= 109`",Medium,https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array,"Facebook,Amazon,Uber,Google,Microsoft,LinkedIn,Bloomberg,Snapchat,Oracle","Array,Binary Search",5257,"[First Bad Version, /problems/first-bad-version/, Easy]","given an array of integers `nums` sorted in ascending order, find the starting and ending position of a given `target` value. if `target` is not found in the array, return `[-1, -1]`.","input: nums = [5,7,7,8,8,10], target = 8 output: [3,4] example 2: input: nums = [5,7,7,8,8,10], target = 6 output: [-1,-1] example 3: input: nums = [], target = 0 output: [-1,-1]",`0 <= nums.length <= 10^5` `-10^9 <= nums[i] <= 10^9` `nums` is a non-decreasing array. `-10^9 <= target <= 10^9`,"could you write an algorithm with `o(log n)` runtime complexity? example 1: input: nums = [5,7,7,8,8,10], target = 8 output: [3,4] example 2: input: nums = [5,7,7,8,8,10], target = 6 output: [-1,-1] example 3: input: nums = [], target = 0 output: [-1,-1] constraints: `0 <= nums.length <= 105` `-109 <= nums[i] <= 109` `nums` is a non-decreasing array. `-109 <= target <= 109`"
35,Search Insert Position,"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.


Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4

Example 4:
Input: nums = [1,3,5,6], target = 0
Output: 0

Example 5:
Input: nums = [1], target = 0
Output: 0

Constraints:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`nums` contains distinct values sorted in ascending order.

`-104 <= target <= 104`",Easy,https://leetcode.com/problems/search-insert-position,"Apple,Amazon","Array,Binary Search",3384,"[First Bad Version, /problems/first-bad-version/, Easy]","given a sorted array of distinct integers and a target value, return the index if the target is found. if not, return the index where it would be if it were inserted in order.","input: nums = [1,3,5,6], target = 5 output: 2 example 2: input: nums = [1,3,5,6], target = 2 output: 1 example 3: input: nums = [1,3,5,6], target = 7 output: 4 example 4: input: nums = [1,3,5,6], target = 0 output: 0 example 5: input: nums = [1], target = 0 output: 0",`1 <= nums.length <= 10^4` `-10^4 <= nums[i] <= 10^4` `nums` contains distinct values sorted in ascending order. `-10^4 <= target <= 10^4`,
36,Valid Sudoku,"Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits `1-9` without repetition.

Each column must contain the digits `1-9` without repetition.

Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.

Note:
A Sudoku board (partially filled) could be valid but is not necessarily solvable.

Only the filled cells need to be validated according to the mentioned rules.


Example 1:
Input: board = 
[[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""]
,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]
,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]
,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]
,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]
,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]
,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]
,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]
,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: true

Example 2:
Input: board = 
[[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""]
,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]
,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]
,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]
,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]
,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]
,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]
,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]
,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: false

Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.


Constraints:
`board.length == 9`
`board[i].length == 9`
`board[i][j]` is a digit or `'.'`.",Medium,https://leetcode.com/problems/valid-sudoku,"Amazon,Roblox,Uber,Apple,Facebook,Goldman Sachs,Oracle",Hash Table,2458,"[Sudoku Solver, /problems/sudoku-solver/, Hard]",determine if a `9 x 9` sudoku board is valid. only the filled cells need to be validated according to the following rules: each row must contain the digits `1-9` without repetition. each column must contain the digits `1-9` without repetition. each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition. note: a sudoku board (partially filled) could be valid but is not necessarily solvable. only the filled cells need to be validated according to the mentioned rules.,"input: board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""] ,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""] ,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""] ,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""] ,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""] ,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""] ,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""] ,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""] ,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]] output: true example 2: input: board = [[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""] ,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""] ,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""] ,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""] ,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""] ,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""] ,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""] ,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""] ,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]] output: false explanation: same as example 1, except with the 5 in the top left corner being modified to 8. since there are two 8's in the top left 3x3 sub-box, it is invalid.",`board.length == 9` `board[i].length == 9` `board[i][j]` is a digit or `'.'`.,
37,Sudoku Solver,"Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:
Each of the digits `1-9` must occur exactly once in each row.

Each of the digits `1-9` must occur exactly once in each column.

Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.

The `'.'` character indicates empty cells.


Example 1:
Input: board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""],[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""],[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""],[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""],[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""],[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""],[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""],[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""],[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]]
Explanation: The input board is shown above and the only valid solution is shown below:

Constraints:
`board.length == 9`
`board[i].length == 9`
`board[i][j]` is a digit or `'.'`.

It is guaranteed that the input board has only one solution.",Hard,https://leetcode.com/problems/sudoku-solver,"DoorDash,Amazon,Oracle,Pinterest,Facebook,Intuit","Hash Table,Backtracking",2662,"[Valid Sudoku, /problems/valid-sudoku/, Medium], [Unique Paths III, /problems/unique-paths-iii/, Hard]",write a program to solve a sudoku puzzle by filling the empty cells. a sudoku solution must satisfy all of the following rules: each of the digits `1-9` must occur exactly once in each row. each of the digits `1-9` must occur exactly once in each column. each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid. the `'.'` character indicates empty cells.,"input: board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]] output: [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""],[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""],[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""],[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""],[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""],[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""],[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""],[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""],[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]] explanation: the input board is shown above and the only valid solution is shown below:",`board.length == 9` `board[i].length == 9` `board[i][j]` is a digit or `'.'`. it is guaranteed that the input board has only one solution.,
38,Count and Say,"The count-and-say sequence is a sequence of digit strings defined by the recursive formula:
`countAndSay(1) = ""1""`
`countAndSay(n)` is the way you would ""say"" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string.

To determine how you ""say"" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

For example, the saying and conversion for digit string `""3322251""`:
Given a positive integer `n`, return the `nth` term of the count-and-say sequence.


Example 1:
Input: n = 1
Output: ""1""
Explanation: This is the base case.


Example 2:
Input: n = 4
Output: ""1211""
Explanation:
countAndSay(1) = ""1""
countAndSay(2) = say ""1"" = one 1 = ""11""
countAndSay(3) = say ""11"" = two 1's = ""21""
countAndSay(4) = say ""21"" = one 2 + one 1 = ""12"" + ""11"" = ""1211""

Constraints:
`1 <= n <= 30`",Medium,https://leetcode.com/problems/count-and-say,"Bloomberg,Facebook,Amazon,Microsoft,Apple,Epic Systems,Tesla",String,367,"[Encode and Decode Strings, /problems/encode-and-decode-strings/, Medium], [String Compression, /problems/string-compression/, Medium]","the count-and-say sequence is a sequence of digit strings defined by the recursive formula: `countandsay(1) = ""1""` `countandsay(n)` is the way you would ""say"" the digit string from `countandsay(n-1)`, which is then converted into a different digit string. to determine how you ""say"" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. then for each group, say the number of characters, then say the character. to convert the saying into a digit string, replace the counts with a number and concatenate every saying. for example, the saying and conversion for digit string `""3322251""`: given a positive integer `n`, return the `nth` term of the count-and-say sequence.","input: n = 1 output: ""1"" explanation: this is the base case. example 2: input: n = 4 output: ""1211"" explanation: countandsay(1) = ""1"" countandsay(2) = say ""1"" = one 1 = ""11"" countandsay(3) = say ""11"" = two 1's = ""21"" countandsay(4) = say ""21"" = one 2 + one 1 = ""12"" + ""11"" = ""1211""",`1 <= n <= 30`,
39,Combination Sum,"Given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order.

The same number may be chosen from `candidates` an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.


Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.

7 is a candidate, and 7 = 7.

These are the only two combinations.


Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []

Example 4:
Input: candidates = [1], target = 1
Output: [[1]]

Example 5:
Input: candidates = [1], target = 2
Output: [[1,1]]

Constraints:
`1 <= candidates.length <= 30`
`1 <= candidates[i] <= 200`
All elements of `candidates` are distinct.

`1 <= target <= 500`",Medium,https://leetcode.com/problems/combination-sum,"Facebook,Airbnb,Microsoft,Bloomberg,Amazon,Apple,Uber,Adobe,eBay,Citadel,ByteDance","Array,Backtracking",5708,"[Letter Combinations of a Phone Number, /problems/letter-combinations-of-a-phone-number/, Medium], [Combination Sum II, /problems/combination-sum-ii/, Medium], [Combinations, /problems/combinations/, Medium], [Combination Sum III, /problems/combination-sum-iii/, Medium], [Factor Combinations, /problems/factor-combinations/, Medium], [Combination Sum IV, /problems/combination-sum-iv/, Medium]","given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. you may return the combinations in any order. the same number may be chosen from `candidates` an unlimited number of times. two combinations are unique if the frequency of at least one of the chosen numbers is different. it is guaranteed that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.","input: candidates = [2,3,6,7], target = 7 output: [[2,2,3],[7]] explanation: 2 and 3 are candidates, and 2 + 2 + 3 = 7. note that 2 can be used multiple times. 7 is a candidate, and 7 = 7. these are the only two combinations. example 2: input: candidates = [2,3,5], target = 8 output: [[2,2,2,2],[2,3,3],[3,5]] example 3: input: candidates = [2], target = 1 output: [] example 4: input: candidates = [1], target = 1 output: [[1]] example 5: input: candidates = [1], target = 2 output: [[1,1]]",`1 <= candidates.length <= 30` `1 <= candidates[i] <= 200` all elements of `candidates` are distinct. `1 <= target <= 500`,
40,Combination Sum II,"Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`.

Each number in `candidates` may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.


Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]

Constraints:
`1 <= candidates.length <= 100`
`1 <= candidates[i] <= 50`
`1 <= target <= 30`",Medium,https://leetcode.com/problems/combination-sum-ii,"Amazon,Uber,Microsoft,ByteDance","Array,Backtracking",2629,"[Combination Sum, /problems/combination-sum/, Medium]","given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`. each number in `candidates` may only be used once in the combination. note: the solution set must not contain duplicate combinations.","input: candidates = [10,1,2,7,6,1,5], target = 8 output: [ [1,1,6], [1,2,5], [1,7], [2,6] ] example 2: input: candidates = [2,5,2,1,2], target = 5 output: [ [1,2,2], [5] ]",`1 <= candidates.length <= 10^0` `1 <= candidates[i] <= 50` `1 <= target <= 30`,
41,First Missing Positive,"Given an unsorted integer array `nums`, find the smallest missing positive integer.


Example 1:
Input: nums = [1,2,0]
Output: 3

Example 2:
Input: nums = [3,4,-1,1]
Output: 2

Example 3:
Input: nums = [7,8,9,11,12]
Output: 1

Constraints:
`0 <= nums.length <= 300`
`-231 <= nums[i] <= 231 - 1`
Follow up: Could you implement an algorithm that runs in `O(n)` time and uses constant extra space?",Hard,https://leetcode.com/problems/first-missing-positive,"Microsoft,Amazon,Facebook,Google,Oracle,Adobe,Bloomberg,Wish,Uber,Apple,Walmart Labs,Tesla,JPMorgan",Array,5504,"[Missing Number, /problems/missing-number/, Easy], [Find the Duplicate Number, /problems/find-the-duplicate-number/, Medium], [Find All Numbers Disappeared in an Array, /problems/find-all-numbers-disappeared-in-an-array/, Easy], [Couples Holding Hands, /problems/couples-holding-hands/, Hard]","given an unsorted integer array `nums`, find the smallest missing positive integer.","input: nums = [1,2,0] output: 3 example 2: input: nums = [3,4,-1,1] output: 2 example 3: input: nums = [7,8,9,11,12] output: 1",`0 <= nums.length <= 300` `-231 <= nums[i] <= 231 - 1`,could you implement an algorithm that runs in `o(n)` time and uses constant extra space?
42,Trapping Rain Water,"Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.


Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.


Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9

Constraints:
`n == height.length`
`0 <= n <= 3 * 104`
`0 <= height[i] <= 105`",Hard,https://leetcode.com/problems/trapping-rain-water,"Goldman Sachs,Facebook,Amazon,Microsoft,Bloomberg,Apple,Databricks,Google,Qualtrics,Adobe,Oracle,Yahoo","Array,Two Pointers,Dynamic Programming,Stack",10683,"[Container With Most Water, /problems/container-with-most-water/, Medium], [Product of Array Except Self, /problems/product-of-array-except-self/, Medium], [Trapping Rain Water II, /problems/trapping-rain-water-ii/, Hard], [Pour Water, /problems/pour-water/, Medium]","given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.","input: height = [0,1,0,2,1,0,1,3,2,1,2,1] output: 6 explanation: the above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. in this case, 6 units of rain water (blue section) are being trapped. example 2: input: height = [4,2,0,3,2,5] output: 9",`n == height.length` `0 <= n <= 3 * 10^4` `0 <= height[i] <= 10^5`,
43,Multiply Strings,"Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.


Example 1:
Input: num1 = ""2"", num2 = ""3""
Output: ""6""

Example 2:
Input: num1 = ""123"", num2 = ""456""
Output: ""56088""

Constraints:
`1 <= num1.length, num2.length <= 200`
`num1` and `num2` consist of digits only.

Both `num1` and `num2` do not contain any leading zero, except the number `0` itself.",Medium,https://leetcode.com/problems/multiply-strings,"Facebook,Microsoft,Amazon,Square,Apple,Bloomberg,Two Sigma,ByteDance","Math,String",2400,"[Add Two Numbers, /problems/add-two-numbers/, Medium], [Plus One, /problems/plus-one/, Easy], [Add Binary, /problems/add-binary/, Easy], [Add Strings, /problems/add-strings/, Easy]","given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string. note: you must not use any built-in biginteger library or convert the inputs to integer directly.","input: num1 = ""2"", num2 = ""3"" output: ""6"" example 2: input: num1 = ""123"", num2 = ""456"" output: ""56088""","`1 <= num1.length, num2.length <= 200` `num1` and `num2` consist of digits only. both `num1` and `num2` do not contain any leading zero, except the number `0` itself.",
44,Wildcard Matching,"Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:
`'?'` Matches any single character.

`'*'` Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).


Example 1:
Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".


Example 2:
Input: s = ""aa"", p = ""*""
Output: true
Explanation: '*' matches any sequence.


Example 3:
Input: s = ""cb"", p = ""?a""
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.


Example 4:
Input: s = ""adceb"", p = ""*a*b""
Output: true
Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring ""dce"".


Example 5:
Input: s = ""acdcb"", p = ""a*c?b""
Output: false

Constraints:
`0 <= s.length, p.length <= 2000`
`s` contains only lowercase English letters.

`p` contains only lowercase English letters, `'?'` or `'*'`.",Hard,https://leetcode.com/problems/wildcard-matching,"Adobe,Amazon,Citadel,Facebook,Microsoft,Google,Bloomberg,Snapchat","String,Dynamic Programming,Backtracking,Greedy",2848,"[Regular Expression Matching, /problems/regular-expression-matching/, Hard]","given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where: `'?'` matches any single character. `'*'` matches any sequence of characters (including the empty sequence). the matching should cover the entire input string (not partial).","input: s = ""aa"", p = ""a"" output: false explanation: ""a"" does not match the entire string ""aa"". example 2: input: s = ""aa"", p = ""*"" output: true explanation: '*' matches any sequence. example 3: input: s = ""cb"", p = ""?a"" output: false explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'. example 4: input: s = ""adceb"", p = ""*a*b"" output: true explanation: the first '*' matches the empty sequence, while the second '*' matches the substring ""dce"". example 5: input: s = ""acdcb"", p = ""a*c?b"" output: false","`0 <= s.length, p.length <= 2000` `s` contains only lowercase english letters. `p` contains only lowercase english letters, `'?'` or `'*'`.",
45,Jump Game II,"Given an array of non-negative integers `nums`, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.


Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.


Example 2:
Input: nums = [2,3,0,1,4]
Output: 2

Constraints:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 105`",Medium,https://leetcode.com/problems/jump-game-ii,"Amazon,Apple","Array,Greedy",3908,"[Jump Game, /problems/jump-game/, Medium], [Jump Game III, /problems/jump-game-iii/, Medium]","given an array of non-negative integers `nums`, you are initially positioned at the first index of the array. each element in the array represents your maximum jump length at that position. your goal is to reach the last index in the minimum number of jumps. you can assume that you can always reach the last index.","input: nums = [2,3,1,1,4] output: 2 explanation: the minimum number of jumps to reach the last index is 2. jump 1 step from index 0 to 1, then 3 steps to the last index. example 2: input: nums = [2,3,0,1,4] output: 2",`1 <= nums.length <= 1000` `0 <= nums[i] <= 10^5`,
46,Permutations,"Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.


Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]

Constraints:
`1 <= nums.length <= 6`
`-10 <= nums[i] <= 10`
All the integers of `nums` are unique.",Medium,https://leetcode.com/problems/permutations,"Facebook,Amazon,ByteDance,LinkedIn,Apple,eBay,Microsoft,Paypal,Oracle",Backtracking,5749,"[Next Permutation, /problems/next-permutation/, Medium], [Permutations II, /problems/permutations-ii/, Medium], [Permutation Sequence, /problems/permutation-sequence/, Hard], [Combinations, /problems/combinations/, Medium]","given an array `nums` of distinct integers, return all the possible permutations. you can return the answer in any order.","input: nums = [1,2,3] output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]] example 2: input: nums = [0,1] output: [[0,1],[1,0]] example 3: input: nums = [1] output: [[1]]",`1 <= nums.length <= 6` `-10 <= nums[i] <= 10` all the integers of `nums` are unique.,
47,Permutations II,"Given a collection of numbers, `nums`, that might contain duplicates, return all possible unique permutations in any order.


Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Constraints:
`1 <= nums.length <= 8`
`-10 <= nums[i] <= 10`",Medium,https://leetcode.com/problems/permutations-ii,"Facebook,Amazon,Microsoft",Backtracking,2871,"[Next Permutation, /problems/next-permutation/, Medium], [Permutations, /problems/permutations/, Medium], [Palindrome Permutation II, /problems/palindrome-permutation-ii/, Medium], [Number of Squareful Arrays, /problems/number-of-squareful-arrays/, Hard]","given a collection of numbers, `nums`, that might contain duplicates, return all possible unique permutations in any order.","input: nums = [1,1,2] output: [[1,1,2], [1,2,1], [2,1,1]] example 2: input: nums = [1,2,3] output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]",`1 <= nums.length <= 8` `-10 <= nums[i] <= 10`,
48,Rotate Image,"You are given an n x n 2D `matrix` representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.


Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

Example 3:
Input: matrix = [[1]]
Output: [[1]]

Example 4:
Input: matrix = [[1,2],[3,4]]
Output: [[3,1],[4,2]]

Constraints:
`matrix.length == n`
`matrix[i].length == n`
`1 <= n <= 20`
`-1000 <= matrix[i][j] <= 1000`",Medium,https://leetcode.com/problems/rotate-image,"Amazon,Microsoft,Apple,Uber,Cisco,Facebook,Rubrik,Adobe,Nvidia,Google,Quora,eBay,PayTM",Array,4619,,"you are given an n x n 2d `matrix` representing an image, rotate the image by 90 degrees (clockwise). you have to rotate the image in-place, which means you have to modify the input 2d matrix directly. do not allocate another 2d matrix and do the rotation.","input: matrix = [[1,2,3],[4,5,6],[7,8,9]] output: [[7,4,1],[8,5,2],[9,6,3]] example 2: input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]] example 3: input: matrix = [[1]] output: [[1]] example 4: input: matrix = [[1,2],[3,4]] output: [[3,1],[4,2]]",`matrix.length == n` `matrix[i].length == n` `1 <= n <= 20` `-1000 <= matrix[i][j] <= 1000`,
49,Group Anagrams,"Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.


Example 1:
Input: strs = [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""]
Output: [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]

Example 2:
Input: strs = [""""]
Output: [[""""]]

Example 3:
Input: strs = [""a""]
Output: [[""a""]]

Constraints:
`1 <= strs.length <= 104`
`0 <= strs[i].length <= 100`
`strs[i]` consists of lower-case English letters.",Medium,https://leetcode.com/problems/group-anagrams,"Amazon,Microsoft,Goldman Sachs,Apple,Uber,eBay,VMware,Oracle,Yandex,Expedia,Affirm,Facebook,Google,Bloomberg,Twilio,Docusign,Cisco,Two Sigma,ByteDance,Intel","Hash Table,String",5182,"[Valid Anagram, /problems/valid-anagram/, Easy], [Group Shifted Strings, /problems/group-shifted-strings/, Medium]","given an array of strings `strs`, group the anagrams together. you can return the answer in any order. an anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.","input: strs = [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""] output: [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]] example 2: input: strs = [""""] output: [[""""]] example 3: input: strs = [""a""] output: [[""a""]]",`1 <= strs.length <= 10^4` `0 <= strs[i].length <= 10^0` `strs[i]` consists of lower-case english letters.,
50,"Pow(x, n)","Implement pow(x, n), which calculates `x` raised to the power `n` (i.e., `xn`).


Example 1:
Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:
Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:
Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

Constraints:
`-100.0 < x < 100.0`
`-231 <= n <= 231-1`
`-104 <= xn <= 104`",Medium,https://leetcode.com/problems/powx-n,"Facebook,Microsoft,Amazon,LinkedIn,Bloomberg,Google,eBay,Goldman Sachs","Math,Binary Search",2263,"[Sqrt(x), /problems/sqrtx/, Easy], [Super Pow, /problems/super-pow/, Medium]","implement pow(x, n), which calculates `x` raised to the power `n` (i.e., `xn`).","input: x = 2.00000, n = 10 output: 1024.00000 example 2: input: x = 2.10000, n = 3 output: 9.26100 example 3: input: x = 2.00000, n = -2 output: 0.25000 explanation: 2-2 = 1/22 = 1/4 = 0.25",`-10^0.0 < x < 10^0.0` `-231 <= n <= 231-1` `-10^4 <= xn <= 10^4`,
51,N-Queens,"The n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.

Given an integer `n`, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space, respectively.


Example 1:
Input: n = 4
Output: [["".Q.."",""...Q"",""Q..."",""..Q.""],[""..Q."",""Q..."",""...Q"","".Q..""]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:
Input: n = 1
Output: [[""Q""]]

Constraints:
`1 <= n <= 9`",Hard,https://leetcode.com/problems/n-queens,"Facebook,Microsoft,Amazon,ByteDance,Apple,Adobe",Backtracking,2803,"[N-Queens II, /problems/n-queens-ii/, Hard], [Grid Illumination, /problems/grid-illumination/, Hard]","the n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. given an integer `n`, return all distinct solutions to the n-queens puzzle. each solution contains a distinct board configuration of the n-queens' placement, where `'q'` and `'.'` both indicate a queen and an empty space, respectively.","input: n = 4 output: [["".q.."",""...q"",""q..."",""..q.""],[""..q."",""q..."",""...q"","".q..""]] explanation: there exist two distinct solutions to the 4-queens puzzle as shown above example 2: input: n = 1 output: [[""q""]]",`1 <= n <= 9`,
52,N-Queens II,"The n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.

Given an integer `n`, return the number of distinct solutions to the n-queens puzzle.


Example 1:
Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.


Example 2:
Input: n = 1
Output: 1

Constraints:
`1 <= n <= 9`",Hard,https://leetcode.com/problems/n-queens-ii,"Amazon,Zenefits",Backtracking,790,"[N-Queens, /problems/n-queens/, Hard]","the n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other. given an integer `n`, return the number of distinct solutions to the n-queens puzzle.",input: n = 4 output: 2 explanation: there are two distinct solutions to the 4-queens puzzle as shown. example 2: input: n = 1 output: 1,`1 <= n <= 9`,
53,Maximum Subarray,"Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.


Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23

Constraints:
`1 <= nums.length <= 3 * 104`
`-105 <= nums[i] <= 105`
Follow up: If you have figured out the `O(n)` solution, try coding another solution using the divide and conquer approach, which is more subtle.",Easy,https://leetcode.com/problems/maximum-subarray,"Microsoft,Amazon,Apple,LinkedIn,ByteDance,Google,Adobe,Cisco,Facebook,Oracle,Splunk,Bloomberg,Uber,Paypal,JPMorgan","Array,Divide and Conquer,Dynamic Programming",11458,"[Best Time to Buy and Sell Stock, /problems/best-time-to-buy-and-sell-stock/, Easy], [Maximum Product Subarray, /problems/maximum-product-subarray/, Medium], [Degree of an Array, /problems/degree-of-an-array/, Easy], [Longest Turbulent Subarray, /problems/longest-turbulent-subarray/, Medium], [Maximum Absolute Sum of Any Subarray, /problems/maximum-absolute-sum-of-any-subarray/, Medium], [Maximum Subarray Sum After One Operation, /problems/maximum-subarray-sum-after-one-operation/, Medium]","given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.","input: nums = [-2,1,-3,4,-1,2,1,-5,4] output: 6 explanation: [4,-1,2,1] has the largest sum = 6. example 2: input: nums = [1] output: 1 example 3: input: nums = [5,4,-1,7,8] output: 23",`1 <= nums.length <= 3 * 10^4` `-10^5 <= nums[i] <= 10^5`,"if you have figured out the `o(n)` solution, try coding another solution using the divide and conquer approach, which is more subtle."
54,Spiral Matrix,"Given an `m x n` `matrix`, return all elements of the `matrix` in spiral order.


Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 10`
`-100 <= matrix[i][j] <= 100`",Medium,https://leetcode.com/problems/spiral-matrix,"Microsoft,Apple,Intuit,Facebook,Google,Amazon,ByteDance,Expedia,Paypal,eBay",Array,3671,"[Spiral Matrix II, /problems/spiral-matrix-ii/, Medium], [Spiral Matrix III, /problems/spiral-matrix-iii/, Medium]","given an `m x n` `matrix`, return all elements of the `matrix` in spiral order.","input: matrix = [[1,2,3],[4,5,6],[7,8,9]] output: [1,2,3,6,9,8,7,4,5] example 2: input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]] output: [1,2,3,4,8,12,11,10,9,5,6,7]","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 10` `-10^0 <= matrix[i][j] <= 10^0`",
55,Jump Game,"Given an array of non-negative integers `nums`, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.


Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.


Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.


Constraints:
`1 <= nums.length <= 3 * 104`
`0 <= nums[i] <= 105`",Medium,https://leetcode.com/problems/jump-game,"Amazon,Apple,Facebook","Array,Greedy",6024,"[Jump Game II, /problems/jump-game-ii/, Medium], [Jump Game III, /problems/jump-game-iii/, Medium]","given an array of non-negative integers `nums`, you are initially positioned at the first index of the array. each element in the array represents your maximum jump length at that position. determine if you are able to reach the last index.","input: nums = [2,3,1,1,4] output: true explanation: jump 1 step from index 0 to 1, then 3 steps to the last index. example 2: input: nums = [3,2,1,0,4] output: false explanation: you will always arrive at index 3 no matter what. its maximum jump length is 0, which makes it impossible to reach the last index.",`1 <= nums.length <= 3 * 10^4` `0 <= nums[i] <= 10^5`,
56,Merge Intervals,"Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.


Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].


Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.


Constraints:
`1 <= intervals.length <= 104`
`intervals[i].length == 2`
`0 <= starti <= endi <= 104`",Medium,https://leetcode.com/problems/merge-intervals,"Facebook,JPMorgan,Amazon,Bloomberg,Apple,Google,Microsoft,Adobe,Uber,Twitter,eBay,Paypal,Cisco,Oracle,Yandex,Qualtrics,Palantir Technologies,Yahoo,Walmart Labs,VMware","Array,Sort",6955,"[Insert Interval, /problems/insert-interval/, Medium], [Meeting Rooms, /problems/meeting-rooms/, Easy], [Meeting Rooms II, /problems/meeting-rooms-ii/, Medium], [Teemo Attacking, /problems/teemo-attacking/, Medium], [Add Bold Tag in String, /problems/add-bold-tag-in-string/, Medium], [Range Module, /problems/range-module/, Hard], [Employee Free Time, /problems/employee-free-time/, Hard], [Partition Labels, /problems/partition-labels/, Medium], [Interval List Intersections, /problems/interval-list-intersections/, Medium]","given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.","input: intervals = [[1,3],[2,6],[8,10],[15,18]] output: [[1,6],[8,10],[15,18]] explanation: since intervals [1,3] and [2,6] overlaps, merge them into [1,6]. example 2: input: intervals = [[1,4],[4,5]] output: [[1,5]] explanation: intervals [1,4] and [4,5] are considered overlapping.",`1 <= intervals.length <= 10^4` `intervals[i].length == 2` `0 <= starti <= endi <= 10^4`,
57,Insert Interval,"Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.


Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval `[4,8]` overlaps with `[3,5],[6,7],[8,10]`.


Example 3:
Input: intervals = [], newInterval = [5,7]
Output: [[5,7]]

Example 4:
Input: intervals = [[1,5]], newInterval = [2,3]
Output: [[1,5]]

Example 5:
Input: intervals = [[1,5]], newInterval = [2,7]
Output: [[1,7]]

Constraints:
`0 <= intervals.length <= 104`
`intervals[i].length == 2`
`0 <= intervals[i][0] <= intervals[i][1] <= 105`
`intervals` is sorted by `intervals[i][0]` in ascending order.

`newInterval.length == 2`
`0 <= newInterval[0] <= newInterval[1] <= 105`",Medium,https://leetcode.com/problems/insert-interval,"Google,Twitter,Amazon,Apple,Facebook,Microsoft","Array,Sort",2753,"[Merge Intervals, /problems/merge-intervals/, Medium], [Range Module, /problems/range-module/, Hard]","given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary). you may assume that the intervals were initially sorted according to their start times.","input: intervals = [[1,3],[6,9]], newinterval = [2,5] output: [[1,5],[6,9]] example 2: input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newinterval = [4,8] output: [[1,2],[3,10],[12,16]] explanation: because the new interval `[4,8]` overlaps with `[3,5],[6,7],[8,10]`. example 3: input: intervals = [], newinterval = [5,7] output: [[5,7]] example 4: input: intervals = [[1,5]], newinterval = [2,3] output: [[1,5]] example 5: input: intervals = [[1,5]], newinterval = [2,7] output: [[1,7]]",`0 <= intervals.length <= 10^4` `intervals[i].length == 2` `0 <= intervals[i][0] <= intervals[i][1] <= 10^5` `intervals` is sorted by `intervals[i][0]` in ascending order. `newinterval.length == 2` `0 <= newinterval[0] <= newinterval[1] <= 10^5`,
58,Length of Last Word,"Given a string `s` consists of some words separated by spaces, return the length of the last word in the string. If the last word does not exist, return `0`.

A word is a maximal substring consisting of non-space characters only.


Example 1:
Input: s = ""Hello World""
Output: 5

Example 2:
Input: s = "" ""
Output: 0

Constraints:
`1 <= s.length <= 104`
`s` consists of only English letters and spaces `' '`.",Easy,https://leetcode.com/problems/length-of-last-word,"Google,Bloomberg",String,1041,,"given a string `s` consists of some words separated by spaces, return the length of the last word in the string. if the last word does not exist, return `0`. a word is a maximal substring consisting of non-space characters only.","input: s = ""hello world"" output: 5 example 2: input: s = "" "" output: 0",`1 <= s.length <= 10^4` `s` consists of only english letters and spaces `' '`.,
59,Spiral Matrix II,"Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order.


Example 1:
Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]

Example 2:
Input: n = 1
Output: [[1]]

Constraints:
`1 <= n <= 20`",Medium,https://leetcode.com/problems/spiral-matrix-ii,Microsoft,Array,1602,"[Spiral Matrix, /problems/spiral-matrix/, Medium], [Spiral Matrix III, /problems/spiral-matrix-iii/, Medium]","given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order.","input: n = 3 output: [[1,2,3],[8,9,4],[7,6,5]] example 2: input: n = 1 output: [[1]]",`1 <= n <= 20`,
60,Permutation Sequence,"The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for `n = 3`:
`""123""`
`""132""`
`""213""`
`""231""`
`""312""`
`""321""`
Given `n` and `k`, return the `kth` permutation sequence.


Example 1:
Input: n = 3, k = 3
Output: ""213""

Example 2:
Input: n = 4, k = 9
Output: ""2314""

Example 3:
Input: n = 3, k = 1
Output: ""123""

Constraints:
`1 <= n <= 9`
`1 <= k <= n!`",Hard,https://leetcode.com/problems/permutation-sequence,"Amazon,Adobe","Math,Backtracking",2152,"[Next Permutation, /problems/next-permutation/, Medium], [Permutations, /problems/permutations/, Medium]","the set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations. by listing and labeling all of the permutations in order, we get the following sequence for `n = 3`: `""123""` `""132""` `""213""` `""231""` `""312""` `""321""` given `n` and `k`, return the `kth` permutation sequence.","input: n = 3, k = 3 output: ""213"" example 2: input: n = 4, k = 9 output: ""2314"" example 3: input: n = 3, k = 1 output: ""123""",`1 <= n <= 9` `1 <= k <= n!`,
61,Rotate List,"Given the `head` of a linked list, rotate the list to the right by `k` places.


Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:
Input: head = [0,1,2], k = 4
Output: [2,0,1]

Constraints:
The number of nodes in the list is in the range `[0, 500]`.

`-100 <= Node.val <= 100`
`0 <= k <= 2 * 109`",Medium,https://leetcode.com/problems/rotate-list,"Amazon,Bloomberg,Microsoft,Apple","Linked List,Two Pointers",2242,"[Rotate Array, /problems/rotate-array/, Medium], [Split Linked List in Parts, /problems/split-linked-list-in-parts/, Medium]","given the `head` of a linked list, rotate the list to the right by `k` places.","input: head = [1,2,3,4,5], k = 2 output: [4,5,1,2,3] example 2: input: head = [0,1,2], k = 4 output: [2,0,1]","the number of nodes in the list is in the range `[0, 500]`. `-10^0 <= node.val <= 10^0` `0 <= k <= 2 * 10^9`",
62,Unique Paths,"A robot is located at the top-left corner of a `m x n` grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

Example 3:
Input: m = 7, n = 3
Output: 28

Example 4:
Input: m = 3, n = 3
Output: 6

Constraints:
`1 <= m, n <= 100`
It's guaranteed that the answer will be less than or equal to `2 * 109`.",Medium,https://leetcode.com/problems/unique-paths,"Microsoft,Amazon,Facebook,Google,Bloomberg,Qualtrics,VMware,Salesforce,ByteDance","Array,Dynamic Programming",4856,"[Unique Paths II, /problems/unique-paths-ii/, Medium], [Minimum Path Sum, /problems/minimum-path-sum/, Medium], [Dungeon Game, /problems/dungeon-game/, Hard]",a robot is located at the top-left corner of a `m x n` grid (marked 'start' in the diagram below). the robot can only move either down or right at any point in time. the robot is trying to reach the bottom-right corner of the grid (marked 'finish' in the diagram below). how many possible unique paths are there?,"input: m = 3, n = 7 output: 28 example 2: input: m = 3, n = 2 output: 3 explanation: from the top-left corner, there are a total of 3 ways to reach the bottom-right corner: 1. right -> down -> down 2. down -> down -> right 3. down -> right -> down example 3: input: m = 7, n = 3 output: 28 example 4: input: m = 3, n = 3 output: 6","`1 <= m, n <= 10^0` it's guaranteed that the answer will be less than or equal to `2 * 10^9`.",
63,Unique Paths II,"A robot is located at the top-left corner of a `m x n` grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and space is marked as `1` and `0` respectively in the grid.


Example 1:
Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.

There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Example 2:
Input: obstacleGrid = [[0,1],[0,0]]
Output: 1

Constraints:
`m == obstacleGrid.length`
`n == obstacleGrid[i].length`
`1 <= m, n <= 100`
`obstacleGrid[i][j]` is `0` or `1`.",Medium,https://leetcode.com/problems/unique-paths-ii,"Amazon,Bloomberg,Facebook,Microsoft","Array,Dynamic Programming",2603,"[Unique Paths, /problems/unique-paths/, Medium], [Unique Paths III, /problems/unique-paths-iii/, Hard]",a robot is located at the top-left corner of a `m x n` grid (marked 'start' in the diagram below). the robot can only move either down or right at any point in time. the robot is trying to reach the bottom-right corner of the grid (marked 'finish' in the diagram below). now consider if some obstacles are added to the grids. how many unique paths would there be? an obstacle and space is marked as `1` and `0` respectively in the grid.,"input: obstaclegrid = [[0,0,0],[0,1,0],[0,0,0]] output: 2 explanation: there is one obstacle in the middle of the 3x3 grid above. there are two ways to reach the bottom-right corner: 1. right -> right -> down -> down 2. down -> down -> right -> right example 2: input: obstaclegrid = [[0,1],[0,0]] output: 1","`m == obstaclegrid.length` `n == obstaclegrid[i].length` `1 <= m, n <= 10^0` `obstaclegrid[i][j]` is `0` or `1`.",
64,Minimum Path Sum,"Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.


Example 1:
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.


Example 2:
Input: grid = [[1,2,3],[4,5,6]]
Output: 12

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 200`
`0 <= grid[i][j] <= 100`",Medium,https://leetcode.com/problems/minimum-path-sum,"Google,Amazon,Goldman Sachs,Facebook,Apple,Snapchat,Tesla","Array,Dynamic Programming",4536,"[Unique Paths, /problems/unique-paths/, Medium], [Dungeon Game, /problems/dungeon-game/, Hard], [Cherry Pickup, /problems/cherry-pickup/, Hard]","given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path. note: you can only move either down or right at any point in time.","input: grid = [[1,3,1],[1,5,1],[4,2,1]] output: 7 explanation: because the path 1 → 3 → 1 → 1 → 1 minimizes the sum. example 2: input: grid = [[1,2,3],[4,5,6]] output: 12","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 200` `0 <= grid[i][j] <= 10^0`",
65,Valid Number,"A valid number can be split up into these components (in order):
A decimal number or an integer.

(Optional) An `'e'` or `'E'`, followed by an integer.

A decimal number can be split up into these components (in order):
(Optional) A sign character (either `'+'` or `'-'`).

One of the following formats:
	
At least one digit, followed by a dot `'.'`.

At least one digit, followed by a dot `'.'`, followed by at least one digit.

A dot `'.'`, followed by at least one digit.

An integer can be split up into these components (in order):
(Optional) A sign character (either `'+'` or `'-'`).

At least one digit.

For example, all the following are valid numbers: `[""2"", ""0089"", ""-0.1"", ""+3.14"", ""4."", ""-.9"", ""2e10"", ""-90E3"", ""3e+7"", ""+6e-1"", ""53.5e93"", ""-123.456e789""]`, while the following are not valid numbers: `[""abc"", ""1a"", ""1e"", ""e3"", ""99e2.5"", ""--6"", ""-+3"", ""95a54e53""]`.

Given a string `s`, return `true` if `s` is a valid number.


Example 1:
Input: s = ""0""
Output: true

Example 2:
Input: s = ""e""
Output: false

Example 3:
Input: s = "".""
Output: false

Example 4:
Input: s = "".1""
Output: true

Constraints:
`1 <= s.length <= 20`
`s` consists of only English letters (both uppercase and lowercase), digits (`0-9`), plus `'+'`, minus `'-'`, or dot `'.'`.",Hard,https://leetcode.com/problems/valid-number,"Facebook,LinkedIn,Oracle,Twitch","Math,String",902,"[String to Integer (atoi), /problems/string-to-integer-atoi/, Medium]","a valid number can be split up into these components (in order): a decimal number or an integer. (optional) an `'e'` or `'e'`, followed by an integer. a decimal number can be split up into these components (in order): (optional) a sign character (either `'+'` or `'-'`). one of the following formats: at least one digit, followed by a dot `'.'`. at least one digit, followed by a dot `'.'`, followed by at least one digit. a dot `'.'`, followed by at least one digit. an integer can be split up into these components (in order): (optional) a sign character (either `'+'` or `'-'`). at least one digit. for example, all the following are valid numbers: `[""2"", ""0089"", ""-0.1"", ""+3.14"", ""4."", ""-.9"", ""2e10"", ""-90e3"", ""3e+7"", ""+6e-1"", ""53.5e93"", ""-123.456e789""]`, while the following are not valid numbers: `[""abc"", ""1a"", ""1e"", ""e3"", ""99e2.5"", ""--6"", ""-+3"", ""95a54e53""]`. given a string `s`, return `true` if `s` is a valid number.","input: s = ""0"" output: true example 2: input: s = ""e"" output: false example 3: input: s = ""."" output: false example 4: input: s = "".1"" output: true","`1 <= s.length <= 20` `s` consists of only english letters (both uppercase and lowercase), digits (`0-9`), plus `'+'`, minus `'-'`, or dot `'.'`.",
66,Plus One,"Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.

The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.

You may assume the integer does not contain any leading zero, except the number 0 itself.


Example 1:
Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.


Example 2:
Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.


Example 3:
Input: digits = [0]
Output: [1]

Constraints:
`1 <= digits.length <= 100`
`0 <= digits[i] <= 9`",Easy,https://leetcode.com/problems/plus-one,"ByteDance,Facebook,Adobe,Amazon,Spotify,Google",Array,2251,"[Multiply Strings, /problems/multiply-strings/, Medium], [Add Binary, /problems/add-binary/, Easy], [Plus One Linked List, /problems/plus-one-linked-list/, Medium], [Add to Array-Form of Integer, /problems/add-to-array-form-of-integer/, Easy]","given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer. the digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit. you may assume the integer does not contain any leading zero, except the number 0 itself.","input: digits = [1,2,3] output: [1,2,4] explanation: the array represents the integer 123. example 2: input: digits = [4,3,2,1] output: [4,3,2,2] explanation: the array represents the integer 4321. example 3: input: digits = [0] output: [1]",`1 <= digits.length <= 10^0` `0 <= digits[i] <= 9`,
67,Add Binary,"Given two binary strings `a` and `b`, return their sum as a binary string.


Example 1:
Input: a = ""11"", b = ""1""
Output: ""100""

Example 2:
Input: a = ""1010"", b = ""1011""
Output: ""10101""

Constraints:
`1 <= a.length, b.length <= 104`
`a` and `b` consist only of `'0'` or `'1'` characters.

Each string does not contain leading zeros except for the zero itself.",Easy,https://leetcode.com/problems/add-binary,"Facebook,Amazon,ByteDance","Math,String",2668,"[Add Two Numbers, /problems/add-two-numbers/, Medium], [Multiply Strings, /problems/multiply-strings/, Medium], [Plus One, /problems/plus-one/, Easy], [Add to Array-Form of Integer, /problems/add-to-array-form-of-integer/, Easy]","given two binary strings `a` and `b`, return their sum as a binary string.","input: a = ""11"", b = ""1"" output: ""100"" example 2: input: a = ""1010"", b = ""1011"" output: ""10101""","`1 <= a.length, b.length <= 10^4` `a` and `b` consist only of `'0'` or `'1'` characters. each string does not contain leading zeros except for the zero itself.",
68,Text Justification,"Given an array of words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left justified and no extra space is inserted between words.

Note:
A word is defined as a character sequence consisting of non-space characters only.

Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.

The input array `words` contains at least one word.


Example 1:
Input: words = [""This"", ""is"", ""an"", ""example"", ""of"", ""text"", ""justification.""], maxWidth = 16
Output:
[
   ""This    is    an"",
   ""example  of text"",
   ""justification.  ""
]

Example 2:
Input: words = [""What"",""must"",""be"",""acknowledgment"",""shall"",""be""], maxWidth = 16
Output:
[
  ""What   must   be"",
  ""acknowledgment  "",
  ""shall be        ""
]
Explanation: Note that the last line is ""shall be    "" instead of ""shall     be"", because the last line must be left-justified instead of fully-justified.

Note that the second line is also left-justified becase it contains only one word.


Example 3:
Input: words = [""Science"",""is"",""what"",""we"",""understand"",""well"",""enough"",""to"",""explain"",""to"",""a"",""computer."",""Art"",""is"",""everything"",""else"",""we"",""do""], maxWidth = 20
Output:
[
  ""Science  is  what we"",
  ""understand      well"",
  ""enough to explain to"",
  ""a  computer.  Art is"",
  ""everything  else  we"",
  ""do                  ""
]

Constraints:
`1 <= words.length <= 300`
`1 <= words[i].length <= 20`
`words[i]` consists of only English letters and symbols.

`1 <= maxWidth <= 100`
`words[i].length <= maxWidth`",Hard,https://leetcode.com/problems/text-justification,"Intuit,Twilio,Uber,Karat,Indeed,Google,Amazon,Reddit,LinkedIn,Bloomberg,Microsoft,Twitter,Paypal,Apple,ByteDance,Databricks,Netflix,eBay",String,987,"[Rearrange Spaces Between Words, /problems/rearrange-spaces-between-words/, Easy]","given an array of words and a width maxwidth, format the text such that each line has exactly maxwidth characters and is fully (left and right) justified. you should pack your words in a greedy approach; that is, pack as many words as you can in each line. pad extra spaces `' '` when necessary so that each line has exactly maxwidth characters. extra spaces between words should be distributed as evenly as possible. if the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right. for the last line of text, it should be left justified and no extra space is inserted between words. note: a word is defined as a character sequence consisting of non-space characters only. each word's length is guaranteed to be greater than 0 and not exceed maxwidth. the input array `words` contains at least one word.","input: words = [""this"", ""is"", ""an"", ""example"", ""of"", ""text"", ""justification.""], maxwidth = 16 output: [ ""this is an"", ""example of text"", ""justification. "" ] example 2: input: words = [""what"",""must"",""be"",""acknowledgment"",""shall"",""be""], maxwidth = 16 output: [ ""what must be"", ""acknowledgment "", ""shall be "" ] explanation: note that the last line is ""shall be "" instead of ""shall be"", because the last line must be left-justified instead of fully-justified. note that the second line is also left-justified becase it contains only one word. example 3: input: words = [""science"",""is"",""what"",""we"",""understand"",""well"",""enough"",""to"",""explain"",""to"",""a"",""computer."",""art"",""is"",""everything"",""else"",""we"",""do""], maxwidth = 20 output: [ ""science is what we"", ""understand well"", ""enough to explain to"", ""a computer. art is"", ""everything else we"", ""do "" ]",`1 <= words.length <= 300` `1 <= words[i].length <= 20` `words[i]` consists of only english letters and symbols. `1 <= maxwidth <= 10^0` `words[i].length <= maxwidth`,
69,Sqrt(x),"Given a non-negative integer `x`, compute and return the square root of `x`.

Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.


Example 1:
Input: x = 4
Output: 2

Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.


Constraints:
`0 <= x <= 231 - 1`",Easy,https://leetcode.com/problems/sqrtx,"Microsoft,Bloomberg,Amazon,Uber,LinkedIn,Google","Math,Binary Search",1910,"[Pow(x, n), /problems/powx-n/, Medium], [Valid Perfect Square, /problems/valid-perfect-square/, Easy]","given a non-negative integer `x`, compute and return the square root of `x`. since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.","input: x = 4 output: 2 example 2: input: x = 8 output: 2 explanation: the square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.",`0 <= x <= 231 - 1`,
70,Climbing Stairs,"You are climbing a staircase. It takes `n` steps to reach the top.

Each time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.

1. 1 step + 1 step
2. 2 steps

Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.

1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Constraints:
`1 <= n <= 45`",Easy,https://leetcode.com/problems/climbing-stairs,"Expedia,Amazon,Apple,Adobe,Goldman Sachs,Google,Nvidia,Intuit",Dynamic Programming,6294,"[Min Cost Climbing Stairs, /problems/min-cost-climbing-stairs/, Easy], [Fibonacci Number, /problems/fibonacci-number/, Easy], [N-th Tribonacci Number, /problems/n-th-tribonacci-number/, Easy]",you are climbing a staircase. it takes `n` steps to reach the top. each time you can either climb `1` or `2` steps. in how many distinct ways can you climb to the top?,input: n = 2 output: 2 explanation: there are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps example 2: input: n = 3 output: 3 explanation: there are three ways to climb to the top. 1. 1 step + 1 step + 1 step 2. 1 step + 2 steps 3. 2 steps + 1 step,`1 <= n <= 45`,
71,Simplify Path,"Given a string `path`, which is an absolute path (starting with a slash `'/'`) to a file or directory in a Unix-style file system, convert it to the simplified canonical path.

In a Unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For this problem, any other format of periods such as `'...'` are treated as file/directory names.

The canonical path should have the following format:
The path starts with a single slash `'/'`.

Any two directories are separated by a single slash `'/'`.

The path does not end with a trailing `'/'`.

The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`)
Return the simplified canonical path.


Example 1:
Input: path = ""/home/""
Output: ""/home""
Explanation: Note that there is no trailing slash after the last directory name.


Example 2:
Input: path = ""/../""
Output: ""/""
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.


Example 3:
Input: path = ""/home//foo/""
Output: ""/home/foo""
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.


Example 4:
Input: path = ""/a/./b/../../c/""
Output: ""/c""

Constraints:
`1 <= path.length <= 3000`
`path` consists of English letters, digits, period `'.'`, slash `'/'` or `'_'`.

`path` is a valid absolute Unix path.",Medium,https://leetcode.com/problems/simplify-path,"Facebook,Google,Amazon,Microsoft","String,Stack",317,,"given a string `path`, which is an absolute path (starting with a slash `'/'`) to a file or directory in a unix-style file system, convert it to the simplified canonical path. in a unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. for this problem, any other format of periods such as `'...'` are treated as file/directory names. the canonical path should have the following format: the path starts with a single slash `'/'`. any two directories are separated by a single slash `'/'`. the path does not end with a trailing `'/'`. the path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`) return the simplified canonical path.","input: path = ""/home/"" output: ""/home"" explanation: note that there is no trailing slash after the last directory name. example 2: input: path = ""/../"" output: ""/"" explanation: going one level up from the root directory is a no-op, as the root level is the highest level you can go. example 3: input: path = ""/home//foo/"" output: ""/home/foo"" explanation: in the canonical path, multiple consecutive slashes are replaced by a single one. example 4: input: path = ""/a/./b/../../c/"" output: ""/c""","`1 <= path.length <= 3000` `path` consists of english letters, digits, period `'.'`, slash `'/'` or `'_'`. `path` is a valid absolute unix path.",
72,Edit Distance,"Given two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`.

You have the following three operations permitted on a word:
Insert a character
Delete a character
Replace a character

Example 1:
Input: word1 = ""horse"", word2 = ""ros""
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:
Input: word1 = ""intention"", word2 = ""execution""
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

Constraints:
`0 <= word1.length, word2.length <= 500`
`word1` and `word2` consist of lowercase English letters.",Hard,https://leetcode.com/problems/edit-distance,"Amazon,Microsoft,Google,Square,Palantir Technologies","String,Dynamic Programming",5416,"[One Edit Distance, /problems/one-edit-distance/, Medium], [Delete Operation for Two Strings, /problems/delete-operation-for-two-strings/, Medium], [Minimum ASCII Delete Sum for Two Strings, /problems/minimum-ascii-delete-sum-for-two-strings/, Medium], [Uncrossed Lines, /problems/uncrossed-lines/, Medium]","given two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`. you have the following three operations permitted on a word: insert a character delete a character replace a character","input: word1 = ""horse"", word2 = ""ros"" output: 3 explanation: horse -> rorse (replace 'h' with 'r') rorse -> rose (remove 'r') rose -> ros (remove 'e') example 2: input: word1 = ""intention"", word2 = ""execution"" output: 5 explanation: intention -> inention (remove 't') inention -> enention (replace 'i' with 'e') enention -> exention (replace 'n' with 'x') exention -> exection (replace 'n' with 'c') exection -> execution (insert 'u')","`0 <= word1.length, word2.length <= 500` `word1` and `word2` consist of lowercase english letters.",
73,Set Matrix Zeroes,"Given an `m x n` matrix. If an element is 0, set its entire row and column to 0. Do it in-place.

Follow up:
A straight forward solution using O(mn) space is probably a bad idea.

A simple improvement uses O(m + n) space, but still not the best solution.

Could you devise a constant space solution?

Example 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Example 2:
Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]

Constraints:
`m == matrix.length`
`n == matrix[0].length`
`1 <= m, n <= 200`
`-231 <= matrix[i][j] <= 231 - 1`",Medium,https://leetcode.com/problems/set-matrix-zeroes,"Facebook,Microsoft,Oracle,Amazon,Expedia,Bloomberg,Goldman Sachs,Apple",Array,3287,"[Game of Life, /problems/game-of-life/, Medium]","given an `m x n` matrix. if an element is 0, set its entire row and column to 0. do it in-place.","input: matrix = [[1,1,1],[1,0,1],[1,1,1]] output: [[1,0,1],[0,0,0],[1,0,1]] example 2: input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]] output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]","`m == matrix.length` `n == matrix[0].length` `1 <= m, n <= 200` `-231 <= matrix[i][j] <= 231 - 1`","a straight forward solution using o(mn) space is probably a bad idea. a simple improvement uses o(m + n) space, but still not the best solution. could you devise a constant space solution? example 1: input: matrix = [[1,1,1],[1,0,1],[1,1,1]] output: [[1,0,1],[0,0,0],[1,0,1]] example 2: input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]] output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]] constraints: `m == matrix.length` `n == matrix[0].length` `1 <= m, n <= 200` `-231 <= matrix[i][j] <= 231 - 1`"
74,Search a 2D Matrix,"Write an efficient algorithm that searches for a value in an `m x n` matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.

The first integer of each row is greater than the last integer of the previous row.


Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 100`
`-104 <= matrix[i][j], target <= 104`",Medium,https://leetcode.com/problems/search-a-2d-matrix,"Amazon,Facebook,Apple,Microsoft,Nvidia","Array,Binary Search",3110,"[Search a 2D Matrix II, /problems/search-a-2d-matrix-ii/, Medium]",write an efficient algorithm that searches for a value in an `m x n` matrix. this matrix has the following properties: integers in each row are sorted from left to right. the first integer of each row is greater than the last integer of the previous row.,"input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3 output: true example 2: input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13 output: false","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 10^0` `-10^4 <= matrix[i][j], target <= 10^4`",
75,Sort Colors,"Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.


Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

Example 3:
Input: nums = [0]
Output: [0]

Example 4:
Input: nums = [1]
Output: [1]

Constraints:
`n == nums.length`
`1 <= n <= 300`
`nums[i]` is `0`, `1`, or `2`.

Follow up:
Could you solve this problem without using the library's sort function?
Could you come up with a one-pass algorithm using only `O(1)` constant space?",Medium,https://leetcode.com/problems/sort-colors,"Microsoft,Facebook,eBay,Amazon,Oracle,Adobe,Nvidia,Expedia","Array,Two Pointers,Sort",5114,"[Sort List, /problems/sort-list/, Medium], [Wiggle Sort, /problems/wiggle-sort/, Medium], [Wiggle Sort II, /problems/wiggle-sort-ii/, Medium]","given an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue. we will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.","input: nums = [2,0,2,1,1,0] output: [0,0,1,1,2,2] example 2: input: nums = [2,0,1] output: [0,1,2] example 3: input: nums = [0] output: [0] example 4: input: nums = [1] output: [1]","`n == nums.length` `1 <= n <= 300` `nums[i]` is `0`, `1`, or `2`.",could you solve this problem without using the library's sort function? could you come up with a one-pass algorithm using only `o(1)` constant space?
76,Minimum Window Substring,"Given two strings `s` and `t`, return the minimum window in `s` which will contain all the characters in `t`. If there is no such window in `s` that covers all characters in `t`, return the empty string `""""`.

Note that If there is such a window, it is guaranteed that there will always be only one unique minimum window in `s`.


Example 1:
Input: s = ""ADOBECODEBANC"", t = ""ABC""
Output: ""BANC""

Example 2:
Input: s = ""a"", t = ""a""
Output: ""a""

Constraints:
`1 <= s.length, t.length <= 105`
`s` and `t` consist of English letters.

Follow up: Could you find an algorithm that runs in `O(n)` time?",Hard,https://leetcode.com/problems/minimum-window-substring,"Facebook,Amazon,Microsoft,Lyft,Apple,LinkedIn,Google,Uber,Bloomberg,Pinterest,Snapchat,Adobe,ByteDance","Hash Table,Two Pointers,String,Sliding Window",6350,"[Substring with Concatenation of All Words, /problems/substring-with-concatenation-of-all-words/, Hard], [Minimum Size Subarray Sum, /problems/minimum-size-subarray-sum/, Medium], [Sliding Window Maximum, /problems/sliding-window-maximum/, Hard], [Permutation in String, /problems/permutation-in-string/, Medium], [Smallest Range Covering Elements from K Lists, /problems/smallest-range-covering-elements-from-k-lists/, Hard], [Minimum Window Subsequence, /problems/minimum-window-subsequence/, Hard]","given two strings `s` and `t`, return the minimum window in `s` which will contain all the characters in `t`. if there is no such window in `s` that covers all characters in `t`, return the empty string `""""`. note that if there is such a window, it is guaranteed that there will always be only one unique minimum window in `s`.","input: s = ""adobecodebanc"", t = ""abc"" output: ""banc"" example 2: input: s = ""a"", t = ""a"" output: ""a""","`1 <= s.length, t.length <= 10^5` `s` and `t` consist of english letters.",could you find an algorithm that runs in `o(n)` time?
77,Combinations,"Given two integers `n` and `k`, return all possible combinations of `k` numbers out of the range `[1, n]`.

You may return the answer in any order.


Example 1:
Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Example 2:
Input: n = 1, k = 1
Output: [[1]]

Constraints:
`1 <= n <= 20`
`1 <= k <= n`",Medium,https://leetcode.com/problems/combinations,"Facebook,Amazon",Backtracking,2158,"[Combination Sum, /problems/combination-sum/, Medium], [Permutations, /problems/permutations/, Medium]","given two integers `n` and `k`, return all possible combinations of `k` numbers out of the range `[1, n]`. you may return the answer in any order.","input: n = 4, k = 2 output: [ [2,4], [3,4], [2,3], [1,2], [1,3], [1,4], ] example 2: input: n = 1, k = 1 output: [[1]]",`1 <= n <= 20` `1 <= k <= n`,
78,Subsets,"Given an integer array `nums` of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.


Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Constraints:
`1 <= nums.length <= 10`
`-10 <= nums[i] <= 10`
All the numbers of `nums` are unique.",Medium,https://leetcode.com/problems/subsets,"Facebook,Bloomberg,Amazon,Uber,Microsoft,Apple,ByteDance","Array,Backtracking,Bit Manipulation",5513,"[Subsets II, /problems/subsets-ii/, Medium], [Generalized Abbreviation, /problems/generalized-abbreviation/, Medium], [Letter Case Permutation, /problems/letter-case-permutation/, Medium]","given an integer array `nums` of unique elements, return all possible subsets (the power set). the solution set must not contain duplicate subsets. return the solution in any order.","input: nums = [1,2,3] output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]] example 2: input: nums = [0] output: [[],[0]]",`1 <= nums.length <= 10` `-10 <= nums[i] <= 10` all the numbers of `nums` are unique.,
79,Word Search,"Given an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.


Example 1:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCCED""
Output: true

Example 2:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""SEE""
Output: true

Example 3:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCB""
Output: false

Constraints:
`m == board.length`
`n = board[i].length`
`1 <= m, n <= 6`
`1 <= word.length <= 15`
`board` and `word` consists of only lowercase and uppercase English letters.

Follow up: Could you use search pruning to make your solution faster with a larger `board`?",Medium,https://leetcode.com/problems/word-search,"Amazon,Bloomberg,Intuit,Microsoft,Facebook,Snapchat,Apple,Oracle,eBay,Pinterest,Expedia","Array,Backtracking",5459,"[Word Search II, /problems/word-search-ii/, Hard]","given an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid. the word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. the same letter cell may not be used more than once.","input: board = [[""a"",""b"",""c"",""e""],[""s"",""f"",""c"",""s""],[""a"",""d"",""e"",""e""]], word = ""abcced"" output: true example 2: input: board = [[""a"",""b"",""c"",""e""],[""s"",""f"",""c"",""s""],[""a"",""d"",""e"",""e""]], word = ""see"" output: true example 3: input: board = [[""a"",""b"",""c"",""e""],[""s"",""f"",""c"",""s""],[""a"",""d"",""e"",""e""]], word = ""abcb"" output: false","`m == board.length` `n = board[i].length` `1 <= m, n <= 6` `1 <= word.length <= 15` `board` and `word` consists of only lowercase and uppercase english letters.",could you use search pruning to make your solution faster with a larger `board`?
80,Remove Duplicates from Sorted Array II,"Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.

Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.

Clarification:
Confused why the returned value is an integer, but your answer is an array?
Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller.

Internally you can think of this:
// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);
// any modification to nums in your function would be known by the caller.

// using the length returned by your function, it prints the first len elements.

for (int i = 0; i < len; i++) {
    print(nums[i]);
}

Example 1:
Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3]
Explanation: Your function should return length = `5`, with the first five elements of `nums` being `1, 1, 2, 2` and 3 respectively. It doesn't matter what you leave beyond the returned length.


Example 2:
Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3]
Explanation: Your function should return length = `7`, with the first seven elements of `nums` being modified to `0`, 0, 1, 1, 2, 3 and 3 respectively. It doesn't matter what values are set beyond the returned length.


Constraints:
`1 <= nums.length <= 3 * 104`
`-104 <= nums[i] <= 104`
`nums` is sorted in ascending order.",Medium,https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii,Microsoft,"Array,Two Pointers",1794,"[Remove Duplicates from Sorted Array, /problems/remove-duplicates-from-sorted-array/, Easy]","given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length. do not allocate extra space for another array; you must do this by modifying the input array in-place with o(1) extra memory. clarification: confused why the returned value is an integer, but your answer is an array? note that the input array is passed in by reference, which means a modification to the input array will be known to the caller. internally you can think of this: // nums is passed in by reference. (i.e., without making a copy) int len = removeduplicates(nums); // any modification to nums in your function would be known by the caller. // using the length returned by your function, it prints the first len elements. for (int i = 0; i < len; i++) { print(nums[i]); }","input: nums = [1,1,1,2,2,3] output: 5, nums = [1,1,2,2,3] explanation: your function should return length = `5`, with the first five elements of `nums` being `1, 1, 2, 2` and 3 respectively. it doesn't matter what you leave beyond the returned length. example 2: input: nums = [0,0,1,1,1,1,2,3,3] output: 7, nums = [0,0,1,1,2,3,3] explanation: your function should return length = `7`, with the first seven elements of `nums` being modified to `0`, 0, 1, 1, 2, 3 and 3 respectively. it doesn't matter what values are set beyond the returned length.",`1 <= nums.length <= 3 * 10^4` `-10^4 <= nums[i] <= 10^4` `nums` is sorted in ascending order.,
81,Search in Rotated Sorted Array II,"There is an integer array `nums` sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`.

Given the array `nums` after the rotation and an integer `target`, return `true` if `target` is in `nums`, or `false` if it is not in `nums`.


Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

Constraints:
`1 <= nums.length <= 5000`
`-104 <= nums[i] <= 104`
`nums` is guaranteed to be rotated at some pivot.

`-104 <= target <= 104`
Follow up: This problem is the same as Search in Rotated Sorted Array, where `nums` may contain duplicates. Would this affect the runtime complexity? How and why?",Medium,https://leetcode.com/problems/search-in-rotated-sorted-array-ii,Amazon,"Array,Binary Search",2045,"[Search in Rotated Sorted Array, /problems/search-in-rotated-sorted-array/, Medium]","there is an integer array `nums` sorted in non-decreasing order (not necessarily with distinct values). before being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). for example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`. given the array `nums` after the rotation and an integer `target`, return `true` if `target` is in `nums`, or `false` if it is not in `nums`.","input: nums = [2,5,6,0,0,1,2], target = 0 output: true example 2: input: nums = [2,5,6,0,0,1,2], target = 3 output: false",`1 <= nums.length <= 5000` `-10^4 <= nums[i] <= 10^4` `nums` is guaranteed to be rotated at some pivot. `-10^4 <= target <= 10^4`,"this problem is the same as search in rotated sorted array, where `nums` may contain duplicates. would this affect the runtime complexity? how and why?"
82,Remove Duplicates from Sorted List II,"Given the `head` of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.


Example 1:
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

Example 2:
Input: head = [1,1,1,2,3]
Output: [2,3]

Constraints:
The number of nodes in the list is in the range `[0, 300]`.

`-100 <= Node.val <= 100`
The list is guaranteed to be sorted in ascending order.",Medium,https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii,"Amazon,Bloomberg",Linked List,2818,"[Remove Duplicates from Sorted List, /problems/remove-duplicates-from-sorted-list/, Easy]","given the `head` of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. return the linked list sorted as well.","input: head = [1,2,3,3,4,4,5] output: [1,2,5] example 2: input: head = [1,1,1,2,3] output: [2,3]","the number of nodes in the list is in the range `[0, 300]`. `-10^0 <= node.val <= 10^0` the list is guaranteed to be sorted in ascending order.",
83,Remove Duplicates from Sorted List,"Given the `head` of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.


Example 1:
Input: head = [1,1,2]
Output: [1,2]

Example 2:
Input: head = [1,1,2,3,3]
Output: [1,2,3]

Constraints:
The number of nodes in the list is in the range `[0, 300]`.

`-100 <= Node.val <= 100`
The list is guaranteed to be sorted in ascending order.",Easy,https://leetcode.com/problems/remove-duplicates-from-sorted-list,"Amazon,Adobe,Goldman Sachs,Qualcomm",Linked List,2416,"[Remove Duplicates from Sorted List II, /problems/remove-duplicates-from-sorted-list-ii/, Medium]","given the `head` of a sorted linked list, delete all duplicates such that each element appears only once. return the linked list sorted as well.","input: head = [1,1,2] output: [1,2] example 2: input: head = [1,1,2,3,3] output: [1,2,3]","the number of nodes in the list is in the range `[0, 300]`. `-10^0 <= node.val <= 10^0` the list is guaranteed to be sorted in ascending order.",
84,Largest Rectangle in Histogram,"Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return the area of the largest rectangle in the histogram.


Example 1:
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.

The largest rectangle is shown in the red area, which has an area = 10 units.


Example 2:
Input: heights = [2,4]
Output: 4

Constraints:
`1 <= heights.length <= 105`
`0 <= heights[i] <= 104`",Hard,https://leetcode.com/problems/largest-rectangle-in-histogram,"Amazon,Microsoft,Adobe,MAQ Software","Array,Stack",5576,"[Maximal Rectangle, /problems/maximal-rectangle/, Hard], [Maximum Score of a Good Subarray, /problems/maximum-score-of-a-good-subarray/, Hard]","given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return the area of the largest rectangle in the histogram.","input: heights = [2,1,5,6,2,3] output: 10 explanation: the above is a histogram where width of each bar is 1. the largest rectangle is shown in the red area, which has an area = 10 units. example 2: input: heights = [2,4] output: 4",`1 <= heights.length <= 10^5` `0 <= heights[i] <= 10^4`,
85,Maximal Rectangle,"Given a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return its area.


Example 1:
Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.


Example 2:
Input: matrix = []
Output: 0

Example 3:
Input: matrix = [[""0""]]
Output: 0

Example 4:
Input: matrix = [[""1""]]
Output: 1

Example 5:
Input: matrix = [[""0"",""0""]]
Output: 0

Constraints:
`rows == matrix.length`
`cols == matrix[i].length`
`0 <= row, cols <= 200`
`matrix[i][j]` is `'0'` or `'1'`.",Hard,https://leetcode.com/problems/maximal-rectangle,"Google,Amazon,Adobe,Bloomberg,Apple","Array,Hash Table,Dynamic Programming,Stack",4086,"[Largest Rectangle in Histogram, /problems/largest-rectangle-in-histogram/, Hard], [Maximal Square, /problems/maximal-square/, Medium]","given a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return its area.","input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]] output: 6 explanation: the maximal rectangle is shown in the above picture. example 2: input: matrix = [] output: 0 example 3: input: matrix = [[""0""]] output: 0 example 4: input: matrix = [[""1""]] output: 1 example 5: input: matrix = [[""0"",""0""]] output: 0","`rows == matrix.length` `cols == matrix[i].length` `0 <= row, cols <= 200` `matrix[i][j]` is `'0'` or `'1'`.",
86,Partition List,"Given the `head` of a linked list and a value `x`, partition it such that all nodes less than `x` come before nodes greater than or equal to `x`.

You should preserve the original relative order of the nodes in each of the two partitions.


Example 1:
Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Example 2:
Input: head = [2,1], x = 2
Output: [1,2]

Constraints:
The number of nodes in the list is in the range `[0, 200]`.

`-100 <= Node.val <= 100`
`-200 <= x <= 200`",Medium,https://leetcode.com/problems/partition-list,"Microsoft,Amazon,Apple,Bloomberg,Facebook","Linked List,Two Pointers",1957,,"given the `head` of a linked list and a value `x`, partition it such that all nodes less than `x` come before nodes greater than or equal to `x`. you should preserve the original relative order of the nodes in each of the two partitions.","input: head = [1,4,3,2,5,2], x = 3 output: [1,2,2,4,3,5] example 2: input: head = [2,1], x = 2 output: [1,2]","the number of nodes in the list is in the range `[0, 200]`. `-10^0 <= node.val <= 10^0` `-200 <= x <= 200`",
87,Scramble String,"We can scramble a string s to get a string t using the following algorithm:
If the length of the string is 1, stop.

If the length of the string is > 1, do the following:
	
Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`.

Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`.

Apply step 1 recursively on each of the two substrings `x` and `y`.

Given two strings `s1` and `s2` of the same length, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`.


Example 1:
Input: s1 = ""great"", s2 = ""rgeat""
Output: true
Explanation: One possible scenario applied on s1 is:
""great"" --> ""gr/eat"" // divide at random index.

""gr/eat"" --> ""gr/eat"" // random decision is not to swap the two substrings and keep them in order.

""gr/eat"" --> ""g/r / e/at"" // apply the same algorithm recursively on both substrings. divide at ranom index each of them.

""g/r / e/at"" --> ""r/g / e/at"" // random decision was to swap the first substring and to keep the second substring in the same order.

""r/g / e/at"" --> ""r/g / e/ a/t"" // again apply the algorithm recursively, divide ""at"" to ""a/t"".

""r/g / e/ a/t"" --> ""r/g / e/ a/t"" // random decision is to keep both substrings in the same order.

The algorithm stops now and the result string is ""rgeat"" which is s2.

As there is one possible scenario that led s1 to be scrambled to s2, we return true.


Example 2:
Input: s1 = ""abcde"", s2 = ""caebd""
Output: false

Example 3:
Input: s1 = ""a"", s2 = ""a""
Output: true

Constraints:
`s1.length == s2.length`
`1 <= s1.length <= 30`
`s1` and `s2` consist of lower-case English letters.",Hard,https://leetcode.com/problems/scramble-string,Apple,"String,Dynamic Programming",760,,"we can scramble a string s to get a string t using the following algorithm: if the length of the string is 1, stop. if the length of the string is > 1, do the following: split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`. randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`. apply step 1 recursively on each of the two substrings `x` and `y`. given two strings `s1` and `s2` of the same length, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`.","input: s1 = ""great"", s2 = ""rgeat"" output: true explanation: one possible scenario applied on s1 is: ""great"" --> ""gr/eat"" // divide at random index. ""gr/eat"" --> ""gr/eat"" // random decision is not to swap the two substrings and keep them in order. ""gr/eat"" --> ""g/r / e/at"" // apply the same algorithm recursively on both substrings. divide at ranom index each of them. ""g/r / e/at"" --> ""r/g / e/at"" // random decision was to swap the first substring and to keep the second substring in the same order. ""r/g / e/at"" --> ""r/g / e/ a/t"" // again apply the algorithm recursively, divide ""at"" to ""a/t"". ""r/g / e/ a/t"" --> ""r/g / e/ a/t"" // random decision is to keep both substrings in the same order. the algorithm stops now and the result string is ""rgeat"" which is s2. as there is one possible scenario that led s1 to be scrambled to s2, we return true. example 2: input: s1 = ""abcde"", s2 = ""caebd"" output: false example 3: input: s1 = ""a"", s2 = ""a"" output: true",`s1.length == s2.length` `1 <= s1.length <= 30` `s1` and `s2` consist of lower-case english letters.,
88,Merge Sorted Array,"Given two sorted integer arrays `nums1` and `nums2`, merge `nums2` into `nums1` as one sorted array.

The number of elements initialized in `nums1` and `nums2` are `m` and `n` respectively. You may assume that `nums1` has a size equal to `m + n` such that it has enough space to hold additional elements from `nums2`.


Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

Example 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]

Constraints:
`nums1.length == m + n`
`nums2.length == n`
`0 <= m, n <= 200`
`1 <= m + n <= 200`
`-109 <= nums1[i], nums2[i] <= 109`",Easy,https://leetcode.com/problems/merge-sorted-array,"Facebook,Microsoft,Amazon,Bloomberg,Walmart Labs,IBM,Oracle,Apple,LinkedIn,Goldman Sachs,Yandex,Wish","Array,Two Pointers",3612,"[Merge Two Sorted Lists, /problems/merge-two-sorted-lists/, Easy], [Squares of a Sorted Array, /problems/squares-of-a-sorted-array/, Easy], [Interval List Intersections, /problems/interval-list-intersections/, Medium]","given two sorted integer arrays `nums1` and `nums2`, merge `nums2` into `nums1` as one sorted array. the number of elements initialized in `nums1` and `nums2` are `m` and `n` respectively. you may assume that `nums1` has a size equal to `m + n` such that it has enough space to hold additional elements from `nums2`.","input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3 output: [1,2,2,3,5,6] example 2: input: nums1 = [1], m = 1, nums2 = [], n = 0 output: [1]","`nums1.length == m + n` `nums2.length == n` `0 <= m, n <= 200` `1 <= m + n <= 200` `-10^9 <= nums1[i], nums2[i] <= 10^9`",
89,Gray Code,"The gray code is a binary numeral system where two successive values differ in only one bit.

Given an integer `n` representing the total number of bits in the code, return any sequence of gray code.

A gray code sequence must begin with `0`.


Example 1:
Input: n = 2
Output: [0,1,3,2]
Explanation:
00 - 0
01 - 1
11 - 3
10 - 2
[0,2,3,1] is also a valid gray code sequence.

00 - 0
10 - 2
11 - 3
01 - 1

Example 2:
Input: n = 1
Output: [0,1]

Constraints:
`1 <= n <= 16`",Medium,https://leetcode.com/problems/gray-code,Microsoft,Backtracking,811,"[1-bit and 2-bit Characters, /problems/1-bit-and-2-bit-characters/, Easy]","the gray code is a binary numeral system where two successive values differ in only one bit. given an integer `n` representing the total number of bits in the code, return any sequence of gray code. a gray code sequence must begin with `0`.","input: n = 2 output: [0,1,3,2] explanation: 00 - 0 01 - 1 11 - 3 10 - 2 [0,2,3,1] is also a valid gray code sequence. 00 - 0 10 - 2 11 - 3 01 - 1 example 2: input: n = 1 output: [0,1]",`1 <= n <= 16`,
90,Subsets II,"Given an integer array `nums` that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.


Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Constraints:
`1 <= nums.length <= 10`
`-10 <= nums[i] <= 10`",Medium,https://leetcode.com/problems/subsets-ii,"Amazon,ByteDance","Array,Backtracking",2394,"[Subsets, /problems/subsets/, Medium]","given an integer array `nums` that may contain duplicates, return all possible subsets (the power set). the solution set must not contain duplicate subsets. return the solution in any order.","input: nums = [1,2,2] output: [[],[1],[1,2],[1,2,2],[2],[2,2]] example 2: input: nums = [0] output: [[],[0]]",`1 <= nums.length <= 10` `-10 <= nums[i] <= 10`,
91,Decode Ways,"A message containing letters from `A-Z` can be encoded into numbers using the following mapping:
'A' -> ""1""
'B' -> ""2""
...

'Z' -> ""26""
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `""11106""` can be mapped into:
`""AAJF""` with the grouping `(1 1 10 6)`
`""KJF""` with the grouping `(11 10 6)`
Note that the grouping `(1 11 06)` is invalid because `""06""` cannot be mapped into `'F'` since `""6""` is different from `""06""`.

Given a string `s` containing only digits, return the number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer.


Example 1:
Input: s = ""12""
Output: 2
Explanation: ""12"" could be decoded as ""AB"" (1 2) or ""L"" (12).


Example 2:
Input: s = ""226""
Output: 3
Explanation: ""226"" could be decoded as ""BZ"" (2 26), ""VF"" (22 6), or ""BBF"" (2 2 6).


Example 3:
Input: s = ""0""
Output: 0
Explanation: There is no character that is mapped to a number starting with 0.

The only valid mappings with 0 are 'J' -> ""10"" and 'T' -> ""20"", neither of which start with 0.

Hence, there are no valid ways to decode this since all digits need to be mapped.


Example 4:
Input: s = ""06""
Output: 0
Explanation: ""06"" cannot be mapped to ""F"" because of the leading zero (""6"" is different from ""06"").


Constraints:
`1 <= s.length <= 100`
`s` contains only digits and may contain leading zero(s).",Medium,https://leetcode.com/problems/decode-ways,"JPMorgan,Facebook,Google,Cisco,Amazon,Lyft,Microsoft,Goldman Sachs,ByteDance,Apple,Uber,Adobe","String,Dynamic Programming",4177,"[Decode Ways II, /problems/decode-ways-ii/, Hard]","a message containing letters from `a-z` can be encoded into numbers using the following mapping: 'a' -> ""1"" 'b' -> ""2"" ... 'z' -> ""26"" to decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). for example, `""11106""` can be mapped into: `""aajf""` with the grouping `(1 1 10 6)` `""kjf""` with the grouping `(11 10 6)` note that the grouping `(1 11 06)` is invalid because `""06""` cannot be mapped into `'f'` since `""6""` is different from `""06""`. given a string `s` containing only digits, return the number of ways to decode it. the answer is guaranteed to fit in a 32-bit integer.","input: s = ""12"" output: 2 explanation: ""12"" could be decoded as ""ab"" (1 2) or ""l"" (12). example 2: input: s = ""226"" output: 3 explanation: ""226"" could be decoded as ""bz"" (2 26), ""vf"" (22 6), or ""bbf"" (2 2 6). example 3: input: s = ""0"" output: 0 explanation: there is no character that is mapped to a number starting with 0. the only valid mappings with 0 are 'j' -> ""10"" and 't' -> ""20"", neither of which start with 0. hence, there are no valid ways to decode this since all digits need to be mapped. example 4: input: s = ""06"" output: 0 explanation: ""06"" cannot be mapped to ""f"" because of the leading zero (""6"" is different from ""06"").",`1 <= s.length <= 10^0` `s` contains only digits and may contain leading zero(s).,
92,Reverse Linked List II,"Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.


Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]

Constraints:
The number of nodes in the list is `n`.

`1 <= n <= 500`
`-500 <= Node.val <= 500`
`1 <= left <= right <= n`
Follow up: Could you do it in one pass?",Medium,https://leetcode.com/problems/reverse-linked-list-ii,"Amazon,Facebook,Microsoft,Oracle,ByteDance",Linked List,3501,"[Reverse Linked List, /problems/reverse-linked-list/, Easy]","given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.","input: head = [1,2,3,4,5], left = 2, right = 4 output: [1,4,3,2,5] example 2: input: head = [5], left = 1, right = 1 output: [5]",the number of nodes in the list is `n`. `1 <= n <= 500` `-500 <= node.val <= 500` `1 <= left <= right <= n`,could you do it in one pass?
93,Restore IP Addresses,"Given a string `s` containing only digits, return all possible valid IP addresses that can be obtained from `s`. You can return them in any order.

A valid IP address consists of exactly four integers, each integer is between `0` and `255`, separated by single dots and cannot have leading zeros. For example, ""0.1.2.201"" and ""192.168.1.1"" are valid IP addresses and ""0.011.255.245"", ""192.168.1.312"" and ""192.168@1.1"" are invalid IP addresses. 

Example 1:
Input: s = ""25525511135""
Output: [""255.255.11.135"",""255.255.111.35""]

Example 2:
Input: s = ""0000""
Output: [""0.0.0.0""]

Example 3:
Input: s = ""1111""
Output: [""1.1.1.1""]

Example 4:
Input: s = ""010010""
Output: [""0.10.0.10"",""0.100.1.0""]

Example 5:
Input: s = ""101023""
Output: [""1.0.10.23"",""1.0.102.3"",""10.1.0.23"",""10.10.2.3"",""101.0.2.3""]

Constraints:
`0 <= s.length <= 3000`
`s` consists of digits only.",Medium,https://leetcode.com/problems/restore-ip-addresses,"Microsoft,Oracle","String,Backtracking",1718,"[IP to CIDR, /problems/ip-to-cidr/, Medium]","given a string `s` containing only digits, return all possible valid ip addresses that can be obtained from `s`. you can return them in any order. a valid ip address consists of exactly four integers, each integer is between `0` and `255`, separated by single dots and cannot have leading zeros. for example, ""0.1.2.201"" and ""192.168.1.1"" are valid ip addresses and ""0.011.255.245"", ""192.168.1.312"" and ""192.168@1.1"" are invalid ip addresses.","input: s = ""25525511135"" output: [""255.255.11.135"",""255.255.111.35""] example 2: input: s = ""0000"" output: [""0.0.0.0""] example 3: input: s = ""1111"" output: [""1.1.1.1""] example 4: input: s = ""010010"" output: [""0.10.0.10"",""0.100.1.0""] example 5: input: s = ""101023"" output: [""1.0.10.23"",""1.0.102.3"",""10.1.0.23"",""10.10.2.3"",""101.0.2.3""]",`0 <= s.length <= 3000` `s` consists of digits only.,
94,Binary Tree Inorder Traversal,"Given the `root` of a binary tree, return the inorder traversal of its nodes' values.


Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [2,1]

Example 5:
Input: root = [1,null,2]
Output: [1,2]

Constraints:
The number of nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`
Follow up:
Recursive solution is trivial, could you do it iteratively?",Medium,https://leetcode.com/problems/binary-tree-inorder-traversal,"Microsoft,Facebook,Oracle,Amazon,Google","Hash Table,Stack,Tree",4528,"[Validate Binary Search Tree, /problems/validate-binary-search-tree/, Medium], [Binary Tree Preorder Traversal, /problems/binary-tree-preorder-traversal/, Medium], [Binary Tree Postorder Traversal, /problems/binary-tree-postorder-traversal/, Medium], [Binary Search Tree Iterator, /problems/binary-search-tree-iterator/, Medium], [Kth Smallest Element in a BST, /problems/kth-smallest-element-in-a-bst/, Medium], [Closest Binary Search Tree Value II, /problems/closest-binary-search-tree-value-ii/, Hard], [Inorder Successor in BST, /problems/inorder-successor-in-bst/, Medium], [Convert Binary Search Tree to Sorted Doubly Linked List, /problems/convert-binary-search-tree-to-sorted-doubly-linked-list/, Medium], [Minimum Distance Between BST Nodes, /problems/minimum-distance-between-bst-nodes/, Easy]","given the `root` of a binary tree, return the inorder traversal of its nodes' values.","input: root = [1,null,2,3] output: [1,3,2] example 2: input: root = [] output: [] example 3: input: root = [1] output: [1] example 4: input: root = [1,2] output: [2,1] example 5: input: root = [1,null,2] output: [1,2]","the number of nodes in the tree is in the range `[0, 10^0]`. `-10^0 <= node.val <= 10^0`","recursive solution is trivial, could you do it iteratively?"
95,Unique Binary Search Trees II,"Given an integer `n`, return all the structurally unique BST's (binary search trees), which has exactly `n` nodes of unique values from `1` to `n`. Return the answer in any order.


Example 1:
Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]

Example 2:
Input: n = 1
Output: [[1]]

Constraints:
`1 <= n <= 8`",Medium,https://leetcode.com/problems/unique-binary-search-trees-ii,"Amazon,Google","Dynamic Programming,Tree",2977,"[Unique Binary Search Trees, /problems/unique-binary-search-trees/, Medium], [Different Ways to Add Parentheses, /problems/different-ways-to-add-parentheses/, Medium]","given an integer `n`, return all the structurally unique bst's (binary search trees), which has exactly `n` nodes of unique values from `1` to `n`. return the answer in any order.","input: n = 3 output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]] example 2: input: n = 1 output: [[1]]",`1 <= n <= 8`,
96,Unique Binary Search Trees,"Given an integer `n`, return the number of structurally unique BST's (binary search trees) which has exactly `n` nodes of unique values from `1` to `n`.


Example 1:
Input: n = 3
Output: 5

Example 2:
Input: n = 1
Output: 1

Constraints:
`1 <= n <= 19`",Medium,https://leetcode.com/problems/unique-binary-search-trees,"Microsoft,Bloomberg","Dynamic Programming,Tree",4491,"[Unique Binary Search Trees II, /problems/unique-binary-search-trees-ii/, Medium]","given an integer `n`, return the number of structurally unique bst's (binary search trees) which has exactly `n` nodes of unique values from `1` to `n`.",input: n = 3 output: 5 example 2: input: n = 1 output: 1,`1 <= n <= 19`,
97,Interleaving String,"Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an interleaving of `s1` and `s2`.

An interleaving of two strings `s` and `t` is a configuration where they are divided into non-empty substrings such that:
`s = s1 + s2 + ... + sn`
`t = t1 + t2 + ... + tm`
`|n - m| <= 1`
The interleaving is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`
Note: `a + b` is the concatenation of strings `a` and `b`.


Example 1:
Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbcbcac""
Output: true

Example 2:
Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbbaccc""
Output: false

Example 3:
Input: s1 = """", s2 = """", s3 = """"
Output: true

Constraints:
`0 <= s1.length, s2.length <= 100`
`0 <= s3.length <= 200`
`s1`, `s2`, and `s3` consist of lowercase English letters.

Follow up: Could you solve it using only `O(s2.length)` additional memory space?",Medium,https://leetcode.com/problems/interleaving-string,"Microsoft,Apple,Coupang","String,Dynamic Programming",1962,,"given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an interleaving of `s1` and `s2`. an interleaving of two strings `s` and `t` is a configuration where they are divided into non-empty substrings such that: `s = s1 + s2 + ... + sn` `t = t1 + t2 + ... + tm` `|n - m| <= 1` the interleaving is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...` note: `a + b` is the concatenation of strings `a` and `b`.","input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbcbcac"" output: true example 2: input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbbaccc"" output: false example 3: input: s1 = """", s2 = """", s3 = """" output: true","`0 <= s1.length, s2.length <= 10^0` `0 <= s3.length <= 200` `s1`, `s2`, and `s3` consist of lowercase english letters.",could you solve it using only `o(s2.length)` additional memory space?
98,Validate Binary Search Tree,"Given the `root` of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.

The right subtree of a node contains only nodes with keys greater than the node's key.

Both the left and right subtrees must also be binary search trees.


Example 1:
Input: root = [2,1,3]
Output: true

Example 2:
Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-231 <= Node.val <= 231 - 1`",Medium,https://leetcode.com/problems/validate-binary-search-tree,,,5790,,"given the `root` of a binary tree, determine if it is a valid binary search tree (bst). a valid bst is defined as follows: the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees.","input: root = [2,1,3] output: true example 2: input: root = [5,1,4,null,null,3,6] output: false explanation: the root node's value is 5 but its right child's value is 4.","the number of nodes in the tree is in the range `[1, 10^4]`. `-231 <= node.val <= 231 - 1`",
99,Recover Binary Search Tree,"You are given the `root` of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

Follow up: A solution using `O(n)` space is pretty straight forward. Could you devise a constant space solution?

Example 1:
Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.


Example 2:
Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.


Constraints:
The number of nodes in the tree is in the range `[2, 1000]`.

`-231 <= Node.val <= 231 - 1`",Hard,https://leetcode.com/problems/recover-binary-search-tree,"Oracle,Amazon,Microsoft,Uber","Tree,Depth-first Search",2361,,"you are given the `root` of a binary search tree (bst), where exactly two nodes of the tree were swapped by mistake. recover the tree without changing its structure.","input: root = [1,3,null,null,2] output: [3,1,null,null,2] explanation: 3 cannot be a left child of 1 because 3 > 1. swapping 1 and 3 makes the bst valid. example 2: input: root = [3,1,4,null,null,2] output: [2,1,4,null,null,3] explanation: 2 cannot be in the right subtree of 3 because 2 < 3. swapping 2 and 3 makes the bst valid.","the number of nodes in the tree is in the range `[2, 1000]`. `-231 <= node.val <= 231 - 1`","a solution using `o(n)` space is pretty straight forward. could you devise a constant space solution? example 1: input: root = [1,3,null,null,2] output: [3,1,null,null,2] explanation: 3 cannot be a left child of 1 because 3 > 1. swapping 1 and 3 makes the bst valid. example 2: input: root = [3,1,4,null,null,2] output: [2,1,4,null,null,3] explanation: 2 cannot be in the right subtree of 3 because 2 < 3. swapping 2 and 3 makes the bst valid. constraints: the number of nodes in the tree is in the range `[2, 1000]`. `-231 <= node.val <= 231 - 1`"
100,Same Tree,"Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.


Example 1:
Input: p = [1,2,3], q = [1,2,3]
Output: true

Example 2:
Input: p = [1,2], q = [1,null,2]
Output: false

Example 3:
Input: p = [1,2,1], q = [1,1,2]
Output: false

Constraints:
The number of nodes in both trees is in the range `[0, 100]`.

`-104 <= Node.val <= 104`",Easy,https://leetcode.com/problems/same-tree,"Amazon,Google,Microsoft,Apple","Tree,Depth-first Search",3109,,"given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not. two binary trees are considered the same if they are structurally identical, and the nodes have the same value.","input: p = [1,2,3], q = [1,2,3] output: true example 2: input: p = [1,2], q = [1,null,2] output: false example 3: input: p = [1,2,1], q = [1,1,2] output: false","the number of nodes in both trees is in the range `[0, 10^0]`. `-10^4 <= node.val <= 10^4`",
101,Symmetric Tree,"Given the `root` of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).


Example 1:
Input: root = [1,2,2,3,4,4,3]
Output: true

Example 2:
Input: root = [1,2,2,null,3,null,3]
Output: false

Constraints:
The number of nodes in the tree is in the range `[1, 1000]`.

`-100 <= Node.val <= 100`
Follow up: Could you solve it both recursively and iteratively?",Easy,https://leetcode.com/problems/symmetric-tree,"Capital One,Amazon,Yandex,Apple,Uber,Google,Microsoft","Tree,Depth-first Search,Breadth-first Search",5900,,"given the `root` of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).","input: root = [1,2,2,3,4,4,3] output: true example 2: input: root = [1,2,2,null,3,null,3] output: false","the number of nodes in the tree is in the range `[1, 1000]`. `-10^0 <= node.val <= 10^0`",could you solve it both recursively and iteratively?
102,Binary Tree Level Order Traversal,"Given the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 2000]`.

`-1000 <= Node.val <= 1000`",Medium,https://leetcode.com/problems/binary-tree-level-order-traversal,"Bloomberg,Amazon,Facebook,Microsoft,LinkedIn,Adobe,Paypal,Google,Uber,Yahoo","Tree,Breadth-first Search",4482,"[Binary Tree Zigzag Level Order Traversal, /problems/binary-tree-zigzag-level-order-traversal/, Medium], [Binary Tree Level Order Traversal II, /problems/binary-tree-level-order-traversal-ii/, Medium], [Minimum Depth of Binary Tree, /problems/minimum-depth-of-binary-tree/, Easy], [Binary Tree Vertical Order Traversal, /problems/binary-tree-vertical-order-traversal/, Medium], [Average of Levels in Binary Tree, /problems/average-of-levels-in-binary-tree/, Easy], [N-ary Tree Level Order Traversal, /problems/n-ary-tree-level-order-traversal/, Medium], [Cousins in Binary Tree, /problems/cousins-in-binary-tree/, Easy]","given the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).","input: root = [3,9,20,null,null,15,7] output: [[3],[9,20],[15,7]] example 2: input: root = [1] output: [[1]] example 3: input: root = [] output: []","the number of nodes in the tree is in the range `[0, 2000]`. `-1000 <= node.val <= 1000`",
103,Binary Tree Zigzag Level Order Traversal,"Given the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 2000]`.

`-100 <= Node.val <= 100`",Medium,https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal,"Amazon,Microsoft,Bloomberg,Apple,Facebook,Qualtrics,eBay,Adobe,ByteDance,Google,Goldman Sachs,ServiceNow,Oracle","Stack,Tree,Breadth-first Search",3290,"[Binary Tree Level Order Traversal, /problems/binary-tree-level-order-traversal/, Medium]","given the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).","input: root = [3,9,20,null,null,15,7] output: [[3],[20,9],[15,7]] example 2: input: root = [1] output: [[1]] example 3: input: root = [] output: []","the number of nodes in the tree is in the range `[0, 2000]`. `-10^0 <= node.val <= 10^0`",
104,Maximum Depth of Binary Tree,"Given the `root` of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 3

Example 2:
Input: root = [1,null,2]
Output: 2

Example 3:
Input: root = []
Output: 0

Example 4:
Input: root = [0]
Output: 1

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-100 <= Node.val <= 100`",Easy,https://leetcode.com/problems/maximum-depth-of-binary-tree,"LinkedIn,Amazon,Intel","Tree,Depth-first Search,Recursion",3779,"[Balanced Binary Tree, /problems/balanced-binary-tree/, Easy], [Minimum Depth of Binary Tree, /problems/minimum-depth-of-binary-tree/, Easy], [Maximum Depth of N-ary Tree, /problems/maximum-depth-of-n-ary-tree/, Easy], [Time Needed to Inform All Employees, /problems/time-needed-to-inform-all-employees/, Medium]","given the `root` of a binary tree, return its maximum depth. a binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.","input: root = [3,9,20,null,null,15,7] output: 3 example 2: input: root = [1,null,2] output: 2 example 3: input: root = [] output: 0 example 4: input: root = [0] output: 1","the number of nodes in the tree is in the range `[0, 10^4]`. `-10^0 <= node.val <= 10^0`",
105,Construct Binary Tree from Preorder and Inorder Traversal,"Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.


Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
Output: [-1]

Constraints:
`1 <= preorder.length <= 3000`
`inorder.length == preorder.length`
`-3000 <= preorder[i], inorder[i] <= 3000`
`preorder` and `inorder` consist of unique values.

Each value of `inorder` also appears in `preorder`.

`preorder` is guaranteed to be the preorder traversal of the tree.

`inorder` is guaranteed to be the inorder traversal of the tree.",Medium,https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal,"Amazon,Microsoft,Facebook,ByteDance,Citadel,Bloomberg,Oracle","Array,Tree,Depth-first Search",4983,"[Construct Binary Tree from Inorder and Postorder Traversal, /problems/construct-binary-tree-from-inorder-and-postorder-traversal/, Medium]","given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.","input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7] output: [3,9,20,null,null,15,7] example 2: input: preorder = [-1], inorder = [-1] output: [-1]","`1 <= preorder.length <= 3000` `inorder.length == preorder.length` `-3000 <= preorder[i], inorder[i] <= 3000` `preorder` and `inorder` consist of unique values. each value of `inorder` also appears in `preorder`. `preorder` is guaranteed to be the preorder traversal of the tree. `inorder` is guaranteed to be the inorder traversal of the tree.",
106,Construct Binary Tree from Inorder and Postorder Traversal,"Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return the binary tree.


Example 1:
Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: inorder = [-1], postorder = [-1]
Output: [-1]

Constraints:
`1 <= inorder.length <= 3000`
`postorder.length == inorder.length`
`-3000 <= inorder[i], postorder[i] <= 3000`
`inorder` and `postorder` consist of unique values.

Each value of `postorder` also appears in `inorder`.

`inorder` is guaranteed to be the inorder traversal of the tree.

`postorder` is guaranteed to be the postorder traversal of the tree.",Medium,https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal,"Bloomberg,Microsoft,Google","Array,Tree,Depth-first Search",2555,"[Construct Binary Tree from Preorder and Inorder Traversal, /problems/construct-binary-tree-from-preorder-and-inorder-traversal/, Medium]","given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return the binary tree.","input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3] output: [3,9,20,null,null,15,7] example 2: input: inorder = [-1], postorder = [-1] output: [-1]","`1 <= inorder.length <= 3000` `postorder.length == inorder.length` `-3000 <= inorder[i], postorder[i] <= 3000` `inorder` and `postorder` consist of unique values. each value of `postorder` also appears in `inorder`. `inorder` is guaranteed to be the inorder traversal of the tree. `postorder` is guaranteed to be the postorder traversal of the tree.",
107,Binary Tree Level Order Traversal II,"Given the `root` of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 2000]`.

`-1000 <= Node.val <= 1000`",Medium,https://leetcode.com/problems/binary-tree-level-order-traversal-ii,"Microsoft,Apple","Tree,Breadth-first Search",2089,"[Binary Tree Level Order Traversal, /problems/binary-tree-level-order-traversal/, Medium], [Average of Levels in Binary Tree, /problems/average-of-levels-in-binary-tree/, Easy]","given the `root` of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).","input: root = [3,9,20,null,null,15,7] output: [[15,7],[9,20],[3]] example 2: input: root = [1] output: [[1]] example 3: input: root = [] output: []","the number of nodes in the tree is in the range `[0, 2000]`. `-1000 <= node.val <= 1000`",
108,Convert Sorted Array to Binary Search Tree,"Given an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.


Example 1:
Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:
Input: nums = [1,3]
Output: [3,1]
Explanation: [1,3] and [3,1] are both a height-balanced BSTs.


Constraints:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`nums` is sorted in a strictly increasing order.",Easy,https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree,"Adobe,Google,Microsoft,Amazon,Apple,Facebook","Tree,Depth-first Search",3683,"[Convert Sorted List to Binary Search Tree, /problems/convert-sorted-list-to-binary-search-tree/, Medium]","given an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree. a height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.","input: nums = [-10,-3,0,5,9] output: [0,-3,9,-10,null,5] explanation: [0,-10,5,null,-3,null,9] is also accepted: example 2: input: nums = [1,3] output: [3,1] explanation: [1,3] and [3,1] are both a height-balanced bsts.",`1 <= nums.length <= 10^4` `-10^4 <= nums[i] <= 10^4` `nums` is sorted in a strictly increasing order.,
109,Convert Sorted List to Binary Search Tree,"Given the `head` of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


Example 1:
Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.


Example 2:
Input: head = []
Output: []

Example 3:
Input: head = [0]
Output: [0]

Example 4:
Input: head = [1,3]
Output: [3,1]

Constraints:
The number of nodes in `head` is in the range `[0, 2 * 104]`.

`-10^5 <= Node.val <= 10^5`",Medium,https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree,"Facebook,Microsoft,Oracle","Linked List,Depth-first Search",2800,"[Convert Sorted Array to Binary Search Tree, /problems/convert-sorted-array-to-binary-search-tree/, Easy]","given the `head` of a singly linked list where elements are sorted in ascending order, convert it to a height balanced bst. for this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.","input: head = [-10,-3,0,5,9] output: [0,-3,9,-10,null,5] explanation: one possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced bst. example 2: input: head = [] output: [] example 3: input: head = [0] output: [0] example 4: input: head = [1,3] output: [3,1]","the number of nodes in `head` is in the range `[0, 2 * 10^4]`. `-10^5 <= node.val <= 10^5`",
110,Balanced Binary Tree,"Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false

Example 3:
Input: root = []
Output: true

Constraints:
The number of nodes in the tree is in the range `[0, 5000]`.

`-104 <= Node.val <= 104`",Easy,https://leetcode.com/problems/balanced-binary-tree,Amazon,"Tree,Depth-first Search,Recursion",3372,"[Maximum Depth of Binary Tree, /problems/maximum-depth-of-binary-tree/, Easy]","given a binary tree, determine if it is height-balanced. for this problem, a height-balanced binary tree is defined as: a binary tree in which the left and right subtrees of every node differ in height by no more than 1.","input: root = [3,9,20,null,null,15,7] output: true example 2: input: root = [1,2,2,3,3,null,null,4,4] output: false example 3: input: root = [] output: true","the number of nodes in the tree is in the range `[0, 5000]`. `-10^4 <= node.val <= 10^4`",
111,Minimum Depth of Binary Tree,"Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 2

Example 2:
Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5

Constraints:
The number of nodes in the tree is in the range `[0, 105]`.

`-1000 <= Node.val <= 1000`",Easy,https://leetcode.com/problems/minimum-depth-of-binary-tree,"Amazon,Facebook,Adobe","Tree,Depth-first Search,Breadth-first Search",2303,"[Binary Tree Level Order Traversal, /problems/binary-tree-level-order-traversal/, Medium], [Maximum Depth of Binary Tree, /problems/maximum-depth-of-binary-tree/, Easy]","given a binary tree, find its minimum depth. the minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node. note: a leaf is a node with no children.","input: root = [3,9,20,null,null,15,7] output: 2 example 2: input: root = [2,null,3,null,4,null,5,null,6] output: 5","the number of nodes in the tree is in the range `[0, 10^5]`. `-1000 <= node.val <= 1000`",
112,Path Sum,"Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`.

A leaf is a node with no children.


Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true

Example 2:
Input: root = [1,2,3], targetSum = 5
Output: false

Example 3:
Input: root = [1,2], targetSum = 0
Output: false

Constraints:
The number of nodes in the tree is in the range `[0, 5000]`.

`-1000 <= Node.val <= 1000`
`-1000 <= targetSum <= 1000`",Easy,https://leetcode.com/problems/path-sum,"Facebook,Amazon,Microsoft,Apple,Oracle,ByteDance","Tree,Depth-first Search",3000,"[Path Sum II, /problems/path-sum-ii/, Medium], [Binary Tree Maximum Path Sum, /problems/binary-tree-maximum-path-sum/, Hard], [Sum Root to Leaf Numbers, /problems/sum-root-to-leaf-numbers/, Medium], [Path Sum III, /problems/path-sum-iii/, Medium], [Path Sum IV, /problems/path-sum-iv/, Medium]","given the `root` of a binary tree and an integer `targetsum`, return `true` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetsum`. a leaf is a node with no children.","input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetsum = 22 output: true example 2: input: root = [1,2,3], targetsum = 5 output: false example 3: input: root = [1,2], targetsum = 0 output: false","the number of nodes in the tree is in the range `[0, 5000]`. `-1000 <= node.val <= 1000` `-1000 <= targetsum <= 1000`",
113,Path Sum II,"Given the `root` of a binary tree and an integer `targetSum`, return all root-to-leaf paths where each path's sum equals `targetSum`.

A leaf is a node with no children.


Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]

Example 2:
Input: root = [1,2,3], targetSum = 5
Output: []

Example 3:
Input: root = [1,2], targetSum = 0
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 5000]`.

`-1000 <= Node.val <= 1000`
`-1000 <= targetSum <= 1000`",Medium,https://leetcode.com/problems/path-sum-ii,"Facebook,Microsoft,Amazon,Zillow","Tree,Depth-first Search",2673,"[Path Sum, /problems/path-sum/, Easy], [Binary Tree Paths, /problems/binary-tree-paths/, Easy], [Path Sum III, /problems/path-sum-iii/, Medium], [Path Sum IV, /problems/path-sum-iv/, Medium]","given the `root` of a binary tree and an integer `targetsum`, return all root-to-leaf paths where each path's sum equals `targetsum`. a leaf is a node with no children.","input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetsum = 22 output: [[5,4,11,2],[5,8,4,5]] example 2: input: root = [1,2,3], targetsum = 5 output: [] example 3: input: root = [1,2], targetsum = 0 output: []","the number of nodes in the tree is in the range `[0, 5000]`. `-1000 <= node.val <= 1000` `-1000 <= targetsum <= 1000`",
114,Flatten Binary Tree to Linked List,"Given the `root` of a binary tree, flatten the tree into a ""linked list"":
The ""linked list"" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.

The ""linked list"" should be in the same order as a pre-order traversal of the binary tree.


Example 1:
Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [0]
Output: [0]

Constraints:
The number of nodes in the tree is in the range `[0, 2000]`.

`-100 <= Node.val <= 100`
Follow up: Can you flatten the tree in-place (with `O(1)` extra space)?",Medium,https://leetcode.com/problems/flatten-binary-tree-to-linked-list,"Facebook,Microsoft,Amazon","Tree,Depth-first Search",4062,"[Flatten a Multilevel Doubly Linked List, /problems/flatten-a-multilevel-doubly-linked-list/, Medium], [Correct a Binary Tree, /problems/correct-a-binary-tree/, Medium]","given the `root` of a binary tree, flatten the tree into a ""linked list"": the ""linked list"" should use the same `treenode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`. the ""linked list"" should be in the same order as a pre-order traversal of the binary tree.","input: root = [1,2,5,3,4,null,6] output: [1,null,2,null,3,null,4,null,5,null,6] example 2: input: root = [] output: [] example 3: input: root = [0] output: [0]","the number of nodes in the tree is in the range `[0, 2000]`. `-10^0 <= node.val <= 10^0`",can you flatten the tree in-place (with `o(1)` extra space)?
115,Distinct Subsequences,"Given two strings `s` and `t`, return the number of distinct subsequences of `s` which equals `t`.

A string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., `""ACE""` is a subsequence of `""ABCDE""` while `""AEC""` is not).

It is guaranteed the answer fits on a 32-bit signed integer.


Example 1:
Input: s = ""rabbbit"", t = ""rabbit""
Output: 3
Explanation:
As shown below, there are 3 ways you can generate ""rabbit"" from S.

`rabbbit`
`rabbbit`
`rabbbit`

Example 2:
Input: s = ""babgbag"", t = ""bag""
Output: 5
Explanation:
As shown below, there are 5 ways you can generate ""bag"" from S.

`babgbag`
`babgbag`
`babgbag`
`babgbag`
`babgbag`

Constraints:
`1 <= s.length, t.length <= 1000`
`s` and `t` consist of English letters.",Hard,https://leetcode.com/problems/distinct-subsequences,"Mathworks,Google,Amazon,Bloomberg","String,Dynamic Programming",1859,,"given two strings `s` and `t`, return the number of distinct subsequences of `s` which equals `t`. a string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., `""ace""` is a subsequence of `""abcde""` while `""aec""` is not). it is guaranteed the answer fits on a 32-bit signed integer.","input: s = ""rabbbit"", t = ""rabbit"" output: 3 explanation: as shown below, there are 3 ways you can generate ""rabbit"" from s. `rabbbit` `rabbbit` `rabbbit` example 2: input: s = ""babgbag"", t = ""bag"" output: 5 explanation: as shown below, there are 5 ways you can generate ""bag"" from s. `babgbag` `babgbag` `babgbag` `babgbag` `babgbag`","`1 <= s.length, t.length <= 1000` `s` and `t` consist of english letters.",
116,Populating Next Right Pointers in Each Node,"You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:
struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.

Initially, all next pointers are set to `NULL`.

Follow up:
You may only use constant extra space.

Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.


Example 1:
Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.


Constraints:
The number of nodes in the given tree is less than `4096`.

`-1000 <= node.val <= 1000`",Medium,https://leetcode.com/problems/populating-next-right-pointers-in-each-node,"Microsoft,Bloomberg,Facebook,Google,Amazon","Tree,Depth-first Search,Breadth-first Search",3233,"[Populating Next Right Pointers in Each Node II, /problems/populating-next-right-pointers-in-each-node-ii/, Medium], [Binary Tree Right Side View, /problems/binary-tree-right-side-view/, Medium]","you are given a perfect binary tree where all leaves are on the same level, and every parent has two children. the binary tree has the following definition: struct node { int val; node *left; node *right; node *next; } populate each next pointer to point to its next right node. if there is no next right node, the next pointer should be set to `null`. initially, all next pointers are set to `null`.","input: root = [1,2,3,4,5,6,7] output: [1,#,2,3,#,4,5,6,7,#] explanation: given the above perfect binary tree (figure a), your function should populate each next pointer to point to its next right node, just like in figure b. the serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.",the number of nodes in the given tree is less than `4096`. `-1000 <= node.val <= 1000`,"you may only use constant extra space. recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem. example 1: input: root = [1,2,3,4,5,6,7] output: [1,#,2,3,#,4,5,6,7,#] explanation: given the above perfect binary tree (figure a), your function should populate each next pointer to point to its next right node, just like in figure b. the serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level. constraints: the number of nodes in the given tree is less than `4096`. `-1000 <= node.val <= 1000`"
117,Populating Next Right Pointers in Each Node II,"Given a binary tree
struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.

Initially, all next pointers are set to `NULL`.

Follow up:
You may only use constant extra space.

Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.


Example 1:
Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.


Constraints:
The number of nodes in the given tree is less than `6000`.

`-100 <= node.val <= 100`",Medium,https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii,"Microsoft,Amazon,Bloomberg","Tree,Depth-first Search",2356,"[Populating Next Right Pointers in Each Node, /problems/populating-next-right-pointers-in-each-node/, Medium]","given a binary tree struct node { int val; node *left; node *right; node *next; } populate each next pointer to point to its next right node. if there is no next right node, the next pointer should be set to `null`. initially, all next pointers are set to `null`.","input: root = [1,2,3,4,5,null,7] output: [1,#,2,3,#,4,5,7,#] explanation: given the above binary tree (figure a), your function should populate each next pointer to point to its next right node, just like in figure b. the serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.",the number of nodes in the given tree is less than `6000`. `-10^0 <= node.val <= 10^0`,"you may only use constant extra space. recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem. example 1: input: root = [1,2,3,4,5,null,7] output: [1,#,2,3,#,4,5,7,#] explanation: given the above binary tree (figure a), your function should populate each next pointer to point to its next right node, just like in figure b. the serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level. constraints: the number of nodes in the given tree is less than `6000`. `-100 <= node.val <= 100`"
118,Pascal's Triangle,"Given an integer `numRows`, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Example 2:
Input: numRows = 1
Output: [[1]]

Constraints:
`1 <= numRows <= 30`",Easy,https://leetcode.com/problems/pascals-triangle,"Google,Adobe,Apple,Amazon,Goldman Sachs,Samsung",Array,2364,"[Pascal's Triangle II, /problems/pascals-triangle-ii/, Easy]","given an integer `numrows`, return the first numrows of pascal's triangle. in pascal's triangle, each number is the sum of the two numbers directly above it as shown:","input: numrows = 5 output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]] example 2: input: numrows = 1 output: [[1]]",`1 <= numrows <= 30`,
119,Pascal's Triangle II,"Given an integer `rowIndex`, return the `rowIndexth` (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:
Input: rowIndex = 3
Output: [1,3,3,1]

Example 2:
Input: rowIndex = 0
Output: [1]

Example 3:
Input: rowIndex = 1
Output: [1,1]

Constraints:
`0 <= rowIndex <= 33`
Follow up: Could you optimize your algorithm to use only `O(rowIndex)` extra space?",Easy,https://leetcode.com/problems/pascals-triangle-ii,"Microsoft,Google,Amazon",Array,1302,"[Pascal's Triangle, /problems/pascals-triangle/, Easy]","given an integer `rowindex`, return the `rowindexth` (0-indexed) row of the pascal's triangle. in pascal's triangle, each number is the sum of the two numbers directly above it as shown:","input: rowindex = 3 output: [1,3,3,1] example 2: input: rowindex = 0 output: [1] example 3: input: rowindex = 1 output: [1,1]",`0 <= rowindex <= 33`,could you optimize your algorithm to use only `o(rowindex)` extra space?
120,Triangle,"Given a `triangle` array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.


Example 1:
Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).


Example 2:
Input: triangle = [[-10]]
Output: -10

Constraints:
`1 <= triangle.length <= 200`
`triangle[0].length == 1`
`triangle[i].length == triangle[i - 1].length + 1`
`-104 <= triangle[i][j] <= 104`
Follow up: Could you do this using only `O(n)` extra space, where `n` is the total number of rows in the triangle?",Medium,https://leetcode.com/problems/triangle,"Amazon,Bloomberg","Array,Dynamic Programming",2753,,"given a `triangle` array, return the minimum path sum from top to bottom. for each step, you may move to an adjacent number of the row below. more formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.","input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]] output: 11 explanation: the triangle looks like: 2 3 4 6 5 7 4 1 8 3 the minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above). example 2: input: triangle = [[-10]] output: -10",`1 <= triangle.length <= 200` `triangle[0].length == 1` `triangle[i].length == triangle[i - 1].length + 1` `-10^4 <= triangle[i][j] <= 10^4`,"could you do this using only `o(n)` extra space, where `n` is the total number of rows in the triangle?"
121,Best Time to Buy and Sell Stock,"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return `0`.


Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.

Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.


Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.


Constraints:
`1 <= prices.length <= 105`
`0 <= prices[i] <= 104`",Easy,https://leetcode.com/problems/best-time-to-buy-and-sell-stock,"Amazon,Microsoft,Facebook,Apple,Adobe,Google,tcs,Bloomberg,eBay,Uber,ByteDance,Goldman Sachs,Expedia,VMware,Yahoo,Qualtrics,Oracle,ServiceNow,Visa,Samsung","Array,Dynamic Programming",8132,"[Maximum Subarray, /problems/maximum-subarray/, Easy], [Best Time to Buy and Sell Stock II, /problems/best-time-to-buy-and-sell-stock-ii/, Easy], [Best Time to Buy and Sell Stock III, /problems/best-time-to-buy-and-sell-stock-iii/, Hard], [Best Time to Buy and Sell Stock IV, /problems/best-time-to-buy-and-sell-stock-iv/, Hard], [Best Time to Buy and Sell Stock with Cooldown, /problems/best-time-to-buy-and-sell-stock-with-cooldown/, Medium]","you are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. you want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. return the maximum profit you can achieve from this transaction. if you cannot achieve any profit, return `0`.","input: prices = [7,1,5,3,6,4] output: 5 explanation: buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5. note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell. example 2: input: prices = [7,6,4,3,1] output: 0 explanation: in this case, no transactions are done and the max profit = 0.",`1 <= prices.length <= 10^5` `0 <= prices[i] <= 10^4`,
122,Best Time to Buy and Sell Stock II,"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.

Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.


Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.

Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.


Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e., max profit = 0.


Constraints:
`1 <= prices.length <= 3 * 104`
`0 <= prices[i] <= 104`",Easy,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii,"Amazon,Apple,tcs,Microsoft,Facebook,Uber","Array,Greedy",3950,"[Best Time to Buy and Sell Stock, /problems/best-time-to-buy-and-sell-stock/, Easy], [Best Time to Buy and Sell Stock III, /problems/best-time-to-buy-and-sell-stock-iii/, Hard], [Best Time to Buy and Sell Stock IV, /problems/best-time-to-buy-and-sell-stock-iv/, Hard], [Best Time to Buy and Sell Stock with Cooldown, /problems/best-time-to-buy-and-sell-stock-with-cooldown/, Medium], [Best Time to Buy and Sell Stock with Transaction Fee, /problems/best-time-to-buy-and-sell-stock-with-transaction-fee/, Medium]","you are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. find the maximum profit you can achieve. you may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times). note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).","input: prices = [7,1,5,3,6,4] output: 7 explanation: buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. example 2: input: prices = [1,2,3,4,5] output: 4 explanation: buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. you must sell before buying again. example 3: input: prices = [7,6,4,3,1] output: 0 explanation: in this case, no transaction is done, i.e., max profit = 0.",`1 <= prices.length <= 3 * 10^4` `0 <= prices[i] <= 10^4`,
123,Best Time to Buy and Sell Stock III,"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:
Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.


Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.

Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.


Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.


Example 4:
Input: prices = [1]
Output: 0

Constraints:
`1 <= prices.length <= 105`
`0 <= prices[i] <= 105`",Hard,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii,"Amazon,Google","Array,Dynamic Programming",3417,"[Best Time to Buy and Sell Stock, /problems/best-time-to-buy-and-sell-stock/, Easy], [Best Time to Buy and Sell Stock II, /problems/best-time-to-buy-and-sell-stock-ii/, Easy], [Best Time to Buy and Sell Stock IV, /problems/best-time-to-buy-and-sell-stock-iv/, Hard], [Maximum Sum of 3 Non-Overlapping Subarrays, /problems/maximum-sum-of-3-non-overlapping-subarrays/, Hard]","you are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. find the maximum profit you can achieve. you may complete at most two transactions. note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).","input: prices = [3,3,5,0,0,3,1,4] output: 6 explanation: buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3. then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3. example 2: input: prices = [1,2,3,4,5] output: 4 explanation: buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. you must sell before buying again. example 3: input: prices = [7,6,4,3,1] output: 0 explanation: in this case, no transaction is done, i.e. max profit = 0. example 4: input: prices = [1] output: 0",`1 <= prices.length <= 10^5` `0 <= prices[i] <= 10^5`,
124,Binary Tree Maximum Path Sum,"A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the `root` of a binary tree, return the maximum path sum of any path.


Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.


Example 2:
Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.


Constraints:
The number of nodes in the tree is in the range `[1, 3 * 104]`.

`-1000 <= Node.val <= 1000`",Hard,https://leetcode.com/problems/binary-tree-maximum-path-sum,"Facebook,Amazon,Google,Microsoft,Bloomberg,Oracle,Adobe,Apple,Yahoo,ByteDance","Tree,Depth-first Search,Recursion",5446,"[Path Sum, /problems/path-sum/, Easy], [Sum Root to Leaf Numbers, /problems/sum-root-to-leaf-numbers/, Medium], [Path Sum IV, /problems/path-sum-iv/, Medium], [Longest Univalue Path, /problems/longest-univalue-path/, Medium], [Time Needed to Inform All Employees, /problems/time-needed-to-inform-all-employees/, Medium]","a path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. a node can only appear in the sequence at most once. note that the path does not need to pass through the root. the path sum of a path is the sum of the node's values in the path. given the `root` of a binary tree, return the maximum path sum of any path.","input: root = [1,2,3] output: 6 explanation: the optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6. example 2: input: root = [-10,9,20,null,null,15,7] output: 42 explanation: the optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.","the number of nodes in the tree is in the range `[1, 3 * 10^4]`. `-1000 <= node.val <= 1000`",
125,Valid Palindrome,"Given a string `s`, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.


Example 1:
Input: s = ""A man, a plan, a canal: Panama""
Output: true
Explanation: ""amanaplanacanalpanama"" is a palindrome.


Example 2:
Input: s = ""race a car""
Output: false
Explanation: ""raceacar"" is not a palindrome.


Constraints:
`1 <= s.length <= 2 * 105`
`s` consists only of printable ASCII characters.",Easy,https://leetcode.com/problems/valid-palindrome,"Facebook,Microsoft,Apple,Wayfair,Amazon,Yandex,Bloomberg,Oracle","Two Pointers,String",1871,"[Palindrome Linked List, /problems/palindrome-linked-list/, Easy], [Valid Palindrome II, /problems/valid-palindrome-ii/, Easy]","given a string `s`, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.","input: s = ""a man, a plan, a canal: panama"" output: true explanation: ""amanaplanacanalpanama"" is a palindrome. example 2: input: s = ""race a car"" output: false explanation: ""raceacar"" is not a palindrome.",`1 <= s.length <= 2 * 10^5` `s` consists only of printable ascii characters.,
126,Word Ladder II,"A transformation sequence from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:
Every adjacent pair of words differs by a single letter.

Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.

`sk == endWord`
Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return all the shortest transformation sequences from `beginWord` to `endWord`, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words `[beginWord, s1, s2, ..., sk]`.


Example 1:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: [[""hit"",""hot"",""dot"",""dog"",""cog""],[""hit"",""hot"",""lot"",""log"",""cog""]]
Explanation: There are 2 shortest transformation sequences:
""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> ""cog""
""hit"" -> ""hot"" -> ""lot"" -> ""log"" -> ""cog""

Example 2:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: []
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.


Constraints:
`1 <= beginWord.length <= 10`
`endWord.length == beginWord.length`
`1 <= wordList.length <= 5000`
`wordList[i].length == beginWord.length`
`beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.

`beginWord != endWord`
All the words in `wordList` are unique.",Hard,https://leetcode.com/problems/word-ladder-ii,"Uber,Amazon,Facebook,Box,Lyft,Microsoft,Google,Bloomberg","Array,String,Backtracking,Breadth-first Search",2391,"[Word Ladder, /problems/word-ladder/, Hard]","a transformation sequence from word `beginword` to word `endword` using a dictionary `wordlist` is a sequence of words `beginword -> s1 -> s2 -> ... -> sk` such that: every adjacent pair of words differs by a single letter. every `si` for `1 <= i <= k` is in `wordlist`. note that `beginword` does not need to be in `wordlist`. `sk == endword` given two words, `beginword` and `endword`, and a dictionary `wordlist`, return all the shortest transformation sequences from `beginword` to `endword`, or an empty list if no such sequence exists. each sequence should be returned as a list of the words `[beginword, s1, s2, ..., sk]`.","input: beginword = ""hit"", endword = ""cog"", wordlist = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""] output: [[""hit"",""hot"",""dot"",""dog"",""cog""],[""hit"",""hot"",""lot"",""log"",""cog""]] explanation: there are 2 shortest transformation sequences: ""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> ""cog"" ""hit"" -> ""hot"" -> ""lot"" -> ""log"" -> ""cog"" example 2: input: beginword = ""hit"", endword = ""cog"", wordlist = [""hot"",""dot"",""dog"",""lot"",""log""] output: [] explanation: the endword ""cog"" is not in wordlist, therefore there is no valid transformation sequence.","`1 <= beginword.length <= 10` `endword.length == beginword.length` `1 <= wordlist.length <= 5000` `wordlist[i].length == beginword.length` `beginword`, `endword`, and `wordlist[i]` consist of lowercase english letters. `beginword != endword` all the words in `wordlist` are unique.",
127,Word Ladder,"A transformation sequence from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:
Every adjacent pair of words differs by a single letter.

Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.

`sk == endWord`
Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`, or `0` if no such sequence exists.


Example 1:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: 5
Explanation: One shortest transformation sequence is ""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> cog"", which is 5 words long.


Example 2:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: 0
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.


Constraints:
`1 <= beginWord.length <= 10`
`endWord.length == beginWord.length`
`1 <= wordList.length <= 5000`
`wordList[i].length == beginWord.length`
`beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.

`beginWord != endWord`
All the words in `wordList` are unique.",Hard,https://leetcode.com/problems/word-ladder,"Amazon,Facebook,Lyft,Microsoft,Google,Uber,Bloomberg,Qualtrics,Snapchat,Oracle,Yahoo,Apple,Zillow,Citadel",Breadth-first Search,4859,"[Word Ladder II, /problems/word-ladder-ii/, Hard], [Minimum Genetic Mutation, /problems/minimum-genetic-mutation/, Medium]","a transformation sequence from word `beginword` to word `endword` using a dictionary `wordlist` is a sequence of words `beginword -> s1 -> s2 -> ... -> sk` such that: every adjacent pair of words differs by a single letter. every `si` for `1 <= i <= k` is in `wordlist`. note that `beginword` does not need to be in `wordlist`. `sk == endword` given two words, `beginword` and `endword`, and a dictionary `wordlist`, return the number of words in the shortest transformation sequence from `beginword` to `endword`, or `0` if no such sequence exists.","input: beginword = ""hit"", endword = ""cog"", wordlist = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""] output: 5 explanation: one shortest transformation sequence is ""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> cog"", which is 5 words long. example 2: input: beginword = ""hit"", endword = ""cog"", wordlist = [""hot"",""dot"",""dog"",""lot"",""log""] output: 0 explanation: the endword ""cog"" is not in wordlist, therefore there is no valid transformation sequence.","`1 <= beginword.length <= 10` `endword.length == beginword.length` `1 <= wordlist.length <= 5000` `wordlist[i].length == beginword.length` `beginword`, `endword`, and `wordlist[i]` consist of lowercase english letters. `beginword != endword` all the words in `wordlist` are unique.",
128,Longest Consecutive Sequence,"Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence.


Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore its length is 4.


Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Constraints:
`0 <= nums.length <= 104`
`-109 <= nums[i] <= 109`
Follow up: Could you implement the `O(n)` solution?",Hard,https://leetcode.com/problems/longest-consecutive-sequence,"Google,Amazon,Microsoft,Facebook,Bloomberg,Twitter","Array,Union Find",4894,"[Binary Tree Longest Consecutive Sequence, /problems/binary-tree-longest-consecutive-sequence/, Medium]","given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence.","input: nums = [100,4,200,1,3,2] output: 4 explanation: the longest consecutive elements sequence is `[1, 2, 3, 4]`. therefore its length is 4. example 2: input: nums = [0,3,7,2,5,8,4,6,0,1] output: 9",`0 <= nums.length <= 10^4` `-10^9 <= nums[i] <= 10^9`,could you implement the `o(n)` solution?
129,Sum Root to Leaf Numbers,"You are given the `root` of a binary tree containing digits from `0` to `9` only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.

Return the total sum of all root-to-leaf numbers.

A leaf node is a node with no children.


Example 1:
Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path `1->2` represents the number `12`.

The root-to-leaf path `1->3` represents the number `13`.

Therefore, sum = 12 + 13 = `25`.


Example 2:
Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path `4->9->5` represents the number 495.

The root-to-leaf path `4->9->1` represents the number 491.

The root-to-leaf path `4->0` represents the number 40.

Therefore, sum = 495 + 491 + 40 = `1026`.


Constraints:
The number of nodes in the tree is in the range `[1, 1000]`.

`0 <= Node.val <= 9`
The depth of the tree will not exceed `10`.",Medium,https://leetcode.com/problems/sum-root-to-leaf-numbers,Facebook,"Tree,Depth-first Search",2200,"[Path Sum, /problems/path-sum/, Easy], [Binary Tree Maximum Path Sum, /problems/binary-tree-maximum-path-sum/, Hard], [Smallest String Starting From Leaf, /problems/smallest-string-starting-from-leaf/, Medium]","you are given the `root` of a binary tree containing digits from `0` to `9` only. each root-to-leaf path in the tree represents a number. for example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`. return the total sum of all root-to-leaf numbers. a leaf node is a node with no children.","input: root = [1,2,3] output: 25 explanation: the root-to-leaf path `1->2` represents the number `12`. the root-to-leaf path `1->3` represents the number `13`. therefore, sum = 12 + 13 = `25`. example 2: input: root = [4,9,0,5,1] output: 1026 explanation: the root-to-leaf path `4->9->5` represents the number 495. the root-to-leaf path `4->9->1` represents the number 491. the root-to-leaf path `4->0` represents the number 40. therefore, sum = 495 + 491 + 40 = `1026`.","the number of nodes in the tree is in the range `[1, 1000]`. `0 <= node.val <= 9` the depth of the tree will not exceed `10`.",
130,Surrounded Regions,"Given an `m x n` matrix `board` containing `'X'` and `'O'`, capture all regions surrounded by `'X'`.

A region is captured by flipping all `'O'`s into `'X'`s in that surrounded region.


Example 1:
Input: board = [[""X"",""X"",""X"",""X""],[""X"",""O"",""O"",""X""],[""X"",""X"",""O"",""X""],[""X"",""O"",""X"",""X""]]
Output: [[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""O"",""X"",""X""]]
Explanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.


Example 2:
Input: board = [[""X""]]
Output: [[""X""]]

Constraints:
`m == board.length`
`n == board[i].length`
`1 <= m, n <= 200`
`board[i][j]` is `'X'` or `'O'`.",Medium,https://leetcode.com/problems/surrounded-regions,"Google,Amazon,Uber","Depth-first Search,Breadth-first Search,Union Find",2640,"[Number of Islands, /problems/number-of-islands/, Medium], [Walls and Gates, /problems/walls-and-gates/, Medium]","given an `m x n` matrix `board` containing `'x'` and `'o'`, capture all regions surrounded by `'x'`. a region is captured by flipping all `'o'`s into `'x'`s in that surrounded region.","input: board = [[""x"",""x"",""x"",""x""],[""x"",""o"",""o"",""x""],[""x"",""x"",""o"",""x""],[""x"",""o"",""x"",""x""]] output: [[""x"",""x"",""x"",""x""],[""x"",""x"",""x"",""x""],[""x"",""x"",""x"",""x""],[""x"",""o"",""x"",""x""]] explanation: surrounded regions should not be on the border, which means that any 'o' on the border of the board are not flipped to 'x'. any 'o' that is not on the border and it is not connected to an 'o' on the border will be flipped to 'x'. two cells are connected if they are adjacent cells connected horizontally or vertically. example 2: input: board = [[""x""]] output: [[""x""]]","`m == board.length` `n == board[i].length` `1 <= m, n <= 200` `board[i][j]` is `'x'` or `'o'`.",
131,Palindrome Partitioning,"Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of `s`.

A palindrome string is a string that reads the same backward as forward.


Example 1:
Input: s = ""aab""
Output: [[""a"",""a"",""b""],[""aa"",""b""]]

Example 2:
Input: s = ""a""
Output: [[""a""]]

Constraints:
`1 <= s.length <= 16`
`s` contains only lowercase English letters.",Medium,https://leetcode.com/problems/palindrome-partitioning,"Amazon,Apple,Google","Dynamic Programming,Backtracking,Depth-first Search",3232,"[Palindrome Partitioning II, /problems/palindrome-partitioning-ii/, Hard], [Palindrome Partitioning IV, /problems/palindrome-partitioning-iv/, Hard]","given a string `s`, partition `s` such that every substring of the partition is a palindrome. return all possible palindrome partitioning of `s`. a palindrome string is a string that reads the same backward as forward.","input: s = ""aab"" output: [[""a"",""a"",""b""],[""aa"",""b""]] example 2: input: s = ""a"" output: [[""a""]]",`1 <= s.length <= 16` `s` contains only lowercase english letters.,
132,Palindrome Partitioning II,"Given a string `s`, partition `s` such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of `s`.


Example 1:
Input: s = ""aab""
Output: 1
Explanation: The palindrome partitioning [""aa"",""b""] could be produced using 1 cut.


Example 2:
Input: s = ""a""
Output: 0

Example 3:
Input: s = ""ab""
Output: 1

Constraints:
`1 <= s.length <= 2000`
`s` consists of lower-case English letters only.",Hard,https://leetcode.com/problems/palindrome-partitioning-ii,"Amazon,Google",Dynamic Programming,1760,"[Palindrome Partitioning, /problems/palindrome-partitioning/, Medium], [Palindrome Partitioning IV, /problems/palindrome-partitioning-iv/, Hard]","given a string `s`, partition `s` such that every substring of the partition is a palindrome. return the minimum cuts needed for a palindrome partitioning of `s`.","input: s = ""aab"" output: 1 explanation: the palindrome partitioning [""aa"",""b""] could be produced using 1 cut. example 2: input: s = ""a"" output: 0 example 3: input: s = ""ab"" output: 1",`1 <= s.length <= 2000` `s` consists of lower-case english letters only.,
133,Clone Graph,"Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a val (`int`) and a list (`List[Node]`) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
Test case format:
For simplicity sake, each node's value is the same as the node's index (1-indexed). For example, the first node with `val = 1`, the second node with `val = 2`, and so on. The graph is represented in the test case using an adjacency list.

Adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with `val = 1`. You must return the copy of the given node as a reference to the cloned graph.


Example 1:
Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.

1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).

2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).

3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).

4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).


Example 2:
Input: adjList = [[]]
Output: [[]]
Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.


Example 3:
Input: adjList = []
Output: []
Explanation: This an empty graph, it does not have any nodes.


Example 4:
Input: adjList = [[2],[1]]
Output: [[2],[1]]

Constraints:
`1 <= Node.val <= 100`
`Node.val` is unique for each node.

Number of Nodes will not exceed 100.

There is no repeated edges and no self-loops in the graph.

The Graph is connected and all nodes can be visited starting from the given node.",Medium,https://leetcode.com/problems/clone-graph,"Facebook,Amazon,Microsoft,Bloomberg,Apple,Twitter,Uber,Adobe,Qualtrics","Depth-first Search,Breadth-first Search,Graph",2906,"[Copy List with Random Pointer, /problems/copy-list-with-random-pointer/, Medium], [Clone Binary Tree With Random Pointer, /problems/clone-binary-tree-with-random-pointer/, Medium], [Clone N-ary Tree, /problems/clone-n-ary-tree/, Medium]","given a reference of a node in a connected undirected graph. return a deep copy (clone) of the graph. each node in the graph contains a val (`int`) and a list (`list[node]`) of its neighbors. class node { public int val; public list<node> neighbors; } test case format: for simplicity sake, each node's value is the same as the node's index (1-indexed). for example, the first node with `val = 1`, the second node with `val = 2`, and so on. the graph is represented in the test case using an adjacency list. adjacency list is a collection of unordered lists used to represent a finite graph. each list describes the set of neighbors of a node in the graph. the given node will always be the first node with `val = 1`. you must return the copy of the given node as a reference to the cloned graph.","input: adjlist = [[2,4],[1,3],[2,4],[1,3]] output: [[2,4],[1,3],[2,4],[1,3]] explanation: there are 4 nodes in the graph. 1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4). 2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3). 3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4). 4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3). example 2: input: adjlist = [[]] output: [[]] explanation: note that the input contains one empty list. the graph consists of only one node with val = 1 and it does not have any neighbors. example 3: input: adjlist = [] output: [] explanation: this an empty graph, it does not have any nodes. example 4: input: adjlist = [[2],[1]] output: [[2],[1]]",`1 <= node.val <= 10^0` `node.val` is unique for each node. number of nodes will not exceed 10^0. there is no repeated edges and no self-loops in the graph. the graph is connected and all nodes can be visited starting from the given node.,
134,Gas Station,"There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.

You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays `gas` and `cost`, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return `-1`. If there exists a solution, it is guaranteed to be unique

Example 1:
Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.

Therefore, return 3 as the starting index.


Example 2:
Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.

Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.

Therefore, you can't travel around the circuit once no matter where you start.


Constraints:
`gas.length == n`
`cost.length == n`
`1 <= n <= 104`
`0 <= gas[i], cost[i] <= 104`",Medium,https://leetcode.com/problems/gas-station,"Amazon,Microsoft,Apple,Hotstar,Google,Bloomberg,Citrix,C3 IoT",Greedy,2879,,"there are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`. you have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. you begin the journey with an empty tank at one of the gas stations. given two integer arrays `gas` and `cost`, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return `-1`. if there exists a solution, it is guaranteed to be unique","input: gas = [1,2,3,4,5], cost = [3,4,5,1,2] output: 3 explanation: start at station 3 (index 3) and fill up with 4 unit of gas. your tank = 0 + 4 = 4 travel to station 4. your tank = 4 - 1 + 5 = 8 travel to station 0. your tank = 8 - 2 + 1 = 7 travel to station 1. your tank = 7 - 3 + 2 = 6 travel to station 2. your tank = 6 - 4 + 3 = 5 travel to station 3. the cost is 5. your gas is just enough to travel back to station 3. therefore, return 3 as the starting index. example 2: input: gas = [2,3,4], cost = [3,4,3] output: -1 explanation: you can't start at station 0 or 1, as there is not enough gas to travel to the next station. let's start at station 2 and fill up with 4 unit of gas. your tank = 0 + 4 = 4 travel to station 0. your tank = 4 - 3 + 2 = 3 travel to station 1. your tank = 3 - 3 + 3 = 3 you cannot travel back to station 2, as it requires 4 unit of gas but you only have 3. therefore, you can't travel around the circuit once no matter where you start.","`gas.length == n` `cost.length == n` `1 <= n <= 10^4` `0 <= gas[i], cost[i] <= 10^4`",
135,Candy,"There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.

You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.

Children with a higher rating get more candies than their neighbors.

Return the minimum number of candies you need to have to distribute the candies to the children.


Example 1:
Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.


Example 2:
Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.

The third child gets 1 candy because it satisfies the above two conditions.


Constraints:
`n == ratings.length`
`1 <= n <= 2 * 104`
`0 <= ratings[i] <= 2 * 104`",Hard,https://leetcode.com/problems/candy,Amazon,Greedy,1402,,there are `n` children standing in a line. each child is assigned a rating value given in the integer array `ratings`. you are giving candies to these children subjected to the following requirements: each child must have at least one candy. children with a higher rating get more candies than their neighbors. return the minimum number of candies you need to have to distribute the candies to the children.,"input: ratings = [1,0,2] output: 5 explanation: you can allocate to the first, second and third child with 2, 1, 2 candies respectively. example 2: input: ratings = [1,2,2] output: 4 explanation: you can allocate to the first, second and third child with 1, 2, 1 candies respectively. the third child gets 1 candy because it satisfies the above two conditions.",`n == ratings.length` `1 <= n <= 2 * 10^4` `0 <= ratings[i] <= 2 * 10^4`,
136,Single Number,"Given a non-empty array of integers `nums`, every element appears twice except for one. Find that single one.

Follow up: Could you implement a solution with a linear runtime complexity and without using extra memory?

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1

Constraints:
`1 <= nums.length <= 3 * 104`
`-3 * 104 <= nums[i] <= 3 * 104`
Each element in the array appears twice except for one element which appears only once.",Easy,https://leetcode.com/problems/single-number,"Google,Amazon,Facebook,Microsoft","Hash Table,Bit Manipulation",6010,"[Single Number II, /problems/single-number-ii/, Medium], [Single Number III, /problems/single-number-iii/, Medium], [Missing Number, /problems/missing-number/, Easy], [Find the Duplicate Number, /problems/find-the-duplicate-number/, Medium], [Find the Difference, /problems/find-the-difference/, Easy]","given a non-empty array of integers `nums`, every element appears twice except for one. find that single one.","input: nums = [2,2,1] output: 1 example 2: input: nums = [4,1,2,1,2] output: 4 example 3: input: nums = [1] output: 1",`1 <= nums.length <= 3 * 10^4` `-3 * 10^4 <= nums[i] <= 3 * 10^4` each element in the array appears twice except for one element which appears only once.,"could you implement a solution with a linear runtime complexity and without using extra memory? example 1: input: nums = [2,2,1] output: 1 example 2: input: nums = [4,1,2,1,2] output: 4 example 3: input: nums = [1] output: 1 constraints: `1 <= nums.length <= 3 * 104` `-3 * 104 <= nums[i] <= 3 * 104` each element in the array appears twice except for one element which appears only once."
137,Single Number II,"Given an integer array `nums` where every element appears three times except for one, which appears exactly once. Find the single element and return it.


Example 1:
Input: nums = [2,2,3,2]
Output: 3

Example 2:
Input: nums = [0,1,0,1,0,1,99]
Output: 99

Constraints:
`1 <= nums.length <= 3 * 104`
`-231 <= nums[i] <= 231 - 1`
Each element in `nums` appears exactly three times except for one element which appears once.

Follow up: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?",Medium,https://leetcode.com/problems/single-number-ii,"Google,Adobe",Bit Manipulation,2473,"[Single Number, /problems/single-number/, Easy], [Single Number III, /problems/single-number-iii/, Medium]","given an integer array `nums` where every element appears three times except for one, which appears exactly once. find the single element and return it.","input: nums = [2,2,3,2] output: 3 example 2: input: nums = [0,1,0,1,0,1,99] output: 99",`1 <= nums.length <= 3 * 10^4` `-231 <= nums[i] <= 231 - 1` each element in `nums` appears exactly three times except for one element which appears once.,your algorithm should have a linear runtime complexity. could you implement it without using extra memory?
138,Copy List with Random Pointer,"A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.

Construct a deep copy of the list. The deep copy should consist of exactly `n` brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where:
`val`: an integer representing `Node.val`
`random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node.

Your code will only be given the `head` of the original linked list.


Example 1:
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

Example 2:
Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]

Example 3:
Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]

Example 4:
Input: head = []
Output: []
Explanation: The given linked list is empty (null pointer), so return null.


Constraints:
`0 <= n <= 1000`
`-10000 <= Node.val <= 10000`
`Node.random` is `null` or is pointing to some node in the linked list.",Medium,https://leetcode.com/problems/copy-list-with-random-pointer,"Amazon,Facebook,Microsoft,Bloomberg,eBay,Oracle,Yahoo,Qualtrics","Hash Table,Linked List",4977,"[Clone Graph, /problems/clone-graph/, Medium], [Clone Binary Tree With Random Pointer, /problems/clone-binary-tree-with-random-pointer/, Medium], [Clone N-ary Tree, /problems/clone-n-ary-tree/, Medium]","a linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`. construct a deep copy of the list. the deep copy should consist of exactly `n` brand new nodes, where each new node has its value set to the value of its corresponding original node. both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. none of the pointers in the new list should point to nodes in the original list. for example, if there are two nodes `x` and `y` in the original list, where `x.random --> y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`. return the head of the copied linked list. the linked list is represented in the input/output as a list of `n` nodes. each node is represented as a pair of `[val, random_index]` where: `val`: an integer representing `node.val` `random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node. your code will only be given the `head` of the original linked list.","input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]] output: [[7,null],[13,0],[11,4],[10,2],[1,0]] example 2: input: head = [[1,1],[2,1]] output: [[1,1],[2,1]] example 3: input: head = [[3,null],[3,0],[3,null]] output: [[3,null],[3,0],[3,null]] example 4: input: head = [] output: [] explanation: the given linked list is empty (null pointer), so return null.",`0 <= n <= 1000` `-10000 <= node.val <= 10000` `node.random` is `null` or is pointing to some node in the linked list.,
139,Word Break,"Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.


Example 1:
Input: s = ""leetcode"", wordDict = [""leet"",""code""]
Output: true
Explanation: Return true because ""leetcode"" can be segmented as ""leet code"".


Example 2:
Input: s = ""applepenapple"", wordDict = [""apple"",""pen""]
Output: true
Explanation: Return true because ""applepenapple"" can be segmented as ""apple pen apple"".

Note that you are allowed to reuse a dictionary word.


Example 3:
Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
Output: false

Constraints:
`1 <= s.length <= 300`
`1 <= wordDict.length <= 1000`
`1 <= wordDict[i].length <= 20`
`s` and `wordDict[i]` consist of only lowercase English letters.

All the strings of `wordDict` are unique.",Medium,https://leetcode.com/problems/word-break,"Facebook,Amazon,Bloomberg,Microsoft,ByteDance,eBay,Qualtrics,Oracle,Google",Dynamic Programming,6350,"[Word Break II, /problems/word-break-ii/, Hard]","given a string `s` and a dictionary of strings `worddict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words. note that the same word in the dictionary may be reused multiple times in the segmentation.","input: s = ""leetcode"", worddict = [""leet"",""code""] output: true explanation: return true because ""leetcode"" can be segmented as ""leet code"". example 2: input: s = ""applepenapple"", worddict = [""apple"",""pen""] output: true explanation: return true because ""applepenapple"" can be segmented as ""apple pen apple"". note that you are allowed to reuse a dictionary word. example 3: input: s = ""catsandog"", worddict = [""cats"",""dog"",""sand"",""and"",""cat""] output: false",`1 <= s.length <= 300` `1 <= worddict.length <= 1000` `1 <= worddict[i].length <= 20` `s` and `worddict[i]` consist of only lowercase english letters. all the strings of `worddict` are unique.,
140,Word Break II,"Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.


Example 1:
Input: s = ""catsanddog"", wordDict = [""cat"",""cats"",""and"",""sand"",""dog""]
Output: [""cats and dog"",""cat sand dog""]

Example 2:
Input: s = ""pineapplepenapple"", wordDict = [""apple"",""pen"",""applepen"",""pine"",""pineapple""]
Output: [""pine apple pen apple"",""pineapple pen apple"",""pine applepen apple""]
Explanation: Note that you are allowed to reuse a dictionary word.


Example 3:
Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
Output: []

Constraints:
`1 <= s.length <= 20`
`1 <= wordDict.length <= 1000`
`1 <= wordDict[i].length <= 10`
`s` and `wordDict[i]` consist of only lowercase English letters.

All the strings of `wordDict` are unique.",Hard,https://leetcode.com/problems/word-break-ii,"Facebook,Amazon,Bloomberg,ByteDance,Google,Microsoft","Dynamic Programming,Backtracking",3046,"[Word Break, /problems/word-break/, Medium], [Concatenated Words, /problems/concatenated-words/, Hard]","given a string `s` and a dictionary of strings `worddict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. return all such possible sentences in any order. note that the same word in the dictionary may be reused multiple times in the segmentation.","input: s = ""catsanddog"", worddict = [""cat"",""cats"",""and"",""sand"",""dog""] output: [""cats and dog"",""cat sand dog""] example 2: input: s = ""pineapplepenapple"", worddict = [""apple"",""pen"",""applepen"",""pine"",""pineapple""] output: [""pine apple pen apple"",""pineapple pen apple"",""pine applepen apple""] explanation: note that you are allowed to reuse a dictionary word. example 3: input: s = ""catsandog"", worddict = [""cats"",""dog"",""sand"",""and"",""cat""] output: []",`1 <= s.length <= 20` `1 <= worddict.length <= 1000` `1 <= worddict[i].length <= 10` `s` and `worddict[i]` consist of only lowercase english letters. all the strings of `worddict` are unique.,
141,Linked List Cycle,"Given `head`, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as a parameter.

Return `true` if there is a cycle in the linked list. Otherwise, return `false`.


Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).


Example 2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.


Example 3:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.


Constraints:
The number of the nodes in the list is in the range `[0, 104]`.

`-105 <= Node.val <= 105`
`pos` is `-1` or a valid index in the linked-list.

Follow up: Can you solve it using `O(1)` (i.e. constant) memory?",Easy,https://leetcode.com/problems/linked-list-cycle,"Microsoft,Apple,Amazon,Goldman Sachs,Facebook,Google","Linked List,Two Pointers",4328,"[Linked List Cycle II, /problems/linked-list-cycle-ii/, Medium], [Happy Number, /problems/happy-number/, Easy]","given `head`, the head of a linked list, determine if the linked list has a cycle in it. there is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. note that `pos` is not passed as a parameter. return `true` if there is a cycle in the linked list. otherwise, return `false`.","input: head = [3,2,0,-4], pos = 1 output: true explanation: there is a cycle in the linked list, where the tail connects to the 1st node (0-indexed). example 2: input: head = [1,2], pos = 0 output: true explanation: there is a cycle in the linked list, where the tail connects to the 0th node. example 3: input: head = [1], pos = -1 output: false explanation: there is no cycle in the linked list.","the number of the nodes in the list is in the range `[0, 10^4]`. `-10^5 <= node.val <= 10^5` `pos` is `-1` or a valid index in the linked-list.",can you solve it using `o(1)` (i.e. constant) memory?
142,Linked List Cycle II,"Given a linked list, return the node where the cycle begins. If there is no cycle, return `null`.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as a parameter.

Notice that you should not modify the linked list.


Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Example 2:
Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.


Example 3:
Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.


Constraints:
The number of the nodes in the list is in the range `[0, 104]`.

`-105 <= Node.val <= 105`
`pos` is `-1` or a valid index in the linked-list.

Follow up: Can you solve it using `O(1)` (i.e. constant) memory?",Medium,https://leetcode.com/problems/linked-list-cycle-ii,"Microsoft,Amazon,Apple","Linked List,Two Pointers",3978,"[Linked List Cycle, /problems/linked-list-cycle/, Easy], [Find the Duplicate Number, /problems/find-the-duplicate-number/, Medium]","given a linked list, return the node where the cycle begins. if there is no cycle, return `null`. there is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. note that `pos` is not passed as a parameter. notice that you should not modify the linked list.","input: head = [3,2,0,-4], pos = 1 output: tail connects to node index 1 explanation: there is a cycle in the linked list, where tail connects to the second node. example 2: input: head = [1,2], pos = 0 output: tail connects to node index 0 explanation: there is a cycle in the linked list, where tail connects to the first node. example 3: input: head = [1], pos = -1 output: no cycle explanation: there is no cycle in the linked list.","the number of the nodes in the list is in the range `[0, 10^4]`. `-10^5 <= node.val <= 10^5` `pos` is `-1` or a valid index in the linked-list.",can you solve it using `o(1)` (i.e. constant) memory?
143,Reorder List,"You are given the head of a singly linked-list. The list can be represented as:
L0 → L1 → ... → Ln - 1 → Ln
Reorder the list to be on the following form:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → ...

You may not modify the values in the list's nodes. Only nodes themselves may be changed.


Example 1:
Input: head = [1,2,3,4]
Output: [1,4,2,3]

Example 2:
Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]

Constraints:
The number of nodes in the list is in the range `[1, 5 * 104]`.

`1 <= Node.val <= 1000`",Medium,https://leetcode.com/problems/reorder-list,"Facebook,Amazon,Splunk",Linked List,3014,,you are given the head of a singly linked-list. the list can be represented as: l0 → l1 → ... → ln - 1 → ln reorder the list to be on the following form: l0 → ln → l1 → ln - 1 → l2 → ln - 2 → ... you may not modify the values in the list's nodes. only nodes themselves may be changed.,"input: head = [1,2,3,4] output: [1,4,2,3] example 2: input: head = [1,2,3,4,5] output: [1,5,2,4,3]","the number of nodes in the list is in the range `[1, 5 * 10^4]`. `1 <= node.val <= 1000`",
144,Binary Tree Preorder Traversal,"Given the `root` of a binary tree, return the preorder traversal of its nodes' values.


Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [1,2]

Example 5:
Input: root = [1,null,2]
Output: [1,2]

Constraints:
The number of nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`
Follow up: Recursive solution is trivial, could you do it iteratively?",Medium,https://leetcode.com/problems/binary-tree-preorder-traversal,Amazon,"Stack,Tree",2189,"[Binary Tree Inorder Traversal, /problems/binary-tree-inorder-traversal/, Medium], [Verify Preorder Sequence in Binary Search Tree, /problems/verify-preorder-sequence-in-binary-search-tree/, Medium], [N-ary Tree Preorder Traversal, /problems/n-ary-tree-preorder-traversal/, Easy]","given the `root` of a binary tree, return the preorder traversal of its nodes' values.","input: root = [1,null,2,3] output: [1,2,3] example 2: input: root = [] output: [] example 3: input: root = [1] output: [1] example 4: input: root = [1,2] output: [1,2] example 5: input: root = [1,null,2] output: [1,2]","the number of nodes in the tree is in the range `[0, 10^0]`. `-10^0 <= node.val <= 10^0`","recursive solution is trivial, could you do it iteratively?"
145,Binary Tree Postorder Traversal,"Given the `root` of a binary tree, return the postorder traversal of its nodes' values.


Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [2,1]

Example 5:
Input: root = [1,null,2]
Output: [2,1]

Constraints:
The number of the nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`
Follow up:
Recursive solution is trivial, could you do it iteratively?",Medium,https://leetcode.com/problems/binary-tree-postorder-traversal,Amazon,"Stack,Tree",2507,"[Binary Tree Inorder Traversal, /problems/binary-tree-inorder-traversal/, Medium], [N-ary Tree Postorder Traversal, /problems/n-ary-tree-postorder-traversal/, Easy]","given the `root` of a binary tree, return the postorder traversal of its nodes' values.","input: root = [1,null,2,3] output: [3,2,1] example 2: input: root = [] output: [] example 3: input: root = [1] output: [1] example 4: input: root = [1,2] output: [2,1] example 5: input: root = [1,null,2] output: [2,1]","the number of the nodes in the tree is in the range `[0, 10^0]`. `-10^0 <= node.val <= 10^0`","recursive solution is trivial, could you do it iteratively?"
146,LRU Cache,"Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the `LRUCache` class:
`LRUCache(int capacity)` Initialize the LRU cache with positive size `capacity`.

`int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`.

`void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, evict the least recently used key.

Follow up:
Could you do `get` and `put` in `O(1)` time complexity?

Example 1:
Input
[""LRUCache"", ""put"", ""put"", ""get"", ""put"", ""get"", ""put"", ""get"", ""get"", ""get""]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]
Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4

Constraints:
`1 <= capacity <= 3000`
`0 <= key <= 3000`
`0 <= value <= 104`
At most `3 * 104` calls will be made to `get` and `put`.",Medium,https://leetcode.com/problems/lru-cache,"Amazon,Microsoft,Facebook,Apple,Bloomberg,Intuit,Snapchat,eBay,ByteDance,Google,Oracle,Zillow,Capital One,Uber,Dropbox,Paypal,Twilio,Adobe,Walmart Labs,Goldman Sachs",Design,8181,"[LFU Cache, /problems/lfu-cache/, Hard], [Design In-Memory File System, /problems/design-in-memory-file-system/, Hard], [Design Compressed String Iterator, /problems/design-compressed-string-iterator/, Easy], [Design Most Recently Used Queue, /problems/design-most-recently-used-queue/, Medium]","design a data structure that follows the constraints of a least recently used (lru) cache. implement the `lrucache` class: `lrucache(int capacity)` initialize the lru cache with positive size `capacity`. `int get(int key)` return the value of the `key` if the key exists, otherwise return `-1`. `void put(int key, int value)` update the value of the `key` if the `key` exists. otherwise, add the `key-value` pair to the cache. if the number of keys exceeds the `capacity` from this operation, evict the least recently used key.","input [""lrucache"", ""put"", ""put"", ""get"", ""put"", ""get"", ""put"", ""get"", ""get"", ""get""] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]] output [null, null, null, 1, null, -1, null, -1, 3, 4] explanation lrucache lrucache = new lrucache(2); lrucache.put(1, 1); // cache is {1=1} lrucache.put(2, 2); // cache is {1=1, 2=2} lrucache.get(1); // return 1 lrucache.put(3, 3); // lru key was 2, evicts key 2, cache is {1=1, 3=3} lrucache.get(2); // returns -1 (not found) lrucache.put(4, 4); // lru key was 1, evicts key 1, cache is {4=4, 3=3} lrucache.get(1); // return -1 (not found) lrucache.get(3); // return 3 lrucache.get(4); // return 4",`1 <= capacity <= 3000` `0 <= key <= 3000` `0 <= value <= 10^4` at most `3 * 10^4` calls will be made to `get` and `put`.,"could you do `get` and `put` in `o(1)` time complexity? example 1: input [""lrucache"", ""put"", ""put"", ""get"", ""put"", ""get"", ""put"", ""get"", ""get"", ""get""] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]] output [null, null, null, 1, null, -1, null, -1, 3, 4] explanation lrucache lrucache = new lrucache(2); lrucache.put(1, 1); // cache is {1=1} lrucache.put(2, 2); // cache is {1=1, 2=2} lrucache.get(1); // return 1 lrucache.put(3, 3); // lru key was 2, evicts key 2, cache is {1=1, 3=3} lrucache.get(2); // returns -1 (not found) lrucache.put(4, 4); // lru key was 1, evicts key 1, cache is {4=4, 3=3} lrucache.get(1); // return -1 (not found) lrucache.get(3); // return 3 lrucache.get(4); // return 4 constraints: `1 <= capacity <= 3000` `0 <= key <= 3000` `0 <= value <= 104` at most `3 * 104` calls will be made to `get` and `put`."
147,Insertion Sort List,"Given the `head` of a singly linked list, sort the list using insertion sort, and return the sorted list's head.

The steps of the insertion sort algorithm:
Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.

At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.

It repeats until no input elements remain.

The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.


Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Constraints:
The number of nodes in the list is in the range `[1, 5000]`.

`-5000 <= Node.val <= 5000`",Medium,https://leetcode.com/problems/insertion-sort-list,"Apple,Microsoft","Linked List,Sort",1001,"[Sort List, /problems/sort-list/, Medium], [Insert into a Sorted Circular Linked List, /problems/insert-into-a-sorted-circular-linked-list/, Medium]","given the `head` of a singly linked list, sort the list using insertion sort, and return the sorted list's head. the steps of the insertion sort algorithm: insertion sort iterates, consuming one input element each repetition and growing a sorted output list. at each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there. it repeats until no input elements remain. the following is a graphical example of the insertion sort algorithm. the partially sorted list (black) initially contains only the first element in the list. one element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.","input: head = [4,2,1,3] output: [1,2,3,4] example 2: input: head = [-1,5,3,4,0] output: [-1,0,3,4,5]","the number of nodes in the list is in the range `[1, 5000]`. `-5000 <= node.val <= 5000`",
148,Sort List,"Given the `head` of a linked list, return the list after sorting it in ascending order.

Follow up: Can you sort the linked list in `O(n logn)` time and `O(1)` memory (i.e. constant space)?

Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:
Input: head = []
Output: []

Constraints:
The number of nodes in the list is in the range `[0, 5 * 104]`.

`-105 <= Node.val <= 105`",Medium,https://leetcode.com/problems/sort-list,"Facebook,Microsoft,Google,ByteDance","Linked List,Sort",4052,"[Merge Two Sorted Lists, /problems/merge-two-sorted-lists/, Easy], [Sort Colors, /problems/sort-colors/, Medium], [Insertion Sort List, /problems/insertion-sort-list/, Medium]","given the `head` of a linked list, return the list after sorting it in ascending order.","input: head = [4,2,1,3] output: [1,2,3,4] example 2: input: head = [-1,5,3,4,0] output: [-1,0,3,4,5] example 3: input: head = [] output: []","the number of nodes in the list is in the range `[0, 5 * 10^4]`. `-10^5 <= node.val <= 10^5`","can you sort the linked list in `o(n logn)` time and `o(1)` memory (i.e. constant space)? example 1: input: head = [4,2,1,3] output: [1,2,3,4] example 2: input: head = [-1,5,3,4,0] output: [-1,0,3,4,5] example 3: input: head = [] output: [] constraints: the number of nodes in the list is in the range `[0, 5 * 104]`. `-105 <= node.val <= 105`"
149,Max Points on a Line,"Given an array of `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.


Example 1:
Input: points = [[1,1],[2,2],[3,3]]
Output: 3

Example 2:
Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4

Constraints:
`1 <= points.length <= 300`
`points[i].length == 2`
`-104 <= xi, yi <= 104`
All the `points` are unique.",Hard,https://leetcode.com/problems/max-points-on-a-line,"Apple,Google,LinkedIn,Amazon","Hash Table,Math",85,"[Line Reflection, /problems/line-reflection/, Medium]","given an array of `points` where `points[i] = [xi, yi]` represents a point on the x-y plane, return the maximum number of points that lie on the same straight line.","input: points = [[1,1],[2,2],[3,3]] output: 3 example 2: input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]] output: 4","`1 <= points.length <= 300` `points[i].length == 2` `-10^4 <= xi, yi <= 10^4` all the `points` are unique.",
150,Evaluate Reverse Polish Notation,"Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are `+`, `-`, `*`, and `/`. Each operand may be an integer or another expression.

Note that division between two integers should truncate toward zero.

It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.


Example 1:
Input: tokens = [""2"",""1"",""+"",""3"",""*""]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:
Input: tokens = [""4"",""13"",""5"",""/"",""+""]
Output: 6
Explanation: (4 + (13 / 5)) = 6

Example 3:
Input: tokens = [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

Constraints:
`1 <= tokens.length <= 104`
`tokens[i]` is either an operator: `""+""`, `""-""`, `""*""`, or `""/""`, or an integer in the range `[-200, 200]`.",Medium,https://leetcode.com/problems/evaluate-reverse-polish-notation,"Amazon,Oracle,LinkedIn,Google,Microsoft",Stack,1528,"[Basic Calculator, /problems/basic-calculator/, Hard], [Expression Add Operators, /problems/expression-add-operators/, Hard]","evaluate the value of an arithmetic expression in reverse polish notation. valid operators are `+`, `-`, `*`, and `/`. each operand may be an integer or another expression. note that division between two integers should truncate toward zero. it is guaranteed that the given rpn expression is always valid. that means the expression would always evaluate to a result, and there will not be any division by zero operation.","input: tokens = [""2"",""1"",""+"",""3"",""*""] output: 9 explanation: ((2 + 1) * 3) = 9 example 2: input: tokens = [""4"",""13"",""5"",""/"",""+""] output: 6 explanation: (4 + (13 / 5)) = 6 example 3: input: tokens = [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""] output: 22 explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5 = ((10 * (6 / (12 * -11))) + 17) + 5 = ((10 * (6 / -132)) + 17) + 5 = ((10 * 0) + 17) + 5 = (0 + 17) + 5 = 17 + 5 = 22","`1 <= tokens.length <= 10^4` `tokens[i]` is either an operator: `""+""`, `""-""`, `""*""`, or `""/""`, or an integer in the range `[-200, 200]`.",
151,Reverse Words in a String,"Given an input string `s`, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.


Example 1:
Input: s = ""the sky is blue""
Output: ""blue is sky the""

Example 2:
Input: s = ""  hello world  ""
Output: ""world hello""
Explanation: Your reversed string should not contain leading or trailing spaces.


Example 3:
Input: s = ""a good   example""
Output: ""example good a""
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.


Example 4:
Input: s = ""  Bob    Loves  Alice   ""
Output: ""Alice Loves Bob""

Example 5:
Input: s = ""Alice does not even like bob""
Output: ""bob like even not does Alice""

Constraints:
`1 <= s.length <= 104`
`s` contains English letters (upper-case and lower-case), digits, and spaces `' '`.

There is at least one word in `s`.

Follow up: Could you solve it in-place with `O(1)` extra space?",Medium,https://leetcode.com/problems/reverse-words-in-a-string,"Microsoft,Oracle,LinkedIn,Apple,Salesforce",String,1583,"[Reverse Words in a String II, /problems/reverse-words-in-a-string-ii/, Medium]","given an input string `s`, reverse the order of the words. a word is defined as a sequence of non-space characters. the words in `s` will be separated by at least one space. return a string of the words in reverse order concatenated by a single space. note that `s` may contain leading or trailing spaces or multiple spaces between two words. the returned string should only have a single space separating the words. do not include any extra spaces.","input: s = ""the sky is blue"" output: ""blue is sky the"" example 2: input: s = "" hello world "" output: ""world hello"" explanation: your reversed string should not contain leading or trailing spaces. example 3: input: s = ""a good example"" output: ""example good a"" explanation: you need to reduce multiple spaces between two words to a single space in the reversed string. example 4: input: s = "" bob loves alice "" output: ""alice loves bob"" example 5: input: s = ""alice does not even like bob"" output: ""bob like even not does alice""","`1 <= s.length <= 10^4` `s` contains english letters (upper-case and lower-case), digits, and spaces `' '`. there is at least one word in `s`.",could you solve it in-place with `o(1)` extra space?
152,Maximum Product Subarray,"Given an integer array `nums`, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.


Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.


Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.


Constraints:
`1 <= nums.length <= 2 * 104`
`-10 <= nums[i] <= 10`
The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.",Medium,https://leetcode.com/problems/maximum-product-subarray,"Amazon,LinkedIn,Google,Apple,Facebook,Akuna Capital","Array,Dynamic Programming",6539,"[Maximum Subarray, /problems/maximum-subarray/, Easy], [House Robber, /problems/house-robber/, Medium], [Product of Array Except Self, /problems/product-of-array-except-self/, Medium], [Maximum Product of Three Numbers, /problems/maximum-product-of-three-numbers/, Easy], [Subarray Product Less Than K, /problems/subarray-product-less-than-k/, Medium]","given an integer array `nums`, find a contiguous non-empty subarray within the array that has the largest product, and return the product. it is guaranteed that the answer will fit in a 32-bit integer. a subarray is a contiguous subsequence of the array.","input: nums = [2,3,-2,4] output: 6 explanation: [2,3] has the largest product 6. example 2: input: nums = [-2,0,-1] output: 0 explanation: the result cannot be 2, because [-2,-1] is not a subarray.",`1 <= nums.length <= 2 * 10^4` `-10 <= nums[i] <= 10` the product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.,
153,Find Minimum in Rotated Sorted Array,"Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:
`[4,5,6,7,0,1,2]` if it was rotated `4` times.

`[0,1,2,4,5,6,7]` if it was rotated `7` times.

Notice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.

Given the sorted rotated array `nums` of unique elements, return the minimum element of this array.


Example 1:
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.


Example 2:
Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.


Example 3:
Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 

Constraints:
`n == nums.length`
`1 <= n <= 5000`
`-5000 <= nums[i] <= 5000`
All the integers of `nums` are unique.

`nums` is sorted and rotated between `1` and `n` times.",Medium,https://leetcode.com/problems/find-minimum-in-rotated-sorted-array,"Facebook,Amazon,Bloomberg,Goldman Sachs,Microsoft,Oracle","Array,Binary Search",3315,"[Search in Rotated Sorted Array, /problems/search-in-rotated-sorted-array/, Medium], [Find Minimum in Rotated Sorted Array II, /problems/find-minimum-in-rotated-sorted-array-ii/, Hard]","suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. for example, the array `nums = [0,1,2,4,5,6,7]` might become: `[4,5,6,7,0,1,2]` if it was rotated `4` times. `[0,1,2,4,5,6,7]` if it was rotated `7` times. notice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`. given the sorted rotated array `nums` of unique elements, return the minimum element of this array.","input: nums = [3,4,5,1,2] output: 1 explanation: the original array was [1,2,3,4,5] rotated 3 times. example 2: input: nums = [4,5,6,7,0,1,2] output: 0 explanation: the original array was [0,1,2,4,5,6,7] and it was rotated 4 times. example 3: input: nums = [11,13,15,17] output: 11 explanation: the original array was [11,13,15,17] and it was rotated 4 times.",`n == nums.length` `1 <= n <= 5000` `-5000 <= nums[i] <= 5000` all the integers of `nums` are unique. `nums` is sorted and rotated between `1` and `n` times.,
154,Find Minimum in Rotated Sorted Array II,"Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become:
`[4,5,6,7,0,1,4]` if it was rotated `4` times.

`[0,1,4,4,5,6,7]` if it was rotated `7` times.

Notice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.

Given the sorted rotated array `nums` that may contain duplicates, return the minimum element of this array.


Example 1:
Input: nums = [1,3,5]
Output: 1

Example 2:
Input: nums = [2,2,2,0,1]
Output: 0

Constraints:
`n == nums.length`
`1 <= n <= 5000`
`-5000 <= nums[i] <= 5000`
`nums` is sorted and rotated between `1` and `n` times.

Follow up: This is the same as Find Minimum in Rotated Sorted Array but with duplicates. Would allow duplicates affect the run-time complexity? How and why?",Hard,https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii,"Amazon,Google,Oracle","Array,Binary Search",1504,"[Find Minimum in Rotated Sorted Array, /problems/find-minimum-in-rotated-sorted-array/, Medium]","suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. for example, the array `nums = [0,1,4,4,5,6,7]` might become: `[4,5,6,7,0,1,4]` if it was rotated `4` times. `[0,1,4,4,5,6,7]` if it was rotated `7` times. notice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`. given the sorted rotated array `nums` that may contain duplicates, return the minimum element of this array.","input: nums = [1,3,5] output: 1 example 2: input: nums = [2,2,2,0,1] output: 0",`n == nums.length` `1 <= n <= 5000` `-5000 <= nums[i] <= 5000` `nums` is sorted and rotated between `1` and `n` times.,this is the same as find minimum in rotated sorted array but with duplicates. would allow duplicates affect the run-time complexity? how and why?
155,Min Stack,"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the `MinStack` class:
`MinStack()` initializes the stack object.

`void push(val)` pushes the element `val` onto the stack.

`void pop()` removes the element on the top of the stack.

`int top()` gets the top element of the stack.

`int getMin()` retrieves the minimum element in the stack.


Example 1:
Input
[""MinStack"",""push"",""push"",""push"",""getMin"",""pop"",""top"",""getMin""]
[[],[-2],[0],[-3],[],[],[],[]]
Output
[null,null,null,null,-3,null,0,-2]
Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

Constraints:
`-231 <= val <= 231 - 1`
Methods `pop`, `top` and `getMin` operations will always be called on non-empty stacks.

At most `3 * 104` calls will be made to `push`, `pop`, `top`, and `getMin`.",Easy,https://leetcode.com/problems/min-stack,"Capital One,Amazon,Bloomberg,Microsoft,Oracle,eBay,Apple,Coupang","Stack,Design",4840,"[Sliding Window Maximum, /problems/sliding-window-maximum/, Hard], [Max Stack, /problems/max-stack/, Easy]","design a stack that supports push, pop, top, and retrieving the minimum element in constant time. implement the `minstack` class: `minstack()` initializes the stack object. `void push(val)` pushes the element `val` onto the stack. `void pop()` removes the element on the top of the stack. `int top()` gets the top element of the stack. `int getmin()` retrieves the minimum element in the stack.","input [""minstack"",""push"",""push"",""push"",""getmin"",""pop"",""top"",""getmin""] [[],[-2],[0],[-3],[],[],[],[]] output [null,null,null,null,-3,null,0,-2] explanation minstack minstack = new minstack(); minstack.push(-2); minstack.push(0); minstack.push(-3); minstack.getmin(); // return -3 minstack.pop(); minstack.top(); // return 0 minstack.getmin(); // return -2","`-231 <= val <= 231 - 1` methods `pop`, `top` and `getmin` operations will always be called on non-empty stacks. at most `3 * 10^4` calls will be made to `push`, `pop`, `top`, and `getmin`.",
156,Binary Tree Upside Down,"Given the `root` of a binary tree, turn the tree upside down and return the new root.

You can turn a binary tree upside down with the following steps:
The original left child becomes the new root.

The original root becomes the new right child.

The original right child becomes the new left child.

The mentioned steps are done level by level, it is guaranteed that every node in the given tree has either 0 or 2 children.


Example 1:
Input: root = [1,2,3,4,5]
Output: [4,5,2,null,null,3,1]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Constraints:
The number of nodes in the tree will be in the range `[0, 10]`.

`1 <= Node.val <= 10`
`Every node has either 0 or 2 children.`",Medium,https://leetcode.com/problems/binary-tree-upside-down,LinkedIn,Tree,340,"[Reverse Linked List, /problems/reverse-linked-list/, Easy]","given the `root` of a binary tree, turn the tree upside down and return the new root. you can turn a binary tree upside down with the following steps: the original left child becomes the new root. the original root becomes the new right child. the original right child becomes the new left child. the mentioned steps are done level by level, it is guaranteed that every node in the given tree has either 0 or 2 children.","input: root = [1,2,3,4,5] output: [4,5,2,null,null,3,1] example 2: input: root = [] output: [] example 3: input: root = [1] output: [1]","the number of nodes in the tree will be in the range `[0, 10]`. `1 <= node.val <= 10` `every node has either 0 or 2 children.`",
157,Read N Characters Given Read4,"Given a `file` and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters.

Method read4: 
The API `read4` reads four consecutive characters from `file`, then writes those characters into the buffer array `buf4`.

The return value is the number of actual characters read.

Note that `read4()` has its own file pointer, much like `FILE *fp` in C.

Definition of read4:
    Parameter:  char[] buf4
    Returns:    int
buf4[] is a destination, not a source. The results from read4 will be copied to buf4[].

Below is a high-level example of how `read4` works:
File file(""abcde`""); // File is ""`abcde`"", initially file pointer (fp) points to 'a'
char[] buf4 = new char[4]; // Create buffer with enough space to store characters
read4(buf4); // read4 returns 4. Now buf4 = ""abcd"", fp points to 'e'
read4(buf4); // read4 returns 1. Now buf4 = ""e"", fp points to end of file
read4(buf4); // read4 returns 0. Now buf4 = """", fp points to end of file`
Method read:
By using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.

The return value is the number of actual characters read.

Definition of read: 
    Parameters:	char[] buf, int n
    Returns:	int
buf[] is a destination, not a source. You will need to write the results to buf[].

Note:
Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.

The `read` function will only be called once for each test case.

You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.


Example 1:
Input: file = ""abc"", n = 4
Output: 3
Explanation: After calling your read method, buf should contain ""abc"". We read a total of 3 characters from the file, so return 3.

Note that ""abc"" is the file's content, not buf. buf is the destination buffer that you will have to write the results to.


Example 2:
Input: file = ""abcde"", n = 5
Output: 5
Explanation: After calling your read method, buf should contain ""abcde"". We read a total of 5 characters from the file, so return 5.


Example 3:
Input: file = ""abcdABCD1234"", n = 12
Output: 12
Explanation: After calling your read method, buf should contain ""abcdABCD1234"". We read a total of 12 characters from the file, so return 12.


Example 4:
Input: file = ""leetcode"", n = 5
Output: 5
Explanation: After calling your read method, buf should contain ""leetc"". We read a total of 5 characters from the file, so return 5.


Constraints:
`1 <= file.length <= 500`
`file` consist of English letters and digits.

`1 <= n <= 1000`",Easy,https://leetcode.com/problems/read-n-characters-given-read4,"Facebook,Rubrik,Microsoft",String,382,"[Read N Characters Given Read4 II - Call multiple times, /problems/read-n-characters-given-read4-ii-call-multiple-times/, Hard]","given a `file` and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters. method read4: the api `read4` reads four consecutive characters from `file`, then writes those characters into the buffer array `buf4`. the return value is the number of actual characters read. note that `read4()` has its own file pointer, much like `file *fp` in c. definition of read4: parameter: char[] buf4 returns: int buf4[] is a destination, not a source. the results from read4 will be copied to buf4[]. below is a high-level example of how `read4` works: file file(""abcde`""); // file is ""`abcde`"", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // create buffer with enough space to store characters read4(buf4); // read4 returns 4. now buf4 = ""abcd"", fp points to 'e' read4(buf4); // read4 returns 1. now buf4 = ""e"", fp points to end of file read4(buf4); // read4 returns 0. now buf4 = """", fp points to end of file` method read: by using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. consider that you cannot manipulate `file` directly. the return value is the number of actual characters read. definition of read: parameters: char[] buf, int n returns: int buf[] is a destination, not a source. you will need to write the results to buf[]. note: consider that you cannot manipulate the file directly. the file is only accessible for `read4` but not for `read`. the `read` function will only be called once for each test case. you may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.","input: file = ""abc"", n = 4 output: 3 explanation: after calling your read method, buf should contain ""abc"". we read a total of 3 characters from the file, so return 3. note that ""abc"" is the file's content, not buf. buf is the destination buffer that you will have to write the results to. example 2: input: file = ""abcde"", n = 5 output: 5 explanation: after calling your read method, buf should contain ""abcde"". we read a total of 5 characters from the file, so return 5. example 3: input: file = ""abcdabcd1234"", n = 12 output: 12 explanation: after calling your read method, buf should contain ""abcdabcd1234"". we read a total of 12 characters from the file, so return 12. example 4: input: file = ""leetcode"", n = 5 output: 5 explanation: after calling your read method, buf should contain ""leetc"". we read a total of 5 characters from the file, so return 5.",`1 <= file.length <= 500` `file` consist of english letters and digits. `1 <= n <= 1000`,
158,Read N Characters Given Read4 II - Call multiple times,"Given a `file` and assume that you can only read the file using a given method `read4`, implement a method `read` to read `n` characters. Your method `read` may be called multiple times.

Method read4: 
The API `read4` reads four consecutive characters from `file`, then writes those characters into the buffer array `buf4`.

The return value is the number of actual characters read.

Note that `read4()` has its own file pointer, much like `FILE *fp` in C.

Definition of read4:
    Parameter:  char[] buf4
    Returns:    int
buf4[] is a destination, not a source. The results from read4 will be copied to buf4[].

Below is a high-level example of how `read4` works:
File file(""abcde`""); // File is ""`abcde`"", initially file pointer (fp) points to 'a'
char[] buf4 = new char[4]; // Create buffer with enough space to store characters
read4(buf4); // read4 returns 4. Now buf4 = ""abcd"", fp points to 'e'
read4(buf4); // read4 returns 1. Now buf4 = ""e"", fp points to end of file
read4(buf4); // read4 returns 0. Now buf4 = """", fp points to end of file`
Method read:
By using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.

The return value is the number of actual characters read.

Definition of read: 
    Parameters:	char[] buf, int n
    Returns:	int
buf[] is a destination, not a source. You will need to write the results to buf[].

Note:
Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.

The read function may be called multiple times.

Please remember to RESET your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see here for more details.

You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.

It is guaranteed that in a given test case the same buffer `buf` is called by `read`.


Example 1:
Input: file = ""abc"", queries = [1,2,1]
Output: [1,2,0]
Explanation: The test case represents the following scenario:
File file(""abc"");
Solution sol;
sol.read(buf, 1); // After calling your read method, buf should contain ""a"". We read a total of 1 character from the file, so return 1.

sol.read(buf, 2); // Now buf should contain ""bc"". We read a total of 2 characters from the file, so return 2.

sol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.

Assume buf is allocated and guaranteed to have enough space for storing all characters from the file.


Example 2:
Input: file = ""abc"", queries = [4,1]
Output: [3,0]
Explanation: The test case represents the following scenario:
File file(""abc"");
Solution sol;
sol.read(buf, 4); // After calling your read method, buf should contain ""abc"". We read a total of 3 characters from the file, so return 3.

sol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.


Constraints:
`1 <= file.length <= 500`
`file` consist of English letters and digits.

`1 <= queries.length <= 10`
`1 <= queries[i] <= 500`",Hard,https://leetcode.com/problems/read-n-characters-given-read4-ii-call-multiple-times,"Facebook,Lyft,Oracle,Apple",String,627,"[Read N Characters Given Read4, /problems/read-n-characters-given-read4/, Easy]","given a `file` and assume that you can only read the file using a given method `read4`, implement a method `read` to read `n` characters. your method `read` may be called multiple times. method read4: the api `read4` reads four consecutive characters from `file`, then writes those characters into the buffer array `buf4`. the return value is the number of actual characters read. note that `read4()` has its own file pointer, much like `file *fp` in c. definition of read4: parameter: char[] buf4 returns: int buf4[] is a destination, not a source. the results from read4 will be copied to buf4[]. below is a high-level example of how `read4` works: file file(""abcde`""); // file is ""`abcde`"", initially file pointer (fp) points to 'a' char[] buf4 = new char[4]; // create buffer with enough space to store characters read4(buf4); // read4 returns 4. now buf4 = ""abcd"", fp points to 'e' read4(buf4); // read4 returns 1. now buf4 = ""e"", fp points to end of file read4(buf4); // read4 returns 0. now buf4 = """", fp points to end of file` method read: by using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. consider that you cannot manipulate `file` directly. the return value is the number of actual characters read. definition of read: parameters: char[] buf, int n returns: int buf[] is a destination, not a source. you will need to write the results to buf[]. note: consider that you cannot manipulate the file directly. the file is only accessible for `read4` but not for `read`. the read function may be called multiple times. please remember to reset your class variables declared in solution, as static/class variables are persisted across multiple test cases. please see here for more details. you may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters. it is guaranteed that in a given test case the same buffer `buf` is called by `read`.","input: file = ""abc"", queries = [1,2,1] output: [1,2,0] explanation: the test case represents the following scenario: file file(""abc""); solution sol; sol.read(buf, 1); // after calling your read method, buf should contain ""a"". we read a total of 1 character from the file, so return 1. sol.read(buf, 2); // now buf should contain ""bc"". we read a total of 2 characters from the file, so return 2. sol.read(buf, 1); // we have reached the end of file, no more characters can be read. so return 0. assume buf is allocated and guaranteed to have enough space for storing all characters from the file. example 2: input: file = ""abc"", queries = [4,1] output: [3,0] explanation: the test case represents the following scenario: file file(""abc""); solution sol; sol.read(buf, 4); // after calling your read method, buf should contain ""abc"". we read a total of 3 characters from the file, so return 3. sol.read(buf, 1); // we have reached the end of file, no more characters can be read. so return 0.",`1 <= file.length <= 500` `file` consist of english letters and digits. `1 <= queries.length <= 10` `1 <= queries[i] <= 500`,
159,Longest Substring with At Most Two Distinct Characters,"Given a string `s`, return the length of the longest substring that contains at most two distinct characters.


Example 1:
Input: s = ""eceba""
Output: 3
Explanation: The substring is ""ece"" which its length is 3.


Example 2:
Input: s = ""ccaabbb""
Output: 5
Explanation: The substring is ""aabbb"" which its length is 5.


Constraints:
`1 <= s.length <= 104`
`s` consists of English letters.",Medium,https://leetcode.com/problems/longest-substring-with-at-most-two-distinct-characters,Facebook,"Hash Table,Two Pointers,String,Sliding Window",1276,"[Longest Substring Without Repeating Characters, /problems/longest-substring-without-repeating-characters/, Medium], [Sliding Window Maximum, /problems/sliding-window-maximum/, Hard], [Longest Substring with At Most K Distinct Characters, /problems/longest-substring-with-at-most-k-distinct-characters/, Medium], [Subarrays with K Different Integers, /problems/subarrays-with-k-different-integers/, Hard]","given a string `s`, return the length of the longest substring that contains at most two distinct characters.","input: s = ""eceba"" output: 3 explanation: the substring is ""ece"" which its length is 3. example 2: input: s = ""ccaabbb"" output: 5 explanation: the substring is ""aabbb"" which its length is 5.",`1 <= s.length <= 10^4` `s` consists of english letters.,
160,Intersection of Two Linked Lists,"Given the heads of two singly linked-lists `headA` and `headB`, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return `null`.

For example, the following two linked lists begin to intersect at node `c1`:
It is guaranteed that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.


Example 1:
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).

From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.


Example 2:
Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).

From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.


Example 3:
Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: No intersection
Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.

Explanation: The two lists do not intersect, so return null.


Constraints:
The number of nodes of `listA` is in the `m`.

The number of nodes of `listB` is in the `n`.

`0 <= m, n <= 3 * 104`
`1 <= Node.val <= 105`
`0 <= skipA <= m`
`0 <= skipB <= n`
`intersectVal` is `0` if `listA` and `listB` do not intersect.

`intersectVal == listA[skipA + 1] == listB[skipB + 1]` if `listA` and `listB` intersect.

Follow up: Could you write a solution that runs in `O(n)` time and use only `O(1)` memory?",Easy,https://leetcode.com/problems/intersection-of-two-linked-lists,"Microsoft,Amazon,Facebook,Apple,ByteDance,Paypal,LinkedIn,Intuit",Linked List,5392,"[Minimum Index Sum of Two Lists, /problems/minimum-index-sum-of-two-lists/, Easy]","given the heads of two singly linked-lists `heada` and `headb`, return the node at which the two lists intersect. if the two linked lists have no intersection at all, return `null`. for example, the following two linked lists begin to intersect at node `c1`: it is guaranteed that there are no cycles anywhere in the entire linked structure. note that the linked lists must retain their original structure after the function returns.","input: intersectval = 8, lista = [4,1,8,4,5], listb = [5,6,1,8,4,5], skipa = 2, skipb = 3 output: intersected at '8' explanation: the intersected node's value is 8 (note that this must not be 0 if the two lists intersect). from the head of a, it reads as [4,1,8,4,5]. from the head of b, it reads as [5,6,1,8,4,5]. there are 2 nodes before the intersected node in a; there are 3 nodes before the intersected node in b. example 2: input: intersectval = 2, lista = [1,9,1,2,4], listb = [3,2,4], skipa = 3, skipb = 1 output: intersected at '2' explanation: the intersected node's value is 2 (note that this must not be 0 if the two lists intersect). from the head of a, it reads as [1,9,1,2,4]. from the head of b, it reads as [3,2,4]. there are 3 nodes before the intersected node in a; there are 1 node before the intersected node in b. example 3: input: intersectval = 0, lista = [2,6,4], listb = [1,5], skipa = 3, skipb = 2 output: no intersection explanation: from the head of a, it reads as [2,6,4]. from the head of b, it reads as [1,5]. since the two lists do not intersect, intersectval must be 0, while skipa and skipb can be arbitrary values. explanation: the two lists do not intersect, so return null.","the number of nodes of `lista` is in the `m`. the number of nodes of `listb` is in the `n`. `0 <= m, n <= 3 * 10^4` `1 <= node.val <= 10^5` `0 <= skipa <= m` `0 <= skipb <= n` `intersectval` is `0` if `lista` and `listb` do not intersect. `intersectval == lista[skipa + 1] == listb[skipb + 1]` if `lista` and `listb` intersect.",could you write a solution that runs in `o(n)` time and use only `o(1)` memory?
161,One Edit Distance,"Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`.

A string `s` is said to be one distance apart from a string `t` if you can:
Insert exactly one character into `s` to get `t`.

Delete exactly one character from `s` to get `t`.

Replace exactly one character of `s` with a different character to get `t`.


Example 1:
Input: s = ""ab"", t = ""acb""
Output: true
Explanation: We can insert 'c' into s to get t.


Example 2:
Input: s = """", t = """"
Output: false
Explanation: We cannot get t from s by only one step.


Example 3:
Input: s = ""a"", t = """"
Output: true

Example 4:
Input: s = """", t = ""A""
Output: true

Constraints:
`0 <= s.length <= 104`
`0 <= t.length <= 104`
`s` and `t` consist of lower-case letters, upper-case letters and/or digits.",Medium,https://leetcode.com/problems/one-edit-distance,"Apple,Facebook,Amazon,Yandex",String,838,"[Edit Distance, /problems/edit-distance/, Hard]","given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`. a string `s` is said to be one distance apart from a string `t` if you can: insert exactly one character into `s` to get `t`. delete exactly one character from `s` to get `t`. replace exactly one character of `s` with a different character to get `t`.","input: s = ""ab"", t = ""acb"" output: true explanation: we can insert 'c' into s to get t. example 2: input: s = """", t = """" output: false explanation: we cannot get t from s by only one step. example 3: input: s = ""a"", t = """" output: true example 4: input: s = """", t = ""a"" output: true","`0 <= s.length <= 10^4` `0 <= t.length <= 10^4` `s` and `t` consist of lower-case letters, upper-case letters and/or digits.",
162,Find Peak Element,"A peak element is an element that is strictly greater than its neighbors.

Given an integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that `nums[-1] = nums[n] = -∞`.


Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.


Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.


Constraints:
`1 <= nums.length <= 1000`
`-231 <= nums[i] <= 231 - 1`
`nums[i] != nums[i + 1]` for all valid `i`.

Follow up: Could you implement a solution with logarithmic complexity?",Medium,https://leetcode.com/problems/find-peak-element,"Facebook,Amazon,Google,Bloomberg,Quora","Array,Binary Search",2711,"[Peak Index in a Mountain Array, /problems/peak-index-in-a-mountain-array/, Easy]","a peak element is an element that is strictly greater than its neighbors. given an integer array `nums`, find a peak element, and return its index. if the array contains multiple peaks, return the index to any of the peaks. you may imagine that `nums[-1] = nums[n] = -∞`.","input: nums = [1,2,3,1] output: 2 explanation: 3 is a peak element and your function should return the index number 2. example 2: input: nums = [1,2,1,3,5,6,4] output: 5 explanation: your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.",`1 <= nums.length <= 1000` `-231 <= nums[i] <= 231 - 1` `nums[i] != nums[i + 1]` for all valid `i`.,could you implement a solution with logarithmic complexity?
163,Missing Ranges,"You are given an inclusive range `[lower, upper]` and a sorted unique integer array `nums`, where all elements are in the inclusive range.

A number `x` is considered missing if `x` is in the range `[lower, upper]` and `x` is not in `nums`.

Return the smallest sorted list of ranges that cover every missing number exactly. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges.

Each range `[a,b]` in the list should be output as:
`""a->b""` if `a != b`
`""a""` if `a == b`

Example 1:
Input: nums = [0,1,3,50,75], lower = 0, upper = 99
Output: [""2"",""4->49"",""51->74"",""76->99""]
Explanation: The ranges are:
[2,2] --> ""2""
[4,49] --> ""4->49""
[51,74] --> ""51->74""
[76,99] --> ""76->99""

Example 2:
Input: nums = [], lower = 1, upper = 1
Output: [""1""]
Explanation: The only missing range is [1,1], which becomes ""1"".


Example 3:
Input: nums = [], lower = -3, upper = -1
Output: [""-3->-1""]
Explanation: The only missing range is [-3,-1], which becomes ""-3->-1"".


Example 4:
Input: nums = [-1], lower = -1, upper = -1
Output: []
Explanation: There are no missing ranges since there are no missing numbers.


Example 5:
Input: nums = [-1], lower = -2, upper = -1
Output: [""-2""]

Constraints:
`-109 <= lower <= upper <= 109`
`0 <= nums.length <= 100`
`lower <= nums[i] <= upper`
All the values of `nums` are unique.",Easy,https://leetcode.com/problems/missing-ranges,"Facebook,Google,Amazon,Coupang",Array,523,"[Summary Ranges, /problems/summary-ranges/, Easy]","you are given an inclusive range `[lower, upper]` and a sorted unique integer array `nums`, where all elements are in the inclusive range. a number `x` is considered missing if `x` is in the range `[lower, upper]` and `x` is not in `nums`. return the smallest sorted list of ranges that cover every missing number exactly. that is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges. each range `[a,b]` in the list should be output as: `""a->b""` if `a != b` `""a""` if `a == b`","input: nums = [0,1,3,50,75], lower = 0, upper = 99 output: [""2"",""4->49"",""51->74"",""76->99""] explanation: the ranges are: [2,2] --> ""2"" [4,49] --> ""4->49"" [51,74] --> ""51->74"" [76,99] --> ""76->99"" example 2: input: nums = [], lower = 1, upper = 1 output: [""1""] explanation: the only missing range is [1,1], which becomes ""1"". example 3: input: nums = [], lower = -3, upper = -1 output: [""-3->-1""] explanation: the only missing range is [-3,-1], which becomes ""-3->-1"". example 4: input: nums = [-1], lower = -1, upper = -1 output: [] explanation: there are no missing ranges since there are no missing numbers. example 5: input: nums = [-1], lower = -2, upper = -1 output: [""-2""]",`-10^9 <= lower <= upper <= 10^9` `0 <= nums.length <= 10^0` `lower <= nums[i] <= upper` all the values of `nums` are unique.,
164,Maximum Gap,"Given an integer array `nums`, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return `0`.


Example 1:
Input: nums = [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.


Example 2:
Input: nums = [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.


Constraints:
`1 <= nums.length <= 104`
`0 <= nums[i] <= 109`
Follow up: Could you solve it in linear time/space?",Hard,https://leetcode.com/problems/maximum-gap,Amazon,Sort,1130,,"given an integer array `nums`, return the maximum difference between two successive elements in its sorted form. if the array contains less than two elements, return `0`.","input: nums = [3,6,9,1] output: 3 explanation: the sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3. example 2: input: nums = [10] output: 0 explanation: the array contains less than 2 elements, therefore return 0.",`1 <= nums.length <= 10^4` `0 <= nums[i] <= 10^9`,could you solve it in linear time/space?
165,Compare Version Numbers,"Given two version numbers, `version1` and `version2`, compare them.

Version numbers consist of one or more revisions joined by a dot `'.'`. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.

To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions `1` and `001` are considered equal. If a version number does not specify a revision at an index, then treat the revision as `0`. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.

Return the following:
If `version1 < version2`, return `-1`.

If `version1 > version2`, return `1`.

Otherwise, return `0`.


Example 1:
Input: version1 = ""1.01"", version2 = ""1.001""
Output: 0
Explanation: Ignoring leading zeroes, both ""01"" and ""001"" represent the same integer ""1"".


Example 2:
Input: version1 = ""1.0"", version2 = ""1.0.0""
Output: 0
Explanation: version1 does not specify revision 2, which means it is treated as ""0"".


Example 3:
Input: version1 = ""0.1"", version2 = ""1.1""
Output: -1
Explanation: version1's revision 0 is ""0"", while version2's revision 0 is ""1"". 0 < 1, so version1 < version2.


Example 4:
Input: version1 = ""1.0.1"", version2 = ""1""
Output: 1

Example 5:
Input: version1 = ""7.5.2.4"", version2 = ""7.5.3""
Output: -1

Constraints:
`1 <= version1.length, version2.length <= 500`
`version1` and `version2` only contain digits and `'.'`.

`version1` and `version2` are valid version numbers.

All the given revisions in `version1` and `version2` can be stored in a 32-bit integer.",Medium,https://leetcode.com/problems/compare-version-numbers,"Amazon,Google,Microsoft,ByteDance",String,806,,"given two version numbers, `version1` and `version2`, compare them. version numbers consist of one or more revisions joined by a dot `'.'`. each revision consists of digits and may contain leading zeros. every revision contains at least one character. revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. for example `2.5.33` and `0.1` are valid version numbers. to compare version numbers, compare their revisions in left-to-right order. revisions are compared using their integer value ignoring any leading zeros. this means that revisions `1` and `001` are considered equal. if a version number does not specify a revision at an index, then treat the revision as `0`. for example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`. return the following: if `version1 < version2`, return `-1`. if `version1 > version2`, return `1`. otherwise, return `0`.","input: version1 = ""1.01"", version2 = ""1.001"" output: 0 explanation: ignoring leading zeroes, both ""01"" and ""001"" represent the same integer ""1"". example 2: input: version1 = ""1.0"", version2 = ""1.0.0"" output: 0 explanation: version1 does not specify revision 2, which means it is treated as ""0"". example 3: input: version1 = ""0.1"", version2 = ""1.1"" output: -1 explanation: version1's revision 0 is ""0"", while version2's revision 0 is ""1"". 0 < 1, so version1 < version2. example 4: input: version1 = ""1.0.1"", version2 = ""1"" output: 1 example 5: input: version1 = ""7.5.2.4"", version2 = ""7.5.3"" output: -1","`1 <= version1.length, version2.length <= 500` `version1` and `version2` only contain digits and `'.'`. `version1` and `version2` are valid version numbers. all the given revisions in `version1` and `version2` can be stored in a 32-bit integer.",
166,Fraction to Recurring Decimal,"Given two integers representing the `numerator` and `denominator` of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return any of them.

It is guaranteed that the length of the answer string is less than `104` for all the given inputs.


Example 1:
Input: numerator = 1, denominator = 2
Output: ""0.5""

Example 2:
Input: numerator = 2, denominator = 1
Output: ""2""

Example 3:
Input: numerator = 2, denominator = 3
Output: ""0.(6)""

Example 4:
Input: numerator = 4, denominator = 333
Output: ""0.(012)""

Example 5:
Input: numerator = 1, denominator = 5
Output: ""0.2""

Constraints:
`-231 <= numerator, denominator <= 231 - 1`
`denominator != 0`",Medium,https://leetcode.com/problems/fraction-to-recurring-decimal,"Goldman Sachs,Facebook","Hash Table,Math",1109,,"given two integers representing the `numerator` and `denominator` of a fraction, return the fraction in string format. if the fractional part is repeating, enclose the repeating part in parentheses. if multiple answers are possible, return any of them. it is guaranteed that the length of the answer string is less than `104` for all the given inputs.","input: numerator = 1, denominator = 2 output: ""0.5"" example 2: input: numerator = 2, denominator = 1 output: ""2"" example 3: input: numerator = 2, denominator = 3 output: ""0.(6)"" example 4: input: numerator = 4, denominator = 333 output: ""0.(012)"" example 5: input: numerator = 1, denominator = 5 output: ""0.2""","`-231 <= numerator, denominator <= 231 - 1` `denominator != 0`",
167,Two Sum II - Input array is sorted,"Given an array of integers `numbers` that is already sorted in ascending order, find two numbers such that they add up to a specific `target` number.

Return the indices of the two numbers (1-indexed) as an integer array `answer` of size `2`, where `1 <= answer[0] < answer[1] <= numbers.length`.

You may assume that each input would have exactly one solution and you may not use the same element twice.


Example 1:
Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.


Example 2:
Input: numbers = [2,3,4], target = 6
Output: [1,3]

Example 3:
Input: numbers = [-1,0], target = -1
Output: [1,2]

Constraints:
`2 <= numbers.length <= 3 * 104`
`-1000 <= numbers[i] <= 1000`
`numbers` is sorted in increasing order.

`-1000 <= target <= 1000`
Only one valid answer exists.",Easy,https://leetcode.com/problems/two-sum-ii-input-array-is-sorted,"Amazon,Oracle,Microsoft","Array,Two Pointers,Binary Search",2517,"[Two Sum, /problems/two-sum/, Easy], [Two Sum IV - Input is a BST, /problems/two-sum-iv-input-is-a-bst/, Easy], [Two Sum Less Than K, /problems/two-sum-less-than-k/, Easy]","given an array of integers `numbers` that is already sorted in ascending order, find two numbers such that they add up to a specific `target` number. return the indices of the two numbers (1-indexed) as an integer array `answer` of size `2`, where `1 <= answer[0] < answer[1] <= numbers.length`. you may assume that each input would have exactly one solution and you may not use the same element twice.","input: numbers = [2,7,11,15], target = 9 output: [1,2] explanation: the sum of 2 and 7 is 9. therefore index1 = 1, index2 = 2. example 2: input: numbers = [2,3,4], target = 6 output: [1,3] example 3: input: numbers = [-1,0], target = -1 output: [1,2]",`2 <= numbers.length <= 3 * 10^4` `-1000 <= numbers[i] <= 1000` `numbers` is sorted in increasing order. `-1000 <= target <= 1000` only one valid answer exists.,
168,Excel Sheet Column Title,"Given an integer `columnNumber`, return its corresponding column title as it appears in an Excel sheet.

For example:
A -> 1
B -> 2
C -> 3
...

Z -> 26
AA -> 27
AB -> 28 
...


Example 1:
Input: columnNumber = 1
Output: ""A""

Example 2:
Input: columnNumber = 28
Output: ""AB""

Example 3:
Input: columnNumber = 701
Output: ""ZY""

Example 4:
Input: columnNumber = 2147483647
Output: ""FXSHRXW""

Constraints:
`1 <= columnNumber <= 231 - 1`",Easy,https://leetcode.com/problems/excel-sheet-column-title,"Microsoft,Facebook",Math,1637,"[Excel Sheet Column Number, /problems/excel-sheet-column-number/, Easy]","given an integer `columnnumber`, return its corresponding column title as it appears in an excel sheet. for","a -> 1 b -> 2 c -> 3 ... z -> 26 aa -> 27 ab -> 28 ... example 1: input: columnnumber = 1 output: ""a"" example 2: input: columnnumber = 28 output: ""ab"" example 3: input: columnnumber = 701 output: ""zy"" example 4: input: columnnumber = 2147483647 output: ""fxshrxw""",`1 <= columnnumber <= 231 - 1`,
169,Majority Element,"Given an array `nums` of size `n`, return the majority element.

The majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.


Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

Constraints:
`n == nums.length`
`1 <= n <= 5 * 104`
`-231 <= nums[i] <= 231 - 1`
Follow-up: Could you solve the problem in linear time and in `O(1)` space?",Easy,https://leetcode.com/problems/majority-element,"Amazon,Microsoft,Bloomberg,Rubrik,Splunk,Apple,ByteDance,GoDaddy","Array,Divide and Conquer,Bit Manipulation",4854,"[Majority Element II, /problems/majority-element-ii/, Medium], [Check If a Number Is Majority Element in a Sorted Array, /problems/check-if-a-number-is-majority-element-in-a-sorted-array/, Easy]","given an array `nums` of size `n`, return the majority element. the majority element is the element that appears more than `⌊n / 2⌋` times. you may assume that the majority element always exists in the array.","input: nums = [3,2,3] output: 3 example 2: input: nums = [2,2,1,1,1,2,2] output: 2",`n == nums.length` `1 <= n <= 5 * 10^4` `-231 <= nums[i] <= 231 - 1`,could you solve the problem in linear time and in `o(1)` space?
170,Two Sum III - Data structure design,"Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.

Implement the `TwoSum` class:
`TwoSum()` Initializes the `TwoSum` object, with an empty array initially.

`void add(int number)` Adds `number` to the data structure.

`boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.


Example 1:
Input
[""TwoSum"", ""add"", ""add"", ""add"", ""find"", ""find""]
[[], [1], [3], [5], [4], [7]]
Output
[null, null, null, null, true, false]
Explanation
TwoSum twoSum = new TwoSum();
twoSum.add(1);   // [] --> [1]
twoSum.add(3);   // [1] --> [1,3]
twoSum.add(5);   // [1,3] --> [1,3,5]
twoSum.find(4);  // 1 + 3 = 4, return true
twoSum.find(7);  // No two integers sum up to 7, return false

Constraints:
`-105 <= number <= 105`
`-231 <= value <= 231 - 1`
At most `5 * 104` calls will be made to `add` and `find`.",Easy,https://leetcode.com/problems/two-sum-iii-data-structure-design,LinkedIn,"Hash Table,Design",395,"[Two Sum, /problems/two-sum/, Easy], [Unique Word Abbreviation, /problems/unique-word-abbreviation/, Medium], [Two Sum IV - Input is a BST, /problems/two-sum-iv-input-is-a-bst/, Easy]","design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value. implement the `twosum` class: `twosum()` initializes the `twosum` object, with an empty array initially. `void add(int number)` adds `number` to the data structure. `boolean find(int value)` returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.","input [""twosum"", ""add"", ""add"", ""add"", ""find"", ""find""] [[], [1], [3], [5], [4], [7]] output [null, null, null, null, true, false] explanation twosum twosum = new twosum(); twosum.add(1); // [] --> [1] twosum.add(3); // [1] --> [1,3] twosum.add(5); // [1,3] --> [1,3,5] twosum.find(4); // 1 + 3 = 4, return true twosum.find(7); // no two integers sum up to 7, return false",`-10^5 <= number <= 10^5` `-231 <= value <= 231 - 1` at most `5 * 10^4` calls will be made to `add` and `find`.,
171,Excel Sheet Column Number,"Given a string `columnTitle` that represents the column title as appear in an Excel sheet, return its corresponding column number.

For example:
A -> 1
B -> 2
C -> 3
...

Z -> 26
AA -> 27
AB -> 28 
...


Example 1:
Input: columnTitle = ""A""
Output: 1

Example 2:
Input: columnTitle = ""AB""
Output: 28

Example 3:
Input: columnTitle = ""ZY""
Output: 701

Example 4:
Input: columnTitle = ""FXSHRXW""
Output: 2147483647

Constraints:
`1 <= columnTitle.length <= 7`
`columnTitle` consists only of uppercase English letters.

`columnTitle` is in the range `[""A"", ""FXSHRXW""]`.",Easy,https://leetcode.com/problems/excel-sheet-column-number,Goldman Sachs,Math,1621,"[Excel Sheet Column Title, /problems/excel-sheet-column-title/, Easy]","given a string `columntitle` that represents the column title as appear in an excel sheet, return its corresponding column number. for","a -> 1 b -> 2 c -> 3 ... z -> 26 aa -> 27 ab -> 28 ... example 1: input: columntitle = ""a"" output: 1 example 2: input: columntitle = ""ab"" output: 28 example 3: input: columntitle = ""zy"" output: 701 example 4: input: columntitle = ""fxshrxw"" output: 2147483647","`1 <= columntitle.length <= 7` `columntitle` consists only of uppercase english letters. `columntitle` is in the range `[""a"", ""fxshrxw""]`.",
172,Factorial Trailing Zeroes,"Given an integer `n`, return the number of trailing zeroes in `n!`.

Follow up: Could you write a solution that works in logarithmic time complexity?

Example 1:
Input: n = 3
Output: 0
Explanation: 3! = 6, no trailing zero.


Example 2:
Input: n = 5
Output: 1
Explanation: 5! = 120, one trailing zero.


Example 3:
Input: n = 0
Output: 0

Constraints:
`0 <= n <= 104`",Easy,https://leetcode.com/problems/factorial-trailing-zeroes,"Bloomberg,Facebook,Amazon",Math,1246,"[Number of Digit One, /problems/number-of-digit-one/, Hard], [Preimage Size of Factorial Zeroes Function, /problems/preimage-size-of-factorial-zeroes-function/, Hard]","given an integer `n`, return the number of trailing zeroes in `n!`.","input: n = 3 output: 0 explanation: 3! = 6, no trailing zero. example 2: input: n = 5 output: 1 explanation: 5! = 120, one trailing zero. example 3: input: n = 0 output: 0",`0 <= n <= 10^4`,"could you write a solution that works in logarithmic time complexity? example 1: input: n = 3 output: 0 explanation: 3! = 6, no trailing zero. example 2: input: n = 5 output: 1 explanation: 5! = 120, one trailing zero. example 3: input: n = 0 output: 0 constraints: `0 <= n <= 104`"
173,Binary Search Tree Iterator,"Implement the `BSTIterator` class that represents an iterator over the in-order traversal of a binary search tree (BST):
`BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.

`boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.

`int next()` Moves the pointer to the right, then returns the number at the pointer.

Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.

You may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.


Example 1:
Input
[""BSTIterator"", ""next"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext""]
[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
Output
[null, 3, 7, true, 9, true, 15, true, 20, false]
Explanation
BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);
bSTIterator.next();    // return 3
bSTIterator.next();    // return 7
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 9
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 15
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 20
bSTIterator.hasNext(); // return False

Constraints:
The number of nodes in the tree is in the range `[1, 105]`.

`0 <= Node.val <= 106`
At most `105` calls will be made to `hasNext`, and `next`.

Follow up:
Could you implement `next()` and `hasNext()` to run in average `O(1)` time and use `O(h)` memory, where `h` is the height of the tree?",Medium,https://leetcode.com/problems/binary-search-tree-iterator,"Facebook,ByteDance,Microsoft,Bloomberg,Google,Oracle,Amazon,Apple,Adobe","Stack,Tree,Design",3575,"[Binary Tree Inorder Traversal, /problems/binary-tree-inorder-traversal/, Medium], [Flatten 2D Vector, /problems/flatten-2d-vector/, Medium], [Zigzag Iterator, /problems/zigzag-iterator/, Medium], [Peeking Iterator, /problems/peeking-iterator/, Medium], [Inorder Successor in BST, /problems/inorder-successor-in-bst/, Medium], [Binary Search Tree Iterator II, /problems/binary-search-tree-iterator-ii/, Medium]","implement the `bstiterator` class that represents an iterator over the in-order traversal of a binary search tree (bst): `bstiterator(treenode root)` initializes an object of the `bstiterator` class. the `root` of the bst is given as part of the constructor. the pointer should be initialized to a non-existent number smaller than any element in the bst. `boolean hasnext()` returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`. `int next()` moves the pointer to the right, then returns the number at the pointer. notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the bst. you may assume that `next()` calls will always be valid. that is, there will be at least a next number in the in-order traversal when `next()` is called.","input [""bstiterator"", ""next"", ""next"", ""hasnext"", ""next"", ""hasnext"", ""next"", ""hasnext"", ""next"", ""hasnext""] [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []] output [null, 3, 7, true, 9, true, 15, true, 20, false] explanation bstiterator bstiterator = new bstiterator([7, 3, 15, null, null, 9, 20]); bstiterator.next(); // return 3 bstiterator.next(); // return 7 bstiterator.hasnext(); // return true bstiterator.next(); // return 9 bstiterator.hasnext(); // return true bstiterator.next(); // return 15 bstiterator.hasnext(); // return true bstiterator.next(); // return 20 bstiterator.hasnext(); // return false","the number of nodes in the tree is in the range `[1, 10^5]`. `0 <= node.val <= 10^6` at most `10^5` calls will be made to `hasnext`, and `next`.","could you implement `next()` and `hasnext()` to run in average `o(1)` time and use `o(h)` memory, where `h` is the height of the tree?"
174,Dungeon Game,"The demons had captured the princess and imprisoned her in the bottom-right corner of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through `dungeon` to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately.

Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).

To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.

Return the knight's minimum initial health so that he can rescue the princess.

Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.


Example 1:
Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]
Output: 7
Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.


Example 2:
Input: dungeon = [[0]]
Output: 1

Constraints:
`m == dungeon.length`
`n == dungeon[i].length`
`1 <= m, n <= 200`
`-1000 <= dungeon[i][j] <= 1000`",Hard,https://leetcode.com/problems/dungeon-game,JPMorgan,"Binary Search,Dynamic Programming",2256,"[Unique Paths, /problems/unique-paths/, Medium], [Minimum Path Sum, /problems/minimum-path-sum/, Medium], [Cherry Pickup, /problems/cherry-pickup/, Hard]","the demons had captured the princess and imprisoned her in the bottom-right corner of a `dungeon`. the `dungeon` consists of `m x n` rooms laid out in a 2d grid. our valiant knight was initially positioned in the top-left room and must fight his way through `dungeon` to rescue the princess. the knight has an initial health point represented by a positive integer. if at any point his health point drops to `0` or below, he dies immediately. some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers). to reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step. return the knight's minimum initial health so that he can rescue the princess. note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.","input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]] output: 7 explanation: the initial health of the knight must be at least 7 if he follows the optimal path: right-> right -> down -> down. example 2: input: dungeon = [[0]] output: 1","`m == dungeon.length` `n == dungeon[i].length` `1 <= m, n <= 200` `-1000 <= dungeon[i][j] <= 1000`",
175,Combine Two Tables,SQL Schema,Easy,https://leetcode.com/problems/combine-two-tables,"Adobe,Apple",,1163,,sql schema,,,
176,Second Highest Salary,SQL Schema,Easy,https://leetcode.com/problems/second-highest-salary,"Amazon,Google,Apple",,1099,,sql schema,,,
177,Nth Highest Salary,"Write a SQL query to get the nth highest salary from the `Employee` table.

+----+--------+
| Id | Salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+
For example, given the above Employee table, the nth highest salary where n = 2 is `200`. If there is no nth highest salary, then the query should return `null`.

+------------------------+
| getNthHighestSalary(2) |
+------------------------+
| 200                    |
+------------------------+",Medium,https://leetcode.com/problems/nth-highest-salary,Infosys,,608,,"write a sql query to get the nth highest salary from the `employee` table. +----+--------+ | id | salary | +----+--------+ | 1 | 100 | | 2 | 200 | | 3 | 300 | +----+--------+ for example, given the above employee table, the nth highest salary where n = 2 is `200`. if there is no nth highest salary, then the query should return `null`. +------------------------+ | getnthhighestsalary(2) | +------------------------+ | 200 | +------------------------+",,,
178,Rank Scores,SQL Schema,Medium,https://leetcode.com/problems/rank-scores,"Apple,Amazon,Facebook,Yahoo",,912,,sql schema,,,
179,Largest Number,"Given a list of non-negative integers `nums`, arrange them such that they form the largest number.

Note: The result may be very large, so you need to return a string instead of an integer.


Example 1:
Input: nums = [10,2]
Output: ""210""

Example 2:
Input: nums = [3,30,34,5,9]
Output: ""9534330""

Example 3:
Input: nums = [1]
Output: ""1""

Example 4:
Input: nums = [10]
Output: ""10""

Constraints:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 109`",Medium,https://leetcode.com/problems/largest-number,"Amazon,Microsoft,VMware",Sort,2922,,"given a list of non-negative integers `nums`, arrange them such that they form the largest number. note: the result may be very large, so you need to return a string instead of an integer.","input: nums = [10,2] output: ""210"" example 2: input: nums = [3,30,34,5,9] output: ""9534330"" example 3: input: nums = [1] output: ""1"" example 4: input: nums = [10] output: ""10""",`1 <= nums.length <= 10^0` `0 <= nums[i] <= 10^9`,
180,Consecutive Numbers,SQL Schema,Medium,https://leetcode.com/problems/consecutive-numbers,Amazon,,586,,sql schema,,,
181,Employees Earning More Than Their Managers,SQL Schema,Easy,https://leetcode.com/problems/employees-earning-more-than-their-managers,Amazon,,794,,sql schema,,,
182,Duplicate Emails,SQL Schema,Easy,https://leetcode.com/problems/duplicate-emails,Microsoft,,627,,sql schema,,,
183,Customers Who Never Order,SQL Schema,Easy,https://leetcode.com/problems/customers-who-never-order,Bloomberg,,518,,sql schema,,,
184,Department Highest Salary,SQL Schema,Medium,https://leetcode.com/problems/department-highest-salary,Amazon,,628,,sql schema,,,
185,Department Top Three Salaries,SQL Schema,Hard,https://leetcode.com/problems/department-top-three-salaries,"Amazon,Uber",,729,,sql schema,,,
186,Reverse Words in a String II,"Given a character array `s`, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in `s` will be separated by a single space.


Example 1:
Input: s = [""t"",""h"",""e"","" "",""s"",""k"",""y"","" "",""i"",""s"","" "",""b"",""l"",""u"",""e""]
Output: [""b"",""l"",""u"",""e"","" "",""i"",""s"","" "",""s"",""k"",""y"","" "",""t"",""h"",""e""]

Example 2:
Input: s = [""a""]
Output: [""a""]

Constraints:
`1 <= s.length <= 105`
`s[i]` is an English letter (uppercase or lowercase), digit, or space `' '`.

There is at least one word in `s`.

`s` does not contain leading or trailing spaces.

All the words in `s` are guaranteed to be separated by a single space.

Follow up: Could you do it in-place without allocating extra space?",Medium,https://leetcode.com/problems/reverse-words-in-a-string-ii,Microsoft,String,573,"[Reverse Words in a String, /problems/reverse-words-in-a-string/, Medium], [Rotate Array, /problems/rotate-array/, Medium]","given a character array `s`, reverse the order of the words. a word is defined as a sequence of non-space characters. the words in `s` will be separated by a single space.","input: s = [""t"",""h"",""e"","" "",""s"",""k"",""y"","" "",""i"",""s"","" "",""b"",""l"",""u"",""e""] output: [""b"",""l"",""u"",""e"","" "",""i"",""s"","" "",""s"",""k"",""y"","" "",""t"",""h"",""e""] example 2: input: s = [""a""] output: [""a""]","`1 <= s.length <= 10^5` `s[i]` is an english letter (uppercase or lowercase), digit, or space `' '`. there is at least one word in `s`. `s` does not contain leading or trailing spaces. all the words in `s` are guaranteed to be separated by a single space.",could you do it in-place without allocating extra space?
187,Repeated DNA Sequences,"The DNA sequence is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`.

For example, `""ACGAATTCCG""` is a DNA sequence.

When studying DNA, it is useful to identify repeated sequences within the DNA.

Given a string `s` that represents a DNA sequence, return all the `10`-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.


Example 1:
Input: s = ""AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT""
Output: [""AAAAACCCCC"",""CCCCCAAAAA""]

Example 2:
Input: s = ""AAAAAAAAAAAAA""
Output: [""AAAAAAAAAA""]

Constraints:
`1 <= s.length <= 105`
`s[i]` is either `'A'`, `'C'`, `'G'`, or `'T'`.",Medium,https://leetcode.com/problems/repeated-dna-sequences,"Amazon,Google","Hash Table,Bit Manipulation",1167,,"the dna sequence is composed of a series of nucleotides abbreviated as `'a'`, `'c'`, `'g'`, and `'t'`. for example, `""acgaattccg""` is a dna sequence. when studying dna, it is useful to identify repeated sequences within the dna. given a string `s` that represents a dna sequence, return all the `10`-letter-long sequences (substrings) that occur more than once in a dna molecule. you may return the answer in any order.","input: s = ""aaaaacccccaaaaaccccccaaaaagggttt"" output: [""aaaaaccccc"",""cccccaaaaa""] example 2: input: s = ""aaaaaaaaaaaaa"" output: [""aaaaaaaaaa""]","`1 <= s.length <= 10^5` `s[i]` is either `'a'`, `'c'`, `'g'`, or `'t'`.",
188,Best Time to Buy and Sell Stock IV,"You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`.

Find the maximum profit you can achieve. You may complete at most `k` transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:
Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.


Example 2:
Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.


Constraints:
`0 <= k <= 100`
`0 <= prices.length <= 1000`
`0 <= prices[i] <= 1000`",Hard,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv,"Amazon,Google,Uber",Dynamic Programming,2362,"[Best Time to Buy and Sell Stock, /problems/best-time-to-buy-and-sell-stock/, Easy], [Best Time to Buy and Sell Stock II, /problems/best-time-to-buy-and-sell-stock-ii/, Easy], [Best Time to Buy and Sell Stock III, /problems/best-time-to-buy-and-sell-stock-iii/, Hard]","you are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`. find the maximum profit you can achieve. you may complete at most `k` transactions. note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).","input: k = 2, prices = [2,4,1] output: 2 explanation: buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2. example 2: input: k = 2, prices = [3,2,6,5,0,3] output: 7 explanation: buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.",`0 <= k <= 10^0` `0 <= prices.length <= 1000` `0 <= prices[i] <= 1000`,
189,Rotate Array,"Given an array, rotate the array to the right by `k` steps, where `k` is non-negative.


Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

Constraints:
`1 <= nums.length <= 2 * 104`
`-231 <= nums[i] <= 231 - 1`
`0 <= k <= 105`
Follow up:
Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.

Could you do it in-place with `O(1)` extra space?",Medium,https://leetcode.com/problems/rotate-array,"Microsoft,Apple,Amazon",Array,4368,"[Rotate List, /problems/rotate-list/, Medium], [Reverse Words in a String II, /problems/reverse-words-in-a-string-ii/, Medium]","given an array, rotate the array to the right by `k` steps, where `k` is non-negative.","input: nums = [1,2,3,4,5,6,7], k = 3 output: [5,6,7,1,2,3,4] explanation: rotate 1 steps to the right: [7,1,2,3,4,5,6] rotate 2 steps to the right: [6,7,1,2,3,4,5] rotate 3 steps to the right: [5,6,7,1,2,3,4] example 2: input: nums = [-1,-100,3,99], k = 2 output: [3,99,-1,-100] explanation: rotate 1 steps to the right: [99,-1,-100,3] rotate 2 steps to the right: [3,99,-1,-100]",`1 <= nums.length <= 2 * 10^4` `-231 <= nums[i] <= 231 - 1` `0 <= k <= 10^5`,try to come up with as many solutions as you can. there are at least three different ways to solve this problem. could you do it in-place with `o(1)` extra space?
190,Reverse Bits,"Reverse bits of a given 32 bits unsigned integer.

Note:
Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.


In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.

Follow up:
If this function is called many times, how would you optimize it?

Example 1:
Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.


Example 2:
Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.


Constraints:
The input must be a binary string of length `32`",Easy,https://leetcode.com/problems/reverse-bits,"Apple,Google",Bit Manipulation,1662,"[Reverse Integer, /problems/reverse-integer/, Easy], [Number of 1 Bits, /problems/number-of-1-bits/, Easy]","reverse bits of a given 32 bits unsigned integer. note: note that in some languages such as java, there is no unsigned integer type. in this case, both input and output will be given as a signed integer type. they should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned. in java, the compiler represents the signed integers using 2's complement notation. therefore, in example 2 above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.","input: n = 00000010100101000001111010011100 output: 964176192 (00111001011110000010100101000000) explanation: the input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000. example 2: input: n = 11111111111111111111111111111101 output: 3221225471 (10111111111111111111111111111111) explanation: the input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.",the input must be a binary string of length `32`,"if this function is called many times, how would you optimize it? example 1: input: n = 00000010100101000001111010011100 output: 964176192 (00111001011110000010100101000000) explanation: the input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000. example 2: input: n = 11111111111111111111111111111101 output: 3221225471 (10111111111111111111111111111111) explanation: the input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111. constraints: the input must be a binary string of length `32`"
191,Number of 1 Bits,"Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:
Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.


In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. `-3`.


Example 1:
Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.


Example 2:
Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.


Example 3:
Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.


Constraints:
The input must be a binary string of length `32`.

Follow up: If this function is called many times, how would you optimize it?",Easy,https://leetcode.com/problems/number-of-1-bits,"Box,Cisco,Microsoft,Qualcomm",Bit Manipulation,1430,"[Reverse Bits, /problems/reverse-bits/, Easy], [Power of Two, /problems/power-of-two/, Easy], [Counting Bits, /problems/counting-bits/, Medium], [Binary Watch, /problems/binary-watch/, Easy], [Hamming Distance, /problems/hamming-distance/, Easy], [Binary Number with Alternating Bits, /problems/binary-number-with-alternating-bits/, Easy], [Prime Number of Set Bits in Binary Representation, /problems/prime-number-of-set-bits-in-binary-representation/, Easy]","write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the hamming weight). note: note that in some languages, such as java, there is no unsigned integer type. in this case, the input will be given as a signed integer type. it should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned. in java, the compiler represents the signed integers using 2's complement notation. therefore, in example 3, the input represents the signed integer. `-3`.",input: n = 00000000000000000000000000001011 output: 3 explanation: the input binary string 00000000000000000000000000001011 has a total of three '1' bits. example 2: input: n = 00000000000000000000000010000000 output: 1 explanation: the input binary string 00000000000000000000000010000000 has a total of one '1' bit. example 3: input: n = 11111111111111111111111111111101 output: 31 explanation: the input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.,the input must be a binary string of length `32`.,"if this function is called many times, how would you optimize it?"
192,Word Frequency,"Write a bash script to calculate the frequency of each word in a text file `words.txt`.

For simplicity sake, you may assume:
`words.txt` contains only lowercase characters and space `' '` characters.

Each word must consist of lowercase characters only.

Words are separated by one or more whitespace characters.


Example:
Assume that `words.txt` has the following content:
the day is sunny the the
the sunny is is
Your script should output the following, sorted by descending frequency:
the 4
is 3
sunny 2
day 1
Note:
Don't worry about handling ties, it is guaranteed that each word's frequency count is unique.

Could you write it in one-line using Unix pipes?",Medium,https://leetcode.com/problems/word-frequency,Apple,,259,,"write a bash script to calculate the frequency of each word in a text file `words.txt`. for simplicity sake, you may assume: `words.txt` contains only lowercase characters and space `' '` characters. each word must consist of lowercase characters only. words are separated by one or more whitespace characters.","assume that `words.txt` has the following content: the day is sunny the the the sunny is is your script should output the following, sorted by descending frequency: the 4 is 3 sunny 2 day 1 note: don't worry about handling ties, it is guaranteed that each word's frequency count is unique. could you write it in one-line using unix pipes?",,
193,Valid Phone Numbers,"Given a text file `file.txt` that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers.

You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)
You may also assume each line in the text file must not contain leading or trailing white spaces.


Example:
Assume that `file.txt` has the following content:
987-123-4567
123 456 7890
(123) 456-7890
Your script should output the following valid phone numbers:
987-123-4567
(123) 456-7890",Easy,https://leetcode.com/problems/valid-phone-numbers,"Amazon,Apple",,187,,"given a text file `file.txt` that contains a list of phone numbers (one per line), write a one-liner bash script to print all valid phone numbers. you may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit) you may also assume each line in the text file must not contain leading or trailing white spaces.",assume that `file.txt` has the following content: 987-123-4567 123 456 7890 (123) 456-7890 your script should output the following valid phone numbers: 987-123-4567 (123) 456-7890,,
194,Transpose File,"Given a text file `file.txt`, transpose its content.

You may assume that each row has the same number of columns, and each field is separated by the `' '` character.


Example:
If `file.txt` has the following content:
name age
alice 21
ryan 30
Output the following:
name alice ryan
age 21 30",Medium,https://leetcode.com/problems/transpose-file,,,80,,"given a text file `file.txt`, transpose its content. you may assume that each row has the same number of columns, and each field is separated by the `' '` character.",if `file.txt` has the following content: name age alice 21 ryan 30 output the following: name alice ryan age 21 30,,
195,Tenth Line,"Given a text file `file.txt`, print just the 10th line of the file.


Example:
Assume that `file.txt` has the following content:
Line 1
Line 2
Line 3
Line 4
Line 5
Line 6
Line 7
Line 8
Line 9
Line 10
Your script should output the tenth line, which is:
Line 10
Note:
1. If the file contains less than 10 lines, what should you output?
2. There's at least three different solutions. Try to explore all possibilities.",Easy,https://leetcode.com/problems/tenth-line,"Apple,Google,Adobe",,190,,"given a text file `file.txt`, print just the 10th line of the file.","assume that `file.txt` has the following content: line 1 line 2 line 3 line 4 line 5 line 6 line 7 line 8 line 9 line 10 your script should output the tenth line, which is: line 10 note: 1. if the file contains less than 10 lines, what should you output? 2. there's at least three different solutions. try to explore all possibilities.",,
196,Delete Duplicate Emails,SQL Schema,Easy,https://leetcode.com/problems/delete-duplicate-emails,Amazon,,556,,sql schema,,,
197,Rising Temperature,SQL Schema,Easy,https://leetcode.com/problems/rising-temperature,Adobe,,510,,sql schema,,,
198,House Robber,"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.


Example 1:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).

Total amount you can rob = 1 + 3 = 4.


Example 2:
Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).

Total amount you can rob = 2 + 9 + 1 = 12.


Constraints:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 400`",Medium,https://leetcode.com/problems/house-robber,"Cisco,Amazon,Microsoft,Oracle,Bloomberg,ByteDance,Splunk",Dynamic Programming,6793,"[Maximum Product Subarray, /problems/maximum-product-subarray/, Medium], [House Robber II, /problems/house-robber-ii/, Medium], [Paint House, /problems/paint-house/, Medium], [Paint Fence, /problems/paint-fence/, Medium], [House Robber III, /problems/house-robber-iii/, Medium], [Non-negative Integers without Consecutive Ones, /problems/non-negative-integers-without-consecutive-ones/, Hard], [Coin Path, /problems/coin-path/, Hard], [Delete and Earn, /problems/delete-and-earn/, Medium]","you are a professional robber planning to rob houses along a street. each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.","input: nums = [1,2,3,1] output: 4 explanation: rob house 1 (money = 1) and then rob house 3 (money = 3). total amount you can rob = 1 + 3 = 4. example 2: input: nums = [2,7,9,3,1] output: 12 explanation: rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). total amount you can rob = 2 + 9 + 1 = 12.",`1 <= nums.length <= 10^0` `0 <= nums[i] <= 400`,
199,Binary Tree Right Side View,"Given the `root` of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.


Example 1:
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Example 2:
Input: root = [1,null,3]
Output: [1,3]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`",Medium,https://leetcode.com/problems/binary-tree-right-side-view,"Facebook,Amazon,ByteDance,Bloomberg,Microsoft","Tree,Depth-first Search,Breadth-first Search,Recursion,Queue",3717,"[Populating Next Right Pointers in Each Node, /problems/populating-next-right-pointers-in-each-node/, Medium], [Boundary of Binary Tree, /problems/boundary-of-binary-tree/, Medium]","given the `root` of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.","input: root = [1,2,3,null,5,null,4] output: [1,3,4] example 2: input: root = [1,null,3] output: [1,3] example 3: input: root = [] output: []","the number of nodes in the tree is in the range `[0, 10^0]`. `-10^0 <= node.val <= 10^0`",
200,Number of Islands,"Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.


Example 1:
Input: grid = [
  [""1"",""1"",""1"",""1"",""0""],
  [""1"",""1"",""0"",""1"",""0""],
  [""1"",""1"",""0"",""0"",""0""],
  [""0"",""0"",""0"",""0"",""0""]
]
Output: 1

Example 2:
Input: grid = [
  [""1"",""1"",""0"",""0"",""0""],
  [""1"",""1"",""0"",""0"",""0""],
  [""0"",""0"",""1"",""0"",""0""],
  [""0"",""0"",""0"",""1"",""1""]
]
Output: 3

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 300`
`grid[i][j]` is `'0'` or `'1'`.",Medium,https://leetcode.com/problems/number-of-islands,"Amazon,Bloomberg,Microsoft,Oracle,Facebook,Apple,Uber,Google,Yandex,DoorDash,Qualtrics,Snapchat,Citadel,Expedia,LinkedIn,eBay,Goldman Sachs,VMware,Splunk,Tesla","Depth-first Search,Breadth-first Search,Union Find",8105,"[Surrounded Regions, /problems/surrounded-regions/, Medium], [Walls and Gates, /problems/walls-and-gates/, Medium], [Number of Islands II, /problems/number-of-islands-ii/, Hard], [Number of Connected Components in an Undirected Graph, /problems/number-of-connected-components-in-an-undirected-graph/, Medium], [Number of Distinct Islands, /problems/number-of-distinct-islands/, Medium], [Max Area of Island, /problems/max-area-of-island/, Medium]","given an `m x n` 2d binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return the number of islands. an island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. you may assume all four edges of the grid are all surrounded by water.","input: grid = [ [""1"",""1"",""1"",""1"",""0""], [""1"",""1"",""0"",""1"",""0""], [""1"",""1"",""0"",""0"",""0""], [""0"",""0"",""0"",""0"",""0""] ] output: 1 example 2: input: grid = [ [""1"",""1"",""0"",""0"",""0""], [""1"",""1"",""0"",""0"",""0""], [""0"",""0"",""1"",""0"",""0""], [""0"",""0"",""0"",""1"",""1""] ] output: 3","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 300` `grid[i][j]` is `'0'` or `'1'`.",
201,Bitwise AND of Numbers Range,"Given two integers `left` and `right` that represent the range `[left, right]`, return the bitwise AND of all numbers in this range, inclusive.


Example 1:
Input: left = 5, right = 7
Output: 4

Example 2:
Input: left = 0, right = 0
Output: 0

Example 3:
Input: left = 1, right = 2147483647
Output: 0

Constraints:
`0 <= left <= right <= 231 - 1`",Medium,https://leetcode.com/problems/bitwise-and-of-numbers-range,Adobe,Bit Manipulation,1340,,"given two integers `left` and `right` that represent the range `[left, right]`, return the bitwise and of all numbers in this range, inclusive.","input: left = 5, right = 7 output: 4 example 2: input: left = 0, right = 0 output: 0 example 3: input: left = 1, right = 2147483647 output: 0",`0 <= left <= right <= 231 - 1`,
202,Happy Number,"Write an algorithm to determine if a number `n` is happy.

A happy number is a number defined by the following process:
Starting with any positive integer, replace the number by the sum of the squares of its digits.

Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.

Those numbers for which this process ends in 1 are happy.

Return `true` if `n` is a happy number, and `false` if not.


Example 1:
Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Example 2:
Input: n = 2
Output: false

Constraints:
`1 <= n <= 231 - 1`",Easy,https://leetcode.com/problems/happy-number,"Apple,Adobe,Barclays,ByteDance","Hash Table,Math",3050,"[Linked List Cycle, /problems/linked-list-cycle/, Easy], [Add Digits, /problems/add-digits/, Easy], [Ugly Number, /problems/ugly-number/, Easy]","write an algorithm to determine if a number `n` is happy. a happy number is a number defined by the following process: starting with any positive integer, replace the number by the sum of the squares of its digits. repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. those numbers for which this process ends in 1 are happy. return `true` if `n` is a happy number, and `false` if not.",input: n = 19 output: true explanation: 12 + 92 = 82 82 + 22 = 68 62 + 82 = 100 12 + 02 + 02 = 1 example 2: input: n = 2 output: false,`1 <= n <= 231 - 1`,
203,Remove Linked List Elements,"Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return the new head.


Example 1:
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Example 2:
Input: head = [], val = 1
Output: []

Example 3:
Input: head = [7,7,7,7], val = 7
Output: []

Constraints:
The number of nodes in the list is in the range `[0, 104]`.

`1 <= Node.val <= 50`
`0 <= k <= 50`",Easy,https://leetcode.com/problems/remove-linked-list-elements,"Facebook,Amazon,Google,Microsoft,Apple",Linked List,2585,"[Remove Element, /problems/remove-element/, Easy], [Delete Node in a Linked List, /problems/delete-node-in-a-linked-list/, Easy]","given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `node.val == val`, and return the new head.","input: head = [1,2,6,3,4,5,6], val = 6 output: [1,2,3,4,5] example 2: input: head = [], val = 1 output: [] example 3: input: head = [7,7,7,7], val = 7 output: []","the number of nodes in the list is in the range `[0, 10^4]`. `1 <= node.val <= 50` `0 <= k <= 50`",
204,Count Primes,"Count the number of prime numbers less than a non-negative number, `n`.


Example 1:
Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.


Example 2:
Input: n = 0
Output: 0

Example 3:
Input: n = 1
Output: 0

Constraints:
`0 <= n <= 5 * 106`",Easy,https://leetcode.com/problems/count-primes,"Apple,Capital One,Amazon,Microsoft,Cisco","Hash Table,Math",2882,"[Ugly Number, /problems/ugly-number/, Easy], [Ugly Number II, /problems/ugly-number-ii/, Medium], [Perfect Squares, /problems/perfect-squares/, Medium]","count the number of prime numbers less than a non-negative number, `n`.","input: n = 10 output: 4 explanation: there are 4 prime numbers less than 10, they are 2, 3, 5, 7. example 2: input: n = 0 output: 0 example 3: input: n = 1 output: 0",`0 <= n <= 5 * 10^6`,
205,Isomorphic Strings,"Given two strings `s` and `t`, determine if they are isomorphic.

Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.


Example 1:
Input: s = ""egg"", t = ""add""
Output: true

Example 2:
Input: s = ""foo"", t = ""bar""
Output: false

Example 3:
Input: s = ""paper"", t = ""title""
Output: true

Constraints:
`1 <= s.length <= 5 * 104`
`t.length == s.length`
`s` and `t` consist of any valid ascii character.",Easy,https://leetcode.com/problems/isomorphic-strings,"Amazon,Apple,Intel,Google",Hash Table,1958,"[Word Pattern, /problems/word-pattern/, Easy]","given two strings `s` and `t`, determine if they are isomorphic. two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`. all occurrences of a character must be replaced with another character while preserving the order of characters. no two characters may map to the same character, but a character may map to itself.","input: s = ""egg"", t = ""add"" output: true example 2: input: s = ""foo"", t = ""bar"" output: false example 3: input: s = ""paper"", t = ""title"" output: true",`1 <= s.length <= 5 * 10^4` `t.length == s.length` `s` and `t` consist of any valid ascii character.,
206,Reverse Linked List,"Given the `head` of a singly linked list, reverse the list, and return the reversed list.


Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]

Example 3:
Input: head = []
Output: []

Constraints:
The number of nodes in the list is the range `[0, 5000]`.

`-5000 <= Node.val <= 5000`
Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?",Easy,https://leetcode.com/problems/reverse-linked-list,"Adobe,Amazon,Facebook,Apple,Microsoft,Qualcomm,Yandex,Google,Uber,Oracle,Bloomberg,IBM,Cisco,Goldman Sachs,ByteDance",Linked List,6702,"[Reverse Linked List II, /problems/reverse-linked-list-ii/, Medium], [Binary Tree Upside Down, /problems/binary-tree-upside-down/, Medium], [Palindrome Linked List, /problems/palindrome-linked-list/, Easy]","given the `head` of a singly linked list, reverse the list, and return the reversed list.","input: head = [1,2,3,4,5] output: [5,4,3,2,1] example 2: input: head = [1,2] output: [2,1] example 3: input: head = [] output: []","the number of nodes in the list is the range `[0, 5000]`. `-5000 <= node.val <= 5000`",a linked list can be reversed either iteratively or recursively. could you implement both?
207,Course Schedule,"There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`.

For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.

Return `true` if you can finish all courses. Otherwise, return `false`.


Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.


Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.


Constraints:
`1 <= numCourses <= 105`
`0 <= prerequisites.length <= 5000`
`prerequisites[i].length == 2`
`0 <= ai, bi < numCourses`
All the pairs prerequisites[i] are unique.",Medium,https://leetcode.com/problems/course-schedule,"Amazon,Intuit,Facebook,Karat,Microsoft,ByteDance,Bloomberg,Google","Depth-first Search,Breadth-first Search,Graph,Topological Sort",5575,"[Course Schedule II, /problems/course-schedule-ii/, Medium], [Graph Valid Tree, /problems/graph-valid-tree/, Medium], [Minimum Height Trees, /problems/minimum-height-trees/, Medium], [Course Schedule III, /problems/course-schedule-iii/, Hard]","there are a total of `numcourses` courses you have to take, labeled from `0` to `numcourses - 1`. you are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`. for example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`. return `true` if you can finish all courses. otherwise, return `false`.","input: numcourses = 2, prerequisites = [[1,0]] output: true explanation: there are a total of 2 courses to take. to take course 1 you should have finished course 0. so it is possible. example 2: input: numcourses = 2, prerequisites = [[1,0],[0,1]] output: false explanation: there are a total of 2 courses to take. to take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. so it is impossible.","`1 <= numcourses <= 10^5` `0 <= prerequisites.length <= 5000` `prerequisites[i].length == 2` `0 <= ai, bi < numcourses` all the pairs prerequisites[i] are unique.",
208,Implement Trie (Prefix Tree),"A trie (pronounced as ""try"") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.

Implement the Trie class:
`Trie()` Initializes the trie object.

`void insert(String word)` Inserts the string `word` into the trie.

`boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.

`boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.


Example 1:
Input
[""Trie"", ""insert"", ""search"", ""search"", ""startsWith"", ""insert"", ""search""]
[[], [""apple""], [""apple""], [""app""], [""app""], [""app""], [""app""]]
Output
[null, null, true, false, true, null, true]
Explanation
Trie trie = new Trie();
trie.insert(""apple"");
trie.search(""apple"");   // return True
trie.search(""app"");     // return False
trie.startsWith(""app""); // return True
trie.insert(""app"");
trie.search(""app"");     // return True

Constraints:
`1 <= word.length, prefix.length <= 2000`
`word` and `prefix` consist only of lowercase English letters.

At most `3 * 104` calls in total will be made to `insert`, `search`, and `startsWith`.",Medium,https://leetcode.com/problems/implement-trie-prefix-tree,"Amazon,Pinterest,Google,Microsoft,Oracle,Facebook,Apple,Goldman Sachs,Qualtrics","Design,Trie",4393,"[Design Add and Search Words Data Structure, /problems/design-add-and-search-words-data-structure/, Medium], [Design Search Autocomplete System, /problems/design-search-autocomplete-system/, Hard], [Replace Words, /problems/replace-words/, Medium], [Implement Magic Dictionary, /problems/implement-magic-dictionary/, Medium], [Implement Trie II (Prefix Tree), /problems/implement-trie-ii-prefix-tree/, Medium]","a trie (pronounced as ""try"") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. there are various applications of this data structure, such as autocomplete and spellchecker. implement the trie class: `trie()` initializes the trie object. `void insert(string word)` inserts the string `word` into the trie. `boolean search(string word)` returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise. `boolean startswith(string prefix)` returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.","input [""trie"", ""insert"", ""search"", ""search"", ""startswith"", ""insert"", ""search""] [[], [""apple""], [""apple""], [""app""], [""app""], [""app""], [""app""]] output [null, null, true, false, true, null, true] explanation trie trie = new trie(); trie.insert(""apple""); trie.search(""apple""); // return true trie.search(""app""); // return false trie.startswith(""app""); // return true trie.insert(""app""); trie.search(""app""); // return true","`1 <= word.length, prefix.length <= 2000` `word` and `prefix` consist only of lowercase english letters. at most `3 * 10^4` calls in total will be made to `insert`, `search`, and `startswith`.",
209,Minimum Size Subarray Sum,"Given an array of positive integers `nums` and a positive integer `target`, return the minimal length of a contiguous subarray `[numsl, numsl+1, ..., numsr-1, numsr]` of which the sum is greater than or equal to `target`. If there is no such subarray, return `0` instead.


Example 1:
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.


Example 2:
Input: target = 4, nums = [1,4,4]
Output: 1

Example 3:
Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0

Constraints:
`1 <= target <= 109`
`1 <= nums.length <= 105`
`1 <= nums[i] <= 105`
Follow up: If you have figured out the `O(n)` solution, try coding another solution of which the time complexity is `O(n log(n))`.",Medium,https://leetcode.com/problems/minimum-size-subarray-sum,"Goldman Sachs,Amazon,Bloomberg,Facebook,Microsoft,ByteDance","Array,Two Pointers,Binary Search",3583,"[Minimum Window Substring, /problems/minimum-window-substring/, Hard], [Maximum Size Subarray Sum Equals k, /problems/maximum-size-subarray-sum-equals-k/, Medium], [Maximum Length of Repeated Subarray, /problems/maximum-length-of-repeated-subarray/, Medium], [Minimum Operations to Reduce X to Zero, /problems/minimum-operations-to-reduce-x-to-zero/, Medium]","given an array of positive integers `nums` and a positive integer `target`, return the minimal length of a contiguous subarray `[numsl, numsl+1, ..., numsr-1, numsr]` of which the sum is greater than or equal to `target`. if there is no such subarray, return `0` instead.","input: target = 7, nums = [2,3,1,2,4,3] output: 2 explanation: the subarray [4,3] has the minimal length under the problem constraint. example 2: input: target = 4, nums = [1,4,4] output: 1 example 3: input: target = 11, nums = [1,1,1,1,1,1,1,1] output: 0",`1 <= target <= 10^9` `1 <= nums.length <= 10^5` `1 <= nums[i] <= 10^5`,"if you have figured out the `o(n)` solution, try coding another solution of which the time complexity is `o(n log(n))`."
210,Course Schedule II,"There are a total of `n` courses you have to take labelled from `0` to `n - 1`.

Some courses may have `prerequisites`, for example, if `prerequisites[i] = [ai, bi]` this means you must take the course `bi` before the course `ai`.

Given the total number of courses `numCourses` and a list of the `prerequisite` pairs, return the ordering of courses you should take to finish all courses.

If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.


Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].


Example 2:
Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.

So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].


Example 3:
Input: numCourses = 1, prerequisites = []
Output: [0]

Constraints:
`1 <= numCourses <= 2000`
`0 <= prerequisites.length <= numCourses * (numCourses - 1)`
`prerequisites[i].length == 2`
`0 <= ai, bi < numCourses`
`ai != bi`
All the pairs `[ai, bi]` are distinct.",Medium,https://leetcode.com/problems/course-schedule-ii,"Amazon,DoorDash,Microsoft,Google,Snapchat,Oracle,Intuit,Karat,Facebook,Pinterest,Wayfair,Robinhood","Depth-first Search,Breadth-first Search,Graph,Topological Sort",3552,"[Course Schedule, /problems/course-schedule/, Medium], [Alien Dictionary, /problems/alien-dictionary/, Hard], [Minimum Height Trees, /problems/minimum-height-trees/, Medium], [Sequence Reconstruction, /problems/sequence-reconstruction/, Medium], [Course Schedule III, /problems/course-schedule-iii/, Hard], [Parallel Courses, /problems/parallel-courses/, Medium]","there are a total of `n` courses you have to take labelled from `0` to `n - 1`. some courses may have `prerequisites`, for example, if `prerequisites[i] = [ai, bi]` this means you must take the course `bi` before the course `ai`. given the total number of courses `numcourses` and a list of the `prerequisite` pairs, return the ordering of courses you should take to finish all courses. if there are many valid answers, return any of them. if it is impossible to finish all courses, return an empty array.","input: numcourses = 2, prerequisites = [[1,0]] output: [0,1] explanation: there are a total of 2 courses to take. to take course 1 you should have finished course 0. so the correct course order is [0,1]. example 2: input: numcourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]] output: [0,2,1,3] explanation: there are a total of 4 courses to take. to take course 3 you should have finished both courses 1 and 2. both courses 1 and 2 should be taken after you finished course 0. so one correct course order is [0,1,2,3]. another correct ordering is [0,2,1,3]. example 3: input: numcourses = 1, prerequisites = [] output: [0]","`1 <= numcourses <= 2000` `0 <= prerequisites.length <= numcourses * (numcourses - 1)` `prerequisites[i].length == 2` `0 <= ai, bi < numcourses` `ai != bi` all the pairs `[ai, bi]` are distinct.",
211,Design Add and Search Words Data Structure,"Design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the `WordDictionary` class:
`WordDictionary()` Initializes the object.

`void addWord(word)` Adds `word` to the data structure, it can be matched later.

`bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.


Example:
Input
[""WordDictionary"",""addWord"",""addWord"",""addWord"",""search"",""search"",""search"",""search""]
[[],[""bad""],[""dad""],[""mad""],[""pad""],[""bad""],["".ad""],[""b..""]]
Output
[null,null,null,null,false,true,true,true]
Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord(""bad"");
wordDictionary.addWord(""dad"");
wordDictionary.addWord(""mad"");
wordDictionary.search(""pad""); // return False
wordDictionary.search(""bad""); // return True
wordDictionary.search("".ad""); // return True
wordDictionary.search(""b..""); // return True

Constraints:
`1 <= word.length <= 500`
`word` in `addWord` consists lower-case English letters.

`word` in `search` consist of  `'.'` or lower-case English letters.

At most `50000` calls will be made to `addWord` and `search`.",Medium,https://leetcode.com/problems/design-add-and-search-words-data-structure,"Facebook,Google,Oracle,Amazon","Backtracking,Depth-first Search,Design,Trie",2861,"[Implement Trie (Prefix Tree), /problems/implement-trie-prefix-tree/, Medium], [Prefix and Suffix Search, /problems/prefix-and-suffix-search/, Hard]","design a data structure that supports adding new words and finding if a string matches any previously added string. implement the `worddictionary` class: `worddictionary()` initializes the object. `void addword(word)` adds `word` to the data structure, it can be matched later. `bool search(word)` returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.","input [""worddictionary"",""addword"",""addword"",""addword"",""search"",""search"",""search"",""search""] [[],[""bad""],[""dad""],[""mad""],[""pad""],[""bad""],["".ad""],[""b..""]] output [null,null,null,null,false,true,true,true] explanation worddictionary worddictionary = new worddictionary(); worddictionary.addword(""bad""); worddictionary.addword(""dad""); worddictionary.addword(""mad""); worddictionary.search(""pad""); // return false worddictionary.search(""bad""); // return true worddictionary.search("".ad""); // return true worddictionary.search(""b..""); // return true",`1 <= word.length <= 500` `word` in `addword` consists lower-case english letters. `word` in `search` consist of `'.'` or lower-case english letters. at most `50000` calls will be made to `addword` and `search`.,
212,Word Search II,"Given an `m x n` `board` of characters and a list of strings `words`, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.


Example 1:
Input: board = [[""o"",""a"",""a"",""n""],[""e"",""t"",""a"",""e""],[""i"",""h"",""k"",""r""],[""i"",""f"",""l"",""v""]], words = [""oath"",""pea"",""eat"",""rain""]
Output: [""eat"",""oath""]

Example 2:
Input: board = [[""a"",""b""],[""c"",""d""]], words = [""abcb""]
Output: []

Constraints:
`m == board.length`
`n == board[i].length`
`1 <= m, n <= 12`
`board[i][j]` is a lowercase English letter.

`1 <= words.length <= 3 * 104`
`1 <= words[i].length <= 10`
`words[i]` consists of lowercase English letters.

All the strings of `words` are unique.",Hard,https://leetcode.com/problems/word-search-ii,"Amazon,Microsoft,Uber,Apple,Google,Facebook,Snapchat,Twitter","Backtracking,Trie",3594,"[Word Search, /problems/word-search/, Medium], [Unique Paths III, /problems/unique-paths-iii/, Hard]","given an `m x n` `board` of characters and a list of strings `words`, return all words on the board. each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. the same letter cell may not be used more than once in a word.","input: board = [[""o"",""a"",""a"",""n""],[""e"",""t"",""a"",""e""],[""i"",""h"",""k"",""r""],[""i"",""f"",""l"",""v""]], words = [""oath"",""pea"",""eat"",""rain""] output: [""eat"",""oath""] example 2: input: board = [[""a"",""b""],[""c"",""d""]], words = [""abcb""] output: []","`m == board.length` `n == board[i].length` `1 <= m, n <= 12` `board[i][j]` is a lowercase english letter. `1 <= words.length <= 3 * 10^4` `1 <= words[i].length <= 10` `words[i]` consists of lowercase english letters. all the strings of `words` are unique.",
213,House Robber II,"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.


Example 1:
Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.


Example 2:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).

Total amount you can rob = 1 + 3 = 4.


Example 3:
Input: nums = [0]
Output: 0

Constraints:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 1000`",Medium,https://leetcode.com/problems/house-robber-ii,eBay,Dynamic Programming,2745,"[House Robber, /problems/house-robber/, Medium], [Paint House, /problems/paint-house/, Medium], [Paint Fence, /problems/paint-fence/, Medium], [House Robber III, /problems/house-robber-iii/, Medium], [Non-negative Integers without Consecutive Ones, /problems/non-negative-integers-without-consecutive-ones/, Hard], [Coin Path, /problems/coin-path/, Hard]","you are a professional robber planning to rob houses along a street. each house has a certain amount of money stashed. all houses at this place are arranged in a circle. that means the first house is the neighbor of the last one. meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night. given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.","input: nums = [2,3,2] output: 3 explanation: you cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. example 2: input: nums = [1,2,3,1] output: 4 explanation: rob house 1 (money = 1) and then rob house 3 (money = 3). total amount you can rob = 1 + 3 = 4. example 3: input: nums = [0] output: 0",`1 <= nums.length <= 10^0` `0 <= nums[i] <= 1000`,
214,Shortest Palindrome,"You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it.

Return the shortest palindrome you can find by performing this transformation.


Example 1:
Input: s = ""aacecaaa""
Output: ""aaacecaaa""

Example 2:
Input: s = ""abcd""
Output: ""dcbabcd""

Constraints:
`0 <= s.length <= 5 * 104`
`s` consists of lowercase English letters only.",Hard,https://leetcode.com/problems/shortest-palindrome,Microsoft,String,1586,"[Longest Palindromic Substring, /problems/longest-palindromic-substring/, Medium], [Implement strStr(), /problems/implement-strstr/, Easy], [Palindrome Pairs, /problems/palindrome-pairs/, Hard]",you are given a string `s`. you can convert `s` to a palindrome by adding characters in front of it. return the shortest palindrome you can find by performing this transformation.,"input: s = ""aacecaaa"" output: ""aaacecaaa"" example 2: input: s = ""abcd"" output: ""dcbabcd""",`0 <= s.length <= 5 * 10^4` `s` consists of lowercase english letters only.,
215,Kth Largest Element in an Array,"Given an integer array `nums` and an integer `k`, return the `kth` largest element in the array.

Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.


Example 1:
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5

Example 2:
Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4

Constraints:
`1 <= k <= nums.length <= 104`
`-104 <= nums[i] <= 104`",Medium,https://leetcode.com/problems/kth-largest-element-in-an-array,"Facebook,Amazon,Walmart Labs,Apple,Microsoft,Bloomberg,ByteDance,LinkedIn,Adobe,Google,Spotify,Zillow","Divide and Conquer,Heap",5413,"[Wiggle Sort II, /problems/wiggle-sort-ii/, Medium], [Top K Frequent Elements, /problems/top-k-frequent-elements/, Medium], [Third Maximum Number, /problems/third-maximum-number/, Easy], [Kth Largest Element in a Stream, /problems/kth-largest-element-in-a-stream/, Easy], [K Closest Points to Origin, /problems/k-closest-points-to-origin/, Medium]","given an integer array `nums` and an integer `k`, return the `kth` largest element in the array. note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.","input: nums = [3,2,1,5,6,4], k = 2 output: 5 example 2: input: nums = [3,2,3,1,2,4,5,5,6], k = 4 output: 4",`1 <= k <= nums.length <= 10^4` `-10^4 <= nums[i] <= 10^4`,
216,Combination Sum III,"Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true:
Only numbers `1` through `9` are used.

Each number is used at most once.

Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.


Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.


Example 2:
Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.


Example 3:
Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations. [1,2,1] is not valid because 1 is used twice.


Example 4:
Input: k = 3, n = 2
Output: []
Explanation: There are no valid combinations.


Example 5:
Input: k = 9, n = 45
Output: [[1,2,3,4,5,6,7,8,9]]
Explanation:
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45
​​​​​​​There are no other valid combinations.


Constraints:
`2 <= k <= 9`
`1 <= n <= 60`",Medium,https://leetcode.com/problems/combination-sum-iii,"Google,Microsoft,Amazon,Bloomberg","Array,Backtracking",1737,"[Combination Sum, /problems/combination-sum/, Medium]","find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true: only numbers `1` through `9` are used. each number is used at most once. return a list of all possible valid combinations. the list must not contain the same combination twice, and the combinations may be returned in any order.","input: k = 3, n = 7 output: [[1,2,4]] explanation: 1 + 2 + 4 = 7 there are no other valid combinations. example 2: input: k = 3, n = 9 output: [[1,2,6],[1,3,5],[2,3,4]] explanation: 1 + 2 + 6 = 9 1 + 3 + 5 = 9 2 + 3 + 4 = 9 there are no other valid combinations. example 3: input: k = 4, n = 1 output: [] explanation: there are no valid combinations. [1,2,1] is not valid because 1 is used twice. example 4: input: k = 3, n = 2 output: [] explanation: there are no valid combinations. example 5: input: k = 9, n = 45 output: [[1,2,3,4,5,6,7,8,9]] explanation: 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45 ​​​​​​​there are no other valid combinations.",`2 <= k <= 9` `1 <= n <= 60`,
217,Contains Duplicate,"Given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.


Example 1:
Input: nums = [1,2,3,1]
Output: true

Example 2:
Input: nums = [1,2,3,4]
Output: false

Example 3:
Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true

Constraints:
`1 <= nums.length <= 105`
`-109 <= nums[i] <= 109`",Easy,https://leetcode.com/problems/contains-duplicate,"Apple,Microsoft,Adobe","Array,Hash Table",1581,"[Contains Duplicate II, /problems/contains-duplicate-ii/, Easy], [Contains Duplicate III, /problems/contains-duplicate-iii/, Medium]","given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.","input: nums = [1,2,3,1] output: true example 2: input: nums = [1,2,3,4] output: false example 3: input: nums = [1,1,1,3,3,4,3,2,4,2] output: true",`1 <= nums.length <= 10^5` `-10^9 <= nums[i] <= 10^9`,
218,The Skyline Problem,"A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.

The geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`:
`lefti` is the x coordinate of the left edge of the `ith` building.

`righti` is the x coordinate of the right edge of the `ith` building.

`heighti` is the height of the `ith` building.

You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`.

The skyline should be represented as a list of ""key points"" sorted by their x-coordinate in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.

Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]`

Example 1:
Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]
Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]
Explanation:
Figure A shows the buildings of the input.

Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.


Example 2:
Input: buildings = [[0,2,3],[2,5,3]]
Output: [[0,3],[5,0]]

Constraints:
`1 <= buildings.length <= 104`
`0 <= lefti < righti <= 231 - 1`
`1 <= heighti <= 231 - 1`
`buildings` is sorted by `lefti` in non-decreasing order.",Hard,https://leetcode.com/problems/the-skyline-problem,"Microsoft,Amazon,Google,Twitter,Uber","Divide and Conquer,Heap,Binary Indexed Tree,Segment Tree,Line Sweep",2792,"[Falling Squares, /problems/falling-squares/, Hard]","a city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. given the locations and heights of all the buildings, return the skyline formed by these buildings collectively. the geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`: `lefti` is the x coordinate of the left edge of the `ith` building. `righti` is the x coordinate of the right edge of the `ith` building. `heighti` is the height of the `ith` building. you may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`. the skyline should be represented as a list of ""key points"" sorted by their x-coordinate in the form `[[x1,y1],[x2,y2],...]`. each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline's termination where the rightmost building ends. any ground between the leftmost and rightmost buildings should be part of the skyline's contour. note: there must be no consecutive horizontal lines of equal height in the output skyline. for instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]`","input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]] output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]] explanation: figure a shows the buildings of the input. figure b shows the skyline formed by those buildings. the red points in figure b represent the key points in the output list. example 2: input: buildings = [[0,2,3],[2,5,3]] output: [[0,3],[5,0]]",`1 <= buildings.length <= 10^4` `0 <= lefti < righti <= 231 - 1` `1 <= heighti <= 231 - 1` `buildings` is sorted by `lefti` in non-decreasing order.,
219,Contains Duplicate II,"Given an integer array `nums` and an integer `k`, return `true` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.


Example 1:
Input: nums = [1,2,3,1], k = 3
Output: true

Example 2:
Input: nums = [1,0,1,1], k = 1
Output: true

Example 3:
Input: nums = [1,2,3,1,2,3], k = 2
Output: false

Constraints:
`1 <= nums.length <= 105`
`-109 <= nums[i] <= 109`
`0 <= k <= 105`",Easy,https://leetcode.com/problems/contains-duplicate-ii,"Facebook,Amazon","Array,Hash Table",1282,"[Contains Duplicate, /problems/contains-duplicate/, Easy], [Contains Duplicate III, /problems/contains-duplicate-iii/, Medium]","given an integer array `nums` and an integer `k`, return `true` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.","input: nums = [1,2,3,1], k = 3 output: true example 2: input: nums = [1,0,1,1], k = 1 output: true example 3: input: nums = [1,2,3,1,2,3], k = 2 output: false",`1 <= nums.length <= 10^5` `-10^9 <= nums[i] <= 10^9` `0 <= k <= 10^5`,
220,Contains Duplicate III,"Given an integer array `nums` and two integers `k` and `t`, return `true` if there are two distinct indices `i` and `j` in the array such that `abs(nums[i] - nums[j]) <= t` and `abs(i - j) <= k`.


Example 1:
Input: nums = [1,2,3,1], k = 3, t = 0
Output: true

Example 2:
Input: nums = [1,0,1,1], k = 1, t = 2
Output: true

Example 3:
Input: nums = [1,5,9,1,5,9], k = 2, t = 3
Output: false

Constraints:
`0 <= nums.length <= 2 * 104`
`-231 <= nums[i] <= 231 - 1`
`0 <= k <= 104`
`0 <= t <= 231 - 1`",Medium,https://leetcode.com/problems/contains-duplicate-iii,Facebook,"Sort,Ordered Map",1564,"[Contains Duplicate, /problems/contains-duplicate/, Easy], [Contains Duplicate II, /problems/contains-duplicate-ii/, Easy]","given an integer array `nums` and two integers `k` and `t`, return `true` if there are two distinct indices `i` and `j` in the array such that `abs(nums[i] - nums[j]) <= t` and `abs(i - j) <= k`.","input: nums = [1,2,3,1], k = 3, t = 0 output: true example 2: input: nums = [1,0,1,1], k = 1, t = 2 output: true example 3: input: nums = [1,5,9,1,5,9], k = 2, t = 3 output: false",`0 <= nums.length <= 2 * 10^4` `-231 <= nums[i] <= 231 - 1` `0 <= k <= 10^4` `0 <= t <= 231 - 1`,
221,Maximal Square,"Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, find the largest square containing only `1`'s and return its area.


Example 1:
Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
Output: 4

Example 2:
Input: matrix = [[""0"",""1""],[""1"",""0""]]
Output: 1

Example 3:
Input: matrix = [[""0""]]
Output: 0

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 300`
`matrix[i][j]` is `'0'` or `'1'`.",Medium,https://leetcode.com/problems/maximal-square,"Amazon,IBM,Google,Twitter,ByteDance,Apple",Dynamic Programming,4434,"[Maximal Rectangle, /problems/maximal-rectangle/, Hard], [Largest Plus Sign, /problems/largest-plus-sign/, Medium]","given an `m x n` binary `matrix` filled with `0`'s and `1`'s, find the largest square containing only `1`'s and return its area.","input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]] output: 4 example 2: input: matrix = [[""0"",""1""],[""1"",""0""]] output: 1 example 3: input: matrix = [[""0""]] output: 0","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 300` `matrix[i][j]` is `'0'` or `'1'`.",
222,Count Complete Tree Nodes,"Given the `root` of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.


Example 1:
Input: root = [1,2,3,4,5,6]
Output: 6

Example 2:
Input: root = []
Output: 0

Example 3:
Input: root = [1]
Output: 1

Constraints:
The number of nodes in the tree is in the range `[0, 5 * 104]`.

`0 <= Node.val <= 5 * 104`
The tree is guaranteed to be complete.

Follow up: Traversing the tree to count the number of nodes in the tree is an easy solution but with `O(n)` complexity. Could you find a faster algorithm?",Medium,https://leetcode.com/problems/count-complete-tree-nodes,"Google,Bloomberg,Microsoft","Binary Search,Tree",2834,"[Closest Binary Search Tree Value, /problems/closest-binary-search-tree-value/, Easy]","given the `root` of a complete binary tree, return the number of the nodes in the tree. according to wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. it can have between `1` and `2h` nodes inclusive at the last level `h`.","input: root = [1,2,3,4,5,6] output: 6 example 2: input: root = [] output: 0 example 3: input: root = [1] output: 1","the number of nodes in the tree is in the range `[0, 5 * 10^4]`. `0 <= node.val <= 5 * 10^4` the tree is guaranteed to be complete.",traversing the tree to count the number of nodes in the tree is an easy solution but with `o(n)` complexity. could you find a faster algorithm?
223,Rectangle Area,"Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.

The first rectangle is defined by its bottom-left corner `(A, B)` and its top-right corner `(C, D)`.

The second rectangle is defined by its bottom-left corner `(E, F)` and its top-right corner `(G, H)`.


Example 1:
Input: A = -3, B = 0, C = 3, D = 4, E = 0, F = -1, G = 9, H = 2
Output: 45

Example 2:
Input: A = -2, B = -2, C = 2, D = 2, E = -2, F = -2, G = 2, H = 2
Output: 16

Constraints:
`-104 <= A, B, C, D, E, F, G, H <= 104`",Medium,https://leetcode.com/problems/rectangle-area,Zillow,Math,532,"[Rectangle Overlap, /problems/rectangle-overlap/, Easy]","given the coordinates of two rectilinear rectangles in a 2d plane, return the total area covered by the two rectangles. the first rectangle is defined by its bottom-left corner `(a, b)` and its top-right corner `(c, d)`. the second rectangle is defined by its bottom-left corner `(e, f)` and its top-right corner `(g, h)`.","input: a = -3, b = 0, c = 3, d = 4, e = 0, f = -1, g = 9, h = 2 output: 45 example 2: input: a = -2, b = -2, c = 2, d = 2, e = -2, f = -2, g = 2, h = 2 output: 16","`-10^4 <= a, b, c, d, e, f, g, h <= 10^4`",
224,Basic Calculator,"Given a string `s` representing an expression, implement a basic calculator to evaluate it.


Example 1:
Input: s = ""1 + 1""
Output: 2

Example 2:
Input: s = "" 2-1 + 2 ""
Output: 3

Example 3:
Input: s = ""(1+(4+5+2)-3)+(6+8)""
Output: 23

Constraints:
`1 <= s.length <= 3 * 105`
`s` consists of digits, `'+'`, `'-'`, `'('`, `')'`, and `' '`.

`s` represents a valid expression.",Hard,https://leetcode.com/problems/basic-calculator,"Amazon,Roblox,Facebook,Indeed,Karat,Microsoft,Google,ByteDance,Uber,Wish","Math,Stack",2131,"[Evaluate Reverse Polish Notation, /problems/evaluate-reverse-polish-notation/, Medium], [Basic Calculator II, /problems/basic-calculator-ii/, Medium], [Different Ways to Add Parentheses, /problems/different-ways-to-add-parentheses/, Medium], [Expression Add Operators, /problems/expression-add-operators/, Hard], [Basic Calculator III, /problems/basic-calculator-iii/, Hard]","given a string `s` representing an expression, implement a basic calculator to evaluate it.","input: s = ""1 + 1"" output: 2 example 2: input: s = "" 2-1 + 2 "" output: 3 example 3: input: s = ""(1+(4+5+2)-3)+(6+8)"" output: 23","`1 <= s.length <= 3 * 10^5` `s` consists of digits, `'+'`, `'-'`, `'('`, `')'`, and `' '`. `s` represents a valid expression.",
225,Implement Stack using Queues,"Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue (`push`, `top`, `pop`, and `empty`).

Implement the `MyStack` class:
`void push(int x)` Pushes element x to the top of the stack.

`int pop()` Removes the element on the top of the stack and returns it.

`int top()` Returns the element on the top of the stack.

`boolean empty()` Returns `true` if the stack is empty, `false` otherwise.

Notes:
You must use only standard operations of a queue, which means only `push to back`, `peek/pop from front`, `size`, and `is empty` operations are valid.

Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue's standard operations.


Example 1:
Input
[""MyStack"", ""push"", ""push"", ""top"", ""pop"", ""empty""]
[[], [1], [2], [], [], []]
Output
[null, null, null, 2, 2, false]
Explanation
MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // return 2
myStack.pop(); // return 2
myStack.empty(); // return False

Constraints:
`1 <= x <= 9`
At most `100` calls will be made to `push`, `pop`, `top`, and `empty`.

All the calls to `pop` and `top` are valid.

Follow-up: Can you implement the stack such that each operation is amortized `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer. You can use more than two queues.",Easy,https://leetcode.com/problems/implement-stack-using-queues,"Amazon,Paypal","Stack,Design",1016,"[Implement Queue using Stacks, /problems/implement-queue-using-stacks/, Easy]","implement a last in first out (lifo) stack using only two queues. the implemented stack should support all the functions of a normal queue (`push`, `top`, `pop`, and `empty`). implement the `mystack` class: `void push(int x)` pushes element x to the top of the stack. `int pop()` removes the element on the top of the stack and returns it. `int top()` returns the element on the top of the stack. `boolean empty()` returns `true` if the stack is empty, `false` otherwise. notes: you must use only standard operations of a queue, which means only `push to back`, `peek/pop from front`, `size`, and `is empty` operations are valid. depending on your language, the queue may not be supported natively. you may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue's standard operations.","input [""mystack"", ""push"", ""push"", ""top"", ""pop"", ""empty""] [[], [1], [2], [], [], []] output [null, null, null, 2, 2, false] explanation mystack mystack = new mystack(); mystack.push(1); mystack.push(2); mystack.top(); // return 2 mystack.pop(); // return 2 mystack.empty(); // return false","`1 <= x <= 9` at most `10^0` calls will be made to `push`, `pop`, `top`, and `empty`. all the calls to `pop` and `top` are valid.","can you implement the stack such that each operation is amortized `o(1)` time complexity? in other words, performing `n` operations will take overall `o(n)` time even if one of those operations may take longer. you can use more than two queues."
226,Invert Binary Tree,"Given the `root` of a binary tree, invert the tree, and return its root.


Example 1:
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Example 2:
Input: root = [2,1,3]
Output: [2,3,1]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`",Easy,https://leetcode.com/problems/invert-binary-tree,"Microsoft,Amazon,Google,Facebook,eBay,Paypal",Tree,4997,,"given the `root` of a binary tree, invert the tree, and return its root.","input: root = [4,2,7,1,3,6,9] output: [4,7,2,9,6,3,1] example 2: input: root = [2,1,3] output: [2,3,1] example 3: input: root = [] output: []","the number of nodes in the tree is in the range `[0, 10^0]`. `-10^0 <= node.val <= 10^0`",
227,Basic Calculator II,"Given a string `s` which represents an expression, evaluate this expression and return its value. 
The integer division should truncate toward zero.


Example 1:
Input: s = ""3+2*2""
Output: 7

Example 2:
Input: s = "" 3/2 ""
Output: 1

Example 3:
Input: s = "" 3+5 / 2 ""
Output: 5

Constraints:
`1 <= s.length <= 3 * 105`
`s` consists of integers and operators `('+', '-', '*', '/')` separated by some number of spaces.

`s` represents a valid expression.

All the integers in the expression are non-negative integers in the range `[0, 231 - 1]`.

The answer is guaranteed to fit in a 32-bit integer.",Medium,https://leetcode.com/problems/basic-calculator-ii,"Amazon,Facebook,Microsoft,Roblox,Snapchat,Uber","String,Stack",2274,"[Basic Calculator, /problems/basic-calculator/, Hard], [Expression Add Operators, /problems/expression-add-operators/, Hard], [Basic Calculator III, /problems/basic-calculator-iii/, Hard]","given a string `s` which represents an expression, evaluate this expression and return its value. the integer division should truncate toward zero.","input: s = ""3+2*2"" output: 7 example 2: input: s = "" 3/2 "" output: 1 example 3: input: s = "" 3+5 / 2 "" output: 5","`1 <= s.length <= 3 * 10^5` `s` consists of integers and operators `('+', '-', '*', '/')` separated by some number of spaces. `s` represents a valid expression. all the integers in the expression are non-negative integers in the range `[0, 231 - 1]`. the answer is guaranteed to fit in a 32-bit integer.",
228,Summary Ranges,"You are given a sorted unique integer array `nums`.

Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.

Each range `[a,b]` in the list should be output as:
`""a->b""` if `a != b`
`""a""` if `a == b`

Example 1:
Input: nums = [0,1,2,4,5,7]
Output: [""0->2"",""4->5"",""7""]
Explanation: The ranges are:
[0,2] --> ""0->2""
[4,5] --> ""4->5""
[7,7] --> ""7""

Example 2:
Input: nums = [0,2,3,4,6,8,9]
Output: [""0"",""2->4"",""6"",""8->9""]
Explanation: The ranges are:
[0,0] --> ""0""
[2,4] --> ""2->4""
[6,6] --> ""6""
[8,9] --> ""8->9""

Example 3:
Input: nums = []
Output: []

Example 4:
Input: nums = [-1]
Output: [""-1""]

Example 5:
Input: nums = [0]
Output: [""0""]

Constraints:
`0 <= nums.length <= 20`
`-231 <= nums[i] <= 231 - 1`
All the values of `nums` are unique.

`nums` is sorted in ascending order.",Easy,https://leetcode.com/problems/summary-ranges,"Yandex,Facebook,Bloomberg,Qualtrics",Array,971,"[Missing Ranges, /problems/missing-ranges/, Easy], [Data Stream as Disjoint Intervals, /problems/data-stream-as-disjoint-intervals/, Hard]","you are given a sorted unique integer array `nums`. return the smallest sorted list of ranges that cover all the numbers in the array exactly. that is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`. each range `[a,b]` in the list should be output as: `""a->b""` if `a != b` `""a""` if `a == b`","input: nums = [0,1,2,4,5,7] output: [""0->2"",""4->5"",""7""] explanation: the ranges are: [0,2] --> ""0->2"" [4,5] --> ""4->5"" [7,7] --> ""7"" example 2: input: nums = [0,2,3,4,6,8,9] output: [""0"",""2->4"",""6"",""8->9""] explanation: the ranges are: [0,0] --> ""0"" [2,4] --> ""2->4"" [6,6] --> ""6"" [8,9] --> ""8->9"" example 3: input: nums = [] output: [] example 4: input: nums = [-1] output: [""-1""] example 5: input: nums = [0] output: [""0""]",`0 <= nums.length <= 20` `-231 <= nums[i] <= 231 - 1` all the values of `nums` are unique. `nums` is sorted in ascending order.,
229,Majority Element II,"Given an integer array of size `n`, find all elements that appear more than `⌊ n/3 ⌋` times.

Follow-up: Could you solve the problem in linear time and in O(1) space?

Example 1:
Input: nums = [3,2,3]
Output: [3]

Example 2:
Input: nums = [1]
Output: [1]

Example 3:
Input: nums = [1,2]
Output: [1,2]

Constraints:
`1 <= nums.length <= 5 * 104`
`-109 <= nums[i] <= 109`",Medium,https://leetcode.com/problems/majority-element-ii,Google,Array,2598,"[Majority Element, /problems/majority-element/, Easy], [Check If a Number Is Majority Element in a Sorted Array, /problems/check-if-a-number-is-majority-element-in-a-sorted-array/, Easy]","given an integer array of size `n`, find all elements that appear more than `⌊ n/3 ⌋` times.","input: nums = [3,2,3] output: [3] example 2: input: nums = [1] output: [1] example 3: input: nums = [1,2] output: [1,2]",`1 <= nums.length <= 5 * 10^4` `-10^9 <= nums[i] <= 10^9`,"could you solve the problem in linear time and in o(1) space? example 1: input: nums = [3,2,3] output: [3] example 2: input: nums = [1] output: [1] example 3: input: nums = [1,2] output: [1,2] constraints: `1 <= nums.length <= 5 * 104` `-109 <= nums[i] <= 109`"
230,Kth Smallest Element in a BST,"Given the `root` of a binary search tree, and an integer `k`, return the `kth` (1-indexed) smallest element in the tree.


Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3

Constraints:
The number of nodes in the tree is `n`.

`1 <= k <= n <= 104`
`0 <= Node.val <= 104`
Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?",Medium,https://leetcode.com/problems/kth-smallest-element-in-a-bst,"Amazon,Facebook,Adobe,Microsoft,Oracle","Binary Search,Tree",3711,"[Binary Tree Inorder Traversal, /problems/binary-tree-inorder-traversal/, Medium], [Second Minimum Node In a Binary Tree, /problems/second-minimum-node-in-a-binary-tree/, Easy]","given the `root` of a binary search tree, and an integer `k`, return the `kth` (1-indexed) smallest element in the tree.","input: root = [3,1,4,null,2], k = 1 output: 1 example 2: input: root = [5,3,6,2,4,null,null,1], k = 3 output: 3",the number of nodes in the tree is `n`. `1 <= k <= n <= 10^4` `0 <= node.val <= 10^4`,"if the bst is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?"
231,Power of Two,"Given an integer `n`, return `true` if it is a power of two. Otherwise, return `false`.

An integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.


Example 1:
Input: n = 1
Output: true
Explanation: 20 = 1

Example 2:
Input: n = 16
Output: true
Explanation: 24 = 16

Example 3:
Input: n = 3
Output: false

Example 4:
Input: n = 4
Output: true

Example 5:
Input: n = 5
Output: false

Constraints:
`-231 <= n <= 231 - 1`
Follow up: Could you solve it without loops/recursion?",Easy,https://leetcode.com/problems/power-of-two,Apple,"Math,Bit Manipulation",1295,"[Number of 1 Bits, /problems/number-of-1-bits/, Easy], [Power of Three, /problems/power-of-three/, Easy], [Power of Four, /problems/power-of-four/, Easy]","given an integer `n`, return `true` if it is a power of two. otherwise, return `false`. an integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.",input: n = 1 output: true explanation: 20 = 1 example 2: input: n = 16 output: true explanation: 24 = 16 example 3: input: n = 3 output: false example 4: input: n = 4 output: true example 5: input: n = 5 output: false,`-231 <= n <= 231 - 1`,could you solve it without loops/recursion?
232,Implement Queue using Stacks,"Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).

Implement the `MyQueue` class:
`void push(int x)` Pushes element x to the back of the queue.

`int pop()` Removes the element from the front of the queue and returns it.

`int peek()` Returns the element at the front of the queue.

`boolean empty()` Returns `true` if the queue is empty, `false` otherwise.

Notes:
You must use only standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid.

Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.

Follow-up: Can you implement the queue such that each operation is amortized `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer.


Example 1:
Input
[""MyQueue"", ""push"", ""push"", ""peek"", ""pop"", ""empty""]
[[], [1], [2], [], [], []]
Output
[null, null, null, 1, 1, false]
Explanation
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false

Constraints:
`1 <= x <= 9`
At most `100` calls will be made to `push`, `pop`, `peek`, and `empty`.

All the calls to `pop` and `peek` are valid.",Easy,https://leetcode.com/problems/implement-queue-using-stacks,"Amazon,Microsoft,Apple,Facebook,Citrix,Morgan Stanley","Stack,Design",1659,"[Implement Stack using Queues, /problems/implement-stack-using-queues/, Easy]","implement a first in first out (fifo) queue using only two stacks. the implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`). implement the `myqueue` class: `void push(int x)` pushes element x to the back of the queue. `int pop()` removes the element from the front of the queue and returns it. `int peek()` returns the element at the front of the queue. `boolean empty()` returns `true` if the queue is empty, `false` otherwise. notes: you must use only standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid. depending on your language, the stack may not be supported natively. you may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.","input [""myqueue"", ""push"", ""push"", ""peek"", ""pop"", ""empty""] [[], [1], [2], [], [], []] output [null, null, null, 1, 1, false] explanation myqueue myqueue = new myqueue(); myqueue.push(1); // queue is: [1] myqueue.push(2); // queue is: [1, 2] (leftmost is front of the queue) myqueue.peek(); // return 1 myqueue.pop(); // return 1, queue is [2] myqueue.empty(); // return false","`1 <= x <= 9` at most `10^0` calls will be made to `push`, `pop`, `peek`, and `empty`. all the calls to `pop` and `peek` are valid.","can you implement the queue such that each operation is amortized `o(1)` time complexity? in other words, performing `n` operations will take overall `o(n)` time even if one of those operations may take longer. example 1: input [""myqueue"", ""push"", ""push"", ""peek"", ""pop"", ""empty""] [[], [1], [2], [], [], []] output [null, null, null, 1, 1, false] explanation myqueue myqueue = new myqueue(); myqueue.push(1); // queue is: [1] myqueue.push(2); // queue is: [1, 2] (leftmost is front of the queue) myqueue.peek(); // return 1 myqueue.pop(); // return 1, queue is [2] myqueue.empty(); // return false constraints: `1 <= x <= 9` at most `100` calls will be made to `push`, `pop`, `peek`, and `empty`. all the calls to `pop` and `peek` are valid."
233,Number of Digit One,"Given an integer `n`, count the total number of digit `1` appearing in all non-negative integers less than or equal to `n`.


Example 1:
Input: n = 13
Output: 6

Example 2:
Input: n = 0
Output: 0

Constraints:
`0 <= n <= 2 * 109`",Hard,https://leetcode.com/problems/number-of-digit-one,Amazon,Math,388,"[Factorial Trailing Zeroes, /problems/factorial-trailing-zeroes/, Easy], [Digit Count in Range, /problems/digit-count-in-range/, Hard]","given an integer `n`, count the total number of digit `1` appearing in all non-negative integers less than or equal to `n`.",input: n = 13 output: 6 example 2: input: n = 0 output: 0,`0 <= n <= 2 * 10^9`,
234,Palindrome Linked List,"Given the `head` of a singly linked list, return `true` if it is a palindrome.


Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false

Constraints:
The number of nodes in the list is in the range `[1, 105]`.

`0 <= Node.val <= 9`
Follow up: Could you do it in `O(n)` time and `O(1)` space?",Easy,https://leetcode.com/problems/palindrome-linked-list,"Microsoft,Facebook,Amazon,Adobe,Capital One,Google,Oracle,Bloomberg,Uber,Snapchat,PayTM","Linked List,Two Pointers",5077,"[Palindrome Number, /problems/palindrome-number/, Easy], [Valid Palindrome, /problems/valid-palindrome/, Easy], [Reverse Linked List, /problems/reverse-linked-list/, Easy]","given the `head` of a singly linked list, return `true` if it is a palindrome.","input: head = [1,2,2,1] output: true example 2: input: head = [1,2] output: false","the number of nodes in the list is in the range `[1, 10^5]`. `0 <= node.val <= 9`",could you do it in `o(n)` time and `o(1)` space?
235,Lowest Common Ancestor of a Binary Search Tree,"Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).”

Example 1:
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.


Example 2:
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.


Example 3:
Input: root = [2,1], p = 2, q = 1
Output: 2

Constraints:
The number of nodes in the tree is in the range `[2, 105]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
`p` and `q` will exist in the BST.",Easy,https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree,"Amazon,Facebook,LinkedIn,Oracle,Microsoft",Tree,2991,"[Lowest Common Ancestor of a Binary Tree, /problems/lowest-common-ancestor-of-a-binary-tree/, Medium], [Smallest Common Region, /problems/smallest-common-region/, Medium], [Lowest Common Ancestor of a Binary Tree II, /problems/lowest-common-ancestor-of-a-binary-tree-ii/, Medium], [Lowest Common Ancestor of a Binary Tree III, /problems/lowest-common-ancestor-of-a-binary-tree-iii/, Medium], [Lowest Common Ancestor of a Binary Tree IV, /problems/lowest-common-ancestor-of-a-binary-tree-iv/, Medium]","given a binary search tree (bst), find the lowest common ancestor (lca) of two given nodes in the bst. according to the definition of lca on wikipedia: “the lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `t` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).”","input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8 output: 6 explanation: the lca of nodes 2 and 8 is 6. example 2: input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4 output: 2 explanation: the lca of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the lca definition. example 3: input: root = [2,1], p = 2, q = 1 output: 2","the number of nodes in the tree is in the range `[2, 10^5]`. `-10^9 <= node.val <= 10^9` all `node.val` are unique. `p != q` `p` and `q` will exist in the bst.",
236,Lowest Common Ancestor of a Binary Tree,"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).”

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.


Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

Constraints:
The number of nodes in the tree is in the range `[2, 105]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
`p` and `q` will exist in the tree.",Medium,https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree,"Facebook,Microsoft,Amazon,Oracle,LinkedIn,Apple,Bloomberg,Intuit,Adobe,Google,Uber,Zillow,Palantir Technologies,Atlassian",Tree,5470,"[Lowest Common Ancestor of a Binary Search Tree, /problems/lowest-common-ancestor-of-a-binary-search-tree/, Easy], [Smallest Common Region, /problems/smallest-common-region/, Medium], [Lowest Common Ancestor of a Binary Tree II, /problems/lowest-common-ancestor-of-a-binary-tree-ii/, Medium], [Lowest Common Ancestor of a Binary Tree III, /problems/lowest-common-ancestor-of-a-binary-tree-iii/, Medium], [Lowest Common Ancestor of a Binary Tree IV, /problems/lowest-common-ancestor-of-a-binary-tree-iv/, Medium]","given a binary tree, find the lowest common ancestor (lca) of two given nodes in the tree. according to the definition of lca on wikipedia: “the lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `t` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).”","input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 output: 3 explanation: the lca of nodes 5 and 1 is 3. example 2: input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 output: 5 explanation: the lca of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the lca definition. example 3: input: root = [1,2], p = 1, q = 2 output: 1","the number of nodes in the tree is in the range `[2, 10^5]`. `-10^9 <= node.val <= 10^9` all `node.val` are unique. `p != q` `p` and `q` will exist in the tree.",
237,Delete Node in a Linked List,"Write a function to delete a node in a singly-linked list. You will not be given access to the `head` of the list, instead you will be given access to the node to be deleted directly.

It is guaranteed that the node to be deleted is not a tail node in the list.


Example 1:
Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.


Example 2:
Input: head = [4,5,1,9], node = 1
Output: [4,5,9]
Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.


Example 3:
Input: head = [1,2,3,4], node = 3
Output: [1,2,4]

Example 4:
Input: head = [0,1], node = 0
Output: [1]

Example 5:
Input: head = [-3,5,-99], node = -3
Output: [5,-99]

Constraints:
The number of the nodes in the given list is in the range `[2, 1000]`.

`-1000 <= Node.val <= 1000`
The value of each node in the list is unique.

The `node` to be deleted is in the list and is not a tail node",Easy,https://leetcode.com/problems/delete-node-in-a-linked-list,"Adobe,Qualcomm",Linked List,2506,"[Remove Linked List Elements, /problems/remove-linked-list-elements/, Easy]","write a function to delete a node in a singly-linked list. you will not be given access to the `head` of the list, instead you will be given access to the node to be deleted directly. it is guaranteed that the node to be deleted is not a tail node in the list.","input: head = [4,5,1,9], node = 5 output: [4,1,9] explanation: you are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function. example 2: input: head = [4,5,1,9], node = 1 output: [4,5,9] explanation: you are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function. example 3: input: head = [1,2,3,4], node = 3 output: [1,2,4] example 4: input: head = [0,1], node = 0 output: [1] example 5: input: head = [-3,5,-99], node = -3 output: [5,-99]","the number of the nodes in the given list is in the range `[2, 1000]`. `-1000 <= node.val <= 1000` the value of each node in the list is unique. the `node` to be deleted is in the list and is not a tail node",
238,Product of Array Except Self,"Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`.

The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.


Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

Constraints:
`2 <= nums.length <= 105`
`-30 <= nums[i] <= 30`
The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.

Follow up:
Could you solve it in `O(n)` time complexity and without using division?
Could you solve it with `O(1)` constant space complexity? (The output array does not count as extra space for space complexity analysis.)",Medium,https://leetcode.com/problems/product-of-array-except-self,"Facebook,Amazon,Apple,Asana,Lyft,Microsoft,Uber,Adobe,VMware,Nvidia,Oracle,Intel",Array,7122,"[Trapping Rain Water, /problems/trapping-rain-water/, Hard], [Maximum Product Subarray, /problems/maximum-product-subarray/, Medium], [Paint House II, /problems/paint-house-ii/, Hard]","given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`. the product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.","input: nums = [1,2,3,4] output: [24,12,8,6] example 2: input: nums = [-1,1,0,-3,3] output: [0,0,9,0,0]",`2 <= nums.length <= 10^5` `-30 <= nums[i] <= 30` the product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.,could you solve it in `o(n)` time complexity and without using division? could you solve it with `o(1)` constant space complexity? (the output array does not count as extra space for space complexity analysis.)
239,Sliding Window Maximum,"You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.


Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Example 2:
Input: nums = [1], k = 1
Output: [1]

Example 3:
Input: nums = [1,-1], k = 1
Output: [1,-1]

Example 4:
Input: nums = [9,11], k = 2
Output: [11]

Example 5:
Input: nums = [4,-2], k = 2
Output: [4]

Constraints:
`1 <= nums.length <= 105`
`-104 <= nums[i] <= 104`
`1 <= k <= nums.length`",Hard,https://leetcode.com/problems/sliding-window-maximum,"Amazon,ByteDance,Dropbox,Facebook,Google,Citadel,Bloomberg,Microsoft,Akuna Capital,IBM,Twitter","Heap,Sliding Window,Dequeue",5504,"[Minimum Window Substring, /problems/minimum-window-substring/, Hard], [Min Stack, /problems/min-stack/, Easy], [Longest Substring with At Most Two Distinct Characters, /problems/longest-substring-with-at-most-two-distinct-characters/, Medium], [Paint House II, /problems/paint-house-ii/, Hard], [Jump Game VI, /problems/jump-game-vi/, Medium]","you are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. you can only see the `k` numbers in the window. each time the sliding window moves right by one position. return the max sliding window.","input: nums = [1,3,-1,-3,5,3,6,7], k = 3 output: [3,3,5,5,6,7] explanation: window position max --------------- ----- [1 3 -1] -3 5 3 6 7 3 1 [3 -1 -3] 5 3 6 7 3 1 3 [-1 -3 5] 3 6 7 5 1 3 -1 [-3 5 3] 6 7 5 1 3 -1 -3 [5 3 6] 7 6 1 3 -1 -3 5 [3 6 7] 7 example 2: input: nums = [1], k = 1 output: [1] example 3: input: nums = [1,-1], k = 1 output: [1,-1] example 4: input: nums = [9,11], k = 2 output: [11] example 5: input: nums = [4,-2], k = 2 output: [4]",`1 <= nums.length <= 10^5` `-10^4 <= nums[i] <= 10^4` `1 <= k <= nums.length`,
240,Search a 2D Matrix II,"Write an efficient algorithm that searches for a `target` value in an `m x n` integer `matrix`. The `matrix` has the following properties:
Integers in each row are sorted in ascending from left to right.

Integers in each column are sorted in ascending from top to bottom.


Example 1:
Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true

Example 2:
Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= n, m <= 300`
`-109 <= matix[i][j] <= 109`
All the integers in each row are sorted in ascending order.

All the integers in each column are sorted in ascending order.

`-109 <= target <= 109`",Medium,https://leetcode.com/problems/search-a-2d-matrix-ii,"Amazon,ByteDance,Microsoft,Bloomberg,Facebook","Binary Search,Divide and Conquer",4580,"[Search a 2D Matrix, /problems/search-a-2d-matrix/, Medium]",write an efficient algorithm that searches for a `target` value in an `m x n` integer `matrix`. the `matrix` has the following properties: integers in each row are sorted in ascending from left to right. integers in each column are sorted in ascending from top to bottom.,"input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5 output: true example 2: input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20 output: false","`m == matrix.length` `n == matrix[i].length` `1 <= n, m <= 300` `-10^9 <= matix[i][j] <= 10^9` all the integers in each row are sorted in ascending order. all the integers in each column are sorted in ascending order. `-10^9 <= target <= 10^9`",
241,Different Ways to Add Parentheses,"Given a string `expression` of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.


Example 1:
Input: expression = ""2-1-1""
Output: [0,2]
Explanation:
((2-1)-1) = 0 
(2-(1-1)) = 2

Example 2:
Input: expression = ""2*3-4*5""
Output: [-34,-14,-10,-10,10]
Explanation:
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10

Constraints:
`1 <= expression.length <= 20`
`expression` consists of digits and the operator `'+'`, `'-'`, and `'*'`.",Medium,https://leetcode.com/problems/different-ways-to-add-parentheses,"Microsoft,Flipkart",Divide and Conquer,2137,"[Unique Binary Search Trees II, /problems/unique-binary-search-trees-ii/, Medium], [Basic Calculator, /problems/basic-calculator/, Hard], [Expression Add Operators, /problems/expression-add-operators/, Hard]","given a string `expression` of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. you may return the answer in any order.","input: expression = ""2-1-1"" output: [0,2] explanation: ((2-1)-1) = 0 (2-(1-1)) = 2 example 2: input: expression = ""2*3-4*5"" output: [-34,-14,-10,-10,10] explanation: (2*(3-(4*5))) = -34 ((2*3)-(4*5)) = -14 ((2*(3-4))*5) = -10 (2*((3-4)*5)) = -10 (((2*3)-4)*5) = 10","`1 <= expression.length <= 20` `expression` consists of digits and the operator `'+'`, `'-'`, and `'*'`.",
242,Valid Anagram,"Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.


Example 1:
Input: s = ""anagram"", t = ""nagaram""
Output: true

Example 2:
Input: s = ""rat"", t = ""car""
Output: false

Constraints:
`1 <= s.length, t.length <= 5 * 104`
`s` and `t` consist of lowercase English letters.

Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?",Easy,https://leetcode.com/problems/valid-anagram,"Bloomberg,Facebook,Microsoft,Amazon,Apple,Oracle,Google,Goldman Sachs,Adobe,Cisco,Paypal,Qualcomm","Hash Table,Sort",2484,"[Group Anagrams, /problems/group-anagrams/, Medium], [Palindrome Permutation, /problems/palindrome-permutation/, Easy], [Find All Anagrams in a String, /problems/find-all-anagrams-in-a-string/, Medium]","given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.","input: s = ""anagram"", t = ""nagaram"" output: true example 2: input: s = ""rat"", t = ""car"" output: false","`1 <= s.length, t.length <= 5 * 10^4` `s` and `t` consist of lowercase english letters.",what if the inputs contain unicode characters? how would you adapt your solution to such a case?
243,Shortest Word Distance,"Given an array of strings `wordsDict` and two different strings that already exist in the array `word1` and `word2`, return the shortest distance between these two words in the list.


Example 1:
Input: wordsDict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""coding"", word2 = ""practice""
Output: 3

Example 2:
Input: wordsDict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""makes"", word2 = ""coding""
Output: 1

Constraints:
`1 <= wordsDict.length <= 3 * 104`
`1 <= wordsDict[i].length <= 10`
`wordsDict[i]` consists of lowercase English letters.

`word1` and `word2` are in `wordsDict`.

`word1 != word2`",Easy,https://leetcode.com/problems/shortest-word-distance,"LinkedIn,Microsoft,Goldman Sachs",,690,"[Shortest Word Distance II, /problems/shortest-word-distance-ii/, Medium], [Shortest Word Distance III, /problems/shortest-word-distance-iii/, Medium]","given an array of strings `wordsdict` and two different strings that already exist in the array `word1` and `word2`, return the shortest distance between these two words in the list.","input: wordsdict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""coding"", word2 = ""practice"" output: 3 example 2: input: wordsdict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""makes"", word2 = ""coding"" output: 1",`1 <= wordsdict.length <= 3 * 10^4` `1 <= wordsdict[i].length <= 10` `wordsdict[i]` consists of lowercase english letters. `word1` and `word2` are in `wordsdict`. `word1 != word2`,
244,Shortest Word Distance II,"Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.

Implement the `WordDistance` class:
`WordDistance(String[] wordsDict)` initializes the object with the strings array `wordsDict`.

`int shortest(String word1, String word2)` returns the shortest distance between `word1` and `word2` in the array `wordsDict`.


Example 1:
Input
[""WordDistance"", ""shortest"", ""shortest""]
[[[""practice"", ""makes"", ""perfect"", ""coding"", ""makes""]], [""coding"", ""practice""], [""makes"", ""coding""]]
Output
[null, 3, 1]
Explanation
WordDistance wordDistance = new WordDistance([""practice"", ""makes"", ""perfect"", ""coding"", ""makes""]);
wordDistance.shortest(""coding"", ""practice""); // return 3
wordDistance.shortest(""makes"", ""coding"");    // return 1

Constraints:
`1 <= wordsDict.length <= 3 * 104`
`1 <= wordsDict[i].length <= 10`
`wordsDict[i]` consists of lowercase English letters.

`word1` and `word2` are in `wordsDict`.

`word1 != word2`
At most `5000` calls will be made to `shortest`.",Medium,https://leetcode.com/problems/shortest-word-distance-ii,"LinkedIn,Amazon,eBay","Hash Table,Design",497,"[Merge Two Sorted Lists, /problems/merge-two-sorted-lists/, Easy], [Shortest Word Distance, /problems/shortest-word-distance/, Easy], [Shortest Word Distance III, /problems/shortest-word-distance-iii/, Medium]","design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array. implement the `worddistance` class: `worddistance(string[] wordsdict)` initializes the object with the strings array `wordsdict`. `int shortest(string word1, string word2)` returns the shortest distance between `word1` and `word2` in the array `wordsdict`.","input [""worddistance"", ""shortest"", ""shortest""] [[[""practice"", ""makes"", ""perfect"", ""coding"", ""makes""]], [""coding"", ""practice""], [""makes"", ""coding""]] output [null, 3, 1] explanation worddistance worddistance = new worddistance([""practice"", ""makes"", ""perfect"", ""coding"", ""makes""]); worddistance.shortest(""coding"", ""practice""); // return 3 worddistance.shortest(""makes"", ""coding""); // return 1",`1 <= wordsdict.length <= 3 * 10^4` `1 <= wordsdict[i].length <= 10` `wordsdict[i]` consists of lowercase english letters. `word1` and `word2` are in `wordsdict`. `word1 != word2` at most `5000` calls will be made to `shortest`.,
245,Shortest Word Distance III,"Given an array of strings `wordsDict` and two strings that already exist in the array `word1` and `word2`, return the shortest distance between these two words in the list.

Note that `word1` and `word2` may be the same. It is guaranteed that they represent two individual words in the list.


Example 1:
Input: wordsDict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""makes"", word2 = ""coding""
Output: 1

Example 2:
Input: wordsDict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""makes"", word2 = ""makes""
Output: 3

Constraints:
`1 <= wordsDict.length <= 3 * 104`
`1 <= wordsDict[i].length <= 10`
`wordsDict[i]` consists of lowercase English letters.

`word1` and `word2` are in `wordsDict`.",Medium,https://leetcode.com/problems/shortest-word-distance-iii,LinkedIn,Array,254,"[Shortest Word Distance, /problems/shortest-word-distance/, Easy], [Shortest Word Distance II, /problems/shortest-word-distance-ii/, Medium]","given an array of strings `wordsdict` and two strings that already exist in the array `word1` and `word2`, return the shortest distance between these two words in the list. note that `word1` and `word2` may be the same. it is guaranteed that they represent two individual words in the list.","input: wordsdict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""makes"", word2 = ""coding"" output: 1 example 2: input: wordsdict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""makes"", word2 = ""makes"" output: 3",`1 <= wordsdict.length <= 3 * 10^4` `1 <= wordsdict[i].length <= 10` `wordsdict[i]` consists of lowercase english letters. `word1` and `word2` are in `wordsdict`.,
246,Strobogrammatic Number,"Given a string `num` which represents an integer, return `true` if `num` is a strobogrammatic number.

A strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).


Example 1:
Input: num = ""69""
Output: true

Example 2:
Input: num = ""88""
Output: true

Example 3:
Input: num = ""962""
Output: false

Example 4:
Input: num = ""1""
Output: true

Constraints:
`1 <= num.length <= 50`
`num` consists of only digits.

`num` does not contain any leading zeros except for zero itself.",Easy,https://leetcode.com/problems/strobogrammatic-number,"Facebook,Google,Microsoft","Hash Table,Math",315,"[Strobogrammatic Number II, /problems/strobogrammatic-number-ii/, Medium], [Strobogrammatic Number III, /problems/strobogrammatic-number-iii/, Hard], [Confusing Number, /problems/confusing-number/, Easy]","given a string `num` which represents an integer, return `true` if `num` is a strobogrammatic number. a strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).","input: num = ""69"" output: true example 2: input: num = ""88"" output: true example 3: input: num = ""962"" output: false example 4: input: num = ""1"" output: true",`1 <= num.length <= 50` `num` consists of only digits. `num` does not contain any leading zeros except for zero itself.,
247,Strobogrammatic Number II,"Given an integer `n`, return all the strobogrammatic numbers that are of length `n`. You may return the answer in any order.

A strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).


Example 1:
Input: n = 2
Output: [""11"",""69"",""88"",""96""]

Example 2:
Input: n = 1
Output: [""0"",""1"",""8""]

Constraints:
`1 <= n <= 14`",Medium,https://leetcode.com/problems/strobogrammatic-number-ii,"Facebook,Google","Math,Recursion",549,"[Strobogrammatic Number, /problems/strobogrammatic-number/, Easy], [Strobogrammatic Number III, /problems/strobogrammatic-number-iii/, Hard]","given an integer `n`, return all the strobogrammatic numbers that are of length `n`. you may return the answer in any order. a strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).","input: n = 2 output: [""11"",""69"",""88"",""96""] example 2: input: n = 1 output: [""0"",""1"",""8""]",`1 <= n <= 14`,
248,Strobogrammatic Number III,"Given two strings low and high that represent two integers `low` and `high` where `low <= high`, return the number of strobogrammatic numbers in the range `[low, high]`.

A strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).


Example 1:
Input: low = ""50"", high = ""100""
Output: 3

Example 2:
Input: low = ""0"", high = ""0""
Output: 1

Constraints:
`1 <= low.length, high.length <= 15`
`low` and `high` consist of only digits.

`low <= high`
`low` and `high` do not contain any leading zeros except for zero itself.",Hard,https://leetcode.com/problems/strobogrammatic-number-iii,Google,"Math,Recursion",218,"[Strobogrammatic Number, /problems/strobogrammatic-number/, Easy], [Strobogrammatic Number II, /problems/strobogrammatic-number-ii/, Medium]","given two strings low and high that represent two integers `low` and `high` where `low <= high`, return the number of strobogrammatic numbers in the range `[low, high]`. a strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).","input: low = ""50"", high = ""100"" output: 3 example 2: input: low = ""0"", high = ""0"" output: 1","`1 <= low.length, high.length <= 15` `low` and `high` consist of only digits. `low <= high` `low` and `high` do not contain any leading zeros except for zero itself.",
249,Group Shifted Strings,"We can shift a string by shifting each of its letters to its successive letter.

For example, `""abc""` can be shifted to be `""bcd""`.

We can keep shifting the string to form a sequence.

For example, we can keep shifting `""abc""` to form the sequence: `""abc"" -> ""bcd"" -> ... -> ""xyz""`.

Given an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. You may return the answer in any order.


Example 1:
Input: strings = [""abc"",""bcd"",""acef"",""xyz"",""az"",""ba"",""a"",""z""]
Output: [[""acef""],[""a"",""z""],[""abc"",""bcd"",""xyz""],[""az"",""ba""]]

Example 2:
Input: strings = [""a""]
Output: [[""a""]]

Constraints:
`1 <= strings.length <= 200`
`1 <= strings[i].length <= 50`
`strings[i]` consists of lowercase English letters.",Medium,https://leetcode.com/problems/group-shifted-strings,"Facebook,Google","Hash Table,String",733,"[Group Anagrams, /problems/group-anagrams/, Medium]","we can shift a string by shifting each of its letters to its successive letter. for example, `""abc""` can be shifted to be `""bcd""`. we can keep shifting the string to form a sequence. for example, we can keep shifting `""abc""` to form the sequence: `""abc"" -> ""bcd"" -> ... -> ""xyz""`. given an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. you may return the answer in any order.","input: strings = [""abc"",""bcd"",""acef"",""xyz"",""az"",""ba"",""a"",""z""] output: [[""acef""],[""a"",""z""],[""abc"",""bcd"",""xyz""],[""az"",""ba""]] example 2: input: strings = [""a""] output: [[""a""]]",`1 <= strings.length <= 200` `1 <= strings[i].length <= 50` `strings[i]` consists of lowercase english letters.,
250,Count Univalue Subtrees,"Given the `root` of a binary tree, return the number of uni-value subtrees.

A uni-value subtree means all nodes of the subtree have the same value.


Example 1:
Input: root = [5,1,5,5,5,null,5]
Output: 4

Example 2:
Input: root = []
Output: 0

Example 3:
Input: root = [5,5,5,5,5,null,5]
Output: 6

Constraints:
The numbrt of the node in the tree will be in the range `[0, 1000]`.

`-1000 <= Node.val <= 1000`",Medium,https://leetcode.com/problems/count-univalue-subtrees,"Google,eBay,Box",Tree,696,"[Subtree of Another Tree, /problems/subtree-of-another-tree/, Easy], [Longest Univalue Path, /problems/longest-univalue-path/, Medium]","given the `root` of a binary tree, return the number of uni-value subtrees. a uni-value subtree means all nodes of the subtree have the same value.","input: root = [5,1,5,5,5,null,5] output: 4 example 2: input: root = [] output: 0 example 3: input: root = [5,5,5,5,5,null,5] output: 6","the numbrt of the node in the tree will be in the range `[0, 1000]`. `-1000 <= node.val <= 1000`",
251,Flatten 2D Vector,"Design an iterator to flatten a 2D vector. It should support the `next` and `hasNext` operations.

Implement the `Vector2D` class:
`Vector2D(int[][] vec)` initializes the object with the 2D vector `vec`.

`next()` returns the next element from the 2D vector and moves the pointer one step forward. You may assume that all the calls to `next` are valid.

`hasNext()` returns `true` if there are still some elements in the vector, and `false` otherwise.


Example 1:
Input
[""Vector2D"", ""next"", ""next"", ""next"", ""hasNext"", ""hasNext"", ""next"", ""hasNext""]
[[[[1, 2], [3], [4]]], [], [], [], [], [], [], []]
Output
[null, 1, 2, 3, true, true, 4, false]
Explanation
Vector2D vector2D = new Vector2D([[1, 2], [3], [4]]);
vector2D.next();    // return 1
vector2D.next();    // return 2
vector2D.next();    // return 3
vector2D.hasNext(); // return True
vector2D.hasNext(); // return True
vector2D.next();    // return 4
vector2D.hasNext(); // return False

Constraints:
`0 <= vec.length <= 200`
`0 <= vec[i].length <= 500`
`-500 <= vec[i][j] <= 500`
At most `105` calls will be made to `next` and `hasNext`.

Follow up: As an added challenge, try to code it using only iterators in C++ or iterators in Java.",Medium,https://leetcode.com/problems/flatten-2d-vector,Airbnb,Design,435,"[Binary Search Tree Iterator, /problems/binary-search-tree-iterator/, Medium], [Zigzag Iterator, /problems/zigzag-iterator/, Medium], [Peeking Iterator, /problems/peeking-iterator/, Medium], [Flatten Nested List Iterator, /problems/flatten-nested-list-iterator/, Medium]","design an iterator to flatten a 2d vector. it should support the `next` and `hasnext` operations. implement the `vector2d` class: `vector2d(int[][] vec)` initializes the object with the 2d vector `vec`. `next()` returns the next element from the 2d vector and moves the pointer one step forward. you may assume that all the calls to `next` are valid. `hasnext()` returns `true` if there are still some elements in the vector, and `false` otherwise.","input [""vector2d"", ""next"", ""next"", ""next"", ""hasnext"", ""hasnext"", ""next"", ""hasnext""] [[[[1, 2], [3], [4]]], [], [], [], [], [], [], []] output [null, 1, 2, 3, true, true, 4, false] explanation vector2d vector2d = new vector2d([[1, 2], [3], [4]]); vector2d.next(); // return 1 vector2d.next(); // return 2 vector2d.next(); // return 3 vector2d.hasnext(); // return true vector2d.hasnext(); // return true vector2d.next(); // return 4 vector2d.hasnext(); // return false",`0 <= vec.length <= 200` `0 <= vec[i].length <= 500` `-500 <= vec[i][j] <= 500` at most `10^5` calls will be made to `next` and `hasnext`.,"as an added challenge, try to code it using only iterators in c++ or iterators in java."
252,Meeting Rooms,"Given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.


Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: false

Example 2:
Input: intervals = [[7,10],[2,4]]
Output: true

Constraints:
`0 <= intervals.length <= 104`
`intervals[i].length == 2`
`0 <= starti < endi <= 106`",Easy,https://leetcode.com/problems/meeting-rooms,"Facebook,Microsoft,Bloomberg,Amazon,Adobe,Karat",Sort,892,"[Merge Intervals, /problems/merge-intervals/, Medium], [Meeting Rooms II, /problems/meeting-rooms-ii/, Medium]","given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.","input: intervals = [[0,30],[5,10],[15,20]] output: false example 2: input: intervals = [[7,10],[2,4]] output: true",`0 <= intervals.length <= 10^4` `intervals[i].length == 2` `0 <= starti < endi <= 10^6`,
253,Meeting Rooms II,"Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return the minimum number of conference rooms required.


Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2

Example 2:
Input: intervals = [[7,10],[2,4]]
Output: 1

Constraints:
`1 <= intervals.length <= 104`
`0 <= starti < endi <= 106`",Medium,https://leetcode.com/problems/meeting-rooms-ii,"Amazon,Bloomberg,Facebook,Google,Microsoft,Oracle,Uber,Yandex,ByteDance,Twitter,Apple,Walmart Labs,Adobe,Expedia,eBay","Heap,Greedy,Sort",3642,"[Merge Intervals, /problems/merge-intervals/, Medium], [Meeting Rooms, /problems/meeting-rooms/, Easy], [Minimum Number of Arrows to Burst Balloons, /problems/minimum-number-of-arrows-to-burst-balloons/, Medium], [Car Pooling, /problems/car-pooling/, Medium]","given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return the minimum number of conference rooms required.","input: intervals = [[0,30],[5,10],[15,20]] output: 2 example 2: input: intervals = [[7,10],[2,4]] output: 1",`1 <= intervals.length <= 10^4` `0 <= starti < endi <= 10^6`,
254,Factor Combinations,"Numbers can be regarded as the product of their factors.

For example, `8 = 2 x 2 x 2 = 2 x 4`.

Given an integer `n`, return all possible combinations of its factors. You may return the answer in any order.

Note that the factors should be in the range `[2, n - 1]`.


Example 1:
Input: n = 1
Output: []

Example 2:
Input: n = 12
Output: [[2,6],[3,4],[2,2,3]]

Example 3:
Input: n = 37
Output: []

Example 4:
Input: n = 32
Output: [[2,16],[4,8],[2,2,8],[2,4,4],[2,2,2,4],[2,2,2,2,2]]

Constraints:
`1 <= n <= 108`",Medium,https://leetcode.com/problems/factor-combinations,LinkedIn,Backtracking,686,"[Combination Sum, /problems/combination-sum/, Medium]","numbers can be regarded as the product of their factors. for example, `8 = 2 x 2 x 2 = 2 x 4`. given an integer `n`, return all possible combinations of its factors. you may return the answer in any order. note that the factors should be in the range `[2, n - 1]`.","input: n = 1 output: [] example 2: input: n = 12 output: [[2,6],[3,4],[2,2,3]] example 3: input: n = 37 output: [] example 4: input: n = 32 output: [[2,16],[4,8],[2,2,8],[2,4,4],[2,2,2,4],[2,2,2,2,2]]",`1 <= n <= 10^8`,
255,Verify Preorder Sequence in Binary Search Tree,"Given an array of unique integers `preorder`, return `true` if it is the correct preorder traversal sequence of a binary search tree.


Example 1:
Input: preorder = [5,2,1,3,6]
Output: true

Example 2:
Input: preorder = [5,2,6,1,3]
Output: false

Constraints:
`1 <= preorder.length <= 104`
`1 <= preorder[i] <= 104`
All the elements of `preorder` are unique.

Follow up: Could you do it using only constant space complexity?",Medium,https://leetcode.com/problems/verify-preorder-sequence-in-binary-search-tree,VMware,"Stack,Tree",743,"[Binary Tree Preorder Traversal, /problems/binary-tree-preorder-traversal/, Medium]","given an array of unique integers `preorder`, return `true` if it is the correct preorder traversal sequence of a binary search tree.","input: preorder = [5,2,1,3,6] output: true example 2: input: preorder = [5,2,6,1,3] output: false",`1 <= preorder.length <= 10^4` `1 <= preorder[i] <= 10^4` all the elements of `preorder` are unique.,could you do it using only constant space complexity?
256,Paint House,"There is a row of `n` houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an `n x 3` cost matrix `costs`.

For example, `costs[0][0]` is the cost of painting house `0` with the color red; `costs[1][2]` is the cost of painting house 1 with color green, and so on...

Return the minimum cost to paint all houses.


Example 1:
Input: costs = [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.

Minimum cost: 2 + 5 + 3 = 10.


Example 2:
Input: costs = [[7,6,2]]
Output: 2

Constraints:
`costs.length == n`
`costs[i].length == 3`
`1 <= n <= 100`
`1 <= costs[i][j] <= 20`",Medium,https://leetcode.com/problems/paint-house,"Roblox,LinkedIn,Google",Dynamic Programming,1196,"[House Robber, /problems/house-robber/, Medium], [House Robber II, /problems/house-robber-ii/, Medium], [Paint House II, /problems/paint-house-ii/, Hard], [Paint Fence, /problems/paint-fence/, Medium]","there is a row of `n` houses, where each house can be painted one of three colors: red, blue, or green. the cost of painting each house with a certain color is different. you have to paint all the houses such that no two adjacent houses have the same color. the cost of painting each house with a certain color is represented by an `n x 3` cost matrix `costs`. for example, `costs[0][0]` is the cost of painting house `0` with the color red; `costs[1][2]` is the cost of painting house 1 with color green, and so on... return the minimum cost to paint all houses.","input: costs = [[17,2,17],[16,16,5],[14,3,19]] output: 10 explanation: paint house 0 into blue, paint house 1 into green, paint house 2 into blue. minimum cost: 2 + 5 + 3 = 10. example 2: input: costs = [[7,6,2]] output: 2",`costs.length == n` `costs[i].length == 3` `1 <= n <= 10^0` `1 <= costs[i][j] <= 20`,
257,Binary Tree Paths,"Given the `root` of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.


Example 1:
Input: root = [1,2,3,null,5]
Output: [""1->2->5"",""1->3""]

Example 2:
Input: root = [1]
Output: [""1""]

Constraints:
The number of nodes in the tree is in the range `[1, 100]`.

`-100 <= Node.val <= 100`",Easy,https://leetcode.com/problems/binary-tree-paths,"Facebook,Google,Apple,Bloomberg","Tree,Depth-first Search",2486,"[Path Sum II, /problems/path-sum-ii/, Medium], [Smallest String Starting From Leaf, /problems/smallest-string-starting-from-leaf/, Medium]","given the `root` of a binary tree, return all root-to-leaf paths in any order. a leaf is a node with no children.","input: root = [1,2,3,null,5] output: [""1->2->5"",""1->3""] example 2: input: root = [1] output: [""1""]","the number of nodes in the tree is in the range `[1, 10^0]`. `-10^0 <= node.val <= 10^0`",
258,Add Digits,"Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.


Example 1:
Input: num = 38
Output: 2
Explanation: The process is
38 --> 3 + 8 --> 11
11 --> 1 + 1 --> 2 
Since 2 has only one digit, return it.


Example 2:
Input: num = 0
Output: 0

Constraints:
`0 <= num <= 231 - 1`
Follow up: Could you do it without any loop/recursion in `O(1)` runtime?",Easy,https://leetcode.com/problems/add-digits,"Amazon,Google",Math,1142,"[Happy Number, /problems/happy-number/, Easy], [Sum of Digits in the Minimum Number, /problems/sum-of-digits-in-the-minimum-number/, Easy]","given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.","input: num = 38 output: 2 explanation: the process is 38 --> 3 + 8 --> 11 11 --> 1 + 1 --> 2 since 2 has only one digit, return it. example 2: input: num = 0 output: 0",`0 <= num <= 231 - 1`,could you do it without any loop/recursion in `o(1)` runtime?
259,3Sum Smaller,"Given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.

Follow up: Could you solve it in `O(n2)` runtime?

Example 1:
Input: nums = [-2,0,1,3], target = 2
Output: 2
Explanation: Because there are two triplets which sums are less than 2:
[-2,0,1]
[-2,0,3]

Example 2:
Input: nums = [], target = 0
Output: 0

Example 3:
Input: nums = [0], target = 0
Output: 0

Constraints:
`n == nums.length`
`0 <= n <= 300`
`-100 <= nums[i] <= 100`
`-100 <= target <= 100`",Medium,https://leetcode.com/problems/3sum-smaller,"IBM,Citadel","Array,Two Pointers",837,"[3Sum, /problems/3sum/, Medium], [3Sum Closest, /problems/3sum-closest/, Medium], [Valid Triangle Number, /problems/valid-triangle-number/, Medium], [Two Sum Less Than K, /problems/two-sum-less-than-k/, Easy]","given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.","input: nums = [-2,0,1,3], target = 2 output: 2 explanation: because there are two triplets which sums are less than 2: [-2,0,1] [-2,0,3] example 2: input: nums = [], target = 0 output: 0 example 3: input: nums = [0], target = 0 output: 0",`n == nums.length` `0 <= n <= 300` `-10^0 <= nums[i] <= 10^0` `-10^0 <= target <= 10^0`,"could you solve it in `o(n2)` runtime? example 1: input: nums = [-2,0,1,3], target = 2 output: 2 explanation: because there are two triplets which sums are less than 2: [-2,0,1] [-2,0,3] example 2: input: nums = [], target = 0 output: 0 example 3: input: nums = [0], target = 0 output: 0 constraints: `n == nums.length` `0 <= n <= 300` `-100 <= nums[i] <= 100` `-100 <= target <= 100`"
260,Single Number III,"Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

Follow up: Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

Example 1:
Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.


Example 2:
Input: nums = [-1,0]
Output: [-1,0]

Example 3:
Input: nums = [0,1]
Output: [1,0]

Constraints:
`2 <= nums.length <= 3 * 104`
`-231 <= nums[i] <= 231 - 1`
Each integer in `nums` will appear twice, only two integers will appear once.",Medium,https://leetcode.com/problems/single-number-iii,Facebook,Bit Manipulation,2216,"[Single Number, /problems/single-number/, Easy], [Single Number II, /problems/single-number-ii/, Medium]","given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. find the two elements that appear only once. you can return the answer in any order.","input: nums = [1,2,1,3,2,5] output: [3,5] explanation: [5, 3] is also a valid answer. example 2: input: nums = [-1,0] output: [-1,0] example 3: input: nums = [0,1] output: [1,0]","`2 <= nums.length <= 3 * 10^4` `-231 <= nums[i] <= 231 - 1` each integer in `nums` will appear twice, only two integers will appear once.","your algorithm should run in linear runtime complexity. could you implement it using only constant space complexity? example 1: input: nums = [1,2,1,3,2,5] output: [3,5] explanation: [5, 3] is also a valid answer. example 2: input: nums = [-1,0] output: [-1,0] example 3: input: nums = [0,1] output: [1,0] constraints: `2 <= nums.length <= 3 * 104` `-231 <= nums[i] <= 231 - 1` each integer in `nums` will appear twice, only two integers will appear once."
261,Graph Valid Tree,"You have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer n and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph.

Return `true` if the edges of the given graph make up a valid tree, and `false` otherwise.


Example 1:
Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]
Output: true

Example 2:
Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]
Output: false

Constraints:
`1 <= 2000 <= n`
`0 <= edges.length <= 5000`
`edges[i].length == 2`
`0 <= ai, bi < n`
`ai != bi`
There are no self-loops or repeated edges.",Medium,https://leetcode.com/problems/graph-valid-tree,"Amazon,Qualtrics,Microsoft","Depth-first Search,Breadth-first Search,Union Find,Graph",1367,"[Course Schedule, /problems/course-schedule/, Medium], [Number of Connected Components in an Undirected Graph, /problems/number-of-connected-components-in-an-undirected-graph/, Medium]","you have a graph of `n` nodes labeled from `0` to `n - 1`. you are given an integer n and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph. return `true` if the edges of the given graph make up a valid tree, and `false` otherwise.","input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]] output: true example 2: input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]] output: false","`1 <= 2000 <= n` `0 <= edges.length <= 5000` `edges[i].length == 2` `0 <= ai, bi < n` `ai != bi` there are no self-loops or repeated edges.",
262,Trips and Users,SQL Schema,Hard,https://leetcode.com/problems/trips-and-users,Uber,,486,,sql schema,,,
263,Ugly Number,"Given an integer `n`, return `true` if `n` is an ugly number.

Ugly number is a positive number whose prime factors only include `2`, `3`, and/or `5`.


Example 1:
Input: n = 6
Output: true
Explanation: 6 = 2 × 3

Example 2:
Input: n = 8
Output: true
Explanation: 8 = 2 × 2 × 2

Example 3:
Input: n = 14
Output: false
Explanation: 14 is not ugly since it includes another prime factor 7.


Example 4:
Input: n = 1
Output: true
Explanation: 1 is typically treated as an ugly number.


Constraints:
`-231 <= n <= 231 - 1`",Easy,https://leetcode.com/problems/ugly-number,Adobe,Math,733,"[Happy Number, /problems/happy-number/, Easy], [Count Primes, /problems/count-primes/, Easy], [Ugly Number II, /problems/ugly-number-ii/, Medium]","given an integer `n`, return `true` if `n` is an ugly number. ugly number is a positive number whose prime factors only include `2`, `3`, and/or `5`.",input: n = 6 output: true explanation: 6 = 2 × 3 example 2: input: n = 8 output: true explanation: 8 = 2 × 2 × 2 example 3: input: n = 14 output: false explanation: 14 is not ugly since it includes another prime factor 7. example 4: input: n = 1 output: true explanation: 1 is typically treated as an ugly number.,`-231 <= n <= 231 - 1`,
264,Ugly Number II,"Given an integer `n`, return the `nth` ugly number.

Ugly number is a positive number whose prime factors only include `2`, `3`, and/or `5`.


Example 1:
Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.


Example 2:
Input: n = 1
Output: 1
Explanation: 1 is typically treated as an ugly number.


Constraints:
`1 <= n <= 1690`",Medium,https://leetcode.com/problems/ugly-number-ii,"Amazon,Adobe","Math,Dynamic Programming,Heap",2532,"[Merge k Sorted Lists, /problems/merge-k-sorted-lists/, Hard], [Count Primes, /problems/count-primes/, Easy], [Ugly Number, /problems/ugly-number/, Easy], [Perfect Squares, /problems/perfect-squares/, Medium], [Super Ugly Number, /problems/super-ugly-number/, Medium], [Ugly Number III, /problems/ugly-number-iii/, Medium]","given an integer `n`, return the `nth` ugly number. ugly number is a positive number whose prime factors only include `2`, `3`, and/or `5`.","input: n = 10 output: 12 explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers. example 2: input: n = 1 output: 1 explanation: 1 is typically treated as an ugly number.",`1 <= n <= 1690`,
265,Paint House II,"There are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an `n x k` cost matrix costs.

For example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on...

Return the minimum cost to paint all houses.


Example 1:
Input: costs = [[1,5,3],[2,9,4]]
Output: 5
Explanation:
Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; 
Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.


Example 2:
Input: costs = [[1,3],[2,4]]
Output: 5

Constraints:
`costs.length == n`
`costs[i].length == k`
`1 <= n <= 100`
`1 <= k <= 20`
`1 <= costs[i][j] <= 20`
Follow up: Could you solve it in `O(nk)` runtime?",Hard,https://leetcode.com/problems/paint-house-ii,"LinkedIn,Walmart Labs",Dynamic Programming,628,"[Product of Array Except Self, /problems/product-of-array-except-self/, Medium], [Sliding Window Maximum, /problems/sliding-window-maximum/, Hard], [Paint House, /problems/paint-house/, Medium], [Paint Fence, /problems/paint-fence/, Medium]","there are a row of `n` houses, each house can be painted with one of the `k` colors. the cost of painting each house with a certain color is different. you have to paint all the houses such that no two adjacent houses have the same color. the cost of painting each house with a certain color is represented by an `n x k` cost matrix costs. for example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on... return the minimum cost to paint all houses.","input: costs = [[1,5,3],[2,9,4]] output: 5 explanation: paint house 0 into color 0, paint house 1 into color 2. minimum cost: 1 + 4 = 5; or paint house 0 into color 2, paint house 1 into color 0. minimum cost: 3 + 2 = 5. example 2: input: costs = [[1,3],[2,4]] output: 5",`costs.length == n` `costs[i].length == k` `1 <= n <= 10^0` `1 <= k <= 20` `1 <= costs[i][j] <= 20`,could you solve it in `o(nk)` runtime?
266,Palindrome Permutation,"Given a string `s`, return `true` if a permutation of the string could form a palindrome.


Example 1:
Input: s = ""code""
Output: false

Example 2:
Input: s = ""aab""
Output: true

Example 3:
Input: s = ""carerac""
Output: true

Constraints:
`1 <= s.length <= 5000`
`s` consists of only lowercase English letters.",Easy,https://leetcode.com/problems/palindrome-permutation,"Facebook,Microsoft",Hash Table,580,"[Longest Palindromic Substring, /problems/longest-palindromic-substring/, Medium], [Valid Anagram, /problems/valid-anagram/, Easy], [Palindrome Permutation II, /problems/palindrome-permutation-ii/, Medium], [Longest Palindrome, /problems/longest-palindrome/, Easy]","given a string `s`, return `true` if a permutation of the string could form a palindrome.","input: s = ""code"" output: false example 2: input: s = ""aab"" output: true example 3: input: s = ""carerac"" output: true",`1 <= s.length <= 5000` `s` consists of only lowercase english letters.,
267,Palindrome Permutation II,"Given a string s, return all the palindromic permutations (without duplicates) of it.

You may return the answer in any order. If `s` has no palindromic permutation, return an empty list.


Example 1:
Input: s = ""aabb""
Output: [""abba"",""baab""]

Example 2:
Input: s = ""abc""
Output: []

Constraints:
`1 <= s.length <= 16`
`s` consists of only lowercase English letters.",Medium,https://leetcode.com/problems/palindrome-permutation-ii,Microsoft,Backtracking,554,"[Next Permutation, /problems/next-permutation/, Medium], [Permutations II, /problems/permutations-ii/, Medium], [Palindrome Permutation, /problems/palindrome-permutation/, Easy]","given a string s, return all the palindromic permutations (without duplicates) of it. you may return the answer in any order. if `s` has no palindromic permutation, return an empty list.","input: s = ""aabb"" output: [""abba"",""baab""] example 2: input: s = ""abc"" output: []",`1 <= s.length <= 16` `s` consists of only lowercase english letters.,
268,Missing Number,"Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.

Follow up: Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?

Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.


Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.


Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.


Example 4:
Input: nums = [0]
Output: 1
Explanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.


Constraints:
`n == nums.length`
`1 <= n <= 104`
`0 <= nums[i] <= n`
All the numbers of `nums` are unique.",Easy,https://leetcode.com/problems/missing-number,"Capital One,Amazon,Facebook,Apple,Microsoft,Oracle,Goldman Sachs,Cisco,Arista Networks","Array,Math,Bit Manipulation",2889,"[First Missing Positive, /problems/first-missing-positive/, Hard], [Single Number, /problems/single-number/, Easy], [Find the Duplicate Number, /problems/find-the-duplicate-number/, Medium], [Couples Holding Hands, /problems/couples-holding-hands/, Hard]","given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.","input: nums = [3,0,1] output: 2 explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums. example 2: input: nums = [0,1] output: 2 explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums. example 3: input: nums = [9,6,4,2,3,5,7,0,1] output: 8 explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums. example 4: input: nums = [0] output: 1 explanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.",`n == nums.length` `1 <= n <= 10^4` `0 <= nums[i] <= n` all the numbers of `nums` are unique.,"could you implement a solution using only `o(1)` extra space complexity and `o(n)` runtime complexity? example 1: input: nums = [3,0,1] output: 2 explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums. example 2: input: nums = [0,1] output: 2 explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums. example 3: input: nums = [9,6,4,2,3,5,7,0,1] output: 8 explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums. example 4: input: nums = [0] output: 1 explanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums. constraints: `n == nums.length` `1 <= n <= 104` `0 <= nums[i] <= n` all the numbers of `nums` are unique."
269,Alien Dictionary,"There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.

You are given a list of strings `words` from the alien language's dictionary, where the strings in `words` are sorted lexicographically by the rules of this new language.

Return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. If there is no solution, return `""""`. If there are multiple solutions, return any of them.

A string `s` is lexicographically smaller than a string `t` if at the first letter where they differ, the letter in `s` comes before the letter in `t` in the alien language. If the first `min(s.length, t.length)` letters are the same, then `s` is smaller if and only if `s.length < t.length`.


Example 1:
Input: words = [""wrt"",""wrf"",""er"",""ett"",""rftt""]
Output: ""wertf""

Example 2:
Input: words = [""z"",""x""]
Output: ""zx""

Example 3:
Input: words = [""z"",""x"",""z""]
Output: """"
Explanation: The order is invalid, so return `""""`.


Constraints:
`1 <= words.length <= 100`
`1 <= words[i].length <= 100`
`words[i]` consists of only lowercase English letters.",Hard,https://leetcode.com/problems/alien-dictionary,"Facebook,Amazon,Airbnb,Pinterest,Google,Microsoft,ByteDance","Graph,Topological Sort",2445,"[Course Schedule II, /problems/course-schedule-ii/, Medium]","there is a new alien language that uses the english alphabet. however, the order among the letters is unknown to you. you are given a list of strings `words` from the alien language's dictionary, where the strings in `words` are sorted lexicographically by the rules of this new language. return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. if there is no solution, return `""""`. if there are multiple solutions, return any of them. a string `s` is lexicographically smaller than a string `t` if at the first letter where they differ, the letter in `s` comes before the letter in `t` in the alien language. if the first `min(s.length, t.length)` letters are the same, then `s` is smaller if and only if `s.length < t.length`.","input: words = [""wrt"",""wrf"",""er"",""ett"",""rftt""] output: ""wertf"" example 2: input: words = [""z"",""x""] output: ""zx"" example 3: input: words = [""z"",""x"",""z""] output: """" explanation: the order is invalid, so return `""""`.",`1 <= words.length <= 10^0` `1 <= words[i].length <= 10^0` `words[i]` consists of only lowercase english letters.,
270,Closest Binary Search Tree Value,"Given the `root` of a binary search tree and a `target` value, return the value in the BST that is closest to the `target`.


Example 1:
Input: root = [4,2,5,1,3], target = 3.714286
Output: 4

Example 2:
Input: root = [1], target = 4.428571
Output: 1

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`0 <= Node.val <= 109`
`-109 <= target <= 109`",Easy,https://leetcode.com/problems/closest-binary-search-tree-value,"Facebook,Bloomberg,Amazon","Binary Search,Tree",1022,"[Count Complete Tree Nodes, /problems/count-complete-tree-nodes/, Medium], [Closest Binary Search Tree Value II, /problems/closest-binary-search-tree-value-ii/, Hard], [Search in a Binary Search Tree, /problems/search-in-a-binary-search-tree/, Easy]","given the `root` of a binary search tree and a `target` value, return the value in the bst that is closest to the `target`.","input: root = [4,2,5,1,3], target = 3.714286 output: 4 example 2: input: root = [1], target = 4.428571 output: 1","the number of nodes in the tree is in the range `[1, 10^4]`. `0 <= node.val <= 10^9` `-10^9 <= target <= 10^9`",
271,Encode and Decode Strings,"Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.

Machine 1 (sender) has the function:
string encode(vector<string> strs) {
  // ... your code
  return encoded_string;
}
Machine 2 (receiver) has the function:
vector<string> decode(string s) {
  //... your code
  return strs;
}
So Machine 1 does:
string encoded_string = encode(strs);
and Machine 2 does:
vector<string> strs2 = decode(encoded_string);
`strs2` in Machine 2 should be the same as `strs` in Machine 1.

Implement the `encode` and `decode` methods.


Example 1:
Input: dummy_input = [""Hello"",""World""]
Output: [""Hello"",""World""]
Explanation:
Machine 1:
Codec encoder = new Codec();
String msg = encoder.encode(strs);
Machine 1 ---msg---> Machine 2
Machine 2:
Codec decoder = new Codec();
String[] strs = decoder.decode(msg);

Example 2:
Input: dummy_input = [""""]
Output: [""""]

Constraints:
`1 <= strs.length <= 200`
`0 <= strs[i].length <= 200`
`strs[i]` contains any possible characters out of `256` valid ASCII characters.

Follow up:
Could you write a generalized algorithm to work on any possible characters?
Could you solve the problem without using any serialize methods (such as `eval`)?",Medium,https://leetcode.com/problems/encode-and-decode-strings,Microsoft,String,567,"[Count and Say, /problems/count-and-say/, Medium], [Serialize and Deserialize Binary Tree, /problems/serialize-and-deserialize-binary-tree/, Hard], [String Compression, /problems/string-compression/, Medium], [Count Binary Substrings, /problems/count-binary-substrings/, Easy]",design an algorithm to encode a list of strings to a string. the encoded string is then sent over the network and is decoded back to the original list of strings. machine 1 (sender) has the function: string encode(vector<string> strs) { // ... your code return encoded_string; } machine 2 (receiver) has the function: vector<string> decode(string s) { //... your code return strs; } so machine 1 does: string encoded_string = encode(strs); and machine 2 does: vector<string> strs2 = decode(encoded_string); `strs2` in machine 2 should be the same as `strs` in machine 1. implement the `encode` and `decode` methods.,"input: dummy_input = [""hello"",""world""] output: [""hello"",""world""] explanation: machine 1: codec encoder = new codec(); string msg = encoder.encode(strs); machine 1 ---msg---> machine 2 machine 2: codec decoder = new codec(); string[] strs = decoder.decode(msg); example 2: input: dummy_input = [""""] output: [""""]",`1 <= strs.length <= 200` `0 <= strs[i].length <= 200` `strs[i]` contains any possible characters out of `256` valid ascii characters.,could you write a generalized algorithm to work on any possible characters? could you solve the problem without using any serialize methods (such as `eval`)?
272,Closest Binary Search Tree Value II,"Given the `root` of a binary search tree, a `target` value, and an integer `k`, return the `k` values in the BST that are closest to the `target`. You may return the answer in any order.

You are guaranteed to have only one unique set of `k` values in the BST that are closest to the `target`.


Example 1:
Input: root = [4,2,5,1,3], target = 3.714286, k = 2
Output: [4,3]

Example 2:
Input: root = [1], target = 0.000000, k = 1
Output: [1]

Constraints:
The number of nodes in the tree is `n`.

`1 <= k <= n <= 104`.

`0 <= Node.val <= 109`
`-109 <= target <= 109`
Follow up: Assume that the BST is balanced. Could you solve it in less than `O(n)` runtime (where `n = total nodes`)?",Hard,https://leetcode.com/problems/closest-binary-search-tree-value-ii,"LinkedIn,Oracle","Stack,Tree",759,"[Binary Tree Inorder Traversal, /problems/binary-tree-inorder-traversal/, Medium], [Closest Binary Search Tree Value, /problems/closest-binary-search-tree-value/, Easy]","given the `root` of a binary search tree, a `target` value, and an integer `k`, return the `k` values in the bst that are closest to the `target`. you may return the answer in any order. you are guaranteed to have only one unique set of `k` values in the bst that are closest to the `target`.","input: root = [4,2,5,1,3], target = 3.714286, k = 2 output: [4,3] example 2: input: root = [1], target = 0.000000, k = 1 output: [1]",the number of nodes in the tree is `n`. `1 <= k <= n <= 10^4`. `0 <= node.val <= 10^9` `-10^9 <= target <= 10^9`,assume that the bst is balanced. could you solve it in less than `o(n)` runtime (where `n = total nodes`)?
273,Integer to English Words,"Convert a non-negative integer `num` to its English words representation.


Example 1:
Input: num = 123
Output: ""One Hundred Twenty Three""

Example 2:
Input: num = 12345
Output: ""Twelve Thousand Three Hundred Forty Five""

Example 3:
Input: num = 1234567
Output: ""One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven""

Example 4:
Input: num = 1234567891
Output: ""One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One""

Constraints:
`0 <= num <= 231 - 1`",Hard,https://leetcode.com/problems/integer-to-english-words,"Facebook,Amazon,Microsoft,Palantir Technologies,Square,Adobe,Oracle","Math,String",1438,"[Integer to Roman, /problems/integer-to-roman/, Medium]",convert a non-negative integer `num` to its english words representation.,"input: num = 123 output: ""one hundred twenty three"" example 2: input: num = 12345 output: ""twelve thousand three hundred forty five"" example 3: input: num = 1234567 output: ""one million two hundred thirty four thousand five hundred sixty seven"" example 4: input: num = 1234567891 output: ""one billion two hundred thirty four million five hundred sixty seven thousand eight hundred ninety one""",`0 <= num <= 231 - 1`,
274,H-Index,"Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return compute the researcher's `h`-index.

According to the definition of h-index on Wikipedia: A scientist has an index `h` if `h` of their `n` papers have at least `h` citations each, and the other `n − h` papers have no more than `h` citations each.

If there are several possible values for `h`, the maximum one is taken as the `h`-index.


Example 1:
Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.

Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.


Example 2:
Input: citations = [1,3,1]
Output: 1

Constraints:
`n == citations.length`
`1 <= n <= 5000`
`0 <= citations[i] <= 1000`",Medium,https://leetcode.com/problems/h-index,"Nvidia,Goldman Sachs","Hash Table,Sort",887,"[H-Index II, /problems/h-index-ii/, Medium]","given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return compute the researcher's `h`-index. according to the definition of h-index on wikipedia: a scientist has an index `h` if `h` of their `n` papers have at least `h` citations each, and the other `n − h` papers have no more than `h` citations each. if there are several possible values for `h`, the maximum one is taken as the `h`-index.","input: citations = [3,0,6,1,5] output: 3 explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively. since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. example 2: input: citations = [1,3,1] output: 1",`n == citations.length` `1 <= n <= 5000` `0 <= citations[i] <= 1000`,
275,H-Index II,"Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in an ascending order, return compute the researcher's `h`-index.

According to the definition of h-index on Wikipedia: A scientist has an index `h` if `h` of their `n` papers have at least `h` citations each, and the other `n − h` papers have no more than `h` citations each.

If there are several possible values for `h`, the maximum one is taken as the `h`-index.


Example 1:
Input: citations = [0,1,3,5,6]
Output: 3
Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.

Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.


Example 2:
Input: citations = [1,2,100]
Output: 2

Constraints:
`n == citations.length`
`1 <= n <= 105`
`0 <= citations[i] <= 1000`
`citations` is sorted in ascending order.

Follow up: Could you solve it in logarithmic time complexity?",Medium,https://leetcode.com/problems/h-index-ii,Goldman Sachs,Binary Search,541,"[H-Index, /problems/h-index/, Medium]","given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in an ascending order, return compute the researcher's `h`-index. according to the definition of h-index on wikipedia: a scientist has an index `h` if `h` of their `n` papers have at least `h` citations each, and the other `n − h` papers have no more than `h` citations each. if there are several possible values for `h`, the maximum one is taken as the `h`-index.","input: citations = [0,1,3,5,6] output: 3 explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively. since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3. example 2: input: citations = [1,2,100] output: 2",`n == citations.length` `1 <= n <= 10^5` `0 <= citations[i] <= 1000` `citations` is sorted in ascending order.,could you solve it in logarithmic time complexity?
276,Paint Fence,"You are painting a fence of `n` posts with `k` different colors. You must paint the posts following these rules:
Every post must be painted exactly one color.

At most one pair of adjacent fence posts can have the same color.

Given the two integers `n` and `k`, return the number of ways you can paint the fence.


Example 1:
Input: n = 3, k = 2
Output: 6
Explanation: All the possibilities are shown.

Note that painting all the posts red or all the posts green is invalid because there can only be at most one pair of adjacent posts that are the same color.


Example 2:
Input: n = 1, k = 1
Output: 1

Example 3:
Input: n = 7, k = 2
Output: 42

Constraints:
`1 <= n <= 50`
`1 <= k <= 105`
The answer is guaranteed to be in the range `[0, 231 - 1]` for the given `n` and `k`.",Medium,https://leetcode.com/problems/paint-fence,"Google,JPMorgan",Dynamic Programming,906,"[House Robber, /problems/house-robber/, Medium], [House Robber II, /problems/house-robber-ii/, Medium], [Paint House, /problems/paint-house/, Medium], [Paint House II, /problems/paint-house-ii/, Hard]","you are painting a fence of `n` posts with `k` different colors. you must paint the posts following these rules: every post must be painted exactly one color. at most one pair of adjacent fence posts can have the same color. given the two integers `n` and `k`, return the number of ways you can paint the fence.","input: n = 3, k = 2 output: 6 explanation: all the possibilities are shown. note that painting all the posts red or all the posts green is invalid because there can only be at most one pair of adjacent posts that are the same color. example 2: input: n = 1, k = 1 output: 1 example 3: input: n = 7, k = 2 output: 42","`1 <= n <= 50` `1 <= k <= 10^5` the answer is guaranteed to be in the range `[0, 231 - 1]` for the given `n` and `k`.",
277,Find the Celebrity,"Suppose you are at a party with `n` people (labeled from `0` to `n - 1`), and among them, there may exist one celebrity. The definition of a celebrity is that all the other `n - 1` people know him/her, but he/she does not know any of them.

Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: ""Hi, A. Do you know B?"" to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).

You are given a helper function `bool knows(a, b)` which tells you whether A knows B. Implement a function `int findCelebrity(n)`. There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return `-1`.


Example 1:
Input: graph = [[1,1,0],[0,1,0],[1,1,1]]
Output: 1
Explanation: There are three persons labeled with 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.


Example 2:
Input: graph = [[1,0,1],[1,1,0],[0,1,1]]
Output: -1
Explanation: There is no celebrity.


Constraints:
`n == graph.length`
`n == graph[i].length`
`2 <= n <= 100`
`graph[i][j]` is `0` or `1`.

`graph[i][i] == 1`
Follow up: If the maximum number of allowed calls to the API `knows` is `3 * n`, could you find a solution without exceeding the maximum number of calls?",Medium,https://leetcode.com/problems/find-the-celebrity,"Microsoft,Amazon,Facebook,LinkedIn,Apple,Snapchat",Array,1557,"[Find the Town Judge, /problems/find-the-town-judge/, Easy]","suppose you are at a party with `n` people (labeled from `0` to `n - 1`), and among them, there may exist one celebrity. the definition of a celebrity is that all the other `n - 1` people know him/her, but he/she does not know any of them. now you want to find out who the celebrity is or verify that there is not one. the only thing you are allowed to do is to ask questions like: ""hi, a. do you know b?"" to get information about whether a knows b. you need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense). you are given a helper function `bool knows(a, b)` which tells you whether a knows b. implement a function `int findcelebrity(n)`. there will be exactly one celebrity if he/she is in the party. return the celebrity's label if there is a celebrity in the party. if there is no celebrity, return `-1`.","input: graph = [[1,1,0],[0,1,0],[1,1,1]] output: 1 explanation: there are three persons labeled with 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. the celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody. example 2: input: graph = [[1,0,1],[1,1,0],[0,1,1]] output: -1 explanation: there is no celebrity.",`n == graph.length` `n == graph[i].length` `2 <= n <= 10^0` `graph[i][j]` is `0` or `1`. `graph[i][i] == 1`,"if the maximum number of allowed calls to the api `knows` is `3 * n`, could you find a solution without exceeding the maximum number of calls?"
278,First Bad Version,"You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.


Example 1:
Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.


Example 2:
Input: n = 1, bad = 1
Output: 1

Constraints:
`1 <= bad <= n <= 231 - 1`",Easy,https://leetcode.com/problems/first-bad-version,Facebook,Binary Search,2109,"[Find First and Last Position of Element in Sorted Array, /problems/find-first-and-last-position-of-element-in-sorted-array/, Medium], [Search Insert Position, /problems/search-insert-position/, Easy], [Guess Number Higher or Lower, /problems/guess-number-higher-or-lower/, Easy]","you are a product manager and currently leading a team to develop a new product. unfortunately, the latest version of your product fails the quality check. since each version is developed based on the previous version, all the versions after a bad version are also bad. suppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad. you are given an api `bool isbadversion(version)` which returns whether `version` is bad. implement a function to find the first bad version. you should minimize the number of calls to the api.","input: n = 5, bad = 4 output: 4 explanation: call isbadversion(3) -> false call isbadversion(5) -> true call isbadversion(4) -> true then 4 is the first bad version. example 2: input: n = 1, bad = 1 output: 1",`1 <= bad <= n <= 231 - 1`,
279,Perfect Squares,"Given an integer `n`, return the least number of perfect square numbers that sum to `n`.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, `1`, `4`, `9`, and `16` are perfect squares while `3` and `11` are not.


Example 1:
Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.


Example 2:
Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.


Constraints:
`1 <= n <= 104`",Medium,https://leetcode.com/problems/perfect-squares,"Amazon,Google,Adobe","Math,Dynamic Programming,Breadth-first Search",4208,"[Count Primes, /problems/count-primes/, Easy], [Ugly Number II, /problems/ugly-number-ii/, Medium]","given an integer `n`, return the least number of perfect square numbers that sum to `n`. a perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. for example, `1`, `4`, `9`, and `16` are perfect squares while `3` and `11` are not.",input: n = 12 output: 3 explanation: 12 = 4 + 4 + 4. example 2: input: n = 13 output: 2 explanation: 13 = 4 + 9.,`1 <= n <= 10^4`,
280,Wiggle Sort,"Given an integer array `nums`, reorder it such that `nums[0] <= nums[1] >= nums[2] <= nums[3]...`.

You may assume the input array always has a valid answer.


Example 1:
Input: nums = [3,5,2,1,6,4]
Output: [3,5,1,6,2,4]
Explanation: [1,6,2,5,3,4] is also accepted.


Example 2:
Input: nums = [6,6,5,6,3,8]
Output: [6,6,5,6,3,8]

Constraints:
`1 <= nums.length <= 5 * 104`
`0 <= nums[i] <= 104`
It is guaranteed that there will be an answer for the given input `nums`.

Follow up: Could you do it without sorting the array?",Medium,https://leetcode.com/problems/wiggle-sort,Facebook,"Array,Sort",731,"[Sort Colors, /problems/sort-colors/, Medium], [Wiggle Sort II, /problems/wiggle-sort-ii/, Medium]","given an integer array `nums`, reorder it such that `nums[0] <= nums[1] >= nums[2] <= nums[3]...`. you may assume the input array always has a valid answer.","input: nums = [3,5,2,1,6,4] output: [3,5,1,6,2,4] explanation: [1,6,2,5,3,4] is also accepted. example 2: input: nums = [6,6,5,6,3,8] output: [6,6,5,6,3,8]",`1 <= nums.length <= 5 * 10^4` `0 <= nums[i] <= 10^4` it is guaranteed that there will be an answer for the given input `nums`.,could you do it without sorting the array?
281,Zigzag Iterator,"Given two vectors of integers `v1` and `v2`, implement an iterator to return their elements alternately.

Implement the `ZigzagIterator` class:
`ZigzagIterator(List<int> v1, List<int> v2)` initializes the object with the two vectors `v1` and `v2`.

`boolean hasNext()` returns `true` if the iterator still has elements, and `false` otherwise.

`int next()` returns the current element of the iterator and moves the iterator to the next element.


Example 1:
Input: v1 = [1,2], v2 = [3,4,5,6]
Output: [1,3,2,4,5,6]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].


Example 2:
Input: v1 = [1], v2 = []
Output: [1]

Example 3:
Input: v1 = [], v2 = [1]
Output: [1]

Constraints:
`0 <= v1.length, v2.length <= 1000`
`1 <= v1.length + v2.length <= 2000`
`-231 <= v1[i], v2[i] <= 231 - 1`
Follow up: What if you are given `k` vectors? How well can your code be extended to such cases?
Clarification for the follow-up question:
The ""Zigzag"" order is not clearly defined and is ambiguous for `k > 2` cases. If ""Zigzag"" does not look right to you, replace ""Zigzag"" with ""Cyclic"".


Example:
Input: v1 = [1,2,3], v2 = [4,5,6,7], v3 = [8,9]
Output: [1,4,8,2,5,9,3,6,7]",Medium,https://leetcode.com/problems/zigzag-iterator,Yandex,Design,448,"[Binary Search Tree Iterator, /problems/binary-search-tree-iterator/, Medium], [Flatten 2D Vector, /problems/flatten-2d-vector/, Medium], [Peeking Iterator, /problems/peeking-iterator/, Medium], [Flatten Nested List Iterator, /problems/flatten-nested-list-iterator/, Medium], [Merge Strings Alternately, /problems/merge-strings-alternately/, Easy]","given two vectors of integers `v1` and `v2`, implement an iterator to return their elements alternately. implement the `zigzagiterator` class: `zigzagiterator(list<int> v1, list<int> v2)` initializes the object with the two vectors `v1` and `v2`. `boolean hasnext()` returns `true` if the iterator still has elements, and `false` otherwise. `int next()` returns the current element of the iterator and moves the iterator to the next element.","input: v1 = [1,2], v2 = [3,4,5,6] output: [1,3,2,4,5,6] explanation: by calling next repeatedly until hasnext returns false, the order of elements returned by next should be: [1,3,2,4,5,6]. example 2: input: v1 = [1], v2 = [] output: [1] example 3: input: v1 = [], v2 = [1] output: [1]","`0 <= v1.length, v2.length <= 1000` `1 <= v1.length + v2.length <= 2000` `-231 <= v1[i], v2[i] <= 231 - 1`","what if you are given `k` vectors? how well can your code be extended to such cases? clarification for the follow-up question: the ""zigzag"" order is not clearly defined and is ambiguous for `k > 2` cases. if ""zigzag"" does not look right to you, replace ""zigzag"" with ""cyclic"". example: input: v1 = [1,2,3], v2 = [4,5,6,7], v3 = [8,9] output: [1,4,8,2,5,9,3,6,7]"
282,Expression Add Operators,"Given a string `num` that contains only digits and an integer `target`, return all possibilities to add the binary operators `'+'`, `'-'`, or `'*'` between the digits of `num` so that the resultant expression evaluates to the `target` value.


Example 1:
Input: num = ""123"", target = 6
Output: [""1*2*3"",""1+2+3""]

Example 2:
Input: num = ""232"", target = 8
Output: [""2*3+2"",""2+3*2""]

Example 3:
Input: num = ""105"", target = 5
Output: [""1*0+5"",""10-5""]

Example 4:
Input: num = ""00"", target = 0
Output: [""0*0"",""0+0"",""0-0""]

Example 5:
Input: num = ""3456237490"", target = 9191
Output: []

Constraints:
`1 <= num.length <= 10`
`num` consists of only digits.

`-231 <= target <= 231 - 1`",Hard,https://leetcode.com/problems/expression-add-operators,"Facebook,Citadel",Divide and Conquer,1622,"[Evaluate Reverse Polish Notation, /problems/evaluate-reverse-polish-notation/, Medium], [Basic Calculator, /problems/basic-calculator/, Hard], [Basic Calculator II, /problems/basic-calculator-ii/, Medium], [Different Ways to Add Parentheses, /problems/different-ways-to-add-parentheses/, Medium], [Target Sum, /problems/target-sum/, Medium]","given a string `num` that contains only digits and an integer `target`, return all possibilities to add the binary operators `'+'`, `'-'`, or `'*'` between the digits of `num` so that the resultant expression evaluates to the `target` value.","input: num = ""123"", target = 6 output: [""1*2*3"",""1+2+3""] example 2: input: num = ""232"", target = 8 output: [""2*3+2"",""2+3*2""] example 3: input: num = ""105"", target = 5 output: [""1*0+5"",""10-5""] example 4: input: num = ""00"", target = 0 output: [""0*0"",""0+0"",""0-0""] example 5: input: num = ""3456237490"", target = 9191 output: []",`1 <= num.length <= 10` `num` consists of only digits. `-231 <= target <= 231 - 1`,
283,Move Zeroes,"Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.


Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
Input: nums = [0]
Output: [0]

Constraints:
`1 <= nums.length <= 104`
`-231 <= nums[i] <= 231 - 1`
Follow up: Could you minimize the total number of operations done?",Easy,https://leetcode.com/problems/move-zeroes,"Facebook,Bloomberg,Microsoft,Adobe,Capital One,Apple,Amazon,Google,eBay,SAP,Uber,Paypal,Cisco,Qualcomm,Yandex","Array,Two Pointers",5320,"[Remove Element, /problems/remove-element/, Easy]","given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements. note that you must do this in-place without making a copy of the array.","input: nums = [0,1,0,3,12] output: [1,3,12,0,0] example 2: input: nums = [0] output: [0]",`1 <= nums.length <= 10^4` `-231 <= nums[i] <= 231 - 1`,could you minimize the total number of operations done?
284,Peeking Iterator,"Design an iterator that supports the `peek` operation on a list in addition to the `hasNext` and the `next` operations.

Implement the `PeekingIterator` class:
`PeekingIterator(int[] nums)` Initializes the object with the given integer array `nums`.

`int next()` Returns the next element in the array and moves the pointer to the next element.

`bool hasNext()` Returns `true` if there are still elements in the array.

`int peek()` Returns the next element in the array without moving the pointer.


Example 1:
Input
[""PeekingIterator"", ""next"", ""peek"", ""next"", ""next"", ""hasNext""]
[[[1, 2, 3]], [], [], [], [], []]
Output
[null, 1, 2, 2, 3, false]
Explanation
PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]
peekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].

peekingIterator.peek();    // return 2, the pointer does not move [1,2,3].

peekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]
peekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]
peekingIterator.hasNext(); // return False

Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 1000`
All the calls to `next` and `peek` are valid.

At most `1000` calls will be made to `next`, `hasNext`, and `peek`.

Follow up: How would you extend your design to be generic and work with all types, not just integer?",Medium,https://leetcode.com/problems/peeking-iterator,"Apple,Google,Amazon",Design,766,"[Binary Search Tree Iterator, /problems/binary-search-tree-iterator/, Medium], [Flatten 2D Vector, /problems/flatten-2d-vector/, Medium], [Zigzag Iterator, /problems/zigzag-iterator/, Medium]",design an iterator that supports the `peek` operation on a list in addition to the `hasnext` and the `next` operations. implement the `peekingiterator` class: `peekingiterator(int[] nums)` initializes the object with the given integer array `nums`. `int next()` returns the next element in the array and moves the pointer to the next element. `bool hasnext()` returns `true` if there are still elements in the array. `int peek()` returns the next element in the array without moving the pointer.,"input [""peekingiterator"", ""next"", ""peek"", ""next"", ""next"", ""hasnext""] [[[1, 2, 3]], [], [], [], [], []] output [null, 1, 2, 2, 3, false] explanation peekingiterator peekingiterator = new peekingiterator([1, 2, 3]); // [1,2,3] peekingiterator.next(); // return 1, the pointer moves to the next element [1,2,3]. peekingiterator.peek(); // return 2, the pointer does not move [1,2,3]. peekingiterator.next(); // return 2, the pointer moves to the next element [1,2,3] peekingiterator.next(); // return 3, the pointer moves to the next element [1,2,3] peekingiterator.hasnext(); // return false","`1 <= nums.length <= 1000` `1 <= nums[i] <= 1000` all the calls to `next` and `peek` are valid. at most `1000` calls will be made to `next`, `hasnext`, and `peek`.","how would you extend your design to be generic and work with all types, not just integer?"
285,Inorder Successor in BST,"Given the `root` of a binary search tree and a node `p` in it, return the in-order successor of that node in the BST. If the given node has no in-order successor in the tree, return `null`.

The successor of a node `p` is the node with the smallest key greater than `p.val`.


Example 1:
Input: root = [2,1,3], p = 1
Output: 2
Explanation: 1's in-order successor node is 2. Note that both p and the return value is of TreeNode type.


Example 2:
Input: root = [5,3,6,2,4,null,null,1], p = 6
Output: null
Explanation: There is no in-order successor of the current node, so the answer is `null`.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-105 <= Node.val <= 105`
All Nodes will have unique values.",Medium,https://leetcode.com/problems/inorder-successor-in-bst,"Amazon,Microsoft",Tree,1493,"[Binary Tree Inorder Traversal, /problems/binary-tree-inorder-traversal/, Medium], [Binary Search Tree Iterator, /problems/binary-search-tree-iterator/, Medium], [Inorder Successor in BST II, /problems/inorder-successor-in-bst-ii/, Medium]","given the `root` of a binary search tree and a node `p` in it, return the in-order successor of that node in the bst. if the given node has no in-order successor in the tree, return `null`. the successor of a node `p` is the node with the smallest key greater than `p.val`.","input: root = [2,1,3], p = 1 output: 2 explanation: 1's in-order successor node is 2. note that both p and the return value is of treenode type. example 2: input: root = [5,3,6,2,4,null,null,1], p = 6 output: null explanation: there is no in-order successor of the current node, so the answer is `null`.","the number of nodes in the tree is in the range `[1, 10^4]`. `-10^5 <= node.val <= 10^5` all nodes will have unique values.",
286,Walls and Gates,"You are given an `m x n` grid `rooms` initialized with these three possible values.

`-1` A wall or an obstacle.

`0` A gate.

`INF` Infinity means an empty room. We use the value `231 - 1 = 2147483647` to represent `INF` as you may assume that the distance to a gate is less than `2147483647`.

Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with `INF`.


Example 1:
Input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]
Output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]

Example 2:
Input: rooms = [[-1]]
Output: [[-1]]

Example 3:
Input: rooms = [[2147483647]]
Output: [[2147483647]]

Example 4:
Input: rooms = [[0]]
Output: [[0]]

Constraints:
`m == rooms.length`
`n == rooms[i].length`
`1 <= m, n <= 250`
`rooms[i][j]` is `-1`, `0`, or `231 - 1`.",Medium,https://leetcode.com/problems/walls-and-gates,"ByteDance,Facebook,Amazon,Microsoft",Breadth-first Search,1586,"[Surrounded Regions, /problems/surrounded-regions/, Medium], [Number of Islands, /problems/number-of-islands/, Medium], [Shortest Distance from All Buildings, /problems/shortest-distance-from-all-buildings/, Hard], [Robot Room Cleaner, /problems/robot-room-cleaner/, Hard], [Rotting Oranges, /problems/rotting-oranges/, Medium]","you are given an `m x n` grid `rooms` initialized with these three possible values. `-1` a wall or an obstacle. `0` a gate. `inf` infinity means an empty room. we use the value `231 - 1 = 2147483647` to represent `inf` as you may assume that the distance to a gate is less than `2147483647`. fill each empty room with the distance to its nearest gate. if it is impossible to reach a gate, it should be filled with `inf`.","input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]] output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]] example 2: input: rooms = [[-1]] output: [[-1]] example 3: input: rooms = [[2147483647]] output: [[2147483647]] example 4: input: rooms = [[0]] output: [[0]]","`m == rooms.length` `n == rooms[i].length` `1 <= m, n <= 250` `rooms[i][j]` is `-1`, `0`, or `231 - 1`.",
287,Find the Duplicate Number,"Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.

There is only one repeated number in `nums`, return this repeated number.


Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

Example 3:
Input: nums = [1,1]
Output: 1

Example 4:
Input: nums = [1,1,2]
Output: 1

Constraints:
`2 <= n <= 3 * 104`
`nums.length == n + 1`
`1 <= nums[i] <= n`
All the integers in `nums` appear only once except for precisely one integer which appears two or more times.

Follow up:
How can we prove that at least one duplicate number must exist in `nums`?
Can you solve the problem without modifying the array `nums`?
Can you solve the problem using only constant, `O(1)` extra space?
Can you solve the problem with runtime complexity less than `O(n2)`?",Medium,https://leetcode.com/problems/find-the-duplicate-number,"Microsoft,Amazon,Apple,Google,Bloomberg,Paypal,Goldman Sachs","Array,Two Pointers,Binary Search",7163,"[First Missing Positive, /problems/first-missing-positive/, Hard], [Single Number, /problems/single-number/, Easy], [Linked List Cycle II, /problems/linked-list-cycle-ii/, Medium], [Missing Number, /problems/missing-number/, Easy], [Set Mismatch, /problems/set-mismatch/, Easy]","given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive. there is only one repeated number in `nums`, return this repeated number.","input: nums = [1,3,4,2,2] output: 2 example 2: input: nums = [3,1,3,4,2] output: 3 example 3: input: nums = [1,1] output: 1 example 4: input: nums = [1,1,2] output: 1",`2 <= n <= 3 * 10^4` `nums.length == n + 1` `1 <= nums[i] <= n` all the integers in `nums` appear only once except for precisely one integer which appears two or more times.,"how can we prove that at least one duplicate number must exist in `nums`? can you solve the problem without modifying the array `nums`? can you solve the problem using only constant, `o(1)` extra space? can you solve the problem with runtime complexity less than `o(n2)`?"
288,Unique Word Abbreviation,"The abbreviation of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. If a word has only two characters, then it is an abbreviation of itself.

For example:
`dog --> d1g` because there is one letter between the first letter `'d'` and the last letter `'g'`.

`internationalization --> i18n` because there are 18 letters between the first letter `'i'` and the last letter `'n'`.

`it --> it` because any word with only two characters is an abbreviation of itself.

Implement the `ValidWordAbbr` class:
`ValidWordAbbr(String[] dictionary)` Initializes the object with a `dictionary` of words.

`boolean isUnique(string word)` Returns `true` if either of the following conditions are met (otherwise returns `false`):
	
There is no word in `dictionary` whose abbreviation is equal to `word`'s abbreviation.

For any word in `dictionary` whose abbreviation is equal to `word`'s abbreviation, that word and `word` are the same.


Example 1:
Input
[""ValidWordAbbr"", ""isUnique"", ""isUnique"", ""isUnique"", ""isUnique""]
[[[""deer"", ""door"", ""cake"", ""card""]], [""dear""], [""cart""], [""cane""], [""make""]]
Output
[null, false, true, false, true]
Explanation
ValidWordAbbr validWordAbbr = new ValidWordAbbr([""deer"", ""door"", ""cake"", ""card""]);
validWordAbbr.isUnique(""dear""); // return false, dictionary word ""deer"" and word ""dear"" have the same abbreviation
                                // ""d2r"" but are not the same.

validWordAbbr.isUnique(""cart""); // return true, no words in the dictionary have the abbreviation ""c2t"".

validWordAbbr.isUnique(""cane""); // return false, dictionary word ""cake"" and word ""cane"" have the same abbreviation 
                                // ""c2e"" but are not the same.

validWordAbbr.isUnique(""make""); // return true, no words in the dictionary have the abbreviation ""m2e"".

validWordAbbr.isUnique(""cake""); // return true, because ""cake"" is already in the dictionary and no other word in the dictionary has ""c2e"" abbreviation.


Constraints:
`1 <= dictionary.length <= 3 * 104`
`1 <= dictionary[i].length <= 20`
`dictionary[i]` consists of lowercase English letters.

`1 <= word.length <= 20`
`word` consists of lowercase English letters.

At most `5000` calls will be made to `isUnique`.",Medium,https://leetcode.com/problems/unique-word-abbreviation,Facebook,"Hash Table,Design",136,"[Two Sum III - Data structure design, /problems/two-sum-iii-data-structure-design/, Easy], [Generalized Abbreviation, /problems/generalized-abbreviation/, Medium]","the abbreviation of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. if a word has only two characters, then it is an abbreviation of itself. for","`dog --> d1g` because there is one letter between the first letter `'d'` and the last letter `'g'`. `internationalization --> i18n` because there are 18 letters between the first letter `'i'` and the last letter `'n'`. `it --> it` because any word with only two characters is an abbreviation of itself. implement the `validwordabbr` class: `validwordabbr(string[] dictionary)` initializes the object with a `dictionary` of words. `boolean isunique(string word)` returns `true` if either of the following conditions are met (otherwise returns `false`): there is no word in `dictionary` whose abbreviation is equal to `word`'s abbreviation. for any word in `dictionary` whose abbreviation is equal to `word`'s abbreviation, that word and `word` are the same. example 1: input [""validwordabbr"", ""isunique"", ""isunique"", ""isunique"", ""isunique""] [[[""deer"", ""door"", ""cake"", ""card""]], [""dear""], [""cart""], [""cane""], [""make""]] output [null, false, true, false, true] explanation validwordabbr validwordabbr = new validwordabbr([""deer"", ""door"", ""cake"", ""card""]); validwordabbr.isunique(""dear""); // return false, dictionary word ""deer"" and word ""dear"" have the same abbreviation // ""d2r"" but are not the same. validwordabbr.isunique(""cart""); // return true, no words in the dictionary have the abbreviation ""c2t"". validwordabbr.isunique(""cane""); // return false, dictionary word ""cake"" and word ""cane"" have the same abbreviation // ""c2e"" but are not the same. validwordabbr.isunique(""make""); // return true, no words in the dictionary have the abbreviation ""m2e"". validwordabbr.isunique(""cake""); // return true, because ""cake"" is already in the dictionary and no other word in the dictionary has ""c2e"" abbreviation.",`1 <= dictionary.length <= 3 * 10^4` `1 <= dictionary[i].length <= 20` `dictionary[i]` consists of lowercase english letters. `1 <= word.length <= 20` `word` consists of lowercase english letters. at most `5000` calls will be made to `isunique`.,
289,Game of Life,"According to Wikipedia's article: ""The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.""
The board is made up of an `m x n` grid of cells, where each cell has an initial state: live (represented by a `1`) or dead (represented by a `0`). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):
Any live cell with fewer than two live neighbors dies as if caused by under-population.

Any live cell with two or three live neighbors lives on to the next generation.

Any live cell with more than three live neighbors dies, as if by over-population.

Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.

The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the `m x n` grid `board`, return the next state.


Example 1:
Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]

Example 2:
Input: board = [[1,1],[1,0]]
Output: [[1,1],[1,1]]

Constraints:
`m == board.length`
`n == board[i].length`
`1 <= m, n <= 25`
`board[i][j]` is `0` or `1`.

Follow up:
Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.

In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?",Medium,https://leetcode.com/problems/game-of-life,"Dropbox,Amazon,Reddit,Opendoor,Microsoft,Square",Array,2582,"[Set Matrix Zeroes, /problems/set-matrix-zeroes/, Medium]","according to wikipedia's article: ""the game of life, also known simply as life, is a cellular automaton devised by the british mathematician john horton conway in 1970."" the board is made up of an `m x n` grid of cells, where each cell has an initial state: live (represented by a `1`) or dead (represented by a `0`). each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above wikipedia article): any live cell with fewer than two live neighbors dies as if caused by under-population. any live cell with two or three live neighbors lives on to the next generation. any live cell with more than three live neighbors dies, as if by over-population. any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction. the next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. given the current state of the `m x n` grid `board`, return the next state.","input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]] output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]] example 2: input: board = [[1,1],[1,0]] output: [[1,1],[1,1]]","`m == board.length` `n == board[i].length` `1 <= m, n <= 25` `board[i][j]` is `0` or `1`.","could you solve it in-place? remember that the board needs to be updated simultaneously: you cannot update some cells first and then use their updated values to update other cells. in this question, we represent the board using a 2d array. in principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). how would you address these problems?"
290,Word Pattern,"Given a `pattern` and a string `s`, find if `s` follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in `pattern` and a non-empty word in `s`.


Example 1:
Input: pattern = ""abba"", s = ""dog cat cat dog""
Output: true

Example 2:
Input: pattern = ""abba"", s = ""dog cat cat fish""
Output: false

Example 3:
Input: pattern = ""aaaa"", s = ""dog cat cat dog""
Output: false

Example 4:
Input: pattern = ""abba"", s = ""dog dog dog dog""
Output: false

Constraints:
`1 <= pattern.length <= 300`
`pattern` contains only lower-case English letters.

`1 <= s.length <= 3000`
`s` contains only lower-case English letters and spaces `' '`.

`s` does not contain any leading or trailing spaces.

All the words in `s` are separated by a single space.",Easy,https://leetcode.com/problems/word-pattern,Apple,Hash Table,1802,"[Isomorphic Strings, /problems/isomorphic-strings/, Easy], [Word Pattern II, /problems/word-pattern-ii/, Medium]","given a `pattern` and a string `s`, find if `s` follows the same pattern. here follow means a full match, such that there is a bijection between a letter in `pattern` and a non-empty word in `s`.","input: pattern = ""abba"", s = ""dog cat cat dog"" output: true example 2: input: pattern = ""abba"", s = ""dog cat cat fish"" output: false example 3: input: pattern = ""aaaa"", s = ""dog cat cat dog"" output: false example 4: input: pattern = ""abba"", s = ""dog dog dog dog"" output: false",`1 <= pattern.length <= 300` `pattern` contains only lower-case english letters. `1 <= s.length <= 3000` `s` contains only lower-case english letters and spaces `' '`. `s` does not contain any leading or trailing spaces. all the words in `s` are separated by a single space.,
291,Word Pattern II,"Given a `pattern` and a string `s`, return `true` if `s` matches the `pattern`.

A string `s` matches a `pattern` if there is some bijective mapping of single characters to strings such that if each character in `pattern` is replaced by the string it maps to, then the resulting string is `s`. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.


Example 1:
Input: pattern = ""abab"", s = ""redblueredblue""
Output: true
Explanation: One possible mapping is as follows:
'a' -> ""red""
'b' -> ""blue""

Example 2:
Input: pattern = ""aaaa"", s = ""asdasdasdasd""
Output: true
Explanation: One possible mapping is as follows:
'a' -> ""asd""

Example 3:
Input: pattern = ""abab"", s = ""asdasdasdasd""
Output: true
Explanation: One possible mapping is as follows:
'a' -> ""a""
'b' -> ""sdasd""
Note that 'a' and 'b' cannot both map to ""asd"" since the mapping is a bijection.


Example 4:
Input: pattern = ""aabb"", s = ""xyzabcxzyabc""
Output: false

Constraints:
`1 <= pattern.length, s.length <= 20`
`pattern` and `s` consist of only lower-case English letters.",Medium,https://leetcode.com/problems/word-pattern-ii,Amazon,Backtracking,524,"[Word Pattern, /problems/word-pattern/, Easy]","given a `pattern` and a string `s`, return `true` if `s` matches the `pattern`. a string `s` matches a `pattern` if there is some bijective mapping of single characters to strings such that if each character in `pattern` is replaced by the string it maps to, then the resulting string is `s`. a bijective mapping means that no two characters map to the same string, and no character maps to two different strings.","input: pattern = ""abab"", s = ""redblueredblue"" output: true explanation: one possible mapping is as follows: 'a' -> ""red"" 'b' -> ""blue"" example 2: input: pattern = ""aaaa"", s = ""asdasdasdasd"" output: true explanation: one possible mapping is as follows: 'a' -> ""asd"" example 3: input: pattern = ""abab"", s = ""asdasdasdasd"" output: true explanation: one possible mapping is as follows: 'a' -> ""a"" 'b' -> ""sdasd"" note that 'a' and 'b' cannot both map to ""asd"" since the mapping is a bijection. example 4: input: pattern = ""aabb"", s = ""xyzabcxzyabc"" output: false","`1 <= pattern.length, s.length <= 20` `pattern` and `s` consist of only lower-case english letters.",
292,Nim Game,"You are playing the following Nim Game with your friend:
Initially, there is a heap of stones on the table.

You and your friend will alternate taking turns, and you go first.

On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.

The one who removes the last stone is the winner.

Given `n`, the number of stones in the heap, return `true` if you can win the game assuming both you and your friend play optimally, otherwise return `false`.


Example 1:
Input: n = 4
Output: false
Explanation: These are the possible outcomes:
1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.

2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.

3. You remove 3 stones. Your friend removes the last stone. Your friend wins.

In all outcomes, your friend wins.


Example 2:
Input: n = 1
Output: true

Example 3:
Input: n = 2
Output: true

Constraints:
`1 <= n <= 231 - 1`",Easy,https://leetcode.com/problems/nim-game,Bloomberg,"Brainteaser,Minimax",763,"[Flip Game II, /problems/flip-game-ii/, Medium]","you are playing the following nim game with your friend: initially, there is a heap of stones on the table. you and your friend will alternate taking turns, and you go first. on each turn, the person whose turn it is will remove 1 to 3 stones from the heap. the one who removes the last stone is the winner. given `n`, the number of stones in the heap, return `true` if you can win the game assuming both you and your friend play optimally, otherwise return `false`.","input: n = 4 output: false explanation: these are the possible outcomes: 1. you remove 1 stone. your friend removes 3 stones, including the last stone. your friend wins. 2. you remove 2 stones. your friend removes 2 stones, including the last stone. your friend wins. 3. you remove 3 stones. your friend removes the last stone. your friend wins. in all outcomes, your friend wins. example 2: input: n = 1 output: true example 3: input: n = 2 output: true",`1 <= n <= 231 - 1`,
293,Flip Game,"You are playing a Flip Game with your friend.

You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip two consecutive `""++""` into `""--""`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.

Return all possible states of the string `currentState` after one valid move. You may return the answer in any order. If there is no valid move, return an empty list `[]`.


Example 1:
Input: currentState = ""++++""
Output: [""--++"",""+--+"",""++--""]

Example 2:
Input: currentState = ""+""
Output: []

Constraints:
`1 <= currentState.length <= 500`
`currentState[i]` is either `'+'` or `'-'`.",Easy,https://leetcode.com/problems/flip-game,Google,String,128,"[Flip Game II, /problems/flip-game-ii/, Medium]","you are playing a flip game with your friend. you are given a string `currentstate` that contains only `'+'` and `'-'`. you and your friend take turns to flip two consecutive `""++""` into `""--""`. the game ends when a person can no longer make a move, and therefore the other person will be the winner. return all possible states of the string `currentstate` after one valid move. you may return the answer in any order. if there is no valid move, return an empty list `[]`.","input: currentstate = ""++++"" output: [""--++"",""+--+"",""++--""] example 2: input: currentstate = ""+"" output: []",`1 <= currentstate.length <= 500` `currentstate[i]` is either `'+'` or `'-'`.,
294,Flip Game II,"You are playing a Flip Game with your friend.

You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip two consecutive `""++""` into `""--""`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.

Return `true` if the starting player can guarantee a win, and `false` otherwise.


Example 1:
Input: currentState = ""++++""
Output: true
Explanation: The starting player can guarantee a win by flipping the middle ""++"" to become ""+--+"".


Example 2:
Input: currentState = ""+""
Output: false

Constraints:
`1 <= currentState.length <= 60`
`currentState[i]` is either `'+'` or `'-'`.

Follow up: Derive your algorithm's runtime complexity.",Medium,https://leetcode.com/problems/flip-game-ii,Google,"Backtracking,Minimax",454,"[Nim Game, /problems/nim-game/, Easy], [Flip Game, /problems/flip-game/, Easy], [Guess Number Higher or Lower II, /problems/guess-number-higher-or-lower-ii/, Medium], [Can I Win, /problems/can-i-win/, Medium]","you are playing a flip game with your friend. you are given a string `currentstate` that contains only `'+'` and `'-'`. you and your friend take turns to flip two consecutive `""++""` into `""--""`. the game ends when a person can no longer make a move, and therefore the other person will be the winner. return `true` if the starting player can guarantee a win, and `false` otherwise.","input: currentstate = ""++++"" output: true explanation: the starting player can guarantee a win by flipping the middle ""++"" to become ""+--+"". example 2: input: currentstate = ""+"" output: false",`1 <= currentstate.length <= 60` `currentstate[i]` is either `'+'` or `'-'`.,derive your algorithm's runtime complexity.
295,Find Median from Data Stream,"The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.

For example, for `arr = [2,3,4]`, the median is `3`.

For example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`.

Implement the MedianFinder class:
`MedianFinder()` initializes the `MedianFinder` object.

`void addNum(int num)` adds the integer `num` from the data stream to the data structure.

`double findMedian()` returns the median of all elements so far. Answers within `10-5` of the actual answer will be accepted.


Example 1:
Input
[""MedianFinder"", ""addNum"", ""addNum"", ""findMedian"", ""addNum"", ""findMedian""]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]
Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0

Constraints:
`-105 <= num <= 105`
There will be at least one element in the data structure before calling `findMedian`.

At most `5 * 104` calls will be made to `addNum` and `findMedian`.

Follow up:
If all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?
If `99%` of all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?",Hard,https://leetcode.com/problems/find-median-from-data-stream,"Amazon,Facebook,Microsoft,ByteDance,Google,Apple,eBay,Bloomberg,Salesforce,Goldman Sachs,Nvidia,Uber,Walmart Labs,VMware,Adobe,Twilio","Heap,Design",3979,"[Sliding Window Median, /problems/sliding-window-median/, Hard]","the median is the middle value in an ordered integer list. if the size of the list is even, there is no middle value and the median is the mean of the two middle values. for example, for `arr = [2,3,4]`, the median is `3`. for example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`. implement the medianfinder class: `medianfinder()` initializes the `medianfinder` object. `void addnum(int num)` adds the integer `num` from the data stream to the data structure. `double findmedian()` returns the median of all elements so far. answers within `10-5` of the actual answer will be accepted.","input [""medianfinder"", ""addnum"", ""addnum"", ""findmedian"", ""addnum"", ""findmedian""] [[], [1], [2], [], [3], []] output [null, null, null, 1.5, null, 2.0] explanation medianfinder medianfinder = new medianfinder(); medianfinder.addnum(1); // arr = [1] medianfinder.addnum(2); // arr = [1, 2] medianfinder.findmedian(); // return 1.5 (i.e., (1 + 2) / 2) medianfinder.addnum(3); // arr[1, 2, 3] medianfinder.findmedian(); // return 2.0",`-10^5 <= num <= 10^5` there will be at least one element in the data structure before calling `findmedian`. at most `5 * 10^4` calls will be made to `addnum` and `findmedian`.,"if all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution? if `99%` of all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?"
296,Best Meeting Point,"Given an `m x n` binary grid `grid` where each `1` marks the home of one friend, return the minimal total travel distance.

The total travel distance is the sum of the distances between the houses of the friends and the meeting point.

The distance is calculated using Manhattan Distance, where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.


Example 1:
Input: grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]
Output: 6
Explanation: Given three friends living at (0,0), (0,4), and (2,2).

The point (0,2) is an ideal meeting point, as the total travel distance of 2 + 2 + 2 = 6 is minimal.

So return 6.


Example 2:
Input: grid = [[1,1]]
Output: 1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 200`
`grid[i][j]` is either `0` or `1`.

There will be at least two friends in the `grid`.",Hard,https://leetcode.com/problems/best-meeting-point,"Google,Amazon,Bloomberg,Microsoft","Math,Sort",597,"[Shortest Distance from All Buildings, /problems/shortest-distance-from-all-buildings/, Hard], [Minimum Moves to Equal Array Elements II, /problems/minimum-moves-to-equal-array-elements-ii/, Medium]","given an `m x n` binary grid `grid` where each `1` marks the home of one friend, return the minimal total travel distance. the total travel distance is the sum of the distances between the houses of the friends and the meeting point. the distance is calculated using manhattan distance, where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.","input: grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]] output: 6 explanation: given three friends living at (0,0), (0,4), and (2,2). the point (0,2) is an ideal meeting point, as the total travel distance of 2 + 2 + 2 = 6 is minimal. so return 6. example 2: input: grid = [[1,1]] output: 1","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 200` `grid[i][j]` is either `0` or `1`. there will be at least two friends in the `grid`.",
297,Serialize and Deserialize Binary Tree,"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.


Example 1:
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [1,2]

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-1000 <= Node.val <= 1000`",Hard,https://leetcode.com/problems/serialize-and-deserialize-binary-tree,"Facebook,Microsoft,Amazon,LinkedIn,Uber,Bloomberg,eBay,Quora,Qualtrics,Google,Oracle,Citadel,Walmart Labs","Tree,Design",4145,"[Encode and Decode Strings, /problems/encode-and-decode-strings/, Medium], [Serialize and Deserialize BST, /problems/serialize-and-deserialize-bst/, Medium], [Find Duplicate Subtrees, /problems/find-duplicate-subtrees/, Medium], [Serialize and Deserialize N-ary Tree, /problems/serialize-and-deserialize-n-ary-tree/, Hard]","serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. design an algorithm to serialize and deserialize a binary tree. there is no restriction on how your serialization/deserialization algorithm should work. you just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure. clarification: the input/output format is the same as how leetcode serializes a binary tree. you do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.","input: root = [1,2,3,null,null,4,5] output: [1,2,3,null,null,4,5] example 2: input: root = [] output: [] example 3: input: root = [1] output: [1] example 4: input: root = [1,2] output: [1,2]","the number of nodes in the tree is in the range `[0, 10^4]`. `-1000 <= node.val <= 1000`",
298,Binary Tree Longest Consecutive Sequence,"Given the `root` of a binary tree, return the length of the longest consecutive sequence path.

The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path needs to be from parent to child (cannot be the reverse).


Example 1:
Input: root = [1,null,3,2,4,null,null,null,5]
Output: 3
Explanation: Longest consecutive sequence path is 3-4-5, so return 3.


Example 2:
Input: root = [2,null,3,2,null,1]
Output: 2
Explanation: Longest consecutive sequence path is 2-3, not 3-2-1, so return 2.


Constraints:
The number of nodes in the tree is in the range `[1, 3 * 104]`.

`-3 * 104 <= Node.val <= 3 * 104`",Medium,https://leetcode.com/problems/binary-tree-longest-consecutive-sequence,Google,Tree,633,"[Longest Consecutive Sequence, /problems/longest-consecutive-sequence/, Hard], [Binary Tree Longest Consecutive Sequence II, /problems/binary-tree-longest-consecutive-sequence-ii/, Medium]","given the `root` of a binary tree, return the length of the longest consecutive sequence path. the path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. the longest consecutive path needs to be from parent to child (cannot be the reverse).","input: root = [1,null,3,2,4,null,null,null,5] output: 3 explanation: longest consecutive sequence path is 3-4-5, so return 3. example 2: input: root = [2,null,3,2,null,1] output: 2 explanation: longest consecutive sequence path is 2-3, not 3-2-1, so return 2.","the number of nodes in the tree is in the range `[1, 3 * 10^4]`. `-3 * 10^4 <= node.val <= 3 * 10^4`",
299,Bulls and Cows,"You are playing the Bulls and Cows game with your friend.

You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:
The number of ""bulls"", which are digits in the guess that are in the correct position.

The number of ""cows"", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.

Given the secret number `secret` and your friend's guess `guess`, return the hint for your friend's guess.

The hint should be formatted as `""xAyB""`, where `x` is the number of bulls and `y` is the number of cows. Note that both `secret` and `guess` may contain duplicate digits.


Example 1:
Input: secret = ""1807"", guess = ""7810""
Output: ""1A3B""
Explanation: Bulls are connected with a '|' and cows are underlined:
""1807""
  |
""7810""

Example 2:
Input: secret = ""1123"", guess = ""0111""
Output: ""1A1B""
Explanation: Bulls are connected with a '|' and cows are underlined:
""1123""        ""1123""
  |      or     |
""0111""        ""0111""
Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.


Example 3:
Input: secret = ""1"", guess = ""0""
Output: ""0A0B""

Example 4:
Input: secret = ""1"", guess = ""1""
Output: ""1A0B""

Constraints:
`1 <= secret.length, guess.length <= 1000`
`secret.length == guess.length`
`secret` and `guess` consist of digits only.",Medium,https://leetcode.com/problems/bulls-and-cows,"Google,ByteDance,eBay",Hash Table,934,,"you are playing the bulls and cows game with your friend. you write down a secret number and ask your friend to guess what the number is. when your friend makes a guess, you provide a hint with the following info: the number of ""bulls"", which are digits in the guess that are in the correct position. the number of ""cows"", which are digits in the guess that are in your secret number but are located in the wrong position. specifically, the non-bull digits in the guess that could be rearranged such that they become bulls. given the secret number `secret` and your friend's guess `guess`, return the hint for your friend's guess. the hint should be formatted as `""xayb""`, where `x` is the number of bulls and `y` is the number of cows. note that both `secret` and `guess` may contain duplicate digits.","input: secret = ""1807"", guess = ""7810"" output: ""1a3b"" explanation: bulls are connected with a '|' and cows are underlined: ""1807"" | ""7810"" example 2: input: secret = ""1123"", guess = ""0111"" output: ""1a1b"" explanation: bulls are connected with a '|' and cows are underlined: ""1123"" ""1123"" | or | ""0111"" ""0111"" note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull. example 3: input: secret = ""1"", guess = ""0"" output: ""0a0b"" example 4: input: secret = ""1"", guess = ""1"" output: ""1a0b""","`1 <= secret.length, guess.length <= 1000` `secret.length == guess.length` `secret` and `guess` consist of digits only.",
300,Longest Increasing Subsequence,"Given an integer array `nums`, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.


Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.


Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1

Constraints:
`1 <= nums.length <= 2500`
`-104 <= nums[i] <= 104`
Follow up:
Could you come up with the `O(n2)` solution?
Could you improve it to `O(n log(n))` time complexity?",Medium,https://leetcode.com/problems/longest-increasing-subsequence,"Apple,Amazon,Facebook,Bloomberg,Citrix,Google,ByteDance,Twitter,Microsoft,Nagarro","Binary Search,Dynamic Programming",6891,"[Increasing Triplet Subsequence, /problems/increasing-triplet-subsequence/, Medium], [Russian Doll Envelopes, /problems/russian-doll-envelopes/, Hard], [Maximum Length of Pair Chain, /problems/maximum-length-of-pair-chain/, Medium], [Number of Longest Increasing Subsequence, /problems/number-of-longest-increasing-subsequence/, Medium], [Minimum ASCII Delete Sum for Two Strings, /problems/minimum-ascii-delete-sum-for-two-strings/, Medium], [Minimum Number of Removals to Make Mountain Array, /problems/minimum-number-of-removals-to-make-mountain-array/, Hard]","given an integer array `nums`, return the length of the longest strictly increasing subsequence. a subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. for example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.","input: nums = [10,9,2,5,3,7,101,18] output: 4 explanation: the longest increasing subsequence is [2,3,7,101], therefore the length is 4. example 2: input: nums = [0,1,0,3,2,3] output: 4 example 3: input: nums = [7,7,7,7,7,7,7] output: 1",`1 <= nums.length <= 2500` `-10^4 <= nums[i] <= 10^4`,could you come up with the `o(n2)` solution? could you improve it to `o(n log(n))` time complexity?
301,Remove Invalid Parentheses,"Given a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return all the possible results. You may return the answer in any order.


Example 1:
Input: s = ""()())()""
Output: [""(())()"",""()()()""]

Example 2:
Input: s = ""(a)())()""
Output: [""(a())()"",""(a)()()""]

Example 3:
Input: s = "")(""
Output: [""""]

Constraints:
`1 <= s.length <= 25`
`s` consists of lowercase English letters and parentheses `'('` and `')'`.

There will be at most `20` parentheses in `s`.",Hard,https://leetcode.com/problems/remove-invalid-parentheses,"Facebook,Bloomberg,ByteDance,Amazon,Qualtrics","Depth-first Search,Breadth-first Search",3281,"[Valid Parentheses, /problems/valid-parentheses/, Easy]","given a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid. return all the possible results. you may return the answer in any order.","input: s = ""()())()"" output: [""(())()"",""()()()""] example 2: input: s = ""(a)())()"" output: [""(a())()"",""(a)()()""] example 3: input: s = "")("" output: [""""]",`1 <= s.length <= 25` `s` consists of lowercase english letters and parentheses `'('` and `')'`. there will be at most `20` parentheses in `s`.,
302,Smallest Rectangle Enclosing Black Pixels,"You are given an `image` that is represented by a binary matrix with `0` as a white pixel and `1` as a black pixel.

The black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.

Given two integers `x` and `y` that represent the location of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.


Example 1:
Input: image = [[""0"",""0"",""1"",""0""],[""0"",""1"",""1"",""0""],[""0"",""1"",""0"",""0""]], x = 0, y = 2
Output: 6

Example 2:
Input: image = [[""1""]], x = 0, y = 0
Output: 1

Constraints:
`m == image.length`
`n == image[i].length`
`1 <= m, n <= 100`
`image[i][j]` is either `'0'` or `'1'`.

`1 <= x < m`
`1 <= y < n`
`image[x][y] == '1'.`
The black pixels in the `image` only form one component.",Hard,https://leetcode.com/problems/smallest-rectangle-enclosing-black-pixels,Google,Binary Search,244,,"you are given an `image` that is represented by a binary matrix with `0` as a white pixel and `1` as a black pixel. the black pixels are connected (i.e., there is only one black region). pixels are connected horizontally and vertically. given two integers `x` and `y` that represent the location of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.","input: image = [[""0"",""0"",""1"",""0""],[""0"",""1"",""1"",""0""],[""0"",""1"",""0"",""0""]], x = 0, y = 2 output: 6 example 2: input: image = [[""1""]], x = 0, y = 0 output: 1","`m == image.length` `n == image[i].length` `1 <= m, n <= 10^0` `image[i][j]` is either `'0'` or `'1'`. `1 <= x < m` `1 <= y < n` `image[x][y] == '1'.` the black pixels in the `image` only form one component.",
303,Range Sum Query - Immutable,"Given an integer array `nums`, find the sum of the elements between indices `left` and `right` inclusive, where `(left <= right)`.

Implement the `NumArray` class:
`NumArray(int[] nums)` initializes the object with the integer array `nums`.

`int sumRange(int left, int right)` returns the sum of the elements of the `nums` array in the range `[left, right]` inclusive (i.e., `sum(nums[left], nums[left + 1], ... , nums[right])`).


Example 1:
Input
[""NumArray"", ""sumRange"", ""sumRange"", ""sumRange""]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]
Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)
numArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) 
numArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))

Constraints:
`1 <= nums.length <= 104`
`-105 <= nums[i] <= 105`
`0 <= left <= right < nums.length`
At most `104` calls will be made to `sumRange`.",Easy,https://leetcode.com/problems/range-sum-query-immutable,Facebook,Dynamic Programming,1241,"[Range Sum Query 2D - Immutable, /problems/range-sum-query-2d-immutable/, Medium], [Range Sum Query - Mutable, /problems/range-sum-query-mutable/, Medium], [Maximum Size Subarray Sum Equals k, /problems/maximum-size-subarray-sum-equals-k/, Medium]","given an integer array `nums`, find the sum of the elements between indices `left` and `right` inclusive, where `(left <= right)`. implement the `numarray` class: `numarray(int[] nums)` initializes the object with the integer array `nums`. `int sumrange(int left, int right)` returns the sum of the elements of the `nums` array in the range `[left, right]` inclusive (i.e., `sum(nums[left], nums[left + 1], ... , nums[right])`).","input [""numarray"", ""sumrange"", ""sumrange"", ""sumrange""] [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]] output [null, 1, -1, -3] explanation numarray numarray = new numarray([-2, 0, 3, -5, 2, -1]); numarray.sumrange(0, 2); // return 1 ((-2) + 0 + 3) numarray.sumrange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) numarray.sumrange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))",`1 <= nums.length <= 10^4` `-10^5 <= nums[i] <= 10^5` `0 <= left <= right < nums.length` at most `10^4` calls will be made to `sumrange`.,
304,Range Sum Query 2D - Immutable,"Given a 2D matrix `matrix`, find the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.

Implement the NumMatrix class:
`NumMatrix(int[][] matrix)` initializes the object with the integer matrix `matrix`.

`int sumRegion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.


Example 1:
Input
[""NumMatrix"", ""sumRegion"", ""sumRegion"", ""sumRegion""]
[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]
Output
[null, 8, 11, 12]
Explanation
NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangele).

numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangele).

numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangele).


Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 200`
`-105 <= matrix[i][j] <= 105`
`0 <= row1 <= row2 < m`
`0 <= col1 <= col2 < n`
At most `104` calls will be made to `sumRegion`.",Medium,https://leetcode.com/problems/range-sum-query-2d-immutable,"Facebook,Google,Lyft,Microsoft,Amazon",Dynamic Programming,1462,"[Range Sum Query - Immutable, /problems/range-sum-query-immutable/, Easy], [Range Sum Query 2D - Mutable, /problems/range-sum-query-2d-mutable/, Hard]","given a 2d matrix `matrix`, find the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`. implement the nummatrix class: `nummatrix(int[][] matrix)` initializes the object with the integer matrix `matrix`. `int sumregion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.","input [""nummatrix"", ""sumregion"", ""sumregion"", ""sumregion""] [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]] output [null, 8, 11, 12] explanation nummatrix nummatrix = new nummatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]); nummatrix.sumregion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangele). nummatrix.sumregion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangele). nummatrix.sumregion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangele).","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 200` `-10^5 <= matrix[i][j] <= 10^5` `0 <= row1 <= row2 < m` `0 <= col1 <= col2 < n` at most `10^4` calls will be made to `sumregion`.",
305,Number of Islands II,"You are given an empty 2D binary grid `grid` of size `m x n`. The grid represents a map where `0`'s represent water and `1`'s represent land. Initially, all the cells of `grid` are water cells (i.e., all the cells are `0`'s).

We may perform an add land operation which turns the water at position into a land. You are given an array `positions` where `positions[i] = [ri, ci]` is the position `(ri, ci)` at which we should operate the `ith` operation.

Return an array of integers `answer` where `answer[i]` is the number of islands after turning the cell `(ri, ci)` into a land.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.


Example 1:
Input: m = 3, n = 3, positions = [[0,0],[0,1],[1,2],[2,1]]
Output: [1,1,2,3]
Explanation:
Initially, the 2d grid is filled with water.

- Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land. We have 1 island.

- Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land. We still have 1 island.

- Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land. We have 2 islands.

- Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land. We have 3 islands.


Example 2:
Input: m = 1, n = 1, positions = [[0,0]]
Output: [1]

Constraints:
`1 <= m, n, positions.length <= 104`
`1 <= m * n <= 104`
`positions[i].length == 2`
`0 <= ri < m`
`0 <= ci < n`
Follow up: Could you solve it in time complexity `O(k log(mn))`, where `k == positions.length`?",Hard,https://leetcode.com/problems/number-of-islands-ii,Amazon,Union Find,1007,"[Number of Islands, /problems/number-of-islands/, Medium]","you are given an empty 2d binary grid `grid` of size `m x n`. the grid represents a map where `0`'s represent water and `1`'s represent land. initially, all the cells of `grid` are water cells (i.e., all the cells are `0`'s). we may perform an add land operation which turns the water at position into a land. you are given an array `positions` where `positions[i] = [ri, ci]` is the position `(ri, ci)` at which we should operate the `ith` operation. return an array of integers `answer` where `answer[i]` is the number of islands after turning the cell `(ri, ci)` into a land. an island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. you may assume all four edges of the grid are all surrounded by water.","input: m = 3, n = 3, positions = [[0,0],[0,1],[1,2],[2,1]] output: [1,1,2,3] explanation: initially, the 2d grid is filled with water. - operation #1: addland(0, 0) turns the water at grid[0][0] into a land. we have 1 island. - operation #2: addland(0, 1) turns the water at grid[0][1] into a land. we still have 1 island. - operation #3: addland(1, 2) turns the water at grid[1][2] into a land. we have 2 islands. - operation #4: addland(2, 1) turns the water at grid[2][1] into a land. we have 3 islands. example 2: input: m = 1, n = 1, positions = [[0,0]] output: [1]","`1 <= m, n, positions.length <= 10^4` `1 <= m * n <= 10^4` `positions[i].length == 2` `0 <= ri < m` `0 <= ci < n`","could you solve it in time complexity `o(k log(mn))`, where `k == positions.length`?"
306,Additive Number,"Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits `'0'-'9'`, write a function to determine if it's an additive number.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.


Example 1:
Input: ""112358""
Output: true
Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8

Example 2:
Input: ""199100199""
Output: true
Explanation: The additive sequence is: 1, 99, 100, 199. 
             1 + 99 = 100, 99 + 100 = 199

Constraints:
`num` consists only of digits `'0'-'9'`.

`1 <= num.length <= 35`
Follow up:
How would you handle overflow for very large input integers?",Medium,https://leetcode.com/problems/additive-number,"Epic Systems,Google",Backtracking,516,"[Split Array into Fibonacci Sequence, /problems/split-array-into-fibonacci-sequence/, Medium]","additive number is a string whose digits can form additive sequence. a valid additive sequence should contain at least three numbers. except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two. given a string containing only digits `'0'-'9'`, write a function to determine if it's an additive number. note: numbers in the additive sequence cannot have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.","input: ""112358"" output: true explanation: the digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8 example 2: input: ""199100199"" output: true explanation: the additive sequence is: 1, 99, 100, 199. 1 + 99 = 100, 99 + 100 = 199",`num` consists only of digits `'0'-'9'`. `1 <= num.length <= 35`,how would you handle overflow for very large input integers?
307,Range Sum Query - Mutable,"Given an array `nums` and two types of queries where you should update the value of an index in the array, and retrieve the sum of a range in the array.

Implement the `NumArray` class:
`NumArray(int[] nums)` initializes the object with the integer array `nums`.

`void update(int index, int val)` updates the value of `nums[index]` to be `val`.

`int sumRange(int left, int right)` returns the sum of the subarray `nums[left, right]` (i.e., `nums[left] + nums[left + 1], ..., nums[right]`).


Example 1:
Input
[""NumArray"", ""sumRange"", ""update"", ""sumRange""]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]
Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 9 = sum([1,3,5])
numArray.update(1, 2);   // nums = [1,2,5]
numArray.sumRange(0, 2); // return 8 = sum([1,2,5])

Constraints:
`1 <= nums.length <= 3 * 104`
`-100 <= nums[i] <= 100`
`0 <= index < nums.length`
`-100 <= val <= 100`
`0 <= left <= right < nums.length`
At most `3 * 104` calls will be made to `update` and `sumRange`.",Medium,https://leetcode.com/problems/range-sum-query-mutable,Facebook,"Binary Indexed Tree,Segment Tree",1761,"[Range Sum Query - Immutable, /problems/range-sum-query-immutable/, Easy], [Range Sum Query 2D - Mutable, /problems/range-sum-query-2d-mutable/, Hard]","given an array `nums` and two types of queries where you should update the value of an index in the array, and retrieve the sum of a range in the array. implement the `numarray` class: `numarray(int[] nums)` initializes the object with the integer array `nums`. `void update(int index, int val)` updates the value of `nums[index]` to be `val`. `int sumrange(int left, int right)` returns the sum of the subarray `nums[left, right]` (i.e., `nums[left] + nums[left + 1], ..., nums[right]`).","input [""numarray"", ""sumrange"", ""update"", ""sumrange""] [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]] output [null, 9, null, 8] explanation numarray numarray = new numarray([1, 3, 5]); numarray.sumrange(0, 2); // return 9 = sum([1,3,5]) numarray.update(1, 2); // nums = [1,2,5] numarray.sumrange(0, 2); // return 8 = sum([1,2,5])",`1 <= nums.length <= 3 * 10^4` `-10^0 <= nums[i] <= 10^0` `0 <= index < nums.length` `-10^0 <= val <= 10^0` `0 <= left <= right < nums.length` at most `3 * 10^4` calls will be made to `update` and `sumrange`.,
308,Range Sum Query 2D - Mutable,"Given a 2D matrix `matrix`, find the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.

Implement the NumMatrix class:
`NumMatrix(int[][] matrix)` initializes the object with the integer matrix `matrix`.

`void update(int row, int col, int val)` updates the value of `matrix[row][col]` to be `val`.

`int sumRegion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.


Example 1:
Input
[""NumMatrix"", ""sumRegion"", ""update"", ""sumRegion""]
[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [3, 2, 2], [2, 1, 4, 3]]
Output
[null, 8, null, 10]
Explanation
NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
numMatrix.sumRegion(2, 1, 4, 3); // return 8
numMatrix.update(3, 2, 2);
numMatrix.sumRegion(2, 1, 4, 3); // return 10

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 200`
`-105 <= matrix[i][j] <= 105`
`0 <= row < m`
`0 <= col < n`
`-105 <= val <= 105`
`0 <= row1 <= row2 < m`
`0 <= col1 <= col2 < n`
At most `104` calls will be made to `sumRegion` and `update`.",Hard,https://leetcode.com/problems/range-sum-query-2d-mutable,Google,"Binary Indexed Tree,Segment Tree",501,"[Range Sum Query 2D - Immutable, /problems/range-sum-query-2d-immutable/, Medium], [Range Sum Query - Mutable, /problems/range-sum-query-mutable/, Medium]","given a 2d matrix `matrix`, find the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`. implement the nummatrix class: `nummatrix(int[][] matrix)` initializes the object with the integer matrix `matrix`. `void update(int row, int col, int val)` updates the value of `matrix[row][col]` to be `val`. `int sumregion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.","input [""nummatrix"", ""sumregion"", ""update"", ""sumregion""] [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [3, 2, 2], [2, 1, 4, 3]] output [null, 8, null, 10] explanation nummatrix nummatrix = new nummatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]); nummatrix.sumregion(2, 1, 4, 3); // return 8 nummatrix.update(3, 2, 2); nummatrix.sumregion(2, 1, 4, 3); // return 10","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 200` `-10^5 <= matrix[i][j] <= 10^5` `0 <= row < m` `0 <= col < n` `-10^5 <= val <= 10^5` `0 <= row1 <= row2 < m` `0 <= col1 <= col2 < n` at most `10^4` calls will be made to `sumregion` and `update`.",
309,Best Time to Buy and Sell Stock with Cooldown,"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:
After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:
Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]

Example 2:
Input: prices = [1]
Output: 0

Constraints:
`1 <= prices.length <= 5000`
`0 <= prices[i] <= 1000`",Medium,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown,"Amazon,Yahoo",Dynamic Programming,3551,"[Best Time to Buy and Sell Stock, /problems/best-time-to-buy-and-sell-stock/, Easy], [Best Time to Buy and Sell Stock II, /problems/best-time-to-buy-and-sell-stock-ii/, Easy]","you are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day. find the maximum profit you can achieve. you may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions: after you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day). note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).","input: prices = [1,2,3,0,2] output: 3 explanation: transactions = [buy, sell, cooldown, buy, sell] example 2: input: prices = [1] output: 0",`1 <= prices.length <= 5000` `0 <= prices[i] <= 1000`,
310,Minimum Height Trees,"A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.

Given a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height (i.e. `min(h)`)  are called minimum height trees (MHTs).

Return a list of all MHTs' root labels. You can return the answer in any order.

The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.


Example 1:
Input: n = 4, edges = [[1,0],[1,2],[1,3]]
Output: [1]
Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.


Example 2:
Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
Output: [3,4]

Example 3:
Input: n = 1, edges = []
Output: [0]

Example 4:
Input: n = 2, edges = [[0,1]]
Output: [0,1]

Constraints:
`1 <= n <= 2 * 104`
`edges.length == n - 1`
`0 <= ai, bi < n`
`ai != bi`
All the pairs `(ai, bi)` are distinct.

The given input is guaranteed to be a tree and there will be no repeated edges.",Medium,https://leetcode.com/problems/minimum-height-trees,Facebook,"Breadth-first Search,Graph",3014,"[Course Schedule, /problems/course-schedule/, Medium], [Course Schedule II, /problems/course-schedule-ii/, Medium]","a tree is an undirected graph in which any two vertices are connected by exactly one path. in other words, any connected graph without simple cycles is a tree. given a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, you can choose any node of the tree as the root. when you select a node `x` as the root, the result tree has height `h`. among all possible rooted trees, those with minimum height (i.e. `min(h)`) are called minimum height trees (mhts). return a list of all mhts' root labels. you can return the answer in any order. the height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.","input: n = 4, edges = [[1,0],[1,2],[1,3]] output: [1] explanation: as shown, the height of the tree is 1 when the root is the node with label 1 which is the only mht. example 2: input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]] output: [3,4] example 3: input: n = 1, edges = [] output: [0] example 4: input: n = 2, edges = [[0,1]] output: [0,1]","`1 <= n <= 2 * 10^4` `edges.length == n - 1` `0 <= ai, bi < n` `ai != bi` all the pairs `(ai, bi)` are distinct. the given input is guaranteed to be a tree and there will be no repeated edges.",
311,Sparse Matrix Multiplication,"Given two sparse matrices `mat1` of size `m x k` and `mat2` of size `k x n`, return the result of `mat1 x mat2`. You may assume that multiplication is always possible.


Example 1:
Input: mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]
Output: [[7,0,0],[-7,0,3]]

Example 2:
Input: mat1 = [[0]], mat2 = [[0]]
Output: [[0]]

Constraints:
`m == mat1.length`
`k == mat1[i].length == mat2.length`
`n == mat2[i].length`
`1 <= m, n, k <= 100`
`-100 <= mat1[i][j], mat2[i][j] <= 100`",Medium,https://leetcode.com/problems/sparse-matrix-multiplication,"Facebook,Apple,Wish",Hash Table,631,,"given two sparse matrices `mat1` of size `m x k` and `mat2` of size `k x n`, return the result of `mat1 x mat2`. you may assume that multiplication is always possible.","input: mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]] output: [[7,0,0],[-7,0,3]] example 2: input: mat1 = [[0]], mat2 = [[0]] output: [[0]]","`m == mat1.length` `k == mat1[i].length == mat2.length` `n == mat2[i].length` `1 <= m, n, k <= 10^0` `-10^0 <= mat1[i][j], mat2[i][j] <= 10^0`",
312,Burst Balloons,"You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by an array `nums`. You are asked to burst all the balloons.

If you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.


Example 1:
Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167

Example 2:
Input: nums = [1,5]
Output: 10

Constraints:
`n == nums.length`
`1 <= n <= 500`
`0 <= nums[i] <= 100`",Hard,https://leetcode.com/problems/burst-balloons,"Adobe,Bloomberg,Amazon,Google,Codenation","Divide and Conquer,Dynamic Programming",3483,"[Minimum Cost to Merge Stones, /problems/minimum-cost-to-merge-stones/, Hard]","you are given `n` balloons, indexed from `0` to `n - 1`. each balloon is painted with a number on it represented by an array `nums`. you are asked to burst all the balloons. if you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. if `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it. return the maximum coins you can collect by bursting the balloons wisely.","input: nums = [3,1,5,8] output: 167 explanation: nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> [] coins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167 example 2: input: nums = [1,5] output: 10",`n == nums.length` `1 <= n <= 500` `0 <= nums[i] <= 10^0`,
313,Super Ugly Number,"Given an integer `n` and an array of integers `primes`, return the `nth` super ugly number.

Super ugly number is a positive number whose all prime factors are in the array `primes`.

The `nth` super ugly number is guaranteed to fit in a 32-bit signed integer.


Example 1:
Input: n = 12, primes = [2,7,13,19]
Output: 32
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19].


Example 2:
Input: n = 1, primes = [2,3,5]
Output: 1
Explanation: 1 is a super ugly number for any given primes.


Constraints:
`1 <= n <= 106`
`1 <= primes.length <= 100`
`2 <= primes[i] <= 1000`
`primes[i]` is guaranteed to be a prime number.

All the values of `primes` are unique and sorted in ascending order.",Medium,https://leetcode.com/problems/super-ugly-number,"Amazon,Google","Math,Heap",836,"[Ugly Number II, /problems/ugly-number-ii/, Medium]","given an integer `n` and an array of integers `primes`, return the `nth` super ugly number. super ugly number is a positive number whose all prime factors are in the array `primes`. the `nth` super ugly number is guaranteed to fit in a 32-bit signed integer.","input: n = 12, primes = [2,7,13,19] output: 32 explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19]. example 2: input: n = 1, primes = [2,3,5] output: 1 explanation: 1 is a super ugly number for any given primes.",`1 <= n <= 10^6` `1 <= primes.length <= 10^0` `2 <= primes[i] <= 1000` `primes[i]` is guaranteed to be a prime number. all the values of `primes` are unique and sorted in ascending order.,
314,Binary Tree Vertical Order Traversal,"Given the `root` of a binary tree, return the vertical order traversal of its nodes' values. (i.e., from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]

Example 2:
Input: root = [3,9,8,4,0,1,7]
Output: [[4],[9],[3,0,1],[8],[7]]

Example 3:
Input: root = [3,9,8,4,0,1,7,null,null,null,2,5]
Output: [[4],[9,5],[3,0,1],[8,2],[7]]

Example 4:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`",Medium,https://leetcode.com/problems/binary-tree-vertical-order-traversal,"Facebook,Bloomberg,Amazon","Depth-first Search,Breadth-first Search",1428,"[Binary Tree Level Order Traversal, /problems/binary-tree-level-order-traversal/, Medium]","given the `root` of a binary tree, return the vertical order traversal of its nodes' values. (i.e., from top to bottom, column by column). if two nodes are in the same row and column, the order should be from left to right.","input: root = [3,9,20,null,null,15,7] output: [[9],[3,15],[20],[7]] example 2: input: root = [3,9,8,4,0,1,7] output: [[4],[9],[3,0,1],[8],[7]] example 3: input: root = [3,9,8,4,0,1,7,null,null,null,2,5] output: [[4],[9,5],[3,0,1],[8,2],[7]] example 4: input: root = [] output: []","the number of nodes in the tree is in the range `[0, 10^0]`. `-10^0 <= node.val <= 10^0`",
315,Count of Smaller Numbers After Self,"You are given an integer array `nums` and you have to return a new `counts` array. The `counts` array has the property where `counts[i]` is the number of smaller elements to the right of `nums[i]`.


Example 1:
Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).

To the right of 2 there is only 1 smaller element (1).

To the right of 6 there is 1 smaller element (1).

To the right of 1 there is 0 smaller element.


Example 2:
Input: nums = [-1]
Output: [0]

Example 3:
Input: nums = [-1,-1]
Output: [0,0]

Constraints:
`1 <= nums.length <= 105`
`-104 <= nums[i] <= 104`",Hard,https://leetcode.com/problems/count-of-smaller-numbers-after-self,"Google,Amazon,Apple,Bloomberg","Binary Search,Divide and Conquer,Sort,Binary Indexed Tree,Segment Tree",3332,"[Count of Range Sum, /problems/count-of-range-sum/, Hard], [Queue Reconstruction by Height, /problems/queue-reconstruction-by-height/, Medium], [Reverse Pairs, /problems/reverse-pairs/, Hard], [How Many Numbers Are Smaller Than the Current Number, /problems/how-many-numbers-are-smaller-than-the-current-number/, Easy]",you are given an integer array `nums` and you have to return a new `counts` array. the `counts` array has the property where `counts[i]` is the number of smaller elements to the right of `nums[i]`.,"input: nums = [5,2,6,1] output: [2,1,1,0] explanation: to the right of 5 there are 2 smaller elements (2 and 1). to the right of 2 there is only 1 smaller element (1). to the right of 6 there is 1 smaller element (1). to the right of 1 there is 0 smaller element. example 2: input: nums = [-1] output: [0] example 3: input: nums = [-1,-1] output: [0,0]",`1 <= nums.length <= 10^5` `-10^4 <= nums[i] <= 10^4`,
316,Remove Duplicate Letters,"Given a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.

Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/

Example 1:
Input: s = ""bcabc""
Output: ""abc""

Example 2:
Input: s = ""cbacdcbc""
Output: ""acdb""

Constraints:
`1 <= s.length <= 104`
`s` consists of lowercase English letters.",Medium,https://leetcode.com/problems/remove-duplicate-letters,"Amazon,Bloomberg,Google","String,Stack,Greedy",2389,,"given a string `s`, remove duplicate letters so that every letter appears once and only once. you must make sure your result is the smallest in lexicographical order among all possible results. note: this question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/","input: s = ""bcabc"" output: ""abc"" example 2: input: s = ""cbacdcbc"" output: ""acdb""",`1 <= s.length <= 10^4` `s` consists of lowercase english letters.,
317,Shortest Distance from All Buildings,"You are given an `m x n` grid `grid` of values `0`, `1`, or `2`, where:
each `0` marks an empty land that you can pass by freely,
each `1` marks a building that you cannot pass through, and
each `2` marks an obstacle that you cannot pass through.

You want to build a house on an empty land that reaches all buildings in the shortest total travel distance. You can only move up, down, left, and right.

Return the shortest travel distance for such a house. If it is not possible to build such a house according to the above rules, return `-1`.

The total travel distance is the sum of the distances between the houses of the friends and the meeting point.

The distance is calculated using Manhattan Distance, where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.


Example 1:
Input: grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]
Output: 7
Explanation: Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2).

The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal.

So return 7.


Example 2:
Input: grid = [[1,0]]
Output: 1

Example 3:
Input: grid = [[1]]
Output: -1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 100`
`grid[i][j]` is either `0`, `1`, or `2`.

There will be at least one building in the `grid`.",Hard,https://leetcode.com/problems/shortest-distance-from-all-buildings,"Facebook,Google,Amazon,Qualtrics",Breadth-first Search,983,"[Walls and Gates, /problems/walls-and-gates/, Medium], [Best Meeting Point, /problems/best-meeting-point/, Hard], [As Far from Land as Possible, /problems/as-far-from-land-as-possible/, Medium]","you are given an `m x n` grid `grid` of values `0`, `1`, or `2`, where: each `0` marks an empty land that you can pass by freely, each `1` marks a building that you cannot pass through, and each `2` marks an obstacle that you cannot pass through. you want to build a house on an empty land that reaches all buildings in the shortest total travel distance. you can only move up, down, left, and right. return the shortest travel distance for such a house. if it is not possible to build such a house according to the above rules, return `-1`. the total travel distance is the sum of the distances between the houses of the friends and the meeting point. the distance is calculated using manhattan distance, where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.","input: grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]] output: 7 explanation: given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2). the point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal. so return 7. example 2: input: grid = [[1,0]] output: 1 example 3: input: grid = [[1]] output: -1","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 10^0` `grid[i][j]` is either `0`, `1`, or `2`. there will be at least one building in the `grid`.",
318,Maximum Product of Word Lengths,"Given a string array `words`, return the maximum value of `length(word[i]) * length(word[j])` where the two words do not share common letters. If no such two words exist, return `0`.


Example 1:
Input: words = [""abcw"",""baz"",""foo"",""bar"",""xtfn"",""abcdef""]
Output: 16
Explanation: The two words can be ""abcw"", ""xtfn"".


Example 2:
Input: words = [""a"",""ab"",""abc"",""d"",""cd"",""bcd"",""abcd""]
Output: 4
Explanation: The two words can be ""ab"", ""cd"".


Example 3:
Input: words = [""a"",""aa"",""aaa"",""aaaa""]
Output: 0
Explanation: No such pair of words.


Constraints:
`2 <= words.length <= 1000`
`1 <= words[i].length <= 1000`
`words[i]` consists only of lowercase English letters.",Medium,https://leetcode.com/problems/maximum-product-of-word-lengths,Google,Bit Manipulation,1010,,"given a string array `words`, return the maximum value of `length(word[i]) * length(word[j])` where the two words do not share common letters. if no such two words exist, return `0`.","input: words = [""abcw"",""baz"",""foo"",""bar"",""xtfn"",""abcdef""] output: 16 explanation: the two words can be ""abcw"", ""xtfn"". example 2: input: words = [""a"",""ab"",""abc"",""d"",""cd"",""bcd"",""abcd""] output: 4 explanation: the two words can be ""ab"", ""cd"". example 3: input: words = [""a"",""aa"",""aaa"",""aaaa""] output: 0 explanation: no such pair of words.",`2 <= words.length <= 1000` `1 <= words[i].length <= 1000` `words[i]` consists only of lowercase english letters.,
319,Bulb Switcher,"There are `n` bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.

On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb.

Return the number of bulbs that are on after `n` rounds.


Example 1:
Input: n = 3
Output: 1
Explanation: At first, the three bulbs are [off, off, off].

After the first round, the three bulbs are [on, on, on].

After the second round, the three bulbs are [on, off, on].

After the third round, the three bulbs are [on, off, off]. 
So you should return 1 because there is only one bulb is on.


Example 2:
Input: n = 0
Output: 0

Example 3:
Input: n = 1
Output: 1

Constraints:
`0 <= n <= 109`",Medium,https://leetcode.com/problems/bulb-switcher,"Microsoft,Apple","Math,Brainteaser",612,"[Bulb Switcher II, /problems/bulb-switcher-ii/, Medium], [Minimum Number of K Consecutive Bit Flips, /problems/minimum-number-of-k-consecutive-bit-flips/, Hard], [Bulb Switcher III, /problems/bulb-switcher-iii/, Medium]","there are `n` bulbs that are initially off. you first turn on all the bulbs, then you turn off every second bulb. on the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). for the `ith` round, you toggle every `i` bulb. for the `nth` round, you only toggle the last bulb. return the number of bulbs that are on after `n` rounds.","input: n = 3 output: 1 explanation: at first, the three bulbs are [off, off, off]. after the first round, the three bulbs are [on, on, on]. after the second round, the three bulbs are [on, off, on]. after the third round, the three bulbs are [on, off, off]. so you should return 1 because there is only one bulb is on. example 2: input: n = 0 output: 0 example 3: input: n = 1 output: 1",`0 <= n <= 10^9`,
320,Generalized Abbreviation,"A word's generalized abbreviation can be constructed by taking any number of non-overlapping substrings and replacing them with their respective lengths. For example, `""abcde""` can be abbreviated into `""a3e""` (`""bcd""` turned into `""3""`), `""1bcd1""` (`""a""` and `""e""` both turned into `""1""`), and `""23""` (`""ab""` turned into `""2""` and `""cde""` turned into `""3""`).

Given a string `word`, return a list of all the possible generalized abbreviations of `word`. Return the answer in any order.


Example 1:
Input: word = ""word""
Output: [""4"",""3d"",""2r1"",""2rd"",""1o2"",""1o1d"",""1or1"",""1ord"",""w3"",""w2d"",""w1r1"",""w1rd"",""wo2"",""wo1d"",""wor1"",""word""]

Example 2:
Input: word = ""a""
Output: [""1"",""a""]

Constraints:
`1 <= word.length <= 15`
`word` consists of only lowercase English letters.",Medium,https://leetcode.com/problems/generalized-abbreviation,ByteDance,"Backtracking,Bit Manipulation",496,"[Subsets, /problems/subsets/, Medium], [Unique Word Abbreviation, /problems/unique-word-abbreviation/, Medium], [Minimum Unique Word Abbreviation, /problems/minimum-unique-word-abbreviation/, Hard]","a word's generalized abbreviation can be constructed by taking any number of non-overlapping substrings and replacing them with their respective lengths. for example, `""abcde""` can be abbreviated into `""a3e""` (`""bcd""` turned into `""3""`), `""1bcd1""` (`""a""` and `""e""` both turned into `""1""`), and `""23""` (`""ab""` turned into `""2""` and `""cde""` turned into `""3""`). given a string `word`, return a list of all the possible generalized abbreviations of `word`. return the answer in any order.","input: word = ""word"" output: [""4"",""3d"",""2r1"",""2rd"",""1o2"",""1o1d"",""1or1"",""1ord"",""w3"",""w2d"",""w1r1"",""w1rd"",""wo2"",""wo1d"",""wor1"",""word""] example 2: input: word = ""a"" output: [""1"",""a""]",`1 <= word.length <= 15` `word` consists of only lowercase english letters.,
321,Create Maximum Number,"You are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. You are also given an integer `k`.

Create the maximum number of length `k <= m + n` from digits of the two numbers. The relative order of the digits from the same array must be preserved.

Return an array of the `k` digits representing the answer.


Example 1:
Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5
Output: [9,8,6,5,3]

Example 2:
Input: nums1 = [6,7], nums2 = [6,0,4], k = 5
Output: [6,7,6,0,4]

Example 3:
Input: nums1 = [3,9], nums2 = [8,9], k = 3
Output: [9,8,9]

Constraints:
`m == nums1.length`
`n == nums2.length`
`1 <= m, n <= 500`
`0 <= nums1[i], nums2[i] <= 9`
`1 <= k <= m + n`
Follow up: Try to optimize your time and space complexity.",Hard,https://leetcode.com/problems/create-maximum-number,Apple,"Dynamic Programming,Greedy",927,"[Remove K Digits, /problems/remove-k-digits/, Medium], [Maximum Swap, /problems/maximum-swap/, Medium]",you are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. you are also given an integer `k`. create the maximum number of length `k <= m + n` from digits of the two numbers. the relative order of the digits from the same array must be preserved. return an array of the `k` digits representing the answer.,"input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5 output: [9,8,6,5,3] example 2: input: nums1 = [6,7], nums2 = [6,0,4], k = 5 output: [6,7,6,0,4] example 3: input: nums1 = [3,9], nums2 = [8,9], k = 3 output: [9,8,9]","`m == nums1.length` `n == nums2.length` `1 <= m, n <= 500` `0 <= nums1[i], nums2[i] <= 9` `1 <= k <= m + n`",try to optimize your time and space complexity.
322,Coin Change,"You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return `-1`.

You may assume that you have an infinite number of each kind of coin.


Example 1:
Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:
Input: coins = [2], amount = 3
Output: -1

Example 3:
Input: coins = [1], amount = 0
Output: 0

Example 4:
Input: coins = [1], amount = 1
Output: 1

Example 5:
Input: coins = [1], amount = 2
Output: 2

Constraints:
`1 <= coins.length <= 12`
`1 <= coins[i] <= 231 - 1`
`0 <= amount <= 104`",Medium,https://leetcode.com/problems/coin-change,"Amazon,Bloomberg,Goldman Sachs,Walmart Labs,Apple,Microsoft,Airbnb,Uber,Oracle,Facebook,BlackRock",Dynamic Programming,6593,"[Minimum Cost For Tickets, /problems/minimum-cost-for-tickets/, Medium]","you are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money. return the fewest number of coins that you need to make up that amount. if that amount of money cannot be made up by any combination of the coins, return `-1`. you may assume that you have an infinite number of each kind of coin.","input: coins = [1,2,5], amount = 11 output: 3 explanation: 11 = 5 + 5 + 1 example 2: input: coins = [2], amount = 3 output: -1 example 3: input: coins = [1], amount = 0 output: 0 example 4: input: coins = [1], amount = 1 output: 1 example 5: input: coins = [1], amount = 2 output: 2",`1 <= coins.length <= 12` `1 <= coins[i] <= 231 - 1` `0 <= amount <= 10^4`,
323,Number of Connected Components in an Undirected Graph,"You have a graph of `n` nodes. You are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between `ai` and `bi` in the graph.

Return the number of connected components in the graph.


Example 1:
Input: n = 5, edges = [[0,1],[1,2],[3,4]]
Output: 2

Example 2:
Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]
Output: 1

Constraints:
`1 <= n <= 2000`
`1 <= edges.length <= 5000`
`edges[i].length == 2`
`0 <= ai <= bi < n`
`ai != bi`
There are no repeated edges.",Medium,https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph,"Amazon,Facebook,LinkedIn,Microsoft,Apple","Depth-first Search,Breadth-first Search,Union Find,Graph",1120,"[Number of Islands, /problems/number-of-islands/, Medium], [Graph Valid Tree, /problems/graph-valid-tree/, Medium], [Number of Provinces, /problems/number-of-provinces/, Medium]","you have a graph of `n` nodes. you are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between `ai` and `bi` in the graph. return the number of connected components in the graph.","input: n = 5, edges = [[0,1],[1,2],[3,4]] output: 2 example 2: input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]] output: 1",`1 <= n <= 2000` `1 <= edges.length <= 5000` `edges[i].length == 2` `0 <= ai <= bi < n` `ai != bi` there are no repeated edges.,
324,Wiggle Sort II,"Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`.

You may assume the input array always has a valid answer.


Example 1:
Input: nums = [1,5,1,1,6,4]
Output: [1,6,1,5,1,4]
Explanation: [1,4,1,5,1,6] is also accepted.


Example 2:
Input: nums = [1,3,2,2,3,1]
Output: [2,3,1,3,1,2]

Constraints:
`1 <= nums.length <= 5 * 104`
`0 <= nums[i] <= 5000`
It is guaranteed that there will be an answer for the given input `nums`.

Follow Up: Can you do it in `O(n)` time and/or in-place with `O(1)` extra space?",Medium,https://leetcode.com/problems/wiggle-sort-ii,Amazon,Sort,1350,"[Sort Colors, /problems/sort-colors/, Medium], [Kth Largest Element in an Array, /problems/kth-largest-element-in-an-array/, Medium], [Wiggle Sort, /problems/wiggle-sort/, Medium]","given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`. you may assume the input array always has a valid answer.","input: nums = [1,5,1,1,6,4] output: [1,6,1,5,1,4] explanation: [1,4,1,5,1,6] is also accepted. example 2: input: nums = [1,3,2,2,3,1] output: [2,3,1,3,1,2]",`1 <= nums.length <= 5 * 10^4` `0 <= nums[i] <= 5000` it is guaranteed that there will be an answer for the given input `nums`.,can you do it in `o(n)` time and/or in-place with `o(1)` extra space?
325,Maximum Size Subarray Sum Equals k,"Given an integer array `nums` and an integer `k`, return the maximum length of a subarray that sums to `k`. If there isn't one, return `0` instead.


Example 1:
Input: nums = [1,-1,5,-2,3], k = 3
Output: 4
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.


Example 2:
Input: nums = [-2,-1,2,1], k = 1
Output: 2
Explanation: The subarray [-1, 2] sums to 1 and is the longest.


Constraints:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`-105 <= k <= 105`
Follow Up: Can you do it in `O(n)` time?",Medium,https://leetcode.com/problems/maximum-size-subarray-sum-equals-k,"Facebook,Microsoft",Hash Table,1179,"[Minimum Size Subarray Sum, /problems/minimum-size-subarray-sum/, Medium], [Range Sum Query - Immutable, /problems/range-sum-query-immutable/, Easy], [Contiguous Array, /problems/contiguous-array/, Medium], [Subarray Product Less Than K, /problems/subarray-product-less-than-k/, Medium]","given an integer array `nums` and an integer `k`, return the maximum length of a subarray that sums to `k`. if there isn't one, return `0` instead.","input: nums = [1,-1,5,-2,3], k = 3 output: 4 explanation: the subarray [1, -1, 5, -2] sums to 3 and is the longest. example 2: input: nums = [-2,-1,2,1], k = 1 output: 2 explanation: the subarray [-1, 2] sums to 1 and is the longest.",`1 <= nums.length <= 10^4` `-10^4 <= nums[i] <= 10^4` `-10^5 <= k <= 10^5`,can you do it in `o(n)` time?
326,Power of Three,"Given an integer `n`, return `true` if it is a power of three. Otherwise, return `false`.

An integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.


Example 1:
Input: n = 27
Output: true

Example 2:
Input: n = 0
Output: false

Example 3:
Input: n = 9
Output: true

Example 4:
Input: n = 45
Output: false

Constraints:
`-231 <= n <= 231 - 1`
Follow up: Could you solve it without loops/recursion?",Easy,https://leetcode.com/problems/power-of-three,Google,Math,22,"[Power of Two, /problems/power-of-two/, Easy], [Power of Four, /problems/power-of-four/, Easy], [Check if Number is a Sum of Powers of Three, /problems/check-if-number-is-a-sum-of-powers-of-three/, Medium]","given an integer `n`, return `true` if it is a power of three. otherwise, return `false`. an integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.",input: n = 27 output: true example 2: input: n = 0 output: false example 3: input: n = 9 output: true example 4: input: n = 45 output: false,`-231 <= n <= 231 - 1`,could you solve it without loops/recursion?
327,Count of Range Sum,"Given an integer array `nums` and two integers `lower` and `upper`, return the number of range sums that lie in `[lower, upper]` inclusive.

Range sum `S(i, j)` is defined as the sum of the elements in `nums` between indices `i` and `j` inclusive, where `i <= j`.


Example 1:
Input: nums = [-2,5,-1], lower = -2, upper = 2
Output: 3
Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.


Example 2:
Input: nums = [0], lower = 0, upper = 0
Output: 1

Constraints:
`1 <= nums.length <= 104`
`-231 <= nums[i] <= 231 - 1`
`-3 * 104 <= lower <= upper <= 3 * 104`
Follow up: A naive algorithm of `O(n2)` is trivial, Could you do better than that?",Hard,https://leetcode.com/problems/count-of-range-sum,"Amazon,Google","Binary Search,Divide and Conquer,Sort,Binary Indexed Tree,Segment Tree",1016,"[Count of Smaller Numbers After Self, /problems/count-of-smaller-numbers-after-self/, Hard], [Reverse Pairs, /problems/reverse-pairs/, Hard]","given an integer array `nums` and two integers `lower` and `upper`, return the number of range sums that lie in `[lower, upper]` inclusive. range sum `s(i, j)` is defined as the sum of the elements in `nums` between indices `i` and `j` inclusive, where `i <= j`.","input: nums = [-2,5,-1], lower = -2, upper = 2 output: 3 explanation: the three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2. example 2: input: nums = [0], lower = 0, upper = 0 output: 1",`1 <= nums.length <= 10^4` `-231 <= nums[i] <= 231 - 1` `-3 * 10^4 <= lower <= upper <= 3 * 10^4`,"a naive algorithm of `o(n2)` is trivial, could you do better than that?"
328,Odd Even Linked List,"Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.


Example 1:
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

Example 2:
Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]

Constraints:
The number of nodes in the linked list is in the range `[0, 104]`.

`-106 <= Node.val <= 106`
Follow up: Could you solve it in `O(1)` space complexity and `O(nodes)` time complexity?",Medium,https://leetcode.com/problems/odd-even-linked-list,"Bloomberg,Oracle,Facebook,Google",Linked List,2966,"[Split Linked List in Parts, /problems/split-linked-list-in-parts/, Medium]","given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list. the first node is considered odd, and the second node is even, and so on. note that the relative order inside both the even and odd groups should remain as it was in the input.","input: head = [1,2,3,4,5] output: [1,3,5,2,4] example 2: input: head = [2,1,3,5,6,4,7] output: [2,3,6,7,1,5,4]","the number of nodes in the linked list is in the range `[0, 10^4]`. `-10^6 <= node.val <= 10^6`",could you solve it in `o(1)` space complexity and `o(nodes)` time complexity?
329,Longest Increasing Path in a Matrix,"Given an `m x n` integers `matrix`, return the length of the longest increasing path in `matrix`.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).


Example 1:
Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is `[1, 2, 6, 9]`.


Example 2:
Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is `[3, 4, 5, 6]`. Moving diagonally is not allowed.


Example 3:
Input: matrix = [[1]]
Output: 1

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 200`
`0 <= matrix[i][j] <= 231 - 1`",Hard,https://leetcode.com/problems/longest-increasing-path-in-a-matrix,"Google,Facebook,Bloomberg,Amazon,ByteDance,DoorDash","Depth-first Search,Topological Sort,Memoization",2888,,"given an `m x n` integers `matrix`, return the length of the longest increasing path in `matrix`. from each cell, you can either move in four directions: left, right, up, or down. you may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).","input: matrix = [[9,9,4],[6,6,8],[2,1,1]] output: 4 explanation: the longest increasing path is `[1, 2, 6, 9]`. example 2: input: matrix = [[3,4,5],[3,2,6],[2,2,1]] output: 4 explanation: the longest increasing path is `[3, 4, 5, 6]`. moving diagonally is not allowed. example 3: input: matrix = [[1]] output: 1","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 200` `0 <= matrix[i][j] <= 231 - 1`",
330,Patching Array,"Given a sorted integer array `nums` and an integer `n`, add/patch elements to the array such that any number in the range `[1, n]` inclusive can be formed by the sum of some elements in the array.

Return the minimum number of patches required.


Example 1:
Input: nums = [1,3], n = 6
Output: 1
Explanation:
Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.

Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].

Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].

So we only need 1 patch.


Example 2:
Input: nums = [1,5,10], n = 20
Output: 2
Explanation: The two patches can be [2, 4].


Example 3:
Input: nums = [1,2,2], n = 5
Output: 0

Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 104`
`nums` is sorted in ascending order.

`1 <= n <= 231 - 1`",Hard,https://leetcode.com/problems/patching-array,Google,Greedy,630,"[Maximum Number of Consecutive Values You Can Make, /problems/maximum-number-of-consecutive-values-you-can-make/, Medium]","given a sorted integer array `nums` and an integer `n`, add/patch elements to the array such that any number in the range `[1, n]` inclusive can be formed by the sum of some elements in the array. return the minimum number of patches required.","input: nums = [1,3], n = 6 output: 1 explanation: combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4. now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3]. possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6]. so we only need 1 patch. example 2: input: nums = [1,5,10], n = 20 output: 2 explanation: the two patches can be [2, 4]. example 3: input: nums = [1,2,2], n = 5 output: 0",`1 <= nums.length <= 1000` `1 <= nums[i] <= 10^4` `nums` is sorted in ascending order. `1 <= n <= 231 - 1`,
331,Verify Preorder Serialization of a Binary Tree,"One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as `'#'`.

For example, the above binary tree can be serialized to the string `""9,3,4,#,#,1,#,#,2,#,6,#,#""`, where `'#'` represents a null node.

Given a string of comma-separated values `preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree.

It is guaranteed that each comma-separated value in the string must be either an integer or a character `'#'` representing null pointer.

You may assume that the input format is always valid.

For example, it could never contain two consecutive commas, such as `""1,,3""`.


Example 1:
Input: preorder = ""9,3,4,#,#,1,#,#,2,#,6,#,#""
Output: true

Example 2:
Input: preorder = ""1,#""
Output: false

Example 3:
Input: preorder = ""9,#,#,1""
Output: false

Constraints:
`1 <= preorder.length <= 104`
`preoder` consist of integers in the range `[0, 100]` and `'#'` separated by commas `','`.

Follow up: Find an algorithm without reconstructing the tree.",Medium,https://leetcode.com/problems/verify-preorder-serialization-of-a-binary-tree,Google,Stack,938,,"one way to serialize a binary tree is to use preorder traversal. when we encounter a non-null node, we record the node's value. if it is a null node, we record using a sentinel value such as `'#'`. for example, the above binary tree can be serialized to the string `""9,3,4,#,#,1,#,#,2,#,6,#,#""`, where `'#'` represents a null node. given a string of comma-separated values `preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree. it is guaranteed that each comma-separated value in the string must be either an integer or a character `'#'` representing null pointer. you may assume that the input format is always valid. for example, it could never contain two consecutive commas, such as `""1,,3""`.","input: preorder = ""9,3,4,#,#,1,#,#,2,#,6,#,#"" output: true example 2: input: preorder = ""1,#"" output: false example 3: input: preorder = ""9,#,#,1"" output: false","`1 <= preorder.length <= 10^4` `preoder` consist of integers in the range `[0, 10^0]` and `'#'` separated by commas `','`.",find an algorithm without reconstructing the tree.
332,Reconstruct Itinerary,"You are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.

All of the tickets belong to a man who departs from `""JFK""`, thus, the itinerary must begin with `""JFK""`. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.

For example, the itinerary `[""JFK"", ""LGA""]` has a smaller lexical order than `[""JFK"", ""LGB""]`.

You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.


Example 1:
Input: tickets = [[""MUC"",""LHR""],[""JFK"",""MUC""],[""SFO"",""SJC""],[""LHR"",""SFO""]]
Output: [""JFK"",""MUC"",""LHR"",""SFO"",""SJC""]

Example 2:
Input: tickets = [[""JFK"",""SFO""],[""JFK"",""ATL""],[""SFO"",""ATL""],[""ATL"",""JFK""],[""ATL"",""SFO""]]
Output: [""JFK"",""ATL"",""JFK"",""SFO"",""ATL"",""SFO""]
Explanation: Another possible reconstruction is [""JFK"",""SFO"",""ATL"",""JFK"",""ATL"",""SFO""] but it is larger in lexical order.


Constraints:
`1 <= tickets.length <= 300`
`tickets[i].length == 2`
`fromi.length == 3`
`toi.length == 3`
`fromi` and `toi` consist of uppercase English letters.

`fromi != toi`",Medium,https://leetcode.com/problems/reconstruct-itinerary,"Uber,Twilio,Amazon,Bloomberg,Facebook,Microsoft,Intuit,Expedia,Qualtrics,Twitter,Google,eBay,VMware","Depth-first Search,Graph",2621,,"you are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. reconstruct the itinerary in order and return it. all of the tickets belong to a man who departs from `""jfk""`, thus, the itinerary must begin with `""jfk""`. if there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string. for example, the itinerary `[""jfk"", ""lga""]` has a smaller lexical order than `[""jfk"", ""lgb""]`. you may assume all tickets form at least one valid itinerary. you must use all the tickets once and only once.","input: tickets = [[""muc"",""lhr""],[""jfk"",""muc""],[""sfo"",""sjc""],[""lhr"",""sfo""]] output: [""jfk"",""muc"",""lhr"",""sfo"",""sjc""] example 2: input: tickets = [[""jfk"",""sfo""],[""jfk"",""atl""],[""sfo"",""atl""],[""atl"",""jfk""],[""atl"",""sfo""]] output: [""jfk"",""atl"",""jfk"",""sfo"",""atl"",""sfo""] explanation: another possible reconstruction is [""jfk"",""sfo"",""atl"",""jfk"",""atl"",""sfo""] but it is larger in lexical order.",`1 <= tickets.length <= 300` `tickets[i].length == 2` `fromi.length == 3` `toi.length == 3` `fromi` and `toi` consist of uppercase english letters. `fromi != toi`,
333,Largest BST Subtree,"Given the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes.

A Binary Search Tree (BST) is a tree in which all the nodes follow the below-mentioned properties:
The left subtree values are less than the value of their parent (root) node's value.

The right subtree values are greater than the value of their parent (root) node's value.

Note: A subtree must include all of its descendants.

Follow up: Can you figure out ways to solve it with O(n) time complexity?

Example 1:
Input: root = [10,5,15,1,8,null,7]
Output: 3
Explanation: The Largest BST Subtree in this case is the highlighted one. The return value is the subtree's size, which is 3.


Example 2:
Input: root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]
Output: 2

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-104 <= Node.val <= 104`",Medium,https://leetcode.com/problems/largest-bst-subtree,"Facebook,Bloomberg",Tree,840,,"given the root of a binary tree, find the largest subtree, which is also a binary search tree (bst), where the largest means subtree has the largest number of nodes. a binary search tree (bst) is a tree in which all the nodes follow the below-mentioned properties: the left subtree values are less than the value of their parent (root) node's value. the right subtree values are greater than the value of their parent (root) node's value. note: a subtree must include all of its descendants.","input: root = [10,5,15,1,8,null,7] output: 3 explanation: the largest bst subtree in this case is the highlighted one. the return value is the subtree's size, which is 3. example 2: input: root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1] output: 2","the number of nodes in the tree is in the range `[0, 10^4]`. `-10^4 <= node.val <= 10^4`","can you figure out ways to solve it with o(n) time complexity? example 1: input: root = [10,5,15,1,8,null,7] output: 3 explanation: the largest bst subtree in this case is the highlighted one. the return value is the subtree's size, which is 3. example 2: input: root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1] output: 2 constraints: the number of nodes in the tree is in the range `[0, 104]`. `-104 <= node.val <= 104`"
334,Increasing Triplet Subsequence,"Given an integer array `nums`, return `true` if there exists a triple of indices `(i, j, k)` such that `i < j < k` and `nums[i] < nums[j] < nums[k]`. If no such indices exists, return `false`.


Example 1:
Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.


Example 2:
Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.


Example 3:
Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.


Constraints:
`1 <= nums.length <= 105`
`-231 <= nums[i] <= 231 - 1`
Follow up: Could you implement a solution that runs in `O(n)` time complexity and `O(1)` space complexity?",Medium,https://leetcode.com/problems/increasing-triplet-subsequence,Google,,2380,,"given an integer array `nums`, return `true` if there exists a triple of indices `(i, j, k)` such that `i < j < k` and `nums[i] < nums[j] < nums[k]`. if no such indices exists, return `false`.","input: nums = [1,2,3,4,5] output: true explanation: any triplet where i < j < k is valid. example 2: input: nums = [5,4,3,2,1] output: false explanation: no triplet exists. example 3: input: nums = [2,1,5,0,4,6] output: true explanation: the triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.",`1 <= nums.length <= 10^5` `-231 <= nums[i] <= 231 - 1`,could you implement a solution that runs in `o(n)` time complexity and `o(1)` space complexity?
335,Self Crossing,"You are given an array of integers `distance`.

You start at point `(0,0)` on an X-Y plane and you move `distance[0]` meters to the north, then `distance[1]` meters to the west, `distance[2]` meters to the south, `distance[3]` meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.

Return `true` if your path crosses itself, and `false` if it does not.


Example 1:
Input: distance = [2,1,1,2]
Output: true

Example 2:
Input: distance = [1,2,3,4]
Output: false

Example 3:
Input: distance = [1,1,1,1]
Output: true

Constraints:
`1 <= distance.length <= 500`
`1 <= distance[i] <= 500`
Follow up: Could you write a one-pass algorithm with `O(1)` extra space?",Hard,https://leetcode.com/problems/self-crossing,"Amazon,Google",Math,177,,"you are given an array of integers `distance`. you start at point `(0,0)` on an x-y plane and you move `distance[0]` meters to the north, then `distance[1]` meters to the west, `distance[2]` meters to the south, `distance[3]` meters to the east, and so on. in other words, after each move, your direction changes counter-clockwise. return `true` if your path crosses itself, and `false` if it does not.","input: distance = [2,1,1,2] output: true example 2: input: distance = [1,2,3,4] output: false example 3: input: distance = [1,1,1,1] output: true",`1 <= distance.length <= 500` `1 <= distance[i] <= 500`,could you write a one-pass algorithm with `o(1)` extra space?
336,Palindrome Pairs,"Given a list of unique words, return all the pairs of the distinct indices `(i, j)` in the given list, so that the concatenation of the two words `words[i] + words[j]` is a palindrome.


Example 1:
Input: words = [""abcd"",""dcba"",""lls"",""s"",""sssll""]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation: The palindromes are [""dcbaabcd"",""abcddcba"",""slls"",""llssssll""]

Example 2:
Input: words = [""bat"",""tab"",""cat""]
Output: [[0,1],[1,0]]
Explanation: The palindromes are [""battab"",""tabbat""]

Example 3:
Input: words = [""a"",""""]
Output: [[0,1],[1,0]]

Constraints:
`1 <= words.length <= 5000`
`0 <= words[i].length <= 300`
`words[i]` consists of lower-case English letters.",Hard,https://leetcode.com/problems/palindrome-pairs,"Airbnb,ByteDance,Facebook","Hash Table,String,Trie",1742,"[Longest Palindromic Substring, /problems/longest-palindromic-substring/, Medium], [Shortest Palindrome, /problems/shortest-palindrome/, Hard]","given a list of unique words, return all the pairs of the distinct indices `(i, j)` in the given list, so that the concatenation of the two words `words[i] + words[j]` is a palindrome.","input: words = [""abcd"",""dcba"",""lls"",""s"",""sssll""] output: [[0,1],[1,0],[3,2],[2,4]] explanation: the palindromes are [""dcbaabcd"",""abcddcba"",""slls"",""llssssll""] example 2: input: words = [""bat"",""tab"",""cat""] output: [[0,1],[1,0]] explanation: the palindromes are [""battab"",""tabbat""] example 3: input: words = [""a"",""""] output: [[0,1],[1,0]]",`1 <= words.length <= 5000` `0 <= words[i].length <= 300` `words[i]` consists of lower-case english letters.,
337,House Robber III,"The thief has found himself a new place for his thievery again. There is only one entrance to this area, called `root`.

Besides the `root`, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.

Given the `root` of the binary tree, return the maximum amount of money the thief can rob without alerting the police.


Example 1:
Input: root = [3,2,3,null,3,null,1]
Output: 7
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.


Example 2:
Input: root = [3,4,5,1,3,null,1]
Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`0 <= Node.val <= 104`",Medium,https://leetcode.com/problems/house-robber-iii,Amazon,"Dynamic Programming,Tree,Depth-first Search",3919,"[House Robber, /problems/house-robber/, Medium], [House Robber II, /problems/house-robber-ii/, Medium]","the thief has found himself a new place for his thievery again. there is only one entrance to this area, called `root`. besides the `root`, each house has one and only one parent house. after a tour, the smart thief realized that all houses in this place form a binary tree. it will automatically contact the police if two directly-linked houses were broken into on the same night. given the `root` of the binary tree, return the maximum amount of money the thief can rob without alerting the police.","input: root = [3,2,3,null,3,null,1] output: 7 explanation: maximum amount of money the thief can rob = 3 + 3 + 1 = 7. example 2: input: root = [3,4,5,1,3,null,1] output: 9 explanation: maximum amount of money the thief can rob = 4 + 5 = 9.","the number of nodes in the tree is in the range `[1, 10^4]`. `0 <= node.val <= 10^4`",
338,Counting Bits,"Given an integer `num`, return an array of the number of `1`'s in the binary representation of every number in the range `[0, num]`.


Example 1:
Input: num = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10

Example 2:
Input: num = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101

Constraints:
`0 <= num <= 105`
Follow up:
It is very easy to come up with a solution with run time `O(32n)`. Can you do it in linear time `O(n)` and possibly in a single pass?
Could you solve it in `O(n)` space complexity?
Can you do it without using any built-in function (i.e., like `__builtin_popcount` in C++)?",Medium,https://leetcode.com/problems/counting-bits,"Amazon,Blizzard","Dynamic Programming,Bit Manipulation",3759,"[Number of 1 Bits, /problems/number-of-1-bits/, Easy]","given an integer `num`, return an array of the number of `1`'s in the binary representation of every number in the range `[0, num]`.","input: num = 2 output: [0,1,1] explanation: 0 --> 0 1 --> 1 2 --> 10 example 2: input: num = 5 output: [0,1,1,2,1,2] explanation: 0 --> 0 1 --> 1 2 --> 10 3 --> 11 4 --> 100 5 --> 101",`0 <= num <= 10^5`,"it is very easy to come up with a solution with run time `o(32n)`. can you do it in linear time `o(n)` and possibly in a single pass? could you solve it in `o(n)` space complexity? can you do it without using any built-in function (i.e., like `__builtin_popcount` in c++)?"
339,Nested List Weight Sum,"You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.

The depth of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth.

Return the sum of each integer in `nestedList` multiplied by its depth.


Example 1:
Input: nestedList = [[1,1],2,[1,1]]
Output: 10
Explanation: Four 1's at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10.


Example 2:
Input: nestedList = [1,[4,[6]]]
Output: 27
Explanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27.


Example 3:
Input: nestedList = [0]
Output: 0

Constraints:
`1 <= nestedList.length <= 50`
The values of the integers in the nested list is in the range `[-100, 100]`.

The maximum depth of any integer is less than or equal to `50`.",Medium,https://leetcode.com/problems/nested-list-weight-sum,"Facebook,LinkedIn,Amazon","Depth-first Search,Breadth-first Search",799,"[Nested List Weight Sum II, /problems/nested-list-weight-sum-ii/, Medium], [Array Nesting, /problems/array-nesting/, Medium], [Employee Importance, /problems/employee-importance/, Easy]","you are given a nested list of integers `nestedlist`. each element is either an integer or a list whose elements may also be integers or other lists. the depth of an integer is the number of lists that it is inside of. for example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth. return the sum of each integer in `nestedlist` multiplied by its depth.","input: nestedlist = [[1,1],2,[1,1]] output: 10 explanation: four 1's at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10. example 2: input: nestedlist = [1,[4,[6]]] output: 27 explanation: one 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27. example 3: input: nestedlist = [0] output: 0","`1 <= nestedlist.length <= 50` the values of the integers in the nested list is in the range `[-10^0, 10^0]`. the maximum depth of any integer is less than or equal to `50`.",
340,Longest Substring with At Most K Distinct Characters,"Given a string `s` and an integer `k`, return the length of the longest substring of `s` that contains at most `k` distinct characters.


Example 1:
Input: s = ""eceba"", k = 2
Output: 3
Explanation: The substring is ""ece"" with length 3.


Example 2:
Input: s = ""aa"", k = 1
Output: 2
Explanation: The substring is ""aa"" with length 2.


Constraints:
`1 <= s.length <= 5 * 104`
`0 <= k <= 50`",Medium,https://leetcode.com/problems/longest-substring-with-at-most-k-distinct-characters,"Facebook,Uber,Microsoft,Wish,Twitter","Hash Table,Two Pointers,String,Sliding Window",1579,"[Longest Substring Without Repeating Characters, /problems/longest-substring-without-repeating-characters/, Medium], [Longest Substring with At Most Two Distinct Characters, /problems/longest-substring-with-at-most-two-distinct-characters/, Medium], [Longest Repeating Character Replacement, /problems/longest-repeating-character-replacement/, Medium], [Subarrays with K Different Integers, /problems/subarrays-with-k-different-integers/, Hard], [Max Consecutive Ones III, /problems/max-consecutive-ones-iii/, Medium]","given a string `s` and an integer `k`, return the length of the longest substring of `s` that contains at most `k` distinct characters.","input: s = ""eceba"", k = 2 output: 3 explanation: the substring is ""ece"" with length 3. example 2: input: s = ""aa"", k = 1 output: 2 explanation: the substring is ""aa"" with length 2.",`1 <= s.length <= 5 * 10^4` `0 <= k <= 50`,
341,Flatten Nested List Iterator,"You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.

Implement the `NestedIterator` class:
`NestedIterator(List<NestedInteger> nestedList)` Initializes the iterator with the nested list `nestedList`.

`int next()` Returns the next integer in the nested list.

`boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise.


Example 1:
Input: nestedList = [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].


Example 2:
Input: nestedList = [1,[4,[6]]]
Output: [1,4,6]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].


Constraints:
`1 <= nestedList.length <= 500`
The values of the integers in the nested list is in the range `[-106, 106]`.",Medium,https://leetcode.com/problems/flatten-nested-list-iterator,"Facebook,Amazon,Airbnb,Apple,LinkedIn,Bloomberg,Oracle","Stack,Design",2109,"[Flatten 2D Vector, /problems/flatten-2d-vector/, Medium], [Zigzag Iterator, /problems/zigzag-iterator/, Medium], [Mini Parser, /problems/mini-parser/, Medium], [Array Nesting, /problems/array-nesting/, Medium]",you are given a nested list of integers `nestedlist`. each element is either an integer or a list whose elements may also be integers or other lists. implement an iterator to flatten it. implement the `nestediterator` class: `nestediterator(list<nestedinteger> nestedlist)` initializes the iterator with the nested list `nestedlist`. `int next()` returns the next integer in the nested list. `boolean hasnext()` returns `true` if there are still some integers in the nested list and `false` otherwise.,"input: nestedlist = [[1,1],2,[1,1]] output: [1,1,2,1,1] explanation: by calling next repeatedly until hasnext returns false, the order of elements returned by next should be: [1,1,2,1,1]. example 2: input: nestedlist = [1,[4,[6]]] output: [1,4,6] explanation: by calling next repeatedly until hasnext returns false, the order of elements returned by next should be: [1,4,6].","`1 <= nestedlist.length <= 500` the values of the integers in the nested list is in the range `[-10^6, 10^6]`.",
342,Power of Four,"Given an integer `n`, return `true` if it is a power of four. Otherwise, return `false`.

An integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`.


Example 1:
Input: n = 16
Output: true

Example 2:
Input: n = 5
Output: false

Example 3:
Input: n = 1
Output: true

Constraints:
`-231 <= n <= 231 - 1`
Follow up: Could you solve it without loops/recursion?",Easy,https://leetcode.com/problems/power-of-four,Two Sigma,Bit Manipulation,841,"[Power of Two, /problems/power-of-two/, Easy], [Power of Three, /problems/power-of-three/, Easy]","given an integer `n`, return `true` if it is a power of four. otherwise, return `false`. an integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`.",input: n = 16 output: true example 2: input: n = 5 output: false example 3: input: n = 1 output: true,`-231 <= n <= 231 - 1`,could you solve it without loops/recursion?
343,Integer Break,"Given an integer `n`, break it into the sum of `k` positive integers, where `k >= 2`, and maximize the product of those integers.

Return the maximum product you can get.


Example 1:
Input: n = 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.


Example 2:
Input: n = 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.


Constraints:
`2 <= n <= 58`",Medium,https://leetcode.com/problems/integer-break,"Google,Adobe","Math,Dynamic Programming",1515,"[Maximize Number of Nice Divisors, /problems/maximize-number-of-nice-divisors/, Hard]","given an integer `n`, break it into the sum of `k` positive integers, where `k >= 2`, and maximize the product of those integers. return the maximum product you can get.","input: n = 2 output: 1 explanation: 2 = 1 + 1, 1 × 1 = 1. example 2: input: n = 10 output: 36 explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.",`2 <= n <= 58`,
344,Reverse String,"Write a function that reverses a string. The input string is given as an array of characters `s`.


Example 1:
Input: s = [""h"",""e"",""l"",""l"",""o""]
Output: [""o"",""l"",""l"",""e"",""h""]

Example 2:
Input: s = [""H"",""a"",""n"",""n"",""a"",""h""]
Output: [""h"",""a"",""n"",""n"",""a"",""H""]

Constraints:
`1 <= s.length <= 105`
`s[i]` is a printable ascii character.

Follow up: Do not allocate extra space for another array. You must do this by modifying the input array in-place with `O(1)` extra memory.",Easy,https://leetcode.com/problems/reverse-string,"Apple,Microsoft,Goldman Sachs,Amazon,Adobe,Bloomberg","Two Pointers,String",2245,"[Reverse Vowels of a String, /problems/reverse-vowels-of-a-string/, Easy], [Reverse String II, /problems/reverse-string-ii/, Easy]",write a function that reverses a string. the input string is given as an array of characters `s`.,"input: s = [""h"",""e"",""l"",""l"",""o""] output: [""o"",""l"",""l"",""e"",""h""] example 2: input: s = [""h"",""a"",""n"",""n"",""a"",""h""] output: [""h"",""a"",""n"",""n"",""a"",""h""]",`1 <= s.length <= 10^5` `s[i]` is a printable ascii character.,do not allocate extra space for another array. you must do this by modifying the input array in-place with `o(1)` extra memory.
345,Reverse Vowels of a String,"Given a string `s`, reverse only all the vowels in the string and return it.

The vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in both cases.


Example 1:
Input: s = ""hello""
Output: ""holle""

Example 2:
Input: s = ""leetcode""
Output: ""leotcede""

Constraints:
`1 <= s.length <= 3 * 105`
`s` consist of printable ASCII characters.",Easy,https://leetcode.com/problems/reverse-vowels-of-a-string,"Facebook,Google,Amazon","Two Pointers,String",986,"[Reverse String, /problems/reverse-string/, Easy], [Remove Vowels from a String, /problems/remove-vowels-from-a-string/, Easy]","given a string `s`, reverse only all the vowels in the string and return it. the vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in both cases.","input: s = ""hello"" output: ""holle"" example 2: input: s = ""leetcode"" output: ""leotcede""",`1 <= s.length <= 3 * 10^5` `s` consist of printable ascii characters.,
346,Moving Average from Data Stream,"Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.

Implement the `MovingAverage` class:
`MovingAverage(int size)` Initializes the object with the size of the window `size`.

`double next(int val)` Returns the moving average of the last `size` values of the stream.


Example 1:
Input
[""MovingAverage"", ""next"", ""next"", ""next"", ""next""]
[[3], [1], [10], [3], [5]]
Output
[null, 1.0, 5.5, 4.66667, 6.0]
Explanation
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // return 1.0 = 1 / 1
movingAverage.next(10); // return 5.5 = (1 + 10) / 2
movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3

Constraints:
`1 <= size <= 1000`
`-105 <= val <= 105`
At most `104` calls will be made to `next`.",Easy,https://leetcode.com/problems/moving-average-from-data-stream,"Google,Apple,Spotify,Indeed,Amazon","Design,Queue",848,,"given a stream of integers and a window size, calculate the moving average of all integers in the sliding window. implement the `movingaverage` class: `movingaverage(int size)` initializes the object with the size of the window `size`. `double next(int val)` returns the moving average of the last `size` values of the stream.","input [""movingaverage"", ""next"", ""next"", ""next"", ""next""] [[3], [1], [10], [3], [5]] output [null, 1.0, 5.5, 4.66667, 6.0] explanation movingaverage movingaverage = new movingaverage(3); movingaverage.next(1); // return 1.0 = 1 / 1 movingaverage.next(10); // return 5.5 = (1 + 10) / 2 movingaverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3 movingaverage.next(5); // return 6.0 = (10 + 3 + 5) / 3",`1 <= size <= 1000` `-10^5 <= val <= 10^5` at most `10^4` calls will be made to `next`.,
347,Top K Frequent Elements,"Given an integer array `nums` and an integer `k`, return the `k` most frequent elements. You may return the answer in any order.


Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]

Constraints:
`1 <= nums.legth <= 105`
`k` is in the range `[1, the number of unique elements in the array]`.

It is guaranteed that the answer is unique.

Follow up: Your algorithm's time complexity must be better than `O(n log n)`, where n is the array's size.",Medium,https://leetcode.com/problems/top-k-frequent-elements,"Capital One,Facebook,Amazon,Oracle,Apple,Bloomberg,Google,ByteDance,Yelp,Microsoft,Walmart Labs,eBay","Hash Table,Heap",4738,"[Word Frequency, /problems/word-frequency/, Medium], [Kth Largest Element in an Array, /problems/kth-largest-element-in-an-array/, Medium], [Sort Characters By Frequency, /problems/sort-characters-by-frequency/, Medium], [Split Array into Consecutive Subsequences, /problems/split-array-into-consecutive-subsequences/, Medium], [Top K Frequent Words, /problems/top-k-frequent-words/, Medium], [K Closest Points to Origin, /problems/k-closest-points-to-origin/, Medium], [Sort Features by Popularity, /problems/sort-features-by-popularity/, Medium]","given an integer array `nums` and an integer `k`, return the `k` most frequent elements. you may return the answer in any order.","input: nums = [1,1,1,2,2,3], k = 2 output: [1,2] example 2: input: nums = [1], k = 1 output: [1]","`1 <= nums.legth <= 10^5` `k` is in the range `[1, the number of unique elements in the array]`. it is guaranteed that the answer is unique.","your algorithm's time complexity must be better than `o(n log n)`, where n is the array's size."
348,Design Tic-Tac-Toe,"Assume the following rules are for the tic-tac-toe game on an `n x n` board between two players:
A move is guaranteed to be valid and is placed on an empty block.

Once a winning condition is reached, no more moves are allowed.

A player who succeeds in placing `n` of their marks in a horizontal, vertical, or diagonal row wins the game.

Implement the `TicTacToe` class:
`TicTacToe(int n)` Initializes the object the size of the board `n`.

`int move(int row, int col, int player)` Indicates that player with id `player` plays at the cell `(row, col)` of the board. The move is guaranteed to be a valid move.

Follow up:
Could you do better than `O(n2)` per `move()` operation?

Example 1:
Input
[""TicTacToe"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move""]
[[3], [0, 0, 1], [0, 2, 2], [2, 2, 1], [1, 1, 2], [2, 0, 1], [1, 0, 2], [2, 1, 1]]
Output
[null, 0, 0, 0, 0, 0, 0, 1]
Explanation
TicTacToe ticTacToe = new TicTacToe(3);
Assume that player 1 is ""X"" and player 2 is ""O"" in the board.

ticTacToe.move(0, 0, 1); // return 0 (no one wins)
|X| | |
| | | |    // Player 1 makes a move at (0, 0).

| | | |
ticTacToe.move(0, 2, 2); // return 0 (no one wins)
|X| |O|
| | | |    // Player 2 makes a move at (0, 2).

| | | |
ticTacToe.move(2, 2, 1); // return 0 (no one wins)
|X| |O|
| | | |    // Player 1 makes a move at (2, 2).

| | |X|
ticTacToe.move(1, 1, 2); // return 0 (no one wins)
|X| |O|
| |O| |    // Player 2 makes a move at (1, 1).

| | |X|
ticTacToe.move(2, 0, 1); // return 0 (no one wins)
|X| |O|
| |O| |    // Player 1 makes a move at (2, 0).

|X| |X|
ticTacToe.move(1, 0, 2); // return 0 (no one wins)
|X| |O|
|O|O| |    // Player 2 makes a move at (1, 0).

|X| |X|
ticTacToe.move(2, 1, 1); // return 1 (player 1 wins)
|X| |O|
|O|O| |    // Player 1 makes a move at (2, 1).

|X|X|X|

Constraints:
`2 <= n <= 100`
player is `1` or `2`.

`1 <= row, col <= n`
`(row, col)` are unique for each different call to `move`.

At most `n2` calls will be made to `move`.",Medium,https://leetcode.com/problems/design-tic-tac-toe,"Amazon,Microsoft,Facebook,Intuit,Apple,Oracle",Design,1072,"[Valid Tic-Tac-Toe State, /problems/valid-tic-tac-toe-state/, Medium]","assume the following rules are for the tic-tac-toe game on an `n x n` board between two players: a move is guaranteed to be valid and is placed on an empty block. once a winning condition is reached, no more moves are allowed. a player who succeeds in placing `n` of their marks in a horizontal, vertical, or diagonal row wins the game. implement the `tictactoe` class: `tictactoe(int n)` initializes the object the size of the board `n`. `int move(int row, int col, int player)` indicates that player with id `player` plays at the cell `(row, col)` of the board. the move is guaranteed to be a valid move.","input [""tictactoe"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move""] [[3], [0, 0, 1], [0, 2, 2], [2, 2, 1], [1, 1, 2], [2, 0, 1], [1, 0, 2], [2, 1, 1]] output [null, 0, 0, 0, 0, 0, 0, 1] explanation tictactoe tictactoe = new tictactoe(3); assume that player 1 is ""x"" and player 2 is ""o"" in the board. tictactoe.move(0, 0, 1); // return 0 (no one wins) |x| | | | | | | // player 1 makes a move at (0, 0). | | | | tictactoe.move(0, 2, 2); // return 0 (no one wins) |x| |o| | | | | // player 2 makes a move at (0, 2). | | | | tictactoe.move(2, 2, 1); // return 0 (no one wins) |x| |o| | | | | // player 1 makes a move at (2, 2). | | |x| tictactoe.move(1, 1, 2); // return 0 (no one wins) |x| |o| | |o| | // player 2 makes a move at (1, 1). | | |x| tictactoe.move(2, 0, 1); // return 0 (no one wins) |x| |o| | |o| | // player 1 makes a move at (2, 0). |x| |x| tictactoe.move(1, 0, 2); // return 0 (no one wins) |x| |o| |o|o| | // player 2 makes a move at (1, 0). |x| |x| tictactoe.move(2, 1, 1); // return 1 (player 1 wins) |x| |o| |o|o| | // player 1 makes a move at (2, 1). |x|x|x|","`2 <= n <= 10^0` player is `1` or `2`. `1 <= row, col <= n` `(row, col)` are unique for each different call to `move`. at most `n2` calls will be made to `move`.","could you do better than `o(n2)` per `move()` operation? example 1: input [""tictactoe"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move""] [[3], [0, 0, 1], [0, 2, 2], [2, 2, 1], [1, 1, 2], [2, 0, 1], [1, 0, 2], [2, 1, 1]] output [null, 0, 0, 0, 0, 0, 0, 1] explanation tictactoe tictactoe = new tictactoe(3); assume that player 1 is ""x"" and player 2 is ""o"" in the board. tictactoe.move(0, 0, 1); // return 0 (no one wins) |x| | | | | | | // player 1 makes a move at (0, 0). | | | | tictactoe.move(0, 2, 2); // return 0 (no one wins) |x| |o| | | | | // player 2 makes a move at (0, 2). | | | | tictactoe.move(2, 2, 1); // return 0 (no one wins) |x| |o| | | | | // player 1 makes a move at (2, 2). | | |x| tictactoe.move(1, 1, 2); // return 0 (no one wins) |x| |o| | |o| | // player 2 makes a move at (1, 1). | | |x| tictactoe.move(2, 0, 1); // return 0 (no one wins) |x| |o| | |o| | // player 1 makes a move at (2, 0). |x| |x| tictactoe.move(1, 0, 2); // return 0 (no one wins) |x| |o| |o|o| | // player 2 makes a move at (1, 0). |x| |x| tictactoe.move(2, 1, 1); // return 1 (player 1 wins) |x| |o| |o|o| | // player 1 makes a move at (2, 1). |x|x|x| constraints: `2 <= n <= 100` player is `1` or `2`. `1 <= row, col <= n` `(row, col)` are unique for each different call to `move`. at most `n2` calls will be made to `move`."
349,Intersection of Two Arrays,"Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.


Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.


Constraints:
`1 <= nums1.length, nums2.length <= 1000`
`0 <= nums1[i], nums2[i] <= 1000`",Easy,https://leetcode.com/problems/intersection-of-two-arrays,"Facebook,Amazon,Bloomberg,ByteDance,Apple","Hash Table,Two Pointers,Binary Search,Sort",1338,"[Intersection of Two Arrays II, /problems/intersection-of-two-arrays-ii/, Easy], [Intersection of Three Sorted Arrays, /problems/intersection-of-three-sorted-arrays/, Easy]","given two integer arrays `nums1` and `nums2`, return an array of their intersection. each element in the result must be unique and you may return the result in any order.","input: nums1 = [1,2,2,1], nums2 = [2,2] output: [2] example 2: input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] output: [9,4] explanation: [4,9] is also accepted.","`1 <= nums1.length, nums2.length <= 1000` `0 <= nums1[i], nums2[i] <= 1000`",
350,Intersection of Two Arrays II,"Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.


Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.


Constraints:
`1 <= nums1.length, nums2.length <= 1000`
`0 <= nums1[i], nums2[i] <= 1000`
Follow up:
What if the given array is already sorted? How would you optimize your algorithm?
What if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better?
What if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?",Easy,https://leetcode.com/problems/intersection-of-two-arrays-ii,"Amazon,Facebook,Oracle,Nutanix,Microsoft","Hash Table,Two Pointers,Binary Search,Sort",2138,"[Intersection of Two Arrays, /problems/intersection-of-two-arrays/, Easy], [Find Common Characters, /problems/find-common-characters/, Easy]","given two integer arrays `nums1` and `nums2`, return an array of their intersection. each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.","input: nums1 = [1,2,2,1], nums2 = [2,2] output: [2,2] example 2: input: nums1 = [4,9,5], nums2 = [9,4,9,8,4] output: [4,9] explanation: [9,4] is also accepted.","`1 <= nums1.length, nums2.length <= 1000` `0 <= nums1[i], nums2[i] <= 1000`","what if the given array is already sorted? how would you optimize your algorithm? what if `nums1`'s size is small compared to `nums2`'s size? which algorithm is better? what if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?"
351,Android Unlock Patterns,"Android devices have a special lock screen with a `3 x 3` grid of dots. Users can set an ""unlock pattern"" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of `k` dots is a valid unlock pattern if both of the following are true:
All the dots in the sequence are distinct.

If the line segment connecting two consecutive dots in the sequence passes through any other dot, the other dot must have previously appeared in the sequence. No jumps through non-selected dots are allowed.

Here are some example valid and invalid unlock patterns:
The 1st pattern `[4,1,3,6]` is invalid because the line connecting dots `1` and `3` pass through dot `2`, but dot `2` did not previously appear in the sequence.

The 2nd pattern `[4,1,9,2]` is invalid because the line connecting dots `1` and `9` pass through dot `5`, but dot `5` did not previously appear in the sequence.

The 3rd pattern `[2,4,1,3,6]` is valid because it follows the conditions. The line connecting dots `1` and `3` meets the condition because dot `2` previously appeared in the sequence.

The 4th pattern `[6,5,4,1,9,2]` is valid because it follows the conditions. The line connecting dots `1` and `9` meets the condition because dot `5` previously appeared in the sequence.

Given two integers `m` and `n`, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least `m` keys and at most `n` keys.

Two unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.


Example 1:
Input: m = 1, n = 1
Output: 9

Example 2:
Input: m = 1, n = 2
Output: 65

Constraints:
`1 <= m, n <= 9`",Medium,https://leetcode.com/problems/android-unlock-patterns,Microsoft,"Dynamic Programming,Backtracking",470,,"android devices have a special lock screen with a `3 x 3` grid of dots. users can set an ""unlock pattern"" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. a sequence of `k` dots is a valid unlock pattern if both of the following are true: all the dots in the sequence are distinct. if the line segment connecting two consecutive dots in the sequence passes through any other dot, the other dot must have previously appeared in the sequence. no jumps through non-selected dots are allowed. here are some example valid and invalid unlock patterns: the 1st pattern `[4,1,3,6]` is invalid because the line connecting dots `1` and `3` pass through dot `2`, but dot `2` did not previously appear in the sequence. the 2nd pattern `[4,1,9,2]` is invalid because the line connecting dots `1` and `9` pass through dot `5`, but dot `5` did not previously appear in the sequence. the 3rd pattern `[2,4,1,3,6]` is valid because it follows the conditions. the line connecting dots `1` and `3` meets the condition because dot `2` previously appeared in the sequence. the 4th pattern `[6,5,4,1,9,2]` is valid because it follows the conditions. the line connecting dots `1` and `9` meets the condition because dot `5` previously appeared in the sequence. given two integers `m` and `n`, return the number of unique and valid unlock patterns of the android grid lock screen that consist of at least `m` keys and at most `n` keys. two unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.","input: m = 1, n = 1 output: 9 example 2: input: m = 1, n = 2 output: 65","`1 <= m, n <= 9`",
352,Data Stream as Disjoint Intervals,"Given a data stream input of non-negative integers `a1, a2, ..., an`, summarize the numbers seen so far as a list of disjoint intervals.

Implement the `SummaryRanges` class:
`SummaryRanges()` Initializes the object with an empty stream.

`void addNum(int val)` Adds the integer `val` to the stream.

`int[][] getIntervals()` Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`.


Example 1:
Input
[""SummaryRanges"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals""]
[[], [1], [], [3], [], [7], [], [2], [], [6], []]
Output
[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]
Explanation
SummaryRanges summaryRanges = new SummaryRanges();
summaryRanges.addNum(1);      // arr = [1]
summaryRanges.getIntervals(); // return [[1, 1]]
summaryRanges.addNum(3);      // arr = [1, 3]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]
summaryRanges.addNum(7);      // arr = [1, 3, 7]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]
summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]
summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]
summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]
summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]

Constraints:
`0 <= val <= 104`
At most `3 * 104` calls will be made to `addNum` and `getIntervals`.

Follow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?",Hard,https://leetcode.com/problems/data-stream-as-disjoint-intervals,Oracle,"Binary Search,Ordered Map",473,"[Summary Ranges, /problems/summary-ranges/, Easy], [Find Right Interval, /problems/find-right-interval/, Medium], [Range Module, /problems/range-module/, Hard]","given a data stream input of non-negative integers `a1, a2, ..., an`, summarize the numbers seen so far as a list of disjoint intervals. implement the `summaryranges` class: `summaryranges()` initializes the object with an empty stream. `void addnum(int val)` adds the integer `val` to the stream. `int[][] getintervals()` returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`.","input [""summaryranges"", ""addnum"", ""getintervals"", ""addnum"", ""getintervals"", ""addnum"", ""getintervals"", ""addnum"", ""getintervals"", ""addnum"", ""getintervals""] [[], [1], [], [3], [], [7], [], [2], [], [6], []] output [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]] explanation summaryranges summaryranges = new summaryranges(); summaryranges.addnum(1); // arr = [1] summaryranges.getintervals(); // return [[1, 1]] summaryranges.addnum(3); // arr = [1, 3] summaryranges.getintervals(); // return [[1, 1], [3, 3]] summaryranges.addnum(7); // arr = [1, 3, 7] summaryranges.getintervals(); // return [[1, 1], [3, 3], [7, 7]] summaryranges.addnum(2); // arr = [1, 2, 3, 7] summaryranges.getintervals(); // return [[1, 3], [7, 7]] summaryranges.addnum(6); // arr = [1, 2, 3, 6, 7] summaryranges.getintervals(); // return [[1, 3], [6, 7]]",`0 <= val <= 10^4` at most `3 * 10^4` calls will be made to `addnum` and `getintervals`.,what if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?
353,Design Snake Game,"Design a Snake game that is played on a device with screen size `height x width`. Play the game online if you are not familiar with the game.

The snake is initially positioned at the top left corner `(0, 0)` with a length of `1` unit.

You are given an array `food` where `food[i] = (ri, ci)` is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by `1`.

Each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.

When a piece of food appears on the screen, it is guaranteed that it will not appear on a block occupied by the snake.

The game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies after moving (i.e. a snake of length 4 cannot run into itself).

Implement the `SnakeGame` class:
`SnakeGame(int width, int height, int[][] food)` Initializes the object with a screen of size `height x width` and the positions of the `food`.

`int move(String direction)` Returns the score of the game after applying one `direction` move by the snake. If the game is over, return `-1`.


Example 1:
Input
[""SnakeGame"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move""]
[[3, 2, [[1, 2], [0, 1]]], [""R""], [""D""], [""R""], [""U""], [""L""], [""U""]]
Output
[null, 0, 0, 1, 1, 2, -1]
Explanation
SnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);
snakeGame.move(""R""); // return 0
snakeGame.move(""D""); // return 0
snakeGame.move(""R""); // return 1, snake eats the first piece of food. The second piece of food appears
                     // at (0, 1).

snakeGame.move(""U""); // return 1
snakeGame.move(""L""); // return 2, snake eats the second food. No more food appears.

snakeGame.move(""U""); // return -1, game over because snake collides with border

Constraints:
`1 <= width, height <= 104`
`1 <= food.length <= 50`
`food[i].length == 2`
`0 <= ri < height`
`0 <= ci < width`
`direction.length == 1`
`direction` is `'U'`, `'D'`, `'L'`, or `'R'`.

At most `104` calls will be made to `move`.",Medium,https://leetcode.com/problems/design-snake-game,"Amazon,Microsoft","Design,Queue",531,,"design a snake game that is played on a device with screen size `height x width`. play the game online if you are not familiar with the game. the snake is initially positioned at the top left corner `(0, 0)` with a length of `1` unit. you are given an array `food` where `food[i] = (ri, ci)` is the row and column position of a piece of food that the snake can eat. when a snake eats a piece of food, its length and the game's score both increase by `1`. each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food. when a piece of food appears on the screen, it is guaranteed that it will not appear on a block occupied by the snake. the game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies after moving (i.e. a snake of length 4 cannot run into itself). implement the `snakegame` class: `snakegame(int width, int height, int[][] food)` initializes the object with a screen of size `height x width` and the positions of the `food`. `int move(string direction)` returns the score of the game after applying one `direction` move by the snake. if the game is over, return `-1`.","input [""snakegame"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move""] [[3, 2, [[1, 2], [0, 1]]], [""r""], [""d""], [""r""], [""u""], [""l""], [""u""]] output [null, 0, 0, 1, 1, 2, -1] explanation snakegame snakegame = new snakegame(3, 2, [[1, 2], [0, 1]]); snakegame.move(""r""); // return 0 snakegame.move(""d""); // return 0 snakegame.move(""r""); // return 1, snake eats the first piece of food. the second piece of food appears // at (0, 1). snakegame.move(""u""); // return 1 snakegame.move(""l""); // return 2, snake eats the second food. no more food appears. snakegame.move(""u""); // return -1, game over because snake collides with border","`1 <= width, height <= 10^4` `1 <= food.length <= 50` `food[i].length == 2` `0 <= ri < height` `0 <= ci < width` `direction.length == 1` `direction` is `'u'`, `'d'`, `'l'`, or `'r'`. at most `10^4` calls will be made to `move`.",
354,Russian Doll Envelopes,"You are given a 2D array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and the height of an envelope.

One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.

Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).

Note: You cannot rotate an envelope.


Example 1:
Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]
Output: 3
Explanation: The maximum number of envelopes you can Russian doll is `3` ([2,3] => [5,4] => [6,7]).


Example 2:
Input: envelopes = [[1,1],[1,1],[1,1]]
Output: 1

Constraints:
`1 <= envelopes.length <= 5000`
`envelopes[i].length == 2`
`1 <= wi, hi <= 104`",Hard,https://leetcode.com/problems/russian-doll-envelopes,"Google,Amazon,ByteDance,Uber","Binary Search,Dynamic Programming",1968,"[Longest Increasing Subsequence, /problems/longest-increasing-subsequence/, Medium]","you are given a 2d array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and the height of an envelope. one envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height. return the maximum number of envelopes you can russian doll (i.e., put one inside the other). note: you cannot rotate an envelope.","input: envelopes = [[5,4],[6,4],[6,7],[2,3]] output: 3 explanation: the maximum number of envelopes you can russian doll is `3` ([2,3] => [5,4] => [6,7]). example 2: input: envelopes = [[1,1],[1,1],[1,1]] output: 1","`1 <= envelopes.length <= 5000` `envelopes[i].length == 2` `1 <= wi, hi <= 10^4`",
355,Design Twitter,"Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the `10` most recent tweets in the user's news feed.

Implement the `Twitter` class:
`Twitter()` Initializes your twitter object.

`void postTweet(int userId, int tweetId)` Composes a new tweet with ID `tweetId` by the user `userId`. Each call to this function will be made with a unique `tweetId`.

`List<Integer> getNewsFeed(int userId)` Retrieves the `10` most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.

`void follow(int followerId, int followeeId)` The user with ID `followerId` started following the user with ID `followeeId`.

`void unfollow(int followerId, int followeeId)` The user with ID `followerId` started unfollowing the user with ID `followeeId`.


Example 1:
Input
[""Twitter"", ""postTweet"", ""getNewsFeed"", ""follow"", ""postTweet"", ""getNewsFeed"", ""unfollow"", ""getNewsFeed""]
[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
Output
[null, null, [5], null, null, [6, 5], null, [5]]
Explanation
Twitter twitter = new Twitter();
twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).

twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]
twitter.follow(1, 2);    // User 1 follows user 2.

twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).

twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.

twitter.unfollow(1, 2);  // User 1 unfollows user 2.

twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.


Constraints:
`1 <= userId, followerId, followeeId <= 500`
`0 <= tweetId <= 104`
All the tweets have unique IDs.

At most `3 * 104` calls will be made to `postTweet`, `getNewsFeed`, `follow`, and `unfollow`.",Medium,https://leetcode.com/problems/design-twitter,"Paypal,Amazon,Microsoft,Yelp","Hash Table,Heap,Design",1270,"[Design a File Sharing System, /problems/design-a-file-sharing-system/, Medium]","design a simplified version of twitter where users can post tweets, follow/unfollow another user, and is able to see the `10` most recent tweets in the user's news feed. implement the `twitter` class: `twitter()` initializes your twitter object. `void posttweet(int userid, int tweetid)` composes a new tweet with id `tweetid` by the user `userid`. each call to this function will be made with a unique `tweetid`. `list<integer> getnewsfeed(int userid)` retrieves the `10` most recent tweet ids in the user's news feed. each item in the news feed must be posted by users who the user followed or by the user themself. tweets must be ordered from most recent to least recent. `void follow(int followerid, int followeeid)` the user with id `followerid` started following the user with id `followeeid`. `void unfollow(int followerid, int followeeid)` the user with id `followerid` started unfollowing the user with id `followeeid`.","input [""twitter"", ""posttweet"", ""getnewsfeed"", ""follow"", ""posttweet"", ""getnewsfeed"", ""unfollow"", ""getnewsfeed""] [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]] output [null, null, [5], null, null, [6, 5], null, [5]] explanation twitter twitter = new twitter(); twitter.posttweet(1, 5); // user 1 posts a new tweet (id = 5). twitter.getnewsfeed(1); // user 1's news feed should return a list with 1 tweet id -> [5]. return [5] twitter.follow(1, 2); // user 1 follows user 2. twitter.posttweet(2, 6); // user 2 posts a new tweet (id = 6). twitter.getnewsfeed(1); // user 1's news feed should return a list with 2 tweet ids -> [6, 5]. tweet id 6 should precede tweet id 5 because it is posted after tweet id 5. twitter.unfollow(1, 2); // user 1 unfollows user 2. twitter.getnewsfeed(1); // user 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.","`1 <= userid, followerid, followeeid <= 500` `0 <= tweetid <= 10^4` all the tweets have unique ids. at most `3 * 10^4` calls will be made to `posttweet`, `getnewsfeed`, `follow`, and `unfollow`.",
356,Line Reflection,"Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points symmetrically, in other words, answer whether or not if there exists a line that after reflecting all points over the given line the set of the original points is the same that the reflected ones.

Note that there can be repeated points.

Follow up:
Could you do better than O(n2) ?

Example 1:
Input: points = [[1,1],[-1,1]]
Output: true
Explanation: We can choose the line x = 0.


Example 2:
Input: points = [[1,1],[-1,-1]]
Output: false
Explanation: We can't choose a line.


Constraints:
`n == points.length`
`1 <= n <= 10^4`
`-10^8 <= points[i][j] <= 10^8`",Medium,https://leetcode.com/problems/line-reflection,Yandex,"Hash Table,Math",166,"[Max Points on a Line, /problems/max-points-on-a-line/, Hard], [Number of Boomerangs, /problems/number-of-boomerangs/, Medium]","given n points on a 2d plane, find if there is such a line parallel to y-axis that reflect the given points symmetrically, in other words, answer whether or not if there exists a line that after reflecting all points over the given line the set of the original points is the same that the reflected ones. note that there can be repeated points.","input: points = [[1,1],[-1,1]] output: true explanation: we can choose the line x = 0. example 2: input: points = [[1,1],[-1,-1]] output: false explanation: we can't choose a line.",`n == points.length` `1 <= n <= 10^4` `-10^8 <= points[i][j] <= 10^8`,"could you do better than o(n2) ? example 1: input: points = [[1,1],[-1,1]] output: true explanation: we can choose the line x = 0. example 2: input: points = [[1,1],[-1,-1]] output: false explanation: we can't choose a line. constraints: `n == points.length` `1 <= n <= 10^4` `-10^8 <= points[i][j] <= 10^8`"
357,Count Numbers with Unique Digits,"Given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.


Example 1:
Input: n = 2
Output: 91
Explanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99

Example 2:
Input: n = 0
Output: 1

Constraints:
`0 <= n <= 8`",Medium,https://leetcode.com/problems/count-numbers-with-unique-digits,Google,"Math,Dynamic Programming,Backtracking",559,,"given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.","input: n = 2 output: 91 explanation: the answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99 example 2: input: n = 0 output: 1",`0 <= n <= 8`,
358,Rearrange String k Distance Apart,"Given a string `s` and an integer `k`, rearrange `s` such that the same characters are at least distance `k` from each other. If it is not possible to rearrange the string, return an empty string `""""`.


Example 1:
Input: s = ""aabbcc"", k = 3
Output: ""abcabc""
Explanation: The same letters are at least a distance of 3 from each other.


Example 2:
Input: s = ""aaabc"", k = 3
Output: """"
Explanation: It is not possible to rearrange the string.


Example 3:
Input: s = ""aaadbbcc"", k = 2
Output: ""abacabcd""
Explanation: The same letters are at least a distance of 2 from each other.


Constraints:
`1 <= s.length <= 3 * 105`
`s` consists of only lowercase English letters.

`0 <= k <= s.length`",Hard,https://leetcode.com/problems/rearrange-string-k-distance-apart,"Microsoft,Facebook","Hash Table,Heap,Greedy",577,"[Task Scheduler, /problems/task-scheduler/, Medium], [Reorganize String, /problems/reorganize-string/, Medium]","given a string `s` and an integer `k`, rearrange `s` such that the same characters are at least distance `k` from each other. if it is not possible to rearrange the string, return an empty string `""""`.","input: s = ""aabbcc"", k = 3 output: ""abcabc"" explanation: the same letters are at least a distance of 3 from each other. example 2: input: s = ""aaabc"", k = 3 output: """" explanation: it is not possible to rearrange the string. example 3: input: s = ""aaadbbcc"", k = 2 output: ""abacabcd"" explanation: the same letters are at least a distance of 2 from each other.",`1 <= s.length <= 3 * 10^5` `s` consists of only lowercase english letters. `0 <= k <= s.length`,
359,Logger Rate Limiter,"Design a logger system that receives a stream of messages along with their timestamps. Each unique message should only be printed at most every 10 seconds (i.e. a message printed at timestamp `t` will prevent other identical messages from being printed until timestamp `t + 10`).

All messages will come in chronological order. Several messages may arrive at the same timestamp.

Implement the `Logger` class:
`Logger()` Initializes the `logger` object.

`bool shouldPrintMessage(int timestamp, string message)` Returns `true` if the `message` should be printed in the given `timestamp`, otherwise returns `false`.


Example 1:
Input
[""Logger"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage""]
[[], [1, ""foo""], [2, ""bar""], [3, ""foo""], [8, ""bar""], [10, ""foo""], [11, ""foo""]]
Output
[null, true, true, false, false, false, true]
Explanation
Logger logger = new Logger();
logger.shouldPrintMessage(1, ""foo"");  // return true, next allowed timestamp for ""foo"" is 1 + 10 = 11
logger.shouldPrintMessage(2, ""bar"");  // return true, next allowed timestamp for ""bar"" is 2 + 10 = 12
logger.shouldPrintMessage(3, ""foo"");  // 3 < 11, return false
logger.shouldPrintMessage(8, ""bar"");  // 8 < 12, return false
logger.shouldPrintMessage(10, ""foo""); // 10 < 11, return false
logger.shouldPrintMessage(11, ""foo""); // 11 >= 11, return true, next allowed timestamp for ""foo"" is
                                      // 11 + 10 = 21

Constraints:
`0 <= timestamp <= 109`
Every `timestamp` will be passed in non-decreasing order (chronological order).

`1 <= message.length <= 30`
At most `104` calls will be made to `shouldPrintMessage`.",Easy,https://leetcode.com/problems/logger-rate-limiter,"Google,Apple,Amazon,Bloomberg,Microsoft,Oracle","Hash Table,Design",742,"[Design Hit Counter, /problems/design-hit-counter/, Medium]","design a logger system that receives a stream of messages along with their timestamps. each unique message should only be printed at most every 10 seconds (i.e. a message printed at timestamp `t` will prevent other identical messages from being printed until timestamp `t + 10`). all messages will come in chronological order. several messages may arrive at the same timestamp. implement the `logger` class: `logger()` initializes the `logger` object. `bool shouldprintmessage(int timestamp, string message)` returns `true` if the `message` should be printed in the given `timestamp`, otherwise returns `false`.","input [""logger"", ""shouldprintmessage"", ""shouldprintmessage"", ""shouldprintmessage"", ""shouldprintmessage"", ""shouldprintmessage"", ""shouldprintmessage""] [[], [1, ""foo""], [2, ""bar""], [3, ""foo""], [8, ""bar""], [10, ""foo""], [11, ""foo""]] output [null, true, true, false, false, false, true] explanation logger logger = new logger(); logger.shouldprintmessage(1, ""foo""); // return true, next allowed timestamp for ""foo"" is 1 + 10 = 11 logger.shouldprintmessage(2, ""bar""); // return true, next allowed timestamp for ""bar"" is 2 + 10 = 12 logger.shouldprintmessage(3, ""foo""); // 3 < 11, return false logger.shouldprintmessage(8, ""bar""); // 8 < 12, return false logger.shouldprintmessage(10, ""foo""); // 10 < 11, return false logger.shouldprintmessage(11, ""foo""); // 11 >= 11, return true, next allowed timestamp for ""foo"" is // 11 + 10 = 21",`0 <= timestamp <= 10^9` every `timestamp` will be passed in non-decreasing order (chronological order). `1 <= message.length <= 30` at most `10^4` calls will be made to `shouldprintmessage`.,
360,Sort Transformed Array,"Given a sorted integer array `nums` and three integers `a`, `b` and `c`, apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element `nums[i]` in the array, and return the array in a sorted order.


Example 1:
Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5
Output: [3,9,15,33]

Example 2:
Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5
Output: [-23,-5,1,7]

Constraints:
`1 <= nums.length <= 200`
`-100 <= nums[i], a, b, c <= 100`
`nums` is sorted in ascending order.

Follow up: Could you solve it in `O(n)` time?",Medium,https://leetcode.com/problems/sort-transformed-array,Google,"Math,Two Pointers,Sort",400,"[Squares of a Sorted Array, /problems/squares-of-a-sorted-array/, Easy]","given a sorted integer array `nums` and three integers `a`, `b` and `c`, apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element `nums[i]` in the array, and return the array in a sorted order.","input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5 output: [3,9,15,33] example 2: input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5 output: [-23,-5,1,7]","`1 <= nums.length <= 200` `-10^0 <= nums[i], a, b, c <= 10^0` `nums` is sorted in ascending order.",could you solve it in `o(n)` time?
361,Bomb Enemy,"Given an `m x n` matrix `grid` where each cell is either a wall `'W'`, an enemy `'E'` or empty `'0'`, return the maximum enemies you can kill using one bomb. You can only place the bomb in an empty cell.

The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.


Example 1:
Input: grid = [[""0"",""E"",""0"",""0""],[""E"",""0"",""W"",""E""],[""0"",""E"",""0"",""0""]]
Output: 3

Example 2:
Input: grid = [[""W"",""W"",""W""],[""0"",""0"",""0""],[""E"",""E"",""E""]]
Output: 1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 500`
`grid[i][j]` is either `'W'`, `'E'`, or `'0'`.",Medium,https://leetcode.com/problems/bomb-enemy,Google,Dynamic Programming,562,,"given an `m x n` matrix `grid` where each cell is either a wall `'w'`, an enemy `'e'` or empty `'0'`, return the maximum enemies you can kill using one bomb. you can only place the bomb in an empty cell. the bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.","input: grid = [[""0"",""e"",""0"",""0""],[""e"",""0"",""w"",""e""],[""0"",""e"",""0"",""0""]] output: 3 example 2: input: grid = [[""w"",""w"",""w""],[""0"",""0"",""0""],[""e"",""e"",""e""]] output: 1","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 500` `grid[i][j]` is either `'w'`, `'e'`, or `'0'`.",
362,Design Hit Counter,"Design a hit counter which counts the number of hits received in the past `5` minutes (i.e., the past `300` seconds).

Your system should accept a `timestamp` parameter (in seconds granularity), and you may assume that calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing). Several hits may arrive roughly at the same time.

Implement the `HitCounter` class:
`HitCounter()` Initializes the object of the hit counter system.

`void hit(int timestamp)` Records a hit that happened at `timestamp` (in seconds). Several hits may happen at the same `timestamp`.

`int getHits(int timestamp)` Returns the number of hits in the past 5 minutes from `timestamp` (i.e., the past `300` seconds).


Example 1:
Input
[""HitCounter"", ""hit"", ""hit"", ""hit"", ""getHits"", ""hit"", ""getHits"", ""getHits""]
[[], [1], [2], [3], [4], [300], [300], [301]]
Output
[null, null, null, null, 3, null, 4, 3]
Explanation
HitCounter hitCounter = new HitCounter();
hitCounter.hit(1);       // hit at timestamp 1.

hitCounter.hit(2);       // hit at timestamp 2.

hitCounter.hit(3);       // hit at timestamp 3.

hitCounter.getHits(4);   // get hits at timestamp 4, return 3.

hitCounter.hit(300);     // hit at timestamp 300.

hitCounter.getHits(300); // get hits at timestamp 300, return 4.

hitCounter.getHits(301); // get hits at timestamp 301, return 3.


Constraints:
`1 <= timestamp <= 2 * 109`
All the calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing).

At most `300` calls will be made to `hit` and `getHits`.

Follow up: What if the number of hits per second could be huge? Does your design scale?",Medium,https://leetcode.com/problems/design-hit-counter,"Amazon,Microsoft,Apple,Bloomberg,Google,Yandex",Design,1045,"[Logger Rate Limiter, /problems/logger-rate-limiter/, Easy]","design a hit counter which counts the number of hits received in the past `5` minutes (i.e., the past `300` seconds). your system should accept a `timestamp` parameter (in seconds granularity), and you may assume that calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing). several hits may arrive roughly at the same time. implement the `hitcounter` class: `hitcounter()` initializes the object of the hit counter system. `void hit(int timestamp)` records a hit that happened at `timestamp` (in seconds). several hits may happen at the same `timestamp`. `int gethits(int timestamp)` returns the number of hits in the past 5 minutes from `timestamp` (i.e., the past `300` seconds).","input [""hitcounter"", ""hit"", ""hit"", ""hit"", ""gethits"", ""hit"", ""gethits"", ""gethits""] [[], [1], [2], [3], [4], [300], [300], [301]] output [null, null, null, null, 3, null, 4, 3] explanation hitcounter hitcounter = new hitcounter(); hitcounter.hit(1); // hit at timestamp 1. hitcounter.hit(2); // hit at timestamp 2. hitcounter.hit(3); // hit at timestamp 3. hitcounter.gethits(4); // get hits at timestamp 4, return 3. hitcounter.hit(300); // hit at timestamp 300. hitcounter.gethits(300); // get hits at timestamp 300, return 4. hitcounter.gethits(301); // get hits at timestamp 301, return 3.","`1 <= timestamp <= 2 * 10^9` all the calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing). at most `300` calls will be made to `hit` and `gethits`.",what if the number of hits per second could be huge? does your design scale?
363,Max Sum of Rectangle No Larger Than K,"Given an `m x n` matrix `matrix` and an integer `k`, return the max sum of a rectangle in the matrix such that its sum is no larger than `k`.

It is guaranteed that there will be a rectangle with a sum no larger than `k`.


Example 1:
Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).


Example 2:
Input: matrix = [[2,2,-1]], k = 3
Output: 3

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 100`
`-100 <= matrix[i][j] <= 100`
`-105 <= k <= 105`
Follow up: What if the number of rows is much larger than the number of columns?",Hard,https://leetcode.com/problems/max-sum-of-rectangle-no-larger-than-k,Roblox,"Binary Search,Dynamic Programming,Queue",1093,,"given an `m x n` matrix `matrix` and an integer `k`, return the max sum of a rectangle in the matrix such that its sum is no larger than `k`. it is guaranteed that there will be a rectangle with a sum no larger than `k`.","input: matrix = [[1,0,1],[0,-2,3]], k = 2 output: 2 explanation: because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2). example 2: input: matrix = [[2,2,-1]], k = 3 output: 3","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 10^0` `-10^0 <= matrix[i][j] <= 10^0` `-10^5 <= k <= 10^5`",what if the number of rows is much larger than the number of columns?
364,Nested List Weight Sum II,"You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.

The depth of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth. Let `maxDepth` be the maximum depth of any integer.

The weight of an integer is `maxDepth - (the depth of the integer) + 1`.

Return the sum of each integer in `nestedList` multiplied by its weight.


Example 1:
Input: nestedList = [[1,1],2,[1,1]]
Output: 8
Explanation: Four 1's with a weight of 1, one 2 with a weight of 2.

1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8

Example 2:
Input: nestedList = [1,[4,[6]]]
Output: 17
Explanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1.

1*3 + 4*2 + 6*1 = 17

Constraints:
`1 <= nestedList.length <= 50`
The values of the integers in the nested list is in the range `[-100, 100]`.

The maximum depth of any integer is less than or equal to `50`.",Medium,https://leetcode.com/problems/nested-list-weight-sum-ii,LinkedIn,Depth-first Search,698,"[Nested List Weight Sum, /problems/nested-list-weight-sum/, Medium], [Array Nesting, /problems/array-nesting/, Medium]","you are given a nested list of integers `nestedlist`. each element is either an integer or a list whose elements may also be integers or other lists. the depth of an integer is the number of lists that it is inside of. for example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth. let `maxdepth` be the maximum depth of any integer. the weight of an integer is `maxdepth - (the depth of the integer) + 1`. return the sum of each integer in `nestedlist` multiplied by its weight.","input: nestedlist = [[1,1],2,[1,1]] output: 8 explanation: four 1's with a weight of 1, one 2 with a weight of 2. 1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8 example 2: input: nestedlist = [1,[4,[6]]] output: 17 explanation: one 1 at depth 3, one 4 at depth 2, and one 6 at depth 1. 1*3 + 4*2 + 6*1 = 17","`1 <= nestedlist.length <= 50` the values of the integers in the nested list is in the range `[-10^0, 10^0]`. the maximum depth of any integer is less than or equal to `50`.",
365,Water and Jug Problem,"You are given two jugs with capacities `jug1Capacity` and `jug2Capacity` liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly `targetCapacity` liters using these two jugs.

If `targetCapacity` liters of water are measurable, you must have `targetCapacity` liters of water contained within one or both buckets by the end.

Operations allowed:
Fill any of the jugs with water.

Empty any of the jugs.

Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.


Example 1:
Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4
Output: true
Explanation: The famous Die Hard example 

Example 2:
Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5
Output: false

Example 3:
Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3
Output: true

Constraints:
`1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106`",Medium,https://leetcode.com/problems/water-and-jug-problem,"Lyft,Google",Math,418,,"you are given two jugs with capacities `jug1capacity` and `jug2capacity` liters. there is an infinite amount of water supply available. determine whether it is possible to measure exactly `targetcapacity` liters using these two jugs. if `targetcapacity` liters of water are measurable, you must have `targetcapacity` liters of water contained within one or both buckets by the end. operations allowed: fill any of the jugs with water. empty any of the jugs. pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.","input: jug1capacity = 3, jug2capacity = 5, targetcapacity = 4 output: true explanation: the famous die hard example example 2: input: jug1capacity = 2, jug2capacity = 6, targetcapacity = 5 output: false example 3: input: jug1capacity = 1, jug2capacity = 2, targetcapacity = 3 output: true","`1 <= jug1capacity, jug2capacity, targetcapacity <= 10^6`",
366,Find Leaves of Binary Tree,"Given the `root` of a binary tree, collect a tree's nodes as if you were doing this:
Collect all the leaf nodes.

Remove all the leaf nodes.

Repeat until the tree is empty.


Example 1:
Input: root = [1,2,3,4,5]
Output: [[4,5,3],[2],[1]]
Explanation:
[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on which elements are returned.


Example 2:
Input: root = [1]
Output: [[1]]

Constraints:
The number of nodes in the tree is in the range `[1, 100]`.

`1 <= Node.val <= 100`",Medium,https://leetcode.com/problems/find-leaves-of-binary-tree,"LinkedIn,Amazon","Tree,Depth-first Search",1297,,"given the `root` of a binary tree, collect a tree's nodes as if you were doing this: collect all the leaf nodes. remove all the leaf nodes. repeat until the tree is empty.","input: root = [1,2,3,4,5] output: [[4,5,3],[2],[1]] explanation: [[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on which elements are returned. example 2: input: root = [1] output: [[1]]","the number of nodes in the tree is in the range `[1, 10^0]`. `1 <= node.val <= 10^0`",
367,Valid Perfect Square,"Given a positive integer num, write a function which returns True if num is a perfect square else False.

Follow up: Do not use any built-in library function such as `sqrt`.


Example 1:
Input: num = 16
Output: true

Example 2:
Input: num = 14
Output: false

Constraints:
`1 <= num <= 2^31 - 1`",Easy,https://leetcode.com/problems/valid-perfect-square,"LinkedIn,Facebook,Adobe","Math,Binary Search",1192,"[Sqrt(x), /problems/sqrtx/, Easy], [Sum of Square Numbers, /problems/sum-of-square-numbers/, Medium]","given a positive integer num, write a function which returns true if num is a perfect square else false.",input: num = 16 output: true example 2: input: num = 14 output: false,`1 <= num <= 2^31 - 1`,do not use any built-in library function such as `sqrt`. example 1: input: num = 16 output: true example 2: input: num = 14 output: false constraints: `1 <= num <= 2^31 - 1`
368,Largest Divisible Subset,"Given a set of distinct positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies:
`answer[i] % answer[j] == 0`, or
`answer[j] % answer[i] == 0`
If there are multiple solutions, return any of them.


Example 1:
Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.


Example 2:
Input: nums = [1,2,4,8]
Output: [1,2,4,8]

Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 2 * 109`
All the integers in `nums` are unique.",Medium,https://leetcode.com/problems/largest-divisible-subset,Amazon,"Math,Dynamic Programming",1794,,"given a set of distinct positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies: `answer[i] % answer[j] == 0`, or `answer[j] % answer[i] == 0` if there are multiple solutions, return any of them.","input: nums = [1,2,3] output: [1,2] explanation: [1,3] is also accepted. example 2: input: nums = [1,2,4,8] output: [1,2,4,8]",`1 <= nums.length <= 1000` `1 <= nums[i] <= 2 * 10^9` all the integers in `nums` are unique.,
369,Plus One Linked List,"Given a non-negative integer represented as a linked list of digits, plus one to the integer.

The digits are stored such that the most significant digit is at the `head` of the list.


Example 1:
Input: head = [1,2,3]
Output: [1,2,4]

Example 2:
Input: head = [0]
Output: [1]

Constraints:
The number of nodes in the linked list is in the range `[1, 100]`.

`0 <= Node.val <= 9`
The number represented by the linked list does not contain leading zeros except for the zero itself.",Medium,https://leetcode.com/problems/plus-one-linked-list,"Google,Amazon","Linked List,Recursion",642,"[Plus One, /problems/plus-one/, Easy]","given a non-negative integer represented as a linked list of digits, plus one to the integer. the digits are stored such that the most significant digit is at the `head` of the list.","input: head = [1,2,3] output: [1,2,4] example 2: input: head = [0] output: [1]","the number of nodes in the linked list is in the range `[1, 10^0]`. `0 <= node.val <= 9` the number represented by the linked list does not contain leading zeros except for the zero itself.",
370,Range Addition,"You are given an integer `length` and an array `updates` where `updates[i] = [startIdxi, endIdxi, inci]`.

You have an array `arr` of length `length` with all zeros, and you have some operation to apply on `arr`. In the `ith` operation, you should increment all the elements `arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi]` by `inci`.

Return `arr` after applying all the `updates`.


Example 1:
Input: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]
Output: [-2,0,3,5,3]

Example 2:
Input: length = 10, updates = [[2,4,6],[5,6,8],[1,9,-4]]
Output: [0,-4,2,2,2,4,4,-4,-4,-4]

Constraints:
`1 <= length <= 105`
`0 <= updates.length <= 104`
`0 <= startIdxi <= endIdxi < length`
`-1000 <= inci <= 1000`",Medium,https://leetcode.com/problems/range-addition,Google,Array,660,"[Range Addition II, /problems/range-addition-ii/, Easy]","you are given an integer `length` and an array `updates` where `updates[i] = [startidxi, endidxi, inci]`. you have an array `arr` of length `length` with all zeros, and you have some operation to apply on `arr`. in the `ith` operation, you should increment all the elements `arr[startidxi], arr[startidxi + 1], ..., arr[endidxi]` by `inci`. return `arr` after applying all the `updates`.","input: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]] output: [-2,0,3,5,3] example 2: input: length = 10, updates = [[2,4,6],[5,6,8],[1,9,-4]] output: [0,-4,2,2,2,4,4,-4,-4,-4]",`1 <= length <= 10^5` `0 <= updates.length <= 10^4` `0 <= startidxi <= endidxi < length` `-1000 <= inci <= 1000`,
371,Sum of Two Integers,"Given two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`.


Example 1:
Input: a = 1, b = 2
Output: 3

Example 2:
Input: a = 2, b = 3
Output: 5

Constraints:
`-1000 <= a, b <= 1000`",Medium,https://leetcode.com/problems/sum-of-two-integers,Facebook,Bit Manipulation,1627,"[Add Two Numbers, /problems/add-two-numbers/, Medium]","given two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`.","input: a = 1, b = 2 output: 3 example 2: input: a = 2, b = 3 output: 5","`-1000 <= a, b <= 1000`",
372,Super Pow,"Your task is to calculate `ab` mod `1337` where `a` is a positive integer and `b` is an extremely large positive integer given in the form of an array.


Example 1:
Input: a = 2, b = [3]
Output: 8

Example 2:
Input: a = 2, b = [1,0]
Output: 1024

Example 3:
Input: a = 1, b = [4,3,3,8,5,2]
Output: 1

Example 4:
Input: a = 2147483647, b = [2,0,0]
Output: 1198

Constraints:
`1 <= a <= 231 - 1`
`1 <= b.length <= 2000`
`0 <= b[i] <= 9`
`b` doesn't contain leading zeros.",Medium,https://leetcode.com/problems/super-pow,,,300,,your task is to calculate `ab` mod `1337` where `a` is a positive integer and `b` is an extremely large positive integer given in the form of an array.,"input: a = 2, b = [3] output: 8 example 2: input: a = 2, b = [1,0] output: 1024 example 3: input: a = 1, b = [4,3,3,8,5,2] output: 1 example 4: input: a = 2147483647, b = [2,0,0] output: 1198",`1 <= a <= 231 - 1` `1 <= b.length <= 2000` `0 <= b[i] <= 9` `b` doesn't contain leading zeros.,
373,Find K Pairs with Smallest Sums,"You are given two integer arrays `nums1` and `nums2` sorted in ascending order and an integer `k`.

Define a pair `(u, v)` which consists of one element from the first array and one element from the second array.

Return the `k` pairs `(u1, v1), (u2, v2), ..., (uk, vk)` with the smallest sums.


Example 1:
Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]

Example 2:
Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]

Example 3:
Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [[1,3],[2,3]]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]

Constraints:
`1 <= nums1.length, nums2.length <= 104`
`-109 <= nums1[i], nums2[i] <= 109`
`nums1` and `nums2` both are sorted in ascending order.

`1 <= k <= 1000`",Medium,https://leetcode.com/problems/find-k-pairs-with-smallest-sums,"Amazon,Walmart Labs",Heap,1882,"[Kth Smallest Element in a Sorted Matrix, /problems/kth-smallest-element-in-a-sorted-matrix/, Medium], [Find K-th Smallest Pair Distance, /problems/find-k-th-smallest-pair-distance/, Hard]","you are given two integer arrays `nums1` and `nums2` sorted in ascending order and an integer `k`. define a pair `(u, v)` which consists of one element from the first array and one element from the second array. return the `k` pairs `(u1, v1), (u2, v2), ..., (uk, vk)` with the smallest sums.","input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3 output: [[1,2],[1,4],[1,6]] explanation: the first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6] example 2: input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2 output: [[1,1],[1,1]] explanation: the first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3] example 3: input: nums1 = [1,2], nums2 = [3], k = 3 output: [[1,3],[2,3]] explanation: all possible pairs are returned from the sequence: [1,3],[2,3]","`1 <= nums1.length, nums2.length <= 10^4` `-10^9 <= nums1[i], nums2[i] <= 10^9` `nums1` and `nums2` both are sorted in ascending order. `1 <= k <= 1000`",
374,Guess Number Higher or Lower,"We are playing the Guess Game. The game is as follows:
I pick a number from `1` to `n`. You have to guess which number I picked.

Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.

You call a pre-defined API `int guess(int num)`, which returns 3 possible results:
`-1`: The number I picked is lower than your guess (i.e. `pick < num`).

`1`: The number I picked is higher than your guess (i.e. `pick > num`).

`0`: The number I picked is equal to your guess (i.e. `pick == num`).

Return the number that I picked.


Example 1:
Input: n = 10, pick = 6
Output: 6

Example 2:
Input: n = 1, pick = 1
Output: 1

Example 3:
Input: n = 2, pick = 1
Output: 1

Example 4:
Input: n = 2, pick = 2
Output: 2

Constraints:
`1 <= n <= 231 - 1`
`1 <= pick <= n`",Easy,https://leetcode.com/problems/guess-number-higher-or-lower,Apple,Binary Search,580,"[First Bad Version, /problems/first-bad-version/, Easy], [Guess Number Higher or Lower II, /problems/guess-number-higher-or-lower-ii/, Medium], [Find K Closest Elements, /problems/find-k-closest-elements/, Medium]","we are playing the guess game. the game is as follows: i pick a number from `1` to `n`. you have to guess which number i picked. every time you guess wrong, i will tell you whether the number i picked is higher or lower than your guess. you call a pre-defined api `int guess(int num)`, which returns 3 possible results: `-1`: the number i picked is lower than your guess (i.e. `pick < num`). `1`: the number i picked is higher than your guess (i.e. `pick > num`). `0`: the number i picked is equal to your guess (i.e. `pick == num`). return the number that i picked.","input: n = 10, pick = 6 output: 6 example 2: input: n = 1, pick = 1 output: 1 example 3: input: n = 2, pick = 1 output: 1 example 4: input: n = 2, pick = 2 output: 2",`1 <= n <= 231 - 1` `1 <= pick <= n`,
375,Guess Number Higher or Lower II,"We are playing the Guessing Game. The game will work as follows:
I pick a number between `1` and `n`.

You guess a number.

If you guess the right number, you win the game.

If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.

Every time you guess a wrong number `x`, you will pay `x` dollars. If you run out of money, you lose the game.

Given a particular `n`, return the minimum amount of money you need to guarantee a win regardless of what number I pick.


Example 1:
Input: n = 10
Output: 16
Explanation: The winning strategy is as follows:
- The range is [1,10]. Guess 7.

    - If this is my number, your total is $0. Otherwise, you pay $7.

    - If my number is higher, the range is [8,10]. Guess 9.

        - If this is my number, your total is $7. Otherwise, you pay $9.

        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.

        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.

    - If my number is lower, the range is [1,6]. Guess 3.

        - If this is my number, your total is $7. Otherwise, you pay $3.

        - If my number is higher, the range is [4,6]. Guess 5.

            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.

            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.

            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.

        - If my number is lower, the range is [1,2]. Guess 1.

            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.

            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.

The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.


Example 2:
Input: n = 1
Output: 0
Explanation: There is only one possible number, so you can guess 1 and not have to pay anything.


Example 3:
Input: n = 2
Output: 1
Explanation: There are two possible numbers, 1 and 2.

- Guess 1.

    - If this is my number, your total is $0. Otherwise, you pay $1.

    - If my number is higher, it must be 2. Guess 2. Your total is $1.

The worst case is that you pay $1.


Constraints:
`1 <= n <= 200`",Medium,https://leetcode.com/problems/guess-number-higher-or-lower-ii,Google,"Dynamic Programming,Minimax",1013,"[Flip Game II, /problems/flip-game-ii/, Medium], [Guess Number Higher or Lower, /problems/guess-number-higher-or-lower/, Easy], [Can I Win, /problems/can-i-win/, Medium], [Find K Closest Elements, /problems/find-k-closest-elements/, Medium]","we are playing the guessing game. the game will work as follows: i pick a number between `1` and `n`. you guess a number. if you guess the right number, you win the game. if you guess the wrong number, then i will tell you whether the number i picked is higher or lower, and you will continue guessing. every time you guess a wrong number `x`, you will pay `x` dollars. if you run out of money, you lose the game. given a particular `n`, return the minimum amount of money you need to guarantee a win regardless of what number i pick.","input: n = 10 output: 16 explanation: the winning strategy is as follows: - the range is [1,10]. guess 7. - if this is my number, your total is $0. otherwise, you pay $7. - if my number is higher, the range is [8,10]. guess 9. - if this is my number, your total is $7. otherwise, you pay $9. - if my number is higher, it must be 10. guess 10. your total is $7 + $9 = $16. - if my number is lower, it must be 8. guess 8. your total is $7 + $9 = $16. - if my number is lower, the range is [1,6]. guess 3. - if this is my number, your total is $7. otherwise, you pay $3. - if my number is higher, the range is [4,6]. guess 5. - if this is my number, your total is $7 + $3 = $10. otherwise, you pay $5. - if my number is higher, it must be 6. guess 6. your total is $7 + $3 + $5 = $15. - if my number is lower, it must be 4. guess 4. your total is $7 + $3 + $5 = $15. - if my number is lower, the range is [1,2]. guess 1. - if this is my number, your total is $7 + $3 = $10. otherwise, you pay $1. - if my number is higher, it must be 2. guess 2. your total is $7 + $3 + $1 = $11. the worst case in all these scenarios is that you pay $16. hence, you only need $16 to guarantee a win. example 2: input: n = 1 output: 0 explanation: there is only one possible number, so you can guess 1 and not have to pay anything. example 3: input: n = 2 output: 1 explanation: there are two possible numbers, 1 and 2. - guess 1. - if this is my number, your total is $0. otherwise, you pay $1. - if my number is higher, it must be 2. guess 2. your total is $1. the worst case is that you pay $1.",`1 <= n <= 200`,
376,Wiggle Subsequence,"A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with two or fewer elements is trivially a wiggle sequence.

For example, `[1, 7, 4, 9, 2, 5]` is a wiggle sequence because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative.

In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.

A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.

Given an integer array `nums`, return the length of the longest wiggle subsequence of `nums`.


Example 1:
Input: nums = [1,7,4,9,2,5]
Output: 6
Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).


Example 2:
Input: nums = [1,17,5,10,13,15,10,5,16,8]
Output: 7
Explanation: There are several subsequences that achieve this length.

One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).


Example 3:
Input: nums = [1,2,3,4,5,6,7,8,9]
Output: 2

Constraints:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 1000`
Follow up: Could you solve this in `O(n)` time?",Medium,https://leetcode.com/problems/wiggle-subsequence,Microsoft,"Dynamic Programming,Greedy",1695,,"a wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. the first difference (if one exists) may be either positive or negative. a sequence with two or fewer elements is trivially a wiggle sequence. for example, `[1, 7, 4, 9, 2, 5]` is a wiggle sequence because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative. in contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. the first is not because its first two differences are positive, and the second is not because its last difference is zero. a subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order. given an integer array `nums`, return the length of the longest wiggle subsequence of `nums`.","input: nums = [1,7,4,9,2,5] output: 6 explanation: the entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3). example 2: input: nums = [1,17,5,10,13,15,10,5,16,8] output: 7 explanation: there are several subsequences that achieve this length. one is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8). example 3: input: nums = [1,2,3,4,5,6,7,8,9] output: 2",`1 <= nums.length <= 1000` `0 <= nums[i] <= 1000`,could you solve this in `o(n)` time?
377,Combination Sum IV,"Given an array of distinct integers `nums` and a target integer `target`, return the number of possible combinations that add up to `target`.

The answer is guaranteed to fit in a 32-bit integer.


Example 1:
Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.


Example 2:
Input: nums = [9], target = 3
Output: 0

Constraints:
`1 <= nums.length <= 200`
`1 <= nums[i] <= 1000`
All the elements of `nums` are unique.

`1 <= target <= 1000`
Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?",Medium,https://leetcode.com/problems/combination-sum-iv,"Bloomberg,Wish,Apple",Dynamic Programming,1975,"[Combination Sum, /problems/combination-sum/, Medium]","given an array of distinct integers `nums` and a target integer `target`, return the number of possible combinations that add up to `target`. the answer is guaranteed to fit in a 32-bit integer.","input: nums = [1,2,3], target = 4 output: 7 explanation: the possible combination ways are: (1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) note that different sequences are counted as different combinations. example 2: input: nums = [9], target = 3 output: 0",`1 <= nums.length <= 200` `1 <= nums[i] <= 1000` all the elements of `nums` are unique. `1 <= target <= 1000`,what if negative numbers are allowed in the given array? how does it change the problem? what limitation we need to add to the question to allow negative numbers?
378,Kth Smallest Element in a Sorted Matrix,"Given an `n x n` `matrix` where each of the rows and columns are sorted in ascending order, return the `kth` smallest element in the matrix.

Note that it is the `kth` smallest element in the sorted order, not the `kth` distinct element.


Example 1:
Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13

Example 2:
Input: matrix = [[-5]], k = 1
Output: -5

Constraints:
`n == matrix.length`
`n == matrix[i].length`
`1 <= n <= 300`
`-109 <= matrix[i][j] <= 109`
All the rows and columns of `matrix` are guaranteed to be sorted in non-degreasing order.

`1 <= k <= n2`",Medium,https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix,"Facebook,Google,Amazon","Binary Search,Heap",3490,"[Find K Pairs with Smallest Sums, /problems/find-k-pairs-with-smallest-sums/, Medium], [Kth Smallest Number in Multiplication Table, /problems/kth-smallest-number-in-multiplication-table/, Hard], [Find K-th Smallest Pair Distance, /problems/find-k-th-smallest-pair-distance/, Hard], [K-th Smallest Prime Fraction, /problems/k-th-smallest-prime-fraction/, Hard]","given an `n x n` `matrix` where each of the rows and columns are sorted in ascending order, return the `kth` smallest element in the matrix. note that it is the `kth` smallest element in the sorted order, not the `kth` distinct element.","input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8 output: 13 explanation: the elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13 example 2: input: matrix = [[-5]], k = 1 output: -5",`n == matrix.length` `n == matrix[i].length` `1 <= n <= 300` `-10^9 <= matrix[i][j] <= 10^9` all the rows and columns of `matrix` are guaranteed to be sorted in non-degreasing order. `1 <= k <= n2`,
379,Design Phone Directory,"Design a phone directory that initially has `maxNumbers` empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot.

Implement the `PhoneDirectory` class:
`PhoneDirectory(int maxNumbers)` Initializes the phone directory with the number of available slots `maxNumbers`.

`int get()` Provides a number that is not assigned to anyone. Returns `-1` if no number is available.

`bool check(int number)` Returns `true` if the slot `number` is available and `false` otherwise.

`void release(int number)` Recycles or releases the slot `number`.


Example 1:
Input
[""PhoneDirectory"", ""get"", ""get"", ""check"", ""get"", ""check"", ""release"", ""check""]
[[3], [], [], [2], [], [2], [2], [2]]
Output
[null, 0, 1, true, 2, false, null, true]
Explanation
PhoneDirectory phoneDirectory = new PhoneDirectory(3);
phoneDirectory.get();      // It can return any available phone number. Here we assume it returns 0.

phoneDirectory.get();      // Assume it returns 1.

phoneDirectory.check(2);   // The number 2 is available, so return true.

phoneDirectory.get();      // It returns 2, the only number that is left.

phoneDirectory.check(2);   // The number 2 is no longer available, so return false.

phoneDirectory.release(2); // Release number 2 back to the pool.

phoneDirectory.check(2);   // Number 2 is available again, return true.


Constraints:
`1 <= maxNumbers <= 104`
`0 <= number < maxNumbers`
At most `2 * 104` calls will be made to `get`, `check`, and `release`.",Medium,https://leetcode.com/problems/design-phone-directory,Google,"Linked List,Design",215,,"design a phone directory that initially has `maxnumbers` empty slots that can store numbers. the directory should store numbers, check if a certain slot is empty or not, and empty a given slot. implement the `phonedirectory` class: `phonedirectory(int maxnumbers)` initializes the phone directory with the number of available slots `maxnumbers`. `int get()` provides a number that is not assigned to anyone. returns `-1` if no number is available. `bool check(int number)` returns `true` if the slot `number` is available and `false` otherwise. `void release(int number)` recycles or releases the slot `number`.","input [""phonedirectory"", ""get"", ""get"", ""check"", ""get"", ""check"", ""release"", ""check""] [[3], [], [], [2], [], [2], [2], [2]] output [null, 0, 1, true, 2, false, null, true] explanation phonedirectory phonedirectory = new phonedirectory(3); phonedirectory.get(); // it can return any available phone number. here we assume it returns 0. phonedirectory.get(); // assume it returns 1. phonedirectory.check(2); // the number 2 is available, so return true. phonedirectory.get(); // it returns 2, the only number that is left. phonedirectory.check(2); // the number 2 is no longer available, so return false. phonedirectory.release(2); // release number 2 back to the pool. phonedirectory.check(2); // number 2 is available again, return true.","`1 <= maxnumbers <= 10^4` `0 <= number < maxnumbers` at most `2 * 10^4` calls will be made to `get`, `check`, and `release`.",
380,Insert Delete GetRandom O(1),"Implement the `RandomizedSet` class:
`RandomizedSet()` Initializes the `RandomizedSet` object.

`bool insert(int val)` Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise.

`bool remove(int val)` Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise.

`int getRandom()` Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.


Example 1:
Input
[""RandomizedSet"", ""insert"", ""remove"", ""insert"", ""getRandom"", ""remove"", ""insert"", ""getRandom""]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]
Explanation
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.

randomizedSet.remove(2); // Returns false as 2 does not exist in the set.

randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].

randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.

randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].

randomizedSet.insert(2); // 2 was already in the set, so return false.

randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.


Constraints:
`-231 <= val <= 231 - 1`
At most `105` calls will be made to `insert`, `remove`, and `getRandom`.

There will be at least one element in the data structure when `getRandom` is called.

Follow up: Could you implement the functions of the class with each function works in average `O(1)` time?",Medium,https://leetcode.com/problems/insert-delete-getrandom-o1,"Amazon,Bloomberg,Facebook,Twitter,Microsoft,Oracle,Affirm,Yandex,Two Sigma,HRT,LinkedIn,Nvidia,Snapchat,Databricks,Adobe,Zillow","Array,Hash Table,Design",3479,"[Insert Delete GetRandom O(1) - Duplicates allowed, /problems/insert-delete-getrandom-o1-duplicates-allowed/, Hard]","implement the `randomizedset` class: `randomizedset()` initializes the `randomizedset` object. `bool insert(int val)` inserts an item `val` into the set if not present. returns `true` if the item was not present, `false` otherwise. `bool remove(int val)` removes an item `val` from the set if present. returns `true` if the item was present, `false` otherwise. `int getrandom()` returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). each element must have the same probability of being returned.","input [""randomizedset"", ""insert"", ""remove"", ""insert"", ""getrandom"", ""remove"", ""insert"", ""getrandom""] [[], [1], [2], [2], [], [1], [2], []] output [null, true, false, true, 2, true, false, 2] explanation randomizedset randomizedset = new randomizedset(); randomizedset.insert(1); // inserts 1 to the set. returns true as 1 was inserted successfully. randomizedset.remove(2); // returns false as 2 does not exist in the set. randomizedset.insert(2); // inserts 2 to the set, returns true. set now contains [1,2]. randomizedset.getrandom(); // getrandom() should return either 1 or 2 randomly. randomizedset.remove(1); // removes 1 from the set, returns true. set now contains [2]. randomizedset.insert(2); // 2 was already in the set, so return false. randomizedset.getrandom(); // since 2 is the only number in the set, getrandom() will always return 2.","`-231 <= val <= 231 - 1` at most `10^5` calls will be made to `insert`, `remove`, and `getrandom`. there will be at least one element in the data structure when `getrandom` is called.",could you implement the functions of the class with each function works in average `o(1)` time?
381,Insert Delete GetRandom O(1) - Duplicates allowed,"Implement the `RandomizedCollection` class:
`RandomizedCollection()` Initializes the `RandomizedCollection` object.

`bool insert(int val)` Inserts an item `val` into the multiset if not present. Returns `true` if the item was not present, `false` otherwise.

`bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item was present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them.

`int getRandom()` Returns a random element from the current multiset of elements (it's guaranteed that at least one element exists when this method is called). The probability of each element being returned is linearly related to the number of same values the multiset contains.


Example 1:
Input
[""RandomizedCollection"", ""insert"", ""insert"", ""insert"", ""getRandom"", ""remove"", ""getRandom""]
[[], [1], [1], [2], [], [1], []]
Output
[null, true, false, true, 2, true, 1]
Explanation
RandomizedCollection randomizedCollection = new RandomizedCollection();
randomizedCollection.insert(1);   // return True. Inserts 1 to the collection. Returns true as the collection did not contain 1.

randomizedCollection.insert(1);   // return False. Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].

randomizedCollection.insert(2);   // return True. Inserts 2 to the collection, returns true. Collection now contains [1,1,2].

randomizedCollection.getRandom(); // getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.

randomizedCollection.remove(1);   // return True. Removes 1 from the collection, returns true. Collection now contains [1,2].

randomizedCollection.getRandom(); // getRandom should return 1 and 2 both equally likely.


Constraints:
`-231 <= val <= 231 - 1`
At most `105` calls will be made to `insert`, `remove`, and `getRandom`.

There will be at least one element in the data structure when `getRandom` is called.

Follow up: Could you implement the functions of the class with each function works in average `O(1)` time?",Hard,https://leetcode.com/problems/insert-delete-getrandom-o1-duplicates-allowed,"Facebook,Affirm","Array,Hash Table,Design",1111,"[Insert Delete GetRandom O(1), /problems/insert-delete-getrandom-o1/, Medium]","implement the `randomizedcollection` class: `randomizedcollection()` initializes the `randomizedcollection` object. `bool insert(int val)` inserts an item `val` into the multiset if not present. returns `true` if the item was not present, `false` otherwise. `bool remove(int val)` removes an item `val` from the multiset if present. returns `true` if the item was present, `false` otherwise. note that if `val` has multiple occurrences in the multiset, we only remove one of them. `int getrandom()` returns a random element from the current multiset of elements (it's guaranteed that at least one element exists when this method is called). the probability of each element being returned is linearly related to the number of same values the multiset contains.","input [""randomizedcollection"", ""insert"", ""insert"", ""insert"", ""getrandom"", ""remove"", ""getrandom""] [[], [1], [1], [2], [], [1], []] output [null, true, false, true, 2, true, 1] explanation randomizedcollection randomizedcollection = new randomizedcollection(); randomizedcollection.insert(1); // return true. inserts 1 to the collection. returns true as the collection did not contain 1. randomizedcollection.insert(1); // return false. inserts another 1 to the collection. returns false as the collection contained 1. collection now contains [1,1]. randomizedcollection.insert(2); // return true. inserts 2 to the collection, returns true. collection now contains [1,1,2]. randomizedcollection.getrandom(); // getrandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3. randomizedcollection.remove(1); // return true. removes 1 from the collection, returns true. collection now contains [1,2]. randomizedcollection.getrandom(); // getrandom should return 1 and 2 both equally likely.","`-231 <= val <= 231 - 1` at most `10^5` calls will be made to `insert`, `remove`, and `getrandom`. there will be at least one element in the data structure when `getrandom` is called.",could you implement the functions of the class with each function works in average `o(1)` time?
382,Linked List Random Node,"Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.


Example 1:
Input
[""Solution"", ""getRandom"", ""getRandom"", ""getRandom"", ""getRandom"", ""getRandom""]
[[[1, 2, 3]], [], [], [], [], []]
Output
[null, 1, 3, 2, 2, 3]
Explanation
Solution solution = new Solution([1, 2, 3]);
solution.getRandom(); // return 1
solution.getRandom(); // return 3
solution.getRandom(); // return 2
solution.getRandom(); // return 2
solution.getRandom(); // return 3
// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.


Constraints:
The number of nodes in the linked list will be in the range `[1, 104]`.

`-104 <= Node.val <= 104`
At most `104` calls will be made to `getRandom`.

Follow up:
What if the linked list is extremely large and its length is unknown to you?
Could you solve this efficiently without using extra space?",Medium,https://leetcode.com/problems/linked-list-random-node,Amazon,Reservoir Sampling,902,"[Random Pick Index, /problems/random-pick-index/, Medium]","given a singly linked list, return a random node's value from the linked list. each node must have the same probability of being chosen.","input [""solution"", ""getrandom"", ""getrandom"", ""getrandom"", ""getrandom"", ""getrandom""] [[[1, 2, 3]], [], [], [], [], []] output [null, 1, 3, 2, 2, 3] explanation solution solution = new solution([1, 2, 3]); solution.getrandom(); // return 1 solution.getrandom(); // return 3 solution.getrandom(); // return 2 solution.getrandom(); // return 2 solution.getrandom(); // return 3 // getrandom() should return either 1, 2, or 3 randomly. each element should have equal probability of returning.","the number of nodes in the linked list will be in the range `[1, 10^4]`. `-10^4 <= node.val <= 10^4` at most `10^4` calls will be made to `getrandom`.",what if the linked list is extremely large and its length is unknown to you? could you solve this efficiently without using extra space?
383,Ransom Note,"Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.


Example 1:
Input: ransomNote = ""a"", magazine = ""b""
Output: false

Example 2:
Input: ransomNote = ""aa"", magazine = ""ab""
Output: false

Example 3:
Input: ransomNote = ""aa"", magazine = ""aab""
Output: true

Constraints:
You may assume that both strings contain only lowercase letters.",Easy,https://leetcode.com/problems/ransom-note,"Spotify,Amazon,Microsoft,Visa",String,852,"[Stickers to Spell Word, /problems/stickers-to-spell-word/, Hard]","given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false. each letter in the magazine string can only be used once in your ransom note.","input: ransomnote = ""a"", magazine = ""b"" output: false example 2: input: ransomnote = ""aa"", magazine = ""ab"" output: false example 3: input: ransomnote = ""aa"", magazine = ""aab"" output: true",you may assume that both strings contain only lowercase letters.,
384,Shuffle an Array,"Given an integer array `nums`, design an algorithm to randomly shuffle the array.

Implement the `Solution` class:
`Solution(int[] nums)` Initializes the object with the integer array nums.

`int[] reset()` Resets the array to its original configuration and returns it.

`int[] shuffle()` Returns a random shuffling of the array.


Example 1:
Input
[""Solution"", ""shuffle"", ""reset"", ""shuffle""]
[[[1, 2, 3]], [], [], []]
Output
[null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]
Explanation
Solution solution = new Solution([1, 2, 3]);

solution.shuffle();    // Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must be equally likely to be returned. Example: return [3, 1, 2]
solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]

solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]

Constraints:
`1 <= nums.length <= 200`
`-106 <= nums[i] <= 106`
All the elements of `nums` are unique.

At most `5 * 104` calls will be made to `reset` and `shuffle`.",Medium,https://leetcode.com/problems/shuffle-an-array,"Google,Apple,Microsoft",,118,,"given an integer array `nums`, design an algorithm to randomly shuffle the array. implement the `solution` class: `solution(int[] nums)` initializes the object with the integer array nums. `int[] reset()` resets the array to its original configuration and returns it. `int[] shuffle()` returns a random shuffling of the array.","input [""solution"", ""shuffle"", ""reset"", ""shuffle""] [[[1, 2, 3]], [], [], []] output [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]] explanation solution solution = new solution([1, 2, 3]); solution.shuffle(); // shuffle the array [1,2,3] and return its result. any permutation of [1,2,3] must be equally likely to be returned. example: return [3, 1, 2] solution.reset(); // resets the array back to its original configuration [1,2,3]. return [1, 2, 3] solution.shuffle(); // returns the random shuffling of array [1,2,3]. example: return [1, 3, 2]",`1 <= nums.length <= 200` `-10^6 <= nums[i] <= 10^6` all the elements of `nums` are unique. at most `5 * 10^4` calls will be made to `reset` and `shuffle`.,
385,Mini Parser,"Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized `NestedInteger`.

Each element is either an integer or a list whose elements may also be integers or other lists.


Example 1:
Input: s = ""324""
Output: 324
Explanation: You should return a NestedInteger object which contains a single integer 324.


Example 2:
Input: s = ""[123,[456,[789]]]""
Output: [123,[456,[789]]]
Explanation: Return a NestedInteger object containing a nested list with 2 elements:
1. An integer containing value 123.

2. A nested list containing two elements:
    i.  An integer containing value 456.

    ii. A nested list with one element:
         a. An integer containing value 789

Constraints:
`1 <= s.length <= 5 * 104`
`s` consists of digits, square brackets `""[]""`, negative sign `'-'`, and commas `','`.

`s` is the serialization of valid `NestedInteger`.",Medium,https://leetcode.com/problems/mini-parser,"Google,Airbnb","String,Stack",286,"[Flatten Nested List Iterator, /problems/flatten-nested-list-iterator/, Medium], [Ternary Expression Parser, /problems/ternary-expression-parser/, Medium], [Remove Comments, /problems/remove-comments/, Medium]","given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized `nestedinteger`. each element is either an integer or a list whose elements may also be integers or other lists.","input: s = ""324"" output: 324 explanation: you should return a nestedinteger object which contains a single integer 324. example 2: input: s = ""[123,[456,[789]]]"" output: [123,[456,[789]]] explanation: return a nestedinteger object containing a nested list with 2 elements: 1. an integer containing value 123. 2. a nested list containing two elements: i. an integer containing value 456. ii. a nested list with one element: a. an integer containing value 789","`1 <= s.length <= 5 * 10^4` `s` consists of digits, square brackets `""[]""`, negative sign `'-'`, and commas `','`. `s` is the serialization of valid `nestedinteger`.",
386,Lexicographical Numbers,"Given an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order.


Example 1:
Input: n = 13
Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]

Example 2:
Input: n = 2
Output: [1,2]

Constraints:
`1 <= n <= 5 * 104`
Follow up: Could you optimize your solution to use `O(n)` runtime and `O(1)` space?",Medium,https://leetcode.com/problems/lexicographical-numbers,"Pony.ai,ByteDance",,736,,"given an integer `n`, return all the numbers in the range `[1, n]` sorted in lexicographical order.","input: n = 13 output: [1,10,11,12,13,2,3,4,5,6,7,8,9] example 2: input: n = 2 output: [1,2]",`1 <= n <= 5 * 10^4`,could you optimize your solution to use `o(n)` runtime and `o(1)` space?
387,First Unique Character in a String,"Given a string `s`, return the first non-repeating character in it and return its index. If it does not exist, return `-1`.


Example 1:
Input: s = ""leetcode""
Output: 0

Example 2:
Input: s = ""loveleetcode""
Output: 2

Example 3:
Input: s = ""aabb""
Output: -1

Constraints:
`1 <= s.length <= 105`
`s` consists of only lowercase English letters.",Easy,https://leetcode.com/problems/first-unique-character-in-a-string,"Bloomberg,Goldman Sachs,Amazon,Facebook,Microsoft,Google,Apple,Adobe","Hash Table,String",2827,"[Sort Characters By Frequency, /problems/sort-characters-by-frequency/, Medium]","given a string `s`, return the first non-repeating character in it and return its index. if it does not exist, return `-1`.","input: s = ""leetcode"" output: 0 example 2: input: s = ""loveleetcode"" output: 2 example 3: input: s = ""aabb"" output: -1",`1 <= s.length <= 10^5` `s` consists of only lowercase english letters.,
388,Longest Absolute File Path,"Suppose we have a file system that stores both files and directories. An example of one system is represented in the following picture:
Here, we have `dir` as the only directory in the root. `dir` contains two subdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext` and subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`, which contains a file `file2.ext`.

In text form, it looks like this (with ⟶ representing the tab character):
dir
⟶ subdir1
⟶ ⟶ file1.ext
⟶ ⟶ subsubdir1
⟶ subdir2
⟶ ⟶ subsubdir2
⟶ ⟶ ⟶ file2.ext
If we were to write this representation in code, it will look like this: `""dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext""`. Note that the `'\n'` and `'\t'` are the new-line and tab characters.

Every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by `'/'s`. Using the above example, the absolute path to `file2.ext` is `""dir/subdir2/subsubdir2/file2.ext""`. Each directory name consists of letters, digits, and/or spaces. Each file name is of the form `name.extension`, where `name` and `extension` consist of letters, digits, and/or spaces.

Given a string `input` representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. If there is no file in the system, return `0`.


Example 1:
Input: input = ""dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext""
Output: 20
Explanation: We have only one file, and the absolute path is ""dir/subdir2/file.ext"" of length 20.


Example 2:
Input: input = ""dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext""
Output: 32
Explanation: We have two files:
""dir/subdir1/file1.ext"" of length 21
""dir/subdir2/subsubdir2/file2.ext"" of length 32.

We return 32 since it is the longest absolute path to a file.


Example 3:
Input: input = ""a""
Output: 0
Explanation: We do not have any files, just a single directory named ""a"".


Example 4:
Input: input = ""file1.txt\nfile2.txt\nlongfile.txt""
Output: 12
Explanation: There are 3 files at the root directory.

Since the absolute path for anything at the root directory is just the name itself, the answer is ""longfile.txt"" with length 12.


Constraints:
`1 <= input.length <= 104`
`input` may contain lowercase or uppercase English letters, a new line character `'\n'`, a tab character `'\t'`, a dot `'.'`, a space `' '`, and digits.",Medium,https://leetcode.com/problems/longest-absolute-file-path,"Amazon,Facebook,Google",,722,,"suppose we have a file system that stores both files and directories. an example of one system is represented in the following picture: here, we have `dir` as the only directory in the root. `dir` contains two subdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext` and subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`, which contains a file `file2.ext`. in text form, it looks like this (with ⟶ representing the tab character): dir ⟶ subdir1 ⟶ ⟶ file1.ext ⟶ ⟶ subsubdir1 ⟶ subdir2 ⟶ ⟶ subsubdir2 ⟶ ⟶ ⟶ file2.ext if we were to write this representation in code, it will look like this: `""dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext""`. note that the `'\n'` and `'\t'` are the new-line and tab characters. every file and directory has a unique absolute path in the file system, which is the order of directories that must be opened to reach the file/directory itself, all concatenated by `'/'s`. using the above example, the absolute path to `file2.ext` is `""dir/subdir2/subsubdir2/file2.ext""`. each directory name consists of letters, digits, and/or spaces. each file name is of the form `name.extension`, where `name` and `extension` consist of letters, digits, and/or spaces. given a string `input` representing the file system in the explained format, return the length of the longest absolute path to a file in the abstracted file system. if there is no file in the system, return `0`.","input: input = ""dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext"" output: 20 explanation: we have only one file, and the absolute path is ""dir/subdir2/file.ext"" of length 20. example 2: input: input = ""dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext"" output: 32 explanation: we have two files: ""dir/subdir1/file1.ext"" of length 21 ""dir/subdir2/subsubdir2/file2.ext"" of length 32. we return 32 since it is the longest absolute path to a file. example 3: input: input = ""a"" output: 0 explanation: we do not have any files, just a single directory named ""a"". example 4: input: input = ""file1.txt\nfile2.txt\nlongfile.txt"" output: 12 explanation: there are 3 files at the root directory. since the absolute path for anything at the root directory is just the name itself, the answer is ""longfile.txt"" with length 12.","`1 <= input.length <= 10^4` `input` may contain lowercase or uppercase english letters, a new line character `'\n'`, a tab character `'\t'`, a dot `'.'`, a space `' '`, and digits.",
389,Find the Difference,"You are given two strings `s` and `t`.

String `t` is generated by random shuffling string `s` and then add one more letter at a random position.

Return the letter that was added to `t`.


Example 1:
Input: s = ""abcd"", t = ""abcde""
Output: ""e""
Explanation: 'e' is the letter that was added.


Example 2:
Input: s = """", t = ""y""
Output: ""y""

Example 3:
Input: s = ""a"", t = ""aa""
Output: ""a""

Example 4:
Input: s = ""ae"", t = ""aea""
Output: ""a""

Constraints:
`0 <= s.length <= 1000`
`t.length == s.length + 1`
`s` and `t` consist of lower-case English letters.",Easy,https://leetcode.com/problems/find-the-difference,"Google,Amazon","Hash Table,Bit Manipulation",1234,"[Single Number, /problems/single-number/, Easy]",you are given two strings `s` and `t`. string `t` is generated by random shuffling string `s` and then add one more letter at a random position. return the letter that was added to `t`.,"input: s = ""abcd"", t = ""abcde"" output: ""e"" explanation: 'e' is the letter that was added. example 2: input: s = """", t = ""y"" output: ""y"" example 3: input: s = ""a"", t = ""aa"" output: ""a"" example 4: input: s = ""ae"", t = ""aea"" output: ""a""",`0 <= s.length <= 1000` `t.length == s.length + 1` `s` and `t` consist of lower-case english letters.,
390,Elimination Game,"You have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. Apply the following algorithm on `arr`:
Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.

Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.

Keep repeating the steps again, alternating left to right and right to left, until a single number remains.

Given the integer `n`, return the last number that remains in `arr`.


Example 1:
Input: n = 9
Output: 6
Explanation:
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]
arr = [2, 4, 6, 8]
arr = [2, 6]
arr = [6]

Example 2:
Input: n = 1
Output: 1

Constraints:
`1 <= n <= 109`",Medium,https://leetcode.com/problems/elimination-game,"Goldman Sachs,Bloomberg",,560,,"you have a list `arr` of all integers in the range `[1, n]` sorted in a strictly increasing order. apply the following algorithm on `arr`: starting from left to right, remove the first number and every other number afterward until you reach the end of the list. repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers. keep repeating the steps again, alternating left to right and right to left, until a single number remains. given the integer `n`, return the last number that remains in `arr`.","input: n = 9 output: 6 explanation: arr = [1, 2, 3, 4, 5, 6, 7, 8, 9] arr = [2, 4, 6, 8] arr = [2, 6] arr = [6] example 2: input: n = 1 output: 1",`1 <= n <= 10^9`,
391,Perfect Rectangle,"Given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]` represents an axis-aligned rectangle. The bottom-left point of the rectangle is `(xi, yi)` and the top-right point of it is `(ai, bi)`.

Return `true` if all the rectangles together form an exact cover of a rectangular region.


Example 1:
Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]
Output: true
Explanation: All 5 rectangles together form an exact cover of a rectangular region.


Example 2:
Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]
Output: false
Explanation: Because there is a gap between the two rectangular regions.


Example 3:
Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[3,2,4,4]]
Output: false
Explanation: Because there is a gap in the top center.


Example 4:
Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]
Output: false
Explanation: Because two of the rectangles overlap with each other.


Constraints:
`1 <= rectangles.length <= 2 * 104`
`rectangles[i].length == 4`
`-105 <= xi, yi, ai, bi <= 105`",Hard,https://leetcode.com/problems/perfect-rectangle,Apple,Line Sweep,461,,"given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]` represents an axis-aligned rectangle. the bottom-left point of the rectangle is `(xi, yi)` and the top-right point of it is `(ai, bi)`. return `true` if all the rectangles together form an exact cover of a rectangular region.","input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]] output: true explanation: all 5 rectangles together form an exact cover of a rectangular region. example 2: input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]] output: false explanation: because there is a gap between the two rectangular regions. example 3: input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[3,2,4,4]] output: false explanation: because there is a gap in the top center. example 4: input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]] output: false explanation: because two of the rectangles overlap with each other.","`1 <= rectangles.length <= 2 * 10^4` `rectangles[i].length == 4` `-10^5 <= xi, yi, ai, bi <= 10^5`",
392,Is Subsequence,"Given two strings `s` and `t`, check if `s` is a subsequence of `t`.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `""ace""` is a subsequence of `""abcde""` while `""aec""` is not).


Example 1:
Input: s = ""abc"", t = ""ahbgdc""
Output: true

Example 2:
Input: s = ""axc"", t = ""ahbgdc""
Output: false

Constraints:
`0 <= s.length <= 100`
`0 <= t.length <= 104`
`s` and `t` consist only of lowercase English letters.

Follow up: If there are lots of incoming `s`, say `s1, s2, ..., sk` where `k >= 109`, and you want to check one by one to see if `t` has its subsequence. In this scenario, how would you change your code?",Easy,https://leetcode.com/problems/is-subsequence,Bloomberg,"Binary Search,Dynamic Programming,Greedy",2373,"[Number of Matching Subsequences, /problems/number-of-matching-subsequences/, Medium], [Shortest Way to Form String, /problems/shortest-way-to-form-string/, Medium]","given two strings `s` and `t`, check if `s` is a subsequence of `t`. a subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `""ace""` is a subsequence of `""abcde""` while `""aec""` is not).","input: s = ""abc"", t = ""ahbgdc"" output: true example 2: input: s = ""axc"", t = ""ahbgdc"" output: false",`0 <= s.length <= 10^0` `0 <= t.length <= 10^4` `s` and `t` consist only of lowercase english letters.,"if there are lots of incoming `s`, say `s1, s2, ..., sk` where `k >= 109`, and you want to check one by one to see if `t` has its subsequence. in this scenario, how would you change your code?"
393,UTF-8 Validation,"Given an integer array `data` representing the data, return whether it is a valid UTF-8 encoding.

A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:
For a 1-byte character, the first bit is a `0`, followed by its Unicode code.

For an n-bytes character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`.

This is how the UTF-8 encoding would work:
`   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx`
Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.


Example 1:
Input: data = [197,130,1]
Output: true
Explanation: data represents the octet sequence: 11000101 10000010 00000001.

It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.


Example 2:
Input: data = [235,140,4]
Output: false
Explanation: data represented the octet sequence: 11101011 10001100 00000100.

The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.

The next byte is a continuation byte which starts with 10 and that's correct.

But the second continuation byte does not start with 10, so it is invalid.


Constraints:
`1 <= data.length <= 2 * 104`
`0 <= data[i] <= 255`",Medium,https://leetcode.com/problems/utf-8-validation,"Palantir Technologies,Facebook,Amazon",Bit Manipulation,288,,"given an integer array `data` representing the data, return whether it is a valid utf-8 encoding. a character in utf8 can be from 1 to 4 bytes long, subjected to the following rules: for a 1-byte character, the first bit is a `0`, followed by its unicode code. for an n-bytes character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`. this is how the utf-8 encoding would work: ` char. number range | utf-8 octet sequence (hexadecimal) | (binary) --------------------+--------------------------------------------- 0000 0000-0000 007f | 0xxxxxxx 0000 0080-0000 07ff | 110xxxxx 10xxxxxx 0000 0800-0000 ffff | 1110xxxx 10xxxxxx 10xxxxxx 0001 0000-0010 ffff | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx` note: the input is an array of integers. only the least significant 8 bits of each integer is used to store the data. this means each integer represents only 1 byte of data.","input: data = [197,130,1] output: true explanation: data represents the octet sequence: 11000101 10000010 00000001. it is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character. example 2: input: data = [235,140,4] output: false explanation: data represented the octet sequence: 11101011 10001100 00000100. the first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character. the next byte is a continuation byte which starts with 10 and that's correct. but the second continuation byte does not start with 10, so it is invalid.",`1 <= data.length <= 2 * 10^4` `0 <= data[i] <= 255`,
394,Decode String,"Given an encoded string, return its decoded string.

The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, there won't be input like `3a` or `2[4]`.


Example 1:
Input: s = ""3[a]2[bc]""
Output: ""aaabcbc""

Example 2:
Input: s = ""3[a2[c]]""
Output: ""accaccacc""

Example 3:
Input: s = ""2[abc]3[cd]ef""
Output: ""abcabccdcdcdef""

Example 4:
Input: s = ""abc3[cd]xyz""
Output: ""abccdcdcdxyz""

Constraints:
`1 <= s.length <= 30`
`s` consists of lowercase English letters, digits, and square brackets `'[]'`.

`s` is guaranteed to be a valid input.

All the integers in `s` are in the range `[1, 300]`.",Medium,https://leetcode.com/problems/decode-string,"Bloomberg,Google,Amazon,Oracle,ByteDance,Apple,Walmart Labs,VMware,eBay,Cisco","Stack,Depth-first Search",4841,"[Encode String with Shortest Length, /problems/encode-string-with-shortest-length/, Hard], [Number of Atoms, /problems/number-of-atoms/, Hard], [Brace Expansion, /problems/brace-expansion/, Medium]","given an encoded string, return its decoded string. the encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. note that `k` is guaranteed to be a positive integer. you may assume that the input string is always valid; no extra white spaces, square brackets are well-formed, etc. furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. for example, there won't be input like `3a` or `2[4]`.","input: s = ""3[a]2[bc]"" output: ""aaabcbc"" example 2: input: s = ""3[a2[c]]"" output: ""accaccacc"" example 3: input: s = ""2[abc]3[cd]ef"" output: ""abcabccdcdcdef"" example 4: input: s = ""abc3[cd]xyz"" output: ""abccdcdcdxyz""","`1 <= s.length <= 30` `s` consists of lowercase english letters, digits, and square brackets `'[]'`. `s` is guaranteed to be a valid input. all the integers in `s` are in the range `[1, 300]`.",
395,Longest Substring with At Least K Repeating Characters,"Given a string `s` and an integer `k`, return the length of the longest substring of `s` such that the frequency of each character in this substring is greater than or equal to `k`.


Example 1:
Input: s = ""aaabb"", k = 3
Output: 3
Explanation: The longest substring is ""aaa"", as 'a' is repeated 3 times.


Example 2:
Input: s = ""ababbc"", k = 2
Output: 5
Explanation: The longest substring is ""ababb"", as 'a' is repeated 2 times and 'b' is repeated 3 times.


Constraints:
`1 <= s.length <= 104`
`s` consists of only lowercase English letters.

`1 <= k <= 105`",Medium,https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters,Facebook,"Divide and Conquer,Recursion,Sliding Window",2446,,"given a string `s` and an integer `k`, return the length of the longest substring of `s` such that the frequency of each character in this substring is greater than or equal to `k`.","input: s = ""aaabb"", k = 3 output: 3 explanation: the longest substring is ""aaa"", as 'a' is repeated 3 times. example 2: input: s = ""ababbc"", k = 2 output: 5 explanation: the longest substring is ""ababb"", as 'a' is repeated 2 times and 'b' is repeated 3 times.",`1 <= s.length <= 10^4` `s` consists of only lowercase english letters. `1 <= k <= 10^5`,
396,Rotate Function,"You are given an integer array `nums` of length `n`.

Assume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. We define the rotation function `F` on `nums` as follow:
`F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].`
Return the maximum value of `F(0), F(1), ..., F(n-1)`.


Example 1:
Input: nums = [4,3,2,6]
Output: 26
Explanation:
F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.


Example 2:
Input: nums = [1000000007]
Output: 0

Constraints:
`n == nums.length`
`1 <= n <= 105`
`-231 <= nums[i] <= 231 - 1`",Medium,https://leetcode.com/problems/rotate-function,Google,Math,507,,"you are given an integer array `nums` of length `n`. assume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. we define the rotation function `f` on `nums` as follow: `f(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].` return the maximum value of `f(0), f(1), ..., f(n-1)`.","input: nums = [4,3,2,6] output: 26 explanation: f(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25 f(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16 f(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23 f(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26 so the maximum value of f(0), f(1), f(2), f(3) is f(3) = 26. example 2: input: nums = [1000000007] output: 0",`n == nums.length` `1 <= n <= 10^5` `-231 <= nums[i] <= 231 - 1`,
397,Integer Replacement,"Given a positive integer `n`, you can apply one of the following operations:
If `n` is even, replace `n` with `n / 2`.

If `n` is odd, replace `n` with either `n + 1` or `n - 1`.

Return the minimum number of operations needed for `n` to become `1`.


Example 1:
Input: n = 8
Output: 3
Explanation: 8 -> 4 -> 2 -> 1

Example 2:
Input: n = 7
Output: 4
Explanation: 7 -> 8 -> 4 -> 2 -> 1
or 7 -> 6 -> 3 -> 2 -> 1

Example 3:
Input: n = 4
Output: 2

Constraints:
`1 <= n <= 231 - 1`",Medium,https://leetcode.com/problems/integer-replacement,Google,"Math,Bit Manipulation",505,,"given a positive integer `n`, you can apply one of the following operations: if `n` is even, replace `n` with `n / 2`. if `n` is odd, replace `n` with either `n + 1` or `n - 1`. return the minimum number of operations needed for `n` to become `1`.",input: n = 8 output: 3 explanation: 8 -> 4 -> 2 -> 1 example 2: input: n = 7 output: 4 explanation: 7 -> 8 -> 4 -> 2 -> 1 or 7 -> 6 -> 3 -> 2 -> 1 example 3: input: n = 4 output: 2,`1 <= n <= 231 - 1`,
398,Random Pick Index,"Given an integer array `nums` with possible duplicates, randomly output the index of a given `target` number. You can assume that the given target number must exist in the array.

Implement the `Solution` class:
`Solution(int[] nums)` Initializes the object with the array `nums`.

`int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i's, then each index should have an equal probability of returning.


Example 1:
Input
[""Solution"", ""pick"", ""pick"", ""pick""]
[[[1, 2, 3, 3, 3]], [3], [1], [3]]
Output
[null, 4, 0, 2]
Explanation
Solution solution = new Solution([1, 2, 3, 3, 3]);
solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.

solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.

solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.


Constraints:
`1 <= nums.length <= 2 * 104`
`-231 <= nums[i] <= 231 - 1`
`target` is an integer from `nums`.

At most `104` calls will be made to `pick`.",Medium,https://leetcode.com/problems/random-pick-index,Facebook,Reservoir Sampling,639,"[Linked List Random Node, /problems/linked-list-random-node/, Medium], [Random Pick with Blacklist, /problems/random-pick-with-blacklist/, Hard], [Random Pick with Weight, /problems/random-pick-with-weight/, Medium]","given an integer array `nums` with possible duplicates, randomly output the index of a given `target` number. you can assume that the given target number must exist in the array. implement the `solution` class: `solution(int[] nums)` initializes the object with the array `nums`. `int pick(int target)` picks a random index `i` from `nums` where `nums[i] == target`. if there are multiple valid i's, then each index should have an equal probability of returning.","input [""solution"", ""pick"", ""pick"", ""pick""] [[[1, 2, 3, 3, 3]], [3], [1], [3]] output [null, 4, 0, 2] explanation solution solution = new solution([1, 2, 3, 3, 3]); solution.pick(3); // it should return either index 2, 3, or 4 randomly. each index should have equal probability of returning. solution.pick(1); // it should return 0. since in the array only nums[0] is equal to 1. solution.pick(3); // it should return either index 2, 3, or 4 randomly. each index should have equal probability of returning.",`1 <= nums.length <= 2 * 10^4` `-231 <= nums[i] <= 231 - 1` `target` is an integer from `nums`. at most `10^4` calls will be made to `pick`.,
399,Evaluate Division,"You are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent the equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that represents a single variable.

You are also given some `queries`, where `queries[j] = [Cj, Dj]` represents the `jth` query where you must find the answer for `Cj / Dj = ?`.

Return the answers to all queries. If a single answer cannot be determined, return `-1.0`.

Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.


Example 1:
Input: equations = [[""a"",""b""],[""b"",""c""]], values = [2.0,3.0], queries = [[""a"",""c""],[""b"",""a""],[""a"",""e""],[""a"",""a""],[""x"",""x""]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]

Example 2:
Input: equations = [[""a"",""b""],[""b"",""c""],[""bc"",""cd""]], values = [1.5,2.5,5.0], queries = [[""a"",""c""],[""c"",""b""],[""bc"",""cd""],[""cd"",""bc""]]
Output: [3.75000,0.40000,5.00000,0.20000]

Example 3:
Input: equations = [[""a"",""b""]], values = [0.5], queries = [[""a"",""b""],[""b"",""a""],[""a"",""c""],[""x"",""y""]]
Output: [0.50000,2.00000,-1.00000,-1.00000]

Constraints:
`1 <= equations.length <= 20`
`equations[i].length == 2`
`1 <= Ai.length, Bi.length <= 5`
`values.length == equations.length`
`0.0 < values[i] <= 20.0`
`1 <= queries.length <= 20`
`queries[i].length == 2`
`1 <= Cj.length, Dj.length <= 5`
`Ai, Bi, Cj, Dj` consist of lower case English letters and digits.",Medium,https://leetcode.com/problems/evaluate-division,"Bloomberg,Amazon,Uber,Google,Facebook,Microsoft,Apple","Union Find,Graph",3334,,"you are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [ai, bi]` and `values[i]` represent the equation `ai / bi = values[i]`. each `ai` or `bi` is a string that represents a single variable. you are also given some `queries`, where `queries[j] = [cj, dj]` represents the `jth` query where you must find the answer for `cj / dj = ?`. return the answers to all queries. if a single answer cannot be determined, return `-1.0`. note: the input is always valid. you may assume that evaluating the queries will not result in division by zero and that there is no contradiction.","input: equations = [[""a"",""b""],[""b"",""c""]], values = [2.0,3.0], queries = [[""a"",""c""],[""b"",""a""],[""a"",""e""],[""a"",""a""],[""x"",""x""]] output: [6.00000,0.50000,-1.00000,1.00000,-1.00000] explanation: given: a / b = 2.0, b / c = 3.0 queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? return: [6.0, 0.5, -1.0, 1.0, -1.0 ] example 2: input: equations = [[""a"",""b""],[""b"",""c""],[""bc"",""cd""]], values = [1.5,2.5,5.0], queries = [[""a"",""c""],[""c"",""b""],[""bc"",""cd""],[""cd"",""bc""]] output: [3.75000,0.40000,5.00000,0.20000] example 3: input: equations = [[""a"",""b""]], values = [0.5], queries = [[""a"",""b""],[""b"",""a""],[""a"",""c""],[""x"",""y""]] output: [0.50000,2.00000,-1.00000,-1.00000]","`1 <= equations.length <= 20` `equations[i].length == 2` `1 <= ai.length, bi.length <= 5` `values.length == equations.length` `0.0 < values[i] <= 20.0` `1 <= queries.length <= 20` `queries[i].length == 2` `1 <= cj.length, dj.length <= 5` `ai, bi, cj, dj` consist of lower case english letters and digits.",
400,Nth Digit,"Given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.


Example 1:
Input: n = 3
Output: 3

Example 2:
Input: n = 11
Output: 0
Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.


Constraints:
`1 <= n <= 231 - 1`",Medium,https://leetcode.com/problems/nth-digit,Facebook,Math,464,,"given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.","input: n = 3 output: 3 example 2: input: n = 11 output: 0 explanation: the 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.",`1 <= n <= 231 - 1`,
401,Binary Watch,"A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).

Each LED represents a zero or one, with the least significant bit on the right.

For example, the above binary watch reads ""3:25"".

Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.


Example:
Input: n = 1Return: [""1:00"", ""2:00"", ""4:00"", ""8:00"", ""0:01"", ""0:02"", ""0:04"", ""0:08"", ""0:16"", ""0:32""]
Note:
The order of output does not matter.

The hour must not contain a leading zero, for example ""01:00"" is not valid, it should be ""1:00"".

The minute must be consist of two digits and may contain a leading zero, for example ""10:2"" is not valid, it should be ""10:02"".",Easy,https://leetcode.com/problems/binary-watch,"Apple,Google","Backtracking,Bit Manipulation",730,"[Letter Combinations of a Phone Number, /problems/letter-combinations-of-a-phone-number/, Medium], [Number of 1 Bits, /problems/number-of-1-bits/, Easy]","a binary watch has 4 leds on the top which represent the hours (0-11), and the 6 leds on the bottom represent the minutes (0-59). each led represents a zero or one, with the least significant bit on the right. for example, the above binary watch reads ""3:25"". given a non-negative integer n which represents the number of leds that are currently on, return all possible times the watch could represent.","input: n = 1return: [""1:00"", ""2:00"", ""4:00"", ""8:00"", ""0:01"", ""0:02"", ""0:04"", ""0:08"", ""0:16"", ""0:32""] note: the order of output does not matter. the hour must not contain a leading zero, for example ""01:00"" is not valid, it should be ""1:00"". the minute must be consist of two digits and may contain a leading zero, for example ""10:2"" is not valid, it should be ""10:02"".",,
402,Remove K Digits,"Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be ≥ k.

The given num does not contain any leading zero.


Example 1:
Input: num = ""1432219"", k = 3
Output: ""1219""
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.


Example 2:
Input: num = ""10200"", k = 1
Output: ""200""
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.


Example 3:
Input: num = ""10"", k = 2
Output: ""0""
Explanation: Remove all the digits from the number and it is left with nothing which is 0.",Medium,https://leetcode.com/problems/remove-k-digits,"Amazon,Microsoft,Adobe,Oracle","Stack,Greedy",3193,"[Create Maximum Number, /problems/create-maximum-number/, Hard], [Monotone Increasing Digits, /problems/monotone-increasing-digits/, Medium], [Find the Most Competitive Subsequence, /problems/find-the-most-competitive-subsequence/, Medium]","given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible. note: the length of num is less than 10002 and will be ≥ k. the given num does not contain any leading zero.","input: num = ""1432219"", k = 3 output: ""1219"" explanation: remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest. example 2: input: num = ""10200"", k = 1 output: ""200"" explanation: remove the leading 1 and the number is 200. note that the output must not contain leading zeroes. example 3: input: num = ""10"", k = 2 output: ""0"" explanation: remove all the digits from the number and it is left with nothing which is 0.",,
403,Frog Jump,"A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.

Given a list of `stones`' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be `1` unit.

If the frog's last jump was `k` units, its next jump must be either `k - 1`, `k`, or `k + 1` units. The frog can only jump in the forward direction.


Example 1:
Input: stones = [0,1,3,5,6,8,12,17]
Output: true
Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.


Example 2:
Input: stones = [0,1,2,3,4,8,9,11]
Output: false
Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.


Constraints:
`2 <= stones.length <= 2000`
`0 <= stones[i] <= 231 - 1`
`stones[0] == 0`",Hard,https://leetcode.com/problems/frog-jump,"Amazon,Microsoft,ByteDance,Google",Dynamic Programming,1497,,"a frog is crossing a river. the river is divided into some number of units, and at each unit, there may or may not exist a stone. the frog can jump on a stone, but it must not jump into the water. given a list of `stones`' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. initially, the frog is on the first stone and assumes the first jump must be `1` unit. if the frog's last jump was `k` units, its next jump must be either `k - 1`, `k`, or `k + 1` units. the frog can only jump in the forward direction.","input: stones = [0,1,3,5,6,8,12,17] output: true explanation: the frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone. example 2: input: stones = [0,1,2,3,4,8,9,11] output: false explanation: there is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.",`2 <= stones.length <= 2000` `0 <= stones[i] <= 231 - 1` `stones[0] == 0`,
404,Sum of Left Leaves,"Find the sum of all left leaves in a given binary tree.


Example:
    3
   / \
  9  20
    /  \
   15   7
There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.",Easy,https://leetcode.com/problems/sum-of-left-leaves,"Adobe,Apple",Tree,1782,,find the sum of all left leaves in a given binary tree.,"3 / \ 9 20 / \ 15 7 there are two left leaves in the binary tree, with values 9 and 15 respectively. return 24.",,
405,Convert a Number to Hexadecimal,"Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.

Note:
All letters in hexadecimal (`a-f`) must be in lowercase.

The hexadecimal string must not contain extra leading `0`s. If the number is zero, it is represented by a single zero character `'0'`; otherwise, the first character in the hexadecimal string will not be the zero character.

The given number is guaranteed to fit within the range of a 32-bit signed integer.

You must not use any method provided by the library which converts/formats the number to hex directly.


Example 1:
Input:
26
Output:
""1a""

Example 2:
Input:
-1
Output:
""ffffffff""",Easy,https://leetcode.com/problems/convert-a-number-to-hexadecimal,Facebook,Bit Manipulation,590,,"given an integer, write an algorithm to convert it to hexadecimal. for negative integer, two’s complement method is used. note: all letters in hexadecimal (`a-f`) must be in lowercase. the hexadecimal string must not contain extra leading `0`s. if the number is zero, it is represented by a single zero character `'0'`; otherwise, the first character in the hexadecimal string will not be the zero character. the given number is guaranteed to fit within the range of a 32-bit signed integer. you must not use any method provided by the library which converts/formats the number to hex directly.","input: 26 output: ""1a"" example 2: input: -1 output: ""ffffffff""",,
406,Queue Reconstruction by Height,"You are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with exactly `ki` other people in front who have a height greater than or equal to `hi`.

Reconstruct and return the queue that is represented by the input array `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).


Example 1:
Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
Explanation:
Person 0 has height 5 with no other people taller or the same height in front.

Person 1 has height 7 with no other people taller or the same height in front.

Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.

Person 3 has height 6 with one person taller or the same height in front, which is person 1.

Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.

Person 5 has height 7 with one person taller or the same height in front, which is person 1.

Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.


Example 2:
Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]

Constraints:
`1 <= people.length <= 2000`
`0 <= hi <= 106`
`0 <= ki < people.length`
It is guaranteed that the queue can be reconstructed.",Medium,https://leetcode.com/problems/queue-reconstruction-by-height,"Google,Facebook",Greedy,3972,"[Count of Smaller Numbers After Self, /problems/count-of-smaller-numbers-after-self/, Hard]","you are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with exactly `ki` other people in front who have a height greater than or equal to `hi`. reconstruct and return the queue that is represented by the input array `people`. the returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).","input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]] output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] explanation: person 0 has height 5 with no other people taller or the same height in front. person 1 has height 7 with no other people taller or the same height in front. person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1. person 3 has height 6 with one person taller or the same height in front, which is person 1. person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3. person 5 has height 7 with one person taller or the same height in front, which is person 1. hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue. example 2: input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]] output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]",`1 <= people.length <= 2000` `0 <= hi <= 10^6` `0 <= ki < people.length` it is guaranteed that the queue can be reconstructed.,
407,Trapping Rain Water II,"Given an `m x n` matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.


Example:
Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]
Return 4.

The above image represents the elevation map `[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]` before the rain.

After the rain, water is trapped between the blocks. The total volume of water trapped is 4.


Constraints:
`1 <= m, n <= 110`
`0 <= heightMap[i][j] <= 20000`",Hard,https://leetcode.com/problems/trapping-rain-water-ii,"Google,Amazon","Heap,Breadth-first Search",1776,"[Trapping Rain Water, /problems/trapping-rain-water/, Hard]","given an `m x n` matrix of positive integers representing the height of each unit cell in a 2d elevation map, compute the volume of water it is able to trap after raining.","given the following 3x6 height map: [ [1,4,3,1,3,2], [3,2,1,3,2,4], [2,3,3,2,3,1] ] return 4. the above image represents the elevation map `[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]` before the rain. after the rain, water is trapped between the blocks. the total volume of water trapped is 4.","`1 <= m, n <= 110` `0 <= heightmap[i][j] <= 20000`",
408,Valid Word Abbreviation,"Given a non-empty string `s` and an abbreviation `abbr`, return whether the string matches with the given abbreviation.

A string such as `""word""` contains only the following valid abbreviations:
[""word"", ""1ord"", ""w1rd"", ""wo1d"", ""wor1"", ""2rd"", ""w2d"", ""wo2"", ""1o1d"", ""1or1"", ""w1r1"", ""1o2"", ""2r1"", ""3d"", ""w3"", ""4""]
Notice that only the above abbreviations are valid abbreviations of the string `""word""`. Any other string is not a valid abbreviation of `""word""`.

Note:
Assume `s` contains only lowercase letters and `abbr` contains only lowercase letters and digits.


Example 1:
Given s = ""internationalization"", abbr = ""i12iz4n"":
Return true.


Example 2:
Given s = ""apple"", abbr = ""a2e"":
Return false.",Easy,https://leetcode.com/problems/valid-word-abbreviation,Facebook,String,187,"[Minimum Unique Word Abbreviation, /problems/minimum-unique-word-abbreviation/, Hard], [Word Abbreviation, /problems/word-abbreviation/, Hard]","given a non-empty string `s` and an abbreviation `abbr`, return whether the string matches with the given abbreviation. a string such as `""word""` contains only the following valid abbreviations: [""word"", ""1ord"", ""w1rd"", ""wo1d"", ""wor1"", ""2rd"", ""w2d"", ""wo2"", ""1o1d"", ""1or1"", ""w1r1"", ""1o2"", ""2r1"", ""3d"", ""w3"", ""4""] notice that only the above abbreviations are valid abbreviations of the string `""word""`. any other string is not a valid abbreviation of `""word""`. note: assume `s` contains only lowercase letters and `abbr` contains only lowercase letters and digits.","given s = ""internationalization"", abbr = ""i12iz4n"": return true. example 2: given s = ""apple"", abbr = ""a2e"": return false.",,
409,Longest Palindrome,"Given a string `s` which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

Letters are case sensitive, for example, `""Aa""` is not considered a palindrome here.


Example 1:
Input: s = ""abccccdd""
Output: 7
Explanation:
One longest palindrome that can be built is ""dccaccd"", whose length is 7.


Example 2:
Input: s = ""a""
Output: 1

Example 3:
Input: s = ""bb""
Output: 2

Constraints:
`1 <= s.length <= 2000`
`s` consists of lowercase and/or uppercase English letters only.",Easy,https://leetcode.com/problems/longest-palindrome,Wayfair,Hash Table,1525,"[Palindrome Permutation, /problems/palindrome-permutation/, Easy]","given a string `s` which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters. letters are case sensitive, for example, `""aa""` is not considered a palindrome here.","input: s = ""abccccdd"" output: 7 explanation: one longest palindrome that can be built is ""dccaccd"", whose length is 7. example 2: input: s = ""a"" output: 1 example 3: input: s = ""bb"" output: 2",`1 <= s.length <= 2000` `s` consists of lowercase and/or uppercase english letters only.,
410,Split Array Largest Sum,"Given an array `nums` which consists of non-negative integers and an integer `m`, you can split the array into `m` non-empty continuous subarrays.

Write an algorithm to minimize the largest sum among these `m` subarrays.


Example 1:
Input: nums = [7,2,5,10,8], m = 2
Output: 18
Explanation:
There are four ways to split nums into two subarrays.

The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.


Example 2:
Input: nums = [1,2,3,4,5], m = 2
Output: 9

Example 3:
Input: nums = [1,4,4], m = 3
Output: 4

Constraints:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 106`
`1 <= m <= min(50, nums.length)`",Hard,https://leetcode.com/problems/split-array-largest-sum,"Amazon,Google","Binary Search,Dynamic Programming",2522,,"given an array `nums` which consists of non-negative integers and an integer `m`, you can split the array into `m` non-empty continuous subarrays. write an algorithm to minimize the largest sum among these `m` subarrays.","input: nums = [7,2,5,10,8], m = 2 output: 18 explanation: there are four ways to split nums into two subarrays. the best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18. example 2: input: nums = [1,2,3,4,5], m = 2 output: 9 example 3: input: nums = [1,4,4], m = 3 output: 4","`1 <= nums.length <= 1000` `0 <= nums[i] <= 10^6` `1 <= m <= min(50, nums.length)`",
411,Minimum Unique Word Abbreviation,"A string can be abbreviated by replacing any number of non-adjacent substrings with their lengths. For example, a string such as `""substitution""` could be abbreviated as (but not limited to):
`""s10n""` (`""s ubstitutio n""`)
`""sub4u4""` (`""sub stit u tion""`)
`""12""` (`""substitution""`)
`""su3i1u2on""` (`""su bst i t u ti on""`)
`""substitution""` (no substrings replaced)
Note that `""s55n""` (`""s ubsti tutio n""`) is not a valid abbreviation of `""substitution""` because the replaced substrings are adjacent.

The length of an abbreviation is the number of letters that were not replaced plus the number of substrings that were replaced. For example, the abbreviation `""s10n""` has a length of `3` (`2` letters + `1` substring) and `""su3i1u2on""` has a length of `9` (`6` letters + `3` substrings).

Given a target string `target` and an array of strings `dictionary`, return an abbreviation of `target` with the shortest possible length such that it is not an abbreviation of any string in `dictionary`. If there are multiple shortest abbreviations, return any of them.


Example 1:
Input: target = ""apple"", dictionary = [""blade""]
Output: ""a4""
Explanation: The shortest abbreviation of ""apple"" is ""5"", but this is also an abbreviation of ""blade"".

The next shortest abbreviations are ""a4"" and ""4e"". ""4e"" is an abbreviation of blade while ""a4"" is not.

Hence, return ""a4"".


Example 2:
Input: target = ""apple"", dictionary = [""blade"",""plain"",""amber""]
Output: ""1p3""
Explanation: ""5"" is an abbreviation of both ""apple"" but also every word in the dictionary.

""a4"" is an abbreviation of ""apple"" but also ""amber"".

""4e"" is an abbreviation of ""apple"" but also ""blade"".

""1p3"", ""2p2"", and ""3l1"" are the next shortest abbreviations of ""apple"".

Since none of them are abbreviations of words in the dictionary, returning any of them is correct.


Constraints:
`target.length == m`
`dictionary.length == n`
`1 <= m <= 21`
`0 <= n <= 1000`
`1 <= dictionary[i] <= 100`
`log2(n) + m <= 21` if `n > 0`",Hard,https://leetcode.com/problems/minimum-unique-word-abbreviation,Google,"Backtracking,Bit Manipulation",147,"[Generalized Abbreviation, /problems/generalized-abbreviation/, Medium], [Valid Word Abbreviation, /problems/valid-word-abbreviation/, Easy], [Word Abbreviation, /problems/word-abbreviation/, Hard]","a string can be abbreviated by replacing any number of non-adjacent substrings with their lengths. for example, a string such as `""substitution""` could be abbreviated as (but not limited to): `""s10n""` (`""s ubstitutio n""`) `""sub4u4""` (`""sub stit u tion""`) `""12""` (`""substitution""`) `""su3i1u2on""` (`""su bst i t u ti on""`) `""substitution""` (no substrings replaced) note that `""s55n""` (`""s ubsti tutio n""`) is not a valid abbreviation of `""substitution""` because the replaced substrings are adjacent. the length of an abbreviation is the number of letters that were not replaced plus the number of substrings that were replaced. for example, the abbreviation `""s10n""` has a length of `3` (`2` letters + `1` substring) and `""su3i1u2on""` has a length of `9` (`6` letters + `3` substrings). given a target string `target` and an array of strings `dictionary`, return an abbreviation of `target` with the shortest possible length such that it is not an abbreviation of any string in `dictionary`. if there are multiple shortest abbreviations, return any of them.","input: target = ""apple"", dictionary = [""blade""] output: ""a4"" explanation: the shortest abbreviation of ""apple"" is ""5"", but this is also an abbreviation of ""blade"". the next shortest abbreviations are ""a4"" and ""4e"". ""4e"" is an abbreviation of blade while ""a4"" is not. hence, return ""a4"". example 2: input: target = ""apple"", dictionary = [""blade"",""plain"",""amber""] output: ""1p3"" explanation: ""5"" is an abbreviation of both ""apple"" but also every word in the dictionary. ""a4"" is an abbreviation of ""apple"" but also ""amber"". ""4e"" is an abbreviation of ""apple"" but also ""blade"". ""1p3"", ""2p2"", and ""3l1"" are the next shortest abbreviations of ""apple"". since none of them are abbreviations of words in the dictionary, returning any of them is correct.",`target.length == m` `dictionary.length == n` `1 <= m <= 21` `0 <= n <= 1000` `1 <= dictionary[i] <= 10^0` `log2(n) + m <= 21` if `n > 0`,
412,Fizz Buzz,"Write a program that outputs the string representation of numbers from 1 to n.

But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.


Example:
n = 15,
Return:
[
    ""1"",
    ""2"",
    ""Fizz"",
    ""4"",
    ""Buzz"",
    ""Fizz"",
    ""7"",
    ""8"",
    ""Fizz"",
    ""Buzz"",
    ""11"",
    ""Fizz"",
    ""13"",
    ""14"",
    ""FizzBuzz""
]",Easy,https://leetcode.com/problems/fizz-buzz,"Microsoft,Apple",,1305,,write a program that outputs the string representation of numbers from 1 to n. but for multiples of three it should output “fizz” instead of the number and for the multiples of five output “buzz”. for numbers which are multiples of both three and five output “fizzbuzz”.,"n = 15, return: [ ""1"", ""2"", ""fizz"", ""4"", ""buzz"", ""fizz"", ""7"", ""8"", ""fizz"", ""buzz"", ""11"", ""fizz"", ""13"", ""14"", ""fizzbuzz"" ]",,
413,Arithmetic Slices,"An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences.

Given an integer array `nums`, return the number of arithmetic subarrays of `nums`.

A subarray is a contiguous subsequence of the array.


Example 1:
Input: nums = [1,2,3,4]
Output: 3
Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.


Example 2:
Input: nums = [1]
Output: 0

Constraints:
`1 <= nums.length <= 5000`
`-1000 <= nums[i] <= 1000`",Medium,https://leetcode.com/problems/arithmetic-slices,Amazon,"Math,Dynamic Programming",1718,"[Arithmetic Slices II - Subsequence, /problems/arithmetic-slices-ii-subsequence/, Hard], [Arithmetic Subarrays, /problems/arithmetic-subarrays/, Medium]","an integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. for example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences. given an integer array `nums`, return the number of arithmetic subarrays of `nums`. a subarray is a contiguous subsequence of the array.","input: nums = [1,2,3,4] output: 3 explanation: we have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself. example 2: input: nums = [1] output: 0",`1 <= nums.length <= 5000` `-1000 <= nums[i] <= 1000`,
414,Third Maximum Number,"Given integer array `nums`, return the third maximum number in this array. If the third maximum does not exist, return the maximum number.


Example 1:
Input: nums = [3,2,1]
Output: 1
Explanation: The third maximum is 1.


Example 2:
Input: nums = [1,2]
Output: 2
Explanation: The third maximum does not exist, so the maximum (2) is returned instead.


Example 3:
Input: nums = [2,2,3,1]
Output: 1
Explanation: Note that the third maximum here means the third maximum distinct number.

Both numbers with value 2 are both considered as second maximum.


Constraints:
`1 <= nums.length <= 104`
`-231 <= nums[i] <= 231 - 1`
Follow up: Can you find an `O(n)` solution?",Easy,https://leetcode.com/problems/third-maximum-number,Facebook,Array,955,"[Kth Largest Element in an Array, /problems/kth-largest-element-in-an-array/, Medium]","given integer array `nums`, return the third maximum number in this array. if the third maximum does not exist, return the maximum number.","input: nums = [3,2,1] output: 1 explanation: the third maximum is 1. example 2: input: nums = [1,2] output: 2 explanation: the third maximum does not exist, so the maximum (2) is returned instead. example 3: input: nums = [2,2,3,1] output: 1 explanation: note that the third maximum here means the third maximum distinct number. both numbers with value 2 are both considered as second maximum.",`1 <= nums.length <= 10^4` `-231 <= nums[i] <= 231 - 1`,can you find an `o(n)` solution?
415,Add Strings,"Given two non-negative integers, `num1` and `num2` represented as string, return the sum of `num1` and `num2` as a string.


Example 1:
Input: num1 = ""11"", num2 = ""123""
Output: ""134""

Example 2:
Input: num1 = ""456"", num2 = ""77""
Output: ""533""

Example 3:
Input: num1 = ""0"", num2 = ""0""
Output: ""0""

Constraints:
`1 <= num1.length, num2.length <= 104`
`num1` and `num2` consist of only digits.

`num1` and `num2` don't have any leading zeros except for the zero itself.

Follow up: Could you solve it without using any built-in `BigInteger` library or converting the inputs to integer directly?",Easy,https://leetcode.com/problems/add-strings,"Facebook,Adobe,Google,Wayfair,Microsoft,Square,Uber,Bloomberg,Amazon,Oracle",String,1680,"[Add Two Numbers, /problems/add-two-numbers/, Medium], [Multiply Strings, /problems/multiply-strings/, Medium], [Add to Array-Form of Integer, /problems/add-to-array-form-of-integer/, Easy]","given two non-negative integers, `num1` and `num2` represented as string, return the sum of `num1` and `num2` as a string.","input: num1 = ""11"", num2 = ""123"" output: ""134"" example 2: input: num1 = ""456"", num2 = ""77"" output: ""533"" example 3: input: num1 = ""0"", num2 = ""0"" output: ""0""","`1 <= num1.length, num2.length <= 10^4` `num1` and `num2` consist of only digits. `num1` and `num2` don't have any leading zeros except for the zero itself.",could you solve it without using any built-in `biginteger` library or converting the inputs to integer directly?
416,Partition Equal Subset Sum,"Given a non-empty array `nums` containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.


Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].


Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.


Constraints:
`1 <= nums.length <= 200`
`1 <= nums[i] <= 100`",Medium,https://leetcode.com/problems/partition-equal-subset-sum,"Amazon,Facebook",Dynamic Programming,4194,"[Partition to K Equal Sum Subsets, /problems/partition-to-k-equal-sum-subsets/, Medium]","given a non-empty array `nums` containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.","input: nums = [1,5,11,5] output: true explanation: the array can be partitioned as [1, 5, 5] and [11]. example 2: input: nums = [1,2,3,5] output: false explanation: the array cannot be partitioned into equal sum subsets.",`1 <= nums.length <= 200` `1 <= nums[i] <= 10^0`,
417,Pacific Atlantic Water Flow,"You are given an `m x n` integer matrix `heights` representing the height of each unit cell in a continent. The Pacific ocean touches the continent's left and top edges, and the Atlantic ocean touches the continent's right and bottom edges.

Water can only flow in four directions: up, down, left, and right. Water flows from a cell to an adjacent one with an equal or lower height.

Return a list of grid coordinates where water can flow to both the Pacific and Atlantic oceans.


Example 1:
Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]

Example 2:
Input: heights = [[2,1],[1,2]]
Output: [[0,0],[0,1],[1,0],[1,1]]

Constraints:
`m == heights.length`
`n == heights[i].length`
`1 <= m, n <= 200`
`1 <= heights[i][j] <= 105`",Medium,https://leetcode.com/problems/pacific-atlantic-water-flow,"ByteDance,Google,Amazon","Depth-first Search,Breadth-first Search",2098,,"you are given an `m x n` integer matrix `heights` representing the height of each unit cell in a continent. the pacific ocean touches the continent's left and top edges, and the atlantic ocean touches the continent's right and bottom edges. water can only flow in four directions: up, down, left, and right. water flows from a cell to an adjacent one with an equal or lower height. return a list of grid coordinates where water can flow to both the pacific and atlantic oceans.","input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]] output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]] example 2: input: heights = [[2,1],[1,2]] output: [[0,0],[0,1],[1,0],[1,1]]","`m == heights.length` `n == heights[i].length` `1 <= m, n <= 200` `1 <= heights[i][j] <= 10^5`",
418,Sentence Screen Fitting,"Given a `rows x cols` screen and a sentence represented by a list of non-empty words, find how many times the given sentence can be fitted on the screen.

Note:
A word cannot be split into two lines.

The order of words in the sentence must remain unchanged.

Two consecutive words in a line must be separated by a single space.

Total words in the sentence won't exceed 100.

Length of each word is greater than 0 and won't exceed 10.

1 ≤ rows, cols ≤ 20,000.


Example 1:
Input:
rows = 2, cols = 8, sentence = [""hello"", ""world""]
Output: 
1
Explanation:
hello---
world---
The character '-' signifies an empty space on the screen.


Example 2:
Input:
rows = 3, cols = 6, sentence = [""a"", ""bcd"", ""e""]
Output: 
2
Explanation:
a-bcd- 
e-a---
bcd-e-
The character '-' signifies an empty space on the screen.


Example 3:
Input:
rows = 4, cols = 5, sentence = [""I"", ""had"", ""apple"", ""pie""]
Output: 
1
Explanation:
I-had
apple
pie-I
had--
The character '-' signifies an empty space on the screen.",Medium,https://leetcode.com/problems/sentence-screen-fitting,Google,Dynamic Programming,562,,"given a `rows x cols` screen and a sentence represented by a list of non-empty words, find how many times the given sentence can be fitted on the screen. note: a word cannot be split into two lines. the order of words in the sentence must remain unchanged. two consecutive words in a line must be separated by a single space. total words in the sentence won't exceed 100. length of each word is greater than 0 and won't exceed 10. 1 ≤ rows, cols ≤ 20,000.","input: rows = 2, cols = 8, sentence = [""hello"", ""world""] output: 1 explanation: hello--- world--- the character '-' signifies an empty space on the screen. example 2: input: rows = 3, cols = 6, sentence = [""a"", ""bcd"", ""e""] output: 2 explanation: a-bcd- e-a--- bcd-e- the character '-' signifies an empty space on the screen. example 3: input: rows = 4, cols = 5, sentence = [""i"", ""had"", ""apple"", ""pie""] output: 1 explanation: i-had apple pie-i had-- the character '-' signifies an empty space on the screen.",,
419,Battleships in a Board,"Given an 2D board, count how many battleships are in it. The battleships are represented with `'X'`s, empty slots are represented with `'.'`s. You may assume the following rules:
You receive a valid board, made of only battleships or empty slots.

Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape `1xN` (1 row, N columns) or `Nx1` (N rows, 1 column), where N can be of any size.

At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.


Example:
X..X
...X
...X
In the above board there are 2 battleships.


Invalid Example:
...X
XXXX
...X
This is an invalid board that you will not receive - as battleships will always have a cell separating between them.

Follow up:Could you do it in one-pass, using only O(1) extra memory and without modifying the value of the board?",Medium,https://leetcode.com/problems/battleships-in-a-board,"Facebook,Microsoft,Google,Twitch",,936,,"given an 2d board, count how many battleships are in it. the battleships are represented with `'x'`s, empty slots are represented with `'.'`s. you may assume the following rules: you receive a valid board, made of only battleships or empty slots. battleships can only be placed horizontally or vertically. in other words, they can only be made of the shape `1xn` (1 row, n columns) or `nx1` (n rows, 1 column), where n can be of any size. at least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.",x..x ...x ...x in the above board there are 2 battleships. invalid example: ...x xxxx ...x this is an invalid board that you will not receive - as battleships will always have a cell separating between them.,,"could you do it in one-pass, using only o(1) extra memory and without modifying the value of the board?"
420,Strong Password Checker,"A password is considered strong if the below conditions are all met:
It has at least `6` characters and at most `20` characters.

It contains at least one lowercase letter, at least one uppercase letter, and at least one digit.

It does not contain three repeating characters in a row (i.e., `""...aaa...""` is weak, but `""...aa...a...""` is strong, assuming other conditions are met).

Given a string `password`, return the minimum number of steps required to make `password` strong. if `password` is already strong, return `0`.

In one step, you can:
Insert one character to `password`,
Delete one character from `password`, or
Replace one character of `password` with another character.


Example 1:
Input: password = ""a""
Output: 5

Example 2:
Input: password = ""aA1""
Output: 3

Example 3:
Input: password = ""1337C0d3""
Output: 0

Constraints:
`1 <= password.length <= 50`
`password` consists of letters, digits, dot `'.'` or exclamation mark `'!'`.",Hard,https://leetcode.com/problems/strong-password-checker,"Google,Oracle,Microsoft",,317,,"a password is considered strong if the below conditions are all met: it has at least `6` characters and at most `20` characters. it contains at least one lowercase letter, at least one uppercase letter, and at least one digit. it does not contain three repeating characters in a row (i.e., `""...aaa...""` is weak, but `""...aa...a...""` is strong, assuming other conditions are met). given a string `password`, return the minimum number of steps required to make `password` strong. if `password` is already strong, return `0`. in one step, you can: insert one character to `password`, delete one character from `password`, or replace one character of `password` with another character.","input: password = ""a"" output: 5 example 2: input: password = ""aa1"" output: 3 example 3: input: password = ""1337c0d3"" output: 0","`1 <= password.length <= 50` `password` consists of letters, digits, dot `'.'` or exclamation mark `'!'`.",
421,Maximum XOR of Two Numbers in an Array,"Given an integer array `nums`, return the maximum result of `nums[i] XOR nums[j]`, where `0 ≤ i ≤ j < n`.

Follow up: Could you do this in `O(n)` runtime?

Example 1:
Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.


Example 2:
Input: nums = [0]
Output: 0

Example 3:
Input: nums = [2,4]
Output: 6

Example 4:
Input: nums = [8,10,2]
Output: 10

Example 5:
Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127

Constraints:
`1 <= nums.length <= 2 * 104`
`0 <= nums[i] <= 231 - 1`",Medium,https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array,VMware,"Bit Manipulation,Trie",2009,"[Maximum XOR With an Element From Array, /problems/maximum-xor-with-an-element-from-array/, Hard]","given an integer array `nums`, return the maximum result of `nums[i] xor nums[j]`, where `0 ≤ i ≤ j < n`.","input: nums = [3,10,5,25,2,8] output: 28 explanation: the maximum result is 5 xor 25 = 28. example 2: input: nums = [0] output: 0 example 3: input: nums = [2,4] output: 6 example 4: input: nums = [8,10,2] output: 10 example 5: input: nums = [14,70,53,83,49,91,36,80,92,51,66,70] output: 127",`1 <= nums.length <= 2 * 10^4` `0 <= nums[i] <= 231 - 1`,"could you do this in `o(n)` runtime? example 1: input: nums = [3,10,5,25,2,8] output: 28 explanation: the maximum result is 5 xor 25 = 28. example 2: input: nums = [0] output: 0 example 3: input: nums = [2,4] output: 6 example 4: input: nums = [8,10,2] output: 10 example 5: input: nums = [14,70,53,83,49,91,36,80,92,51,66,70] output: 127 constraints: `1 <= nums.length <= 2 * 104` `0 <= nums[i] <= 231 - 1`"
422,Valid Word Square,"Given a sequence of words, check whether it forms a valid word square.

A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k < max(numRows, numColumns).

Note:
The number of words given is at least 1 and does not exceed 500.

Word length will be at least 1 and does not exceed 500.

Each word contains only lowercase English alphabet `a-z`.


Example 1:
Input:
[
  ""abcd"",
  ""bnrt"",
  ""crmy"",
  ""dtye""
]
Output:
true
Explanation:
The first row and first column both read ""abcd"".

The second row and second column both read ""bnrt"".

The third row and third column both read ""crmy"".

The fourth row and fourth column both read ""dtye"".

Therefore, it is a valid word square.


Example 2:
Input:
[
  ""abcd"",
  ""bnrt"",
  ""crm"",
  ""dt""
]
Output:
true
Explanation:
The first row and first column both read ""abcd"".

The second row and second column both read ""bnrt"".

The third row and third column both read ""crm"".

The fourth row and fourth column both read ""dt"".

Therefore, it is a valid word square.


Example 3:
Input:
[
  ""ball"",
  ""area"",
  ""read"",
  ""lady""
]
Output:
false
Explanation:
The third row reads ""read"" while the third column reads ""lead"".

Therefore, it is NOT a valid word square.",Easy,https://leetcode.com/problems/valid-word-square,Bloomberg,,211,,"given a sequence of words, check whether it forms a valid word square. a sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k < max(numrows, numcolumns). note: the number of words given is at least 1 and does not exceed 500. word length will be at least 1 and does not exceed 500. each word contains only lowercase english alphabet `a-z`.","input: [ ""abcd"", ""bnrt"", ""crmy"", ""dtye"" ] output: true explanation: the first row and first column both read ""abcd"". the second row and second column both read ""bnrt"". the third row and third column both read ""crmy"". the fourth row and fourth column both read ""dtye"". therefore, it is a valid word square. example 2: input: [ ""abcd"", ""bnrt"", ""crm"", ""dt"" ] output: true explanation: the first row and first column both read ""abcd"". the second row and second column both read ""bnrt"". the third row and third column both read ""crm"". the fourth row and fourth column both read ""dt"". therefore, it is a valid word square. example 3: input: [ ""ball"", ""area"", ""read"", ""lady"" ] output: false explanation: the third row reads ""read"" while the third column reads ""lead"". therefore, it is not a valid word square.",,
423,Reconstruct Original Digits from English,"Given a string `s` containing an out-of-order English representation of digits `0-9`, return the digits in ascending order.


Example 1:
Input: s = ""owoztneoer""
Output: ""012""

Example 2:
Input: s = ""fviefuro""
Output: ""45""

Constraints:
`1 <= s.length <= 105`
`s[i]` is one of the characters `[""e"",""g"",""f"",""i"",""h"",""o"",""n"",""s"",""r"",""u"",""t"",""w"",""v"",""x"",""z""]`.

`s` is guaranteed to be valid.",Medium,https://leetcode.com/problems/reconstruct-original-digits-from-english,Expedia,Math,336,,"given a string `s` containing an out-of-order english representation of digits `0-9`, return the digits in ascending order.","input: s = ""owoztneoer"" output: ""012"" example 2: input: s = ""fviefuro"" output: ""45""","`1 <= s.length <= 10^5` `s[i]` is one of the characters `[""e"",""g"",""f"",""i"",""h"",""o"",""n"",""s"",""r"",""u"",""t"",""w"",""v"",""x"",""z""]`. `s` is guaranteed to be valid.",
424,Longest Repeating Character Replacement,"Given a string `s` that consists of only uppercase English letters, you can perform at most `k` operations on that string.

In one operation, you can choose any character of the string and change it to any other uppercase English character.

Find the length of the longest sub-string containing all repeating letters you can get after performing the above operations.

Note:
Both the string's length and k will not exceed 104.


Example 1:
Input:
s = ""ABAB"", k = 2
Output:
4
Explanation:
Replace the two 'A's with two 'B's or vice versa.


Example 2:
Input:
s = ""AABABBA"", k = 1
Output:
4
Explanation:
Replace the one 'A' in the middle with 'B' and form ""AABBBBA"".

The substring ""BBBB"" has the longest repeating letters, which is 4.",Medium,https://leetcode.com/problems/longest-repeating-character-replacement,"Google,Amazon,Wish","Two Pointers,Sliding Window",2272,"[Longest Substring with At Most K Distinct Characters, /problems/longest-substring-with-at-most-k-distinct-characters/, Medium], [Max Consecutive Ones III, /problems/max-consecutive-ones-iii/, Medium]","given a string `s` that consists of only uppercase english letters, you can perform at most `k` operations on that string. in one operation, you can choose any character of the string and change it to any other uppercase english character. find the length of the longest sub-string containing all repeating letters you can get after performing the above operations. note: both the string's length and k will not exceed 104.","input: s = ""abab"", k = 2 output: 4 explanation: replace the two 'a's with two 'b's or vice versa. example 2: input: s = ""aababba"", k = 1 output: 4 explanation: replace the one 'a' in the middle with 'b' and form ""aabbbba"". the substring ""bbbb"" has the longest repeating letters, which is 4.",,
425,Word Squares,"Given a set of words (without duplicates), find all word squares you can build from them.

A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k < max(numRows, numColumns).

For example, the word sequence `[""ball"",""area"",""lead"",""lady""]` forms a word square because each word reads the same both horizontally and vertically.

b a l l
a r e a
l e a d
l a d y
Note:
There are at least 1 and at most 1000 words.

All words will have the exact same length.

Word length is at least 1 and at most 5.

Each word contains only lowercase English alphabet `a-z`.


Example 1:
Input:
[""area"",""lead"",""wall"",""lady"",""ball""]
Output:
[
  [ ""wall"",
    ""area"",
    ""lead"",
    ""lady""
  ],
  [ ""ball"",
    ""area"",
    ""lead"",
    ""lady""
  ]
]
Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).


Example 2:
Input:
[""abat"",""baba"",""atan"",""atal""]
Output:
[
  [ ""baba"",
    ""abat"",
    ""baba"",
    ""atan""
  ],
  [ ""baba"",
    ""abat"",
    ""baba"",
    ""atal""
  ]
]
Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).",Hard,https://leetcode.com/problems/word-squares,Bloomberg,"Backtracking,Trie",720,"[Valid Word Square, /problems/valid-word-square/, Easy]","given a set of words (without duplicates), find all word squares you can build from them. a sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k < max(numrows, numcolumns). for example, the word sequence `[""ball"",""area"",""lead"",""lady""]` forms a word square because each word reads the same both horizontally and vertically. b a l l a r e a l e a d l a d y note: there are at least 1 and at most 1000 words. all words will have the exact same length. word length is at least 1 and at most 5. each word contains only lowercase english alphabet `a-z`.","input: [""area"",""lead"",""wall"",""lady"",""ball""] output: [ [ ""wall"", ""area"", ""lead"", ""lady"" ], [ ""ball"", ""area"", ""lead"", ""lady"" ] ] explanation: the output consists of two word squares. the order of output does not matter (just the order of words in each word square matters). example 2: input: [""abat"",""baba"",""atan"",""atal""] output: [ [ ""baba"", ""abat"", ""baba"", ""atan"" ], [ ""baba"", ""abat"", ""baba"", ""atal"" ] ] explanation: the output consists of two word squares. the order of output does not matter (just the order of words in each word square matters).",,
426,Convert Binary Search Tree to Sorted Doubly Linked List,"Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.

You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.

We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.


Example 1:
Input: root = [4,2,5,1,3]
Output: [1,2,3,4,5]
Explanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.


Example 2:
Input: root = [2,1,3]
Output: [1,2,3]

Example 3:
Input: root = []
Output: []
Explanation: Input is an empty tree. Output is also an empty Linked List.

Example 4:
Input: root = [1]
Output: [1]

Constraints:
The number of nodes in the tree is in the range `[0, 2000]`.

`-1000 <= Node.val <= 1000`
All the values of the tree are unique.",Medium,https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list,"Facebook,Microsoft,Google,VMware,Amazon,Expedia","Linked List,Divide and Conquer,Tree",1302,"[Binary Tree Inorder Traversal, /problems/binary-tree-inorder-traversal/, Medium]","convert a binary search tree to a sorted circular doubly-linked list in place. you can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. for a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element. we want to do the transformation in place. after the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. you should return the pointer to the smallest element of the linked list.","input: root = [4,2,5,1,3] output: [1,2,3,4,5] explanation: the figure below shows the transformed bst. the solid line indicates the successor relationship, while the dashed line means the predecessor relationship. example 2: input: root = [2,1,3] output: [1,2,3] example 3: input: root = [] output: [] explanation: input is an empty tree. output is also an empty linked list. example 4: input: root = [1] output: [1]","the number of nodes in the tree is in the range `[0, 2000]`. `-1000 <= node.val <= 1000` all the values of the tree are unique.",
427,Construct Quad Tree,"Given a `n * n` matrix `grid` of `0's` and `1's` only. We want to represent the `grid` with a Quad-Tree.

Return the root of the Quad-Tree representing the `grid`.

Notice that you can assign the value of a node to True or False when `isLeaf` is False, and both are accepted in the answer.

A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:
`val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. 
`isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.

class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
}
We can construct a Quad-Tree from a two-dimensional area using the following steps:
If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.

If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.

Recurse for each of the children with the proper sub-grid.

If you want to know more about the Quad-Tree, you can refer to the wiki.

Quad-Tree format:
The output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.

It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.

If the value of `isLeaf` or `val` is True we represent it as 1 in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as 0.


Example 1:
Input: grid = [[0,1],[1,0]]
Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]
Explanation: The explanation of this example is shown below:
Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.


Example 2:
Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]
Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.

The topLeft, bottomLeft and bottomRight each has the same value.

The topRight have different values so we divide it into 4 sub-grids where each has the same value.

Explanation is shown in the photo below:

Example 3:
Input: grid = [[1,1],[1,1]]
Output: [[1,1]]

Example 4:
Input: grid = [[0]]
Output: [[1,0]]

Example 5:
Input: grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]
Output: [[0,1],[1,1],[1,0],[1,0],[1,1]]

Constraints:
`n == grid.length == grid[i].length`
`n == 2^x` where `0 <= x <= 6`",Medium,https://leetcode.com/problems/construct-quad-tree,Uber,,315,,"given a `n * n` matrix `grid` of `0's` and `1's` only. we want to represent the `grid` with a quad-tree. return the root of the quad-tree representing the `grid`. notice that you can assign the value of a node to true or false when `isleaf` is false, and both are accepted in the answer. a quad-tree is a tree data structure in which each internal node has exactly four children. besides, each node has two attributes: `val`: true if the node represents a grid of 1's or false if the node represents a grid of 0's. `isleaf`: true if the node is leaf node on the tree or false if the node has the four children. class node { public boolean val; public boolean isleaf; public node topleft; public node topright; public node bottomleft; public node bottomright; } we can construct a quad-tree from a two-dimensional area using the following steps: if the current grid has the same value (i.e all `1's` or all `0's`) set `isleaf` true and set `val` to the value of the grid and set the four children to null and stop. if the current grid has different values, set `isleaf` to false and set `val` to any value and divide the current grid into four sub-grids as shown in the photo. recurse for each of the children with the proper sub-grid. if you want to know more about the quad-tree, you can refer to the wiki. quad-tree format: the output represents the serialized format of a quad-tree using level order traversal, where `null` signifies a path terminator where no node exists below. it is very similar to the serialization of the binary tree. the only difference is that the node is represented as a list `[isleaf, val]`. if the value of `isleaf` or `val` is true we represent it as 1 in the list `[isleaf, val]` and if the value of `isleaf` or `val` is false we represent it as 0.","input: grid = [[0,1],[1,0]] output: [[0,1],[1,0],[1,1],[1,1],[1,0]] explanation: the explanation of this example is shown below: notice that 0 represnts false and 1 represents true in the photo representing the quad-tree. example 2: input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]] output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] explanation: all values in the grid are not the same. we divide the grid into four sub-grids. the topleft, bottomleft and bottomright each has the same value. the topright have different values so we divide it into 4 sub-grids where each has the same value. explanation is shown in the photo below: example 3: input: grid = [[1,1],[1,1]] output: [[1,1]] example 4: input: grid = [[0]] output: [[1,0]] example 5: input: grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]] output: [[0,1],[1,1],[1,0],[1,0],[1,1]]",`n == grid.length == grid[i].length` `n == 2^x` where `0 <= x <= 6`,
428,Serialize and Deserialize N-ary Tree,"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following `3-ary` tree
as `[1 [3[5 6] 2 4]]`. Note that this is just an example, you do not necessarily need to follow this format.

Or you can follow LeetCode's level order traversal serialization format, where each group of children is separated by the null value.

For example, the above tree may be serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.

You do not necessarily need to follow the above suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.


Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`0 <= Node.val <= 104`
The height of the n-ary tree is less than or equal to `1000`
Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.",Hard,https://leetcode.com/problems/serialize-and-deserialize-n-ary-tree,"Microsoft,Apple,Google,Amazon",Tree,597,"[Serialize and Deserialize Binary Tree, /problems/serialize-and-deserialize-binary-tree/, Hard], [Serialize and Deserialize BST, /problems/serialize-and-deserialize-bst/, Medium], [Encode N-ary Tree to Binary Tree, /problems/encode-n-ary-tree-to-binary-tree/, Hard]","serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. design an algorithm to serialize and deserialize an n-ary tree. an n-ary tree is a rooted tree in which each node has no more than n children. there is no restriction on how your serialization/deserialization algorithm should work. you just need to ensure that an n-ary tree can be serialized to a string and this string can be deserialized to the original tree structure. for example, you may serialize the following `3-ary` tree as `[1 [3[5 6] 2 4]]`. note that this is just an example, you do not necessarily need to follow this format. or you can follow leetcode's level order traversal serialization format, where each group of children is separated by the null value. for example, the above tree may be serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`. you do not necessarily need to follow the above suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.",,"the number of nodes in the tree is in the range `[0, 10^4]`. `0 <= node.val <= 10^4` the height of the n-ary tree is less than or equal to `1000` do not use class member/global/static variables to store states. your encode and decode algorithms should be stateless.",
429,N-ary Tree Level Order Traversal,"Given an n-ary tree, return the level order traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).


Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: [[1],[3,2,4],[5,6]]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]

Constraints:
The height of the n-ary tree is less than or equal to `1000`
The total number of nodes is between `[0, 104]`",Medium,https://leetcode.com/problems/n-ary-tree-level-order-traversal,Amazon,"Tree,Breadth-first Search",906,"[Binary Tree Level Order Traversal, /problems/binary-tree-level-order-traversal/, Medium], [N-ary Tree Preorder Traversal, /problems/n-ary-tree-preorder-traversal/, Easy], [N-ary Tree Postorder Traversal, /problems/n-ary-tree-postorder-traversal/, Easy]","given an n-ary tree, return the level order traversal of its nodes' values. nary-tree input serialization is represented in their level order traversal, each group of children is separated by the null value (see examples).","input: root = [1,null,3,2,4,null,5,6] output: [[1],[3,2,4],[5,6]] example 2: input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]","the height of the n-ary tree is less than or equal to `1000` the total number of nodes is between `[0, 10^4]`",
430,Flatten a Multilevel Doubly Linked List,"You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.


Example 1:
Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
Output: [1,2,3,7,8,11,12,9,10,4,5,6]
Explanation:
The multilevel linked list in the input is as follows:
After flattening the multilevel linked list it becomes:

Example 2:
Input: head = [1,2,null,3]
Output: [1,3,2]
Explanation:
The input multilevel linked list is as follows:
  1---2---NULL
  |
  3---NULL

Example 3:
Input: head = []
Output: []
How multilevel linked list is represented in test case:

We use the multilevel linked list from Example 1 above:
 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL
The serialization of each level is as follows:
[1,2,3,4,5,6,null]
[7,8,9,10,null]
[11,12,null]
To serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:
[1,2,3,4,5,6,null]
[null,null,7,8,9,10,null]
[null,11,12,null]
Merging the serialization of each level and removing trailing nulls we obtain:
[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]

Constraints:
The number of Nodes will not exceed `1000`.

`1 <= Node.val <= 105`",Medium,https://leetcode.com/problems/flatten-a-multilevel-doubly-linked-list,"Bloomberg,Facebook","Linked List,Depth-first Search",2179,"[Flatten Binary Tree to Linked List, /problems/flatten-binary-tree-to-linked-list/, Medium], [Correct a Binary Tree, /problems/correct-a-binary-tree/, Medium]","you are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. these child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below. flatten the list so that all the nodes appear in a single-level, doubly linked list. you are given the head of the first level of the list.","input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12] output: [1,2,3,7,8,11,12,9,10,4,5,6] explanation: the multilevel linked list in the input is as follows: after flattening the multilevel linked list it becomes: example 2: input: head = [1,2,null,3] output: [1,3,2] explanation: the input multilevel linked list is as follows: 1---2---null | 3---null example 3: input: head = [] output: [] how multilevel linked list is represented in test case: we use the multilevel linked list from example 1 above: 1---2---3---4---5---6--null | 7---8---9---10--null | 11--12--null the serialization of each level is as follows: [1,2,3,4,5,6,null] [7,8,9,10,null] [11,12,null] to serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level. the serialization becomes: [1,2,3,4,5,6,null] [null,null,7,8,9,10,null] [null,11,12,null] merging the serialization of each level and removing trailing nulls we obtain: [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]",the number of nodes will not exceed `1000`. `1 <= node.val <= 10^5`,
431,Encode N-ary Tree to Binary Tree,"Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See following example).

For example, you may encode the following `3-ary` tree to a binary tree in this way:
Input: root = [1,null,3,2,4,null,5,6]
Note that the above is just an example which might or might not work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.


Constraints:
The height of the n-ary tree is less than or equal to `1000`
The total number of nodes is between `[0, 10^4]`
Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.",Hard,https://leetcode.com/problems/encode-n-ary-tree-to-binary-tree,Flipkart,Tree,290,"[Serialize and Deserialize N-ary Tree, /problems/serialize-and-deserialize-n-ary-tree/, Hard]","design an algorithm to encode an n-ary tree into a binary tree and decode the binary tree to get the original n-ary tree. an n-ary tree is a rooted tree in which each node has no more than n children. similarly, a binary tree is a rooted tree in which each node has no more than 2 children. there is no restriction on how your encode/decode algorithm should work. you just need to ensure that an n-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original n-nary tree structure. nary-tree input serialization is represented in their level order traversal, each group of children is separated by the null value (see following example). for example, you may encode the following `3-ary` tree to a binary tree in this way: input: root = [1,null,3,2,4,null,5,6] note that the above is just an example which might or might not work. you do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.",,"the height of the n-ary tree is less than or equal to `1000` the total number of nodes is between `[0, 10^4]` do not use class member/global/static variables to store states. your encode and decode algorithms should be stateless.",
432,All O`one Data Structure,"Implement a data structure supporting the following operations:
Inc(Key) - Inserts a new key  with value 1. Or increments an existing key by 1. Key is guaranteed to be a non-empty string.

Dec(Key) - If Key's value is 1, remove it from the data structure. Otherwise decrements an existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a non-empty string.

GetMaxKey() - Returns one of the keys with maximal value. If no element exists, return an empty string `""""`.

GetMinKey() - Returns one of the keys with minimal value. If no element exists, return an empty string `""""`.

Challenge: Perform all these in O(1) time complexity.",Hard,https://leetcode.com/problems/all-oone-data-structure,Amazon,Design,767,,"implement a data structure supporting the following operations: inc(key) - inserts a new key with value 1. or increments an existing key by 1. key is guaranteed to be a non-empty string. dec(key) - if key's value is 1, remove it from the data structure. otherwise decrements an existing key by 1. if the key does not exist, this function does nothing. key is guaranteed to be a non-empty string. getmaxkey() - returns one of the keys with maximal value. if no element exists, return an empty string `""""`. getminkey() - returns one of the keys with minimal value. if no element exists, return an empty string `""""`. challenge: perform all these in o(1) time complexity.",,,
433,Minimum Genetic Mutation,"A gene string can be represented by an 8-character long string, with choices from `""A""`, `""C""`, `""G""`, `""T""`.

Suppose we need to investigate about a mutation (mutation from ""start"" to ""end""), where ONE mutation is defined as ONE single character changed in the gene string.

For example, `""AACCGGTT""` -> `""AACCGGTA""` is 1 mutation.

Also, there is a given gene ""bank"", which records all the valid gene mutations. A gene must be in the bank to make it a valid gene string.

Now, given 3 things - start, end, bank, your task is to determine what is the minimum number of mutations needed to mutate from ""start"" to ""end"". If there is no such a mutation, return -1.

Note:
Starting point is assumed to be valid, so it might not be included in the bank.

If multiple mutations are needed, all mutations during in the sequence must be valid.

You may assume start and end string is not the same.


Example 1:
start: ""AACCGGTT""
end:   ""AACCGGTA""
bank: [""AACCGGTA""]
return: 1

Example 2:
start: ""AACCGGTT""
end:   ""AAACGGTA""
bank: [""AACCGGTA"", ""AACCGCTA"", ""AAACGGTA""]
return: 2

Example 3:
start: ""AAAAACCC""
end:   ""AACCCCCC""
bank: [""AAAACCCC"", ""AAACCCCC"", ""AACCCCCC""]
return: 3",Medium,https://leetcode.com/problems/minimum-genetic-mutation,Amazon,,534,,"a gene string can be represented by an 8-character long string, with choices from `""a""`, `""c""`, `""g""`, `""t""`. suppose we need to investigate about a mutation (mutation from ""start"" to ""end""), where one mutation is defined as one single character changed in the gene string. for example, `""aaccggtt""` -> `""aaccggta""` is 1 mutation. also, there is a given gene ""bank"", which records all the valid gene mutations. a gene must be in the bank to make it a valid gene string. now, given 3 things - start, end, bank, your task is to determine what is the minimum number of mutations needed to mutate from ""start"" to ""end"". if there is no such a mutation, return -1. note: starting point is assumed to be valid, so it might not be included in the bank. if multiple mutations are needed, all mutations during in the sequence must be valid. you may assume start and end string is not the same.","start: ""aaccggtt"" end: ""aaccggta"" bank: [""aaccggta""] return: 1 example 2: start: ""aaccggtt"" end: ""aaacggta"" bank: [""aaccggta"", ""aaccgcta"", ""aaacggta""] return: 2 example 3: start: ""aaaaaccc"" end: ""aacccccc"" bank: [""aaaacccc"", ""aaaccccc"", ""aacccccc""] return: 3",,
434,Number of Segments in a String,"You are given a string `s`, return the number of segments in the string. 
A segment is defined to be a contiguous sequence of non-space characters.


Example 1:
Input: s = ""Hello, my name is John""
Output: 5
Explanation: The five segments are [""Hello,"", ""my"", ""name"", ""is"", ""John""]

Example 2:
Input: s = ""Hello""
Output: 1

Example 3:
Input: s = ""love live! mu'sic forever""
Output: 4

Example 4:
Input: s = """"
Output: 0

Constraints:
`0 <= s.length <= 300`
`s` consists of lower-case and upper-case English letters, digits or one of the following characters `""!@#$%^&*()_+-=',.:""`.

The only space character in `s` is `' '`.",Easy,https://leetcode.com/problems/number-of-segments-in-a-string,,,291,,"you are given a string `s`, return the number of segments in the string. a segment is defined to be a contiguous sequence of non-space characters.","input: s = ""hello, my name is john"" output: 5 explanation: the five segments are [""hello,"", ""my"", ""name"", ""is"", ""john""] example 2: input: s = ""hello"" output: 1 example 3: input: s = ""love live! mu'sic forever"" output: 4 example 4: input: s = """" output: 0","`0 <= s.length <= 300` `s` consists of lower-case and upper-case english letters, digits or one of the following characters `""!@#$%^&*()_+-=',.:""`. the only space character in `s` is `' '`.",
435,Non-overlapping Intervals,"Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.


Example 1:
Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.


Example 2:
Input: [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.


Example 3:
Input: [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.

Note:
You may assume the interval's end point is always bigger than its start point.

Intervals like [1,2] and [2,3] have borders ""touching"" but they don't overlap each other.",Medium,https://leetcode.com/problems/non-overlapping-intervals,"Facebook,ByteDance,Amazon",Greedy,1974,"[Minimum Number of Arrows to Burst Balloons, /problems/minimum-number-of-arrows-to-burst-balloons/, Medium]","given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.","input: [[1,2],[2,3],[3,4],[1,3]] output: 1 explanation: [1,3] can be removed and the rest of intervals are non-overlapping. example 2: input: [[1,2],[1,2],[1,2]] output: 2 explanation: you need to remove two [1,2] to make the rest of intervals non-overlapping. example 3: input: [[1,2],[2,3]] output: 0 explanation: you don't need to remove any of the intervals since they're already non-overlapping. note: you may assume the interval's end point is always bigger than its start point. intervals like [1,2] and [2,3] have borders ""touching"" but they don't overlap each other.",,
436,Find Right Interval,"You are given an array of `intervals`, where `intervals[i] = [starti, endi]` and each `starti` is unique.

The right interval for an interval `i` is an interval `j` such that `startj`` >= endi` and `startj` is minimized.

Return an array of right interval indices for each interval `i`. If no right interval exists for interval `i`, then put `-1` at index `i`.


Example 1:
Input: intervals = [[1,2]]
Output: [-1]
Explanation: There is only one interval in the collection, so it outputs -1.


Example 2:
Input: intervals = [[3,4],[2,3],[1,2]]
Output: [-1,0,1]
Explanation: There is no right interval for [3,4].

The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.

The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.


Example 3:
Input: intervals = [[1,4],[2,3],[3,4]]
Output: [-1,2,-1]
Explanation: There is no right interval for [1,4] and [3,4].

The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.


Constraints:
`1 <= intervals.length <= 2 * 104`
`intervals[i].length == 2`
`-106 <= starti <= endi <= 106`
The start point of each interval is unique.",Medium,https://leetcode.com/problems/find-right-interval,,,710,,"you are given an array of `intervals`, where `intervals[i] = [starti, endi]` and each `starti` is unique. the right interval for an interval `i` is an interval `j` such that `startj`` >= endi` and `startj` is minimized. return an array of right interval indices for each interval `i`. if no right interval exists for interval `i`, then put `-1` at index `i`.","input: intervals = [[1,2]] output: [-1] explanation: there is only one interval in the collection, so it outputs -1. example 2: input: intervals = [[3,4],[2,3],[1,2]] output: [-1,0,1] explanation: there is no right interval for [3,4]. the right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3. the right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2. example 3: input: intervals = [[1,4],[2,3],[3,4]] output: [-1,2,-1] explanation: there is no right interval for [1,4] and [3,4]. the right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.",`1 <= intervals.length <= 2 * 10^4` `intervals[i].length == 2` `-10^6 <= starti <= endi <= 10^6` the start point of each interval is unique.,
437,Path Sum III,"You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards
(traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.


Example:
root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1
Return 3. The paths that sum to 8 are:
1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11",Medium,https://leetcode.com/problems/path-sum-iii,"Amazon,ByteDance,Adobe",Tree,4975,"[Path Sum, /problems/path-sum/, Easy], [Path Sum II, /problems/path-sum-ii/, Medium], [Path Sum IV, /problems/path-sum-iv/, Medium], [Longest Univalue Path, /problems/longest-univalue-path/, Medium]","you are given a binary tree in which each node contains an integer value. find the number of paths that sum to a given value. the path does not need to start or end at the root or a leaf, but it must go downwards (traveling only from parent nodes to child nodes). the tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.","root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8 10 / \ 5 -3 / \ \ 3 2 11 / \ \ 3 -2 1 return 3. the paths that sum to 8 are: 1. 5 -> 3 2. 5 -> 2 -> 1 3. -3 -> 11",,
438,Find All Anagrams in a String,"Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.


Example 1:
Input:
s: ""cbaebabacd"" p: ""abc""
Output:
[0, 6]
Explanation:
The substring with start index = 0 is ""cba"", which is an anagram of ""abc"".

The substring with start index = 6 is ""bac"", which is an anagram of ""abc"".


Example 2:
Input:
s: ""abab"" p: ""ab""
Output:
[0, 1, 2]
Explanation:
The substring with start index = 0 is ""ab"", which is an anagram of ""ab"".

The substring with start index = 1 is ""ba"", which is an anagram of ""ab"".

The substring with start index = 2 is ""ab"", which is an anagram of ""ab"".",Medium,https://leetcode.com/problems/find-all-anagrams-in-a-string,"Facebook,Amazon,Bloomberg,Microsoft,Snapchat,Apple",Hash Table,4064,"[Valid Anagram, /problems/valid-anagram/, Easy], [Permutation in String, /problems/permutation-in-string/, Medium]","given a string s and a non-empty string p, find all the start indices of p's anagrams in s. strings consists of lowercase english letters only and the length of both strings s and p will not be larger than 20,100. the order of output does not matter.","input: s: ""cbaebabacd"" p: ""abc"" output: [0, 6] explanation: the substring with start index = 0 is ""cba"", which is an anagram of ""abc"". the substring with start index = 6 is ""bac"", which is an anagram of ""abc"". example 2: input: s: ""abab"" p: ""ab"" output: [0, 1, 2] explanation: the substring with start index = 0 is ""ab"", which is an anagram of ""ab"". the substring with start index = 1 is ""ba"", which is an anagram of ""ab"". the substring with start index = 2 is ""ab"", which is an anagram of ""ab"".",,
439,Ternary Expression Parser,"Given a string representing arbitrarily nested ternary expressions, calculate the result of the expression. You can always assume that the given expression is valid and only consists of digits `0-9`, `?`, `:`, `T` and `F` (`T` and `F` represent True and False respectively).

Note:
The length of the given string is ≤ 10000.

Each number will contain only one digit.

The conditional expressions group right-to-left (as usual in most languages).

The condition will always be either `T` or `F`. That is, the condition will never be a digit.

The result of the expression will always evaluate to either a digit `0-9`, `T` or `F`.


Example 1:
Input: ""T?2:3""
Output: ""2""
Explanation: If true, then result is 2; otherwise result is 3.


Example 2:
Input: ""F?1:T?4:5""
Output: ""4""
Explanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:
             ""(F ? 1 : (T ? 4 : 5))""                   ""(F ? 1 : (T ? 4 : 5))""
          -> ""(F ? 1 : 4)""                 or       -> ""(T ? 4 : 5)""
          -> ""4""                                    -> ""4""

Example 3:
Input: ""T?T?F:5:3""
Output: ""F""
Explanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:
             ""(T ? (T ? F : 5) : 3)""                   ""(T ? (T ? F : 5) : 3)""
          -> ""(T ? F : 3)""                 or       -> ""(T ? F : 5)""
          -> ""F""                                    -> ""F""",Medium,https://leetcode.com/problems/ternary-expression-parser,Snapchat,"Stack,Depth-first Search",286,"[Mini Parser, /problems/mini-parser/, Medium], [Remove Comments, /problems/remove-comments/, Medium], [Parse Lisp Expression, /problems/parse-lisp-expression/, Hard]","given a string representing arbitrarily nested ternary expressions, calculate the result of the expression. you can always assume that the given expression is valid and only consists of digits `0-9`, `?`, `:`, `t` and `f` (`t` and `f` represent true and false respectively). note: the length of the given string is ≤ 10000. each number will contain only one digit. the conditional expressions group right-to-left (as usual in most languages). the condition will always be either `t` or `f`. that is, the condition will never be a digit. the result of the expression will always evaluate to either a digit `0-9`, `t` or `f`.","input: ""t?2:3"" output: ""2"" explanation: if true, then result is 2; otherwise result is 3. example 2: input: ""f?1:t?4:5"" output: ""4"" explanation: the conditional expressions group right-to-left. using parenthesis, it is read/evaluated as: ""(f ? 1 : (t ? 4 : 5))"" ""(f ? 1 : (t ? 4 : 5))"" -> ""(f ? 1 : 4)"" or -> ""(t ? 4 : 5)"" -> ""4"" -> ""4"" example 3: input: ""t?t?f:5:3"" output: ""f"" explanation: the conditional expressions group right-to-left. using parenthesis, it is read/evaluated as: ""(t ? (t ? f : 5) : 3)"" ""(t ? (t ? f : 5) : 3)"" -> ""(t ? f : 3)"" or -> ""(t ? f : 5)"" -> ""f"" -> ""f""",,
440,K-th Smallest in Lexicographical Order,"Given integers `n` and `k`, find the lexicographically k-th smallest integer in the range from `1` to `n`.

Note: 1 ≤ k ≤ n ≤ 109.


Example:
Input:
n: 13   k: 2
Output:
10
Explanation:
The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.",Hard,https://leetcode.com/problems/k-th-smallest-in-lexicographical-order,"ByteDance,Hulu",,415,,"given integers `n` and `k`, find the lexicographically k-th smallest integer in the range from `1` to `n`. note: 1 ≤ k ≤ n ≤ 109.","input: n: 13 k: 2 output: 10 explanation: the lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.",,
441,Arranging Coins,"You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.

Given n, find the total number of full staircase rows that can be formed.

n is a non-negative integer and fits within the range of a 32-bit signed integer.


Example 1:
n = 5
The coins can form the following rows:
¤
¤ ¤
¤ ¤
Because the 3rd row is incomplete, we return 2.


Example 2:
n = 8
The coins can form the following rows:
¤
¤ ¤
¤ ¤ ¤
¤ ¤
Because the 4th row is incomplete, we return 3.",Easy,https://leetcode.com/problems/arranging-coins,Bloomberg,"Math,Binary Search",913,,"you have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins. given n, find the total number of full staircase rows that can be formed. n is a non-negative integer and fits within the range of a 32-bit signed integer.","n = 5 the coins can form the following rows: ¤ ¤ ¤ ¤ ¤ because the 3rd row is incomplete, we return 2. example 2: n = 8 the coins can form the following rows: ¤ ¤ ¤ ¤ ¤ ¤ ¤ ¤ because the 4th row is incomplete, we return 3.",,
442,Find All Duplicates in an Array,"Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements that appear twice in this array.

Could you do it without extra space and in O(n) runtime?

Example:
Input:
[4,3,2,7,8,2,3,1]
Output:
[2,3]",Medium,https://leetcode.com/problems/find-all-duplicates-in-an-array,"Amazon,Facebook,Microsoft,Bloomberg,Docusign",Array,3452,"[Find All Numbers Disappeared in an Array, /problems/find-all-numbers-disappeared-in-an-array/, Easy]","given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once. find all the elements that appear twice in this array. could you do it without extra space and in o(n) runtime?","input: [4,3,2,7,8,2,3,1] output: [2,3]",,
443,String Compression,"Given an array of characters `chars`, compress it using the following algorithm:
Begin with an empty string `s`. For each group of consecutive repeating characters in `chars`:
If the group's length is 1, append the character to `s`.

Otherwise, append the character followed by the group's length.

The compressed string `s` should not be returned separately, but instead be stored in the input character array `chars`. Note that group lengths that are 10 or longer will be split into multiple characters in `chars`.

After you are done modifying the input array, return the new length of the array.

Follow up:
Could you solve it using only `O(1)` extra space?

Example 1:
Input: chars = [""a"",""a"",""b"",""b"",""c"",""c"",""c""]
Output: Return 6, and the first 6 characters of the input array should be: [""a"",""2"",""b"",""2"",""c"",""3""]
Explanation: The groups are ""aa"", ""bb"", and ""ccc"". This compresses to ""a2b2c3"".


Example 2:
Input: chars = [""a""]
Output: Return 1, and the first character of the input array should be: [""a""]
Explanation: The only group is ""a"", which remains uncompressed since it's a single character.


Example 3:
Input: chars = [""a"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b""]
Output: Return 4, and the first 4 characters of the input array should be: [""a"",""b"",""1"",""2""].
Explanation: The groups are ""a"" and ""bbbbbbbbbbbb"". This compresses to ""ab12"".


Example 4:
Input: chars = [""a"",""a"",""a"",""b"",""b"",""a"",""a""]
Output: Return 6, and the first 6 characters of the input array should be: [""a"",""3"",""b"",""2"",""a"",""2""].
Explanation: The groups are ""aaa"", ""bb"", and ""aa"". This compresses to ""a3b2a2"". Note that each group is independent even if two groups have the same character.


Constraints:
`1 <= chars.length <= 2000`
`chars[i]` is a lower-case English letter, upper-case English letter, digit, or symbol.",Medium,https://leetcode.com/problems/string-compression,"Goldman Sachs,Yandex,Microsoft,Apple,Citrix,Facebook,Amazon,eBay,Redfin,Google,VMware,Cisco,Nvidia",String,1251,"[Count and Say, /problems/count-and-say/, Medium], [Encode and Decode Strings, /problems/encode-and-decode-strings/, Medium], [Design Compressed String Iterator, /problems/design-compressed-string-iterator/, Easy], [Decompress Run-Length Encoded List, /problems/decompress-run-length-encoded-list/, Easy]","given an array of characters `chars`, compress it using the following algorithm: begin with an empty string `s`. for each group of consecutive repeating characters in `chars`: if the group's length is 1, append the character to `s`. otherwise, append the character followed by the group's length. the compressed string `s` should not be returned separately, but instead be stored in the input character array `chars`. note that group lengths that are 10 or longer will be split into multiple characters in `chars`. after you are done modifying the input array, return the new length of the array.","input: chars = [""a"",""a"",""b"",""b"",""c"",""c"",""c""] output: return 6, and the first 6 characters of the input array should be: [""a"",""2"",""b"",""2"",""c"",""3""] explanation: the groups are ""aa"", ""bb"", and ""ccc"". this compresses to ""a2b2c3"". example 2: input: chars = [""a""] output: return 1, and the first character of the input array should be: [""a""] explanation: the only group is ""a"", which remains uncompressed since it's a single character. example 3: input: chars = [""a"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b""] output: return 4, and the first 4 characters of the input array should be: [""a"",""b"",""1"",""2""]. explanation: the groups are ""a"" and ""bbbbbbbbbbbb"". this compresses to ""ab12"". example 4: input: chars = [""a"",""a"",""a"",""b"",""b"",""a"",""a""] output: return 6, and the first 6 characters of the input array should be: [""a"",""3"",""b"",""2"",""a"",""2""]. explanation: the groups are ""aaa"", ""bb"", and ""aa"". this compresses to ""a3b2a2"". note that each group is independent even if two groups have the same character.","`1 <= chars.length <= 2000` `chars[i]` is a lower-case english letter, upper-case english letter, digit, or symbol.","could you solve it using only `o(1)` extra space? example 1: input: chars = [""a"",""a"",""b"",""b"",""c"",""c"",""c""] output: return 6, and the first 6 characters of the input array should be: [""a"",""2"",""b"",""2"",""c"",""3""] explanation: the groups are ""aa"", ""bb"", and ""ccc"". this compresses to ""a2b2c3"". example 2: input: chars = [""a""] output: return 1, and the first character of the input array should be: [""a""] explanation: the only group is ""a"", which remains uncompressed since it's a single character. example 3: input: chars = [""a"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b""] output: return 4, and the first 4 characters of the input array should be: [""a"",""b"",""1"",""2""]. explanation: the groups are ""a"" and ""bbbbbbbbbbbb"". this compresses to ""ab12"". example 4: input: chars = [""a"",""a"",""a"",""b"",""b"",""a"",""a""] output: return 6, and the first 6 characters of the input array should be: [""a"",""3"",""b"",""2"",""a"",""2""]. explanation: the groups are ""aaa"", ""bb"", and ""aa"". this compresses to ""a3b2a2"". note that each group is independent even if two groups have the same character. constraints: `1 <= chars.length <= 2000` `chars[i]` is a lower-case english letter, upper-case english letter, digit, or symbol."
444,Sequence Reconstruction,"Check whether the original sequence `org` can be uniquely reconstructed from the sequences in `seqs`. The `org` sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the sequences in `seqs` (i.e., a shortest sequence so that all sequences in `seqs` are subsequences of it). Determine whether there is only one sequence that can be reconstructed from `seqs` and it is the `org` sequence.


Example 1:
Input: org = [1,2,3], seqs = [[1,2],[1,3]]
Output: false
Explanation: [1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.


Example 2:
Input: org = [1,2,3], seqs = [[1,2]]
Output: false
Explanation: The reconstructed sequence can only be [1,2].


Example 3:
Input: org = [1,2,3], seqs = [[1,2],[1,3],[2,3]]
Output: true
Explanation: The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].


Example 4:
Input: org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]
Output: true

Constraints:
`1 <= n <= 10^4`
`org` is a permutation of {1,2,...,n}.

`1 <= segs[i].length <= 10^5`
`seqs[i][j]` fits in a 32-bit signed integer.

UPDATE (2017/1/8):
The seqs parameter had been changed to a list of list of strings (instead of a 2d array of strings). Please reload the code definition to get the latest changes.",Medium,https://leetcode.com/problems/sequence-reconstruction,Google,"Graph,Topological Sort",362,"[Course Schedule II, /problems/course-schedule-ii/, Medium]","check whether the original sequence `org` can be uniquely reconstructed from the sequences in `seqs`. the `org` sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. reconstruction means building a shortest common supersequence of the sequences in `seqs` (i.e., a shortest sequence so that all sequences in `seqs` are subsequences of it). determine whether there is only one sequence that can be reconstructed from `seqs` and it is the `org` sequence.","input: org = [1,2,3], seqs = [[1,2],[1,3]] output: false explanation: [1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed. example 2: input: org = [1,2,3], seqs = [[1,2]] output: false explanation: the reconstructed sequence can only be [1,2]. example 3: input: org = [1,2,3], seqs = [[1,2],[1,3],[2,3]] output: true explanation: the sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3]. example 4: input: org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]] output: true","`1 <= n <= 10^4` `org` is a permutation of {1,2,...,n}. `1 <= segs[i].length <= 10^5` `seqs[i][j]` fits in a 32-bit signed integer. update (2017/1/8): the seqs parameter had been changed to a list of list of strings (instead of a 2d array of strings). please reload the code definition to get the latest changes.",
445,Add Two Numbers II,"You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.


Example:
Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7",Medium,https://leetcode.com/problems/add-two-numbers-ii,"Microsoft,Amazon,Bloomberg,Facebook,Apple,Adobe,Uber,ByteDance",Linked List,2273,"[Add Two Numbers, /problems/add-two-numbers/, Medium], [Add Two Polynomials Represented as Linked Lists, /problems/add-two-polynomials-represented-as-linked-lists/, Medium]","you are given two non-empty linked lists representing two non-negative integers. the most significant digit comes first and each of their nodes contain a single digit. add the two numbers and return it as a linked list. you may assume the two numbers do not contain any leading zero, except the number 0 itself.",input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4) output: 7 -> 8 -> 0 -> 7,,"what if you cannot modify the input lists? in other words, reversing the lists is not allowed. example: input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4) output: 7 -> 8 -> 0 -> 7"
446,Arithmetic Slices II - Subsequence,"A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, these are arithmetic sequences:
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic.

1, 1, 2, 5, 7
A zero-indexed array A consisting of N numbers is given. A subsequence slice of that array is any sequence of integers (P0, P1, ..., Pk) such that 0 ≤ P0 < P1 < ... < Pk < N.

A subsequence slice (P0, P1, ..., Pk) of array A is called arithmetic if the sequence A[P0], A[P1], ..., A[Pk-1], A[Pk] is arithmetic. In particular, this means that k ≥ 2.

The function should return the number of arithmetic subsequence slices in the array A.

The input contains N integers. Every integer is in the range of -231 and 231-1 and 0 ≤ N ≤ 1000. The output is guaranteed to be less than 231-1.


Example:
Input: [2, 4, 6, 8, 10]
Output: 7
Explanation:
All arithmetic subsequence slices are:
[2,4,6]
[4,6,8]
[6,8,10]
[2,4,6,8]
[4,6,8,10]
[2,4,6,8,10]
[2,6,10]",Hard,https://leetcode.com/problems/arithmetic-slices-ii-subsequence,Google,Dynamic Programming,686,"[Arithmetic Slices, /problems/arithmetic-slices/, Medium]","a sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same. for example, these are arithmetic sequences: 1, 3, 5, 7, 9 7, 7, 7, 7 3, -1, -5, -9 the following sequence is not arithmetic. 1, 1, 2, 5, 7 a zero-indexed array a consisting of n numbers is given. a subsequence slice of that array is any sequence of integers (p0, p1, ..., pk) such that 0 ≤ p0 < p1 < ... < pk < n. a subsequence slice (p0, p1, ..., pk) of array a is called arithmetic if the sequence a[p0], a[p1], ..., a[pk-1], a[pk] is arithmetic. in particular, this means that k ≥ 2. the function should return the number of arithmetic subsequence slices in the array a. the input contains n integers. every integer is in the range of -231 and 231-1 and 0 ≤ n ≤ 1000. the output is guaranteed to be less than 231-1.","input: [2, 4, 6, 8, 10] output: 7 explanation: all arithmetic subsequence slices are: [2,4,6] [4,6,8] [6,8,10] [2,4,6,8] [4,6,8,10] [2,4,6,8,10] [2,6,10]",,
447,Number of Boomerangs,"You are given `n` `points` in the plane that are all distinct, where `points[i] = [xi, yi]`. A boomerang is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` (the order of the tuple matters).

Return the number of boomerangs.


Example 1:
Input: points = [[0,0],[1,0],[2,0]]
Output: 2
Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].


Example 2:
Input: points = [[1,1],[2,2],[3,3]]
Output: 2

Example 3:
Input: points = [[1,1]]
Output: 0

Constraints:
`n == points.length`
`1 <= n <= 500`
`points[i].length == 2`
`-104 <= xi, yi <= 104`
All the points are unique.",Medium,https://leetcode.com/problems/number-of-boomerangs,Google,"Hash Table,Math",463,"[Line Reflection, /problems/line-reflection/, Medium]","you are given `n` `points` in the plane that are all distinct, where `points[i] = [xi, yi]`. a boomerang is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` (the order of the tuple matters). return the number of boomerangs.","input: points = [[0,0],[1,0],[2,0]] output: 2 explanation: the two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]]. example 2: input: points = [[1,1],[2,2],[3,3]] output: 2 example 3: input: points = [[1,1]] output: 0","`n == points.length` `1 <= n <= 500` `points[i].length == 2` `-10^4 <= xi, yi <= 10^4` all the points are unique.",
448,Find All Numbers Disappeared in an Array,"Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return an array of all the integers in the range `[1, n]` that do not appear in `nums`.


Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Example 2:
Input: nums = [1,1]
Output: [2]

Constraints:
`n == nums.length`
`1 <= n <= 105`
`1 <= nums[i] <= n`
Follow up: Could you do it without extra space and in `O(n)` runtime? You may assume the returned list does not count as extra space.",Easy,https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array,Amazon,Array,4041,"[First Missing Positive, /problems/first-missing-positive/, Hard], [Find All Duplicates in an Array, /problems/find-all-duplicates-in-an-array/, Medium]","given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return an array of all the integers in the range `[1, n]` that do not appear in `nums`.","input: nums = [4,3,2,7,8,2,3,1] output: [5,6] example 2: input: nums = [1,1] output: [2]",`n == nums.length` `1 <= n <= 10^5` `1 <= nums[i] <= n`,could you do it without extra space and in `o(n)` runtime? you may assume the returned list does not count as extra space.
449,Serialize and Deserialize BST,"Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.


Example 1:
Input: root = [2,1,3]
Output: [2,1,3]

Example 2:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`0 <= Node.val <= 104`
The input tree is guaranteed to be a binary search tree.",Medium,https://leetcode.com/problems/serialize-and-deserialize-bst,"Facebook,Amazon,Microsoft,ByteDance",Tree,1898,"[Serialize and Deserialize Binary Tree, /problems/serialize-and-deserialize-binary-tree/, Hard], [Find Duplicate Subtrees, /problems/find-duplicate-subtrees/, Medium], [Serialize and Deserialize N-ary Tree, /problems/serialize-and-deserialize-n-ary-tree/, Hard]","serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment. design an algorithm to serialize and deserialize a binary search tree. there is no restriction on how your serialization/deserialization algorithm should work. you need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure. the encoded string should be as compact as possible.","input: root = [2,1,3] output: [2,1,3] example 2: input: root = [] output: []","the number of nodes in the tree is in the range `[0, 10^4]`. `0 <= node.val <= 10^4` the input tree is guaranteed to be a binary search tree.",
450,Delete Node in a BST,"Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:
Search for a node to remove.

If the node is found, delete the node.

Follow up: Can you solve it with time complexity `O(height of tree)`?

Example 1:
Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.

One valid answer is [5,4,6,2,null,null,7], shown in the above BST.

Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.


Example 2:
Input: root = [5,3,6,2,4,null,7], key = 0
Output: [5,3,6,2,4,null,7]
Explanation: The tree does not contain a node with value = 0.


Example 3:
Input: root = [], key = 0
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-105 <= Node.val <= 105`
Each node has a unique value.

`root` is a valid binary search tree.

`-105 <= key <= 105`",Medium,https://leetcode.com/problems/delete-node-in-a-bst,"Bloomberg,Oracle,Google",Tree,2814,"[Split BST, /problems/split-bst/, Medium]","given a root node reference of a bst and a key, delete the node with the given key in the bst. return the root node reference (possibly updated) of the bst. basically, the deletion can be divided into two stages: search for a node to remove. if the node is found, delete the node.","input: root = [5,3,6,2,4,null,7], key = 3 output: [5,4,6,2,null,null,7] explanation: given key to delete is 3. so we find the node with value 3 and delete it. one valid answer is [5,4,6,2,null,null,7], shown in the above bst. please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted. example 2: input: root = [5,3,6,2,4,null,7], key = 0 output: [5,3,6,2,4,null,7] explanation: the tree does not contain a node with value = 0. example 3: input: root = [], key = 0 output: []","the number of nodes in the tree is in the range `[0, 10^4]`. `-10^5 <= node.val <= 10^5` each node has a unique value. `root` is a valid binary search tree. `-10^5 <= key <= 10^5`","can you solve it with time complexity `o(height of tree)`? example 1: input: root = [5,3,6,2,4,null,7], key = 3 output: [5,4,6,2,null,null,7] explanation: given key to delete is 3. so we find the node with value 3 and delete it. one valid answer is [5,4,6,2,null,null,7], shown in the above bst. please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted. example 2: input: root = [5,3,6,2,4,null,7], key = 0 output: [5,3,6,2,4,null,7] explanation: the tree does not contain a node with value = 0. example 3: input: root = [], key = 0 output: [] constraints: the number of nodes in the tree is in the range `[0, 104]`. `-105 <= node.val <= 105` each node has a unique value. `root` is a valid binary search tree. `-105 <= key <= 105`"
451,Sort Characters By Frequency,"Given a string, sort it in decreasing order based on the frequency of characters.


Example 1:
Input:
""tree""
Output:
""eert""
Explanation:
'e' appears twice while 'r' and 't' both appear once.

So 'e' must appear before both 'r' and 't'. Therefore ""eetr"" is also a valid answer.


Example 2:
Input:
""cccaaa""
Output:
""cccaaa""
Explanation:
Both 'c' and 'a' appear three times, so ""aaaccc"" is also a valid answer.

Note that ""cacaca"" is incorrect, as the same characters must be together.


Example 3:
Input:
""Aabb""
Output:
""bbAa""
Explanation:
""bbaA"" is also a valid answer, but ""Aabb"" is incorrect.

Note that 'A' and 'a' are treated as two different characters.",Medium,https://leetcode.com/problems/sort-characters-by-frequency,"Bloomberg,Amazon,Facebook","Hash Table,Heap",2246,"[Top K Frequent Elements, /problems/top-k-frequent-elements/, Medium], [First Unique Character in a String, /problems/first-unique-character-in-a-string/, Easy], [Sort Array by Increasing Frequency, /problems/sort-array-by-increasing-frequency/, Easy]","given a string, sort it in decreasing order based on the frequency of characters.","input: ""tree"" output: ""eert"" explanation: 'e' appears twice while 'r' and 't' both appear once. so 'e' must appear before both 'r' and 't'. therefore ""eetr"" is also a valid answer. example 2: input: ""cccaaa"" output: ""cccaaa"" explanation: both 'c' and 'a' appear three times, so ""aaaccc"" is also a valid answer. note that ""cacaca"" is incorrect, as the same characters must be together. example 3: input: ""aabb"" output: ""bbaa"" explanation: ""bbaa"" is also a valid answer, but ""aabb"" is incorrect. note that 'a' and 'a' are treated as two different characters.",,
452,Minimum Number of Arrows to Burst Balloons,"There are some spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter, and hence the x-coordinates of start and end of the diameter suffice. The start is always smaller than the end.

An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with `xstart` and `xend` bursts by an arrow shot at `x` if `xstart ≤ x ≤ xend`. There is no limit to the number of arrows that can be shot. An arrow once shot keeps traveling up infinitely.

Given an array `points` where `points[i] = [xstart, xend]`, return the minimum number of arrows that must be shot to burst all balloons.


Example 1:
Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).


Example 2:
Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4

Example 3:
Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2

Constraints:
`0 <= points.length <= 104`
`points[i].length == 2`
`-231 <= xstart < xend <= 231 - 1`",Medium,https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons,"Facebook,Google","Greedy,Sort",1681,"[Meeting Rooms II, /problems/meeting-rooms-ii/, Medium], [Non-overlapping Intervals, /problems/non-overlapping-intervals/, Medium]","there are some spherical balloons spread in two-dimensional space. for each balloon, provided input is the start and end coordinates of the horizontal diameter. since it's horizontal, y-coordinates don't matter, and hence the x-coordinates of start and end of the diameter suffice. the start is always smaller than the end. an arrow can be shot up exactly vertically from different points along the x-axis. a balloon with `xstart` and `xend` bursts by an arrow shot at `x` if `xstart ≤ x ≤ xend`. there is no limit to the number of arrows that can be shot. an arrow once shot keeps traveling up infinitely. given an array `points` where `points[i] = [xstart, xend]`, return the minimum number of arrows that must be shot to burst all balloons.","input: points = [[10,16],[2,8],[1,6],[7,12]] output: 2 explanation: one way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons). example 2: input: points = [[1,2],[3,4],[5,6],[7,8]] output: 4 example 3: input: points = [[1,2],[2,3],[3,4],[4,5]] output: 2",`0 <= points.length <= 10^4` `points[i].length == 2` `-231 <= xstart < xend <= 231 - 1`,
453,Minimum Moves to Equal Array Elements,"Given an integer array `nums` of size `n`, return the minimum number of moves required to make all array elements equal.

In one move, you can increment `n - 1` elements of the array by `1`.


Example 1:
Input: nums = [1,2,3]
Output: 3
Explanation: Only three moves are needed (remember each move increments two elements):
[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]

Example 2:
Input: nums = [1,1,1]
Output: 0

Constraints:
`n == nums.length`
`1 <= nums.length <= 104`
`-109 <= nums[i] <= 109`",Easy,https://leetcode.com/problems/minimum-moves-to-equal-array-elements,"JPMorgan,Microsoft,Apple,Swiggy",Math,788,"[Minimum Moves to Equal Array Elements II, /problems/minimum-moves-to-equal-array-elements-ii/, Medium]","given an integer array `nums` of size `n`, return the minimum number of moves required to make all array elements equal. in one move, you can increment `n - 1` elements of the array by `1`.","input: nums = [1,2,3] output: 3 explanation: only three moves are needed (remember each move increments two elements): [1,2,3] => [2,3,3] => [3,4,3] => [4,4,4] example 2: input: nums = [1,1,1] output: 0",`n == nums.length` `1 <= nums.length <= 10^4` `-10^9 <= nums[i] <= 10^9`,
454,4Sum II,"Given four lists A, B, C, D of integer values, compute how many tuples `(i, j, k, l)` there are such that `A[i] + B[j] + C[k] + D[l]` is zero.

To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.


Example:
Input:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]
Output:
2
Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0",Medium,https://leetcode.com/problems/4sum-ii,Amazon,"Hash Table,Binary Search",1879,"[4Sum, /problems/4sum/, Medium]","given four lists a, b, c, d of integer values, compute how many tuples `(i, j, k, l)` there are such that `a[i] + b[j] + c[k] + d[l]` is zero. to make problem a bit easier, all a, b, c, d have same length of n where 0 ≤ n ≤ 500. all integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.","input: a = [ 1, 2] b = [-2,-1] c = [-1, 2] d = [ 0, 2] output: 2 explanation: the two tuples are: 1. (0, 0, 0, 1) -> a[0] + b[0] + c[0] + d[1] = 1 + (-2) + (-1) + 2 = 0 2. (1, 1, 0, 0) -> a[1] + b[1] + c[0] + d[0] = 2 + (-1) + (-1) + 0 = 0",,
455,Assign Cookies,"Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.

Each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.


Example 1:
Input: g = [1,2,3], s = [1,1]
Output: 1
Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.

You need to output 1.


Example 2:
Input: g = [1,2], s = [1,2,3]
Output: 2
Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
You have 3 cookies and their sizes are big enough to gratify all of the children, 
You need to output 2.


Constraints:
`1 <= g.length <= 3 * 104`
`0 <= s.length <= 3 * 104`
`1 <= g[i], s[j] <= 231 - 1`",Easy,https://leetcode.com/problems/assign-cookies,Amazon,Greedy,842,,"assume you are an awesome parent and want to give your children some cookies. but, you should give each child at most one cookie. each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. if `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. your goal is to maximize the number of your content children and output the maximum number.","input: g = [1,2,3], s = [1,1] output: 1 explanation: you have 3 children and 2 cookies. the greed factors of 3 children are 1, 2, 3. and even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content. you need to output 1. example 2: input: g = [1,2], s = [1,2,3] output: 2 explanation: you have 2 children and 3 cookies. the greed factors of 2 children are 1, 2. you have 3 cookies and their sizes are big enough to gratify all of the children, you need to output 2.","`1 <= g.length <= 3 * 10^4` `0 <= s.length <= 3 * 10^4` `1 <= g[i], s[j] <= 231 - 1`",
456,132 Pattern,"Given an array of `n` integers `nums`, a 132 pattern is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`.

Return `true` if there is a 132 pattern in `nums`, otherwise, return `false`.

Follow up: The `O(n^2)` is trivial, could you come up with the `O(n logn)` or the `O(n)` solution?

Example 1:
Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.


Example 2:
Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].


Example 3:
Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].


Constraints:
`n == nums.length`
`1 <= n <= 104`
`-109 <= nums[i] <= 109`",Medium,https://leetcode.com/problems/132-pattern,Amazon,Stack,2232,,"given an array of `n` integers `nums`, a 132 pattern is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`. return `true` if there is a 132 pattern in `nums`, otherwise, return `false`.","input: nums = [1,2,3,4] output: false explanation: there is no 132 pattern in the sequence. example 2: input: nums = [3,1,4,2] output: true explanation: there is a 132 pattern in the sequence: [1, 4, 2]. example 3: input: nums = [-1,3,2,0] output: true explanation: there are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].",`n == nums.length` `1 <= n <= 10^4` `-10^9 <= nums[i] <= 10^9`,"the `o(n^2)` is trivial, could you come up with the `o(n logn)` or the `o(n)` solution? example 1: input: nums = [1,2,3,4] output: false explanation: there is no 132 pattern in the sequence. example 2: input: nums = [3,1,4,2] output: true explanation: there is a 132 pattern in the sequence: [1, 4, 2]. example 3: input: nums = [-1,3,2,0] output: true explanation: there are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0]. constraints: `n == nums.length` `1 <= n <= 104` `-109 <= nums[i] <= 109`"
457,Circular Array Loop,"You are playing a game involving a circular array of non-zero integers `nums`. Each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`:
If `nums[i]` is positive, move `nums[i]` steps forward, and
If `nums[i]` is negative, move `nums[i]` steps backward.

Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.

A cycle in the array consists of a sequence of indices `seq` of length `k` where:
Following the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`
Every `nums[seq[j]]` is either all positive or all negative.

`k > 1`
Return `true` if there is a cycle in `nums`, or `false` otherwise.


Example 1:
Input: nums = [2,-1,1,2,2]
Output: true
Explanation:
There is a cycle from index 0 -> 2 -> 3 -> 0 -> ...

The cycle's length is 3.


Example 2:
Input: nums = [-1,2]
Output: false
Explanation:
The sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1.

By definition the sequence's length must be strictly greater than 1 to be a cycle.


Example 3:
Input: nums = [-2,1,-1,-2,-2]
Output: false
Explanation:
The sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative.

Every nums[seq[j]] must be either all positive or all negative.


Constraints:
`1 <= nums.length <= 5000`
`-1000 <= nums[i] <= 1000`
`nums[i] != 0`
Follow up: Could you solve it in `O(n)` time complexity and `O(1)` extra space complexity?",Medium,https://leetcode.com/problems/circular-array-loop,Apple,"Array,Two Pointers",36,,"you are playing a game involving a circular array of non-zero integers `nums`. each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`: if `nums[i]` is positive, move `nums[i]` steps forward, and if `nums[i]` is negative, move `nums[i]` steps backward. since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element. a cycle in the array consists of a sequence of indices `seq` of length `k` where: following the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...` every `nums[seq[j]]` is either all positive or all negative. `k > 1` return `true` if there is a cycle in `nums`, or `false` otherwise.","input: nums = [2,-1,1,2,2] output: true explanation: there is a cycle from index 0 -> 2 -> 3 -> 0 -> ... the cycle's length is 3. example 2: input: nums = [-1,2] output: false explanation: the sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1. by definition the sequence's length must be strictly greater than 1 to be a cycle. example 3: input: nums = [-2,1,-1,-2,-2] output: false explanation: the sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative. every nums[seq[j]] must be either all positive or all negative.",`1 <= nums.length <= 5000` `-1000 <= nums[i] <= 1000` `nums[i] != 0`,could you solve it in `o(n)` time complexity and `o(1)` extra space complexity?
458,Poor Pigs,"There are `buckets` buckets of liquid, where exactly one of the buckets is poisonous. To figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. Unfortunately, you only have `minutesToTest` minutes to determine which bucket is poisonous.

You can feed the pigs according to these steps:
Choose some live pigs to feed.

For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time.

Wait for `minutesToDie` minutes. You may not feed any other pigs during this time.

After `minutesToDie` minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.

Repeat this process until you run out of time.

Given `buckets`, `minutesToDie`, and `minutesToTest`, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.


Example 1:
Input: buckets = 1000, minutesToDie = 15, minutesToTest = 60
Output: 5

Example 2:
Input: buckets = 4, minutesToDie = 15, minutesToTest = 15
Output: 2

Example 3:
Input: buckets = 4, minutesToDie = 15, minutesToTest = 30
Output: 2

Constraints:
`1 <= buckets <= 1000`
`1 <= minutesToDie <= minutesToTest <= 100`",Hard,https://leetcode.com/problems/poor-pigs,,,548,,"there are `buckets` buckets of liquid, where exactly one of the buckets is poisonous. to figure out which one is poisonous, you feed some number of (poor) pigs the liquid to see whether they will die or not. unfortunately, you only have `minutestotest` minutes to determine which bucket is poisonous. you can feed the pigs according to these steps: choose some live pigs to feed. for each pig, choose which buckets to feed it. the pig will consume all the chosen buckets simultaneously and will take no time. wait for `minutestodie` minutes. you may not feed any other pigs during this time. after `minutestodie` minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive. repeat this process until you run out of time. given `buckets`, `minutestodie`, and `minutestotest`, return the minimum number of pigs needed to figure out which bucket is poisonous within the allotted time.","input: buckets = 1000, minutestodie = 15, minutestotest = 60 output: 5 example 2: input: buckets = 4, minutestodie = 15, minutestotest = 15 output: 2 example 3: input: buckets = 4, minutestodie = 15, minutestotest = 30 output: 2",`1 <= buckets <= 1000` `1 <= minutestodie <= minutestotest <= 10^0`,
459,Repeated Substring Pattern,"Given a string `s`, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.


Example 1:
Input: s = ""abab""
Output: true
Explanation: It is the substring ""ab"" twice.


Example 2:
Input: s = ""aba""
Output: false

Example 3:
Input: s = ""abcabcabcabc""
Output: true
Explanation: It is the substring ""abc"" four times or the substring ""abcabc"" twice.


Constraints:
`1 <= s.length <= 104`
`s` consists of lowercase English letters.",Easy,https://leetcode.com/problems/repeated-substring-pattern,Google,String,2344,"[Implement strStr(), /problems/implement-strstr/, Easy], [Repeated String Match, /problems/repeated-string-match/, Medium]","given a string `s`, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.","input: s = ""abab"" output: true explanation: it is the substring ""ab"" twice. example 2: input: s = ""aba"" output: false example 3: input: s = ""abcabcabcabc"" output: true explanation: it is the substring ""abc"" four times or the substring ""abcabc"" twice.",`1 <= s.length <= 10^4` `s` consists of lowercase english letters.,
460,LFU Cache,"Design and implement a data structure for a Least Frequently Used (LFU) cache.

Implement the `LFUCache` class:
`LFUCache(int capacity)` Initializes the object with the `capacity` of the data structure.

`int get(int key)` Gets the value of the `key` if the `key` exists in the cache. Otherwise, returns `-1`.

`void put(int key, int value)` Update the value of the `key` if present, or inserts the `key` if not already present. When the cache reaches its `capacity`, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used `key` would be invalidated.

To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.

When a key is first inserted into the cache, its use counter is set to `1` (due to the `put` operation). The use counter for a key in the cache is incremented either a `get` or `put` operation is called on it.


Example 1:
Input
[""LFUCache"", ""put"", ""put"", ""get"", ""put"", ""get"", ""get"", ""put"", ""get"", ""get"", ""get""]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, 3, null, -1, 3, 4]
Explanation
// cnt(x) = the use counter for key x
// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)
LFUCache lfu = new LFUCache(2);
lfu.put(1, 1);   // cache=[1,_], cnt(1)=1
lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1
lfu.get(1);      // return 1
                 // cache=[1,2], cnt(2)=1, cnt(1)=2
lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.

                 // cache=[3,1], cnt(3)=1, cnt(1)=2
lfu.get(2);      // return -1 (not found)
lfu.get(3);      // return 3
                 // cache=[3,1], cnt(3)=2, cnt(1)=2
lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.

                 // cache=[4,3], cnt(4)=1, cnt(3)=2
lfu.get(1);      // return -1 (not found)
lfu.get(3);      // return 3
                 // cache=[3,4], cnt(4)=1, cnt(3)=3
lfu.get(4);      // return 4
                 // cache=[3,4], cnt(4)=2, cnt(3)=3

Constraints:
`0 <= capacity, key, value <= 104`
At most `105` calls will be made to `get` and `put`.

Follow up: Could you do both operations in `O(1)` time complexity?",Hard,https://leetcode.com/problems/lfu-cache,"Amazon,Microsoft,Google,Citadel,Bloomberg,Salesforce,Twitch",Design,1935,"[LRU Cache, /problems/lru-cache/, Medium], [Design In-Memory File System, /problems/design-in-memory-file-system/, Hard]","design and implement a data structure for a least frequently used (lfu) cache. implement the `lfucache` class: `lfucache(int capacity)` initializes the object with the `capacity` of the data structure. `int get(int key)` gets the value of the `key` if the `key` exists in the cache. otherwise, returns `-1`. `void put(int key, int value)` update the value of the `key` if present, or inserts the `key` if not already present. when the cache reaches its `capacity`, it should invalidate and remove the least frequently used key before inserting a new item. for this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used `key` would be invalidated. to determine the least frequently used key, a use counter is maintained for each key in the cache. the key with the smallest use counter is the least frequently used key. when a key is first inserted into the cache, its use counter is set to `1` (due to the `put` operation). the use counter for a key in the cache is incremented either a `get` or `put` operation is called on it.","input [""lfucache"", ""put"", ""put"", ""get"", ""put"", ""get"", ""get"", ""put"", ""get"", ""get"", ""get""] [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]] output [null, null, null, 1, null, -1, 3, null, -1, 3, 4] explanation // cnt(x) = the use counter for key x // cache=[] will show the last used order for tiebreakers (leftmost element is most recent) lfucache lfu = new lfucache(2); lfu.put(1, 1); // cache=[1,_], cnt(1)=1 lfu.put(2, 2); // cache=[2,1], cnt(2)=1, cnt(1)=1 lfu.get(1); // return 1 // cache=[1,2], cnt(2)=1, cnt(1)=2 lfu.put(3, 3); // 2 is the lfu key because cnt(2)=1 is the smallest, invalidate 2. // cache=[3,1], cnt(3)=1, cnt(1)=2 lfu.get(2); // return -1 (not found) lfu.get(3); // return 3 // cache=[3,1], cnt(3)=2, cnt(1)=2 lfu.put(4, 4); // both 1 and 3 have the same cnt, but 1 is lru, invalidate 1. // cache=[4,3], cnt(4)=1, cnt(3)=2 lfu.get(1); // return -1 (not found) lfu.get(3); // return 3 // cache=[3,4], cnt(4)=1, cnt(3)=3 lfu.get(4); // return 4 // cache=[3,4], cnt(4)=2, cnt(3)=3","`0 <= capacity, key, value <= 10^4` at most `10^5` calls will be made to `get` and `put`.",could you do both operations in `o(1)` time complexity?
461,Hamming Distance,"The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers `x` and `y`, calculate the Hamming distance.

Note:
0 ≤ `x`, `y` < 231.


Example:
Input: x = 1, y = 4
Output: 2
Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑
The above arrows point to positions where the corresponding bits are different.",Easy,https://leetcode.com/problems/hamming-distance,Adobe,Bit Manipulation,2160,"[Number of 1 Bits, /problems/number-of-1-bits/, Easy], [Total Hamming Distance, /problems/total-hamming-distance/, Medium]","the hamming distance between two integers is the number of positions at which the corresponding bits are different. given two integers `x` and `y`, calculate the hamming distance. note: 0 ≤ `x`, `y` < 231.","input: x = 1, y = 4 output: 2 explanation: 1 (0 0 0 1) 4 (0 1 0 0) ↑ ↑ the above arrows point to positions where the corresponding bits are different.",,
462,Minimum Moves to Equal Array Elements II,"Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.

You may assume the array's length is at most 10,000.


Example:
Input:
[1,2,3]
Output:
2
Explanation:
Only two moves are needed (remember each move increments or decrements one element):
[1,2,3]  =>  [2,2,3]  =>  [2,2,2]",Medium,https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii,Microsoft,Math,652,"[Best Meeting Point, /problems/best-meeting-point/, Hard], [Minimum Moves to Equal Array Elements, /problems/minimum-moves-to-equal-array-elements/, Easy]","given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1. you may assume the array's length is at most 10,000.","input: [1,2,3] output: 2 explanation: only two moves are needed (remember each move increments or decrements one element): [1,2,3] => [2,2,3] => [2,2,2]",,
463,Island Perimeter,"You are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water.

Grid cells are connected horizontally/vertically (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).

The island doesn't have ""lakes"", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.


Example 1:
Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
Output: 16
Explanation: The perimeter is the 16 yellow stripes in the image above.


Example 2:
Input: grid = [[1]]
Output: 4

Example 3:
Input: grid = [[1,0]]
Output: 4

Constraints:
`row == grid.length`
`col == grid[i].length`
`1 <= row, col <= 100`
`grid[i][j]` is `0` or `1`.",Easy,https://leetcode.com/problems/island-perimeter,Facebook,Hash Table,2665,"[Max Area of Island, /problems/max-area-of-island/, Medium], [Flood Fill, /problems/flood-fill/, Easy], [Coloring A Border, /problems/coloring-a-border/, Medium]","you are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water. grid cells are connected horizontally/vertically (not diagonally). the `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells). the island doesn't have ""lakes"", meaning the water inside isn't connected to the water around the island. one cell is a square with side length 1. the grid is rectangular, width and height don't exceed 100. determine the perimeter of the island.","input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]] output: 16 explanation: the perimeter is the 16 yellow stripes in the image above. example 2: input: grid = [[1]] output: 4 example 3: input: grid = [[1,0]] output: 4","`row == grid.length` `col == grid[i].length` `1 <= row, col <= 10^0` `grid[i][j]` is `0` or `1`.",
464,Can I Win,"In the ""100 game"" two players take turns adding, to a running total, any integer from `1` to `10`. The player who first causes the running total to reach or exceed 100 wins.

What if we change the game so that players cannot re-use integers?
For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.

Given two integers maxChoosableInteger and desiredTotal, return `true` if the first player to move can force a win, otherwise return `false`. Assume both players play optimally.


Example 1:
Input: maxChoosableInteger = 10, desiredTotal = 11
Output: false
Explanation:
No matter which integer the first player choose, the first player will lose.

The first player can choose an integer from 1 up to 10.

If the first player choose 1, the second player can only choose integers from 2 up to 10.

The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.

Same with other integers chosen by the first player, the second player will always win.


Example 2:
Input: maxChoosableInteger = 10, desiredTotal = 0
Output: true

Example 3:
Input: maxChoosableInteger = 10, desiredTotal = 1
Output: true

Constraints:
`1 <= maxChoosableInteger <= 20`
`0 <= desiredTotal <= 300`",Medium,https://leetcode.com/problems/can-i-win,LinkedIn,"Dynamic Programming,Minimax",1285,"[Flip Game II, /problems/flip-game-ii/, Medium], [Guess Number Higher or Lower II, /problems/guess-number-higher-or-lower-ii/, Medium], [Predict the Winner, /problems/predict-the-winner/, Medium]","in the ""100 game"" two players take turns adding, to a running total, any integer from `1` to `10`. the player who first causes the running total to reach or exceed 100 wins. what if we change the game so that players cannot re-use integers? for example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100. given two integers maxchoosableinteger and desiredtotal, return `true` if the first player to move can force a win, otherwise return `false`. assume both players play optimally.","input: maxchoosableinteger = 10, desiredtotal = 11 output: false explanation: no matter which integer the first player choose, the first player will lose. the first player can choose an integer from 1 up to 10. if the first player choose 1, the second player can only choose integers from 2 up to 10. the second player will win by choosing 10 and get a total = 11, which is >= desiredtotal. same with other integers chosen by the first player, the second player will always win. example 2: input: maxchoosableinteger = 10, desiredtotal = 0 output: true example 3: input: maxchoosableinteger = 10, desiredtotal = 1 output: true",`1 <= maxchoosableinteger <= 20` `0 <= desiredtotal <= 300`,
465,Optimal Account Balancing,"A group of friends went on holiday and sometimes lent each other money. For example, Alice paid for Bill's lunch for $10. Then later Chris gave Alice $5 for a taxi ride. We can model each transaction as a tuple (x, y, z) which means person x gave person y $z. Assuming Alice, Bill, and Chris are person 0, 1, and 2 respectively (0, 1, 2 are the person's ID), the transactions can be represented as `[[0, 1, 10], [2, 0, 5]]`.

Given a list of transactions between a group of people, return the minimum number of transactions required to settle the debt.

Note:
A transaction will be given as a tuple (x, y, z). Note that `x ≠ y` and `z > 0`.

Person's IDs may not be linear, e.g. we could have the persons 0, 1, 2 or we could also have the persons 0, 2, 6.


Example 1:
Input:
[[0,1,10], [2,0,5]]
Output:
2
Explanation:
Person #0 gave person #1 $10.

Person #2 gave person #0 $5.

Two transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.


Example 2:
Input:
[[0,1,10], [1,0,1], [1,2,5], [2,0,5]]
Output:
1
Explanation:
Person #0 gave person #1 $10.

Person #1 gave person #0 $1.

Person #1 gave person #2 $5.

Person #2 gave person #0 $5.

Therefore, person #1 only need to give person #0 $4, and all debt is settled.",Hard,https://leetcode.com/problems/optimal-account-balancing,"Google,Uber",,759,,"a group of friends went on holiday and sometimes lent each other money. for example, alice paid for bill's lunch for $10. then later chris gave alice $5 for a taxi ride. we can model each transaction as a tuple (x, y, z) which means person x gave person y $z. assuming alice, bill, and chris are person 0, 1, and 2 respectively (0, 1, 2 are the person's id), the transactions can be represented as `[[0, 1, 10], [2, 0, 5]]`. given a list of transactions between a group of people, return the minimum number of transactions required to settle the debt. note: a transaction will be given as a tuple (x, y, z). note that `x ≠ y` and `z > 0`. person's ids may not be linear, e.g. we could have the persons 0, 1, 2 or we could also have the persons 0, 2, 6.","input: [[0,1,10], [2,0,5]] output: 2 explanation: person #0 gave person #1 $10. person #2 gave person #0 $5. two transactions are needed. one way to settle the debt is person #1 pays person #0 and #2 $5 each. example 2: input: [[0,1,10], [1,0,1], [1,2,5], [2,0,5]] output: 1 explanation: person #0 gave person #1 $10. person #1 gave person #0 $1. person #1 gave person #2 $5. person #2 gave person #0 $5. therefore, person #1 only need to give person #0 $4, and all debt is settled.",,
466,Count The Repetitions,"Define `S = [s,n]` as the string S which consists of n connected strings s. For example, `[""abc"", 3]` =""abcabcabc"". 
On the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, “abc”  can be obtained from “abdbec” based on our definition, but it can not be obtained from “acbbe”.

You are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 ≤ n1 ≤ 106 and 1 ≤ n2 ≤ 106. Now consider the strings S1 and S2, where `S1=[s1,n1]` and `S2=[s2,n2]`. Find the maximum integer M such that `[S2,M]` can be obtained from `S1`.


Example:
Input:
s1=""acb"", n1=4
s2=""ab"", n2=2
Return:
2",Hard,https://leetcode.com/problems/count-the-repetitions,Amazon,Dynamic Programming,218,,"define `s = [s,n]` as the string s which consists of n connected strings s. for example, `[""abc"", 3]` =""abcabcabc"". on the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. for example, “abc” can be obtained from “abdbec” based on our definition, but it can not be obtained from “acbbe”. you are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 ≤ n1 ≤ 106 and 1 ≤ n2 ≤ 106. now consider the strings s1 and s2, where `s1=[s1,n1]` and `s2=[s2,n2]`. find the maximum integer m such that `[s2,m]` can be obtained from `s1`.","input: s1=""acb"", n1=4 s2=""ab"", n2=2 return: 2",,
467,Unique Substrings in Wraparound String,"Consider the string `s` to be the infinite wraparound string of ""abcdefghijklmnopqrstuvwxyz"", so `s` will look like this: ""...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd...."".

Now we have another string `p`. Your job is to find out how many unique non-empty substrings of `p` are present in `s`. In particular, your input is the string `p` and you need to output the number of different non-empty substrings of `p` in the string `s`.

Note: `p` consists of only lowercase English letters and the size of p might be over 10000.


Example 1:
Input: ""a""
Output: 1
Explanation: Only the substring ""a"" of string ""a"" is in the string s.


Example 2:
Input: ""cac""
Output: 2
Explanation: There are two substrings ""a"", ""c"" of string ""cac"" in the string s.


Example 3:
Input: ""zab""
Output: 6
Explanation: There are six substrings ""z"", ""a"", ""b"", ""za"", ""ab"", ""zab"" of string ""zab"" in the string s.",Medium,https://leetcode.com/problems/unique-substrings-in-wraparound-string,"Google,MAQ Software",Dynamic Programming,774,,"consider the string `s` to be the infinite wraparound string of ""abcdefghijklmnopqrstuvwxyz"", so `s` will look like this: ""...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd...."". now we have another string `p`. your job is to find out how many unique non-empty substrings of `p` are present in `s`. in particular, your input is the string `p` and you need to output the number of different non-empty substrings of `p` in the string `s`. note: `p` consists of only lowercase english letters and the size of p might be over 10000.","input: ""a"" output: 1 explanation: only the substring ""a"" of string ""a"" is in the string s. example 2: input: ""cac"" output: 2 explanation: there are two substrings ""a"", ""c"" of string ""cac"" in the string s. example 3: input: ""zab"" output: 6 explanation: there are six substrings ""z"", ""a"", ""b"", ""za"", ""ab"", ""zab"" of string ""zab"" in the string s.",,
468,Validate IP Address,"Given a string `IP`, return `""IPv4""` if IP is a valid IPv4 address, `""IPv6""` if IP is a valid IPv6 address or `""Neither""` if IP is not a correct IP of any type.

A valid IPv4 address is an IP in the form `""x1.x2.x3.x4""` where `0 <= xi <= 255` and `xi` cannot contain leading zeros. For example, `""192.168.1.1""` and `""192.168.1.0""` are valid IPv4 addresses but `""192.168.01.1""`, while `""192.168.1.00""` and `""192.168@1.1""` are invalid IPv4 addresses.

A valid IPv6 address is an IP in the form `""x1:x2:x3:x4:x5:x6:x7:x8""` where:
`1 <= xi.length <= 4`
`xi` is a hexadecimal string which may contain digits, lower-case English letter (`'a'` to `'f'`) and upper-case English letters (`'A'` to `'F'`).

Leading zeros are allowed in `xi`.

For example, ""`2001:0db8:85a3:0000:0000:8a2e:0370:7334""` and ""`2001:db8:85a3:0:0:8A2E:0370:7334""` are valid IPv6 addresses, while ""`2001:0db8:85a3::8A2E:037j:7334""` and ""`02001:0db8:85a3:0000:0000:8a2e:0370:7334""` are invalid IPv6 addresses.


Example 1:
Input: IP = ""172.16.254.1""
Output: ""IPv4""
Explanation: This is a valid IPv4 address, return ""IPv4"".


Example 2:
Input: IP = ""2001:0db8:85a3:0:0:8A2E:0370:7334""
Output: ""IPv6""
Explanation: This is a valid IPv6 address, return ""IPv6"".


Example 3:
Input: IP = ""256.256.256.256""
Output: ""Neither""
Explanation: This is neither a IPv4 address nor a IPv6 address.


Example 4:
Input: IP = ""2001:0db8:85a3:0:0:8A2E:0370:7334:""
Output: ""Neither""

Example 5:
Input: IP = ""1e1.4.5.6""
Output: ""Neither""

Constraints:
`IP` consists only of English letters, digits and the characters `'.'` and `':'`.",Medium,https://leetcode.com/problems/validate-ip-address,"Cisco,Facebook,Microsoft,Oracle",String,467,"[IP to CIDR, /problems/ip-to-cidr/, Medium]","given a string `ip`, return `""ipv4""` if ip is a valid ipv4 address, `""ipv6""` if ip is a valid ipv6 address or `""neither""` if ip is not a correct ip of any type. a valid ipv4 address is an ip in the form `""x1.x2.x3.x4""` where `0 <= xi <= 255` and `xi` cannot contain leading zeros. for example, `""192.168.1.1""` and `""192.168.1.0""` are valid ipv4 addresses but `""192.168.01.1""`, while `""192.168.1.00""` and `""192.168@1.1""` are invalid ipv4 addresses. a valid ipv6 address is an ip in the form `""x1:x2:x3:x4:x5:x6:x7:x8""` where: `1 <= xi.length <= 4` `xi` is a hexadecimal string which may contain digits, lower-case english letter (`'a'` to `'f'`) and upper-case english letters (`'a'` to `'f'`). leading zeros are allowed in `xi`. for example, ""`2001:0db8:85a3:0000:0000:8a2e:0370:7334""` and ""`2001:db8:85a3:0:0:8a2e:0370:7334""` are valid ipv6 addresses, while ""`2001:0db8:85a3::8a2e:037j:7334""` and ""`02001:0db8:85a3:0000:0000:8a2e:0370:7334""` are invalid ipv6 addresses.","input: ip = ""172.16.254.1"" output: ""ipv4"" explanation: this is a valid ipv4 address, return ""ipv4"". example 2: input: ip = ""2001:0db8:85a3:0:0:8a2e:0370:7334"" output: ""ipv6"" explanation: this is a valid ipv6 address, return ""ipv6"". example 3: input: ip = ""256.256.256.256"" output: ""neither"" explanation: this is neither a ipv4 address nor a ipv6 address. example 4: input: ip = ""2001:0db8:85a3:0:0:8a2e:0370:7334:"" output: ""neither"" example 5: input: ip = ""1e1.4.5.6"" output: ""neither""","`ip` consists only of english letters, digits and the characters `'.'` and `':'`.",
469,Convex Polygon,"Given a list of points that form a polygon when joined sequentially, find if this polygon is convex (Convex polygon definition).

Note:
There are at least 3 and at most 10,000 points.

Coordinates are in the range -10,000 to 10,000.

You may assume the polygon formed by given points is always a simple polygon (Simple polygon definition). In other words, we ensure that exactly two edges intersect at each vertex, and that edges otherwise don't intersect each other.


Example 1:
[[0,0],[0,1],[1,1],[1,0]]
Answer: True
Explanation:

Example 2:
[[0,0],[0,10],[10,10],[10,0],[5,5]]
Answer: False
Explanation:",Medium,https://leetcode.com/problems/convex-polygon,Google,Math,73,,"given a list of points that form a polygon when joined sequentially, find if this polygon is convex (convex polygon definition). note: there are at least 3 and at most 10,000 points. coordinates are in the range -10,000 to 10,000. you may assume the polygon formed by given points is always a simple polygon (simple polygon definition). in other words, we ensure that exactly two edges intersect at each vertex, and that edges otherwise don't intersect each other.","[[0,0],[0,1],[1,1],[1,0]] answer: true explanation: example 2: [[0,0],[0,10],[10,10],[10,0],[5,5]] answer: false explanation:",,
470,Implement Rand10() Using Rand7(),"Given the API `rand7()` that generates a uniform random integer in the range `[1, 7]`, write a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. You can only call the API `rand7()`, and you shouldn't call any other API. Please do not use a language's built-in random API.

Each test case will have one internal argument `n`, the number of times that your implemented function `rand10()` will be called while testing. Note that this is not an argument passed to `rand10()`.

Follow up:
What is the expected value for the number of calls to `rand7()` function?
Could you minimize the number of calls to `rand7()`?

Example 1:
Input: n = 1
Output: [2]

Example 2:
Input: n = 2
Output: [2,8]

Example 3:
Input: n = 3
Output: [3,8,10]

Constraints:
`1 <= n <= 105`",Medium,https://leetcode.com/problems/implement-rand10-using-rand7,"Apple,Microsoft","Random,Rejection Sampling",690,,"given the api `rand7()` that generates a uniform random integer in the range `[1, 7]`, write a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. you can only call the api `rand7()`, and you shouldn't call any other api. please do not use a language's built-in random api. each test case will have one internal argument `n`, the number of times that your implemented function `rand10()` will be called while testing. note that this is not an argument passed to `rand10()`.","input: n = 1 output: [2] example 2: input: n = 2 output: [2,8] example 3: input: n = 3 output: [3,8,10]",`1 <= n <= 10^5`,"what is the expected value for the number of calls to `rand7()` function? could you minimize the number of calls to `rand7()`? example 1: input: n = 1 output: [2] example 2: input: n = 2 output: [2,8] example 3: input: n = 3 output: [3,8,10] constraints: `1 <= n <= 105`"
471,Encode String with Shortest Length,"Given a non-empty string, encode the string such that its encoded length is the shortest.

The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times.

Note:
`k` will be a positive integer.

If an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return any of them.


Example 1:
Input: s = ""aaa""
Output: ""aaa""
Explanation: There is no way to encode it such that it is shorter than the input string, so we do not encode it.


Example 2:
Input: s = ""aaaaa""
Output: ""5[a]""
Explanation: ""5[a]"" is shorter than ""aaaaa"" by 1 character.


Example 3:
Input: s = ""aaaaaaaaaa""
Output: ""10[a]""
Explanation: ""a9[a]"" or ""9[a]a"" are also valid solutions, both of them have the same length = 5, which is the same as ""10[a]"".


Example 4:
Input: s = ""aabcaabcd""
Output: ""2[aabc]d""
Explanation: ""aabc"" occurs twice, so one answer can be ""2[aabc]d"".


Example 5:
Input: s = ""abbbabbbcabbbabbbc""
Output: ""2[2[abbb]c]""
Explanation: ""abbbabbbc"" occurs twice, but ""abbbabbbc"" can also be encoded to ""2[abbb]c"", so one answer can be ""2[2[abbb]c]"".


Constraints:
`1 <= s.length <= 150`
`s` consists of only lowercase English letters.",Hard,https://leetcode.com/problems/encode-string-with-shortest-length,"Google,Amazon",Dynamic Programming,472,"[Decode String, /problems/decode-string/, Medium], [Number of Atoms, /problems/number-of-atoms/, Hard]","given a non-empty string, encode the string such that its encoded length is the shortest. the encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. note: `k` will be a positive integer. if an encoding process does not make the string shorter, then do not encode it. if there are several solutions, return any of them.","input: s = ""aaa"" output: ""aaa"" explanation: there is no way to encode it such that it is shorter than the input string, so we do not encode it. example 2: input: s = ""aaaaa"" output: ""5[a]"" explanation: ""5[a]"" is shorter than ""aaaaa"" by 1 character. example 3: input: s = ""aaaaaaaaaa"" output: ""10[a]"" explanation: ""a9[a]"" or ""9[a]a"" are also valid solutions, both of them have the same length = 5, which is the same as ""10[a]"". example 4: input: s = ""aabcaabcd"" output: ""2[aabc]d"" explanation: ""aabc"" occurs twice, so one answer can be ""2[aabc]d"". example 5: input: s = ""abbbabbbcabbbabbbc"" output: ""2[2[abbb]c]"" explanation: ""abbbabbbc"" occurs twice, but ""abbbabbbc"" can also be encoded to ""2[abbb]c"", so one answer can be ""2[2[abbb]c]"".",`1 <= s.length <= 150` `s` consists of only lowercase english letters.,
472,Concatenated Words,"Given an array of strings `words` (without duplicates), return all the concatenated words in the given list of `words`.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.


Example 1:
Input: words = [""cat"",""cats"",""catsdogcats"",""dog"",""dogcatsdog"",""hippopotamuses"",""rat"",""ratcatdogcat""]
Output: [""catsdogcats"",""dogcatsdog"",""ratcatdogcat""]
Explanation: ""catsdogcats"" can be concatenated by ""cats"", ""dog"" and ""cats""; 
""dogcatsdog"" can be concatenated by ""dog"", ""cats"" and ""dog""; 
""ratcatdogcat"" can be concatenated by ""rat"", ""cat"", ""dog"" and ""cat"".


Example 2:
Input: words = [""cat"",""dog"",""catdog""]
Output: [""catdog""]

Constraints:
`1 <= words.length <= 104`
`0 <= words[i].length <= 1000`
`words[i]` consists of only lowercase English letters.

`0 <= sum(words[i].length) <= 6 * 105`",Hard,https://leetcode.com/problems/concatenated-words,Amazon,"Dynamic Programming,Depth-first Search,Trie",1133,"[Word Break II, /problems/word-break-ii/, Hard]","given an array of strings `words` (without duplicates), return all the concatenated words in the given list of `words`. a concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.","input: words = [""cat"",""cats"",""catsdogcats"",""dog"",""dogcatsdog"",""hippopotamuses"",""rat"",""ratcatdogcat""] output: [""catsdogcats"",""dogcatsdog"",""ratcatdogcat""] explanation: ""catsdogcats"" can be concatenated by ""cats"", ""dog"" and ""cats""; ""dogcatsdog"" can be concatenated by ""dog"", ""cats"" and ""dog""; ""ratcatdogcat"" can be concatenated by ""rat"", ""cat"", ""dog"" and ""cat"". example 2: input: words = [""cat"",""dog"",""catdog""] output: [""catdog""]",`1 <= words.length <= 10^4` `0 <= words[i].length <= 1000` `words[i]` consists of only lowercase english letters. `0 <= sum(words[i].length) <= 6 * 10^5`,
473,Matchsticks to Square,"Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.

 Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.


Example 1:
Input: [1,1,2,2,2]
Output: true
Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.


Example 2:
Input: [3,3,3,3,4]
Output: false
Explanation: You cannot find a way to form a square with all the matchsticks.

Note:
The length sum of the given matchsticks is in the range of `0` to `10^9`.

The length of the given matchstick array will not exceed `15`.",Medium,https://leetcode.com/problems/matchsticks-to-square,Amazon,Depth-first Search,764,,"remember the story of little match girl? by now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. you should not break any stick, but you can link them up, and each matchstick must be used exactly one time. your input will be several matchsticks the girl has, represented with their stick length. your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.","input: [1,1,2,2,2] output: true explanation: you can form a square with length 2, one side of the square came two sticks with length 1. example 2: input: [3,3,3,3,4] output: false explanation: you cannot find a way to form a square with all the matchsticks. note: the length sum of the given matchsticks is in the range of `0` to `10^9`. the length of the given matchstick array will not exceed `15`.",,
474,Ones and Zeroes,"You are given an array of binary strings `strs` and two integers `m` and `n`.

Return the size of the largest subset of `strs` such that there are at most `m` `0`'s and `n` `1`'s in the subset.

A set `x` is a subset of a set `y` if all elements of `x` are also elements of `y`.


Example 1:
Input: strs = [""10"",""0001"",""111001"",""1"",""0""], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {""10"", ""0001"", ""1"", ""0""}, so the answer is 4.

Other valid but smaller subsets include {""0001"", ""1""} and {""10"", ""1"", ""0""}.

{""111001""} is an invalid subset because it contains 4 1's, greater than the maximum of 3.


Example 2:
Input: strs = [""10"",""0"",""1""], m = 1, n = 1
Output: 2
Explanation: The largest subset is {""0"", ""1""}, so the answer is 2.


Constraints:
`1 <= strs.length <= 600`
`1 <= strs[i].length <= 100`
`strs[i]` consists only of digits `'0'` and `'1'`.

`1 <= m, n <= 100`",Medium,https://leetcode.com/problems/ones-and-zeroes,Google,Dynamic Programming,1798,"[Non-negative Integers without Consecutive Ones, /problems/non-negative-integers-without-consecutive-ones/, Hard]",you are given an array of binary strings `strs` and two integers `m` and `n`. return the size of the largest subset of `strs` such that there are at most `m` `0`'s and `n` `1`'s in the subset. a set `x` is a subset of a set `y` if all elements of `x` are also elements of `y`.,"input: strs = [""10"",""0001"",""111001"",""1"",""0""], m = 5, n = 3 output: 4 explanation: the largest subset with at most 5 0's and 3 1's is {""10"", ""0001"", ""1"", ""0""}, so the answer is 4. other valid but smaller subsets include {""0001"", ""1""} and {""10"", ""1"", ""0""}. {""111001""} is an invalid subset because it contains 4 1's, greater than the maximum of 3. example 2: input: strs = [""10"",""0"",""1""], m = 1, n = 1 output: 2 explanation: the largest subset is {""0"", ""1""}, so the answer is 2.","`1 <= strs.length <= 600` `1 <= strs[i].length <= 10^0` `strs[i]` consists only of digits `'0'` and `'1'`. `1 <= m, n <= 10^0`",
475,Heaters,"Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.

Every house can be warmed, as long as the house is within the heater's warm radius range. 
Given the positions of `houses` and `heaters` on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.

Notice that all the `heaters` follow your radius standard, and the warm radius will the same.


Example 1:
Input: houses = [1,2,3], heaters = [2]
Output: 1
Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.


Example 2:
Input: houses = [1,2,3,4], heaters = [1,4]
Output: 1
Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.


Example 3:
Input: houses = [1,5], heaters = [2]
Output: 3

Constraints:
`1 <= houses.length, heaters.length <= 3 * 104`
`1 <= houses[i], heaters[i] <= 109`",Medium,https://leetcode.com/problems/heaters,Google,Binary Search,890,,"winter is coming! during the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses. every house can be warmed, as long as the house is within the heater's warm radius range. given the positions of `houses` and `heaters` on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses. notice that all the `heaters` follow your radius standard, and the warm radius will the same.","input: houses = [1,2,3], heaters = [2] output: 1 explanation: the only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed. example 2: input: houses = [1,2,3,4], heaters = [1,4] output: 1 explanation: the two heater was placed in the position 1 and 4. we need to use radius 1 standard, then all the houses can be warmed. example 3: input: houses = [1,5], heaters = [2] output: 3","`1 <= houses.length, heaters.length <= 3 * 10^4` `1 <= houses[i], heaters[i] <= 10^9`",
476,Number Complement,"Given a positive integer `num`, output its complement number. The complement strategy is to flip the bits of its binary representation.


Example 1:
Input: num = 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.


Example 2:
Input: num = 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.


Constraints:
The given integer `num` is guaranteed to fit within the range of a 32-bit signed integer.

`num >= 1`
You could assume no leading zero bit in the integer’s binary representation.

This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/",Easy,https://leetcode.com/problems/number-complement,"Apple,Cloudera",Bit Manipulation,1143,,"given a positive integer `num`, output its complement number. the complement strategy is to flip the bits of its binary representation.","input: num = 5 output: 2 explanation: the binary representation of 5 is 101 (no leading zero bits), and its complement is 010. so you need to output 2. example 2: input: num = 1 output: 0 explanation: the binary representation of 1 is 1 (no leading zero bits), and its complement is 0. so you need to output 0.",the given integer `num` is guaranteed to fit within the range of a 32-bit signed integer. `num >= 1` you could assume no leading zero bit in the integer’s binary representation. this question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/,
477,Total Hamming Distance,"The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Now your job is to find the total Hamming distance between all pairs of the given numbers.


Example:
Input: 4, 14, 2
Output: 6
Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just
showing the four bits relevant in this case). So the answer will be:
HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.

Note:
Elements of the given array are in the range of `0 ` to `10^9`
Length of the array will not exceed `10^4`.",Medium,https://leetcode.com/problems/total-hamming-distance,Facebook,Bit Manipulation,1092,"[Hamming Distance, /problems/hamming-distance/, Easy]",the hamming distance between two integers is the number of positions at which the corresponding bits are different. now your job is to find the total hamming distance between all pairs of the given numbers.,"input: 4, 14, 2 output: 6 explanation: in binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just showing the four bits relevant in this case). so the answer will be: hammingdistance(4, 14) + hammingdistance(4, 2) + hammingdistance(14, 2) = 2 + 2 + 2 = 6. note: elements of the given array are in the range of `0 ` to `10^9` length of the array will not exceed `10^4`.",,
478,Generate Random Point in a Circle,"Given the radius and the position of the center of a circle, implement the function `randPoint` which generates a uniform random point inside the circle.

Implement the `Solution` class:
`Solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`.

`randPoint()` returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`.


Example 1:
Input
[""Solution"", ""randPoint"", ""randPoint"", ""randPoint""]
[[1.0, 0.0, 0.0], [], [], []]
Output
[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]
Explanation
Solution solution = new Solution(1.0, 0.0, 0.0);
solution.randPoint(); // return [-0.02493, -0.38077]
solution.randPoint(); // return [0.82314, 0.38945]
solution.randPoint(); // return [0.36572, 0.17248]

Constraints:
`0 < radius <= 108`
`-107 <= x_center, y_center <= 107`
At most `3 * 104` calls will be made to `randPoint`.",Medium,https://leetcode.com/problems/generate-random-point-in-a-circle,Leap Motion,"Math,Random,Rejection Sampling",311,"[Random Point in Non-overlapping Rectangles, /problems/random-point-in-non-overlapping-rectangles/, Medium]","given the radius and the position of the center of a circle, implement the function `randpoint` which generates a uniform random point inside the circle. implement the `solution` class: `solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`. `randpoint()` returns a random point inside the circle. a point on the circumference of the circle is considered to be in the circle. the answer is returned as an array `[x, y]`.","input [""solution"", ""randpoint"", ""randpoint"", ""randpoint""] [[1.0, 0.0, 0.0], [], [], []] output [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]] explanation solution solution = new solution(1.0, 0.0, 0.0); solution.randpoint(); // return [-0.02493, -0.38077] solution.randpoint(); // return [0.82314, 0.38945] solution.randpoint(); // return [0.36572, 0.17248]","`0 < radius <= 10^8` `-10^7 <= x_center, y_center <= 10^7` at most `3 * 10^4` calls will be made to `randpoint`.",
479,Largest Palindrome Product,"Find the largest palindrome made from the product of two n-digit numbers.

Since the result could be very large, you should return the largest palindrome mod 1337.


Example:
Input: 2
Output: 987
Explanation: 99 x 91 = 9009, 9009 % 1337 = 987
Note:
The range of n is [1,8].",Hard,https://leetcode.com/problems/largest-palindrome-product,Yahoo,,100,,"find the largest palindrome made from the product of two n-digit numbers. since the result could be very large, you should return the largest palindrome mod 1337.","input: 2 output: 987 explanation: 99 x 91 = 9009, 9009 % 1337 = 987 note: the range of n is [1,8].",,
480,Sliding Window Median,"Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.


Examples:
`[2,3,4]` , the median is `3`
`[2,3]`, the median is `(2 + 3) / 2 = 2.5`
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Your job is to output the median array for each window in the original array.

For example,
Given nums = `[1,3,-1,-3,5,3,6,7]`, and k = 3.

Window position                Median
---------------               -----
[1  3  -1] -3  5  3  6  7       1
 1 [3  -1  -3] 5  3  6  7       -1
 1  3 [-1  -3  5] 3  6  7       -1
 1  3  -1 [-3  5  3] 6  7       3
 1  3  -1  -3 [5  3  6] 7       5
 1  3  -1  -3  5 [3  6  7]      6
Therefore, return the median sliding window as `[1,-1,-1,3,5,6]`.

Note: 
You may assume `k` is always valid, ie: `k` is always smaller than input array's size for non-empty array.

Answers within `10^-5` of the actual value will be accepted as correct.",Hard,https://leetcode.com/problems/sliding-window-median,"Facebook,Spotify,JPMorgan,Google,Amazon,Flipkart,Adobe",Sliding Window,1357,"[Find Median from Data Stream, /problems/find-median-from-data-stream/, Hard]","median is the middle value in an ordered integer list. if the size of the list is even, there is no middle value. so the median is the mean of the two middle value.","`[2,3,4]` , the median is `3` `[2,3]`, the median is `(2 + 3) / 2 = 2.5` given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. you can only see the k numbers in the window. each time the sliding window moves right by one position. your job is to output the median array for each window in the original array. for example, given nums = `[1,3,-1,-3,5,3,6,7]`, and k = 3. window position median --------------- ----- [1 3 -1] -3 5 3 6 7 1 1 [3 -1 -3] 5 3 6 7 -1 1 3 [-1 -3 5] 3 6 7 -1 1 3 -1 [-3 5 3] 6 7 3 1 3 -1 -3 [5 3 6] 7 5 1 3 -1 -3 5 [3 6 7] 6 therefore, return the median sliding window as `[1,-1,-1,3,5,6]`. note: you may assume `k` is always valid, ie: `k` is always smaller than input array's size for non-empty array. answers within `10^-5` of the actual value will be accepted as correct.",,
481,Magical String,"A magical string S consists of only '1' and '2' and obeys the following rules:
The string S is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string S itself.

The first few elements of string S is the following:
S = ""1221121221221121122......""
If we group the consecutive '1's and '2's in S, it will be:
1   22  11  2  1  22  1  22  11  2  11  22 ......

and the occurrences of '1's or '2's in each group are:
1   2	   2    1   1    2     1    2     2    1    2    2 ......

You can see that the occurrence sequence above is the S itself. 
Given an integer N as input, return the number of '1's in the first N number in the magical string S.

Note:
N will not exceed 100,000.


Example 1:
Input: 6
Output: 3
Explanation: The first 6 elements of magical string S is ""12211"" and it contains three 1's, so return 3.",Medium,https://leetcode.com/problems/magical-string,Google,,128,,"a magical string s consists of only '1' and '2' and obeys the following rules: the string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself. the first few elements of string s is the following: s = ""1221121221221121122......"" if we group the consecutive '1's and '2's in s, it will be: 1 22 11 2 1 22 1 22 11 2 11 22 ...... and the occurrences of '1's or '2's in each group are: 1 2 2 1 1 2 1 2 2 1 2 2 ...... you can see that the occurrence sequence above is the s itself. given an integer n as input, return the number of '1's in the first n number in the magical string s. note: n will not exceed 100,000.","input: 6 output: 3 explanation: the first 6 elements of magical string s is ""12211"" and it contains three 1's, so return 3.",,
482,License Key Formatting,"You are given a license key represented as a string S which consists only alphanumeric character and dashes. The string is separated into N+1 groups by N dashes.

Given a number K, we would want to reformat the strings such that each group contains exactly K characters, except for the first group which could be shorter than K, but still must contain at least one character. Furthermore, there must be a dash inserted between two groups and all lowercase letters should be converted to uppercase.

Given a non-empty string S and a number K, format the string according to the rules described above.


Example 1:
Input: S = ""5F3Z-2e-9-w"", K = 4
Output: ""5F3Z-2E9W""
Explanation: The string S has been split into two parts, each part has 4 characters.

Note that the two extra dashes are not needed and can be removed.


Example 2:
Input: S = ""2-5g-3-J"", K = 2
Output: ""2-5G-3J""
Explanation: The string S has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.

Note:
The length of string S will not exceed 12,000, and K is a positive integer.

String S consists only of alphanumerical characters (a-z and/or A-Z and/or 0-9) and dashes(-).

String S is non-empty.",Easy,https://leetcode.com/problems/license-key-formatting,Capital One,,578,,"you are given a license key represented as a string s which consists only alphanumeric character and dashes. the string is separated into n+1 groups by n dashes. given a number k, we would want to reformat the strings such that each group contains exactly k characters, except for the first group which could be shorter than k, but still must contain at least one character. furthermore, there must be a dash inserted between two groups and all lowercase letters should be converted to uppercase. given a non-empty string s and a number k, format the string according to the rules described above.","input: s = ""5f3z-2e-9-w"", k = 4 output: ""5f3z-2e9w"" explanation: the string s has been split into two parts, each part has 4 characters. note that the two extra dashes are not needed and can be removed. example 2: input: s = ""2-5g-3-j"", k = 2 output: ""2-5g-3j"" explanation: the string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above. note: the length of string s will not exceed 12,000, and k is a positive integer. string s consists only of alphanumerical characters (a-z and/or a-z and/or 0-9) and dashes(-). string s is non-empty.",,
483,Smallest Good Base,"For an integer n, we call k>=2 a good base of n, if all digits of n base k are 1.

Now given a string representing n, you should return the smallest good base of n in string format.


Example 1:
Input: ""13""
Output: ""3""
Explanation: 13 base 3 is 111.


Example 2:
Input: ""4681""
Output: ""8""
Explanation: 4681 base 8 is 11111.


Example 3:
Input: ""1000000000000000000""
Output: ""999999999999999999""
Explanation: 1000000000000000000 base 999999999999999999 is 11.

Note:
The range of n is [3, 10^18].

The string representing n is always valid and will not have leading zeros.",Hard,https://leetcode.com/problems/smallest-good-base,Google,"Math,Binary Search",193,,"for an integer n, we call k>=2 a good base of n, if all digits of n base k are 1. now given a string representing n, you should return the smallest good base of n in string format.","input: ""13"" output: ""3"" explanation: 13 base 3 is 111. example 2: input: ""4681"" output: ""8"" explanation: 4681 base 8 is 11111. example 3: input: ""1000000000000000000"" output: ""999999999999999999"" explanation: 1000000000000000000 base 999999999999999999 is 11. note: the range of n is [3, 10^18]. the string representing n is always valid and will not have leading zeros.",,
484,Find Permutation,"By now, you are given a secret signature consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our secret signature was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature ""DI"" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the ""DI"" secret signature.

On the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given secret signature in the input.


Example 1:
Input: ""I""
Output: [1,2]
Explanation: [1,2] is the only legal initial spectial string can construct secret signature ""I"", where the number 1 and 2 construct an increasing relationship.


Example 2:
Input: ""DI""
Output: [2,1,3]
Explanation: Both [2,1,3] and [3,1,2] can construct the secret signature ""DI"", but since we want to find the one with the smallest lexicographical permutation, you need to output [2,1,3]
Note:
The input string will only contain the character 'D' and 'I'.

The length of input string is a positive integer and will not exceed 10,000",Medium,https://leetcode.com/problems/find-permutation,Google,Greedy,431,,"by now, you are given a secret signature consisting of character 'd' and 'i'. 'd' represents a decreasing relationship between two numbers, 'i' represents an increasing relationship between two numbers. and our secret signature was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). for example, the secret signature ""di"" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the ""di"" secret signature. on the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given secret signature in the input.","input: ""i"" output: [1,2] explanation: [1,2] is the only legal initial spectial string can construct secret signature ""i"", where the number 1 and 2 construct an increasing relationship. example 2: input: ""di"" output: [2,1,3] explanation: both [2,1,3] and [3,1,2] can construct the secret signature ""di"", but since we want to find the one with the smallest lexicographical permutation, you need to output [2,1,3] note: the input string will only contain the character 'd' and 'i'. the length of input string is a positive integer and will not exceed 10,000",,
485,Max Consecutive Ones,"Given a binary array, find the maximum number of consecutive 1s in this array.


Example 1:
Input: [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s.

    The maximum number of consecutive 1s is 3.

Note:
The input array will only contain `0` and `1`.

The length of input array is a positive integer and will not exceed 10,000",Easy,https://leetcode.com/problems/max-consecutive-ones,"Google,Amazon",Array,1182,"[Max Consecutive Ones II, /problems/max-consecutive-ones-ii/, Medium], [Max Consecutive Ones III, /problems/max-consecutive-ones-iii/, Medium], [Consecutive Characters, /problems/consecutive-characters/, Easy]","given a binary array, find the maximum number of consecutive 1s in this array.","input: [1,1,0,1,1,1] output: 3 explanation: the first two digits or the last three digits are consecutive 1s. the maximum number of consecutive 1s is 3. note: the input array will only contain `0` and `1`. the length of input array is a positive integer and will not exceed 10,000",,
486,Predict the Winner,"Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.

Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.


Example 1:
Input: [1, 5, 2]
Output: False
Explanation: Initially, player 1 can choose between 1 and 2. 
If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). 
So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. 
Hence, player 1 will never be the winner and you need to return False.


Example 2:
Input: [1, 5, 233, 7]
Output: True
Explanation: Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.

Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.


Constraints:
1 <= length of the array <= 20.

Any scores in the given array are non-negative integers and will not exceed 10,000,000.

If the scores of both players are equal, then player 1 is still the winner.",Medium,https://leetcode.com/problems/predict-the-winner,"Google,Uber,Amazon","Dynamic Programming,Minimax",1874,"[Can I Win, /problems/can-i-win/, Medium]","given an array of scores that are non-negative integers. player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. each time a player picks a number, that number will not be available for the next player. this continues until all the scores have been chosen. the player with the maximum score wins. given an array of scores, predict whether player 1 is the winner. you can assume each player plays to maximize his score.","input: [1, 5, 2] output: false explanation: initially, player 1 can choose between 1 and 2. if he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. if player 2 chooses 5, then player 1 will be left with 1 (or 2). so, final score of player 1 is 1 + 2 = 3, and player 2 is 5. hence, player 1 will never be the winner and you need to return false. example 2: input: [1, 5, 233, 7] output: true explanation: player 1 first chooses 1. then player 2 have to choose between 5 and 7. no matter which number player 2 choose, player 1 can choose 233. finally, player 1 has more score (234) than player 2 (12), so you need to return true representing player1 can win.","1 <= length of the array <= 20. any scores in the given array are non-negative integers and will not exceed 10,000,000. if the scores of both players are equal, then player 1 is still the winner.",
487,Max Consecutive Ones II,"Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.


Example 1:
Input: [1,0,1,1,0]
Output: 4
Explanation: Flip the first zero will get the the maximum number of consecutive 1s.

    After flipping, the maximum number of consecutive 1s is 4.

Note:
The input array will only contain `0` and `1`.

The length of input array is a positive integer and will not exceed 10,000
Follow up:
What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?",Medium,https://leetcode.com/problems/max-consecutive-ones-ii,"Yandex,Zillow",Two Pointers,692,"[Max Consecutive Ones, /problems/max-consecutive-ones/, Easy], [Max Consecutive Ones III, /problems/max-consecutive-ones-iii/, Medium]","given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.","input: [1,0,1,1,0] output: 4 explanation: flip the first zero will get the the maximum number of consecutive 1s. after flipping, the maximum number of consecutive 1s is 4. note: the input array will only contain `0` and `1`. the length of input array is a positive integer and will not exceed 10,000",,"what if the input numbers come in one by one as an infinite stream? in other words, you can't store all numbers coming from the stream as it's too large to hold in memory. could you solve it efficiently?"
488,Zuma Game,"Think about Zuma Game. You have a row of balls on the table, colored red(R), yellow(Y), blue(B), green(G), and white(W). You also have several balls in your hand.

Each time, you may choose a ball in your hand, and insert it into the row (including the leftmost place and rightmost place). Then, if there is a group of 3 or more balls in the same color touching, remove these balls. Keep doing this until no more balls can be removed.

Find the minimal balls you have to insert to remove all the balls on the table. If you cannot remove all the balls, output -1.


Example 1:
Input: board = ""WRRBBW"", hand = ""RB""
Output: -1
Explanation: WRRBBW -> WRR[R]BBW -> WBBW -> WBB[B]W -> WW

Example 2:
Input: board = ""WWRRBBWW"", hand = ""WRBRW""
Output: 2
Explanation: WWRRBBWW -> WWRR[R]BBWW -> WWBBWW -> WWBB[B]WW -> WWWW -> empty

Example 3:
Input: board = ""G"", hand = ""GGGGG""
Output: 2
Explanation: G -> G[G] -> GG[G] -> empty 

Example 4:
Input: board = ""RBYYBBRRB"", hand = ""YRBGB""
Output: 3
Explanation: RBYYBBRRB -> RBYY[Y]BBRRB -> RBBBRRB -> RRRB -> B -> B[B] -> BB[B] -> empty 

Constraints:
You may assume that the initial row of balls on the table won’t have any 3 or more consecutive balls with the same color.

`1 <= board.length <= 16`
`1 <= hand.length <= 5`
Both input strings will be non-empty and only contain characters 'R','Y','B','G','W'.",Hard,https://leetcode.com/problems/zuma-game,"Salesforce,Bloomberg",Depth-first Search,277,,"think about zuma game. you have a row of balls on the table, colored red(r), yellow(y), blue(b), green(g), and white(w). you also have several balls in your hand. each time, you may choose a ball in your hand, and insert it into the row (including the leftmost place and rightmost place). then, if there is a group of 3 or more balls in the same color touching, remove these balls. keep doing this until no more balls can be removed. find the minimal balls you have to insert to remove all the balls on the table. if you cannot remove all the balls, output -1.","input: board = ""wrrbbw"", hand = ""rb"" output: -1 explanation: wrrbbw -> wrr[r]bbw -> wbbw -> wbb[b]w -> ww example 2: input: board = ""wwrrbbww"", hand = ""wrbrw"" output: 2 explanation: wwrrbbww -> wwrr[r]bbww -> wwbbww -> wwbb[b]ww -> wwww -> empty example 3: input: board = ""g"", hand = ""ggggg"" output: 2 explanation: g -> g[g] -> gg[g] -> empty example 4: input: board = ""rbyybbrrb"", hand = ""yrbgb"" output: 3 explanation: rbyybbrrb -> rbyy[y]bbrrb -> rbbbrrb -> rrrb -> b -> b[b] -> bb[b] -> empty","you may assume that the initial row of balls on the table won’t have any 3 or more consecutive balls with the same color. `1 <= board.length <= 16` `1 <= hand.length <= 5` both input strings will be non-empty and only contain characters 'r','y','b','g','w'.",
489,Robot Room Cleaner,"Given a robot cleaner in a room modeled as a grid.

Each cell in the grid can be empty or blocked.

The robot cleaner with 4 given APIs can move forward, turn left or turn right. Each turn it made is 90 degrees.

When it tries to move into a blocked cell, its bumper sensor detects the obstacle and it stays on the current cell.

Design an algorithm to clean the entire room using only the 4 given APIs shown below.

interface Robot {
  // returns true if next cell is open and robot moves into the cell.

  // returns false if next cell is obstacle and robot stays on the current cell.

  boolean move();
  // Robot will stay on the same cell after calling turnLeft/turnRight.

  // Each turn will be 90 degrees.

  void turnLeft();
  void turnRight();
  // Clean the current cell.

  void clean();
}

Example:
Input:
room = [
  [1,1,1,1,1,0,1,1],
  [1,1,1,1,1,0,1,1],
  [1,0,1,1,1,1,1,1],
  [0,0,0,1,0,0,0,0],
  [1,1,1,1,1,1,1,1]
],
row = 1,
col = 3
Explanation:
All grids in the room are marked by either 0 or 1.

0 means the cell is blocked, while 1 means the cell is accessible.

The robot initially starts at the position of row=1, col=3.

From the top left corner, its position is one row below and three columns right.

Notes:
The input is only given to initialize the room and the robot's position internally. You must solve this problem ""blindfolded"". In other words, you must control the robot using only the mentioned 4 APIs, without knowing the room layout and the initial robot's position.

The robot's initial position will always be in an accessible cell.

The initial direction of the robot will be facing up.

All accessible cells are connected, which means the all cells marked as 1 will be accessible by the robot.

Assume all four edges of the grid are all surrounded by wall.",Hard,https://leetcode.com/problems/robot-room-cleaner,"Facebook,Google,Amazon",Depth-first Search,1478,"[Walls and Gates, /problems/walls-and-gates/, Medium], [Shortest Path in a Hidden Grid, /problems/shortest-path-in-a-hidden-grid/, Medium], [Minimum Path Cost in a Hidden Grid, /problems/minimum-path-cost-in-a-hidden-grid/, Medium]","given a robot cleaner in a room modeled as a grid. each cell in the grid can be empty or blocked. the robot cleaner with 4 given apis can move forward, turn left or turn right. each turn it made is 90 degrees. when it tries to move into a blocked cell, its bumper sensor detects the obstacle and it stays on the current cell. design an algorithm to clean the entire room using only the 4 given apis shown below. interface robot { // returns true if next cell is open and robot moves into the cell. // returns false if next cell is obstacle and robot stays on the current cell. boolean move(); // robot will stay on the same cell after calling turnleft/turnright. // each turn will be 90 degrees. void turnleft(); void turnright(); // clean the current cell. void clean(); }","input: room = [ [1,1,1,1,1,0,1,1], [1,1,1,1,1,0,1,1], [1,0,1,1,1,1,1,1], [0,0,0,1,0,0,0,0], [1,1,1,1,1,1,1,1] ], row = 1, col = 3 explanation: all grids in the room are marked by either 0 or 1. 0 means the cell is blocked, while 1 means the cell is accessible. the robot initially starts at the position of row=1, col=3. from the top left corner, its position is one row below and three columns right. notes: the input is only given to initialize the room and the robot's position internally. you must solve this problem ""blindfolded"". in other words, you must control the robot using only the mentioned 4 apis, without knowing the room layout and the initial robot's position. the robot's initial position will always be in an accessible cell. the initial direction of the robot will be facing up. all accessible cells are connected, which means the all cells marked as 1 will be accessible by the robot. assume all four edges of the grid are all surrounded by wall.",,
490,The Maze,"There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.

Given the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return `true` if the ball can stop at the destination, otherwise return `false`.

You may assume that the borders of the maze are all walls (see examples).


Example 1:
Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]
Output: true
Explanation: One possible way is : left -> down -> left -> down -> right -> down -> right.


Example 2:
Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]
Output: false
Explanation: There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.


Example 3:
Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]
Output: false

Constraints:
`m == maze.length`
`n == maze[i].length`
`1 <= m, n <= 100`
`maze[i][j]` is `0` or `1`.

`start.length == 2`
`destination.length == 2`
`0 <= startrow, destinationrow <= m`
`0 <= startcol, destinationcol <= n`
Both the ball and the destination exist in an empty space, and they will not be in the same position initially.

The maze contains at least 2 empty spaces.",Medium,https://leetcode.com/problems/the-maze,"Amazon,Microsoft,Bloomberg","Depth-first Search,Breadth-first Search",983,"[The Maze III, /problems/the-maze-iii/, Hard], [The Maze II, /problems/the-maze-ii/, Medium]","there is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). the ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. when the ball stops, it could choose the next direction. given the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return `true` if the ball can stop at the destination, otherwise return `false`. you may assume that the borders of the maze are all walls (see examples).","input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4] output: true explanation: one possible way is : left -> down -> left -> down -> right -> down -> right. example 2: input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2] output: false explanation: there is no way for the ball to stop at the destination. notice that you can pass through the destination but you cannot stop there. example 3: input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1] output: false","`m == maze.length` `n == maze[i].length` `1 <= m, n <= 10^0` `maze[i][j]` is `0` or `1`. `start.length == 2` `destination.length == 2` `0 <= startrow, destinationrow <= m` `0 <= startcol, destinationcol <= n` both the ball and the destination exist in an empty space, and they will not be in the same position initially. the maze contains at least 2 empty spaces.",
491,Increasing Subsequences,"Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2.


Example:
Input: [4, 6, 7, 7]
Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]

Constraints:
The length of the given array will not exceed 15.

The range of integer in the given array is [-100,100].

The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.",Medium,https://leetcode.com/problems/increasing-subsequences,Google,Depth-first Search,959,"[Maximum Length of Pair Chain, /problems/maximum-length-of-pair-chain/, Medium]","given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2.","input: [4, 6, 7, 7] output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]","the length of the given array will not exceed 15. the range of integer in the given array is [-10^0,10^0]. the given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.",
492,Construct the Rectangle,"A web developer needs to know how to design a web page's size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:
The area of the rectangular web page you designed must equal to the given target area.

The width `W` should not be larger than the length `L`, which means `L >= W`.

The difference between length `L` and width `W` should be as small as possible.

Return an array `[L, W]` where `L` and `W` are the length and width of the web page you designed in sequence.


Example 1:
Input: area = 4
Output: [2,2]
Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. 
But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.


Example 2:
Input: area = 37
Output: [37,1]

Example 3:
Input: area = 122122
Output: [427,286]

Constraints:
`1 <= area <= 107`",Easy,https://leetcode.com/problems/construct-the-rectangle,,,265,,"a web developer needs to know how to design a web page's size. so, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length l and width w satisfy the following requirements: the area of the rectangular web page you designed must equal to the given target area. the width `w` should not be larger than the length `l`, which means `l >= w`. the difference between length `l` and width `w` should be as small as possible. return an array `[l, w]` where `l` and `w` are the length and width of the web page you designed in sequence.","input: area = 4 output: [2,2] explanation: the target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. but according to requirement 2, [1,4] is illegal; according to requirement 3, [4,1] is not optimal compared to [2,2]. so the length l is 2, and the width w is 2. example 2: input: area = 37 output: [37,1] example 3: input: area = 122122 output: [427,286]",`1 <= area <= 10^7`,
493,Reverse Pairs,"Given an array `nums`, we call `(i, j)` an important reverse pair if `i < j` and `nums[i] > 2*nums[j]`.

You need to return the number of important reverse pairs in the given array.


Example1:
Input: [1,3,2,3,1]
Output: 2

Example2:
Input: [2,4,3,5,1]
Output: 3
Note:
The length of the given array will not exceed `50,000`.

All the numbers in the input array are in the range of 32-bit integer.",Hard,https://leetcode.com/problems/reverse-pairs,"ByteDance,Amazon,Google","Binary Search,Divide and Conquer,Sort,Binary Indexed Tree,Segment Tree",1330,"[Count of Smaller Numbers After Self, /problems/count-of-smaller-numbers-after-self/, Hard], [Count of Range Sum, /problems/count-of-range-sum/, Hard]","given an array `nums`, we call `(i, j)` an important reverse pair if `i < j` and `nums[i] > 2*nums[j]`. you need to return the number of important reverse pairs in the given array.","input: [1,3,2,3,1] output: 2 example2: input: [2,4,3,5,1] output: 3 note: the length of the given array will not exceed `50,000`. all the numbers in the input array are in the range of 32-bit integer.",,
494,Target Sum,"You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols `+` and `-`. For each integer, you should choose one from `+` and `-` as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.


Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 
-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
There are 5 ways to assign symbols to make the sum of nums be target 3.


Constraints:
The length of the given array is positive and will not exceed 20.

The sum of elements in the given array will not exceed 1000.

Your output answer is guaranteed to be fitted in a 32-bit integer.",Medium,https://leetcode.com/problems/target-sum,"Facebook,Amazon,Adobe","Dynamic Programming,Depth-first Search",3937,"[Expression Add Operators, /problems/expression-add-operators/, Hard]","you are given a list of non-negative integers, a1, a2, ..., an, and a target, s. now you have 2 symbols `+` and `-`. for each integer, you should choose one from `+` and `-` as its new symbol. find out how many ways to assign symbols to make sum of integers equal to target s.","input: nums is [1, 1, 1, 1, 1], s is 3. output: 5 explanation: -1+1+1+1+1 = 3 +1-1+1+1+1 = 3 +1+1-1+1+1 = 3 +1+1+1-1+1 = 3 +1+1+1+1-1 = 3 there are 5 ways to assign symbols to make the sum of nums be target 3.",the length of the given array is positive and will not exceed 20. the sum of elements in the given array will not exceed 1000. your output answer is guaranteed to be fitted in a 32-bit integer.,
495,Teemo Attacking,"In LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking ascending time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned condition.

You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.


Example 1:
Input: [1,4], 2
Output: 4
Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. 
This poisoned status will last 2 seconds until the end of time point 2. 
And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. 
So you finally need to output 4.


Example 2:
Input: [1,2], 2
Output: 3
Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. 
This poisoned status will last 2 seconds until the end of time point 2. 
However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. 
Since the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. 
So you finally need to output 3.

Note:
You may assume the length of given time series array won't exceed 10000.

You may assume the numbers in the Teemo's attacking time series and his poisoning time duration per attacking are non-negative integers, which won't exceed 10,000,000.",Medium,https://leetcode.com/problems/teemo-attacking,Salesforce,Array,519,"[Merge Intervals, /problems/merge-intervals/, Medium], [Can Place Flowers, /problems/can-place-flowers/, Easy], [Dota2 Senate, /problems/dota2-senate/, Medium]","in lol world, there is a hero called teemo and his attacking can make his enemy ashe be in poisoned condition. now, given the teemo's attacking ascending time series towards ashe and the poisoning time duration per teemo's attacking, you need to output the total time that ashe is in poisoned condition. you may assume that teemo attacks at the very beginning of a specific time point, and makes ashe be in poisoned condition immediately.","input: [1,4], 2 output: 4 explanation: at time point 1, teemo starts attacking ashe and makes ashe be poisoned immediately. this poisoned status will last 2 seconds until the end of time point 2. and at time point 4, teemo attacks ashe again, and causes ashe to be in poisoned status for another 2 seconds. so you finally need to output 4. example 2: input: [1,2], 2 output: 3 explanation: at time point 1, teemo starts attacking ashe and makes ashe be poisoned. this poisoned status will last 2 seconds until the end of time point 2. however, at the beginning of time point 2, teemo attacks ashe again who is already in poisoned status. since the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. so you finally need to output 3. note: you may assume the length of given time series array won't exceed 10000. you may assume the numbers in the teemo's attacking time series and his poisoning time duration per attacking are non-negative integers, which won't exceed 10,000,000.",,
496,Next Greater Element I,"You are given two integer arrays `nums1` and `nums2` both of unique elements, where `nums1` is a subset of `nums2`.

Find all the next greater numbers for `nums1`'s elements in the corresponding places of `nums2`.

The Next Greater Number of a number `x` in `nums1` is the first greater number to its right in `nums2`. If it does not exist, return `-1` for this number.


Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation:
For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.

For number 1 in the first array, the next greater number for it in the second array is 3.

For number 2 in the first array, there is no next greater number for it in the second array, so output -1.


Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation:
For number 2 in the first array, the next greater number for it in the second array is 3.

For number 4 in the first array, there is no next greater number for it in the second array, so output -1.


Constraints:
`1 <= nums1.length <= nums2.length <= 1000`
`0 <= nums1[i], nums2[i] <= 104`
All integers in `nums1` and `nums2` are unique.

All the integers of `nums1` also appear in `nums2`.

Follow up: Could you find an `O(nums1.length + nums2.length)` solution?",Easy,https://leetcode.com/problems/next-greater-element-i,"Amazon,Microsoft",Stack,2367,"[Next Greater Element II, /problems/next-greater-element-ii/, Medium], [Next Greater Element III, /problems/next-greater-element-iii/, Medium], [Daily Temperatures, /problems/daily-temperatures/, Medium]","you are given two integer arrays `nums1` and `nums2` both of unique elements, where `nums1` is a subset of `nums2`. find all the next greater numbers for `nums1`'s elements in the corresponding places of `nums2`. the next greater number of a number `x` in `nums1` is the first greater number to its right in `nums2`. if it does not exist, return `-1` for this number.","input: nums1 = [4,1,2], nums2 = [1,3,4,2] output: [-1,3,-1] explanation: for number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1. for number 1 in the first array, the next greater number for it in the second array is 3. for number 2 in the first array, there is no next greater number for it in the second array, so output -1. example 2: input: nums1 = [2,4], nums2 = [1,2,3,4] output: [3,-1] explanation: for number 2 in the first array, the next greater number for it in the second array is 3. for number 4 in the first array, there is no next greater number for it in the second array, so output -1.","`1 <= nums1.length <= nums2.length <= 1000` `0 <= nums1[i], nums2[i] <= 10^4` all integers in `nums1` and `nums2` are unique. all the integers of `nums1` also appear in `nums2`.",could you find an `o(nums1.length + nums2.length)` solution?
497,Random Point in Non-overlapping Rectangles,"Given a list of non-overlapping axis-aligned rectangles `rects`, write a function `pick` which randomly and uniformily picks an integer point in the space covered by the rectangles.

Note:
An integer point is a point that has integer coordinates. 
A point on the perimeter of a rectangle is included in the space covered by the rectangles. 
`i`th rectangle = `rects[i]` = `[x1,y1,x2,y2]`, where `[x1, y1]` are the integer coordinates of the bottom-left corner, and `[x2, y2]` are the integer coordinates of the top-right corner.

length and width of each rectangle does not exceed `2000`.

`1 <= rects.length <= 100`
`pick` return a point as an array of integer coordinates `[p_x, p_y]`
`pick` is called at most `10000` times.


Example 1:
Input: 
[""Solution"",""pick"",""pick"",""pick""]
[[[[1,1,5,5]]],[],[],[]]
Output: 
[null,[4,1],[4,1],[3,3]]

Example 2:
Input: 
[""Solution"",""pick"",""pick"",""pick"",""pick"",""pick""]
[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]
Output: 
[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]
Explanation of Input Syntax:
The input is two lists: the subroutines called and their arguments. `Solution`'s constructor has one argument, the array of rectangles `rects`. `pick` has no arguments. Arguments are always wrapped with a list, even if there aren't any.",Medium,https://leetcode.com/problems/random-point-in-non-overlapping-rectangles,Google,"Binary Search,Random",329,"[Random Pick with Weight, /problems/random-pick-with-weight/, Medium], [Generate Random Point in a Circle, /problems/generate-random-point-in-a-circle/, Medium]","given a list of non-overlapping axis-aligned rectangles `rects`, write a function `pick` which randomly and uniformily picks an integer point in the space covered by the rectangles. note: an integer point is a point that has integer coordinates. a point on the perimeter of a rectangle is included in the space covered by the rectangles. `i`th rectangle = `rects[i]` = `[x1,y1,x2,y2]`, where `[x1, y1]` are the integer coordinates of the bottom-left corner, and `[x2, y2]` are the integer coordinates of the top-right corner. length and width of each rectangle does not exceed `2000`. `1 <= rects.length <= 100` `pick` return a point as an array of integer coordinates `[p_x, p_y]` `pick` is called at most `10000` times.","input: [""solution"",""pick"",""pick"",""pick""] [[[[1,1,5,5]]],[],[],[]] output: [null,[4,1],[4,1],[3,3]] example 2: input: [""solution"",""pick"",""pick"",""pick"",""pick"",""pick""] [[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]] output: [null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]] explanation of input syntax: the input is two lists: the subroutines called and their arguments. `solution`'s constructor has one argument, the array of rectangles `rects`. `pick` has no arguments. arguments are always wrapped with a list, even if there aren't any.",,
498,Diagonal Traverse,"Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.


Example:
Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output:  [1,2,4,7,5,3,6,8,9]
Explanation:
Note:
The total number of elements of the given matrix will not exceed 10,000.",Medium,https://leetcode.com/problems/diagonal-traverse,"Facebook,Amazon",,1221,,"given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in diagonal order as shown in the below image.","input: [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ] output: [1,2,4,7,5,3,6,8,9] explanation: note: the total number of elements of the given matrix will not exceed 10,000.",,
499,The Maze III,"There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a hole in this maze. The ball will drop into the hole if it rolls onto the hole.

Given the `m x n` `maze`, the ball's position `ball` and the hole's position `hole`, where `ball = [ballrow, ballcol]` and `hole = [holerow, holecol]`, return a string `instructions` of all the instructions that the ball should follow to drop in the hole with the shortest distance possible. If there are multiple valid instructions, return the lexicographically minimum one. If the ball can't drop in the hole, return `""impossible""`.

If there is a way for the ball to drop in the hole, the answer `instructions` should contain the characters `'u'` (i.e., up), `'d'` (i.e., down), `'l'` (i.e., left), and `'r'` (i.e., right).

The distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).

You may assume that the borders of the maze are all walls (see examples).


Example 1:
Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [0,1]
Output: ""lul""
Explanation: There are two shortest ways for the ball to drop into the hole.

The first way is left -> up -> left, represented by ""lul"".

The second way is up -> left, represented by 'ul'.

Both ways have shortest distance 6, but the first way is lexicographically smaller because 'l' < 'u'. So the output is ""lul"".


Example 2:
Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [3,0]
Output: ""impossible""
Explanation: The ball cannot reach the hole.


Example 3:
Input: maze = [[0,0,0,0,0,0,0],[0,0,1,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,1]], ball = [0,4], hole = [3,5]
Output: ""dldr""

Constraints:
`m == maze.length`
`n == maze[i].length`
`1 <= m, n <= 100`
`maze[i][j]` is `0` or `1`.

`ball.length == 2`
`hole.length == 2`
`0 <= ballrow, holerow <= m`
`0 <= ballcol, holecol <= n`
Both the ball and the hole exist in an empty space, and they will not be in the same position initially.

The maze contains at least 2 empty spaces.",Hard,https://leetcode.com/problems/the-maze-iii,Google,"Depth-first Search,Breadth-first Search",241,"[The Maze, /problems/the-maze/, Medium], [The Maze II, /problems/the-maze-ii/, Medium]","there is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). the ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. when the ball stops, it could choose the next direction. there is also a hole in this maze. the ball will drop into the hole if it rolls onto the hole. given the `m x n` `maze`, the ball's position `ball` and the hole's position `hole`, where `ball = [ballrow, ballcol]` and `hole = [holerow, holecol]`, return a string `instructions` of all the instructions that the ball should follow to drop in the hole with the shortest distance possible. if there are multiple valid instructions, return the lexicographically minimum one. if the ball can't drop in the hole, return `""impossible""`. if there is a way for the ball to drop in the hole, the answer `instructions` should contain the characters `'u'` (i.e., up), `'d'` (i.e., down), `'l'` (i.e., left), and `'r'` (i.e., right). the distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included). you may assume that the borders of the maze are all walls (see examples).","input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [0,1] output: ""lul"" explanation: there are two shortest ways for the ball to drop into the hole. the first way is left -> up -> left, represented by ""lul"". the second way is up -> left, represented by 'ul'. both ways have shortest distance 6, but the first way is lexicographically smaller because 'l' < 'u'. so the output is ""lul"". example 2: input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [3,0] output: ""impossible"" explanation: the ball cannot reach the hole. example 3: input: maze = [[0,0,0,0,0,0,0],[0,0,1,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,1]], ball = [0,4], hole = [3,5] output: ""dldr""","`m == maze.length` `n == maze[i].length` `1 <= m, n <= 10^0` `maze[i][j]` is `0` or `1`. `ball.length == 2` `hole.length == 2` `0 <= ballrow, holerow <= m` `0 <= ballcol, holecol <= n` both the ball and the hole exist in an empty space, and they will not be in the same position initially. the maze contains at least 2 empty spaces.",
500,Keyboard Row,"Given an array of strings `words`, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.

In the American keyboard:
the first row consists of the characters `""qwertyuiop""`,
the second row consists of the characters `""asdfghjkl""`, and
the third row consists of the characters `""zxcvbnm""`.


Example 1:
Input: words = [""Hello"",""Alaska"",""Dad"",""Peace""]
Output: [""Alaska"",""Dad""]

Example 2:
Input: words = [""omk""]
Output: []

Example 3:
Input: words = [""adsdf"",""sfd""]
Output: [""adsdf"",""sfd""]

Constraints:
`1 <= words.length <= 20`
`1 <= words[i].length <= 100`
`words[i]` consists of English letters (both lowercase and uppercase).",Easy,https://leetcode.com/problems/keyboard-row,Mathworks,Hash Table,645,,"given an array of strings `words`, return the words that can be typed using letters of the alphabet on only one row of american keyboard like the image below. in the american keyboard: the first row consists of the characters `""qwertyuiop""`, the second row consists of the characters `""asdfghjkl""`, and the third row consists of the characters `""zxcvbnm""`.","input: words = [""hello"",""alaska"",""dad"",""peace""] output: [""alaska"",""dad""] example 2: input: words = [""omk""] output: [] example 3: input: words = [""adsdf"",""sfd""] output: [""adsdf"",""sfd""]",`1 <= words.length <= 20` `1 <= words[i].length <= 10^0` `words[i]` consists of english letters (both lowercase and uppercase).,
501,Find Mode in Binary Search Tree,"Given the `root` of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.

If the tree has more than one mode, return them in any order.

Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than or equal to the node's key.

The right subtree of a node contains only nodes with keys greater than or equal to the node's key.

Both the left and right subtrees must also be binary search trees.


Example 1:
Input: root = [1,null,2,2]
Output: [2]

Example 2:
Input: root = [0]
Output: [0]

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-105 <= Node.val <= 105`
Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).",Easy,https://leetcode.com/problems/find-mode-in-binary-search-tree,Google,Tree,1303,"[Validate Binary Search Tree, /problems/validate-binary-search-tree/, Medium]","given the `root` of a binary search tree (bst) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it. if the tree has more than one mode, return them in any order. assume a bst is defined as follows: the left subtree of a node contains only nodes with keys less than or equal to the node's key. the right subtree of a node contains only nodes with keys greater than or equal to the node's key. both the left and right subtrees must also be binary search trees.","input: root = [1,null,2,2] output: [2] example 2: input: root = [0] output: [0]","the number of nodes in the tree is in the range `[1, 10^4]`. `-10^5 <= node.val <= 10^5`",could you do that without using any extra space? (assume that the implicit stack space incurred due to recursion does not count).
502,IPO,"Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects. 
You are given several projects. For each project i, it has a pure profit Pi and a minimum capital of Ci is needed to start the corresponding project. Initially, you have W capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.

To sum up, pick a list of at most k distinct projects from given projects to maximize your final capital, and output your final maximized capital.


Example 1:
Input: k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].
Output: 4
Explanation: Since your initial capital is 0, you can only start the project indexed 0.

             After finishing it you will obtain profit 1 and your capital becomes 1.

             With capital 1, you can either start the project indexed 1 or the project indexed 2.

             Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.

             Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.

Note:
You may assume all numbers in the input are non-negative integers.

The length of Profits array and Capital array will not exceed 50,000.

The answer is guaranteed to fit in a 32-bit signed integer.",Hard,https://leetcode.com/problems/ipo,Amazon,"Heap,Greedy",502,,"suppose leetcode will start its ipo soon. in order to sell a good price of its shares to venture capital, leetcode would like to work on some projects to increase its capital before the ipo. since it has limited resources, it can only finish at most k distinct projects before the ipo. help leetcode design the best way to maximize its total capital after finishing at most k distinct projects. you are given several projects. for each project i, it has a pure profit pi and a minimum capital of ci is needed to start the corresponding project. initially, you have w capital. when you finish a project, you will obtain its pure profit and the profit will be added to your total capital. to sum up, pick a list of at most k distinct projects from given projects to maximize your final capital, and output your final maximized capital.","input: k=2, w=0, profits=[1,2,3], capital=[0,1,1]. output: 4 explanation: since your initial capital is 0, you can only start the project indexed 0. after finishing it you will obtain profit 1 and your capital becomes 1. with capital 1, you can either start the project indexed 1 or the project indexed 2. since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital. therefore, output the final maximized capital, which is 0 + 1 + 3 = 4. note: you may assume all numbers in the input are non-negative integers. the length of profits array and capital array will not exceed 50,000. the answer is guaranteed to fit in a 32-bit signed integer.",,
503,Next Greater Element II,"Given a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return the next greater number for every element in `nums`.

The next greater number of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return `-1` for this number.


Example 1:
Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.


Example 2:
Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]

Constraints:
`1 <= nums.length <= 104`
`-109 <= nums[i] <= 109`",Medium,https://leetcode.com/problems/next-greater-element-ii,"Amazon,Bloomberg,Apple,Facebook",Stack,2347,"[Next Greater Element I, /problems/next-greater-element-i/, Easy], [Next Greater Element III, /problems/next-greater-element-iii/, Medium]","given a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return the next greater number for every element in `nums`. the next greater number of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. if it doesn't exist, return `-1` for this number.","input: nums = [1,2,1] output: [2,-1,2] explanation: the first 1's next greater number is 2; the number 2 can't find next greater number. the second 1's next greater number needs to search circularly, which is also 2. example 2: input: nums = [1,2,3,4,3] output: [2,3,4,-1,4]",`1 <= nums.length <= 10^4` `-10^9 <= nums[i] <= 10^9`,
504,Base 7,"Given an integer, return its base 7 string representation.


Example 1:
Input: 100
Output: ""202""

Example 2:
Input: -7
Output: ""-10""
Note:
The input will be in range of [-1e7, 1e7].",Easy,https://leetcode.com/problems/base-7,Garena,,302,,"given an integer, return its base 7 string representation.","input: 100 output: ""202"" example 2: input: -7 output: ""-10"" note: the input will be in range of [-1e7, 1e7].",,
505,The Maze II,"There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.

Given the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return the shortest distance for the ball to stop at the destination. If the ball cannot stop at `destination`, return `-1`.

The distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).

You may assume that the borders of the maze are all walls (see examples).


Example 1:
Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]
Output: 12
Explanation: One possible way is : left -> down -> left -> down -> right -> down -> right.

The length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.


Example 2:
Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]
Output: -1
Explanation: There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.


Example 3:
Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]
Output: -1

Constraints:
`m == maze.length`
`n == maze[i].length`
`1 <= m, n <= 100`
`maze[i][j]` is `0` or `1`.

`start.length == 2`
`destination.length == 2`
`0 <= startrow, destinationrow <= m`
`0 <= startcol, destinationcol <= n`
Both the ball and the destination exist in an empty space, and they will not be in the same position initially.

The maze contains at least 2 empty spaces.",Medium,https://leetcode.com/problems/the-maze-ii,"Amazon,Facebook,Google,Snapchat,Oracle","Depth-first Search,Breadth-first Search",722,"[The Maze, /problems/the-maze/, Medium], [The Maze III, /problems/the-maze-iii/, Hard]","there is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). the ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. when the ball stops, it could choose the next direction. given the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return the shortest distance for the ball to stop at the destination. if the ball cannot stop at `destination`, return `-1`. the distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included). you may assume that the borders of the maze are all walls (see examples).","input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4] output: 12 explanation: one possible way is : left -> down -> left -> down -> right -> down -> right. the length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12. example 2: input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2] output: -1 explanation: there is no way for the ball to stop at the destination. notice that you can pass through the destination but you cannot stop there. example 3: input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1] output: -1","`m == maze.length` `n == maze[i].length` `1 <= m, n <= 10^0` `maze[i][j]` is `0` or `1`. `start.length == 2` `destination.length == 2` `0 <= startrow, destinationrow <= m` `0 <= startcol, destinationcol <= n` both the ball and the destination exist in an empty space, and they will not be in the same position initially. the maze contains at least 2 empty spaces.",
506,Relative Ranks,"You are given an integer array `score` of size `n`, where `score[i]` is the score of the `ith` athlete in a competition. All the scores are guaranteed to be unique.

The athletes are placed based on their scores, where the `1st` place athlete has the highest score, the `2nd` place athlete has the `2nd` highest score, and so on. The placement of each athlete determines their rank:
The `1st` place athlete's rank is `""Gold Medal""`.

The `2nd` place athlete's rank is `""Silver Medal""`.

The `3rd` place athlete's rank is `""Bronze Medal""`.

For the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete's rank is `""x""`).

Return an array `answer` of size `n` where `answer[i]` is the rank of the `ith` athlete.


Example 1:
Input: score = [5,4,3,2,1]
Output: [""Gold Medal"",""Silver Medal"",""Bronze Medal"",""4"",""5""]
Explanation: The placements are [1st, 2nd, 3rd, 4th, 5th].


Example 2:
Input: score = [10,3,8,9,4]
Output: [""Gold Medal"",""5"",""Bronze Medal"",""Silver Medal"",""4""]
Explanation: The placements are [1st, 5th, 3rd, 2nd, 4th].


Constraints:
`n == score.length`
`1 <= n <= 104`
`0 <= score[i] <= 106`
All the values in `score` are unique.",Easy,https://leetcode.com/problems/relative-ranks,Google,,18,,"you are given an integer array `score` of size `n`, where `score[i]` is the score of the `ith` athlete in a competition. all the scores are guaranteed to be unique. the athletes are placed based on their scores, where the `1st` place athlete has the highest score, the `2nd` place athlete has the `2nd` highest score, and so on. the placement of each athlete determines their rank: the `1st` place athlete's rank is `""gold medal""`. the `2nd` place athlete's rank is `""silver medal""`. the `3rd` place athlete's rank is `""bronze medal""`. for the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete's rank is `""x""`). return an array `answer` of size `n` where `answer[i]` is the rank of the `ith` athlete.","input: score = [5,4,3,2,1] output: [""gold medal"",""silver medal"",""bronze medal"",""4"",""5""] explanation: the placements are [1st, 2nd, 3rd, 4th, 5th]. example 2: input: score = [10,3,8,9,4] output: [""gold medal"",""5"",""bronze medal"",""silver medal"",""4""] explanation: the placements are [1st, 5th, 3rd, 2nd, 4th].",`n == score.length` `1 <= n <= 10^4` `0 <= score[i] <= 10^6` all the values in `score` are unique.,
507,Perfect Number,"A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer `x` is an integer that can divide `x` evenly.

Given an integer `n`, return `true` if `n` is a perfect number, otherwise return `false`.


Example 1:
Input: num = 28
Output: true
Explanation: 28 = 1 + 2 + 4 + 7 + 14
1, 2, 4, 7, and 14 are all divisors of 28.


Example 2:
Input: num = 6
Output: true

Example 3:
Input: num = 496
Output: true

Example 4:
Input: num = 8128
Output: true

Example 5:
Input: num = 2
Output: false

Constraints:
`1 <= num <= 108`",Easy,https://leetcode.com/problems/perfect-number,Amazon,Math,373,"[Self Dividing Numbers, /problems/self-dividing-numbers/, Easy]","a perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. a divisor of an integer `x` is an integer that can divide `x` evenly. given an integer `n`, return `true` if `n` is a perfect number, otherwise return `false`.","input: num = 28 output: true explanation: 28 = 1 + 2 + 4 + 7 + 14 1, 2, 4, 7, and 14 are all divisors of 28. example 2: input: num = 6 output: true example 3: input: num = 496 output: true example 4: input: num = 8128 output: true example 5: input: num = 2 output: false",`1 <= num <= 10^8`,
508,Most Frequent Subtree Sum,"Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.


Examples 1
Input:
  5
 /  \
2   -3
return [2, -3, 4], since all the values happen only once, return all of them in any order.


Examples 2
Input:
  5
 /  \
2   -5
return [2], since 2 happens twice, however -5 only occur once.

Note:
You may assume the sum of values in any subtree is in the range of 32-bit signed integer.",Medium,https://leetcode.com/problems/most-frequent-subtree-sum,Amazon,"Hash Table,Tree",861,"[Subtree of Another Tree, /problems/subtree-of-another-tree/, Easy]","given the root of a tree, you are asked to find the most frequent subtree sum. the subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). so what is the most frequent subtree sum value? if there is a tie, return all the values with the highest frequency in any order. examples 1 input: 5 / \ 2 -3 return [2, -3, 4], since all the values happen only once, return all of them in any order. examples 2 input: 5 / \ 2 -5 return [2], since 2 happens twice, however -5 only occur once. note: you may assume the sum of values in any subtree is in the range of 32-bit signed integer.",,,
509,Fibonacci Number,"The Fibonacci numbers, commonly denoted `F(n)` form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is,
F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.

Given `n`, calculate `F(n)`.


Example 1:
Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.


Example 2:
Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.


Example 3:
Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.


Constraints:
`0 <= n <= 30`",Easy,https://leetcode.com/problems/fibonacci-number,"JPMorgan,Amazon,Google,Apple,Facebook",Array,1182,"[Climbing Stairs, /problems/climbing-stairs/, Easy], [Split Array into Fibonacci Sequence, /problems/split-array-into-fibonacci-sequence/, Medium], [Length of Longest Fibonacci Subsequence, /problems/length-of-longest-fibonacci-subsequence/, Medium], [N-th Tribonacci Number, /problems/n-th-tribonacci-number/, Easy]","the fibonacci numbers, commonly denoted `f(n)` form a sequence, called the fibonacci sequence, such that each number is the sum of the two preceding ones, starting from `0` and `1`. that is, f(0) = 0, f(1) = 1 f(n) = f(n - 1) + f(n - 2), for n > 1. given `n`, calculate `f(n)`.",input: n = 2 output: 1 explanation: f(2) = f(1) + f(0) = 1 + 0 = 1. example 2: input: n = 3 output: 2 explanation: f(3) = f(2) + f(1) = 1 + 1 = 2. example 3: input: n = 4 output: 3 explanation: f(4) = f(3) + f(2) = 2 + 1 = 3.,`0 <= n <= 30`,
510,Inorder Successor in BST II,"Given a `node` in a binary search tree, return the in-order successor of that node in the BST. If that node has no in-order successor, return `null`.

The successor of a `node` is the node with the smallest key greater than `node.val`.

You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for `Node`:
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}

Example 1:
Input: tree = [2,1,3], node = 1
Output: 2
Explanation: 1's in-order successor node is 2. Note that both the node and the return value is of Node type.


Example 2:
Input: tree = [5,3,6,2,4,null,null,1], node = 6
Output: null
Explanation: There is no in-order successor of the current node, so the answer is null.


Example 3:
Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15
Output: 17

Example 4:
Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13
Output: 15

Example 5:
Input: tree = [0], node = 0
Output: null

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-105 <= Node.val <= 105`
All Nodes will have unique values.

Follow up: Could you solve it without looking up any of the node's values?",Medium,https://leetcode.com/problems/inorder-successor-in-bst-ii,"Microsoft,Bloomberg",Tree,461,"[Inorder Successor in BST, /problems/inorder-successor-in-bst/, Medium]","given a `node` in a binary search tree, return the in-order successor of that node in the bst. if that node has no in-order successor, return `null`. the successor of a `node` is the node with the smallest key greater than `node.val`. you will have direct access to the node but not to the root of the tree. each node will have a reference to its parent node. below is the definition for `node`: class node { public int val; public node left; public node right; public node parent; }","input: tree = [2,1,3], node = 1 output: 2 explanation: 1's in-order successor node is 2. note that both the node and the return value is of node type. example 2: input: tree = [5,3,6,2,4,null,null,1], node = 6 output: null explanation: there is no in-order successor of the current node, so the answer is null. example 3: input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15 output: 17 example 4: input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13 output: 15 example 5: input: tree = [0], node = 0 output: null","the number of nodes in the tree is in the range `[1, 10^4]`. `-10^5 <= node.val <= 10^5` all nodes will have unique values.",could you solve it without looking up any of the node's values?
511,Game Play Analysis I,SQL Schema,Easy,https://leetcode.com/problems/game-play-analysis-i,GSN Games,,65,,sql schema,,,
512,Game Play Analysis II,SQL Schema,Easy,https://leetcode.com/problems/game-play-analysis-ii,GSN Games,,96,,sql schema,,,
513,Find Bottom Left Tree Value,"Given the `root` of a binary tree, return the leftmost value in the last row of the tree.


Example 1:
Input: root = [2,1,3]
Output: 1

Example 2:
Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-231 <= Node.val <= 231 - 1`",Medium,https://leetcode.com/problems/find-bottom-left-tree-value,"Bloomberg,Adobe","Tree,Depth-first Search,Breadth-first Search",1300,,"given the `root` of a binary tree, return the leftmost value in the last row of the tree.","input: root = [2,1,3] output: 1 example 2: input: root = [1,2,3,4,null,5,6,null,null,7] output: 7","the number of nodes in the tree is in the range `[1, 10^4]`. `-231 <= node.val <= 231 - 1`",
514,Freedom Trail,"In the video game Fallout 4, the quest ""Road to Freedom"" requires players to reach a metal dial called the ""Freedom Trail Ring"", and use the dial to spell a specific keyword in order to open the door.

Given a string ring, which represents the code engraved on the outer ring and another string key, which represents the keyword needs to be spelled. You need to find the minimum number of steps in order to spell all the characters in the keyword.

Initially, the first character of the ring is aligned at 12:00 direction. You need to spell all the characters in the string key one by one by rotating the ring clockwise or anticlockwise to make each character of the string key aligned at 12:00 direction and then by pressing the center button.

At the stage of rotating the ring to spell the key character key[i]:
You can rotate the ring clockwise or anticlockwise one place, which counts as 1 step. The final purpose of the rotation is to align one of the string ring's characters at the 12:00 direction, where this character must equal to the character key[i].

If the character key[i] has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you've finished all the spelling.


Example:
Input: ring = ""godding"", key = ""gd""
Output: 4
Explanation:
For the first key character 'g', since it is already in place, we just need 1 step to spell this character. 
For the second key character 'd', we need to rotate the ring ""godding"" anticlockwise by two steps to make it become ""ddinggo"".

Also, we need 1 more step for spelling.

So the final output is 4.

Note:
Length of both ring and key will be in range 1 to 100.

There are only lowercase letters in both strings and might be some duplcate characters in both strings.

It's guaranteed that string key could always be spelled by rotating the string ring.",Hard,https://leetcode.com/problems/freedom-trail,DE Shaw,"Divide and Conquer,Dynamic Programming,Depth-first Search",522,,"in the video game fallout 4, the quest ""road to freedom"" requires players to reach a metal dial called the ""freedom trail ring"", and use the dial to spell a specific keyword in order to open the door. given a string ring, which represents the code engraved on the outer ring and another string key, which represents the keyword needs to be spelled. you need to find the minimum number of steps in order to spell all the characters in the keyword. initially, the first character of the ring is aligned at 12:00 direction. you need to spell all the characters in the string key one by one by rotating the ring clockwise or anticlockwise to make each character of the string key aligned at 12:00 direction and then by pressing the center button. at the stage of rotating the ring to spell the key character key[i]: you can rotate the ring clockwise or anticlockwise one place, which counts as 1 step. the final purpose of the rotation is to align one of the string ring's characters at the 12:00 direction, where this character must equal to the character key[i]. if the character key[i] has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. after the pressing, you could begin to spell the next character in the key (next stage), otherwise, you've finished all the spelling.","input: ring = ""godding"", key = ""gd"" output: 4 explanation: for the first key character 'g', since it is already in place, we just need 1 step to spell this character. for the second key character 'd', we need to rotate the ring ""godding"" anticlockwise by two steps to make it become ""ddinggo"". also, we need 1 more step for spelling. so the final output is 4. note: length of both ring and key will be in range 1 to 100. there are only lowercase letters in both strings and might be some duplcate characters in both strings. it's guaranteed that string key could always be spelled by rotating the string ring.",,
515,Find Largest Value in Each Tree Row,"Given the `root` of a binary tree, return an array of the largest value in each row of the tree (0-indexed).


Example 1:
Input: root = [1,3,2,5,3,null,9]
Output: [1,3,9]

Example 2:
Input: root = [1,2,3]
Output: [1,3]

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,null,2]
Output: [1,2]

Example 5:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree will be in the range `[0, 104]`.

`-231 <= Node.val <= 231 - 1`",Medium,https://leetcode.com/problems/find-largest-value-in-each-tree-row,Facebook,"Tree,Depth-first Search,Breadth-first Search",1280,,"given the `root` of a binary tree, return an array of the largest value in each row of the tree (0-indexed).","input: root = [1,3,2,5,3,null,9] output: [1,3,9] example 2: input: root = [1,2,3] output: [1,3] example 3: input: root = [1] output: [1] example 4: input: root = [1,null,2] output: [1,2] example 5: input: root = [] output: []","the number of nodes in the tree will be in the range `[0, 10^4]`. `-231 <= node.val <= 231 - 1`",
516,Longest Palindromic Subsequence,"Given a string `s`, find the longest palindromic subsequence's length in `s`.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.


Example 1:
Input: s = ""bbbab""
Output: 4
Explanation: One possible longest palindromic subsequence is ""bbbb"".


Example 2:
Input: s = ""cbbd""
Output: 2
Explanation: One possible longest palindromic subsequence is ""bb"".


Constraints:
`1 <= s.length <= 1000`
`s` consists only of lowercase English letters.",Medium,https://leetcode.com/problems/longest-palindromic-subsequence,Amazon,Dynamic Programming,3000,"[Longest Palindromic Substring, /problems/longest-palindromic-substring/, Medium], [Palindromic Substrings, /problems/palindromic-substrings/, Medium], [Count Different Palindromic Subsequences, /problems/count-different-palindromic-subsequences/, Hard], [Longest Common Subsequence, /problems/longest-common-subsequence/, Medium], [Longest Palindromic Subsequence II, /problems/longest-palindromic-subsequence-ii/, Medium], [Maximize Palindrome Length From Subsequences, /problems/maximize-palindrome-length-from-subsequences/, Hard]","given a string `s`, find the longest palindromic subsequence's length in `s`. a subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.","input: s = ""bbbab"" output: 4 explanation: one possible longest palindromic subsequence is ""bbbb"". example 2: input: s = ""cbbd"" output: 2 explanation: one possible longest palindromic subsequence is ""bb"".",`1 <= s.length <= 1000` `s` consists only of lowercase english letters.,
517,Super Washing Machines,"You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty. 
For each move, you could choose any m (1 ≤ m ≤ n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines  at the same time .  
Given an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.


Example1
Input: [1,0,5]
Output: 3
Explanation: 
1st move:    1     0 <-- 5    =>    1     1     4
2nd move:    1 <-- 1 <-- 4    =>    2     1     3    
3rd move:    2     1 <-- 3    =>    2     2     2   

Example2
Input: [0,3,0]
Output: 2
Explanation: 
1st move:    0 <-- 3     0    =>    1     2     0    
2nd move:    1     2 --> 0    =>    1     1     1     

Example3
Input: [0,2,0]
Output: -1
Explanation: 
It's impossible to make all the three washing machines have the same number of dresses. 
Note:
The range of n is [1, 10000].

The range of dresses number in a super washing machine is [0, 1e5].",Hard,https://leetcode.com/problems/super-washing-machines,Amazon,"Math,Dynamic Programming",405,,"you have n super washing machines on a line. initially, each washing machine has some dresses or is empty. for each move, you could choose any m (1 ≤ m ≤ n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time . given an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the minimum number of moves to make all the washing machines have the same number of dresses. if it is not possible to do it, return -1. example1 input: [1,0,5] output: 3 explanation: 1st move: 1 0 <-- 5 => 1 1 4 2nd move: 1 <-- 1 <-- 4 => 2 1 3 3rd move: 2 1 <-- 3 => 2 2 2 example2 input: [0,3,0] output: 2 explanation: 1st move: 0 <-- 3 0 => 1 2 0 2nd move: 1 2 --> 0 => 1 1 1 example3 input: [0,2,0] output: -1 explanation: it's impossible to make all the three washing machines have the same number of dresses. note: the range of n is [1, 10000]. the range of dresses number in a super washing machine is [0, 1e5].",,,
518,Coin Change 2,"You are given coins of different denominations and a total amount of money. Write a function to compute the number of combinations that make up that amount. You may assume that you have infinite number of each kind of coin.


Example 1:
Input: amount = 5, coins = [1, 2, 5]
Output: 4
Explanation: there are four ways to make up the amount:
5=5
5=2+2+1
5=2+1+1+1
5=1+1+1+1+1

Example 2:
Input: amount = 3, coins = [2]
Output: 0
Explanation: the amount of 3 cannot be made up just with coins of 2.


Example 3:
Input: amount = 10, coins = [10] 
Output: 1
Note:
You can assume that
0 <= amount <= 5000
1 <= coin <= 5000
the number of coins is less than 500
the answer is guaranteed to fit into signed 32-bit integer",Medium,https://leetcode.com/problems/coin-change-2,"Amazon,Microsoft,Bloomberg,Apple,Adobe,Qualtrics,ByteDance",,2991,,you are given coins of different denominations and a total amount of money. write a function to compute the number of combinations that make up that amount. you may assume that you have infinite number of each kind of coin.,"input: amount = 5, coins = [1, 2, 5] output: 4 explanation: there are four ways to make up the amount: 5=5 5=2+2+1 5=2+1+1+1 5=1+1+1+1+1 example 2: input: amount = 3, coins = [2] output: 0 explanation: the amount of 3 cannot be made up just with coins of 2. example 3: input: amount = 10, coins = [10] output: 1 note: you can assume that 0 <= amount <= 5000 1 <= coin <= 5000 the number of coins is less than 500 the answer is guaranteed to fit into signed 32-bit integer",,
519,Random Flip Matrix,"You are given the number of rows `n_rows` and number of columns `n_cols` of a 2D binary matrix where all values are initially 0. Write a function `flip` which chooses a 0 value uniformly at random, changes it to 1, and then returns the position `[row.id, col.id]` of that value. Also, write a function `reset` which sets all values back to 0. Try to minimize the number of calls to system's Math.random() and optimize the time and space complexity.

Note:
`1 <= n_rows, n_cols <= 10000`
`0 <= row.id < n_rows` and `0 <= col.id < n_cols`
`flip` will not be called when the matrix has no 0 values left.

the total number of calls to `flip` and `reset` will not exceed 1000.


Example 1:
Input: 
[""Solution"",""flip"",""flip"",""flip"",""flip""]
[[2,3],[],[],[],[]]
Output: [null,[0,1],[1,2],[1,0],[1,1]]

Example 2:
Input: 
[""Solution"",""flip"",""flip"",""reset"",""flip""]
[[1,2],[],[],[],[]]
Output: [null,[0,0],[0,1],null,[0,0]]
Explanation of Input Syntax:
The input is two lists: the subroutines called and their arguments. `Solution`'s constructor has two arguments, `n_rows` and `n_cols`. `flip` and `reset` have no arguments. Arguments are always wrapped with a list, even if there aren't any.",Medium,https://leetcode.com/problems/random-flip-matrix,Google,Random,220,,"you are given the number of rows `n_rows` and number of columns `n_cols` of a 2d binary matrix where all values are initially 0. write a function `flip` which chooses a 0 value uniformly at random, changes it to 1, and then returns the position `[row.id, col.id]` of that value. also, write a function `reset` which sets all values back to 0. try to minimize the number of calls to system's math.random() and optimize the time and space complexity. note: `1 <= n_rows, n_cols <= 10000` `0 <= row.id < n_rows` and `0 <= col.id < n_cols` `flip` will not be called when the matrix has no 0 values left. the total number of calls to `flip` and `reset` will not exceed 1000.","input: [""solution"",""flip"",""flip"",""flip"",""flip""] [[2,3],[],[],[],[]] output: [null,[0,1],[1,2],[1,0],[1,1]] example 2: input: [""solution"",""flip"",""flip"",""reset"",""flip""] [[1,2],[],[],[],[]] output: [null,[0,0],[0,1],null,[0,0]] explanation of input syntax: the input is two lists: the subroutines called and their arguments. `solution`'s constructor has two arguments, `n_rows` and `n_cols`. `flip` and `reset` have no arguments. arguments are always wrapped with a list, even if there aren't any.",,
520,Detect Capital,"Given a word, you need to judge whether the usage of capitals in it is right or not.

We define the usage of capitals in a word to be right when one of the following cases holds:
All letters in this word are capitals, like ""USA"".

All letters in this word are not capitals, like ""leetcode"".

Only the first letter in this word is capital, like ""Google"".

Otherwise, we define that this word doesn't use capitals in a right way.


Example 1:
Input: ""USA""
Output: True

Example 2:
Input: ""FlaG""
Output: False
Note: The input will be a non-empty word consisting of uppercase and lowercase latin letters.",Easy,https://leetcode.com/problems/detect-capital,Google,String,801,,"given a word, you need to judge whether the usage of capitals in it is right or not. we define the usage of capitals in a word to be right when one of the following cases holds: all letters in this word are capitals, like ""usa"". all letters in this word are not capitals, like ""leetcode"". only the first letter in this word is capital, like ""google"". otherwise, we define that this word doesn't use capitals in a right way.","input: ""usa"" output: true example 2: input: ""flag"" output: false note: the input will be a non-empty word consisting of uppercase and lowercase latin letters.",,
521,Longest Uncommon Subsequence I,"Given two strings `a` and `b`, find the length of the longest uncommon subsequence between them.

A subsequence of a string `s` is a string that can be obtained after deleting any number of characters from `s`. For example, `""abc""` is a subsequence of `""aebdc""` because you can delete the underlined characters in `""aebdc""` to get `""abc""`. Other subsequences of `""aebdc""` include `""aebdc""`, `""aeb""`, and `""""` (empty string).

An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.

Return the length of the longest uncommon subsequence between `a` and `b`. If the longest uncommon subsequence doesn't exist, return `-1`.


Example 1:
Input: a = ""aba"", b = ""cdc""
Output: 3
Explanation: One longest uncommon subsequence is ""aba"" because ""aba"" is a subsequence of ""aba"" but not ""cdc"".

Note that ""cdc"" is also a longest uncommon subsequence.


Example 2:
Input: a = ""aaa"", b = ""bbb""
Output: 3
Explanation: The longest uncommon subsequences are ""aaa"" and ""bbb"".


Example 3:
Input: a = ""aaa"", b = ""aaa""
Output: -1
Explanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.


Constraints:
`1 <= a.length, b.length <= 100`
`a` and `b` consist of lower-case English letters.",Easy,https://leetcode.com/problems/longest-uncommon-subsequence-i,Google,"String,Brainteaser",402,"[Longest Uncommon Subsequence II, /problems/longest-uncommon-subsequence-ii/, Medium]","given two strings `a` and `b`, find the length of the longest uncommon subsequence between them. a subsequence of a string `s` is a string that can be obtained after deleting any number of characters from `s`. for example, `""abc""` is a subsequence of `""aebdc""` because you can delete the underlined characters in `""aebdc""` to get `""abc""`. other subsequences of `""aebdc""` include `""aebdc""`, `""aeb""`, and `""""` (empty string). an uncommon subsequence between two strings is a string that is a subsequence of one but not the other. return the length of the longest uncommon subsequence between `a` and `b`. if the longest uncommon subsequence doesn't exist, return `-1`.","input: a = ""aba"", b = ""cdc"" output: 3 explanation: one longest uncommon subsequence is ""aba"" because ""aba"" is a subsequence of ""aba"" but not ""cdc"". note that ""cdc"" is also a longest uncommon subsequence. example 2: input: a = ""aaa"", b = ""bbb"" output: 3 explanation: the longest uncommon subsequences are ""aaa"" and ""bbb"". example 3: input: a = ""aaa"", b = ""aaa"" output: -1 explanation: every subsequence of string a is also a subsequence of string b. similarly, every subsequence of string b is also a subsequence of string a.","`1 <= a.length, b.length <= 10^0` `a` and `b` consist of lower-case english letters.",
522,Longest Uncommon Subsequence II,"Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.

A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.

The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.


Example 1:
Input: ""aba"", ""cdc"", ""eae""
Output: 3
Note:
All the given strings' lengths will not exceed 10.

The length of the given list will be in the range of [2, 50].",Medium,https://leetcode.com/problems/longest-uncommon-subsequence-ii,Google,String,216,"[Longest Uncommon Subsequence I, /problems/longest-uncommon-subsequence-i/, Easy]","given a list of strings, you need to find the longest uncommon subsequence among them. the longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings. a subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. trivially, any string is a subsequence of itself and an empty string is a subsequence of any string. the input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. if the longest uncommon subsequence doesn't exist, return -1.","input: ""aba"", ""cdc"", ""eae"" output: 3 note: all the given strings' lengths will not exceed 10. the length of the given list will be in the range of [2, 50].",,
523,Continuous Subarray Sum,"Given an integer array `nums` and an integer `k`, return `true` if `nums` has a continuous subarray of size at least two whose elements sum up to a multiple of `k`, or `false` otherwise.

An integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is always a multiple of `k`.


Example 1:
Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.


Example 2:
Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.

42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.


Example 3:
Input: nums = [23,2,6,4,7], k = 13
Output: false

Constraints:
`1 <= nums.length <= 105`
`0 <= nums[i] <= 109`
`0 <= sum(nums[i]) <= 231 - 1`
`1 <= k <= 231 - 1`",Medium,https://leetcode.com/problems/continuous-subarray-sum,"Facebook,Amazon","Math,Dynamic Programming",49,"[Subarray Sum Equals K, /problems/subarray-sum-equals-k/, Medium]","given an integer array `nums` and an integer `k`, return `true` if `nums` has a continuous subarray of size at least two whose elements sum up to a multiple of `k`, or `false` otherwise. an integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is always a multiple of `k`.","input: nums = [23,2,4,6,7], k = 6 output: true explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6. example 2: input: nums = [23,2,6,4,7], k = 6 output: true explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42. 42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer. example 3: input: nums = [23,2,6,4,7], k = 13 output: false",`1 <= nums.length <= 10^5` `0 <= nums[i] <= 10^9` `0 <= sum(nums[i]) <= 231 - 1` `1 <= k <= 231 - 1`,
524,Longest Word in Dictionary through Deleting,"Given a string `s` and a string array `dictionary`, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.


Example 1:
Input: s = ""abpcplea"", dictionary = [""ale"",""apple"",""monkey"",""plea""]
Output: ""apple""

Example 2:
Input: s = ""abpcplea"", dictionary = [""a"",""b"",""c""]
Output: ""a""

Constraints:
`1 <= s.length <= 1000`
`1 <= dictionary.length <= 1000`
`1 <= dictionary[i].length <= 1000`
`s` and `dictionary[i]` consist of lowercase English letters.",Medium,https://leetcode.com/problems/longest-word-in-dictionary-through-deleting,Goldman Sachs,"Two Pointers,Sort",984,"[Longest Word in Dictionary, /problems/longest-word-in-dictionary/, Easy]","given a string `s` and a string array `dictionary`, return the longest string in the dictionary that can be formed by deleting some of the given string characters. if there is more than one possible result, return the longest word with the smallest lexicographical order. if there is no possible result, return the empty string.","input: s = ""abpcplea"", dictionary = [""ale"",""apple"",""monkey"",""plea""] output: ""apple"" example 2: input: s = ""abpcplea"", dictionary = [""a"",""b"",""c""] output: ""a""",`1 <= s.length <= 1000` `1 <= dictionary.length <= 1000` `1 <= dictionary[i].length <= 1000` `s` and `dictionary[i]` consist of lowercase english letters.,
525,Contiguous Array,"Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1. 

Example 1:
Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.


Example 2:
Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

Note:
The length of the given binary array will not exceed 50,000.",Medium,https://leetcode.com/problems/contiguous-array,"Facebook,Amazon",Hash Table,2737,"[Maximum Size Subarray Sum Equals k, /problems/maximum-size-subarray-sum-equals-k/, Medium]","given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.","input: [0,1] output: 2 explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1. example 2: input: [0,1,0] output: 2 explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1. note: the length of the given binary array will not exceed 50,000.",,
526,Beautiful Arrangement,"Suppose you have `n` integers labeled `1` through `n`. A permutation of those `n` integers `perm` (1-indexed) is considered a beautiful arrangement if for every `i` (`1 <= i <= n`), either of the following is true:
`perm[i]` is divisible by `i`.

`i` is divisible by `perm[i]`.

Given an integer `n`, return the number of the beautiful arrangements that you can construct.


Example 1:
Input: n = 2
Output: 2
Explanation: 
The first beautiful arrangement is [1,2]:
    - perm[1] = 1 is divisible by i = 1
    - perm[2] = 2 is divisible by i = 2
The second beautiful arrangement is [2,1]:
    - perm[1] = 2 is divisible by i = 1
    - i = 2 is divisible by perm[2] = 1

Example 2:
Input: n = 1
Output: 1

Constraints:
`1 <= n <= 15`",Medium,https://leetcode.com/problems/beautiful-arrangement,"Mathworks,C3 IoT,Cisco","Backtracking,Depth-first Search",1208,"[Beautiful Arrangement II, /problems/beautiful-arrangement-ii/, Medium]","suppose you have `n` integers labeled `1` through `n`. a permutation of those `n` integers `perm` (1-indexed) is considered a beautiful arrangement if for every `i` (`1 <= i <= n`), either of the following is true: `perm[i]` is divisible by `i`. `i` is divisible by `perm[i]`. given an integer `n`, return the number of the beautiful arrangements that you can construct.","input: n = 2 output: 2 explanation: the first beautiful arrangement is [1,2]: - perm[1] = 1 is divisible by i = 1 - perm[2] = 2 is divisible by i = 2 the second beautiful arrangement is [2,1]: - perm[1] = 2 is divisible by i = 1 - i = 2 is divisible by perm[2] = 1 example 2: input: n = 1 output: 1",`1 <= n <= 15`,
527,Word Abbreviation,"Given an array of n distinct non-empty strings, you need to generate minimal possible abbreviations for every word following rules below.

Begin with the first character and then the number of characters abbreviated, which followed by the last character.

If there are any conflict, that is more than one words share the same abbreviation, a longer prefix is used instead of only the first character until making the map from word to abbreviation become unique. In other words, a final abbreviation cannot map to more than one original words.

 If the abbreviation doesn't make the word shorter, then keep it as original.


Example:
Input: [""like"", ""god"", ""internal"", ""me"", ""internet"", ""interval"", ""intension"", ""face"", ""intrusion""]
Output: [""l2e"",""god"",""internal"",""me"",""i6t"",""interval"",""inte4n"",""f2e"",""intr4n""]
Note:
 Both n and the length of each word will not exceed 400.

 The length of each word is greater than 1.

 The words consist of lowercase English letters only.

 The return answers should be in the same order as the original array.",Hard,https://leetcode.com/problems/word-abbreviation,Google,"String,Sort",248,"[Valid Word Abbreviation, /problems/valid-word-abbreviation/, Easy], [Minimum Unique Word Abbreviation, /problems/minimum-unique-word-abbreviation/, Hard]","given an array of n distinct non-empty strings, you need to generate minimal possible abbreviations for every word following rules below. begin with the first character and then the number of characters abbreviated, which followed by the last character. if there are any conflict, that is more than one words share the same abbreviation, a longer prefix is used instead of only the first character until making the map from word to abbreviation become unique. in other words, a final abbreviation cannot map to more than one original words. if the abbreviation doesn't make the word shorter, then keep it as original.","input: [""like"", ""god"", ""internal"", ""me"", ""internet"", ""interval"", ""intension"", ""face"", ""intrusion""] output: [""l2e"",""god"",""internal"",""me"",""i6t"",""interval"",""inte4n"",""f2e"",""intr4n""] note: both n and the length of each word will not exceed 400. the length of each word is greater than 1. the words consist of lowercase english letters only. the return answers should be in the same order as the original array.",,
528,Random Pick with Weight,"You are given an array of positive integers `w` where `w[i]` describes the weight of `i``th` index (0-indexed).

We need to call the function `pickIndex()` which randomly returns an integer in the range `[0, w.length - 1]`. `pickIndex()` should return the integer proportional to its weight in the `w` array. For example, for `w = [1, 3]`, the probability of picking the index `0` is `1 / (1 + 3) = 0.25` (i.e 25%) while the probability of picking the index `1` is `3 / (1 + 3) = 0.75` (i.e 75%).

More formally, the probability of picking index `i` is `w[i] / sum(w)`.


Example 1:
Input
[""Solution"",""pickIndex""]
[[[1]],[]]
Output
[null,0]
Explanation
Solution solution = new Solution([1]);
solution.pickIndex(); // return 0. Since there is only one single element on the array the only option is to return the first element.


Example 2:
Input
[""Solution"",""pickIndex"",""pickIndex"",""pickIndex"",""pickIndex"",""pickIndex""]
[[[1,3]],[],[],[],[],[]]
Output
[null,1,1,1,1,0]
Explanation
Solution solution = new Solution([1, 3]);
solution.pickIndex(); // return 1. It's returning the second element (index = 1) that has probability of 3/4.

solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 0. It's returning the first element (index = 0) that has probability of 1/4.

Since this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct :
[null,1,1,1,1,0]
[null,1,1,1,1,1]
[null,1,1,1,0,0]
[null,1,1,1,0,1]
[null,1,0,1,0,0]
......

and so on.


Constraints:
`1 <= w.length <= 10000`
`1 <= w[i] <= 10^5`
`pickIndex` will be called at most `10000` times.",Medium,https://leetcode.com/problems/random-pick-with-weight,"Facebook,Google,ByteDance,Bloomberg,Apple,Roblox,LinkedIn,Amazon,Expedia,Yelp,Snapchat","Binary Search,Random",1208,"[Random Pick Index, /problems/random-pick-index/, Medium], [Random Pick with Blacklist, /problems/random-pick-with-blacklist/, Hard], [Random Point in Non-overlapping Rectangles, /problems/random-point-in-non-overlapping-rectangles/, Medium]","you are given an array of positive integers `w` where `w[i]` describes the weight of `i``th` index (0-indexed). we need to call the function `pickindex()` which randomly returns an integer in the range `[0, w.length - 1]`. `pickindex()` should return the integer proportional to its weight in the `w` array. for example, for `w = [1, 3]`, the probability of picking the index `0` is `1 / (1 + 3) = 0.25` (i.e 25%) while the probability of picking the index `1` is `3 / (1 + 3) = 0.75` (i.e 75%). more formally, the probability of picking index `i` is `w[i] / sum(w)`.","input [""solution"",""pickindex""] [[[1]],[]] output [null,0] explanation solution solution = new solution([1]); solution.pickindex(); // return 0. since there is only one single element on the array the only option is to return the first element. example 2: input [""solution"",""pickindex"",""pickindex"",""pickindex"",""pickindex"",""pickindex""] [[[1,3]],[],[],[],[],[]] output [null,1,1,1,1,0] explanation solution solution = new solution([1, 3]); solution.pickindex(); // return 1. it's returning the second element (index = 1) that has probability of 3/4. solution.pickindex(); // return 1 solution.pickindex(); // return 1 solution.pickindex(); // return 1 solution.pickindex(); // return 0. it's returning the first element (index = 0) that has probability of 1/4. since this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct : [null,1,1,1,1,0] [null,1,1,1,1,1] [null,1,1,1,0,0] [null,1,1,1,0,1] [null,1,0,1,0,0] ...... and so on.",`1 <= w.length <= 10000` `1 <= w[i] <= 10^5` `pickindex` will be called at most `10000` times.,
529,Minesweeper,"Let's play the minesweeper game (Wikipedia, online game)!
You are given a 2D char matrix representing the game board. 'M' represents an unrevealed mine, 'E' represents an unrevealed empty square, 'B' represents a revealed blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, digit ('1' to '8') represents how many mines are adjacent to this revealed square, and finally 'X' represents a revealed mine.

Now given the next click position (row and column indices) among all the unrevealed squares ('M' or 'E'), return the board after revealing this position according to the following rules:
If a mine ('M') is revealed, then the game is over - change it to 'X'.

If an empty square ('E') with no adjacent mines is revealed, then change it to revealed blank ('B') and all of its adjacent unrevealed squares should be revealed recursively.

If an empty square ('E') with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.

Return the board when no more squares will be revealed.


Example 1:
Input: 
[['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'M', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E']]
Click : [3,0]
Output: 
[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'M', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]
Explanation:

Example 2:
Input: 
[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'M', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]
Click : [1,2]
Output: 
[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'X', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]
Explanation:
Note:
The range of the input matrix's height and width is [1,50].

The click position will only be an unrevealed square ('M' or 'E'), which also means the input board contains at least one clickable square.

The input board won't be a stage when game is over (some mines have been revealed).

For simplicity, not mentioned rules should be ignored in this problem. For example, you don't need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.",Medium,https://leetcode.com/problems/minesweeper,"Uber,Google,Amazon,Facebook,Zillow,LiveRamp","Depth-first Search,Breadth-first Search",858,,"let's play the minesweeper game (wikipedia, online game)! you are given a 2d char matrix representing the game board. 'm' represents an unrevealed mine, 'e' represents an unrevealed empty square, 'b' represents a revealed blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, digit ('1' to '8') represents how many mines are adjacent to this revealed square, and finally 'x' represents a revealed mine. now given the next click position (row and column indices) among all the unrevealed squares ('m' or 'e'), return the board after revealing this position according to the following rules: if a mine ('m') is revealed, then the game is over - change it to 'x'. if an empty square ('e') with no adjacent mines is revealed, then change it to revealed blank ('b') and all of its adjacent unrevealed squares should be revealed recursively. if an empty square ('e') with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines. return the board when no more squares will be revealed.","input: [['e', 'e', 'e', 'e', 'e'], ['e', 'e', 'm', 'e', 'e'], ['e', 'e', 'e', 'e', 'e'], ['e', 'e', 'e', 'e', 'e']] click : [3,0] output: [['b', '1', 'e', '1', 'b'], ['b', '1', 'm', '1', 'b'], ['b', '1', '1', '1', 'b'], ['b', 'b', 'b', 'b', 'b']] explanation: example 2: input: [['b', '1', 'e', '1', 'b'], ['b', '1', 'm', '1', 'b'], ['b', '1', '1', '1', 'b'], ['b', 'b', 'b', 'b', 'b']] click : [1,2] output: [['b', '1', 'e', '1', 'b'], ['b', '1', 'x', '1', 'b'], ['b', '1', '1', '1', 'b'], ['b', 'b', 'b', 'b', 'b']] explanation: note: the range of the input matrix's height and width is [1,50]. the click position will only be an unrevealed square ('m' or 'e'), which also means the input board contains at least one clickable square. the input board won't be a stage when game is over (some mines have been revealed). for simplicity, not mentioned rules should be ignored in this problem. for example, you don't need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.",,
530,Minimum Absolute Difference in BST,"Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.


Example:
Input:
   1
    \
     3
    /
   2
Output:
1
Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).

Note:
There are at least two nodes in this BST.

This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/",Easy,https://leetcode.com/problems/minimum-absolute-difference-in-bst,Google,Tree,1203,"[K-diff Pairs in an Array, /problems/k-diff-pairs-in-an-array/, Medium]","given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.","input: 1 \ 3 / 2 output: 1 explanation: the minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3). note: there are at least two nodes in this bst. this question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/",,
531,Lonely Pixel I,"Given an `m x n` `picture` consisting of black `'B'` and white `'W'` pixels, return the number of black lonely pixels.

A black lonely pixel is a character `'B'` that located at a specific position where the same row and same column don't have any other black pixels.


Example 1:
Input: picture = [[""W"",""W"",""B""],[""W"",""B"",""W""],[""B"",""W"",""W""]]
Output: 3
Explanation: All the three 'B's are black lonely pixels.


Example 2:
Input: picture = [[""B"",""B"",""B""],[""B"",""B"",""B""],[""B"",""B"",""B""]]
Output: 0

Constraints:
`m == picture.length`
`n == picture[i].length`
`1 <= m, n <= 500`
`picture[i][j]` is `'W'` or `'B'`.",Medium,https://leetcode.com/problems/lonely-pixel-i,Microsoft,"Array,Depth-first Search",226,"[Lonely Pixel II, /problems/lonely-pixel-ii/, Medium]","given an `m x n` `picture` consisting of black `'b'` and white `'w'` pixels, return the number of black lonely pixels. a black lonely pixel is a character `'b'` that located at a specific position where the same row and same column don't have any other black pixels.","input: picture = [[""w"",""w"",""b""],[""w"",""b"",""w""],[""b"",""w"",""w""]] output: 3 explanation: all the three 'b's are black lonely pixels. example 2: input: picture = [[""b"",""b"",""b""],[""b"",""b"",""b""],[""b"",""b"",""b""]] output: 0","`m == picture.length` `n == picture[i].length` `1 <= m, n <= 500` `picture[i][j]` is `'w'` or `'b'`.",
532,K-diff Pairs in an Array,"Given an array of integers `nums` and an integer `k`, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair `(nums[i], nums[j])`, where the following are true:
`0 <= i, j < nums.length`
`i != j`
`|nums[i] - nums[j]| == k`
Notice that `|val|` denotes the absolute value of `val`.


Example 1:
Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).

Although we have two 1s in the input, we should only return the number of unique pairs.


Example 2:
Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).


Example 3:
Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).


Example 4:
Input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3
Output: 2

Example 5:
Input: nums = [-1,-2,-3], k = 1
Output: 2

Constraints:
`1 <= nums.length <= 104`
`-107 <= nums[i] <= 107`
`0 <= k <= 107`",Medium,https://leetcode.com/problems/k-diff-pairs-in-an-array,"Twitter,Citrix,Amazon,Goldman Sachs,Expedia","Array,Two Pointers",1099,"[Minimum Absolute Difference in BST, /problems/minimum-absolute-difference-in-bst/, Easy]","given an array of integers `nums` and an integer `k`, return the number of unique k-diff pairs in the array. a k-diff pair is an integer pair `(nums[i], nums[j])`, where the following are true: `0 <= i, j < nums.length` `i != j` `|nums[i] - nums[j]| == k` notice that `|val|` denotes the absolute value of `val`.","input: nums = [3,1,4,1,5], k = 2 output: 2 explanation: there are two 2-diff pairs in the array, (1, 3) and (3, 5). although we have two 1s in the input, we should only return the number of unique pairs. example 2: input: nums = [1,2,3,4,5], k = 1 output: 4 explanation: there are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5). example 3: input: nums = [1,3,1,5,4], k = 0 output: 1 explanation: there is one 0-diff pair in the array, (1, 1). example 4: input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3 output: 2 example 5: input: nums = [-1,-2,-3], k = 1 output: 2",`1 <= nums.length <= 10^4` `-10^7 <= nums[i] <= 10^7` `0 <= k <= 10^7`,
533,Lonely Pixel II,"Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row R and column C that align with all the following rules:
 Row R and column C both contain exactly N black pixels.

 For all rows that have a black pixel at column C, they should be exactly the same as row R
The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively. 

Example:
Input:                                            
[['W', 'B', 'W', 'B', 'B', 'W'],    
 ['W', 'B', 'W', 'B', 'B', 'W'],    
 ['W', 'B', 'W', 'B', 'B', 'W'],    
 ['W', 'W', 'B', 'W', 'B', 'W']] 
N = 3
Output: 6
Explanation: All the bold 'B' are the black pixels we need (all 'B's at column 1 and 3).

        0    1    2    3    4    5         column index                                            
0    [['W', 'B', 'W', 'B', 'B', 'W'],    
1     ['W', 'B', 'W', 'B', 'B', 'W'],    
2     ['W', 'B', 'W', 'B', 'B', 'W'],    
3     ['W', 'W', 'B', 'W', 'B', 'W']]    
row index
Take 'B' at row R = 0 and column C = 1 as an example:
Rule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels. 
Rule 2, the rows have black pixel at column C = 1 are row 0, row 1 and row 2. They are exactly the same as row R = 0.

Note:
The range of width and height of the input 2D array is [1,200].",Medium,https://leetcode.com/problems/lonely-pixel-ii,Google,Array,58,"[Lonely Pixel I, /problems/lonely-pixel-i/, Medium]","given a picture consisting of black and white pixels, and a positive integer n, find the number of black pixels located at some specific row r and column c that align with all the following rules: row r and column c both contain exactly n black pixels. for all rows that have a black pixel at column c, they should be exactly the same as row r the picture is represented by a 2d char array consisting of 'b' and 'w', which means black and white pixels respectively.","input: [['w', 'b', 'w', 'b', 'b', 'w'], ['w', 'b', 'w', 'b', 'b', 'w'], ['w', 'b', 'w', 'b', 'b', 'w'], ['w', 'w', 'b', 'w', 'b', 'w']] n = 3 output: 6 explanation: all the bold 'b' are the black pixels we need (all 'b's at column 1 and 3). 0 1 2 3 4 5 column index 0 [['w', 'b', 'w', 'b', 'b', 'w'], 1 ['w', 'b', 'w', 'b', 'b', 'w'], 2 ['w', 'b', 'w', 'b', 'b', 'w'], 3 ['w', 'w', 'b', 'w', 'b', 'w']] row index take 'b' at row r = 0 and column c = 1 as an example: rule 1, row r = 0 and column c = 1 both have exactly n = 3 black pixels. rule 2, the rows have black pixel at column c = 1 are row 0, row 1 and row 2. they are exactly the same as row r = 0. note: the range of width and height of the input 2d array is [1,200].",,
534,Game Play Analysis III,SQL Schema,Medium,https://leetcode.com/problems/game-play-analysis-iii,GSN Games,,139,,sql schema,,,
535,Encode and Decode TinyURL,"Note: This is a companion problem to the System Design problem: Design TinyURL.

TinyURL is a URL shortening service where you enter a URL such as `https://leetcode.com/problems/design-tinyurl` and it returns a short URL such as `http://tinyurl.com/4e9iAk`.

Design the `encode` and `decode` methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.",Medium,https://leetcode.com/problems/encode-and-decode-tinyurl,"Microsoft,Amazon","Hash Table,Math",894,,note: this is a companion problem to the system design problem: design tinyurl. tinyurl is a url shortening service where you enter a url such as `https://leetcode.com/problems/design-tinyurl` and it returns a short url such as `http://tinyurl.com/4e9iak`. design the `encode` and `decode` methods for the tinyurl service. there is no restriction on how your encode/decode algorithm should work. you just need to ensure that a url can be encoded to a tiny url and the tiny url can be decoded to the original url.,,,
536,Construct Binary Tree from String,"You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.

You always start to construct the left child node of the parent first if it exists.


Example 1:
Input: s = ""4(2(3)(1))(6(5))""
Output: [4,2,6,3,1,5]

Example 2:
Input: s = ""4(2(3)(1))(6(5)(7))""
Output: [4,2,6,3,1,5,7]

Example 3:
Input: s = ""-4(2(3)(1))(6(5)(7))""
Output: [-4,2,6,3,1,5,7]

Constraints:
`0 <= s.length <= 3 * 104`
`s` consists of digits, `'('`, `')'`, and `'-'` only.",Medium,https://leetcode.com/problems/construct-binary-tree-from-string,Facebook,"String,Tree",590,"[Construct String from Binary Tree, /problems/construct-string-from-binary-tree/, Easy]","you need to construct a binary tree from a string consisting of parenthesis and integers. the whole input represents a binary tree. it contains an integer followed by zero, one or two pairs of parenthesis. the integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure. you always start to construct the left child node of the parent first if it exists.","input: s = ""4(2(3)(1))(6(5))"" output: [4,2,6,3,1,5] example 2: input: s = ""4(2(3)(1))(6(5)(7))"" output: [4,2,6,3,1,5,7] example 3: input: s = ""-4(2(3)(1))(6(5)(7))"" output: [-4,2,6,3,1,5,7]","`0 <= s.length <= 3 * 10^4` `s` consists of digits, `'('`, `')'`, and `'-'` only.",
537,Complex Number Multiplication,"Given two strings representing two complex numbers.

You need to return a string representing their multiplication. Note i2 = -1 according to the definition.


Example 1:
Input: ""1+1i"", ""1+1i""
Output: ""0+2i""
Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.


Example 2:
Input: ""1+-1i"", ""1+-1i""
Output: ""0+-2i""
Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.

Note:
The input strings will not have extra blank.

The input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. And the output should be also in this form.",Medium,https://leetcode.com/problems/complex-number-multiplication,Amazon,"Math,String",293,,given two strings representing two complex numbers. you need to return a string representing their multiplication. note i2 = -1 according to the definition.,"input: ""1+1i"", ""1+1i"" output: ""0+2i"" explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i. example 2: input: ""1+-1i"", ""1+-1i"" output: ""0+-2i"" explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i. note: the input strings will not have extra blank. the input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. and the output should be also in this form.",,
538,Convert BST to Greater Tree,"Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:
The left subtree of a node contains only nodes with keys less than the node's key.

The right subtree of a node contains only nodes with keys greater than the node's key.

Both the left and right subtrees must also be binary search trees.

Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/

Example 1:
Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

Example 2:
Input: root = [0,null,1]
Output: [1,null,1]

Example 3:
Input: root = [1,0,2]
Output: [3,3,2]

Example 4:
Input: root = [3,2,4,1]
Output: [7,9,4,10]

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-104 <= Node.val <= 104`
All the values in the tree are unique.

`root` is guaranteed to be a valid binary search tree.",Medium,https://leetcode.com/problems/convert-bst-to-greater-tree,"Facebook,Amazon","Tree,Depth-first Search,Binary Search Tree,Recursion",2571,,"given the `root` of a binary search tree (bst), convert it to a greater tree such that every key of the original bst is changed to the original key plus sum of all keys greater than the original key in bst. as a reminder, a binary search tree is a tree that satisfies these","input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] example 2: input: root = [0,null,1] output: [1,null,1] example 3: input: root = [1,0,2] output: [3,3,2] example 4: input: root = [3,2,4,1] output: [7,9,4,10] constraints: the number of nodes in the tree is in the range `[0, 104]`. `-104 <= node.val <= 104` all the values in the tree are unique. `root` is guaranteed to be a valid binary search tree.","the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees. note: this question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/ example 1: input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] example 2: input: root = [0,null,1] output: [1,null,1] example 3: input: root = [1,0,2] output: [3,3,2] example 4: input: root = [3,2,4,1] output: [7,9,4,10] constraints: the number of nodes in the tree is in the range `[0, 10^4]`. `-10^4 <= node.val <= 10^4` all the values in the tree are unique. `root` is guaranteed to be a valid binary search tree.",
539,Minimum Time Difference,"Given a list of 24-hour clock time points in ""HH:MM"" format, return the minimum minutes difference between any two time-points in the list.


Example 1:
Input: timePoints = [""23:59"",""00:00""]
Output: 1

Example 2:
Input: timePoints = [""00:00"",""23:59"",""00:00""]
Output: 0

Constraints:
`2 <= timePoints <= 2 * 104`
`timePoints[i]` is in the format ""HH:MM"".",Medium,https://leetcode.com/problems/minimum-time-difference,Palantir Technologies,String,663,,"given a list of 24-hour clock time points in ""hh:mm"" format, return the minimum minutes difference between any two time-points in the list.","input: timepoints = [""23:59"",""00:00""] output: 1 example 2: input: timepoints = [""00:00"",""23:59"",""00:00""] output: 0","`2 <= timepoints <= 2 * 10^4` `timepoints[i]` is in the format ""hh:mm"".",
540,Single Element in a Sorted Array,"You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

Follow up: Your solution should run in O(log n) time and O(1) space.


Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10

Constraints:
`1 <= nums.length <= 10^5`
`0 <= nums[i] <= 10^5`",Medium,https://leetcode.com/problems/single-element-in-a-sorted-array,"Amazon,Facebook,Twitter",Binary Search,2370,,"you are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. find this single element that appears only once.","input: nums = [1,1,2,3,3,4,4,8,8] output: 2 example 2: input: nums = [3,3,7,7,10,11,11] output: 10",`1 <= nums.length <= 10^5` `0 <= nums[i] <= 10^5`,"your solution should run in o(log n) time and o(1) space. example 1: input: nums = [1,1,2,3,3,4,4,8,8] output: 2 example 2: input: nums = [3,3,7,7,10,11,11] output: 10 constraints: `1 <= nums.length <= 10^5` `0 <= nums[i] <= 10^5`"
541,Reverse String II,"Given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string.

If there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and left the other as original.


Example 1:
Input: s = ""abcdefg"", k = 2
Output: ""bacdfeg""

Example 2:
Input: s = ""abcd"", k = 2
Output: ""bacd""

Constraints:
`1 <= s.length <= 104`
`s` consists of only lowercase English letters.

`1 <= k <= 104`",Easy,https://leetcode.com/problems/reverse-string-ii,Apple,String,583,"[Reverse String, /problems/reverse-string/, Easy], [Reverse Words in a String III, /problems/reverse-words-in-a-string-iii/, Easy]","given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string. if there are fewer than `k` characters left, reverse all of them. if there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and left the other as original.","input: s = ""abcdefg"", k = 2 output: ""bacdfeg"" example 2: input: s = ""abcd"", k = 2 output: ""bacd""",`1 <= s.length <= 10^4` `s` consists of only lowercase english letters. `1 <= k <= 10^4`,
542,01 Matrix,"Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.


Example 1: 
Input:
[[0,0,0],
 [0,1,0],
 [0,0,0]]
Output:
[[0,0,0],
 [0,1,0],
 [0,0,0]]

Example 2: 
Input:
[[0,0,0],
 [0,1,0],
 [1,1,1]]
Output:
[[0,0,0],
 [0,1,0],
 [1,2,1]]
Note:
The number of elements of the given matrix will not exceed 10,000.

There are at least one 0 in the given matrix.

The cells are adjacent in only four directions: up, down, left and right.",Medium,https://leetcode.com/problems/01-matrix,"Amazon,Microsoft","Depth-first Search,Breadth-first Search",2224,"[Shortest Path to Get Food, /problems/shortest-path-to-get-food/, Medium]","given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell. the distance between two adjacent cells is 1.","input: [[0,0,0], [0,1,0], [0,0,0]] output: [[0,0,0], [0,1,0], [0,0,0]] example 2: input: [[0,0,0], [0,1,0], [1,1,1]] output: [[0,0,0], [0,1,0], [1,2,1]] note: the number of elements of the given matrix will not exceed 10,000. there are at least one 0 in the given matrix. the cells are adjacent in only four directions: up, down, left and right.",,
543,Diameter of Binary Tree,"Given the `root` of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the `root`.

The length of a path between two nodes is represented by the number of edges between them.


Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3is the length of the path [4,2,1,3] or [5,2,1,3].


Example 2:
Input: root = [1,2]
Output: 1

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-100 <= Node.val <= 100`",Easy,https://leetcode.com/problems/diameter-of-binary-tree,"Facebook,Microsoft,Bloomberg,Amazon,Google,ByteDance,Oracle",Tree,4509,"[Diameter of N-Ary Tree, /problems/diameter-of-n-ary-tree/, Medium]","given the `root` of a binary tree, return the length of the diameter of the tree. the diameter of a binary tree is the length of the longest path between any two nodes in a tree. this path may or may not pass through the `root`. the length of a path between two nodes is represented by the number of edges between them.","input: root = [1,2,3,4,5] output: 3 explanation: 3is the length of the path [4,2,1,3] or [5,2,1,3]. example 2: input: root = [1,2] output: 1","the number of nodes in the tree is in the range `[1, 10^4]`. `-10^0 <= node.val <= 10^0`",
544,Output Contest Matches,"During the NBA playoffs, we always arrange the rather strong team to play with the rather weak team, like make the rank 1 team play with the rank nth team, which is a good strategy to make the contest more interesting. Now, you're given n teams, you need to output their final contest matches in the form of a string.

The n teams are given in the form of positive integers from 1 to n, which represents their initial rank. (Rank 1 is the strongest team and Rank n is the weakest team.) We'll use parentheses('(', ')') and commas(',') to represent the contest team pairing - parentheses('(' , ')') for pairing and commas(',') for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.


Example 1:
Input: 2
Output: (1,2)
Explanation: 
Initially, we have the team 1 and the team 2, placed like: 1,2.

Then we pair the team (1,2) together with '(', ')' and ',', which is the final answer.


Example 2:
Input: 4
Output: ((1,4),(2,3))
Explanation: 
In the first round, we pair the team 1 and 4, the team 2 and 3 together, as we need to make the strong team and weak team together.

And we got (1,4),(2,3).

In the second round, the winners of (1,4) and (2,3) need to play again to generate the final winner, so you need to add the paratheses outside them.

And we got the final answer ((1,4),(2,3)).


Example 3:
Input: 8
Output: (((1,8),(4,5)),((2,7),(3,6)))
Explanation: 
First round: (1,8),(2,7),(3,6),(4,5)
Second round: ((1,8),(4,5)),((2,7),(3,6))
Third round: (((1,8),(4,5)),((2,7),(3,6)))
Since the third round will generate the final winner, you need to output the answer (((1,8),(4,5)),((2,7),(3,6))).

Note:
The n is in range [2, 212].

We ensure that the input n can be converted into the form 2k, where k is a positive integer.",Medium,https://leetcode.com/problems/output-contest-matches,Google,"String,Recursion",307,,"during the nba playoffs, we always arrange the rather strong team to play with the rather weak team, like make the rank 1 team play with the rank nth team, which is a good strategy to make the contest more interesting. now, you're given n teams, you need to output their final contest matches in the form of a string. the n teams are given in the form of positive integers from 1 to n, which represents their initial rank. (rank 1 is the strongest team and rank n is the weakest team.) we'll use parentheses('(', ')') and commas(',') to represent the contest team pairing - parentheses('(' , ')') for pairing and commas(',') for partition. during the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.","input: 2 output: (1,2) explanation: initially, we have the team 1 and the team 2, placed like: 1,2. then we pair the team (1,2) together with '(', ')' and ',', which is the final answer. example 2: input: 4 output: ((1,4),(2,3)) explanation: in the first round, we pair the team 1 and 4, the team 2 and 3 together, as we need to make the strong team and weak team together. and we got (1,4),(2,3). in the second round, the winners of (1,4) and (2,3) need to play again to generate the final winner, so you need to add the paratheses outside them. and we got the final answer ((1,4),(2,3)). example 3: input: 8 output: (((1,8),(4,5)),((2,7),(3,6))) explanation: first round: (1,8),(2,7),(3,6),(4,5) second round: ((1,8),(4,5)),((2,7),(3,6)) third round: (((1,8),(4,5)),((2,7),(3,6))) since the third round will generate the final winner, you need to output the answer (((1,8),(4,5)),((2,7),(3,6))). note: the n is in range [2, 212]. we ensure that the input n can be converted into the form 2k, where k is a positive integer.",,
545,Boundary of Binary Tree,"The boundary of a binary tree is the concatenation of the root, the left boundary, the leaves ordered from left-to-right, and the reverse order of the right boundary.

The left boundary is the set of nodes defined by the following:
The root node's left child is in the left boundary. If the root does not have a left child, then the left boundary is empty.

If a node in the left boundary and has a left child, then the left child is in the left boundary.

If a node is in the left boundary, has no left child, but has a right child, then the right child is in the left boundary.

The leftmost leaf is not in the left boundary.

The right boundary is similar to the left boundary, except it is the right side of the root's right subtree. Again, the leaf is not part of the right boundary, and the right boundary is empty if the root does not have a right child.

The leaves are nodes that do not have any children. For this problem, the root is not a leaf.

Given the `root` of a binary tree, return the values of its boundary.


Example 1:
Input: root = [1,null,2,3,4]
Output: [1,3,4,2]
Explanation:
- The left boundary is empty because the root does not have a left child.

- The right boundary follows the path starting from the root's right child 2 -> 4.

  4 is a leaf, so the right boundary is [2].

- The leaves from left to right are [3,4].

Concatenating everything results in [1] + [] + [3,4] + [2] = [1,3,4,2].


Example 2:
Input: root = [1,2,3,4,5,6,null,null,null,7,8,9,10]
Output: [1,2,4,7,8,9,10,6,3]
Explanation:
- The left boundary follows the path starting from the root's left child 2 -> 4.

  4 is a leaf, so the left boundary is [2].

- The right boundary follows the path starting from the root's right child 3 -> 6 -> 10.

  10 is a leaf, so the right boundary is [3,6], and in reverse order is [6,3].

- The leaves from left to right are [4,7,8,9,10].

Concatenating everything results in [1] + [2] + [4,7,8,9,10] + [6,3] = [1,2,4,7,8,9,10,6,3].


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-1000 <= Node.val <= 1000`",Medium,https://leetcode.com/problems/boundary-of-binary-tree,"Microsoft,Amazon,eBay,Facebook,Oracle",Tree,735,"[Binary Tree Right Side View, /problems/binary-tree-right-side-view/, Medium]","the boundary of a binary tree is the concatenation of the root, the left boundary, the leaves ordered from left-to-right, and the reverse order of the right boundary. the left boundary is the set of nodes defined by the following: the root node's left child is in the left boundary. if the root does not have a left child, then the left boundary is empty. if a node in the left boundary and has a left child, then the left child is in the left boundary. if a node is in the left boundary, has no left child, but has a right child, then the right child is in the left boundary. the leftmost leaf is not in the left boundary. the right boundary is similar to the left boundary, except it is the right side of the root's right subtree. again, the leaf is not part of the right boundary, and the right boundary is empty if the root does not have a right child. the leaves are nodes that do not have any children. for this problem, the root is not a leaf. given the `root` of a binary tree, return the values of its boundary.","input: root = [1,null,2,3,4] output: [1,3,4,2] explanation: - the left boundary is empty because the root does not have a left child. - the right boundary follows the path starting from the root's right child 2 -> 4. 4 is a leaf, so the right boundary is [2]. - the leaves from left to right are [3,4]. concatenating everything results in [1] + [] + [3,4] + [2] = [1,3,4,2]. example 2: input: root = [1,2,3,4,5,6,null,null,null,7,8,9,10] output: [1,2,4,7,8,9,10,6,3] explanation: - the left boundary follows the path starting from the root's left child 2 -> 4. 4 is a leaf, so the left boundary is [2]. - the right boundary follows the path starting from the root's right child 3 -> 6 -> 10. 10 is a leaf, so the right boundary is [3,6], and in reverse order is [6,3]. - the leaves from left to right are [4,7,8,9,10]. concatenating everything results in [1] + [2] + [4,7,8,9,10] + [6,3] = [1,2,4,7,8,9,10,6,3].","the number of nodes in the tree is in the range `[1, 10^4]`. `-1000 <= node.val <= 1000`",
546,Remove Boxes,"You are given several `boxes` with different colors represented by different positive numbers.

You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of `k` boxes, `k >= 1`), remove them and get `k * k` points.

Return the maximum points you can get.


Example 1:
Input: boxes = [1,3,2,2,2,3,4,3,1]
Output: 23
Explanation:
[1, 3, 2, 2, 2, 3, 4, 3, 1] 
----> [1, 3, 3, 4, 3, 1] (3*3=9 points) 
----> [1, 3, 3, 3, 1] (1*1=1 points) 
----> [1, 1] (3*3=9 points) 
----> [] (2*2=4 points)

Example 2:
Input: boxes = [1,1,1]
Output: 9

Example 3:
Input: boxes = [1]
Output: 1

Constraints:
`1 <= boxes.length <= 100`
`1 <= boxes[i] <= 100`",Hard,https://leetcode.com/problems/remove-boxes,"Apple,Amazon","Dynamic Programming,Depth-first Search",847,"[Strange Printer, /problems/strange-printer/, Hard]","you are given several `boxes` with different colors represented by different positive numbers. you may experience several rounds to remove boxes until there is no box left. each time you can choose some continuous boxes with the same color (i.e., composed of `k` boxes, `k >= 1`), remove them and get `k * k` points. return the maximum points you can get.","input: boxes = [1,3,2,2,2,3,4,3,1] output: 23 explanation: [1, 3, 2, 2, 2, 3, 4, 3, 1] ----> [1, 3, 3, 4, 3, 1] (3*3=9 points) ----> [1, 3, 3, 3, 1] (1*1=1 points) ----> [1, 1] (3*3=9 points) ----> [] (2*2=4 points) example 2: input: boxes = [1,1,1] output: 9 example 3: input: boxes = [1] output: 1",`1 <= boxes.length <= 10^0` `1 <= boxes[i] <= 10^0`,
547,Number of Provinces,"There are `n` cities. Some of them are connected, while some are not. If city `a` is connected directly with city `b`, and city `b` is connected directly with city `c`, then city `a` is connected indirectly with city `c`.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if the `ith` city and the `jth` city are directly connected, and `isConnected[i][j] = 0` otherwise.

Return the total number of provinces.


Example 1:
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

Example 2:
Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3

Constraints:
`1 <= n <= 200`
`n == isConnected.length`
`n == isConnected[i].length`
`isConnected[i][j]` is `1` or `0`.

`isConnected[i][i] == 1`
`isConnected[i][j] == isConnected[j][i]`",Medium,https://leetcode.com/problems/number-of-provinces,"Amazon,Two Sigma,Goldman Sachs,Dropbox,Facebook,Audible","Depth-first Search,Union Find",2921,"[Number of Connected Components in an Undirected Graph, /problems/number-of-connected-components-in-an-undirected-graph/, Medium], [Robot Return to Origin, /problems/robot-return-to-origin/, Easy], [Sentence Similarity, /problems/sentence-similarity/, Easy], [Sentence Similarity II, /problems/sentence-similarity-ii/, Medium], [The Earliest Moment When Everyone Become Friends, /problems/the-earliest-moment-when-everyone-become-friends/, Medium]","there are `n` cities. some of them are connected, while some are not. if city `a` is connected directly with city `b`, and city `b` is connected directly with city `c`, then city `a` is connected indirectly with city `c`. a province is a group of directly or indirectly connected cities and no other cities outside of the group. you are given an `n x n` matrix `isconnected` where `isconnected[i][j] = 1` if the `ith` city and the `jth` city are directly connected, and `isconnected[i][j] = 0` otherwise. return the total number of provinces.","input: isconnected = [[1,1,0],[1,1,0],[0,0,1]] output: 2 example 2: input: isconnected = [[1,0,0],[0,1,0],[0,0,1]] output: 3",`1 <= n <= 200` `n == isconnected.length` `n == isconnected[i].length` `isconnected[i][j]` is `1` or `0`. `isconnected[i][i] == 1` `isconnected[i][j] == isconnected[j][i]`,
548,Split Array with Equal Sum,"Given an array with n integers, you need to find if there are triplets  (i, j, k) which satisfies following conditions:
 0 < i, i + 1 < j, j + 1 < k < n - 1 
 Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal. 
where we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.


Example:
Input: [1,2,1,2,1,2,1]
Output: True
Explanation:
i = 1, j = 3, k = 5. 
sum(0, i - 1) = sum(0, 0) = 1
sum(i + 1, j - 1) = sum(2, 2) = 1
sum(j + 1, k - 1) = sum(4, 4) = 1
sum(k + 1, n - 1) = sum(6, 6) = 1
Note:
 1 <= n <= 2000. 
 Elements in the given array will be in range [-1,000,000, 1,000,000].",Medium,https://leetcode.com/problems/split-array-with-equal-sum,Facebook,Array,286,"[Number of Ways to Split a String, /problems/number-of-ways-to-split-a-string/, Medium]","given an array with n integers, you need to find if there are triplets (i, j, k) which satisfies following conditions: 0 < i, i + 1 < j, j + 1 < k < n - 1 sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal. where we define that subarray (l, r) represents a slice of the original array starting from the element indexed l to the element indexed r.","input: [1,2,1,2,1,2,1] output: true explanation: i = 1, j = 3, k = 5. sum(0, i - 1) = sum(0, 0) = 1 sum(i + 1, j - 1) = sum(2, 2) = 1 sum(j + 1, k - 1) = sum(4, 4) = 1 sum(k + 1, n - 1) = sum(6, 6) = 1 note: 1 <= n <= 2000. elements in the given array will be in range [-1,000,000, 1,000,000].",,
549,Binary Tree Longest Consecutive Sequence II,"Given the `root` of a binary tree, return the length of the longest consecutive path in the tree.

This path can be either increasing or decreasing.

For example, `[1,2,3,4]` and `[4,3,2,1]` are both considered valid, but the path `[1,2,4,3]` is not valid.

On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.


Example 1:
Input: root = [1,2,3]
Output: 2
Explanation: The longest consecutive path is [1, 2] or [2, 1].


Example 2:
Input: root = [2,1,3]
Output: 3
Explanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1].


Constraints:
The number of nodes in the tree is in the range `[1, 3 * 104]`.

`-3 * 104 <= Node.val <= 3 * 104`",Medium,https://leetcode.com/problems/binary-tree-longest-consecutive-sequence-ii,"Facebook,Google",Tree,680,"[Binary Tree Longest Consecutive Sequence, /problems/binary-tree-longest-consecutive-sequence/, Medium]","given the `root` of a binary tree, return the length of the longest consecutive path in the tree. this path can be either increasing or decreasing. for example, `[1,2,3,4]` and `[4,3,2,1]` are both considered valid, but the path `[1,2,4,3]` is not valid. on the other hand, the path can be in the child-parent-child order, where not necessarily be parent-child order.","input: root = [1,2,3] output: 2 explanation: the longest consecutive path is [1, 2] or [2, 1]. example 2: input: root = [2,1,3] output: 3 explanation: the longest consecutive path is [1, 2, 3] or [3, 2, 1].","the number of nodes in the tree is in the range `[1, 3 * 10^4]`. `-3 * 10^4 <= node.val <= 3 * 10^4`",
550,Game Play Analysis IV,SQL Schema,Medium,https://leetcode.com/problems/game-play-analysis-iv,"Facebook,GSN Games",,112,,sql schema,,,
551,Student Attendance Record I,"You are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:
`'A'`: Absent.

`'L'`: Late.

`'P'`: Present.

The student is eligible for an attendance award if they meet both of the following criteria:
The student was absent (`'A'`) for strictly fewer than 2 days total.

The student was never late (`'L'`) for 3 or more consecutive days.

Return `true` if the student is eligible for an attendance award, or `false` otherwise.


Example 1:
Input: s = ""PPALLP""
Output: true
Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.


Example 2:
Input: s = ""PPALLL""
Output: false
Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.


Constraints:
`1 <= s.length <= 1000`
`s[i]` is either `'A'`, `'L'`, or `'P'`.",Easy,https://leetcode.com/problems/student-attendance-record-i,Google,String,18,"[Student Attendance Record II, /problems/student-attendance-record-ii/, Hard]","you are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. the record only contains the following three characters: `'a'`: absent. `'l'`: late. `'p'`: present. the student is eligible for an attendance award if they meet both of the following criteria: the student was absent (`'a'`) for strictly fewer than 2 days total. the student was never late (`'l'`) for 3 or more consecutive days. return `true` if the student is eligible for an attendance award, or `false` otherwise.","input: s = ""ppallp"" output: true explanation: the student has fewer than 2 absences and was never late 3 or more consecutive days. example 2: input: s = ""ppalll"" output: false explanation: the student was late 3 consecutive days in the last 3 days, so is not eligible for the award.","`1 <= s.length <= 1000` `s[i]` is either `'a'`, `'l'`, or `'p'`.",
552,Student Attendance Record II,"An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:
`'A'`: Absent.

`'L'`: Late.

`'P'`: Present.

Any student is eligible for an attendance award if they meet both of the following criteria:
The student was absent (`'A'`) for strictly fewer than 2 days total.

The student was never late (`'L'`) for 3 or more consecutive days.

Given an integer `n`, return the number of possible attendance records of length `n` that make a student eligible for an attendance award. The answer may be very large, so return it modulo `109 + 7`.


Example 1:
Input: n = 2
Output: 8
Explanation: There are 8 records with length 2 that are eligible for an award:
""PP"", ""AP"", ""PA"", ""LP"", ""PL"", ""AL"", ""LA"", ""LL""
Only ""AA"" is not eligible because there are 2 absences (there need to be fewer than 2).


Example 2:
Input: n = 1
Output: 3

Example 3:
Input: n = 10101
Output: 183236316

Constraints:
`1 <= n <= 105`",Hard,https://leetcode.com/problems/student-attendance-record-ii,Google,Dynamic Programming,719,"[Student Attendance Record I, /problems/student-attendance-record-i/, Easy]","an attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. the record only contains the following three characters: `'a'`: absent. `'l'`: late. `'p'`: present. any student is eligible for an attendance award if they meet both of the following criteria: the student was absent (`'a'`) for strictly fewer than 2 days total. the student was never late (`'l'`) for 3 or more consecutive days. given an integer `n`, return the number of possible attendance records of length `n` that make a student eligible for an attendance award. the answer may be very large, so return it modulo `109 + 7`.","input: n = 2 output: 8 explanation: there are 8 records with length 2 that are eligible for an award: ""pp"", ""ap"", ""pa"", ""lp"", ""pl"", ""al"", ""la"", ""ll"" only ""aa"" is not eligible because there are 2 absences (there need to be fewer than 2). example 2: input: n = 1 output: 3 example 3: input: n = 10101 output: 183236316",`1 <= n <= 10^5`,
553,Optimal Division,"Given a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.

However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.


Example:
Input: [1000,100,10,2]
Output: ""1000/(100/10/2)""
Explanation:
1000/(100/10/2) = 1000/((100/10)/2) = 200
However, the bold parenthesis in ""1000/((100/10)/2)"" are redundant, since they don't influence the operation priority. So you should return ""1000/(100/10/2)"". 
Other cases:
1000/(100/10)/2 = 50
1000/(100/(10/2)) = 50
1000/100/10/2 = 0.5
1000/100/(10/2) = 2
Note:
The length of the input array is [1, 10].

Elements in the given array will be in range [2, 1000].

There is only one optimal division for each test case.",Medium,https://leetcode.com/problems/optimal-division,Amazon,"Math,String",197,,"given a list of positive integers, the adjacent integers will perform the float division. for example, [2,3,4] -> 2 / 3 / 4. however, you can add any number of parenthesis at any position to change the priority of operations. you should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. your expression should not contain redundant parenthesis.","input: [1000,100,10,2] output: ""1000/(100/10/2)"" explanation: 1000/(100/10/2) = 1000/((100/10)/2) = 200 however, the bold parenthesis in ""1000/((100/10)/2)"" are redundant, since they don't influence the operation priority. so you should return ""1000/(100/10/2)"". other cases: 1000/(100/10)/2 = 50 1000/(100/(10/2)) = 50 1000/100/10/2 = 0.5 1000/100/(10/2) = 2 note: the length of the input array is [1, 10]. elements in the given array will be in range [2, 1000]. there is only one optimal division for each test case.",,
554,Brick Wall,"There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks.

The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.

If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks.

You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. 

Example:
Input: [[1,2,2,1],
        [3,1,2],
        [1,3,2],
        [2,4],
        [3,1,2],
        [1,3,1,1]]
Output: 2
Explanation: 
Note:
The width sum of bricks in different rows are the same and won't exceed INT_MAX.

The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won't exceed 20,000.",Medium,https://leetcode.com/problems/brick-wall,Oracle,Hash Table,1148,,"there is a brick wall in front of you. the wall is rectangular and has several rows of bricks. the bricks have the same height but different width. you want to draw a vertical line from the top to the bottom and cross the least bricks. the brick wall is represented by a list of rows. each row is a list of integers representing the width of each brick in this row from left to right. if your line go through the edge of a brick, then the brick is not considered as crossed. you need to find out how to draw the line to cross the least bricks and return the number of crossed bricks. you cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks.","input: [[1,2,2,1], [3,1,2], [1,3,2], [2,4], [3,1,2], [1,3,1,1]] output: 2 explanation: note: the width sum of bricks in different rows are the same and won't exceed int_max. the number of bricks in each row is in range [1,10,000]. the height of wall is in range [1,10,000]. total number of bricks of the wall won't exceed 20,000.",,
555,Split Concatenated Strings,"Given a list of strings, you could concatenate these strings together into a loop, where for each string you could choose to reverse it or not. Among all the possible loops, you need to find the lexicographically biggest string after cutting the loop, which will make the looped string into a regular one.

Specifically, to find the lexicographically biggest string, you need to experience two phases: 
Concatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.

Cut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint. 
And your job is to find the lexicographically biggest one among all the possible regular strings.


Example:
Input: ""abc"", ""xyz""
Output: ""zyxcba""
Explanation: You can get the looped string ""-abcxyz-"", ""-abczyx-"", ""-cbaxyz-"", ""-cbazyx-"", where '-' represents the looped status. The answer string came from the fourth looped one, where you could cut from the middle character 'a' and get ""zyxcba"".

Note:
The input strings will only contain lowercase letters.

The total length of all the strings will not over 1,000.",Medium,https://leetcode.com/problems/split-concatenated-strings,Alibaba,String,60,,"given a list of strings, you could concatenate these strings together into a loop, where for each string you could choose to reverse it or not. among all the possible loops, you need to find the lexicographically biggest string after cutting the loop, which will make the looped string into a regular one. specifically, to find the lexicographically biggest string, you need to experience two phases: concatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given. cut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint. and your job is to find the lexicographically biggest one among all the possible regular strings.","input: ""abc"", ""xyz"" output: ""zyxcba"" explanation: you can get the looped string ""-abcxyz-"", ""-abczyx-"", ""-cbaxyz-"", ""-cbazyx-"", where '-' represents the looped status. the answer string came from the fourth looped one, where you could cut from the middle character 'a' and get ""zyxcba"". note: the input strings will only contain lowercase letters. the total length of all the strings will not over 1,000.",,
556,Next Greater Element III,"Given a positive integer `n`, find the smallest integer which has exactly the same digits existing in the integer `n` and is greater in value than `n`. If no such positive integer exists, return `-1`.

Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return `-1`.


Example 1:
Input: n = 12
Output: 21

Example 2:
Input: n = 21
Output: -1

Constraints:
`1 <= n <= 231 - 1`",Medium,https://leetcode.com/problems/next-greater-element-iii,ByteDance,String,1142,"[Next Greater Element I, /problems/next-greater-element-i/, Easy], [Next Greater Element II, /problems/next-greater-element-ii/, Medium]","given a positive integer `n`, find the smallest integer which has exactly the same digits existing in the integer `n` and is greater in value than `n`. if no such positive integer exists, return `-1`. note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return `-1`.",input: n = 12 output: 21 example 2: input: n = 21 output: -1,`1 <= n <= 231 - 1`,
557,Reverse Words in a String III,"Given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.


Example 1:
Input: s = ""Let's take LeetCode contest""
Output: ""s'teL ekat edoCteeL tsetnoc""

Example 2:
Input: s = ""God Ding""
Output: ""doG gniD""

Constraints:
`1 <= s.length <= 5 * 104`
`s` contains printable ASCII characters.

`s` does not contain any leading or trailing spaces.

There is at least one word in `s`.

All the words in `s` are separated by a single space.",Easy,https://leetcode.com/problems/reverse-words-in-a-string-iii,"Amazon,Bloomberg",String,1420,"[Reverse String II, /problems/reverse-string-ii/, Easy]","given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.","input: s = ""let's take leetcode contest"" output: ""s'tel ekat edocteel tsetnoc"" example 2: input: s = ""god ding"" output: ""dog gnid""",`1 <= s.length <= 5 * 10^4` `s` contains printable ascii characters. `s` does not contain any leading or trailing spaces. there is at least one word in `s`. all the words in `s` are separated by a single space.,
558,Logical OR of Two Binary Grids Represented as Quad-Trees,"A Binary Matrix is a matrix in which all the elements are either 0 or 1.

Given `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary matrix and `quadTree2` represents another `n * n` binary matrix. 
Return a Quad-Tree representing the `n * n` binary matrix which is the result of logical bitwise OR of the two binary matrixes represented by `quadTree1` and `quadTree2`.

Notice that you can assign the value of a node to True or False when `isLeaf` is False, and both are accepted in the answer.

A Quad-Tree is a tree data structure in which each internal node has exactly four children. Besides, each node has two attributes:
`val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. 
`isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.

class Node {
    public boolean val;
    public boolean isLeaf;
    public Node topLeft;
    public Node topRight;
    public Node bottomLeft;
    public Node bottomRight;
}
We can construct a Quad-Tree from a two-dimensional area using the following steps:
If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.

If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.

Recurse for each of the children with the proper sub-grid.

If you want to know more about the Quad-Tree, you can refer to the wiki.

Quad-Tree format:
The input/output represents the serialized format of a Quad-Tree using level order traversal, where `null` signifies a path terminator where no node exists below.

It is very similar to the serialization of the binary tree. The only difference is that the node is represented as a list `[isLeaf, val]`.

If the value of `isLeaf` or `val` is True we represent it as 1 in the list `[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it as 0.


Example 1:
Input: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]
, quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
Output: [[0,0],[1,1],[1,1],[1,1],[1,0]]
Explanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.

If we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.

Notice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.


Example 2:
Input: quadTree1 = [[1,0]]
, quadTree2 = [[1,0]]
Output: [[1,0]]
Explanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.

The resulting matrix is of size 1*1 with also zero.


Example 3:
Input: quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]
, quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]
Output: [[1,1]]

Example 4:
Input: quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]
, quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]
Output: [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]

Example 5:
Input: quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]
, quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]
Output: [[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]

Constraints:
`quadTree1` and `quadTree2` are both valid Quad-Trees each representing a `n * n` grid.

`n == 2^x` where `0 <= x <= 9`.",Medium,https://leetcode.com/problems/logical-or-of-two-binary-grids-represented-as-quad-trees,Sumologic,,111,,"a binary matrix is a matrix in which all the elements are either 0 or 1. given `quadtree1` and `quadtree2`. `quadtree1` represents a `n * n` binary matrix and `quadtree2` represents another `n * n` binary matrix. return a quad-tree representing the `n * n` binary matrix which is the result of logical bitwise or of the two binary matrixes represented by `quadtree1` and `quadtree2`. notice that you can assign the value of a node to true or false when `isleaf` is false, and both are accepted in the answer. a quad-tree is a tree data structure in which each internal node has exactly four children. besides, each node has two attributes: `val`: true if the node represents a grid of 1's or false if the node represents a grid of 0's. `isleaf`: true if the node is leaf node on the tree or false if the node has the four children. class node { public boolean val; public boolean isleaf; public node topleft; public node topright; public node bottomleft; public node bottomright; } we can construct a quad-tree from a two-dimensional area using the following steps: if the current grid has the same value (i.e all `1's` or all `0's`) set `isleaf` true and set `val` to the value of the grid and set the four children to null and stop. if the current grid has different values, set `isleaf` to false and set `val` to any value and divide the current grid into four sub-grids as shown in the photo. recurse for each of the children with the proper sub-grid. if you want to know more about the quad-tree, you can refer to the wiki. quad-tree format: the input/output represents the serialized format of a quad-tree using level order traversal, where `null` signifies a path terminator where no node exists below. it is very similar to the serialization of the binary tree. the only difference is that the node is represented as a list `[isleaf, val]`. if the value of `isleaf` or `val` is true we represent it as 1 in the list `[isleaf, val]` and if the value of `isleaf` or `val` is false we represent it as 0.","input: quadtree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]] , quadtree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] output: [[0,0],[1,1],[1,1],[1,1],[1,0]] explanation: quadtree1 and quadtree2 are shown above. you can see the binary matrix which is represented by each quad-tree. if we apply logical bitwise or on the two binary matrices we get the binary matrix below which is represented by the result quad-tree. notice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree. example 2: input: quadtree1 = [[1,0]] , quadtree2 = [[1,0]] output: [[1,0]] explanation: each tree represents a binary matrix of size 1*1. each matrix contains only zero. the resulting matrix is of size 1*1 with also zero. example 3: input: quadtree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]] , quadtree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]] output: [[1,1]] example 4: input: quadtree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]] , quadtree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]] output: [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]] example 5: input: quadtree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]] , quadtree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]] output: [[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]",`quadtree1` and `quadtree2` are both valid quad-trees each representing a `n * n` grid. `n == 2^x` where `0 <= x <= 9`.,
559,Maximum Depth of N-ary Tree,"Given a n-ary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).


Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: 3

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: 5

Constraints:
The depth of the n-ary tree is less than or equal to `1000`.

The total number of nodes is between `[0, 104]`.",Easy,https://leetcode.com/problems/maximum-depth-of-n-ary-tree,"Google,Amazon","Tree,Depth-first Search,Breadth-first Search",1295,"[Maximum Depth of Binary Tree, /problems/maximum-depth-of-binary-tree/, Easy]","given a n-ary tree, find its maximum depth. the maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node. nary-tree input serialization is represented in their level order traversal, each group of children is separated by the null value (see examples).","input: root = [1,null,3,2,4,null,5,6] output: 3 example 2: input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: 5","the depth of the n-ary tree is less than or equal to `1000`. the total number of nodes is between `[0, 10^4]`.",
560,Subarray Sum Equals K,"Given an array of integers `nums` and an integer `k`, return the total number of continuous subarrays whose sum equals to `k`.


Example 1:
Input: nums = [1,1,1], k = 2
Output: 2

Example 2:
Input: nums = [1,2,3], k = 3
Output: 2

Constraints:
`1 <= nums.length <= 2 * 104`
`-1000 <= nums[i] <= 1000`
`-107 <= k <= 107`",Medium,https://leetcode.com/problems/subarray-sum-equals-k,"Facebook,Yandex,Amazon,Bloomberg,Microsoft,ByteDance,Google,Adobe,Oracle","Array,Hash Table",6966,"[Two Sum, /problems/two-sum/, Easy], [Continuous Subarray Sum, /problems/continuous-subarray-sum/, Medium], [Subarray Product Less Than K, /problems/subarray-product-less-than-k/, Medium], [Find Pivot Index, /problems/find-pivot-index/, Easy], [Subarray Sums Divisible by K, /problems/subarray-sums-divisible-by-k/, Medium], [Minimum Operations to Reduce X to Zero, /problems/minimum-operations-to-reduce-x-to-zero/, Medium]","given an array of integers `nums` and an integer `k`, return the total number of continuous subarrays whose sum equals to `k`.","input: nums = [1,1,1], k = 2 output: 2 example 2: input: nums = [1,2,3], k = 3 output: 2",`1 <= nums.length <= 2 * 10^4` `-1000 <= nums[i] <= 1000` `-10^7 <= k <= 10^7`,
561,Array Partition I,"Given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is maximized. Return the maximized sum.


Example 1:
Input: nums = [1,4,3,2]
Output: 4
Explanation: All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.


Example 2:
Input: nums = [6,2,6,5,1,2]
Output: 9
Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.


Constraints:
`1 <= n <= 104`
`nums.length == 2 * n`
`-104 <= nums[i] <= 104`",Easy,https://leetcode.com/problems/array-partition-i,Apple,Array,186,,"given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is maximized. return the maximized sum.","input: nums = [1,4,3,2] output: 4 explanation: all possible pairings (ignoring the ordering of elements) are: 1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3 2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3 3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4 so the maximum possible sum is 4. example 2: input: nums = [6,2,6,5,1,2] output: 9 explanation: the optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.",`1 <= n <= 10^4` `nums.length == 2 * n` `-10^4 <= nums[i] <= 10^4`,
562,Longest Line of Consecutive One in Matrix,"Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.


Example:
Input:
[[0,1,1,0],
 [0,1,1,0],
 [0,0,0,1]]
Output: 3
Hint:
The number of elements in the given matrix will not exceed 10,000.",Medium,https://leetcode.com/problems/longest-line-of-consecutive-one-in-matrix,Google,Array,460,,"given a 01 matrix m, find the longest line of consecutive one in the matrix. the line could be horizontal, vertical, diagonal or anti-diagonal.","input: [[0,1,1,0], [0,1,1,0], [0,0,0,1]] output: 3 hint: the number of elements in the given matrix will not exceed 10,000.",,
563,Binary Tree Tilt,"Given the `root` of a binary tree, return the sum of every tree node's tilt.

The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as `0`. The rule is similar if there the node does not have a right child.


Example 1:
Input: root = [1,2,3]
Output: 1
Explanation: 
Tilt of node 2 : |0-0| = 0 (no children)
Tilt of node 3 : |0-0| = 0 (no children)
Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)
Sum of every tilt : 0 + 0 + 1 = 1

Example 2:
Input: root = [4,2,9,3,5,null,7]
Output: 15
Explanation: 
Tilt of node 3 : |0-0| = 0 (no children)
Tilt of node 5 : |0-0| = 0 (no children)
Tilt of node 7 : |0-0| = 0 (no children)
Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)
Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)
Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)
Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15

Example 3:
Input: root = [21,7,14,1,1,2,2,3,3]
Output: 9

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-1000 <= Node.val <= 1000`",Easy,https://leetcode.com/problems/binary-tree-tilt,Indeed,"Tree,Depth-first Search,Recursion",860,"[Find All The Lonely Nodes, /problems/find-all-the-lonely-nodes/, Easy]","given the `root` of a binary tree, return the sum of every tree node's tilt. the tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. if a node does not have a left child, then the sum of the left subtree node values is treated as `0`. the rule is similar if there the node does not have a right child.","input: root = [1,2,3] output: 1 explanation: tilt of node 2 : |0-0| = 0 (no children) tilt of node 3 : |0-0| = 0 (no children) tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3) sum of every tilt : 0 + 0 + 1 = 1 example 2: input: root = [4,2,9,3,5,null,7] output: 15 explanation: tilt of node 3 : |0-0| = 0 (no children) tilt of node 5 : |0-0| = 0 (no children) tilt of node 7 : |0-0| = 0 (no children) tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5) tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7) tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16) sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15 example 3: input: root = [21,7,14,1,1,2,2,3,3] output: 9","the number of nodes in the tree is in the range `[0, 10^4]`. `-1000 <= node.val <= 1000`",
564,Find the Closest Palindrome,"Given an integer n, find the closest integer (not including itself), which is a palindrome. 
The 'closest' is defined as absolute difference minimized between two integers.


Example 1:
Input: ""123""
Output: ""121""
Note:
The input n is a positive integer represented by string, whose length will not exceed 18.

If there is a tie, return the smaller one as answer.",Hard,https://leetcode.com/problems/find-the-closest-palindrome,"Microsoft,Amazon",String,352,,"given an integer n, find the closest integer (not including itself), which is a palindrome. the 'closest' is defined as absolute difference minimized between two integers.","input: ""123"" output: ""121"" note: the input n is a positive integer represented by string, whose length will not exceed 18. if there is a tie, return the smaller one as answer.",,
565,Array Nesting,"A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.

Suppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]... By that analogy, we stop adding right before a duplicate element occurs in S.


Example 1:
Input: A = [5,4,0,3,1,6,2]
Output: 4
Explanation: 
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.

One of the longest S[K]:
S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
Note:
N is an integer within the range [1, 20,000].

The elements of A are all distinct.

Each element of A is an integer within the range [0, N-1].",Medium,https://leetcode.com/problems/array-nesting,Adobe,Array,1024,"[Nested List Weight Sum, /problems/nested-list-weight-sum/, Medium], [Flatten Nested List Iterator, /problems/flatten-nested-list-iterator/, Medium], [Nested List Weight Sum II, /problems/nested-list-weight-sum-ii/, Medium]","a zero-indexed array a of length n contains all integers from 0 to n-1. find and return the longest length of set s, where s[i] = {a[i], a[a[i]], a[a[a[i]]], ... } subjected to the rule below. suppose the first element in s starts with the selection of element a[i] of index = i, the next element in s should be a[a[i]], and then a[a[a[i]]]... by that analogy, we stop adding right before a duplicate element occurs in s.","input: a = [5,4,0,3,1,6,2] output: 4 explanation: a[0] = 5, a[1] = 4, a[2] = 0, a[3] = 3, a[4] = 1, a[5] = 6, a[6] = 2. one of the longest s[k]: s[0] = {a[0], a[5], a[6], a[2]} = {5, 6, 2, 0} note: n is an integer within the range [1, 20,000]. the elements of a are all distinct. each element of a is an integer within the range [0, n-1].",,
566,Reshape the Matrix,"In MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different size but keep its original data.

You're given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.

The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.


Example 1:
Input: 
nums = 
[[1,2],
 [3,4]]
r = 1, c = 4
Output: 
[[1,2,3,4]]
Explanation:The row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.


Example 2:
Input: 
nums = 
[[1,2],
 [3,4]]
r = 2, c = 4
Output: 
[[1,2],
 [3,4]]
Explanation:There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.

Note:
The height and width of the given matrix is in range [1, 100].

The given r and c are all positive.",Easy,https://leetcode.com/problems/reshape-the-matrix,Mathworks,Array,963,,"in matlab, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different size but keep its original data. you're given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively. the reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were. if the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; otherwise, output the original matrix.","input: nums = [[1,2], [3,4]] r = 1, c = 4 output: [[1,2,3,4]] explanation:the row-traversing of nums is [1,2,3,4]. the new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list. example 2: input: nums = [[1,2], [3,4]] r = 2, c = 4 output: [[1,2], [3,4]] explanation:there is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. so output the original matrix. note: the height and width of the given matrix is in range [1, 100]. the given r and c are all positive.",,
567,Permutation in String,"Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.


Example 1:
Input: s1 = ""ab"" s2 = ""eidbaooo""
Output: True
Explanation: s2 contains one permutation of s1 (""ba"").


Example 2:
Input:s1= ""ab"" s2 = ""eidboaoo""
Output: False

Constraints:
The input strings only contain lower case letters.

The length of both given strings is in range [1, 10,000].",Medium,https://leetcode.com/problems/permutation-in-string,"Facebook,Microsoft,Adobe,Amazon,Yandex","Two Pointers,Sliding Window",2325,"[Minimum Window Substring, /problems/minimum-window-substring/, Hard], [Find All Anagrams in a String, /problems/find-all-anagrams-in-a-string/, Medium]","given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. in other words, one of the first string's permutations is the substring of the second string.","input: s1 = ""ab"" s2 = ""eidbaooo"" output: true explanation: s2 contains one permutation of s1 (""ba""). example 2: input:s1= ""ab"" s2 = ""eidboaoo"" output: false","the input strings only contain lower case letters. the length of both given strings is in range [1, 10,000].",
568,Maximum Vacation Days,"LeetCode wants to give one of its best employees the option to travel among N cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.

Rules and restrictions:
You can only travel among N cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on Monday.

The cities are connected by flights. The flights are represented as a N*N matrix (not necessary symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] = 0; Otherwise, flights[i][j] = 1. Also, flights[i][i] = 0 for all i.

You totally have K weeks (each week has 7 days) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we don't consider the impact of flight time.

For each city, you can only have restricted vacation days in different weeks, given an N*K matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take vacation in the city i in the week j.

You're given the flights matrix and days matrix, and you need to output the maximum vacation days you could take during K weeks.


Example 1:
Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]
Output: 12
Explanation: Ans = 6 + 3 + 3 = 12. 
One of the best strategies is:
1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day. (Although you start at city 0, we could also fly to and start at other cities since it is Monday.) 
2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.

3rd week : stay at city 2, and play 3 days and work 4 days.


Example 2:
Input:flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]
Output: 3
Explanation: Ans = 1 + 1 + 1 = 3. 
Since there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. For each week, you only have one day to play and six days to work. So the maximum number of vacation days is 3.


Example 3:
Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]
Output: 21
Explanation:Ans = 7 + 7 + 7 = 21
One of the best strategies is:
1st week : stay at city 0, and play 7 days. 
2nd week : fly from city 0 to city 1 on Monday, and play 7 days.

3rd week : fly from city 1 to city 2 on Monday, and play 7 days.

Note:
N and K are positive integers, which are in the range of [1, 100].

In the matrix flights, all the values are integers in the range of [0, 1].

In the matrix days, all the values are integers in the range [0, 7].

You could stay at a city beyond the number of vacation days, but you should work on the extra days, which won't be counted as vacation days.

If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.

We don't consider the impact of flight hours towards the calculation of vacation days.",Hard,https://leetcode.com/problems/maximum-vacation-days,"Google,Facebook",Dynamic Programming,365,"[Cheapest Flights Within K Stops, /problems/cheapest-flights-within-k-stops/, Medium]","leetcode wants to give one of its best employees the option to travel among n cities to collect algorithm problems. but all work and no play makes jack a dull boy, you could take vacations in some particular cities and weeks. your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow. rules and restrictions: you can only travel among n cities, represented by indexes from 0 to n-1. initially, you are in the city indexed 0 on monday. the cities are connected by flights. the flights are represented as a n*n matrix (not necessary symmetrical), called flights representing the airline status from the city i to the city j. if there is no flight from the city i to the city j, flights[i][j] = 0; otherwise, flights[i][j] = 1. also, flights[i][i] = 0 for all i. you totally have k weeks (each week has 7 days) to travel. you can only take flights at most once per day and can only take flights on each week's monday morning. since flight time is so short, we don't consider the impact of flight time. for each city, you can only have restricted vacation days in different weeks, given an n*k matrix called days representing this relationship. for the value of days[i][j], it represents the maximum days you could take vacation in the city i in the week j. you're given the flights matrix and days matrix, and you need to output the maximum vacation days you could take during k weeks.","input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]] output: 12 explanation: ans = 6 + 3 + 3 = 12. one of the best strategies is: 1st week : fly from city 0 to city 1 on monday, and play 6 days and work 1 day. (although you start at city 0, we could also fly to and start at other cities since it is monday.) 2nd week : fly from city 1 to city 2 on monday, and play 3 days and work 4 days. 3rd week : stay at city 2, and play 3 days and work 4 days. example 2: input:flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]] output: 3 explanation: ans = 1 + 1 + 1 = 3. since there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. for each week, you only have one day to play and six days to work. so the maximum number of vacation days is 3. example 3: input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]] output: 21 explanation:ans = 7 + 7 + 7 = 21 one of the best strategies is: 1st week : stay at city 0, and play 7 days. 2nd week : fly from city 0 to city 1 on monday, and play 7 days. 3rd week : fly from city 1 to city 2 on monday, and play 7 days. note: n and k are positive integers, which are in the range of [1, 100]. in the matrix flights, all the values are integers in the range of [0, 1]. in the matrix days, all the values are integers in the range [0, 7]. you could stay at a city beyond the number of vacation days, but you should work on the extra days, which won't be counted as vacation days. if you fly from the city a to the city b and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city b in that week. we don't consider the impact of flight hours towards the calculation of vacation days.",,
569,Median Employee Salary,SQL Schema,Hard,https://leetcode.com/problems/median-employee-salary,Google,,131,,sql schema,,,
570,Managers with at Least 5 Direct Reports,SQL Schema,Medium,https://leetcode.com/problems/managers-with-at-least-5-direct-reports,Amazon,,145,,sql schema,,,
571,Find Median Given Frequency of Numbers,SQL Schema,Hard,https://leetcode.com/problems/find-median-given-frequency-of-numbers,Pinterest,,138,,sql schema,,,
572,Subtree of Another Tree,"Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.


Example 1:
Given tree s:
     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.


Example 2:
Given tree s:
     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2
Return false.",Easy,https://leetcode.com/problems/subtree-of-another-tree,"Amazon,Microsoft,Facebook",Tree,3297,"[Count Univalue Subtrees, /problems/count-univalue-subtrees/, Medium], [Most Frequent Subtree Sum, /problems/most-frequent-subtree-sum/, Medium]","given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. a subtree of s is a tree consists of a node in s and all of this node's descendants. the tree s could also be considered as a subtree of itself.","given tree s: 3 / \ 4 5 / \ 1 2 given tree t: 4 / \ 1 2 return true, because t has the same structure and node values with a subtree of s. example 2: given tree s: 3 / \ 4 5 / \ 1 2 / 0 given tree t: 4 / \ 1 2 return false.",,
573,Squirrel Simulation,"There's a tree, a squirrel, and several nuts. Positions are represented by the cells in a 2D grid. Your goal is to find the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one. The squirrel can only take at most one nut at one time and can move in four directions - up, down, left and right, to the adjacent cell. The distance is represented by the number of moves.


Example 1:
Input: 
Height : 5
Width : 7
Tree position : [2,2]
Squirrel : [4,4]
Nuts : [[3,0], [2,5]]
Output: 12
Explanation:
​​​​​
Note:
All given positions won't overlap.

The squirrel can take at most one nut at one time.

The given positions of nuts have no order.

Height and width are positive integers. 3 <= height * width <= 10,000.

The given positions contain at least one nut, only one tree and one squirrel.",Medium,https://leetcode.com/problems/squirrel-simulation,Square,Math,273,,"there's a tree, a squirrel, and several nuts. positions are represented by the cells in a 2d grid. your goal is to find the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one. the squirrel can only take at most one nut at one time and can move in four directions - up, down, left and right, to the adjacent cell. the distance is represented by the number of moves.","input: height : 5 width : 7 tree position : [2,2] squirrel : [4,4] nuts : [[3,0], [2,5]] output: 12 explanation: ​​​​​ note: all given positions won't overlap. the squirrel can take at most one nut at one time. the given positions of nuts have no order. height and width are positive integers. 3 <= height * width <= 10,000. the given positions contain at least one nut, only one tree and one squirrel.",,
574,Winning Candidate,SQL Schema,Medium,https://leetcode.com/problems/winning-candidate,,,85,,sql schema,,,
575,Distribute Candies,"Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice noticed that she started to gain weight, so she visited a doctor.

The doctor advised Alice to only eat `n / 2` of the candies she has (`n` is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.

Given the integer array `candyType` of length `n`, return the maximum number of different types of candies she can eat if she only eats `n / 2` of them.


Example 1:
Input: candyType = [1,1,2,2,3,3]
Output: 3
Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.


Example 2:
Input: candyType = [1,1,2,3]
Output: 2
Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.


Example 3:
Input: candyType = [6,6,6,6]
Output: 1
Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.


Constraints:
`n == candyType.length`
`2 <= n <= 104`
`n` is even.

`-105 <= candyType[i] <= 105`",Easy,https://leetcode.com/problems/distribute-candies,"Microsoft,LiveRamp",Hash Table,727,,"alice has `n` candies, where the `ith` candy is of type `candytype[i]`. alice noticed that she started to gain weight, so she visited a doctor. the doctor advised alice to only eat `n / 2` of the candies she has (`n` is always even). alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice. given the integer array `candytype` of length `n`, return the maximum number of different types of candies she can eat if she only eats `n / 2` of them.","input: candytype = [1,1,2,2,3,3] output: 3 explanation: alice can only eat 6 / 2 = 3 candies. since there are only 3 types, she can eat one of each type. example 2: input: candytype = [1,1,2,3] output: 2 explanation: alice can only eat 4 / 2 = 2 candies. whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types. example 3: input: candytype = [6,6,6,6] output: 1 explanation: alice can only eat 4 / 2 = 2 candies. even though she can eat 2 candies, she only has 1 type.",`n == candytype.length` `2 <= n <= 10^4` `n` is even. `-10^5 <= candytype[i] <= 10^5`,
576,Out of Boundary Paths,"There is an m by n grid with a ball. Given the start coordinate (i,j) of the ball, you can move the ball to adjacent cell or cross the grid boundary in four directions (up, down, left, right). However, you can at most move N times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 109 + 7.


Example 1:
Input: m = 2, n = 2, N = 2, i = 0, j = 0
Output: 6
Explanation:

Example 2:
Input: m = 1, n = 3, N = 3, i = 0, j = 1
Output: 12
Explanation:
Note:
Once you move the ball out of boundary, you cannot move it back.

The length and height of the grid is in range [1,50].

N is in range [0,50].",Medium,https://leetcode.com/problems/out-of-boundary-paths,Amazon,"Dynamic Programming,Depth-first Search",747,"[Knight Probability in Chessboard, /problems/knight-probability-in-chessboard/, Medium]","there is an m by n grid with a ball. given the start coordinate (i,j) of the ball, you can move the ball to adjacent cell or cross the grid boundary in four directions (up, down, left, right). however, you can at most move n times. find out the number of paths to move the ball out of grid boundary. the answer may be very large, return it after mod 109 + 7.","input: m = 2, n = 2, n = 2, i = 0, j = 0 output: 6 explanation: example 2: input: m = 1, n = 3, n = 3, i = 0, j = 1 output: 12 explanation: note: once you move the ball out of boundary, you cannot move it back. the length and height of the grid is in range [1,50]. n is in range [0,50].",,
577,Employee Bonus,SQL Schema,Easy,https://leetcode.com/problems/employee-bonus,Netsuite,,112,,sql schema,,,
578,Get Highest Answer Rate Question,SQL Schema,Medium,https://leetcode.com/problems/get-highest-answer-rate-question,Facebook,,50,,sql schema,,,
579,Find Cumulative Salary of an Employee,SQL Schema,Hard,https://leetcode.com/problems/find-cumulative-salary-of-an-employee,Amazon,,126,,sql schema,,,
580,Count Student Number in Departments,SQL Schema,Medium,https://leetcode.com/problems/count-student-number-in-departments,Twitter,,125,,sql schema,,,
581,Shortest Unsorted Continuous Subarray,"Given an integer array `nums`, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.

Return the shortest such subarray and output its length.


Example 1:
Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.


Example 2:
Input: nums = [1,2,3,4]
Output: 0

Example 3:
Input: nums = [1]
Output: 0

Constraints:
`1 <= nums.length <= 104`
`-105 <= nums[i] <= 105`
Follow up: Can you solve it in `O(n)` time complexity?",Medium,https://leetcode.com/problems/shortest-unsorted-continuous-subarray,"Amazon,Microsoft",Array,3797,,"given an integer array `nums`, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order. return the shortest such subarray and output its length.","input: nums = [2,6,4,8,10,9,15] output: 5 explanation: you need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order. example 2: input: nums = [1,2,3,4] output: 0 example 3: input: nums = [1] output: 0",`1 <= nums.length <= 10^4` `-10^5 <= nums[i] <= 10^5`,can you solve it in `o(n)` time complexity?
582,Kill Process,"You have `n` processes forming a rooted tree structure. You are given two integer arrays `pid` and `ppid`, where `pid[i]` is the ID of the `ith` process and `ppid[i]` is the ID of the `ith` process's parent process.

Each process has only one parent process but may have multiple children processes. Only one process has `ppid[i] = 0`, which means this process has no parent process (the root of the tree).

When a process is killed, all of its children processes will also be killed.

Given an integer `kill` representing the ID of a process you want to kill, return a list of the IDs of the processes that will be killed. You may return the answer in any order.


Example 1:
Input: pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5
Output: [5,10]
Explanation: The processes colored in red are the processes that should be killed.


Example 2:
Input: pid = [1], ppid = [0], kill = 1
Output: [1]

Constraints:
`n == pid.length`
`n == ppid.length`
`1 <= n <= 5 * 104`
`1 <= pid[i] <= 5 * 104`
`0 <= ppid[i] <= 5 * 104`
Only one process has no parent.

All the values of `pid` are unique.

`kill` is guaranteed to be in `pid`.",Medium,https://leetcode.com/problems/kill-process,Bloomberg,"Tree,Queue",655,,"you have `n` processes forming a rooted tree structure. you are given two integer arrays `pid` and `ppid`, where `pid[i]` is the id of the `ith` process and `ppid[i]` is the id of the `ith` process's parent process. each process has only one parent process but may have multiple children processes. only one process has `ppid[i] = 0`, which means this process has no parent process (the root of the tree). when a process is killed, all of its children processes will also be killed. given an integer `kill` representing the id of a process you want to kill, return a list of the ids of the processes that will be killed. you may return the answer in any order.","input: pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5 output: [5,10] explanation: the processes colored in red are the processes that should be killed. example 2: input: pid = [1], ppid = [0], kill = 1 output: [1]",`n == pid.length` `n == ppid.length` `1 <= n <= 5 * 10^4` `1 <= pid[i] <= 5 * 10^4` `0 <= ppid[i] <= 5 * 10^4` only one process has no parent. all the values of `pid` are unique. `kill` is guaranteed to be in `pid`.,
583,Delete Operation for Two Strings,"Given two strings `word1` and `word2`, return the minimum number of steps required to make `word1` and `word2` the same.

In one step, you can delete exactly one character in either string.


Example 1:
Input: word1 = ""sea"", word2 = ""eat""
Output: 2
Explanation: You need one step to make ""sea"" to ""ea"" and another step to make ""eat"" to ""ea"".


Example 2:
Input: word1 = ""leetcode"", word2 = ""etco""
Output: 4

Constraints:
`1 <= word1.length, word2.length <= 500`
`word1` and `word2` consist of only lowercase English letters.",Medium,https://leetcode.com/problems/delete-operation-for-two-strings,Google,String,1458,"[Edit Distance, /problems/edit-distance/, Hard], [Minimum ASCII Delete Sum for Two Strings, /problems/minimum-ascii-delete-sum-for-two-strings/, Medium], [Longest Common Subsequence, /problems/longest-common-subsequence/, Medium]","given two strings `word1` and `word2`, return the minimum number of steps required to make `word1` and `word2` the same. in one step, you can delete exactly one character in either string.","input: word1 = ""sea"", word2 = ""eat"" output: 2 explanation: you need one step to make ""sea"" to ""ea"" and another step to make ""eat"" to ""ea"". example 2: input: word1 = ""leetcode"", word2 = ""etco"" output: 4","`1 <= word1.length, word2.length <= 500` `word1` and `word2` consist of only lowercase english letters.",
584,Find Customer Referee,SQL Schema,Easy,https://leetcode.com/problems/find-customer-referee,Amazon,,105,,sql schema,,,
585,Investments in 2016,SQL Schema,Medium,https://leetcode.com/problems/investments-in-2016,Twitter,,128,,sql schema,,,
586,Customer Placing the Largest Number of Orders,SQL Schema,Easy,https://leetcode.com/problems/customer-placing-the-largest-number-of-orders,Amazon,,140,,sql schema,,,
587,Erect the Fence,"There are some trees, where each tree is represented by (x,y) coordinate in a two-dimensional garden. Your job is to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only if all the trees are enclosed. Your task is to help find the coordinates of trees which are exactly located on the fence perimeter.


Example 1:
Input: [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]
Output: [[1,1],[2,0],[4,2],[3,3],[2,4]]
Explanation:

Example 2:
Input: [[1,2],[2,2],[4,2]]
Output: [[1,2],[2,2],[4,2]]
Explanation:
Even you only have trees in a line, you need to use rope to enclose them. 
Note:
All trees should be enclosed together. You cannot cut the rope to enclose trees that will separate them in more than one group.

All input integers will range from 0 to 100.

The garden has at least one tree.

All coordinates are distinct.

Input points have NO order. No order required for output.
input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.",Hard,https://leetcode.com/problems/erect-the-fence,Google,Geometry,284,,"there are some trees, where each tree is represented by (x,y) coordinate in a two-dimensional garden. your job is to fence the entire garden using the minimum length of rope as it is expensive. the garden is well fenced only if all the trees are enclosed. your task is to help find the coordinates of trees which are exactly located on the fence perimeter.","input: [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]] output: [[1,1],[2,0],[4,2],[3,3],[2,4]] explanation: example 2: input: [[1,2],[2,2],[4,2]] output: [[1,2],[2,2],[4,2]] explanation: even you only have trees in a line, you need to use rope to enclose them. note: all trees should be enclosed together. you cannot cut the rope to enclose trees that will separate them in more than one group. all input integers will range from 0 to 100. the garden has at least one tree. all coordinates are distinct. input points have no order. no order required for output. input types have been changed on april 15, 2019. please reset to default code definition to get new method signature.",,
588,Design In-Memory File System,"Design an in-memory file system to simulate the following functions:
`ls`: Given a path in string format. If it is a file path, return a list that only contains this file's name. If it is a directory path, return the list of file and directory names in this directory. Your output (file and directory names together) should in lexicographic order.

`mkdir`: Given a directory path that does not exist, you should make a new directory according to the path. If the middle directories in the path don't exist either, you should create them as well. This function has void return type.

`addContentToFile`: Given a file path and file content in string format. If the file doesn't exist, you need to create that file containing given content. If the file already exists, you need to append given content to original content. This function has void return type.

`readContentFromFile`: Given a file path, return its content in string format.


Example:
Input: 
[""FileSystem"",""ls"",""mkdir"",""addContentToFile"",""ls"",""readContentFromFile""]
[[],[""/""],[""/a/b/c""],[""/a/b/c/d"",""hello""],[""/""],[""/a/b/c/d""]]
Output:
[null,[],null,null,[""a""],""hello""]
Explanation:
Note:
You can assume all file or directory paths are absolute paths which begin with `/` and do not end with `/` except that the path is just `""/""`.

You can assume that all operations will be passed valid parameters and users will not attempt to retrieve file content or list a directory or file that does not exist.

You can assume that all directory names and file names only contain lower-case letters, and same names won't exist in the same directory.",Hard,https://leetcode.com/problems/design-in-memory-file-system,"Amazon,Microsoft,Citadel,Google",Design,562,"[LRU Cache, /problems/lru-cache/, Medium], [LFU Cache, /problems/lfu-cache/, Hard], [Design Log Storage System, /problems/design-log-storage-system/, Medium]","design an in-memory file system to simulate the following functions: `ls`: given a path in string format. if it is a file path, return a list that only contains this file's name. if it is a directory path, return the list of file and directory names in this directory. your output (file and directory names together) should in lexicographic order. `mkdir`: given a directory path that does not exist, you should make a new directory according to the path. if the middle directories in the path don't exist either, you should create them as well. this function has void return type. `addcontenttofile`: given a file path and file content in string format. if the file doesn't exist, you need to create that file containing given content. if the file already exists, you need to append given content to original content. this function has void return type. `readcontentfromfile`: given a file path, return its content in string format.","input: [""filesystem"",""ls"",""mkdir"",""addcontenttofile"",""ls"",""readcontentfromfile""] [[],[""/""],[""/a/b/c""],[""/a/b/c/d"",""hello""],[""/""],[""/a/b/c/d""]] output: [null,[],null,null,[""a""],""hello""] explanation: note: you can assume all file or directory paths are absolute paths which begin with `/` and do not end with `/` except that the path is just `""/""`. you can assume that all operations will be passed valid parameters and users will not attempt to retrieve file content or list a directory or file that does not exist. you can assume that all directory names and file names only contain lower-case letters, and same names won't exist in the same directory.",,
589,N-ary Tree Preorder Traversal,"Given the `root` of an n-ary tree, return the preorder traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: [1,3,5,6,2,4]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`0 <= Node.val <= 104`
The height of the n-ary tree is less than or equal to `1000`.

Follow up: Recursive solution is trivial, could you do it iteratively?",Easy,https://leetcode.com/problems/n-ary-tree-preorder-traversal,,,894,,"given the `root` of an n-ary tree, return the preorder traversal of its nodes' values. nary-tree input serialization is represented in their level order traversal. each group of children is separated by the null value (see examples)","input: root = [1,null,3,2,4,null,5,6] output: [1,3,5,6,2,4] example 2: input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]","the number of nodes in the tree is in the range `[0, 10^4]`. `0 <= node.val <= 10^4` the height of the n-ary tree is less than or equal to `1000`.","recursive solution is trivial, could you do it iteratively?"
590,N-ary Tree Postorder Traversal,"Given the `root` of an n-ary tree, return the postorder traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: [5,6,3,2,4,1]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`0 <= Node.val <= 104`
The height of the n-ary tree is less than or equal to `1000`.

Follow up: Recursive solution is trivial, could you do it iteratively?",Easy,https://leetcode.com/problems/n-ary-tree-postorder-traversal,Amazon,Tree,961,"[Binary Tree Postorder Traversal, /problems/binary-tree-postorder-traversal/, Medium], [N-ary Tree Level Order Traversal, /problems/n-ary-tree-level-order-traversal/, Medium], [N-ary Tree Preorder Traversal, /problems/n-ary-tree-preorder-traversal/, Easy]","given the `root` of an n-ary tree, return the postorder traversal of its nodes' values. nary-tree input serialization is represented in their level order traversal. each group of children is separated by the null value (see examples)","input: root = [1,null,3,2,4,null,5,6] output: [5,6,3,2,4,1] example 2: input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]","the number of nodes in the tree is in the range `[0, 10^4]`. `0 <= node.val <= 10^4` the height of the n-ary tree is less than or equal to `1000`.","recursive solution is trivial, could you do it iteratively?"
591,Tag Validator,"Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold:
The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.

A closed tag (not necessarily valid) has exactly the following format : `<TAG_NAME>TAG_CONTENT</TAG_NAME>`. Among them, `<TAG_NAME>` is the start tag, and `</TAG_NAME>` is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.

A valid `TAG_NAME` only contain upper-case letters, and has length in range [1,9]. Otherwise, the `TAG_NAME` is invalid.

A valid `TAG_CONTENT` may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the `TAG_CONTENT` is invalid.

A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.

A `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or `</`, all the subsequent characters until the next `>` should be parsed as TAG_NAME  (not necessarily valid).

The cdata has the following format : `<![CDATA[CDATA_CONTENT]]>`. The range of `CDATA_CONTENT` is defined as the characters between `<![CDATA[` and the first subsequent `]]>`. 
`CDATA_CONTENT` may contain any characters. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters. 

Valid Code Examples:
Input: ""<DIV>This is the first line <![CDATA[<div>]]></DIV>""
Output: True
Explanation: 
The code is wrapped in a closed tag : <DIV> and </DIV>. 
The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. 
Although CDATA_CONTENT has unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as tag.

So TAG_CONTENT is valid, and then the code is valid. Thus return true.

Input: ""<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>""
Output: True
Explanation:
We first separate the code into : start_tag|tag_content|end_tag.

start_tag -> ""<DIV>""
end_tag -> ""</DIV>""
tag_content could also be separated into : text1|cdata|text2.

text1 -> "">>  ![cdata[]] ""
cdata -> ""<![CDATA[<div>]>]]>"", where the CDATA_CONTENT is ""<div>]>""
text2 -> ""]]>>]""
The reason why start_tag is NOT ""<DIV>>>"" is because of the rule 6.

The reason why cdata is NOT ""<![CDATA[<div>]>]]>]]>"" is because of the rule 7.


Invalid Code Examples:
Input: ""<A>  <B> </A>   </B>""
Output: False
Explanation: Unbalanced. If ""<A>"" is closed, then ""<B>"" must be unmatched, and vice versa.

Input: ""<DIV>  div tag is not closed  <DIV>""
Output: False
Input: ""<DIV>  unmatched <  </DIV>""
Output: False
Input: ""<DIV> closed tags with invalid tag name  <b>123</b> </DIV>""
Output: False
Input: ""<DIV> unmatched tags with invalid tag name  </1234567890> and <CDATA[[]]>  </DIV>""
Output: False
Input: ""<DIV>  unmatched start tag <B>  and unmatched end tag </C>  </DIV>""
Output: False
Note:
For simplicity, you could assume the input code (including the any characters mentioned above) only contain `letters`, `digits`, `'<'`,`'>'`,`'/'`,`'!'`,`'['`,`']'` and `' '`.",Hard,https://leetcode.com/problems/tag-validator,Microsoft,"String,Stack",102,"[Add Bold Tag in String, /problems/add-bold-tag-in-string/, Medium]","given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. a code snippet is valid if all the following rules hold: the code must be wrapped in a valid closed tag. otherwise, the code is invalid. a closed tag (not necessarily valid) has exactly the following format : `<tag_name>tag_content</tag_name>`. among them, `<tag_name>` is the start tag, and `</tag_name>` is the end tag. the tag_name in start and end tags should be the same. a closed tag is valid if and only if the tag_name and tag_content are valid. a valid `tag_name` only contain upper-case letters, and has length in range [1,9]. otherwise, the `tag_name` is invalid. a valid `tag_content` may contain other valid closed tags, cdata and any characters (see note1) except unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid tag_name. otherwise, the `tag_content` is invalid. a start tag is unmatched if no end tag exists with the same tag_name, and vice versa. however, you also need to consider the issue of unbalanced when tags are nested. a `<` is unmatched if you cannot find a subsequent `>`. and when you find a `<` or `</`, all the subsequent characters until the next `>` should be parsed as tag_name (not necessarily valid). the cdata has the following format : `<![cdata[cdata_content]]>`. the range of `cdata_content` is defined as the characters between `<![cdata[` and the first subsequent `]]>`. `cdata_content` may contain any characters. the function of cdata is to forbid the validator to parse `cdata_content`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters. valid code","input: ""<div>this is the first line <![cdata[<div>]]></div>"" output: true explanation: the code is wrapped in a closed tag : <div> and </div>. the tag_name is valid, the tag_content consists of some characters and cdata. although cdata_content has unmatched start tag with invalid tag_name, it should be considered as plain text, not parsed as tag. so tag_content is valid, and then the code is valid. thus return true. input: ""<div>>> ![cdata[]] <![cdata[<div>]>]]>]]>>]</div>"" output: true explanation: we first separate the code into : start_tag|tag_content|end_tag. start_tag -> ""<div>"" end_tag -> ""</div>"" tag_content could also be separated into : text1|cdata|text2. text1 -> "">> ![cdata[]] "" cdata -> ""<![cdata[<div>]>]]>"", where the cdata_content is ""<div>]>"" text2 -> ""]]>>]"" the reason why start_tag is not ""<div>>>"" is because of the rule 6. the reason why cdata is not ""<![cdata[<div>]>]]>]]>"" is because of the rule 7. invalid code examples: input: ""<a> <b> </a> </b>"" output: false explanation: unbalanced. if ""<a>"" is closed, then ""<b>"" must be unmatched, and vice versa. input: ""<div> div tag is not closed <div>"" output: false input: ""<div> unmatched < </div>"" output: false input: ""<div> closed tags with invalid tag name <b>123</b> </div>"" output: false input: ""<div> unmatched tags with invalid tag name </1234567890> and <cdata[[]]> </div>"" output: false input: ""<div> unmatched start tag <b> and unmatched end tag </c> </div>"" output: false note: for simplicity, you could assume the input code (including the any characters mentioned above) only contain `letters`, `digits`, `'<'`,`'>'`,`'/'`,`'!'`,`'['`,`']'` and `' '`.",,
592,Fraction Addition and Subtraction,"Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be irreducible fraction. If your final result is an integer, say `2`, you need to change it to the format of fraction that has denominator `1`. So in this case, `2` should be converted to `2/1`.


Example 1:
Input:""-1/2+1/2""
Output: ""0/1""

Example 2:
Input:""-1/2+1/2+1/3""
Output: ""1/3""

Example 3:
Input:""1/3-1/2""
Output: ""-1/6""

Example 4:
Input:""5/3+1/3""
Output: ""2/1""
Note:
The input string only contains `'0'` to `'9'`, `'/'`, `'+'` and `'-'`. So does the output.

Each fraction (input and output) has format `±numerator/denominator`. If the first input fraction or the output is positive, then `'+'` will be omitted.

The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.

The number of given fractions will be in the range [1,10].

The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.",Medium,https://leetcode.com/problems/fraction-addition-and-subtraction,"IXL,Goldman Sachs",Math,227,"[Solve the Equation, /problems/solve-the-equation/, Medium]","given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. the final result should be irreducible fraction. if your final result is an integer, say `2`, you need to change it to the format of fraction that has denominator `1`. so in this case, `2` should be converted to `2/1`.","input:""-1/2+1/2"" output: ""0/1"" example 2: input:""-1/2+1/2+1/3"" output: ""1/3"" example 3: input:""1/3-1/2"" output: ""-1/6"" example 4: input:""5/3+1/3"" output: ""2/1"" note: the input string only contains `'0'` to `'9'`, `'/'`, `'+'` and `'-'`. so does the output. each fraction (input and output) has format `±numerator/denominator`. if the first input fraction or the output is positive, then `'+'` will be omitted. the input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1,10]. if the denominator is 1, it means this fraction is actually an integer in a fraction format defined above. the number of given fractions will be in the range [1,10]. the numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.",,
593,Valid Square,"Given the coordinates of four points in 2D space `p1`, `p2`, `p3` and `p4`, return `true` if the four points construct a square.

The coordinate of a point `pi` is represented as `[xi, yi]`. The input is not given in any order.

A valid square has four equal sides with positive length and four equal angles (90-degree angles).


Example 1:
Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: true

Example 2:
Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]
Output: false

Example 3:
Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]
Output: true

Constraints:
`p1.length == p2.length == p3.length == p4.length == 2`
`-104 <= xi, yi <= 104`",Medium,https://leetcode.com/problems/valid-square,"Pure Storage,Google",Math,449,,"given the coordinates of four points in 2d space `p1`, `p2`, `p3` and `p4`, return `true` if the four points construct a square. the coordinate of a point `pi` is represented as `[xi, yi]`. the input is not given in any order. a valid square has four equal sides with positive length and four equal angles (90-degree angles).","input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1] output: true example 2: input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12] output: false example 3: input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1] output: true","`p1.length == p2.length == p3.length == p4.length == 2` `-10^4 <= xi, yi <= 10^4`",
594,Longest Harmonious Subsequence,"We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly `1`.

Given an integer array `nums`, return the length of its longest harmonious subsequence among all its possible subsequences.

A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.


Example 1:
Input: nums = [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].


Example 2:
Input: nums = [1,2,3,4]
Output: 2

Example 3:
Input: nums = [1,1,1,1]
Output: 0

Constraints:
`1 <= nums.length <= 2 * 104`
`-109 <= nums[i] <= 109`",Easy,https://leetcode.com/problems/longest-harmonious-subsequence,"Apple,LiveRamp",Hash Table,1155,,"we define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly `1`. given an integer array `nums`, return the length of its longest harmonious subsequence among all its possible subsequences. a subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.","input: nums = [1,3,2,2,5,2,3,7] output: 5 explanation: the longest harmonious subsequence is [3,2,2,2,3]. example 2: input: nums = [1,2,3,4] output: 2 example 3: input: nums = [1,1,1,1] output: 0",`1 <= nums.length <= 2 * 10^4` `-10^9 <= nums[i] <= 10^9`,
595,Big Countries,SQL Schema,Easy,https://leetcode.com/problems/big-countries,Bloomberg,,577,,sql schema,,,
596,Classes More Than 5 Students,SQL Schema,Easy,https://leetcode.com/problems/classes-more-than-5-students,,,285,,sql schema,,,
597,Friend Requests I: Overall Acceptance Rate,SQL Schema,Easy,https://leetcode.com/problems/friend-requests-i-overall-acceptance-rate,Facebook,,184,,sql schema,,,
598,Range Addition II,"You are given an `m x n` matrix `M` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`.

Count and return the number of maximum integers in the matrix after performing all the operations.


Example 1:
Input: m = 3, n = 3, ops = [[2,2],[3,3]]
Output: 4
Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.


Example 2:
Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
Output: 4

Example 3:
Input: m = 3, n = 3, ops = []
Output: 9

Constraints:
`1 <= m, n <= 4 * 104`
`1 <= ops.length <= 104`
`ops[i].length == 2`
`1 <= ai <= m`
`1 <= bi <= n`",Easy,https://leetcode.com/problems/range-addition-ii,IXL,Math,361,"[Range Addition, /problems/range-addition/, Medium]","you are given an `m x n` matrix `m` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `m[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`. count and return the number of maximum integers in the matrix after performing all the operations.","input: m = 3, n = 3, ops = [[2,2],[3,3]] output: 4 explanation: the maximum integer in m is 2, and there are four of it in m. so return 4. example 2: input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]] output: 4 example 3: input: m = 3, n = 3, ops = [] output: 9","`1 <= m, n <= 4 * 10^4` `1 <= ops.length <= 10^4` `ops[i].length == 2` `1 <= ai <= m` `1 <= bi <= n`",
599,Minimum Index Sum of Two Lists,"Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.


Example 1:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""Piatti"",""The Grill at Torrey Pines"",""Hungry Hunter Steakhouse"",""Shogun""]
Output: [""Shogun""]
Explanation: The only restaurant they both like is ""Shogun"".


Example 2:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KFC"",""Shogun"",""Burger King""]
Output: [""Shogun""]
Explanation: The restaurant they both like and have the least index sum is ""Shogun"" with index sum 1 (0+1).


Example 3:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]
Output: [""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]

Example 4:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KNN"",""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]
Output: [""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]

Example 5:
Input: list1 = [""KFC""], list2 = [""KFC""]
Output: [""KFC""]

Constraints:
`1 <= list1.length, list2.length <= 1000`
`1 <= list1[i].length, list2[i].length <= 30`
`list1[i]` and `list2[i]` consist of spaces `' '` and English letters.

All the stings of `list1` are unique.

All the stings of `list2` are unique.",Easy,https://leetcode.com/problems/minimum-index-sum-of-two-lists,"Oracle,Yelp",Hash Table,775,"[Intersection of Two Linked Lists, /problems/intersection-of-two-linked-lists/, Easy]","suppose andy and doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings. you need to help them find out their common interest with the least list index sum. if there is a choice tie between answers, output all of them with no order requirement. you could assume there always exists an answer.","input: list1 = [""shogun"",""tapioca express"",""burger king"",""kfc""], list2 = [""piatti"",""the grill at torrey pines"",""hungry hunter steakhouse"",""shogun""] output: [""shogun""] explanation: the only restaurant they both like is ""shogun"". example 2: input: list1 = [""shogun"",""tapioca express"",""burger king"",""kfc""], list2 = [""kfc"",""shogun"",""burger king""] output: [""shogun""] explanation: the restaurant they both like and have the least index sum is ""shogun"" with index sum 1 (0+1). example 3: input: list1 = [""shogun"",""tapioca express"",""burger king"",""kfc""], list2 = [""kfc"",""burger king"",""tapioca express"",""shogun""] output: [""kfc"",""burger king"",""tapioca express"",""shogun""] example 4: input: list1 = [""shogun"",""tapioca express"",""burger king"",""kfc""], list2 = [""knn"",""kfc"",""burger king"",""tapioca express"",""shogun""] output: [""kfc"",""burger king"",""tapioca express"",""shogun""] example 5: input: list1 = [""kfc""], list2 = [""kfc""] output: [""kfc""]","`1 <= list1.length, list2.length <= 1000` `1 <= list1[i].length, list2[i].length <= 30` `list1[i]` and `list2[i]` consist of spaces `' '` and english letters. all the stings of `list1` are unique. all the stings of `list2` are unique.",
600,Non-negative Integers without Consecutive Ones,"Given a positive integer n, find the number of non-negative integers less than or equal to n, whose binary representations do NOT contain consecutive ones.


Example 1:
Input: 5
Output: 5
Explanation: 
Here are the non-negative integers <= 5 with their corresponding binary representations:
0 : 0
1 : 1
2 : 10
3 : 11
4 : 100
5 : 101
Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. 
Note:
1 <= n <= 109",Hard,https://leetcode.com/problems/non-negative-integers-without-consecutive-ones,Pocket Gems,Dynamic Programming,528,"[House Robber, /problems/house-robber/, Medium], [House Robber II, /problems/house-robber-ii/, Medium], [Ones and Zeroes, /problems/ones-and-zeroes/, Medium]","given a positive integer n, find the number of non-negative integers less than or equal to n, whose binary representations do not contain consecutive ones.","input: 5 output: 5 explanation: here are the non-negative integers <= 5 with their corresponding binary representations: 0 : 0 1 : 1 2 : 10 3 : 11 4 : 100 5 : 101 among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. note: 1 <= n <= 109",,
601,Human Traffic of Stadium,SQL Schema,Hard,https://leetcode.com/problems/human-traffic-of-stadium,Amazon,,231,,sql schema,,,
602,Friend Requests II: Who Has the Most Friends,SQL Schema,Medium,https://leetcode.com/problems/friend-requests-ii-who-has-the-most-friends,Amazon,,188,,sql schema,,,
603,Consecutive Available Seats,SQL Schema,Easy,https://leetcode.com/problems/consecutive-available-seats,Amazon,,309,,sql schema,,,
604,Design Compressed String Iterator,"Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.

Implement the StringIterator class:
`next()` Returns the next character if the original string still has uncompressed characters, otherwise returns a white space.

`hasNext()` Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns `false`.


Example 1:
Input
[""StringIterator"", ""next"", ""next"", ""next"", ""next"", ""next"", ""next"", ""hasNext"", ""next"", ""hasNext""]
[[""L1e2t1C1o1d1e1""], [], [], [], [], [], [], [], [], []]
Output
[null, ""L"", ""e"", ""e"", ""t"", ""C"", ""o"", true, ""d"", true]
Explanation
StringIterator stringIterator = new StringIterator(""L1e2t1C1o1d1e1"");
stringIterator.next(); // return ""L""
stringIterator.next(); // return ""e""
stringIterator.next(); // return ""e""
stringIterator.next(); // return ""t""
stringIterator.next(); // return ""C""
stringIterator.next(); // return ""o""
stringIterator.hasNext(); // return True
stringIterator.next(); // return ""d""
stringIterator.hasNext(); // return True

Constraints:
`1 <= compressedString.length <= 1000`
`compressedString` consists of lower-case an upper-case English letters and digits.

The number of a single character repetitions in `compressedString` is in the range `[1, 10^9]`
At most `100` calls will be made to `next` and `hasNext`.",Easy,https://leetcode.com/problems/design-compressed-string-iterator,"Google,Amazon",Design,292,"[LRU Cache, /problems/lru-cache/, Medium], [String Compression, /problems/string-compression/, Medium]","design and implement a data structure for a compressed string iterator. the given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string. implement the stringiterator class: `next()` returns the next character if the original string still has uncompressed characters, otherwise returns a white space. `hasnext()` returns true if there is any letter needs to be uncompressed in the original string, otherwise returns `false`.","input [""stringiterator"", ""next"", ""next"", ""next"", ""next"", ""next"", ""next"", ""hasnext"", ""next"", ""hasnext""] [[""l1e2t1c1o1d1e1""], [], [], [], [], [], [], [], [], []] output [null, ""l"", ""e"", ""e"", ""t"", ""c"", ""o"", true, ""d"", true] explanation stringiterator stringiterator = new stringiterator(""l1e2t1c1o1d1e1""); stringiterator.next(); // return ""l"" stringiterator.next(); // return ""e"" stringiterator.next(); // return ""e"" stringiterator.next(); // return ""t"" stringiterator.next(); // return ""c"" stringiterator.next(); // return ""o"" stringiterator.hasnext(); // return true stringiterator.next(); // return ""d"" stringiterator.hasnext(); // return true","`1 <= compressedstring.length <= 1000` `compressedstring` consists of lower-case an upper-case english letters and digits. the number of a single character repetitions in `compressedstring` is in the range `[1, 10^9]` at most `10^0` calls will be made to `next` and `hasnext`.",
605,Can Place Flowers,"You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return if `n` new flowers can be planted in the `flowerbed` without violating the no-adjacent-flowers rule.


Example 1:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: true

Example 2:
Input: flowerbed = [1,0,0,0,1], n = 2
Output: false

Constraints:
`1 <= flowerbed.length <= 2 * 104`
`flowerbed[i]` is `0` or `1`.

There are no two adjacent flowers in `flowerbed`.

`0 <= n <= flowerbed.length`",Easy,https://leetcode.com/problems/can-place-flowers,"LinkedIn,Facebook","Array,Greedy",1369,"[Teemo Attacking, /problems/teemo-attacking/, Medium], [Asteroid Collision, /problems/asteroid-collision/, Medium]","you have a long flowerbed in which some of the plots are planted, and some are not. however, flowers cannot be planted in adjacent plots. given an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return if `n` new flowers can be planted in the `flowerbed` without violating the no-adjacent-flowers rule.","input: flowerbed = [1,0,0,0,1], n = 1 output: true example 2: input: flowerbed = [1,0,0,0,1], n = 2 output: false",`1 <= flowerbed.length <= 2 * 10^4` `flowerbed[i]` is `0` or `1`. there are no two adjacent flowers in `flowerbed`. `0 <= n <= flowerbed.length`,
606,Construct String from Binary Tree,"You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.

The null node needs to be represented by empty parenthesis pair ""()"". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.


Example 1:
Input: Binary tree: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     
Output: ""1(2(4))(3)""
Explanation: Originallay it needs to be ""1(2(4)())(3()())"", but you need to omit all the unnecessary empty parenthesis pairs. And it will be ""1(2(4))(3)"".


Example 2:
Input: Binary tree: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 
Output: ""1(2()(4))(3)""
Explanation: Almost the same as the first example, except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.",Easy,https://leetcode.com/problems/construct-string-from-binary-tree,Bloomberg,"String,Tree",942,"[Construct Binary Tree from String, /problems/construct-binary-tree-from-string/, Medium], [Find Duplicate Subtrees, /problems/find-duplicate-subtrees/, Medium]","you need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way. the null node needs to be represented by empty parenthesis pair ""()"". and you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.","input: binary tree: [1,2,3,4] 1 / \ 2 3 / 4 output: ""1(2(4))(3)"" explanation: originallay it needs to be ""1(2(4)())(3()())"", but you need to omit all the unnecessary empty parenthesis pairs. and it will be ""1(2(4))(3)"". example 2: input: binary tree: [1,2,3,null,4] 1 / \ 2 3 \ 4 output: ""1(2()(4))(3)"" explanation: almost the same as the first example, except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.",,
607,Sales Person,SQL Schema,Easy,https://leetcode.com/problems/sales-person,,,166,,sql schema,,,
608,Tree Node,SQL Schema,Medium,https://leetcode.com/problems/tree-node,"Uber,Twitter",,232,,sql schema,,,
609,Find Duplicate File in System,"Given a list `paths` of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.

A group of duplicate files consists of at least two files that have the same content.

A single directory info string in the input list has the following format:
`""root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)""`
It means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content `(f1_content, f2_content ... fn_content)` respectively in the directory ""`root/d1/d2/.../dm""`. Note that `n >= 1` and `m >= 0`. If `m = 0`, it means the directory is just the root directory.

The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:
`""directory_path/file_name.txt""`

Example 1:
Input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)"",""root 4.txt(efgh)""]
Output: [[""root/a/2.txt"",""root/c/d/4.txt"",""root/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]]

Example 2:
Input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)""]
Output: [[""root/a/2.txt"",""root/c/d/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]]

Constraints:
`1 <= paths.length <= 2 * 104`
`1 <= paths[i].length <= 3000`
`1 <= sum(paths[i].length) <= 5 * 105`
`paths[i]` consist of English letters, digits, `'/'`, `'.'`, `'('`, `')'`, and `' '`.

You may assume no files or directories share the same name in the same directory.

You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.

Follow up:
Imagine you are given a real file system, how will you search files? DFS or BFS?
If the file content is very large (GB level), how will you modify your solution?
If you can only read the file by 1kb each time, how will you modify your solution?
What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?
How to make sure the duplicated files you find are not false positive?",Medium,https://leetcode.com/problems/find-duplicate-file-in-system,"Dropbox,Amazon","Hash Table,String",549,,"given a list `paths` of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. you may return the answer in any order. a group of duplicate files consists of at least two files that have the same content. a single directory info string in the input list has the following format: `""root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)""` it means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content `(f1_content, f2_content ... fn_content)` respectively in the directory ""`root/d1/d2/.../dm""`. note that `n >= 1` and `m >= 0`. if `m = 0`, it means the directory is just the root directory. the output is a list of groups of duplicate file paths. for each group, it contains all the file paths of the files that have the same content. a file path is a string that has the following format: `""directory_path/file_name.txt""`","input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)"",""root 4.txt(efgh)""] output: [[""root/a/2.txt"",""root/c/d/4.txt"",""root/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]] example 2: input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)""] output: [[""root/a/2.txt"",""root/c/d/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]]","`1 <= paths.length <= 2 * 10^4` `1 <= paths[i].length <= 3000` `1 <= sum(paths[i].length) <= 5 * 10^5` `paths[i]` consist of english letters, digits, `'/'`, `'.'`, `'('`, `')'`, and `' '`. you may assume no files or directories share the same name in the same directory. you may assume each given directory info represents a unique directory. a single blank space separates the directory path and file info.","imagine you are given a real file system, how will you search files? dfs or bfs? if the file content is very large (gb level), how will you modify your solution? if you can only read the file by 1kb each time, how will you modify your solution? what is the time complexity of your modified solution? what is the most time-consuming part and memory-consuming part of it? how to optimize? how to make sure the duplicated files you find are not false positive?"
610,Triangle Judgement,SQL Schema,Easy,https://leetcode.com/problems/triangle-judgement,Facebook,,145,,sql schema,,,
611,Valid Triangle Number,"Given an array consists of non-negative integers,  your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.


Example 1:
Input: [2,2,3,4]
Output: 3
Explanation:
Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3
Note:
The length of the given array won't exceed 1000.

The integers in the given array are in the range of [0, 1000].",Medium,https://leetcode.com/problems/valid-triangle-number,"Bloomberg,LinkedIn,ByteDance",Array,1357,"[3Sum Smaller, /problems/3sum-smaller/, Medium]","given an array consists of non-negative integers, your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.","input: [2,2,3,4] output: 3 explanation: valid combinations are: 2,3,4 (using the first 2) 2,3,4 (using the second 2) 2,2,3 note: the length of the given array won't exceed 1000. the integers in the given array are in the range of [0, 1000].",,
612,Shortest Distance in a Plane,SQL Schema,Medium,https://leetcode.com/problems/shortest-distance-in-a-plane,Microsoft,,126,,sql schema,,,
613,Shortest Distance in a Line,SQL Schema,Easy,https://leetcode.com/problems/shortest-distance-in-a-line,,,196,,sql schema,,,
614,Second Degree Follower,SQL Schema,Medium,https://leetcode.com/problems/second-degree-follower,"Facebook,Databricks",,87,,sql schema,,,
615,Average Salary: Departments VS Company,SQL Schema,Hard,https://leetcode.com/problems/average-salary-departments-vs-company,Amazon,,119,,sql schema,,,
616,Add Bold Tag in String,"Given a string s and a list of strings dict, you need to add a closed pair of bold tag `<b>` and `</b>` to wrap the substrings in s that exist in dict. If two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them.


Example 1:
Input: 
s = ""abcxyz123""
dict = [""abc"",""123""]
Output:
""<b>abc</b>xyz<b>123</b>""

Example 2:
Input: 
s = ""aaabbcc""
dict = [""aaa"",""aab"",""bc""]
Output:
""<b>aaabbc</b>c""

Constraints:
The given dict won't contain duplicates, and its length won't exceed 100.

All the strings in input have length in range [1, 1000].

Note: This question is the same as 758: https://leetcode.com/problems/bold-words-in-string/",Medium,https://leetcode.com/problems/add-bold-tag-in-string,Facebook,String,642,"[Merge Intervals, /problems/merge-intervals/, Medium], [Tag Validator, /problems/tag-validator/, Hard]","given a string s and a list of strings dict, you need to add a closed pair of bold tag `<b>` and `</b>` to wrap the substrings in s that exist in dict. if two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. also, if two substrings wrapped by bold tags are consecutive, you need to combine them.","input: s = ""abcxyz123"" dict = [""abc"",""123""] output: ""<b>abc</b>xyz<b>123</b>"" example 2: input: s = ""aaabbcc"" dict = [""aaa"",""aab"",""bc""] output: ""<b>aaabbc</b>c""","the given dict won't contain duplicates, and its length won't exceed 10^0. all the strings in input have length in range [1, 1000]. note: this question is the same as 758: https://leetcode.com/problems/bold-words-in-string/",
617,Merge Two Binary Trees,"You are given two binary trees `root1` and `root2`.

Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.

Return the merged tree.

Note: The merging process must start from the root nodes of both trees.


Example 1:
Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]
Output: [3,4,5,5,4,null,7]

Example 2:
Input: root1 = [1], root2 = [1,2]
Output: [2,2]

Constraints:
The number of nodes in both trees is in the range `[0, 2000]`.

`-104 <= Node.val <= 104`",Easy,https://leetcode.com/problems/merge-two-binary-trees,"Amazon,Google,Facebook,Apple",Tree,4157,,"you are given two binary trees `root1` and `root2`. imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. you need to merge the two trees into a new binary tree. the merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. otherwise, the not null node will be used as the node of the new tree. return the merged tree. note: the merging process must start from the root nodes of both trees.","input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7] output: [3,4,5,5,4,null,7] example 2: input: root1 = [1], root2 = [1,2] output: [2,2]","the number of nodes in both trees is in the range `[0, 2000]`. `-10^4 <= node.val <= 10^4`",
618,Students Report By Geography,SQL Schema,Hard,https://leetcode.com/problems/students-report-by-geography,Amazon,,84,,sql schema,,,
619,Biggest Single Number,SQL Schema,Easy,https://leetcode.com/problems/biggest-single-number,,,88,,sql schema,,,
620,Not Boring Movies,SQL Schema,Easy,https://leetcode.com/problems/not-boring-movies,,,347,,sql schema,,,
621,Task Scheduler,"Given a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.

However, there is a non-negative integer `n` that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least `n` units of time between any two same tasks.

Return the least number of units of times that the CPU will take to finish all the given tasks.


Example 1:
Input: tasks = [""A"",""A"",""A"",""B"",""B"",""B""], n = 2
Output: 8
Explanation: 
A -> B -> idle -> A -> B -> idle -> A -> B
There is at least 2 units of time between any two same tasks.


Example 2:
Input: tasks = [""A"",""A"",""A"",""B"",""B"",""B""], n = 0
Output: 6
Explanation: On this case any permutation of size 6 would work since n = 0.

[""A"",""A"",""A"",""B"",""B"",""B""]
[""A"",""B"",""A"",""B"",""A"",""B""]
[""B"",""B"",""B"",""A"",""A"",""A""]
...

And so on.


Example 3:
Input: tasks = [""A"",""A"",""A"",""A"",""A"",""A"",""B"",""C"",""D"",""E"",""F"",""G""], n = 2
Output: 16
Explanation: 
One possible solution is
A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A

Constraints:
`1 <= task.length <= 104`
`tasks[i]` is upper-case English letter.

The integer `n` is in the range `[0, 100]`.",Medium,https://leetcode.com/problems/task-scheduler,"Facebook,Rubrik,Amazon,Pinterest,Google,Microsoft,Bloomberg,Airtel","Array,Greedy,Queue",4588,"[Rearrange String k Distance Apart, /problems/rearrange-string-k-distance-apart/, Hard], [Reorganize String, /problems/reorganize-string/, Medium]","given a characters array `tasks`, representing the tasks a cpu needs to do, where each letter represents a different task. tasks could be done in any order. each task is done in one unit of time. for each unit of time, the cpu could complete either one task or just be idle. however, there is a non-negative integer `n` that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least `n` units of time between any two same tasks. return the least number of units of times that the cpu will take to finish all the given tasks.","input: tasks = [""a"",""a"",""a"",""b"",""b"",""b""], n = 2 output: 8 explanation: a -> b -> idle -> a -> b -> idle -> a -> b there is at least 2 units of time between any two same tasks. example 2: input: tasks = [""a"",""a"",""a"",""b"",""b"",""b""], n = 0 output: 6 explanation: on this case any permutation of size 6 would work since n = 0. [""a"",""a"",""a"",""b"",""b"",""b""] [""a"",""b"",""a"",""b"",""a"",""b""] [""b"",""b"",""b"",""a"",""a"",""a""] ... and so on. example 3: input: tasks = [""a"",""a"",""a"",""a"",""a"",""a"",""b"",""c"",""d"",""e"",""f"",""g""], n = 2 output: 16 explanation: one possible solution is a -> b -> c -> a -> d -> e -> a -> f -> g -> a -> idle -> idle -> a -> idle -> idle -> a","`1 <= task.length <= 10^4` `tasks[i]` is upper-case english letter. the integer `n` is in the range `[0, 10^0]`.",
622,Design Circular Queue,"Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called ""Ring Buffer"".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.

Implementation the `MyCircularQueue` class:
`MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`.

`int Front()` Gets the front item from the queue. If the queue is empty, return `-1`.

`int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`.

`boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful.

`boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful.

`boolean isEmpty()` Checks whether the circular queue is empty or not.

`boolean isFull()` Checks whether the circular queue is full or not.


Example 1:
Input
[""MyCircularQueue"", ""enQueue"", ""enQueue"", ""enQueue"", ""enQueue"", ""Rear"", ""isFull"", ""deQueue"", ""enQueue"", ""Rear""]
[[3], [1], [2], [3], [4], [], [], [], [4], []]
Output
[null, true, true, true, false, 3, true, true, true, 4]
Explanation
MyCircularQueue myCircularQueue = new MyCircularQueue(3);
myCircularQueue.enQueue(1); // return True
myCircularQueue.enQueue(2); // return True
myCircularQueue.enQueue(3); // return True
myCircularQueue.enQueue(4); // return False
myCircularQueue.Rear();     // return 3
myCircularQueue.isFull();   // return True
myCircularQueue.deQueue();  // return True
myCircularQueue.enQueue(4); // return True
myCircularQueue.Rear();     // return 4

Constraints:
`1 <= k <= 1000`
`0 <= value <= 1000`
At most `3000` calls will be made to `enQueue`, `deQueue`, `Front`, `Rear`, `isEmpty`, and `isFull`.

Follow up: Could you solve the problem without using the built-in queue?",Medium,https://leetcode.com/problems/design-circular-queue,"Facebook,Amazon,Microsoft,Rubrik,Oracle","Design,Queue",1019,"[Design Circular Deque, /problems/design-circular-deque/, Medium], [Design Front Middle Back Queue, /problems/design-front-middle-back-queue/, Medium]","design your implementation of the circular queue. the circular queue is a linear data structure in which the operations are performed based on fifo (first in first out) principle and the last position is connected back to the first position to make a circle. it is also called ""ring buffer"". one of the benefits of the circular queue is that we can make use of the spaces in front of the queue. in a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. but using the circular queue, we can use the space to store new values. implementation the `mycircularqueue` class: `mycircularqueue(k)` initializes the object with the size of the queue to be `k`. `int front()` gets the front item from the queue. if the queue is empty, return `-1`. `int rear()` gets the last item from the queue. if the queue is empty, return `-1`. `boolean enqueue(int value)` inserts an element into the circular queue. return `true` if the operation is successful. `boolean dequeue()` deletes an element from the circular queue. return `true` if the operation is successful. `boolean isempty()` checks whether the circular queue is empty or not. `boolean isfull()` checks whether the circular queue is full or not.","input [""mycircularqueue"", ""enqueue"", ""enqueue"", ""enqueue"", ""enqueue"", ""rear"", ""isfull"", ""dequeue"", ""enqueue"", ""rear""] [[3], [1], [2], [3], [4], [], [], [], [4], []] output [null, true, true, true, false, 3, true, true, true, 4] explanation mycircularqueue mycircularqueue = new mycircularqueue(3); mycircularqueue.enqueue(1); // return true mycircularqueue.enqueue(2); // return true mycircularqueue.enqueue(3); // return true mycircularqueue.enqueue(4); // return false mycircularqueue.rear(); // return 3 mycircularqueue.isfull(); // return true mycircularqueue.dequeue(); // return true mycircularqueue.enqueue(4); // return true mycircularqueue.rear(); // return 4","`1 <= k <= 1000` `0 <= value <= 1000` at most `3000` calls will be made to `enqueue`, `dequeue`, `front`, `rear`, `isempty`, and `isfull`.",could you solve the problem without using the built-in queue?
623,Add One Row to Tree,"Given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`.

Note that the `root` node is at depth `1`.

The adding rule is:
Given the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root.

`cur`'s original left subtree should be the left subtree of the new left subtree root.

`cur`'s original right subtree should be the right subtree of the new right subtree root.

If `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.


Example 1:
Input: root = [4,2,6,3,1,5], val = 1, depth = 2
Output: [4,1,1,2,null,null,6,3,1,5]

Example 2:
Input: root = [4,2,null,3,1], val = 1, depth = 3
Output: [4,2,null,1,1,3,null,null,1]

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

The depth of the tree is in the range `[1, 104]`.

`-100 <= Node.val <= 100`
`-105 <= val <= 105`
`1 <= depth <= the depth of tree + 1`",Medium,https://leetcode.com/problems/add-one-row-to-tree,Gilt Groupe,Tree,898,,"given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`. note that the `root` node is at depth `1`. the adding rule is: given the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root. `cur`'s original left subtree should be the left subtree of the new left subtree root. `cur`'s original right subtree should be the right subtree of the new right subtree root. if `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.","input: root = [4,2,6,3,1,5], val = 1, depth = 2 output: [4,1,1,2,null,null,6,3,1,5] example 2: input: root = [4,2,null,3,1], val = 1, depth = 3 output: [4,2,null,1,1,3,null,null,1]","the number of nodes in the tree is in the range `[1, 10^4]`. the depth of the tree is in the range `[1, 10^4]`. `-10^0 <= node.val <= 10^0` `-10^5 <= val <= 10^5` `1 <= depth <= the depth of tree + 1`",
624,Maximum Distance in Arrays,"You are given `m` `arrays`, where each array is sorted in ascending order.

You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers `a` and `b` to be their absolute difference `|a - b|`.

Return the maximum distance.


Example 1:
Input: arrays = [[1,2,3],[4,5],[1,2,3]]
Output: 4
Explanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.


Example 2:
Input: arrays = [[1],[1]]
Output: 0

Example 3:
Input: arrays = [[1],[2]]
Output: 1

Example 4:
Input: arrays = [[1,4],[0,5]]
Output: 4

Constraints:
`m == arrays.length`
`2 <= m <= 105`
`1 <= arrays[i].length <= 500`
`-104 <= arrays[i][j] <= 104`
`arrays[i]` is sorted in ascending order.

There will be at most `105` integers in all the arrays.",Medium,https://leetcode.com/problems/maximum-distance-in-arrays,Yahoo,"Array,Hash Table",491,,"you are given `m` `arrays`, where each array is sorted in ascending order. you can pick up two integers from two different arrays (each array picks one) and calculate the distance. we define the distance between two integers `a` and `b` to be their absolute difference `|a - b|`. return the maximum distance.","input: arrays = [[1,2,3],[4,5],[1,2,3]] output: 4 explanation: one way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array. example 2: input: arrays = [[1],[1]] output: 0 example 3: input: arrays = [[1],[2]] output: 1 example 4: input: arrays = [[1,4],[0,5]] output: 4",`m == arrays.length` `2 <= m <= 10^5` `1 <= arrays[i].length <= 500` `-10^4 <= arrays[i][j] <= 10^4` `arrays[i]` is sorted in ascending order. there will be at most `10^5` integers in all the arrays.,
625,Minimum Factorization,"Given a positive integer `a`, find the smallest positive integer `b` whose multiplication of each digit equals to `a`. 
If there is no answer or the answer is not fit in 32-bit signed integer, then return 0.


Example 1
Input:
48 
Output:
68

Example 2
Input: 
15
Output:
35",Medium,https://leetcode.com/problems/minimum-factorization,Tencent,"Math,Recursion",103,,"given a positive integer `a`, find the smallest positive integer `b` whose multiplication of each digit equals to `a`. if there is no answer or the answer is not fit in 32-bit signed integer, then return 0. example 1 input: 48 output: 68 example 2 input: 15 output: 35",,,
626,Exchange Seats,SQL Schema,Medium,https://leetcode.com/problems/exchange-seats,Amazon,,439,,sql schema,,,
627,Swap Salary,SQL Schema,Easy,https://leetcode.com/problems/swap-salary,Amazon,,598,,sql schema,,,
628,Maximum Product of Three Numbers,"Given an integer array `nums`, find three numbers whose product is maximum and return the maximum product.


Example 1:
Input: nums = [1,2,3]
Output: 6

Example 2:
Input: nums = [1,2,3,4]
Output: 24

Example 3:
Input: nums = [-1,-2,-3]
Output: -6

Constraints:
`3 <= nums.length <= 104`
`-1000 <= nums[i] <= 1000`",Easy,https://leetcode.com/problems/maximum-product-of-three-numbers,Amazon,"Array,Math",1566,"[Maximum Product Subarray, /problems/maximum-product-subarray/, Medium]","given an integer array `nums`, find three numbers whose product is maximum and return the maximum product.","input: nums = [1,2,3] output: 6 example 2: input: nums = [1,2,3,4] output: 24 example 3: input: nums = [-1,-2,-3] output: -6",`3 <= nums.length <= 10^4` `-1000 <= nums[i] <= 1000`,
629,K Inverse Pairs Array,"Given two integers `n` and `k`, find how many different arrays consist of numbers from `1` to `n` such that there are exactly `k` inverse pairs.

We define an inverse pair as following: For `ith` and `jth` element in the array, if `i` < `j` and `a[i]` > `a[j]` then it's an inverse pair; Otherwise, it's not.

Since the answer may be very large, the answer should be modulo 109 + 7.


Example 1:
Input: n = 3, k = 0
Output: 1
Explanation: 
Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.


Example 2:
Input: n = 3, k = 1
Output: 2
Explanation: 
The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.

Note:
The integer `n` is in the range [1, 1000] and `k` is in the range [0, 1000].",Hard,https://leetcode.com/problems/k-inverse-pairs-array,Works Applications,Dynamic Programming,393,,"given two integers `n` and `k`, find how many different arrays consist of numbers from `1` to `n` such that there are exactly `k` inverse pairs. we define an inverse pair as following: for `ith` and `jth` element in the array, if `i` < `j` and `a[i]` > `a[j]` then it's an inverse pair; otherwise, it's not. since the answer may be very large, the answer should be modulo 109 + 7.","input: n = 3, k = 0 output: 1 explanation: only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair. example 2: input: n = 3, k = 1 output: 2 explanation: the array [1,3,2] and [2,1,3] have exactly 1 inverse pair. note: the integer `n` is in the range [1, 1000] and `k` is in the range [0, 1000].",,
630,Course Schedule III,"There are `n` different online courses numbered from `1` to `n`. Each course has some duration(course length) `t` and closed on `dth` day. A course should be taken continuously for `t` days and must be finished before or on the `dth` day. You will start at the `1st` day.

Given `n` online courses represented by pairs `(t,d)`, your task is to find the maximal number of courses that can be taken.


Example:
Input: [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]
Output: 3
Explanation: 
There're totally 4 courses, but you can take 3 courses at most:
First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.

Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. 
Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. 
The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.

Note:
The integer 1 <= d, t, n <= 10,000.

You can't take two courses simultaneously.",Hard,https://leetcode.com/problems/course-schedule-iii,"Google,Microsoft",Greedy,1015,"[Course Schedule, /problems/course-schedule/, Medium], [Course Schedule II, /problems/course-schedule-ii/, Medium]","there are `n` different online courses numbered from `1` to `n`. each course has some duration(course length) `t` and closed on `dth` day. a course should be taken continuously for `t` days and must be finished before or on the `dth` day. you will start at the `1st` day. given `n` online courses represented by pairs `(t,d)`, your task is to find the maximal number of courses that can be taken.","input: [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]] output: 3 explanation: there're totally 4 courses, but you can take 3 courses at most: first, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day. second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. the 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date. note: the integer 1 <= d, t, n <= 10,000. you can't take two courses simultaneously.",,
631,Design Excel Sum Formula,"Your task is to design the basic function of Excel and implement the function of sum formula.  Specifically, you need to implement the following functions:
`Excel(int H, char W):` This is the constructor. The inputs represents the height and width of the Excel form. H is a positive integer, range from 1 to 26. It represents the height. W is a character range from 'A' to 'Z'. It represents that the width is the number of characters from 'A' to W. The Excel form content is represented by a height * width 2D integer array `C`, it should be initialized to zero. You should assume that the first row of `C` starts from 1, and the first column of `C` starts from 'A'.

`void Set(int row, char column, int val):` Change the value at `C(row, column)` to be val.

`int Get(int row, char column):` Return the value at `C(row, column)`.

`int Sum(int row, char column, List of Strings : numbers):` This function calculate and set the value at `C(row, column)`, where the value should be the sum of cells represented by `numbers`. This function return the sum result at `C(row, column)`. This sum formula should exist until this cell is overlapped by another value or another sum formula.

`numbers` is a list of strings that each string represent a cell or a range of cells. If the string represent a single cell, then it has the following format : `ColRow`. For example, ""F7"" represents the cell at (7, F). 
If the string represent a range of cells, then it has the following format : `ColRow1:ColRow2`. The range will always be a rectangle, and ColRow1 represent the position of the top-left cell, and ColRow2 represents the position of the bottom-right cell. 

Example 1:
Excel(3,""C""); 
// construct a 3*3 2D array with all zero.

//   A B C
// 1 0 0 0
// 2 0 0 0
// 3 0 0 0
Set(1, ""A"", 2);
// set C(1,""A"") to be 2.

//   A B C
// 1 2 0 0
// 2 0 0 0
// 3 0 0 0
Sum(3, ""C"", [""A1"", ""A1:B2""]);
// set C(3,""C"") to be the sum of value at C(1,""A"") and the values sum of the rectangle range whose top-left cell is C(1,""A"") and bottom-right cell is C(2,""B""). Return 4. 
//   A B C
// 1 2 0 0
// 2 0 0 0
// 3 0 0 4
Set(2, ""B"", 2);
// set C(2,""B"") to be 2. Note C(3, ""C"") should also be changed.

//   A B C
// 1 2 0 0
// 2 0 2 0
// 3 0 0 6
Note:
You could assume that there won't be any circular sum reference. For example, A1 = sum(B1) and B1 = sum(A1).

 The test cases are using double-quotes to represent a character.

Please remember to RESET your class variables declared in class Excel, as static/class variables are persisted across multiple test cases. Please see here for more details.",Hard,https://leetcode.com/problems/design-excel-sum-formula,Opendoor,Design,99,,"your task is to design the basic function of excel and implement the function of sum formula. specifically, you need to implement the following functions: `excel(int h, char w):` this is the constructor. the inputs represents the height and width of the excel form. h is a positive integer, range from 1 to 26. it represents the height. w is a character range from 'a' to 'z'. it represents that the width is the number of characters from 'a' to w. the excel form content is represented by a height * width 2d integer array `c`, it should be initialized to zero. you should assume that the first row of `c` starts from 1, and the first column of `c` starts from 'a'. `void set(int row, char column, int val):` change the value at `c(row, column)` to be val. `int get(int row, char column):` return the value at `c(row, column)`. `int sum(int row, char column, list of strings : numbers):` this function calculate and set the value at `c(row, column)`, where the value should be the sum of cells represented by `numbers`. this function return the sum result at `c(row, column)`. this sum formula should exist until this cell is overlapped by another value or another sum formula. `numbers` is a list of strings that each string represent a cell or a range of cells. if the string represent a single cell, then it has the following format : `colrow`. for example, ""f7"" represents the cell at (7, f). if the string represent a range of cells, then it has the following format : `colrow1:colrow2`. the range will always be a rectangle, and colrow1 represent the position of the top-left cell, and colrow2 represents the position of the bottom-right cell.","excel(3,""c""); // construct a 3*3 2d array with all zero. // a b c // 1 0 0 0 // 2 0 0 0 // 3 0 0 0 set(1, ""a"", 2); // set c(1,""a"") to be 2. // a b c // 1 2 0 0 // 2 0 0 0 // 3 0 0 0 sum(3, ""c"", [""a1"", ""a1:b2""]); // set c(3,""c"") to be the sum of value at c(1,""a"") and the values sum of the rectangle range whose top-left cell is c(1,""a"") and bottom-right cell is c(2,""b""). return 4. // a b c // 1 2 0 0 // 2 0 0 0 // 3 0 0 4 set(2, ""b"", 2); // set c(2,""b"") to be 2. note c(3, ""c"") should also be changed. // a b c // 1 2 0 0 // 2 0 2 0 // 3 0 0 6 note: you could assume that there won't be any circular sum reference. for example, a1 = sum(b1) and b1 = sum(a1). the test cases are using double-quotes to represent a character. please remember to reset your class variables declared in class excel, as static/class variables are persisted across multiple test cases. please see here for more details.",,
632,Smallest Range Covering Elements from K Lists,"You have `k` lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the `k` lists.

We define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c` or `a < c` if `b - a == d - c`.


Example 1:
Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].

List 2: [0, 9, 12, 20], 20 is in range [20,24].

List 3: [5, 18, 22, 30], 22 is in range [20,24].


Example 2:
Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]

Example 3:
Input: nums = [[10,10],[11,11]]
Output: [10,11]

Example 4:
Input: nums = [[10],[11]]
Output: [10,11]

Example 5:
Input: nums = [[1],[2],[3],[4],[5],[6],[7]]
Output: [1,7]

Constraints:
`nums.length == k`
`1 <= k <= 3500`
`1 <= nums[i].length <= 50`
`-105 <= nums[i][j] <= 105`
`nums[i]` is sorted in non-decreasing order.",Hard,https://leetcode.com/problems/smallest-range-covering-elements-from-k-lists,Amazon,"Hash Table,Two Pointers,String",1384,"[Minimum Window Substring, /problems/minimum-window-substring/, Hard]","you have `k` lists of sorted integers in non-decreasing order. find the smallest range that includes at least one number from each of the `k` lists. we define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c` or `a < c` if `b - a == d - c`.","input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]] output: [20,24] explanation: list 1: [4, 10, 15, 24,26], 24 is in range [20,24]. list 2: [0, 9, 12, 20], 20 is in range [20,24]. list 3: [5, 18, 22, 30], 22 is in range [20,24]. example 2: input: nums = [[1,2,3],[1,2,3],[1,2,3]] output: [1,1] example 3: input: nums = [[10,10],[11,11]] output: [10,11] example 4: input: nums = [[10],[11]] output: [10,11] example 5: input: nums = [[1],[2],[3],[4],[5],[6],[7]] output: [1,7]",`nums.length == k` `1 <= k <= 3500` `1 <= nums[i].length <= 50` `-10^5 <= nums[i][j] <= 10^5` `nums[i]` is sorted in non-decreasing order.,
633,Sum of Square Numbers,"Given a non-negative integer `c`, decide whether there're two integers `a` and `b` such that `a2 + b2 = c`.


Example 1:
Input: c = 5
Output: true
Explanation: 1 * 1 + 2 * 2 = 5

Example 2:
Input: c = 3
Output: false

Example 3:
Input: c = 4
Output: true

Example 4:
Input: c = 2
Output: true

Example 5:
Input: c = 1
Output: true

Constraints:
`0 <= c <= 231 - 1`",Medium,https://leetcode.com/problems/sum-of-square-numbers,Apple,Math,676,"[Valid Perfect Square, /problems/valid-perfect-square/, Easy]","given a non-negative integer `c`, decide whether there're two integers `a` and `b` such that `a2 + b2 = c`.",input: c = 5 output: true explanation: 1 * 1 + 2 * 2 = 5 example 2: input: c = 3 output: false example 3: input: c = 4 output: true example 4: input: c = 2 output: true example 5: input: c = 1 output: true,`0 <= c <= 231 - 1`,
634,Find the Derangement of An Array,"In combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.

There's originally an array consisting of `n` integers from 1 to `n` in ascending order, you need to find the number of derangement it can generate.

Also, since the answer may be very large, you should return the output mod 109 + 7.


Example 1:
Input: 3
Output: 2
Explanation: The original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].

Note:
`n` is in the range of [1, 106].",Medium,https://leetcode.com/problems/find-the-derangement-of-an-array,"Amazon,IXL",Math,143,,"in combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position. there's originally an array consisting of `n` integers from 1 to `n` in ascending order, you need to find the number of derangement it can generate. also, since the answer may be very large, you should return the output mod 109 + 7.","input: 3 output: 2 explanation: the original array is [1,2,3]. the two derangements are [2,3,1] and [3,1,2]. note: `n` is in the range of [1, 106].",,
635,Design Log Storage System,"You are given several logs, where each log contains a unique ID and timestamp. Timestamp is a string that has the following format: `Year:Month:Day:Hour:Minute:Second`, for example, `2017:01:01:23:59:59`. All domains are zero-padded decimal numbers.

Implement the `LogSystem` class:
`LogSystem()` Initializes the `LogSystem` object.

`void put(int id, string timestamp)` Stores the given log `(id, timestamp)` in your storage system.

`int[] retrieve(string start, string end, string granularity)` Returns the IDs of the logs whose timestamps are within the range from `start` to `end` inclusive. `start` and `end` all have the same format as `timestamp`, and `granularity` means how precise the range should be (i.e. to the exact `Day`, `Minute`, etc.). For example, `start = ""2017:01:01:23:59:59""`, `end = ""2017:01:02:23:59:59""`, and `granularity = ""Day""` means that we need to find the logs within the inclusive range from Jan. 1st 2017 to Jan. 2nd 2017, and the `Hour`, `Minute`, and `Second` for each log entry can be ignored.


Example 1:
Input
[""LogSystem"", ""put"", ""put"", ""put"", ""retrieve"", ""retrieve""]
[[], [1, ""2017:01:01:23:59:59""], [2, ""2017:01:01:22:59:59""], [3, ""2016:01:01:00:00:00""], [""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""Year""], [""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""Hour""]]
Output
[null, null, null, null, [3, 2, 1], [2, 1]]
Explanation
LogSystem logSystem = new LogSystem();
logSystem.put(1, ""2017:01:01:23:59:59"");
logSystem.put(2, ""2017:01:01:22:59:59"");
logSystem.put(3, ""2016:01:01:00:00:00"");
// return [3,2,1], because you need to return all logs between 2016 and 2017.

logSystem.retrieve(""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""Year"");
// return [2,1], because you need to return all logs between Jan. 1, 2016 01:XX:XX and Jan. 1, 2017 23:XX:XX.

// Log 3 is not returned because Jan. 1, 2016 00:00:00 comes before the start of the range.

logSystem.retrieve(""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""Hour"");

Constraints:
`1 <= id <= 500`
`2000 <= Year <= 2017`
`1 <= Month <= 12`
`1 <= Day <= 31`
`0 <= Hour <= 23`
`0 <= Minute, Second <= 59`
`granularity` is one of the values `[""Year"", ""Month"", ""Day"", ""Hour"", ""Minute"", ""Second""]`.

At most `500` calls will be made to `put` and `retrieve`.",Medium,https://leetcode.com/problems/design-log-storage-system,,"String,Design",320,"[Design In-Memory File System, /problems/design-in-memory-file-system/, Hard]","you are given several logs, where each log contains a unique id and timestamp. timestamp is a string that has the following format: `year:month:day:hour:minute:second`, for example, `2017:01:01:23:59:59`. all domains are zero-padded decimal numbers. implement the `logsystem` class: `logsystem()` initializes the `logsystem` object. `void put(int id, string timestamp)` stores the given log `(id, timestamp)` in your storage system. `int[] retrieve(string start, string end, string granularity)` returns the ids of the logs whose timestamps are within the range from `start` to `end` inclusive. `start` and `end` all have the same format as `timestamp`, and `granularity` means how precise the range should be (i.e. to the exact `day`, `minute`, etc.). for example, `start = ""2017:01:01:23:59:59""`, `end = ""2017:01:02:23:59:59""`, and `granularity = ""day""` means that we need to find the logs within the inclusive range from jan. 1st 2017 to jan. 2nd 2017, and the `hour`, `minute`, and `second` for each log entry can be ignored.","input [""logsystem"", ""put"", ""put"", ""put"", ""retrieve"", ""retrieve""] [[], [1, ""2017:01:01:23:59:59""], [2, ""2017:01:01:22:59:59""], [3, ""2016:01:01:00:00:00""], [""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""year""], [""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""hour""]] output [null, null, null, null, [3, 2, 1], [2, 1]] explanation logsystem logsystem = new logsystem(); logsystem.put(1, ""2017:01:01:23:59:59""); logsystem.put(2, ""2017:01:01:22:59:59""); logsystem.put(3, ""2016:01:01:00:00:00""); // return [3,2,1], because you need to return all logs between 2016 and 2017. logsystem.retrieve(""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""year""); // return [2,1], because you need to return all logs between jan. 1, 2016 01:xx:xx and jan. 1, 2017 23:xx:xx. // log 3 is not returned because jan. 1, 2016 00:00:00 comes before the start of the range. logsystem.retrieve(""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""hour"");","`1 <= id <= 500` `2000 <= year <= 2017` `1 <= month <= 12` `1 <= day <= 31` `0 <= hour <= 23` `0 <= minute, second <= 59` `granularity` is one of the values `[""year"", ""month"", ""day"", ""hour"", ""minute"", ""second""]`. at most `500` calls will be made to `put` and `retrieve`.",
636,Exclusive Time of Functions,"On a single-threaded CPU, we execute a program containing `n` functions. Each function has a unique ID between `0` and `n-1`.

Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.

You are given a list `logs`, where `logs[i]` represents the `ith` log message formatted as a string `""{function_id}:{""start"" | ""end""}:{timestamp}""`. For example, `""0:start:3""` means a function call with function ID `0` started at the beginning of timestamp `3`, and `""1:end:2""` means a function call with function ID `1` ended at the end of timestamp `2`. Note that a function can be called multiple times, possibly recursively.

A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for `2` time units and another call executing for `1` time unit, the exclusive time is `2 + 1 = 3`.

Return the exclusive time of each function in an array, where the value at the `ith` index represents the exclusive time for the function with ID `i`.


Example 1:
Input: n = 2, logs = [""0:start:0"",""1:start:2"",""1:end:5"",""0:end:6""]
Output: [3,4]
Explanation:
Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.

Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.

Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.

So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.


Example 2:
Input: n = 1, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""0:start:6"",""0:end:6"",""0:end:7""]
Output: [8]
Explanation:
Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.

Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.

Function 0 (initial call) resumes execution then immediately calls itself again.

Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.

Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.

So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.


Example 3:
Input: n = 2, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""1:start:6"",""1:end:6"",""0:end:7""]
Output: [7,1]
Explanation:
Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.

Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.

Function 0 (initial call) resumes execution then immediately calls function 1.

Function 1 starts at the beginning of time 6, executes 1 units of time, and ends at the end of time 6.

Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time.

So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.


Example 4:
Input: n = 2, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""1:start:7"",""1:end:7"",""0:end:8""]
Output: [8,1]

Example 5:
Input: n = 1, logs = [""0:start:0"",""0:end:0""]
Output: [1]

Constraints:
`1 <= n <= 100`
`1 <= logs.length <= 500`
`0 <= function_id < n`
`0 <= timestamp <= 109`
No two start events will happen at the same timestamp.

No two end events will happen at the same timestamp.

Each function has an `""end""` log for each `""start""` log.",Medium,https://leetcode.com/problems/exclusive-time-of-functions,"Facebook,Amazon,Microsoft,LinkedIn,Google",Stack,1025,,"on a single-threaded cpu, we execute a program containing `n` functions. each function has a unique id between `0` and `n-1`. function calls are stored in a call stack: when a function call starts, its id is pushed onto the stack, and when a function call ends, its id is popped off the stack. the function whose id is at the top of the stack is the current function being executed. each time a function starts or ends, we write a log with the id, whether it started or ended, and the timestamp. you are given a list `logs`, where `logs[i]` represents the `ith` log message formatted as a string `""{function_id}:{""start"" | ""end""}:{timestamp}""`. for example, `""0:start:3""` means a function call with function id `0` started at the beginning of timestamp `3`, and `""1:end:2""` means a function call with function id `1` ended at the end of timestamp `2`. note that a function can be called multiple times, possibly recursively. a function's exclusive time is the sum of execution times for all function calls in the program. for example, if a function is called twice, one call executing for `2` time units and another call executing for `1` time unit, the exclusive time is `2 + 1 = 3`. return the exclusive time of each function in an array, where the value at the `ith` index represents the exclusive time for the function with id `i`.","input: n = 2, logs = [""0:start:0"",""1:start:2"",""1:end:5"",""0:end:6""] output: [3,4] explanation: function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1. function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5. function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time. so function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing. example 2: input: n = 1, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""0:start:6"",""0:end:6"",""0:end:7""] output: [8] explanation: function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. function 0 (initial call) resumes execution then immediately calls itself again. function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time. function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time. so function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing. example 3: input: n = 2, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""1:start:6"",""1:end:6"",""0:end:7""] output: [7,1] explanation: function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself. function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time. function 0 (initial call) resumes execution then immediately calls function 1. function 1 starts at the beginning of time 6, executes 1 units of time, and ends at the end of time 6. function 0 resumes execution at the beginning of time 6 and executes for 2 units of time. so function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing. example 4: input: n = 2, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""1:start:7"",""1:end:7"",""0:end:8""] output: [8,1] example 5: input: n = 1, logs = [""0:start:0"",""0:end:0""] output: [1]","`1 <= n <= 10^0` `1 <= logs.length <= 500` `0 <= function_id < n` `0 <= timestamp <= 10^9` no two start events will happen at the same timestamp. no two end events will happen at the same timestamp. each function has an `""end""` log for each `""start""` log.",
637,Average of Levels in Binary Tree,"Given the `root` of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within `10-5` of the actual answer will be accepted.


Example 1:
Input: root = [3,9,20,null,15,7]
Output: [3.00000,14.50000,11.00000]
Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.

Hence return [3, 14.5, 11].


Example 2:
Input: root = [3,9,20,15,7]
Output: [3.00000,14.50000,11.00000]

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-231 <= Node.val <= 231 - 1`",Easy,https://leetcode.com/problems/average-of-levels-in-binary-tree,Facebook,Tree,1955,"[Binary Tree Level Order Traversal, /problems/binary-tree-level-order-traversal/, Medium], [Binary Tree Level Order Traversal II, /problems/binary-tree-level-order-traversal-ii/, Medium]","given the `root` of a binary tree, return the average value of the nodes on each level in the form of an array. answers within `10-5` of the actual answer will be accepted.","input: root = [3,9,20,null,15,7] output: [3.00000,14.50000,11.00000] explanation: the average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11. hence return [3, 14.5, 11]. example 2: input: root = [3,9,20,15,7] output: [3.00000,14.50000,11.00000]","the number of nodes in the tree is in the range `[1, 10^4]`. `-231 <= node.val <= 231 - 1`",
638,Shopping Offers,"In LeetCode Store, there are some kinds of items to sell. Each item has a price.

However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.

You are given the each item's price, a set of special offers, and the number we need to buy for each item.

The job is to output the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers.

Each special offer is represented in the form of an array, the last number represents the price you need to pay for this special offer, other numbers represents how many specific items you could get if you buy this offer.

You could use any of special offers as many times as you want.


Example 1:
Input: [2,5], [[3,0,5],[1,2,10]], [3,2]
Output: 14
Explanation: 
There are two kinds of items, A and B. Their prices are $2 and $5 respectively. 
In special offer 1, you can pay $5 for 3A and 0B
In special offer 2, you can pay $10 for 1A and 2B. 
You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.


Example 2:
Input: [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]
Output: 11
Explanation: 
The price of A is $2, and $3 for B, $4 for C. 
You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. 
You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. 
You cannot add more items, though only $9 for 2A ,2B and 1C.

Note:
There are at most 6 kinds of items, 100 special offers.

For each item, you need to buy at most 6 of them.

You are not allowed to buy more items than you want, even if that would lower the overall price.",Medium,https://leetcode.com/problems/shopping-offers,Google,"Dynamic Programming,Depth-first Search",719,,"in leetcode store, there are some kinds of items to sell. each item has a price. however, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price. you are given the each item's price, a set of special offers, and the number we need to buy for each item. the job is to output the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers. each special offer is represented in the form of an array, the last number represents the price you need to pay for this special offer, other numbers represents how many specific items you could get if you buy this offer. you could use any of special offers as many times as you want.","input: [2,5], [[3,0,5],[1,2,10]], [3,2] output: 14 explanation: there are two kinds of items, a and b. their prices are $2 and $5 respectively. in special offer 1, you can pay $5 for 3a and 0b in special offer 2, you can pay $10 for 1a and 2b. you need to buy 3a and 2b, so you may pay $10 for 1a and 2b (special offer #2), and $4 for 2a. example 2: input: [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1] output: 11 explanation: the price of a is $2, and $3 for b, $4 for c. you may pay $4 for 1a and 1b, and $9 for 2a ,2b and 1c. you need to buy 1a ,2b and 1c, so you may pay $4 for 1a and 1b (special offer #1), and $3 for 1b, $4 for 1c. you cannot add more items, though only $9 for 2a ,2b and 1c. note: there are at most 6 kinds of items, 100 special offers. for each item, you need to buy at most 6 of them. you are not allowed to buy more items than you want, even if that would lower the overall price.",,
639,Decode Ways II,"A message containing letters from `A-Z` can be encoded into numbers using the following mapping:
'A' -> ""1""
'B' -> ""2""
...

'Z' -> ""26""
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `""11106""` can be mapped into:
`""AAJF""` with the grouping `(1 1 10 6)`
`""KJF""` with the grouping `(11 10 6)`
Note that the grouping `(1 11 06)` is invalid because `""06""` cannot be mapped into `'F'` since `""6""` is different from `""06""`.

In addition to the mapping above, an encoded message may contain the `'*'` character, which can represent any digit from `'1'` to `'9'` (`'0'` is excluded). For example, the encoded message `""1*""` may represent any of the encoded messages `""11""`, `""12""`, `""13""`, `""14""`, `""15""`, `""16""`, `""17""`, `""18""`, or `""19""`. Decoding `""1*""` is equivalent to decoding any of the encoded messages it can represent.

Given a string `s` containing digits and the `'*'` character, return the number of ways to decode it.

Since the answer may be very large, return it modulo `109 + 7`.


Example 1:
Input: s = ""*""
Output: 9
Explanation: The encoded message can represent any of the encoded messages ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", or ""9"".

Each of these can be decoded to the strings ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", and ""I"" respectively.

Hence, there are a total of 9 ways to decode ""*"".


Example 2:
Input: s = ""1*""
Output: 18
Explanation: The encoded message can represent any of the encoded messages ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", or ""19"".

Each of these encoded messages have 2 ways to be decoded (e.g. ""11"" can be decoded to ""AA"" or ""K"").

Hence, there are a total of 9 * 2 = 18 ways to decode ""1*"".


Example 3:
Input: s = ""2*""
Output: 15
Explanation: The encoded message can represent any of the encoded messages ""21"", ""22"", ""23"", ""24"", ""25"", ""26"", ""27"", ""28"", or ""29"".

""21"", ""22"", ""23"", ""24"", ""25"", and ""26"" have 2 ways of being decoded, but ""27"", ""28"", and ""29"" only have 1 way.

Hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode ""2*"".


Constraints:
`1 <= s.length <= 105`
`s[i]` is a digit or `'*'`.",Hard,https://leetcode.com/problems/decode-ways-ii,"Google,Facebook",Dynamic Programming,583,"[Decode Ways, /problems/decode-ways/, Medium]","a message containing letters from `a-z` can be encoded into numbers using the following mapping: 'a' -> ""1"" 'b' -> ""2"" ... 'z' -> ""26"" to decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). for example, `""11106""` can be mapped into: `""aajf""` with the grouping `(1 1 10 6)` `""kjf""` with the grouping `(11 10 6)` note that the grouping `(1 11 06)` is invalid because `""06""` cannot be mapped into `'f'` since `""6""` is different from `""06""`. in addition to the mapping above, an encoded message may contain the `'*'` character, which can represent any digit from `'1'` to `'9'` (`'0'` is excluded). for example, the encoded message `""1*""` may represent any of the encoded messages `""11""`, `""12""`, `""13""`, `""14""`, `""15""`, `""16""`, `""17""`, `""18""`, or `""19""`. decoding `""1*""` is equivalent to decoding any of the encoded messages it can represent. given a string `s` containing digits and the `'*'` character, return the number of ways to decode it. since the answer may be very large, return it modulo `109 + 7`.","input: s = ""*"" output: 9 explanation: the encoded message can represent any of the encoded messages ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", or ""9"". each of these can be decoded to the strings ""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""g"", ""h"", and ""i"" respectively. hence, there are a total of 9 ways to decode ""*"". example 2: input: s = ""1*"" output: 18 explanation: the encoded message can represent any of the encoded messages ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", or ""19"". each of these encoded messages have 2 ways to be decoded (e.g. ""11"" can be decoded to ""aa"" or ""k""). hence, there are a total of 9 * 2 = 18 ways to decode ""1*"". example 3: input: s = ""2*"" output: 15 explanation: the encoded message can represent any of the encoded messages ""21"", ""22"", ""23"", ""24"", ""25"", ""26"", ""27"", ""28"", or ""29"". ""21"", ""22"", ""23"", ""24"", ""25"", and ""26"" have 2 ways of being decoded, but ""27"", ""28"", and ""29"" only have 1 way. hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode ""2*"".",`1 <= s.length <= 10^5` `s[i]` is a digit or `'*'`.,
640,Solve the Equation,"Solve a given equation and return the value of `x` in the form of string ""x=#value"". The equation contains only '+', '-' operation, the variable `x` and its coefficient.

If there is no solution for the equation, return ""No solution"".

If there are infinite solutions for the equation, return ""Infinite solutions"".

If there is exactly one solution for the equation, we ensure that the value of `x` is an integer.


Example 1:
Input: ""x+5-3+x=6+x-2""
Output: ""x=2""

Example 2:
Input: ""x=x""
Output: ""Infinite solutions""

Example 3:
Input: ""2x=x""
Output: ""x=0""

Example 4:
Input: ""2x+3x-6x=x+2""
Output: ""x=-1""

Example 5:
Input: ""x=x+2""
Output: ""No solution""",Medium,https://leetcode.com/problems/solve-the-equation,Amazon,Math,289,"[Fraction Addition and Subtraction, /problems/fraction-addition-and-subtraction/, Medium]","solve a given equation and return the value of `x` in the form of string ""x=#value"". the equation contains only '+', '-' operation, the variable `x` and its coefficient. if there is no solution for the equation, return ""no solution"". if there are infinite solutions for the equation, return ""infinite solutions"". if there is exactly one solution for the equation, we ensure that the value of `x` is an integer.","input: ""x+5-3+x=6+x-2"" output: ""x=2"" example 2: input: ""x=x"" output: ""infinite solutions"" example 3: input: ""2x=x"" output: ""x=0"" example 4: input: ""2x+3x-6x=x+2"" output: ""x=-1"" example 5: input: ""x=x+2"" output: ""no solution""",,
641,Design Circular Deque,"Design your implementation of the circular double-ended queue (deque).

Your implementation should support following operations:
`MyCircularDeque(k)`: Constructor, set the size of the deque to be k.

`insertFront()`: Adds an item at the front of Deque. Return true if the operation is successful.

`insertLast()`: Adds an item at the rear of Deque. Return true if the operation is successful.

`deleteFront()`: Deletes an item from the front of Deque. Return true if the operation is successful.

`deleteLast()`: Deletes an item from the rear of Deque. Return true if the operation is successful.

`getFront()`: Gets the front item from the Deque. If the deque is empty, return -1.

`getRear()`: Gets the last item from Deque. If the deque is empty, return -1.

`isEmpty()`: Checks whether Deque is empty or not. 
`isFull()`: Checks whether Deque is full or not.


Example:
MyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3
circularDeque.insertLast(1);			// return true
circularDeque.insertLast(2);			// return true
circularDeque.insertFront(3);			// return true
circularDeque.insertFront(4);			// return false, the queue is full
circularDeque.getRear();  			// return 2
circularDeque.isFull();				// return true
circularDeque.deleteLast();			// return true
circularDeque.insertFront(4);			// return true
circularDeque.getFront();			// return 4
Note:
All values will be in the range of [0, 1000].

The number of operations will be in the range of [1, 1000].

Please do not use the built-in Deque library.",Medium,https://leetcode.com/problems/design-circular-deque,Amazon,"Design,Queue",396,"[Design Circular Queue, /problems/design-circular-queue/, Medium], [Design Front Middle Back Queue, /problems/design-front-middle-back-queue/, Medium]","design your implementation of the circular double-ended queue (deque). your implementation should support following operations: `mycirculardeque(k)`: constructor, set the size of the deque to be k. `insertfront()`: adds an item at the front of deque. return true if the operation is successful. `insertlast()`: adds an item at the rear of deque. return true if the operation is successful. `deletefront()`: deletes an item from the front of deque. return true if the operation is successful. `deletelast()`: deletes an item from the rear of deque. return true if the operation is successful. `getfront()`: gets the front item from the deque. if the deque is empty, return -1. `getrear()`: gets the last item from deque. if the deque is empty, return -1. `isempty()`: checks whether deque is empty or not. `isfull()`: checks whether deque is full or not.","mycirculardeque circulardeque = new mycirculardeque(3); // set the size to be 3 circulardeque.insertlast(1); // return true circulardeque.insertlast(2); // return true circulardeque.insertfront(3); // return true circulardeque.insertfront(4); // return false, the queue is full circulardeque.getrear(); // return 2 circulardeque.isfull(); // return true circulardeque.deletelast(); // return true circulardeque.insertfront(4); // return true circulardeque.getfront(); // return 4 note: all values will be in the range of [0, 1000]. the number of operations will be in the range of [1, 1000]. please do not use the built-in deque library.",,
642,Design Search Autocomplete System,"Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character `'#'`). For each character they type except '#', you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:
The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.

The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first).

If less than 3 hot sentences exist, then just return as many as you can.

When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.

Your job is to implement the following functions:
The constructor function:
`AutocompleteSystem(String[] sentences, int[] times):` This is the constructor. The input is historical data. `Sentences` is a string array consists of previously typed sentences. `Times` is the corresponding times a sentence has been typed. Your system should record these historical data.

Now, the user wants to input a new sentence. The following function will provide the next character the user types:
`List<String> input(char c):` The input `c` is the next character typed by the user. The character will only be lower-case letters (`'a'` to `'z'`), blank space (`' '`) or a special character (`'#'`). Also, the previously typed sentence should be recorded in your system. The output will be the top 3 historical hot sentences that have prefix the same as the part of sentence already typed.


Example:
Operation: AutocompleteSystem([""i love you"", ""island"",""ironman"", ""i love leetcode""], [5,3,2,2])
The system have already tracked down the following sentences and their corresponding times:
`""i love you""` : `5` times
`""island""` : `3` times
`""ironman""` : `2` times
`""i love leetcode""` : `2` times
Now, the user begins another search:
Operation: input('i')
Output: [""i love you"", ""island"",""i love leetcode""]
Explanation:
There are four sentences that have prefix `""i""`. Among them, ""ironman"" and ""i love leetcode"" have same hot degree. Since `' '` has ASCII code 32 and `'r'` has ASCII code 114, ""i love leetcode"" should be in front of ""ironman"". Also we only need to output top 3 hot sentences, so ""ironman"" will be ignored.

Operation: input(' ')
Output: [""i love you"",""i love leetcode""]
Explanation:
There are only two sentences that have prefix `""i ""`.

Operation: input('a')
Output: []
Explanation:
There are no sentences that have prefix `""i a""`.

Operation: input('#')
Output: []
Explanation:
The user finished the input, the sentence `""i a""` should be saved as a historical sentence in system. And the following input will be counted as a new search.

Note:
The input sentence will always start with a letter and end with '#', and only one blank space will exist between two words.

The number of complete sentences that to be searched won't exceed 100. The length of each sentence including those in the historical data won't exceed 100.

Please use double-quote instead of single-quote when you write test cases even for a character input.

Please remember to RESET your class variables declared in class AutocompleteSystem, as static/class variables are persisted across multiple test cases. Please see here for more details.",Hard,https://leetcode.com/problems/design-search-autocomplete-system,"Microsoft,Amazon,Lyft,Google","Design,Trie",1268,"[Implement Trie (Prefix Tree), /problems/implement-trie-prefix-tree/, Medium]","design a search autocomplete system for a search engine. users may input a sentence (at least one word and end with a special character `'#'`). for each character they type except '#', you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. here are the specific rules: the hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before. the returned top 3 hot sentences should be sorted by hot degree (the first is the hottest one). if several sentences have the same degree of hot, you need to use ascii-code order (smaller one appears first). if less than 3 hot sentences exist, then just return as many as you can. when the input is a special character, it means the sentence ends, and in this case, you need to return an empty list. your job is to implement the following functions: the constructor function: `autocompletesystem(string[] sentences, int[] times):` this is the constructor. the input is historical data. `sentences` is a string array consists of previously typed sentences. `times` is the corresponding times a sentence has been typed. your system should record these historical data. now, the user wants to input a new sentence. the following function will provide the next character the user types: `list<string> input(char c):` the input `c` is the next character typed by the user. the character will only be lower-case letters (`'a'` to `'z'`), blank space (`' '`) or a special character (`'#'`). also, the previously typed sentence should be recorded in your system. the output will be the top 3 historical hot sentences that have prefix the same as the part of sentence already typed.","operation: autocompletesystem([""i love you"", ""island"",""ironman"", ""i love leetcode""], [5,3,2,2]) the system have already tracked down the following sentences and their corresponding times: `""i love you""` : `5` times `""island""` : `3` times `""ironman""` : `2` times `""i love leetcode""` : `2` times now, the user begins another search: operation: input('i') output: [""i love you"", ""island"",""i love leetcode""] explanation: there are four sentences that have prefix `""i""`. among them, ""ironman"" and ""i love leetcode"" have same hot degree. since `' '` has ascii code 32 and `'r'` has ascii code 114, ""i love leetcode"" should be in front of ""ironman"". also we only need to output top 3 hot sentences, so ""ironman"" will be ignored. operation: input(' ') output: [""i love you"",""i love leetcode""] explanation: there are only two sentences that have prefix `""i ""`. operation: input('a') output: [] explanation: there are no sentences that have prefix `""i a""`. operation: input('#') output: [] explanation: the user finished the input, the sentence `""i a""` should be saved as a historical sentence in system. and the following input will be counted as a new search. note: the input sentence will always start with a letter and end with '#', and only one blank space will exist between two words. the number of complete sentences that to be searched won't exceed 100. the length of each sentence including those in the historical data won't exceed 100. please use double-quote instead of single-quote when you write test cases even for a character input. please remember to reset your class variables declared in class autocompletesystem, as static/class variables are persisted across multiple test cases. please see here for more details.",,
643,Maximum Average Subarray I,"Given an array consisting of `n` integers, find the contiguous subarray of given length `k` that has the maximum average value. And you need to output the maximum average value.


Example 1:
Input: [1,12,-5,-6,50,3], k = 4
Output: 12.75
Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75
Note:
1 <= `k` <= `n` <= 30,000.

Elements of the given array will be in the range [-10,000, 10,000].",Easy,https://leetcode.com/problems/maximum-average-subarray-i,Amazon,Array,953,"[Maximum Average Subarray II, /problems/maximum-average-subarray-ii/, Hard]","given an array consisting of `n` integers, find the contiguous subarray of given length `k` that has the maximum average value. and you need to output the maximum average value.","input: [1,12,-5,-6,50,3], k = 4 output: 12.75 explanation: maximum average is (12-5-6+50)/4 = 51/4 = 12.75 note: 1 <= `k` <= `n` <= 30,000. elements of the given array will be in the range [-10,000, 10,000].",,
644,Maximum Average Subarray II,"You are given an integer array `nums` consisting of `n` elements, and an integer `k`.

Find a contiguous subarray whose length is greater than or equal to `k` that has the maximum average value and return this value. Any answer with a calculation error less than `10-5` will be accepted.


Example 1:
Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation:
- When the length is 4, averages are [0.5, 12.75, 10.5] and the maximum average is 12.75
- When the length is 5, averages are [10.4, 10.8] and the maximum average is 10.8
- When the length is 6, averages are [9.16667] and the maximum average is 9.16667
The maximum average is when we choose a subarray of length 4 (i.e., the sub array [12, -5, -6, 50]) which has the max average 12.75, so we return 12.75
Note that we do not consider the subarrays of length < 4.


Example 2:
Input: nums = [5], k = 1
Output: 5.00000

Constraints:
`n == nums.length`
`1 <= k <= n <= 104`
`-104 <= nums[i] <= 104`",Hard,https://leetcode.com/problems/maximum-average-subarray-ii,Google,"Array,Binary Search",480,"[Maximum Average Subarray I, /problems/maximum-average-subarray-i/, Easy]","you are given an integer array `nums` consisting of `n` elements, and an integer `k`. find a contiguous subarray whose length is greater than or equal to `k` that has the maximum average value and return this value. any answer with a calculation error less than `10-5` will be accepted.","input: nums = [1,12,-5,-6,50,3], k = 4 output: 12.75000 explanation: - when the length is 4, averages are [0.5, 12.75, 10.5] and the maximum average is 12.75 - when the length is 5, averages are [10.4, 10.8] and the maximum average is 10.8 - when the length is 6, averages are [9.16667] and the maximum average is 9.16667 the maximum average is when we choose a subarray of length 4 (i.e., the sub array [12, -5, -6, 50]) which has the max average 12.75, so we return 12.75 note that we do not consider the subarrays of length < 4. example 2: input: nums = [5], k = 1 output: 5.00000",`n == nums.length` `1 <= k <= n <= 10^4` `-10^4 <= nums[i] <= 10^4`,
645,Set Mismatch,"You have a set of integers `s`, which originally contains all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array `nums` representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.


Example 1:
Input: nums = [1,2,2,4]
Output: [2,3]

Example 2:
Input: nums = [1,1]
Output: [1,2]

Constraints:
`2 <= nums.length <= 104`
`1 <= nums[i] <= 104`",Easy,https://leetcode.com/problems/set-mismatch,"Apple,Amazon","Hash Table,Math",1132,"[Find the Duplicate Number, /problems/find-the-duplicate-number/, Medium]","you have a set of integers `s`, which originally contains all the numbers from `1` to `n`. unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in repetition of one number and loss of another number. you are given an integer array `nums` representing the data status of this set after the error. find the number that occurs twice and the number that is missing and return them in the form of an array.","input: nums = [1,2,2,4] output: [2,3] example 2: input: nums = [1,1] output: [1,2]",`2 <= nums.length <= 10^4` `1 <= nums[i] <= 10^4`,
646,Maximum Length of Pair Chain,"You are given `n` pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair `(c, d)` can follow another pair `(a, b)` if and only if `b < c`. Chain of pairs can be formed in this fashion. 
Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.


Example 1:
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
Note:
The number of given pairs will be in the range [1, 1000].",Medium,https://leetcode.com/problems/maximum-length-of-pair-chain,"Amazon,Uber",Dynamic Programming,1313,"[Longest Increasing Subsequence, /problems/longest-increasing-subsequence/, Medium], [Increasing Subsequences, /problems/increasing-subsequences/, Medium]","you are given `n` pairs of numbers. in every pair, the first number is always smaller than the second number. now, we define a pair `(c, d)` can follow another pair `(a, b)` if and only if `b < c`. chain of pairs can be formed in this fashion. given a set of pairs, find the length longest chain which can be formed. you needn't use up all the given pairs. you can select pairs in any order.","input: [[1,2], [2,3], [3,4]] output: 2 explanation: the longest chain is [1,2] -> [3,4] note: the number of given pairs will be in the range [1, 1000].",,
647,Palindromic Substrings,"Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.


Example 1:
Input: ""abc""
Output: 3
Explanation: Three palindromic strings: ""a"", ""b"", ""c"".


Example 2:
Input: ""aaa""
Output: 6
Explanation: Six palindromic strings: ""a"", ""a"", ""a"", ""aa"", ""aa"", ""aaa"".

Note:
The input string length won't exceed 1000.",Medium,https://leetcode.com/problems/palindromic-substrings,"Facebook,Goldman Sachs,Expedia,Google,Twitter,Microsoft,Bloomberg,Docusign","String,Dynamic Programming",4101,"[Longest Palindromic Substring, /problems/longest-palindromic-substring/, Medium], [Longest Palindromic Subsequence, /problems/longest-palindromic-subsequence/, Medium]","given a string, your task is to count how many palindromic substrings in this string. the substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.","input: ""abc"" output: 3 explanation: three palindromic strings: ""a"", ""b"", ""c"". example 2: input: ""aaa"" output: 6 explanation: six palindromic strings: ""a"", ""a"", ""a"", ""aa"", ""aa"", ""aaa"". note: the input string length won't exceed 1000.",,
648,Replace Words,"In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root `""an""` is followed by the successor word `""other""`, we can form a new word `""another""`.

Given a `dictionary` consisting of many roots and a `sentence` consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.

Return the `sentence` after the replacement.


Example 1:
Input: dictionary = [""cat"",""bat"",""rat""], sentence = ""the cattle was rattled by the battery""
Output: ""the cat was rat by the bat""

Example 2:
Input: dictionary = [""a"",""b"",""c""], sentence = ""aadsfasf absbs bbab cadsfafs""
Output: ""a a b c""

Example 3:
Input: dictionary = [""a"", ""aa"", ""aaa"", ""aaaa""], sentence = ""a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa""
Output: ""a a a a a a a a bbb baba a""

Example 4:
Input: dictionary = [""catt"",""cat"",""bat"",""rat""], sentence = ""the cattle was rattled by the battery""
Output: ""the cat was rat by the bat""

Example 5:
Input: dictionary = [""ac"",""ab""], sentence = ""it is abnormal that this solution is accepted""
Output: ""it is ab that this solution is ac""

Constraints:
`1 <= dictionary.length <= 1000`
`1 <= dictionary[i].length <= 100`
`dictionary[i]` consists of only lower-case letters.

`1 <= sentence.length <= 10^6`
`sentence` consists of only lower-case letters and spaces.

The number of words in `sentence` is in the range `[1, 1000]`
The length of each word in `sentence` is in the range `[1, 1000]`
Each two consecutive words in `sentence` will be separated by exactly one space.

`sentence` does not have leading or trailing spaces.",Medium,https://leetcode.com/problems/replace-words,Uber,"Hash Table,Trie",965,"[Implement Trie (Prefix Tree), /problems/implement-trie-prefix-tree/, Medium]","in english, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. for example, when the root `""an""` is followed by the successor word `""other""`, we can form a new word `""another""`. given a `dictionary` consisting of many roots and a `sentence` consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. if a successor can be replaced by more than one root, replace it with the root that has the shortest length. return the `sentence` after the replacement.","input: dictionary = [""cat"",""bat"",""rat""], sentence = ""the cattle was rattled by the battery"" output: ""the cat was rat by the bat"" example 2: input: dictionary = [""a"",""b"",""c""], sentence = ""aadsfasf absbs bbab cadsfafs"" output: ""a a b c"" example 3: input: dictionary = [""a"", ""aa"", ""aaa"", ""aaaa""], sentence = ""a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa"" output: ""a a a a a a a a bbb baba a"" example 4: input: dictionary = [""catt"",""cat"",""bat"",""rat""], sentence = ""the cattle was rattled by the battery"" output: ""the cat was rat by the bat"" example 5: input: dictionary = [""ac"",""ab""], sentence = ""it is abnormal that this solution is accepted"" output: ""it is ab that this solution is ac""","`1 <= dictionary.length <= 1000` `1 <= dictionary[i].length <= 10^0` `dictionary[i]` consists of only lower-case letters. `1 <= sentence.length <= 10^6` `sentence` consists of only lower-case letters and spaces. the number of words in `sentence` is in the range `[1, 1000]` the length of each word in `sentence` is in the range `[1, 1000]` each two consecutive words in `sentence` will be separated by exactly one space. `sentence` does not have leading or trailing spaces.",
649,Dota2 Senate,"In the world of Dota2, there are two parties: the `Radiant` and the `Dire`.

The Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise `one` of the two rights:
`Ban one senator's right`:
	A senator can make another senator lose all his rights in this and all the following rounds.

`Announce the victory`:
	If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and make the decision about the change in the game.

Given a string representing each senator's party belonging. The character 'R' and 'D' represent the `Radiant` party and the `Dire` party respectively. Then if there are `n` senators, the size of the given string will be `n`.

The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.

Suppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be `Radiant` or `Dire`.


Example 1:
Input: ""RD""
Output: ""Radiant""
Explanation: The first senator comes from Radiant and he can just ban the next senator's right in the round 1. 
And the second senator can't exercise any rights any more since his right has been banned. 
And in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.


Example 2:
Input: ""RDD""
Output: ""Dire""
Explanation: 
The first senator comes from Radiant and he can just ban the next senator's right in the round 1. 
And the second senator can't exercise any rights anymore since his right has been banned. 
And the third senator comes from Dire and he can ban the first senator's right in the round 1. 
And in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.

Note:
The length of the given string will in the range [1, 10,000].",Medium,https://leetcode.com/problems/dota2-senate,Valve,Greedy,325,"[Teemo Attacking, /problems/teemo-attacking/, Medium]","in the world of dota2, there are two parties: the `radiant` and the `dire`. the dota2 senate consists of senators coming from two parties. now the senate wants to make a decision about a change in the dota2 game. the voting for this change is a round-based procedure. in each round, each senator can exercise `one` of the two rights: `ban one senator's right`: a senator can make another senator lose all his rights in this and all the following rounds. `announce the victory`: if this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and make the decision about the change in the game. given a string representing each senator's party belonging. the character 'r' and 'd' represent the `radiant` party and the `dire` party respectively. then if there are `n` senators, the size of the given string will be `n`. the round-based procedure starts from the first senator to the last senator in the given order. this procedure will last until the end of voting. all the senators who have lost their rights will be skipped during the procedure. suppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the dota2 game. the output should be `radiant` or `dire`.","input: ""rd"" output: ""radiant"" explanation: the first senator comes from radiant and he can just ban the next senator's right in the round 1. and the second senator can't exercise any rights any more since his right has been banned. and in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote. example 2: input: ""rdd"" output: ""dire"" explanation: the first senator comes from radiant and he can just ban the next senator's right in the round 1. and the second senator can't exercise any rights anymore since his right has been banned. and the third senator comes from dire and he can ban the first senator's right in the round 1. and in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote. note: the length of the given string will in the range [1, 10,000].",,
650,2 Keys Keyboard,"Initially on a notepad only one character 'A' is present. You can perform two operations on this notepad for each step:
`Copy All`: You can copy all the characters present on the notepad (partial copy is not allowed).

`Paste`: You can paste the characters which are copied last time.

Given a number `n`. You have to get exactly `n` 'A' on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get `n` 'A'.

Example 1:
Input: 3
Output: 3
Explanation:
Intitally, we have one character 'A'.

In step 1, we use Copy All operation.

In step 2, we use Paste operation to get 'AA'.

In step 3, we use Paste operation to get 'AAA'.

Note:
The `n` will be in the range [1, 1000].",Medium,https://leetcode.com/problems/2-keys-keyboard,"Amazon,Microsoft",Dynamic Programming,1723,"[4 Keys Keyboard, /problems/4-keys-keyboard/, Medium], [Broken Calculator, /problems/broken-calculator/, Medium]",initially on a notepad only one character 'a' is present. you can perform two operations on this notepad for each step: `copy all`: you can copy all the characters present on the notepad (partial copy is not allowed). `paste`: you can paste the characters which are copied last time. given a number `n`. you have to get exactly `n` 'a' on the notepad by performing the minimum number of steps permitted. output the minimum number of steps to get `n` 'a'.,"input: 3 output: 3 explanation: intitally, we have one character 'a'. in step 1, we use copy all operation. in step 2, we use paste operation to get 'aa'. in step 3, we use paste operation to get 'aaa'. note: the `n` will be in the range [1, 1000].",,
651,4 Keys Keyboard,"Imagine you have a special keyboard with the following keys: 
`Key 1: (A)`:  Print one 'A' on screen.

`Key 2: (Ctrl-A)`: Select the whole screen.

`Key 3: (Ctrl-C)`: Copy selection to buffer.

`Key 4: (Ctrl-V)`: Print buffer on screen appending it after what has already been printed. 
Now, you can only press the keyboard for N times (with the above four keys), find out the maximum numbers of 'A' you can print on screen.


Example 1:
Input: N = 3
Output: 3
Explanation: 
We can at most get 3 A's on screen by pressing following key sequence:
A, A, A

Example 2:
Input: N = 7
Output: 9
Explanation: 
We can at most get 9 A's on screen by pressing following key sequence:
A, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V
Note:
1 <= N <= 50 
Answers will be in the range of 32-bit signed integer.",Medium,https://leetcode.com/problems/4-keys-keyboard,"Google,Microsoft","Math,Dynamic Programming,Greedy",431,"[2 Keys Keyboard, /problems/2-keys-keyboard/, Medium]","imagine you have a special keyboard with the following keys: `key 1: (a)`: print one 'a' on screen. `key 2: (ctrl-a)`: select the whole screen. `key 3: (ctrl-c)`: copy selection to buffer. `key 4: (ctrl-v)`: print buffer on screen appending it after what has already been printed. now, you can only press the keyboard for n times (with the above four keys), find out the maximum numbers of 'a' you can print on screen.","input: n = 3 output: 3 explanation: we can at most get 3 a's on screen by pressing following key sequence: a, a, a example 2: input: n = 7 output: 9 explanation: we can at most get 9 a's on screen by pressing following key sequence: a, a, a, ctrl a, ctrl c, ctrl v, ctrl v note: 1 <= n <= 50 answers will be in the range of 32-bit signed integer.",,
652,Find Duplicate Subtrees,"Given the `root` of a binary tree, return all duplicate subtrees.

For each kind of duplicate subtrees, you only need to return the root node of any one of them.

Two trees are duplicate if they have the same structure with the same node values.


Example 1:
Input: root = [1,2,3,4,null,2,4,null,null,4]
Output: [[2,4],[4]]

Example 2:
Input: root = [2,1,1]
Output: [[1]]

Example 3:
Input: root = [2,2,2,3,null,3,null]
Output: [[2,3],[3]]

Constraints:
The number of the nodes in the tree will be in the range `[1, 10^4]`
`-200 <= Node.val <= 200`",Medium,https://leetcode.com/problems/find-duplicate-subtrees,"Google,Amazon",Tree,1903,"[Serialize and Deserialize Binary Tree, /problems/serialize-and-deserialize-binary-tree/, Hard], [Serialize and Deserialize BST, /problems/serialize-and-deserialize-bst/, Medium], [Construct String from Binary Tree, /problems/construct-string-from-binary-tree/, Easy]","given the `root` of a binary tree, return all duplicate subtrees. for each kind of duplicate subtrees, you only need to return the root node of any one of them. two trees are duplicate if they have the same structure with the same node values.","input: root = [1,2,3,4,null,2,4,null,null,4] output: [[2,4],[4]] example 2: input: root = [2,1,1] output: [[1]] example 3: input: root = [2,2,2,3,null,3,null] output: [[2,3],[3]]","the number of the nodes in the tree will be in the range `[1, 10^4]` `-200 <= node.val <= 200`",
653,Two Sum IV - Input is a BST,"Given the `root` of a Binary Search Tree and a target number `k`, return `true` if there exist two elements in the BST such that their sum is equal to the given target.


Example 1:
Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

Example 2:
Input: root = [5,3,6,2,4,null,7], k = 28
Output: false

Example 3:
Input: root = [2,1,3], k = 4
Output: true

Example 4:
Input: root = [2,1,3], k = 1
Output: false

Example 5:
Input: root = [2,1,3], k = 3
Output: true

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-104 <= Node.val <= 104`
`root` is guaranteed to be a valid binary search tree.

`-105 <= k <= 105`",Easy,https://leetcode.com/problems/two-sum-iv-input-is-a-bst,Microsoft,Tree,1986,"[Two Sum, /problems/two-sum/, Easy], [Two Sum II - Input array is sorted, /problems/two-sum-ii-input-array-is-sorted/, Easy], [Two Sum III - Data structure design, /problems/two-sum-iii-data-structure-design/, Easy], [Two Sum BSTs, /problems/two-sum-bsts/, Medium]","given the `root` of a binary search tree and a target number `k`, return `true` if there exist two elements in the bst such that their sum is equal to the given target.","input: root = [5,3,6,2,4,null,7], k = 9 output: true example 2: input: root = [5,3,6,2,4,null,7], k = 28 output: false example 3: input: root = [2,1,3], k = 4 output: true example 4: input: root = [2,1,3], k = 1 output: false example 5: input: root = [2,1,3], k = 3 output: true","the number of nodes in the tree is in the range `[1, 10^4]`. `-10^4 <= node.val <= 10^4` `root` is guaranteed to be a valid binary search tree. `-10^5 <= k <= 10^5`",
654,Maximum Binary Tree,"You are given an integer array `nums` with no duplicates. A maximum binary tree can be built recursively from `nums` using the following algorithm:
Create a root node whose value is the maximum value in `nums`.

Recursively build the left subtree on the subarray prefix to the left of the maximum value.

Recursively build the right subtree on the subarray suffix to the right of the maximum value.

Return the maximum binary tree built from `nums`.


Example 1:
Input: nums = [3,2,1,6,0,5]
Output: [6,3,5,null,2,0,null,null,1]
Explanation: The recursive calls are as follow:
- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].

    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].

        - Empty array, so no child.

        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].

            - Empty array, so no child.

            - Only one element, so child is a node with value 1.

    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].

        - Only one element, so child is a node with value 0.

        - Empty array, so no child.


Example 2:
Input: nums = [3,2,1]
Output: [3,null,2,null,1]

Constraints:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 1000`
All integers in `nums` are unique.",Medium,https://leetcode.com/problems/maximum-binary-tree,Apple,Tree,2426,"[Maximum Binary Tree II, /problems/maximum-binary-tree-ii/, Medium]",you are given an integer array `nums` with no duplicates. a maximum binary tree can be built recursively from `nums` using the following algorithm: create a root node whose value is the maximum value in `nums`. recursively build the left subtree on the subarray prefix to the left of the maximum value. recursively build the right subtree on the subarray suffix to the right of the maximum value. return the maximum binary tree built from `nums`.,"input: nums = [3,2,1,6,0,5] output: [6,3,5,null,2,0,null,null,1] explanation: the recursive calls are as follow: - the largest value in [3,2,1,6,0,5] is 6. left prefix is [3,2,1] and right suffix is [0,5]. - the largest value in [3,2,1] is 3. left prefix is [] and right suffix is [2,1]. - empty array, so no child. - the largest value in [2,1] is 2. left prefix is [] and right suffix is [1]. - empty array, so no child. - only one element, so child is a node with value 1. - the largest value in [0,5] is 5. left prefix is [0] and right suffix is []. - only one element, so child is a node with value 0. - empty array, so no child. example 2: input: nums = [3,2,1] output: [3,null,2,null,1]",`1 <= nums.length <= 1000` `0 <= nums[i] <= 1000` all integers in `nums` are unique.,
655,Print Binary Tree,"Print a binary tree in an m*n 2D string array following these rules: 
The row number `m` should be equal to the height of the given binary tree.

The column number `n` should always be an odd number.

The root node's value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (left-bottom part and right-bottom part). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don't need to leave space for both of them. 
Each unused space should contain an empty string `""""`.

Print the subtrees following the same rules.


Example 1:
Input:
     1
    /
   2
Output:
[["""", ""1"", """"],
 [""2"", """", """"]]

Example 2:
Input:
     1
    / \
   2   3
    \
     4
Output:
[["""", """", """", ""1"", """", """", """"],
 ["""", ""2"", """", """", """", ""3"", """"],
 ["""", """", ""4"", """", """", """", """"]]

Example 3:
Input:
      1
     / \
    2   5
   / 
  3 
 / 
4 
Output:
[["""",  """",  """", """",  """", """", """", ""1"", """",  """",  """",  """",  """", """", """"]
 ["""",  """",  """", ""2"", """", """", """", """",  """",  """",  """",  ""5"", """", """", """"]
 ["""",  ""3"", """", """",  """", """", """", """",  """",  """",  """",  """",  """", """", """"]
 [""4"", """",  """", """",  """", """", """", """",  """",  """",  """",  """",  """", """", """"]]
Note:
The height of binary tree is in the range of [1, 10].",Medium,https://leetcode.com/problems/print-binary-tree,Uber,Tree,421,,"print a binary tree in an m*n 2d string array following these rules: the row number `m` should be equal to the height of the given binary tree. the column number `n` should always be an odd number. the root node's value (in string format) should be put in the exactly middle of the first row it can be put. the column and the row where the root node belongs will separate the rest space into two parts (left-bottom part and right-bottom part). you should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. the left-bottom part and the right-bottom part should have the same size. even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. however, if two subtrees are none, then you don't need to leave space for both of them. each unused space should contain an empty string `""""`. print the subtrees following the same rules.","input: 1 / 2 output: [["""", ""1"", """"], [""2"", """", """"]] example 2: input: 1 / \ 2 3 \ 4 output: [["""", """", """", ""1"", """", """", """"], ["""", ""2"", """", """", """", ""3"", """"], ["""", """", ""4"", """", """", """", """"]] example 3: input: 1 / \ 2 5 / 3 / 4 output: [["""", """", """", """", """", """", """", ""1"", """", """", """", """", """", """", """"] ["""", """", """", ""2"", """", """", """", """", """", """", """", ""5"", """", """", """"] ["""", ""3"", """", """", """", """", """", """", """", """", """", """", """", """", """"] [""4"", """", """", """", """", """", """", """", """", """", """", """", """", """", """"]] note: the height of binary tree is in the range of [1, 10].",,
656,Coin Path,"Given an array `A` (index starts at `1`) consisting of N integers: A1, A2, ..., AN and an integer `B`. The integer `B` denotes that from any place (suppose the index is `i`) in the array `A`, you can jump to any one of the place in the array `A` indexed `i+1`, `i+2`, ..., `i+B` if this place can be jumped to. Also, if you step on the index `i`, you have to pay Ai coins. If Ai is -1, it means you can’t jump to the place indexed `i` in the array.

Now, you start from the place indexed `1` in the array `A`, and your aim is to reach the place indexed `N` using the minimum coins. You need to return the path of indexes (starting from 1 to N) in the array you should take to get to the place indexed `N` using minimum coins.

If there are multiple paths with the same cost, return the lexicographically smallest such path.

If it's not possible to reach the place indexed N then you need to return an empty array.


Example 1:
Input: [1,2,4,-1,2], 2
Output: [1,3,5]

Example 2:
Input: [1,2,4,-1,2], 1
Output: []
Note:
Path Pa1, Pa2, ..., Pan is lexicographically smaller than Pb1, Pb2, ..., Pbm, if and only if at the first `i` where Pai and Pbi differ, Pai < Pbi; when no such `i` exists, then `n` < `m`.

A1 >= 0. A2, ..., AN (if exist) will in the range of [-1, 100].

Length of A is in the range of [1, 1000].

B is in the range of [1, 100].",Hard,https://leetcode.com/problems/coin-path,Google,Dynamic Programming,184,"[House Robber, /problems/house-robber/, Medium], [House Robber II, /problems/house-robber-ii/, Medium]","given an array `a` (index starts at `1`) consisting of n integers: a1, a2, ..., an and an integer `b`. the integer `b` denotes that from any place (suppose the index is `i`) in the array `a`, you can jump to any one of the place in the array `a` indexed `i+1`, `i+2`, ..., `i+b` if this place can be jumped to. also, if you step on the index `i`, you have to pay ai coins. if ai is -1, it means you can’t jump to the place indexed `i` in the array. now, you start from the place indexed `1` in the array `a`, and your aim is to reach the place indexed `n` using the minimum coins. you need to return the path of indexes (starting from 1 to n) in the array you should take to get to the place indexed `n` using minimum coins. if there are multiple paths with the same cost, return the lexicographically smallest such path. if it's not possible to reach the place indexed n then you need to return an empty array.","input: [1,2,4,-1,2], 2 output: [1,3,5] example 2: input: [1,2,4,-1,2], 1 output: [] note: path pa1, pa2, ..., pan is lexicographically smaller than pb1, pb2, ..., pbm, if and only if at the first `i` where pai and pbi differ, pai < pbi; when no such `i` exists, then `n` < `m`. a1 >= 0. a2, ..., an (if exist) will in the range of [-1, 100]. length of a is in the range of [1, 1000]. b is in the range of [1, 100].",,
657,Robot Return to Origin,"There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.

The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.

Note: The way that the robot is ""facing"" is irrelevant. ""R"" will always make the robot move to the right once, ""L"" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.


Example 1:
Input: moves = ""UD""
Output: true
Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.


Example 2:
Input: moves = ""LL""
Output: false
Explanation: The robot moves left twice. It ends up two ""moves"" to the left of the origin. We return false because it is not at the origin at the end of its moves.


Example 3:
Input: moves = ""RRDD""
Output: false

Example 4:
Input: moves = ""LDRRLRUULR""
Output: false

Constraints:
`1 <= moves.length <= 2 * 104`
`moves` only contains the characters `'U'`, `'D'`, `'L'` and `'R'`.",Easy,https://leetcode.com/problems/robot-return-to-origin,"Amazon,Goldman Sachs",String,1264,"[Number of Provinces, /problems/number-of-provinces/, Medium]","there is a robot starting at position (0, 0), the origin, on a 2d plane. given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves. the move sequence is represented by a string, and the character moves[i] represents its ith move. valid moves are r (right), l (left), u (up), and d (down). if the robot returns to the origin after it finishes all of its moves, return true. otherwise, return false. note: the way that the robot is ""facing"" is irrelevant. ""r"" will always make the robot move to the right once, ""l"" will always make it move left, etc. also, assume that the magnitude of the robot's movement is the same for each move.","input: moves = ""ud"" output: true explanation: the robot moves up once, and then down once. all moves have the same magnitude, so it ended up at the origin where it started. therefore, we return true. example 2: input: moves = ""ll"" output: false explanation: the robot moves left twice. it ends up two ""moves"" to the left of the origin. we return false because it is not at the origin at the end of its moves. example 3: input: moves = ""rrdd"" output: false example 4: input: moves = ""ldrrlruulr"" output: false","`1 <= moves.length <= 2 * 10^4` `moves` only contains the characters `'u'`, `'d'`, `'l'` and `'r'`.",
658,Find K Closest Elements,"Given a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order.

An integer `a` is closer to `x` than an integer `b` if:
`|a - x| < |b - x|`, or
`|a - x| == |b - x|` and `a < b`

Example 1:
Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]

Example 2:
Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]

Constraints:
`1 <= k <= arr.length`
`1 <= arr.length <= 104`
`arr` is sorted in ascending order.

`-104 <= arr[i], x <= 104`",Medium,https://leetcode.com/problems/find-k-closest-elements,"Facebook,Microsoft,Google,Paypal",Binary Search,2007,"[Guess Number Higher or Lower, /problems/guess-number-higher-or-lower/, Easy], [Guess Number Higher or Lower II, /problems/guess-number-higher-or-lower-ii/, Medium], [Find K-th Smallest Pair Distance, /problems/find-k-th-smallest-pair-distance/, Hard]","given a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. the result should also be sorted in ascending order. an integer `a` is closer to `x` than an integer `b` if: `|a - x| < |b - x|`, or `|a - x| == |b - x|` and `a < b`","input: arr = [1,2,3,4,5], k = 4, x = 3 output: [1,2,3,4] example 2: input: arr = [1,2,3,4,5], k = 4, x = -1 output: [1,2,3,4]","`1 <= k <= arr.length` `1 <= arr.length <= 10^4` `arr` is sorted in ascending order. `-10^4 <= arr[i], x <= 10^4`",
659,Split Array into Consecutive Subsequences,"Given an integer array `nums` that is sorted in ascending order, return `true` if and only if you can split it into one or more subsequences such that each subsequence consists of consecutive integers and has a length of at least `3`.


Example 1:
Input: nums = [1,2,3,3,4,5]
Output: true
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3
3, 4, 5

Example 2:
Input: nums = [1,2,3,3,4,4,5,5]
Output: true
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3, 4, 5
3, 4, 5

Example 3:
Input: nums = [1,2,3,4,4,5]
Output: false

Constraints:
`1 <= nums.length <= 104`
`-1000 <= nums[i] <= 1000`
`nums` is sorted in an ascending order.",Medium,https://leetcode.com/problems/split-array-into-consecutive-subsequences,Uber,"Heap,Greedy",1557,"[Top K Frequent Elements, /problems/top-k-frequent-elements/, Medium], [Divide Array in Sets of K Consecutive Numbers, /problems/divide-array-in-sets-of-k-consecutive-numbers/, Medium]","given an integer array `nums` that is sorted in ascending order, return `true` if and only if you can split it into one or more subsequences such that each subsequence consists of consecutive integers and has a length of at least `3`.","input: nums = [1,2,3,3,4,5] output: true explanation: you can split them into two consecutive subsequences : 1, 2, 3 3, 4, 5 example 2: input: nums = [1,2,3,3,4,4,5,5] output: true explanation: you can split them into two consecutive subsequences : 1, 2, 3, 4, 5 3, 4, 5 example 3: input: nums = [1,2,3,4,4,5] output: false",`1 <= nums.length <= 10^4` `-1000 <= nums[i] <= 1000` `nums` is sorted in an ascending order.,
660,Remove 9,"Start from integer 1, remove any integer that contains 9 such as 9, 19, 29...

So now, you will have a new integer sequence: 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...

Given a positive integer `n`, you need to return the n-th integer after removing. Note that 1 will be the first integer.


Example 1:
Input: n = 9
Output: 10

Constraints:
`1 <= n <= 8 x 10^8`",Hard,https://leetcode.com/problems/remove-9,Houzz,Math,114,,"start from integer 1, remove any integer that contains 9 such as 9, 19, 29... so now, you will have a new integer sequence: 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ... given a positive integer `n`, you need to return the n-th integer after removing. note that 1 will be the first integer.",input: n = 9 output: 10,`1 <= n <= 8 x 10^8`,
661,Image Smoother,"Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself.  If a cell has less than 8 surrounding cells, then use as many as you can.


Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Note:
The value in the given matrix is in the range of [0, 255].

The length and width of the given matrix are in the range of [1, 150].",Easy,https://leetcode.com/problems/image-smoother,Apple,Array,293,,"given a 2d integer matrix m representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself. if a cell has less than 8 surrounding cells, then use as many as you can.","input: [[1,1,1], [1,0,1], [1,1,1]] output: [[0, 0, 0], [0, 0, 0], [0, 0, 0]] explanation: for the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0 for the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0 for the point (1,1): floor(8/9) = floor(0.88888889) = 0 note: the value in the given matrix is in the range of [0, 255]. the length and width of the given matrix are in the range of [1, 150].",,
662,Maximum Width of Binary Tree,"Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the `null` nodes between the end-nodes are also counted into the length calculation.

It is guaranteed that the answer will in the range of 32-bit signed integer.


Example 1:
Input: 
           1
         /   \
        3     2
       / \     \  
      5   3     9 
Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).


Example 2:
Input: 
          1
         /  
        3    
       / \       
      5   3     
Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).


Example 3:
Input: 
          1
         / \
        3   2 
       /        
      5      
Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).


Example 4:
Input: 
          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


Constraints:
The given binary tree will have between `1` and `3000` nodes.",Medium,https://leetcode.com/problems/maximum-width-of-binary-tree,"Microsoft,Bloomberg",Tree,2134,,"given a binary tree, write a function to get the maximum width of the given tree. the maximum width of a tree is the maximum width among all levels. the width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the `null` nodes between the end-nodes are also counted into the length calculation. it is guaranteed that the answer will in the range of 32-bit signed integer.","input: 1 / \ 3 2 / \ \ 5 3 9 output: 4 explanation: the maximum width existing in the third level with the length 4 (5,3,null,9). example 2: input: 1 / 3 / \ 5 3 output: 2 explanation: the maximum width existing in the third level with the length 2 (5,3). example 3: input: 1 / \ 3 2 / 5 output: 2 explanation: the maximum width existing in the second level with the length 2 (3,2). example 4: input: 1 / \ 3 2 / \ 5 9 / \ 6 7 output: 8 explanation:the maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).",the given binary tree will have between `1` and `3000` nodes.,
663,Equal Tree Partition,"Given a binary tree with `n` nodes, your task is to check if it's possible to partition the tree to two trees which have the equal sum of values after removing exactly one edge on the original tree.


Example 1:
Input:     
    5
   / \
  10 10
    /  \
   2   3
Output: True
Explanation: 
    5
   / 
  10
      
Sum: 15
   10
  /  \
 2    3
Sum: 15

Example 2:
Input:     
    1
   / \
  2  10
    /  \
   2   20
Output: False
Explanation: You can't split the tree into two trees with equal sum after removing exactly one edge on the tree.

Note:
The range of tree node value is in the range of [-100000, 100000].

1 <= n <= 10000",Medium,https://leetcode.com/problems/equal-tree-partition,Amazon,Tree,326,,"given a binary tree with `n` nodes, your task is to check if it's possible to partition the tree to two trees which have the equal sum of values after removing exactly one edge on the original tree.","input: 5 / \ 10 10 / \ 2 3 output: true explanation: 5 / 10 sum: 15 10 / \ 2 3 sum: 15 example 2: input: 1 / \ 2 10 / \ 2 20 output: false explanation: you can't split the tree into two trees with equal sum after removing exactly one edge on the tree. note: the range of tree node value is in the range of [-100000, 100000]. 1 <= n <= 10000",,
664,Strange Printer,"There is a strange printer with the following two special requirements:
The printer can only print a sequence of the same character each time.

At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.

Given a string consists of lower English letters only, your job is to count the minimum number of turns the printer needed in order to print it.


Example 1:
Input: ""aaabbb""
Output: 2
Explanation: Print ""aaa"" first and then print ""bbb"".


Example 2:
Input: ""aba""
Output: 2
Explanation: Print ""aaa"" first and then print ""b"" from the second place of the string, which will cover the existing character 'a'.

Hint: Length of the given string will not exceed 100.",Hard,https://leetcode.com/problems/strange-printer,NetEase,"Dynamic Programming,Depth-first Search",561,"[Remove Boxes, /problems/remove-boxes/, Hard], [Strange Printer II, /problems/strange-printer-ii/, Hard]","there is a strange printer with the following two special requirements: the printer can only print a sequence of the same character each time. at each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters. given a string consists of lower english letters only, your job is to count the minimum number of turns the printer needed in order to print it.","input: ""aaabbb"" output: 2 explanation: print ""aaa"" first and then print ""bbb"". example 2: input: ""aba"" output: 2 explanation: print ""aaa"" first and then print ""b"" from the second place of the string, which will cover the existing character 'a'. hint: length of the given string will not exceed 100.",,
665,Non-decreasing Array,"Given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying at most one element.

We define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (0-based) such that (`0 <= i <= n - 2`).


Example 1:
Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first `4` to `1` to get a non-decreasing array.


Example 2:
Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.


Constraints:
`n == nums.length`
`1 <= n <= 104`
`-105 <= nums[i] <= 105`",Medium,https://leetcode.com/problems/non-decreasing-array,Microsoft,Array,2572,,"given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying at most one element. we define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (0-based) such that (`0 <= i <= n - 2`).","input: nums = [4,2,3] output: true explanation: you could modify the first `4` to `1` to get a non-decreasing array. example 2: input: nums = [4,2,1] output: false explanation: you can't get a non-decreasing array by modify at most one element.",`n == nums.length` `1 <= n <= 10^4` `-10^5 <= nums[i] <= 10^5`,
666,Path Sum IV,"If the depth of a tree is smaller than `5`, then this tree can be represented by a list of three-digits integers.

For each integer in this list:
The hundreds digit represents the depth `D` of this node, `1 <= D <= 4.`
The tens digit represents the position `P` of this node in the level it belongs to, `1 <= P <= 8`. The position is the same as that in a full binary tree.

The units digit represents the value `V` of this node, `0 <= V <= 9.`
Given a list of `ascending` three-digits integers representing a binary tree with the depth smaller than 5, you need to return the sum of all paths from the root towards the leaves.

It's guaranteed that the given list represents a valid connected binary tree.


Example 1:
Input: [113, 215, 221]
Output: 12
Explanation: 
The tree that the list represents is:
    3
   / \
  5   1
The path sum is (3 + 5) + (3 + 1) = 12.


Example 2:
Input: [113, 221]
Output: 4
Explanation: 
The tree that the list represents is: 
    3
     \
      1
The path sum is (3 + 1) = 4.",Medium,https://leetcode.com/problems/path-sum-iv,Facebook,Tree,219,"[Path Sum, /problems/path-sum/, Easy], [Path Sum II, /problems/path-sum-ii/, Medium], [Binary Tree Maximum Path Sum, /problems/binary-tree-maximum-path-sum/, Hard], [Path Sum III, /problems/path-sum-iii/, Medium]","if the depth of a tree is smaller than `5`, then this tree can be represented by a list of three-digits integers. for each integer in this list: the hundreds digit represents the depth `d` of this node, `1 <= d <= 4.` the tens digit represents the position `p` of this node in the level it belongs to, `1 <= p <= 8`. the position is the same as that in a full binary tree. the units digit represents the value `v` of this node, `0 <= v <= 9.` given a list of `ascending` three-digits integers representing a binary tree with the depth smaller than 5, you need to return the sum of all paths from the root towards the leaves. it's guaranteed that the given list represents a valid connected binary tree.","input: [113, 215, 221] output: 12 explanation: the tree that the list represents is: 3 / \ 5 1 the path sum is (3 + 5) + (3 + 1) = 12. example 2: input: [113, 221] output: 4 explanation: the tree that the list represents is: 3 \ 1 the path sum is (3 + 1) = 4.",,
667,Beautiful Arrangement II,"Given two integers `n` and `k`, you need to construct a list which contains `n` different positive integers ranging from `1` to `n` and obeys the following requirement: 
Suppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly `k` distinct integers.

If there are multiple answers, print any of them.


Example 1:
Input: n = 3, k = 1
Output: [1, 2, 3]
Explanation: The [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.


Example 2:
Input: n = 3, k = 2
Output: [1, 3, 2]
Explanation: The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.

Note:
The `n` and `k` are in the range 1 <= k < n <= 104.",Medium,https://leetcode.com/problems/beautiful-arrangement-ii,Google,Array,392,"[Beautiful Arrangement, /problems/beautiful-arrangement/, Medium]","given two integers `n` and `k`, you need to construct a list which contains `n` different positive integers ranging from `1` to `n` and obeys the following requirement: suppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly `k` distinct integers. if there are multiple answers, print any of them.","input: n = 3, k = 1 output: [1, 2, 3] explanation: the [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1. example 2: input: n = 3, k = 2 output: [1, 3, 2] explanation: the [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2. note: the `n` and `k` are in the range 1 <= k < n <= 104.",,
668,Kth Smallest Number in Multiplication Table,"Nearly every one have used the Multiplication Table. But could you find out the `k-th` smallest number quickly from the multiplication table?
Given the height `m` and the length `n` of a `m * n` Multiplication Table, and a positive integer `k`, you need to return the `k-th` smallest number in this table.


Example 1:
Input: m = 3, n = 3, k = 5
Output: 
Explanation: 
The Multiplication Table:
1	2	3
2	4	6
3	6	9
The 5-th smallest number is 3 (1, 2, 2, 3, 3).


Example 2:
Input: m = 2, n = 3, k = 6
Output: 
Explanation: 
The Multiplication Table:
1	2	3
2	4	6
The 6-th smallest number is 6 (1, 2, 2, 3, 4, 6).

Note:
The `m` and `n` will be in the range [1, 30000].

The `k` will be in the range [1, m * n]",Hard,https://leetcode.com/problems/kth-smallest-number-in-multiplication-table,"Uber,Google",Binary Search,695,"[Kth Smallest Element in a Sorted Matrix, /problems/kth-smallest-element-in-a-sorted-matrix/, Medium], [Find K-th Smallest Pair Distance, /problems/find-k-th-smallest-pair-distance/, Hard], [K-th Smallest Prime Fraction, /problems/k-th-smallest-prime-fraction/, Hard]","nearly every one have used the multiplication table. but could you find out the `k-th` smallest number quickly from the multiplication table? given the height `m` and the length `n` of a `m * n` multiplication table, and a positive integer `k`, you need to return the `k-th` smallest number in this table.","input: m = 3, n = 3, k = 5 output: explanation: the multiplication table: 1 2 3 2 4 6 3 6 9 the 5-th smallest number is 3 (1, 2, 2, 3, 3). example 2: input: m = 2, n = 3, k = 6 output: explanation: the multiplication table: 1 2 3 2 4 6 the 6-th smallest number is 6 (1, 2, 2, 3, 4, 6). note: the `m` and `n` will be in the range [1, 30000]. the `k` will be in the range [1, m * n]",,
669,Trim a Binary Search Tree,"Given the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.

Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.


Example 1:
Input: root = [1,0,2], low = 1, high = 2
Output: [1,null,2]

Example 2:
Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
Output: [3,2,null,1]

Example 3:
Input: root = [1], low = 1, high = 2
Output: [1]

Example 4:
Input: root = [1,null,2], low = 1, high = 3
Output: [1,null,2]

Example 5:
Input: root = [1,null,2], low = 2, high = 4
Output: [2]

Constraints:
The number of nodes in the tree in the range `[1, 104]`.

`0 <= Node.val <= 104`
The value of each node in the tree is unique.

`root` is guaranteed to be a valid binary search tree.

`0 <= low <= high <= 104`",Medium,https://leetcode.com/problems/trim-a-binary-search-tree,"Google,Facebook,Apple,Samsung","Tree,Recursion",2748,,"given the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). it can be proven that there is a unique answer. return the root of the trimmed binary search tree. note that the root may change depending on the given bounds.","input: root = [1,0,2], low = 1, high = 2 output: [1,null,2] example 2: input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3 output: [3,2,null,1] example 3: input: root = [1], low = 1, high = 2 output: [1] example 4: input: root = [1,null,2], low = 1, high = 3 output: [1,null,2] example 5: input: root = [1,null,2], low = 2, high = 4 output: [2]","the number of nodes in the tree in the range `[1, 10^4]`. `0 <= node.val <= 10^4` the value of each node in the tree is unique. `root` is guaranteed to be a valid binary search tree. `0 <= low <= high <= 10^4`",
670,Maximum Swap,"Given a non-negative integer, you could swap two digits at most once to get the maximum valued number. Return the maximum valued number you could get.


Example 1:
Input: 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.


Example 2:
Input: 9973
Output: 9973
Explanation: No swap.

Note:
The given number is in the range [0, 108]",Medium,https://leetcode.com/problems/maximum-swap,Facebook,"Array,Math",1449,"[Create Maximum Number, /problems/create-maximum-number/, Hard]","given a non-negative integer, you could swap two digits at most once to get the maximum valued number. return the maximum valued number you could get.","input: 2736 output: 7236 explanation: swap the number 2 and the number 7. example 2: input: 9973 output: 9973 explanation: no swap. note: the given number is in the range [0, 108]",,
671,Second Minimum Node In a Binary Tree,"Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property `root.val = min(root.left.val, root.right.val)` always holds.

Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.

If no such second minimum value exists, output -1 instead.


Example 1:
Input: root = [2,2,5,null,null,5,7]
Output: 5
Explanation: The smallest value is 2, the second smallest value is 5.


Example 2:
Input: root = [2,2,2]
Output: -1
Explanation: The smallest value is 2, but there isn't any second smallest value.


Constraints:
The number of nodes in the tree is in the range `[1, 25]`.

`1 <= Node.val <= 231 - 1`
`root.val == min(root.left.val, root.right.val)` for each internal node of the tree.",Easy,https://leetcode.com/problems/second-minimum-node-in-a-binary-tree,"LinkedIn,Microsoft,Adobe",Tree,804,"[Kth Smallest Element in a BST, /problems/kth-smallest-element-in-a-bst/, Medium]","given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. if the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. more formally, the property `root.val = min(root.left.val, root.right.val)` always holds. given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree. if no such second minimum value exists, output -1 instead.","input: root = [2,2,5,null,null,5,7] output: 5 explanation: the smallest value is 2, the second smallest value is 5. example 2: input: root = [2,2,2] output: -1 explanation: the smallest value is 2, but there isn't any second smallest value.","the number of nodes in the tree is in the range `[1, 25]`. `1 <= node.val <= 231 - 1` `root.val == min(root.left.val, root.right.val)` for each internal node of the tree.",
672,Bulb Switcher II,"There is a room with `n` lights which are turned on initially and 4 buttons on the wall. After performing exactly `m` unknown operations towards buttons, you need to return how many different kinds of status of the `n` lights could be.

Suppose `n` lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below:
Flip all the lights.

Flip lights with even numbers.

Flip lights with odd numbers.

Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...


Example 1:
Input: n = 1, m = 1.
Output: 2
Explanation: Status can be: [on], [off]

Example 2:
Input: n = 2, m = 1.
Output: 3
Explanation: Status can be: [on, off], [off, on], [off, off]

Example 3:
Input: n = 3, m = 1.
Output: 4
Explanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].

Note: `n` and `m` both fit in range [0, 1000].",Medium,https://leetcode.com/problems/bulb-switcher-ii,Microsoft,Math,166,"[Bulb Switcher, /problems/bulb-switcher/, Medium], [Bulb Switcher III, /problems/bulb-switcher-iii/, Medium]","there is a room with `n` lights which are turned on initially and 4 buttons on the wall. after performing exactly `m` unknown operations towards buttons, you need to return how many different kinds of status of the `n` lights could be. suppose `n` lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below: flip all the lights. flip lights with even numbers. flip lights with odd numbers. flip lights with (3k + 1) numbers, k = 0, 1, 2, ...","input: n = 1, m = 1. output: 2 explanation: status can be: [on], [off] example 2: input: n = 2, m = 1. output: 3 explanation: status can be: [on, off], [off, on], [off, off] example 3: input: n = 3, m = 1. output: 4 explanation: status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on]. note: `n` and `m` both fit in range [0, 1000].",,
673,Number of Longest Increasing Subsequence,"Given an integer array `nums`, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.


Example 1:
Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].


Example 2:
Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.


Constraints:
`1 <= nums.length <= 2000`
`-106 <= nums[i] <= 106`",Medium,https://leetcode.com/problems/number-of-longest-increasing-subsequence,"Bloomberg,Amazon,Facebook",Dynamic Programming,2191,"[Longest Increasing Subsequence, /problems/longest-increasing-subsequence/, Medium], [Longest Continuous Increasing Subsequence, /problems/longest-continuous-increasing-subsequence/, Easy]","given an integer array `nums`, return the number of longest increasing subsequences. notice that the sequence has to be strictly increasing.","input: nums = [1,3,5,4,7] output: 2 explanation: the two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7]. example 2: input: nums = [2,2,2,2,2] output: 5 explanation: the length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.",`1 <= nums.length <= 2000` `-10^6 <= nums[i] <= 10^6`,
674,Longest Continuous Increasing Subsequence,"Given an unsorted array of integers `nums`, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.

A continuous increasing subsequence is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.


Example 1:
Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.

Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.


Example 2:
Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
increasing.


Constraints:
`0 <= nums.length <= 104`
`-109 <= nums[i] <= 109`",Easy,https://leetcode.com/problems/longest-continuous-increasing-subsequence,Amazon,Array,1128,"[Number of Longest Increasing Subsequence, /problems/number-of-longest-increasing-subsequence/, Medium], [Minimum Window Subsequence, /problems/minimum-window-subsequence/, Hard]","given an unsorted array of integers `nums`, return the length of the longest continuous increasing subsequence (i.e. subarray). the subsequence must be strictly increasing. a continuous increasing subsequence is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.","input: nums = [1,3,5,4,7] output: 3 explanation: the longest continuous increasing subsequence is [1,3,5] with length 3. even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element 4. example 2: input: nums = [2,2,2,2,2] output: 1 explanation: the longest continuous increasing subsequence is [2] with length 1. note that it must be strictly increasing.",`0 <= nums.length <= 10^4` `-10^9 <= nums[i] <= 10^9`,
675,Cut Off Trees for Golf Event,"You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an `m x n` matrix. In this matrix:
`0` means the cell cannot be walked through.

`1` represents an empty cell that can be walked through.

A number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height.

In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.

You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes `1` (an empty cell).

Starting from the point `(0, 0)`, return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return `-1`.

You are guaranteed that no two trees have the same height, and there is at least one tree needs to be cut off.


Example 1:
Input: forest = [[1,2,3],[0,0,4],[7,6,5]]
Output: 6
Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.


Example 2:
Input: forest = [[1,2,3],[0,0,0],[7,6,5]]
Output: -1
Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked.


Example 3:
Input: forest = [[2,3,4],[0,0,5],[8,7,6]]
Output: 6

Explanation: You can follow the same path as Example 1 to cut off all the trees.

Note that you can cut off the first tree at (0, 0) before making any steps.


Constraints:
`m == forest.length`
`n == forest[i].length`
`1 <= m, n <= 50`
`0 <= forest[i][j] <= 109`",Hard,https://leetcode.com/problems/cut-off-trees-for-golf-event,"Amazon,Apple",Breadth-first Search,664,,"you are asked to cut off all the trees in a forest for a golf event. the forest is represented as an `m x n` matrix. in this matrix: `0` means the cell cannot be walked through. `1` represents an empty cell that can be walked through. a number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height. in one step, you can walk in any of the four directions: north, east, south, and west. if you are standing in a cell with a tree, you can choose whether to cut it off. you must cut off the trees in order from shortest to tallest. when you cut off a tree, the value at its cell becomes `1` (an empty cell). starting from the point `(0, 0)`, return the minimum steps you need to walk to cut off all the trees. if you cannot cut off all the trees, return `-1`. you are guaranteed that no two trees have the same height, and there is at least one tree needs to be cut off.","input: forest = [[1,2,3],[0,0,4],[7,6,5]] output: 6 explanation: following the path above allows you to cut off the trees from shortest to tallest in 6 steps. example 2: input: forest = [[1,2,3],[0,0,0],[7,6,5]] output: -1 explanation: the trees in the bottom row cannot be accessed as the middle row is blocked. example 3: input: forest = [[2,3,4],[0,0,5],[8,7,6]] output: 6 explanation: you can follow the same path as example 1 to cut off all the trees. note that you can cut off the first tree at (0, 0) before making any steps.","`m == forest.length` `n == forest[i].length` `1 <= m, n <= 50` `0 <= forest[i][j] <= 10^9`",
676,Implement Magic Dictionary,"Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.

Implement the `MagicDictionary` class:
`MagicDictionary()` Initializes the object.

`void buildDict(String[] dictionary)` Sets the data structure with an array of distinct strings `dictionary`.

`bool search(String searchWord)` Returns `true` if you can change exactly one character in `searchWord` to match any string in the data structure, otherwise returns `false`.


Example 1:
Input
[""MagicDictionary"", ""buildDict"", ""search"", ""search"", ""search"", ""search""]
[[], [[""hello"", ""leetcode""]], [""hello""], [""hhllo""], [""hell""], [""leetcoded""]]
Output
[null, null, false, true, false, false]
Explanation
MagicDictionary magicDictionary = new MagicDictionary();
magicDictionary.buildDict([""hello"", ""leetcode""]);
magicDictionary.search(""hello""); // return False
magicDictionary.search(""hhllo""); // We can change the second 'h' to 'e' to match ""hello"" so we return True
magicDictionary.search(""hell""); // return False
magicDictionary.search(""leetcoded""); // return False

Constraints:
`1 <= dictionary.length <= 100`
`1 <= dictionary[i].length <= 100`
`dictionary[i]` consists of only lower-case English letters.

All the strings in `dictionary` are distinct.

`1 <= searchWord.length <= 100`
`searchWord` consists of only lower-case English letters.

`buildDict` will be called only once before `search`.

At most `100` calls will be made to `search`.",Medium,https://leetcode.com/problems/implement-magic-dictionary,ByteDance,"Hash Table,Trie",717,"[Implement Trie (Prefix Tree), /problems/implement-trie-prefix-tree/, Medium], [Longest Word in Dictionary, /problems/longest-word-in-dictionary/, Easy]","design a data structure that is initialized with a list of different words. provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure. implement the `magicdictionary` class: `magicdictionary()` initializes the object. `void builddict(string[] dictionary)` sets the data structure with an array of distinct strings `dictionary`. `bool search(string searchword)` returns `true` if you can change exactly one character in `searchword` to match any string in the data structure, otherwise returns `false`.","input [""magicdictionary"", ""builddict"", ""search"", ""search"", ""search"", ""search""] [[], [[""hello"", ""leetcode""]], [""hello""], [""hhllo""], [""hell""], [""leetcoded""]] output [null, null, false, true, false, false] explanation magicdictionary magicdictionary = new magicdictionary(); magicdictionary.builddict([""hello"", ""leetcode""]); magicdictionary.search(""hello""); // return false magicdictionary.search(""hhllo""); // we can change the second 'h' to 'e' to match ""hello"" so we return true magicdictionary.search(""hell""); // return false magicdictionary.search(""leetcoded""); // return false",`1 <= dictionary.length <= 10^0` `1 <= dictionary[i].length <= 10^0` `dictionary[i]` consists of only lower-case english letters. all the strings in `dictionary` are distinct. `1 <= searchword.length <= 10^0` `searchword` consists of only lower-case english letters. `builddict` will be called only once before `search`. at most `10^0` calls will be made to `search`.,
677,Map Sum Pairs,"Implement the `MapSum` class:
`MapSum()` Initializes the `MapSum` object.

`void insert(String key, int val)` Inserts the `key-val` pair into the map. If the `key` already existed, the original `key-value` pair will be overridden to the new one.

`int sum(string prefix)` Returns the sum of all the pairs' value whose `key` starts with the `prefix`.


Example 1:
Input
[""MapSum"", ""insert"", ""sum"", ""insert"", ""sum""]
[[], [""apple"", 3], [""ap""], [""app"", 2], [""ap""]]
Output
[null, null, 3, null, 5]
Explanation
MapSum mapSum = new MapSum();
mapSum.insert(""apple"", 3);  
mapSum.sum(""ap"");           // return 3 (apple = 3)
mapSum.insert(""app"", 2);    
mapSum.sum(""ap"");           // return 5 (apple + app = 3 + 2 = 5)

Constraints:
`1 <= key.length, prefix.length <= 50`
`key` and `prefix` consist of only lowercase English letters.

`1 <= val <= 1000`
At most `50` calls will be made to `insert` and `sum`.",Medium,https://leetcode.com/problems/map-sum-pairs,Akuna Capital,Trie,643,,"implement the `mapsum` class: `mapsum()` initializes the `mapsum` object. `void insert(string key, int val)` inserts the `key-val` pair into the map. if the `key` already existed, the original `key-value` pair will be overridden to the new one. `int sum(string prefix)` returns the sum of all the pairs' value whose `key` starts with the `prefix`.","input [""mapsum"", ""insert"", ""sum"", ""insert"", ""sum""] [[], [""apple"", 3], [""ap""], [""app"", 2], [""ap""]] output [null, null, 3, null, 5] explanation mapsum mapsum = new mapsum(); mapsum.insert(""apple"", 3); mapsum.sum(""ap""); // return 3 (apple = 3) mapsum.insert(""app"", 2); mapsum.sum(""ap""); // return 5 (apple + app = 3 + 2 = 5)","`1 <= key.length, prefix.length <= 50` `key` and `prefix` consist of only lowercase english letters. `1 <= val <= 1000` at most `50` calls will be made to `insert` and `sum`.",
678,Valid Parenthesis String,"Given a string `s` containing only three types of characters: `'('`, `')'` and `'*'`, return `true` if `s` is valid.

The following rules define a valid string:
Any left parenthesis `'('` must have a corresponding right parenthesis `')'`.

Any right parenthesis `')'` must have a corresponding left parenthesis `'('`.

Left parenthesis `'('` must go before the corresponding right parenthesis `')'`.

`'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string `""""`.


Example 1:
Input: s = ""()""
Output: true

Example 2:
Input: s = ""(*)""
Output: true

Example 3:
Input: s = ""(*))""
Output: true

Constraints:
`1 <= s.length <= 100`
`s[i]` is `'('`, `')'` or `'*'`.",Medium,https://leetcode.com/problems/valid-parenthesis-string,"Salesforce,Facebook,Amazon,Uber,Oracle",String,2319,"[Special Binary String, /problems/special-binary-string/, Hard]","given a string `s` containing only three types of characters: `'('`, `')'` and `'*'`, return `true` if `s` is valid. the following rules define a valid string: any left parenthesis `'('` must have a corresponding right parenthesis `')'`. any right parenthesis `')'` must have a corresponding left parenthesis `'('`. left parenthesis `'('` must go before the corresponding right parenthesis `')'`. `'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string `""""`.","input: s = ""()"" output: true example 2: input: s = ""(*)"" output: true example 3: input: s = ""(*))"" output: true","`1 <= s.length <= 10^0` `s[i]` is `'('`, `')'` or `'*'`.",
679,24 Game,"You have 4 cards each containing a number from 1 to 9.  You need to judge whether they could operated through `*`, `/`, `+`, `-`, `(`, `)` to get the value of 24.


Example 1:
Input: [4, 1, 8, 7]
Output: True
Explanation: (8-4) * (7-1) = 24

Example 2:
Input: [1, 2, 1, 2]
Output: False
Note:
The division operator `/` represents real division, not integer division.  For example, 4 / (1 - 2/3) = 12.

Every operation done is between two numbers.  In particular, we cannot use `-` as a unary operator.  For example, with `[1, 1, 1, 1]` as input, the expression `-1 - 1 - 1 - 1` is not allowed.

You cannot concatenate numbers together.  For example, if the input is `[1, 2, 1, 2]`, we cannot write this as 12 + 12.",Hard,https://leetcode.com/problems/24-game,Amazon,Depth-first Search,902,,"you have 4 cards each containing a number from 1 to 9. you need to judge whether they could operated through `*`, `/`, `+`, `-`, `(`, `)` to get the value of 24.","input: [4, 1, 8, 7] output: true explanation: (8-4) * (7-1) = 24 example 2: input: [1, 2, 1, 2] output: false note: the division operator `/` represents real division, not integer division. for example, 4 / (1 - 2/3) = 12. every operation done is between two numbers. in particular, we cannot use `-` as a unary operator. for example, with `[1, 1, 1, 1]` as input, the expression `-1 - 1 - 1 - 1` is not allowed. you cannot concatenate numbers together. for example, if the input is `[1, 2, 1, 2]`, we cannot write this as 12 + 12.",,
680,Valid Palindrome II,"Given a non-empty string `s`, you may delete at most one character.  Judge whether you can make it a palindrome.


Example 1:
Input: ""aba""
Output: True

Example 2:
Input: ""abca""
Output: True
Explanation: You could delete the character 'c'.

Note:
The string will only contain lowercase characters a-z.

The maximum length of the string is 50000.",Easy,https://leetcode.com/problems/valid-palindrome-ii,"Facebook,Oracle,Microsoft,eBay,Wish",String,2474,"[Valid Palindrome, /problems/valid-palindrome/, Easy]","given a non-empty string `s`, you may delete at most one character. judge whether you can make it a palindrome.","input: ""aba"" output: true example 2: input: ""abca"" output: true explanation: you could delete the character 'c'. note: the string will only contain lowercase characters a-z. the maximum length of the string is 50000.",,
681,Next Closest Time,"Given a `time` represented in the format `""HH:MM""`, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.

You may assume the given input string is always valid. For example, `""01:34""`, `""12:09""` are all valid. `""1:34""`, `""12:9""` are all invalid.


Example 1:
Input: time = ""19:34""
Output: ""19:39""
Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.

It is not 19:33, because this occurs 23 hours and 59 minutes later.


Example 2:
Input: time = ""23:59""
Output: ""22:22""
Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22.

It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.


Constraints:
`time.length == 5`
`time` is a valid time in the form `""HH:MM""`.

`0 <= HH < 24`
`0 <= MM < 60`",Medium,https://leetcode.com/problems/next-closest-time,Amazon,String,559,,"given a `time` represented in the format `""hh:mm""`, form the next closest time by reusing the current digits. there is no limit on how many times a digit can be reused. you may assume the given input string is always valid. for example, `""01:34""`, `""12:09""` are all valid. `""1:34""`, `""12:9""` are all invalid.","input: time = ""19:34"" output: ""19:39"" explanation: the next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later. it is not 19:33, because this occurs 23 hours and 59 minutes later. example 2: input: time = ""23:59"" output: ""22:22"" explanation: the next closest time choosing from digits 2, 3, 5, 9, is 22:22. it may be assumed that the returned time is next day's time since it is smaller than the input time numerically.","`time.length == 5` `time` is a valid time in the form `""hh:mm""`. `0 <= hh < 24` `0 <= mm < 60`",
682,Baseball Game,"You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.

At the beginning of the game, you start with an empty record. You are given a list of strings `ops`, where `ops[i]` is the `ith` operation you must apply to the record and is one of the following:
An integer `x` - Record a new score of `x`.

`""+""` - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.

`""D""` - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.

`""C""` - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.

Return the sum of all the scores on the record.


Example 1:
Input: ops = [""5"",""2"",""C"",""D"",""+""]
Output: 30
Explanation:
""5"" - Add 5 to the record, record is now [5].

""2"" - Add 2 to the record, record is now [5, 2].

""C"" - Invalidate and remove the previous score, record is now [5].

""D"" - Add 2 * 5 = 10 to the record, record is now [5, 10].

""+"" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].

The total sum is 5 + 10 + 15 = 30.


Example 2:
Input: ops = [""5"",""-2"",""4"",""C"",""D"",""9"",""+"",""+""]
Output: 27
Explanation:
""5"" - Add 5 to the record, record is now [5].

""-2"" - Add -2 to the record, record is now [5, -2].

""4"" - Add 4 to the record, record is now [5, -2, 4].

""C"" - Invalidate and remove the previous score, record is now [5, -2].

""D"" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].

""9"" - Add 9 to the record, record is now [5, -2, -4, 9].

""+"" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].

""+"" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].

The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.


Example 3:
Input: ops = [""1""]
Output: 1

Constraints:
`1 <= ops.length <= 1000`
`ops[i]` is `""C""`, `""D""`, `""+""`, or a string representing an integer in the range `[-3 * 104, 3 * 104]`.

For operation `""+""`, there will always be at least two previous scores on the record.

For operations `""C""` and `""D""`, there will always be at least one previous score on the record.",Easy,https://leetcode.com/problems/baseball-game,Amazon,Stack,705,"[Crawler Log Folder, /problems/crawler-log-folder/, Easy]","you are keeping score for a baseball game with strange rules. the game consists of several rounds, where the scores of past rounds may affect future rounds' scores. at the beginning of the game, you start with an empty record. you are given a list of strings `ops`, where `ops[i]` is the `ith` operation you must apply to the record and is one of the following: an integer `x` - record a new score of `x`. `""+""` - record a new score that is the sum of the previous two scores. it is guaranteed there will always be two previous scores. `""d""` - record a new score that is double the previous score. it is guaranteed there will always be a previous score. `""c""` - invalidate the previous score, removing it from the record. it is guaranteed there will always be a previous score. return the sum of all the scores on the record.","input: ops = [""5"",""2"",""c"",""d"",""+""] output: 30 explanation: ""5"" - add 5 to the record, record is now [5]. ""2"" - add 2 to the record, record is now [5, 2]. ""c"" - invalidate and remove the previous score, record is now [5]. ""d"" - add 2 * 5 = 10 to the record, record is now [5, 10]. ""+"" - add 5 + 10 = 15 to the record, record is now [5, 10, 15]. the total sum is 5 + 10 + 15 = 30. example 2: input: ops = [""5"",""-2"",""4"",""c"",""d"",""9"",""+"",""+""] output: 27 explanation: ""5"" - add 5 to the record, record is now [5]. ""-2"" - add -2 to the record, record is now [5, -2]. ""4"" - add 4 to the record, record is now [5, -2, 4]. ""c"" - invalidate and remove the previous score, record is now [5, -2]. ""d"" - add 2 * -2 = -4 to the record, record is now [5, -2, -4]. ""9"" - add 9 to the record, record is now [5, -2, -4, 9]. ""+"" - add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5]. ""+"" - add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14]. the total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27. example 3: input: ops = [""1""] output: 1","`1 <= ops.length <= 1000` `ops[i]` is `""c""`, `""d""`, `""+""`, or a string representing an integer in the range `[-3 * 10^4, 3 * 10^4]`. for operation `""+""`, there will always be at least two previous scores on the record. for operations `""c""` and `""d""`, there will always be at least one previous score on the record.",
683,K Empty Slots,"You have `n` bulbs in a row numbered from `1` to `n`. Initially, all the bulbs are turned off. We turn on exactly one bulb every day until all bulbs are on after `n` days.

You are given an array `bulbs` of length `n` where `bulbs[i] = x` means that on the `(i+1)th` day, we will turn on the bulb at position `x` where `i` is 0-indexed and `x` is 1-indexed.

Given an integer `k`, return the minimum day number such that there exists two turned on bulbs that have exactly `k` bulbs between them that are all turned off. If there isn't such day, return `-1`.


Example 1:
Input: bulbs = [1,3,2], k = 1
Output: 2
Explanation:
On the first day: bulbs[0] = 1, first bulb is turned on: [1,0,0]
On the second day: bulbs[1] = 3, third bulb is turned on: [1,0,1]
On the third day: bulbs[2] = 2, second bulb is turned on: [1,1,1]
We return 2 because on the second day, there were two on bulbs with one off bulb between them.


Example 2:
Input: bulbs = [1,2,3], k = 1
Output: -1

Constraints:
`n == bulbs.length`
`1 <= n <= 2 * 104`
`1 <= bulbs[i] <= n`
`bulbs` is a permutation of numbers from `1` to `n`.

`0 <= k <= 2 * 104`",Hard,https://leetcode.com/problems/k-empty-slots,Google,Ordered Map,651,,"you have `n` bulbs in a row numbered from `1` to `n`. initially, all the bulbs are turned off. we turn on exactly one bulb every day until all bulbs are on after `n` days. you are given an array `bulbs` of length `n` where `bulbs[i] = x` means that on the `(i+1)th` day, we will turn on the bulb at position `x` where `i` is 0-indexed and `x` is 1-indexed. given an integer `k`, return the minimum day number such that there exists two turned on bulbs that have exactly `k` bulbs between them that are all turned off. if there isn't such day, return `-1`.","input: bulbs = [1,3,2], k = 1 output: 2 explanation: on the first day: bulbs[0] = 1, first bulb is turned on: [1,0,0] on the second day: bulbs[1] = 3, third bulb is turned on: [1,0,1] on the third day: bulbs[2] = 2, second bulb is turned on: [1,1,1] we return 2 because on the second day, there were two on bulbs with one off bulb between them. example 2: input: bulbs = [1,2,3], k = 1 output: -1",`n == bulbs.length` `1 <= n <= 2 * 10^4` `1 <= bulbs[i] <= n` `bulbs` is a permutation of numbers from `1` to `n`. `0 <= k <= 2 * 10^4`,
684,Redundant Connection,"In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of `edges`.  Each element of `edges` is a pair `[u, v]` with `u < v`, that represents an undirected edge connecting nodes `u` and `v`.

Return an edge that can be removed so that the resulting graph is a tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.  The answer edge `[u, v]` should be in the same format, with `u < v`.


Example 1:
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3

Example 2:
Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
Output: [1,4]
Explanation: The given undirected graph will be like this:
5 - 1 - 2
    |   |
    4 - 3
Note:
The size of the input 2D-array will be between 3 and 1000.

Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.

Update (2017-09-26):
We have overhauled the problem description + test cases and specified clearly the graph is an undirected graph. For the directed graph follow up please see Redundant Connection II). We apologize for any inconvenience caused.",Medium,https://leetcode.com/problems/redundant-connection,Amazon,"Tree,Union Find,Graph",1994,"[Redundant Connection II, /problems/redundant-connection-ii/, Hard], [Accounts Merge, /problems/accounts-merge/, Medium]","in this problem, a tree is an undirected graph that is connected and has no cycles. the given input is a graph that started as a tree with n nodes (with distinct values 1, 2, ..., n), with one additional edge added. the added edge has two different vertices chosen from 1 to n, and was not an edge that already existed. the resulting graph is given as a 2d-array of `edges`. each element of `edges` is a pair `[u, v]` with `u < v`, that represents an undirected edge connecting nodes `u` and `v`. return an edge that can be removed so that the resulting graph is a tree of n nodes. if there are multiple answers, return the answer that occurs last in the given 2d-array. the answer edge `[u, v]` should be in the same format, with `u < v`.","input: [[1,2], [1,3], [2,3]] output: [2,3] explanation: the given undirected graph will be like this: 1 / \ 2 - 3 example 2: input: [[1,2], [2,3], [3,4], [1,4], [1,5]] output: [1,4] explanation: the given undirected graph will be like this: 5 - 1 - 2 | | 4 - 3 note: the size of the input 2d-array will be between 3 and 1000. every integer represented in the 2d-array will be between 1 and n, where n is the size of the input array. update (2017-09-26): we have overhauled the problem description + test cases and specified clearly the graph is an undirected graph. for the directed graph follow up please see redundant connection ii). we apologize for any inconvenience caused.",,
685,Redundant Connection II,"In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.

The given input is a directed graph that started as a rooted tree with `n` nodes (with distinct values from `1` to `n`), with one additional directed edge added. The added edge has two different vertices chosen from `1` to `n`, and was not an edge that already existed.

The resulting graph is given as a 2D-array of `edges`. Each element of `edges` is a pair `[ui, vi]` that represents a directed edge connecting nodes `ui` and `vi`, where `ui` is a parent of child `vi`.

Return an edge that can be removed so that the resulting graph is a rooted tree of `n` nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.


Example 1:
Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]

Example 2:
Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]
Output: [4,1]

Constraints:
`n == edges.length`
`3 <= n <= 1000`
`edges[i].length == 2`
`1 <= ui, vi <= n`",Hard,https://leetcode.com/problems/redundant-connection-ii,Amazon,"Tree,Depth-first Search,Union Find,Graph",1061,"[Redundant Connection, /problems/redundant-connection/, Medium]","in this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents. the given input is a directed graph that started as a rooted tree with `n` nodes (with distinct values from `1` to `n`), with one additional directed edge added. the added edge has two different vertices chosen from `1` to `n`, and was not an edge that already existed. the resulting graph is given as a 2d-array of `edges`. each element of `edges` is a pair `[ui, vi]` that represents a directed edge connecting nodes `ui` and `vi`, where `ui` is a parent of child `vi`. return an edge that can be removed so that the resulting graph is a rooted tree of `n` nodes. if there are multiple answers, return the answer that occurs last in the given 2d-array.","input: edges = [[1,2],[1,3],[2,3]] output: [2,3] example 2: input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]] output: [4,1]","`n == edges.length` `3 <= n <= 1000` `edges[i].length == 2` `1 <= ui, vi <= n`",
686,Repeated String Match,"Given two strings `a` and `b`, return the minimum number of times you should repeat string `a` so that string `b` is a substring of it. If it is impossible for `b`​​​​​​ to be a substring of `a` after repeating it, return `-1`.

Notice: string `""abc""` repeated 0 times is `""""`,  repeated 1 time is `""abc""` and repeated 2 times is `""abcabc""`.


Example 1:
Input: a = ""abcd"", b = ""cdabcdab""
Output: 3
Explanation: We return 3 because by repeating a three times ""abcdabcdabcd"", b is a substring of it.


Example 2:
Input: a = ""a"", b = ""aa""
Output: 2

Example 3:
Input: a = ""a"", b = ""a""
Output: 1

Example 4:
Input: a = ""abc"", b = ""wxyz""
Output: -1

Constraints:
`1 <= a.length <= 104`
`1 <= b.length <= 104`
`a` and `b` consist of lower-case English letters.",Medium,https://leetcode.com/problems/repeated-string-match,"Google,Facebook,Amazon",String,1007,"[Repeated Substring Pattern, /problems/repeated-substring-pattern/, Easy]","given two strings `a` and `b`, return the minimum number of times you should repeat string `a` so that string `b` is a substring of it. if it is impossible for `b`​​​​​​ to be a substring of `a` after repeating it, return `-1`. notice: string `""abc""` repeated 0 times is `""""`, repeated 1 time is `""abc""` and repeated 2 times is `""abcabc""`.","input: a = ""abcd"", b = ""cdabcdab"" output: 3 explanation: we return 3 because by repeating a three times ""abcdabcdabcd"", b is a substring of it. example 2: input: a = ""a"", b = ""aa"" output: 2 example 3: input: a = ""a"", b = ""a"" output: 1 example 4: input: a = ""abc"", b = ""wxyz"" output: -1",`1 <= a.length <= 10^4` `1 <= b.length <= 10^4` `a` and `b` consist of lower-case english letters.,
687,Longest Univalue Path,"Given the `root` of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.

The length of the path between two nodes is represented by the number of edges between them.


Example 1:
Input: root = [5,4,5,1,1,5]
Output: 2

Example 2:
Input: root = [1,4,5,4,4,5]
Output: 2

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-1000 <= Node.val <= 1000`
The depth of the tree will not exceed `1000`.",Medium,https://leetcode.com/problems/longest-univalue-path,Bloomberg,"Tree,Recursion",2239,"[Binary Tree Maximum Path Sum, /problems/binary-tree-maximum-path-sum/, Hard], [Count Univalue Subtrees, /problems/count-univalue-subtrees/, Medium], [Path Sum III, /problems/path-sum-iii/, Medium]","given the `root` of a binary tree, return the length of the longest path, where each node in the path has the same value. this path may or may not pass through the root. the length of the path between two nodes is represented by the number of edges between them.","input: root = [5,4,5,1,1,5] output: 2 example 2: input: root = [1,4,5,4,4,5] output: 2","the number of nodes in the tree is in the range `[0, 10^4]`. `-1000 <= node.val <= 1000` the depth of the tree will not exceed `1000`.",
688,Knight Probability in Chessboard,"On an `N`x`N` chessboard, a knight starts at the `r`-th row and `c`-th column and attempts to make exactly `K` moves. The rows and columns are 0 indexed, so the top-left square is `(0, 0)`, and the bottom-right square is `(N-1, N-1)`.

A chess knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.

Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.

The knight continues moving until it has made exactly `K` moves or has moved off the chessboard. Return the probability that the knight remains on the board after it has stopped moving.


Example:
Input: 3, 2, 0, 0
Output: 0.0625
Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.

From each of those positions, there are also two moves that will keep the knight on the board.

The total probability the knight stays on the board is 0.0625.

Note:
`N` will be between 1 and 25.

`K` will be between 0 and 100.

The knight always initially starts on the board.",Medium,https://leetcode.com/problems/knight-probability-in-chessboard,"Goldman Sachs,Amazon",Dynamic Programming,1240,"[Out of Boundary Paths, /problems/out-of-boundary-paths/, Medium]","on an `n`x`n` chessboard, a knight starts at the `r`-th row and `c`-th column and attempts to make exactly `k` moves. the rows and columns are 0 indexed, so the top-left square is `(0, 0)`, and the bottom-right square is `(n-1, n-1)`. a chess knight has 8 possible moves it can make, as illustrated below. each move is two squares in a cardinal direction, then one square in an orthogonal direction. each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there. the knight continues moving until it has made exactly `k` moves or has moved off the chessboard. return the probability that the knight remains on the board after it has stopped moving.","input: 3, 2, 0, 0 output: 0.0625 explanation: there are two moves (to (1,2), (2,1)) that will keep the knight on the board. from each of those positions, there are also two moves that will keep the knight on the board. the total probability the knight stays on the board is 0.0625. note: `n` will be between 1 and 25. `k` will be between 0 and 100. the knight always initially starts on the board.",,
689,Maximum Sum of 3 Non-Overlapping Subarrays,"In a given array `nums` of positive integers, find three non-overlapping subarrays with maximum sum.

Each subarray will be of size `k`, and we want to maximize the sum of all `3*k` entries.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.


Example:
Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].

We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.

Note:
`nums.length` will be between 1 and 20000.

`nums[i]` will be between 1 and 65535.

`k` will be between 1 and floor(nums.length / 3).",Hard,https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays,Facebook,"Array,Dynamic Programming",1214,"[Best Time to Buy and Sell Stock III, /problems/best-time-to-buy-and-sell-stock-iii/, Hard]","in a given array `nums` of positive integers, find three non-overlapping subarrays with maximum sum. each subarray will be of size `k`, and we want to maximize the sum of all `3*k` entries. return the result as a list of indices representing the starting position of each interval (0-indexed). if there are multiple answers, return the lexicographically smallest one.","input: [1,2,1,2,6,7,5,1], 2 output: [0, 3, 5] explanation: subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5]. we could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger. note: `nums.length` will be between 1 and 20000. `nums[i]` will be between 1 and 65535. `k` will be between 1 and floor(nums.length / 3).",,
690,Employee Importance,"You are given a data structure of employee information, which includes the employee's unique id, their importance value and their direct subordinates' id.

For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.

Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all their subordinates.


Example 1:
Input: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1
Output: 11
Explanation:
Employee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11.

Note:
One employee has at most one direct leader and may have several subordinates.

The maximum number of employees won't exceed 2000.",Easy,https://leetcode.com/problems/employee-importance,"Google,Microsoft","Hash Table,Depth-first Search,Breadth-first Search",961,"[Nested List Weight Sum, /problems/nested-list-weight-sum/, Medium]","you are given a data structure of employee information, which includes the employee's unique id, their importance value and their direct subordinates' id. for example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. they have importance value 15, 10 and 5, respectively. then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. note that although employee 3 is also a subordinate of employee 1, the relationship is not direct. now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all their subordinates.","input: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1 output: 11 explanation: employee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. they both have importance value 3. so the total importance value of employee 1 is 5 + 3 + 3 = 11. note: one employee has at most one direct leader and may have several subordinates. the maximum number of employees won't exceed 2000.",,
691,Stickers to Spell Word,"We are given N different types of stickers.  Each sticker has a lowercase English word on it.

You would like to spell out the given `target` string by cutting individual letters from your collection of stickers and rearranging them.

You can use each sticker more than once if you want, and you have infinite quantities of each sticker.

What is the minimum number of stickers that you need to spell out the `target`?  If the task is impossible, return -1.


Example 1:
Input:[""with"", ""example"", ""science""], ""thehat""
Output:3
Explanation:We can use 2 ""with"" stickers, and 1 ""example"" sticker.

After cutting and rearrange the letters of those stickers, we can form the target ""thehat"".

Also, this is the minimum number of stickers necessary to form the target string.


Example 2:
Input:[""notice"", ""possible""], ""basicbasic""
Output:-1
Explanation:We can't form the target ""basicbasic"" from cutting letters from the given stickers.

Note:
`stickers` has length in the range `[1, 50]`.

`stickers` consists of lowercase English words (without apostrophes).

`target` has length in the range `[1, 15]`, and consists of lowercase English letters.

In all test cases, all words were chosen randomly from the 1000 most common US English words, and the target was chosen as a concatenation of two random words.

The time limit may be more challenging than usual.  It is expected that a 50 sticker test case can be solved within 35ms on average.",Hard,https://leetcode.com/problems/stickers-to-spell-word,Facebook,"Dynamic Programming,Backtracking",499,"[Ransom Note, /problems/ransom-note/, Easy]","we are given n different types of stickers. each sticker has a lowercase english word on it. you would like to spell out the given `target` string by cutting individual letters from your collection of stickers and rearranging them. you can use each sticker more than once if you want, and you have infinite quantities of each sticker. what is the minimum number of stickers that you need to spell out the `target`? if the task is impossible, return -1.","input:[""with"", ""example"", ""science""], ""thehat"" output:3 explanation:we can use 2 ""with"" stickers, and 1 ""example"" sticker. after cutting and rearrange the letters of those stickers, we can form the target ""thehat"". also, this is the minimum number of stickers necessary to form the target string. example 2: input:[""notice"", ""possible""], ""basicbasic"" output:-1 explanation:we can't form the target ""basicbasic"" from cutting letters from the given stickers. note: `stickers` has length in the range `[1, 50]`. `stickers` consists of lowercase english words (without apostrophes). `target` has length in the range `[1, 15]`, and consists of lowercase english letters. in all test cases, all words were chosen randomly from the 1000 most common us english words, and the target was chosen as a concatenation of two random words. the time limit may be more challenging than usual. it is expected that a 50 sticker test case can be solved within 35ms on average.",,
692,Top K Frequent Words,"Given a non-empty list of words, return the k most frequent elements.

Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.


Example 1:
Input: [""i"", ""love"", ""leetcode"", ""i"", ""love"", ""coding""], k = 2
Output: [""i"", ""love""]
Explanation: ""i"" and ""love"" are the two most frequent words.

    Note that ""i"" comes before ""love"" due to a lower alphabetical order.


Example 2:
Input: [""the"", ""day"", ""is"", ""sunny"", ""the"", ""the"", ""the"", ""sunny"", ""is"", ""is""], k = 4
Output: [""the"", ""is"", ""sunny"", ""day""]
Explanation: ""the"", ""is"", ""sunny"" and ""day"" are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.

Note:
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.

Input words contain only lowercase letters.
Follow up:
Try to solve it in O(n log k) time and O(n) extra space.",Medium,https://leetcode.com/problems/top-k-frequent-words,"Amazon,Bloomberg,Google,Facebook,Apple,Oracle,Microsoft","Hash Table,Heap,Trie",2884,"[Top K Frequent Elements, /problems/top-k-frequent-elements/, Medium], [K Closest Points to Origin, /problems/k-closest-points-to-origin/, Medium], [Sort Features by Popularity, /problems/sort-features-by-popularity/, Medium]","given a non-empty list of words, return the k most frequent elements. your answer should be sorted by frequency from highest to lowest. if two words have the same frequency, then the word with the lower alphabetical order comes first.","input: [""i"", ""love"", ""leetcode"", ""i"", ""love"", ""coding""], k = 2 output: [""i"", ""love""] explanation: ""i"" and ""love"" are the two most frequent words. note that ""i"" comes before ""love"" due to a lower alphabetical order. example 2: input: [""the"", ""day"", ""is"", ""sunny"", ""the"", ""the"", ""the"", ""sunny"", ""is"", ""is""], k = 4 output: [""the"", ""is"", ""sunny"", ""day""] explanation: ""the"", ""is"", ""sunny"" and ""day"" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively. note: you may assume k is always valid, 1 ≤ k ≤ number of unique elements. input words contain only lowercase letters.",,try to solve it in o(n log k) time and o(n) extra space.
693,Binary Number with Alternating Bits,"Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.


Example 1:
Input: n = 5
Output: true
Explanation: The binary representation of 5 is: 101

Example 2:
Input: n = 7
Output: false
Explanation: The binary representation of 7 is: 111.


Example 3:
Input: n = 11
Output: false
Explanation: The binary representation of 11 is: 1011.


Example 4:
Input: n = 10
Output: true
Explanation: The binary representation of 10 is: 1010.


Example 5:
Input: n = 3
Output: false

Constraints:
`1 <= n <= 231 - 1`",Easy,https://leetcode.com/problems/binary-number-with-alternating-bits,Yahoo,Bit Manipulation,606,"[Number of 1 Bits, /problems/number-of-1-bits/, Easy]","given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.",input: n = 5 output: true explanation: the binary representation of 5 is: 101 example 2: input: n = 7 output: false explanation: the binary representation of 7 is: 111. example 3: input: n = 11 output: false explanation: the binary representation of 11 is: 1011. example 4: input: n = 10 output: true explanation: the binary representation of 10 is: 1010. example 5: input: n = 3 output: false,`1 <= n <= 231 - 1`,
694,Number of Distinct Islands,"Given a non-empty 2D array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.

Count the number of distinct islands.  An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.


Example 1:
11000
11000
00011
00011
Given the above grid map, return `1`.


Example 2:
11011
10000
00001
11011
Given the above grid map, return `3`.

Notice that:
11
1
and
 1
11
are considered different island shapes, because we do not consider reflection / rotation.

Note:
The length of each dimension in the given `grid` does not exceed 50.",Medium,https://leetcode.com/problems/number-of-distinct-islands,"Amazon,Bloomberg,Facebook,Microsoft","Hash Table,Depth-first Search,Breadth-first Search",1277,"[Number of Islands, /problems/number-of-islands/, Medium], [Number of Distinct Islands II, /problems/number-of-distinct-islands-ii/, Hard]","given a non-empty 2d array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.) you may assume all four edges of the grid are surrounded by water. count the number of distinct islands. an island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.","11000 11000 00011 00011 given the above grid map, return `1`. example 2: 11011 10000 00001 11011 given the above grid map, return `3`. notice that: 11 1 and 1 11 are considered different island shapes, because we do not consider reflection / rotation. note: the length of each dimension in the given `grid` does not exceed 50.",,
695,Max Area of Island,"Given a non-empty 2D array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)

Example 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
Given the above grid, return `6`. Note the answer is not 11, because the island must be connected 4-directionally.


Example 2:
[[0,0,0,0,0,0,0,0]]
Given the above grid, return `0`.

Note: The length of each dimension in the given `grid` does not exceed 50.",Medium,https://leetcode.com/problems/max-area-of-island,"Google,DoorDash,Amazon,Facebook,Microsoft,Oracle,Bloomberg,eBay","Array,Depth-first Search",2935,"[Number of Islands, /problems/number-of-islands/, Medium], [Island Perimeter, /problems/island-perimeter/, Easy], [Largest Submatrix With Rearrangements, /problems/largest-submatrix-with-rearrangements/, Medium]","given a non-empty 2d array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.) you may assume all four edges of the grid are surrounded by water. find the maximum area of an island in the given 2d array. (if there is no island, the maximum area is 0.)","[[0,0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,1,1,0,1,0,0,0,0,0,0,0,0], [0,1,0,0,1,1,0,0,1,0,1,0,0], [0,1,0,0,1,1,0,0,1,1,1,0,0], [0,0,0,0,0,0,0,0,0,0,1,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,0,1,1,0,0,0,0]] given the above grid, return `6`. note the answer is not 11, because the island must be connected 4-directionally. example 2: [[0,0,0,0,0,0,0,0]] given the above grid, return `0`. note: the length of each dimension in the given `grid` does not exceed 50.",,
696,Count Binary Substrings,"Give a string `s`, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. 
Substrings that occur multiple times are counted the number of times they occur.


Example 1:
Input: ""00110011""
Output: 6
Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: ""0011"", ""01"", ""1100"", ""10"", ""0011"", and ""01"".

Notice that some of these substrings repeat and are counted the number of times they occur.

Also, ""00110011"" is not a valid substring because all the 0's (and 1's) are not grouped together.


Example 2:
Input: ""10101""
Output: 4
Explanation: There are 4 substrings: ""10"", ""01"", ""10"", ""01"" that have equal number of consecutive 1's and 0's.

Note:
`s.length` will be between 1 and 50,000.

`s` will only consist of ""0"" or ""1"" characters.",Easy,https://leetcode.com/problems/count-binary-substrings,"JPMorgan,SAP",String,1315,"[Encode and Decode Strings, /problems/encode-and-decode-strings/, Medium]","give a string `s`, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. substrings that occur multiple times are counted the number of times they occur.","input: ""00110011"" output: 6 explanation: there are 6 substrings that have equal number of consecutive 1's and 0's: ""0011"", ""01"", ""1100"", ""10"", ""0011"", and ""01"". notice that some of these substrings repeat and are counted the number of times they occur. also, ""00110011"" is not a valid substring because all the 0's (and 1's) are not grouped together. example 2: input: ""10101"" output: 4 explanation: there are 4 substrings: ""10"", ""01"", ""10"", ""01"" that have equal number of consecutive 1's and 0's. note: `s.length` will be between 1 and 50,000. `s` will only consist of ""0"" or ""1"" characters.",,
697,Degree of an Array,"Given a non-empty array of non-negative integers `nums`, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`.


Example 1:
Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.

Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.


Example 2:
Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because the element 2 is repeated 3 times.

So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.


Constraints:
`nums.length` will be between 1 and 50,000.

`nums[i]` will be an integer between 0 and 49,999.",Easy,https://leetcode.com/problems/degree-of-an-array,"Bloomberg,Twitter",Array,1269,"[Maximum Subarray, /problems/maximum-subarray/, Easy]","given a non-empty array of non-negative integers `nums`, the degree of this array is defined as the maximum frequency of any one of its elements. your task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`.","input: nums = [1,2,2,3,1] output: 2 explanation: the input array has a degree of 2 because both elements 1 and 2 appear twice. of the subarrays that have the same degree: [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2] the shortest length is 2. so return 2. example 2: input: nums = [1,2,2,3,1,4,2] output: 6 explanation: the degree is 3 because the element 2 is repeated 3 times. so [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.","`nums.length` will be between 1 and 50,000. `nums[i]` will be an integer between 0 and 49,999.",
698,Partition to K Equal Sum Subsets,"Given an array of integers `nums` and a positive integer `k`, find whether it's possible to divide this array into `k` non-empty subsets whose sums are all equal.


Example 1:
Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
Output: True
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.

Note:
`1 <= k <= len(nums) <= 16`.

`0 < nums[i] < 10000`.",Medium,https://leetcode.com/problems/partition-to-k-equal-sum-subsets,"LinkedIn,Amazon,Google,Facebook,Adobe","Dynamic Programming,Recursion",2784,"[Partition Equal Subset Sum, /problems/partition-equal-subset-sum/, Medium]","given an array of integers `nums` and a positive integer `k`, find whether it's possible to divide this array into `k` non-empty subsets whose sums are all equal.","input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4 output: true explanation: it's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums. note: `1 <= k <= len(nums) <= 16`. `0 < nums[i] < 10000`.",,
699,Falling Squares,"On an infinite number line (x-axis), we drop given squares in the order they are given.

The `i`-th square dropped (`positions[i] = (left, side_length)`) is a square with the left-most point being `positions[i][0]` and sidelength `positions[i][1]`.

The square is dropped with the bottom edge parallel to the number line, and from a higher height than all currently landed squares. We wait for each square to stick before dropping the next.

The squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length surface they touch (either the number line or another square). Squares dropped adjacent to each other will not stick together prematurely.

Return a list `ans` of heights. Each height `ans[i]` represents the current highest height of any square we have dropped, after dropping squares represented by `positions[0], positions[1], ..., positions[i]`.


Example 1:
Input: [[1, 2], [2, 3], [6, 1]]
Output: [2, 5, 5]
Explanation:
After the first drop of `positions[0] = [1, 2]: _aa _aa ------- `The maximum height of any square is 2.

After the second drop of `positions[1] = [2, 3]: __aaa __aaa __aaa _aa__ _aa__ -------------- `The maximum height of any square is 5. The larger square stays on top of the smaller square despite where its center of gravity is, because squares are infinitely sticky on their bottom edge.

After the third drop of `positions[1] = [6, 1]: __aaa __aaa __aaa _aa _aa___a -------------- `The maximum height of any square is still 5. Thus, we return an answer of `[2, 5, 5]`.


Example 2:
Input: [[100, 100], [200, 100]]
Output: [100, 100]
Explanation: Adjacent squares don't get stuck prematurely - only their bottom edge can stick to surfaces.

Note:
`1 <= positions.length <= 1000`.

`1 <= positions[i][0] <= 10^8`.

`1 <= positions[i][1] <= 10^6`.",Hard,https://leetcode.com/problems/falling-squares,"Amazon,Uber,Square","Segment Tree,Ordered Map",330,"[The Skyline Problem, /problems/the-skyline-problem/, Hard]","on an infinite number line (x-axis), we drop given squares in the order they are given. the `i`-th square dropped (`positions[i] = (left, side_length)`) is a square with the left-most point being `positions[i][0]` and sidelength `positions[i][1]`. the square is dropped with the bottom edge parallel to the number line, and from a higher height than all currently landed squares. we wait for each square to stick before dropping the next. the squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length surface they touch (either the number line or another square). squares dropped adjacent to each other will not stick together prematurely. return a list `ans` of heights. each height `ans[i]` represents the current highest height of any square we have dropped, after dropping squares represented by `positions[0], positions[1], ..., positions[i]`.","input: [[1, 2], [2, 3], [6, 1]] output: [2, 5, 5] explanation: after the first drop of `positions[0] = [1, 2]: _aa _aa ------- `the maximum height of any square is 2. after the second drop of `positions[1] = [2, 3]: __aaa __aaa __aaa _aa__ _aa__ -------------- `the maximum height of any square is 5. the larger square stays on top of the smaller square despite where its center of gravity is, because squares are infinitely sticky on their bottom edge. after the third drop of `positions[1] = [6, 1]: __aaa __aaa __aaa _aa _aa___a -------------- `the maximum height of any square is still 5. thus, we return an answer of `[2, 5, 5]`. example 2: input: [[100, 100], [200, 100]] output: [100, 100] explanation: adjacent squares don't get stuck prematurely - only their bottom edge can stick to surfaces. note: `1 <= positions.length <= 1000`. `1 <= positions[i][0] <= 10^8`. `1 <= positions[i][1] <= 10^6`.",,
700,Search in a Binary Search Tree,"You are given the `root` of a binary search tree (BST) and an integer `val`.

Find the node in the BST that the node's value equals `val` and return the subtree rooted with that node. If such a node does not exist, return `null`.


Example 1:
Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]

Example 2:
Input: root = [4,2,7,1,3], val = 5
Output: []

Constraints:
The number of nodes in the tree is in the range `[1, 5000]`.

`1 <= Node.val <= 107`
`root` is a binary search tree.

`1 <= val <= 107`",Easy,https://leetcode.com/problems/search-in-a-binary-search-tree,"Apple,Uber",Tree,1360,"[Closest Binary Search Tree Value, /problems/closest-binary-search-tree-value/, Easy], [Insert into a Binary Search Tree, /problems/insert-into-a-binary-search-tree/, Medium]","you are given the `root` of a binary search tree (bst) and an integer `val`. find the node in the bst that the node's value equals `val` and return the subtree rooted with that node. if such a node does not exist, return `null`.","input: root = [4,2,7,1,3], val = 2 output: [2,1,3] example 2: input: root = [4,2,7,1,3], val = 5 output: []","the number of nodes in the tree is in the range `[1, 5000]`. `1 <= node.val <= 10^7` `root` is a binary search tree. `1 <= val <= 10^7`",
701,Insert into a Binary Search Tree,"You are given the `root` node of a binary search tree (BST) and a `value` to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.

Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.


Example 1:
Input: root = [4,2,7,1,3], val = 5
Output: [4,2,7,1,3,5]
Explanation: Another accepted tree is:

Example 2:
Input: root = [40,20,60,10,30,50,70], val = 25
Output: [40,20,60,10,30,50,70,null,null,25]

Example 3:
Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5
Output: [4,2,7,1,3,5]

Constraints:
The number of nodes in the tree will be in the range `[0, 104]`.

`-108 <= Node.val <= 108`
All the values `Node.val` are unique.

`-108 <= val <= 108`
It's guaranteed that `val` does not exist in the original BST.",Medium,https://leetcode.com/problems/insert-into-a-binary-search-tree,"Amazon,Microsoft,Google",Tree,1487,"[Search in a Binary Search Tree, /problems/search-in-a-binary-search-tree/, Easy]","you are given the `root` node of a binary search tree (bst) and a `value` to insert into the tree. return the root node of the bst after the insertion. it is guaranteed that the new value does not exist in the original bst. notice that there may exist multiple valid ways for the insertion, as long as the tree remains a bst after insertion. you can return any of them.","input: root = [4,2,7,1,3], val = 5 output: [4,2,7,1,3,5] explanation: another accepted tree is: example 2: input: root = [40,20,60,10,30,50,70], val = 25 output: [40,20,60,10,30,50,70,null,null,25] example 3: input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5 output: [4,2,7,1,3,5]","the number of nodes in the tree will be in the range `[0, 10^4]`. `-10^8 <= node.val <= 10^8` all the values `node.val` are unique. `-10^8 <= val <= 10^8` it's guaranteed that `val` does not exist in the original bst.",
702,Search in a Sorted Array of Unknown Size,"Given an integer array sorted in ascending order, write a function to search `target` in `nums`.  If `target` exists, then return its index, otherwise return `-1`. However, the array size is unknown to you. You may only access the array using an `ArrayReader` interface, where `ArrayReader.get(k)` returns the element of the array at index `k` (0-indexed).

You may assume all integers in the array are less than `10000`, and if you access the array out of bounds, `ArrayReader.get` will return `2147483647`.


Example 1:
Input: `array` = [-1,0,3,5,9,12], `target` = 9
Output: 4
Explanation: 9 exists in `nums` and its index is 4

Example 2:
Input: `array` = [-1,0,3,5,9,12], `target` = 2
Output: -1
Explanation: 2 does not exist in `nums` so return -1

Constraints:
You may assume that all elements in the array are unique.

The value of each element in the array will be in the range `[-9999, 9999]`.

The length of the array will be in the range `[1, 10^4]`.",Medium,https://leetcode.com/problems/search-in-a-sorted-array-of-unknown-size,"Microsoft,Morgan Stanley",Binary Search,490,"[Binary Search, /problems/binary-search/, Easy], [Find the Index of the Large Integer, /problems/find-the-index-of-the-large-integer/, Medium]","given an integer array sorted in ascending order, write a function to search `target` in `nums`. if `target` exists, then return its index, otherwise return `-1`. however, the array size is unknown to you. you may only access the array using an `arrayreader` interface, where `arrayreader.get(k)` returns the element of the array at index `k` (0-indexed). you may assume all integers in the array are less than `10000`, and if you access the array out of bounds, `arrayreader.get` will return `2147483647`.","input: `array` = [-1,0,3,5,9,12], `target` = 9 output: 4 explanation: 9 exists in `nums` and its index is 4 example 2: input: `array` = [-1,0,3,5,9,12], `target` = 2 output: -1 explanation: 2 does not exist in `nums` so return -1","you may assume that all elements in the array are unique. the value of each element in the array will be in the range `[-9999, 9999]`. the length of the array will be in the range `[1, 10^4]`.",
703,Kth Largest Element in a Stream,"Design a class to find the `kth` largest element in a stream. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.

Implement `KthLargest` class:
`KthLargest(int k, int[] nums)` Initializes the object with the integer `k` and the stream of integers `nums`.

`int add(int val)` Returns the element representing the `kth` largest element in the stream.


Example 1:
Input
[""KthLargest"", ""add"", ""add"", ""add"", ""add"", ""add""]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
Output
[null, 4, 5, 5, 8, 8]
Explanation
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8

Constraints:
`1 <= k <= 104`
`0 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`-104 <= val <= 104`
At most `104` calls will be made to `add`.

It is guaranteed that there will be at least `k` elements in the array when you search for the `kth` element.",Easy,https://leetcode.com/problems/kth-largest-element-in-a-stream,"Amazon,Microsoft,Box,Facebook","Heap,Design",1178,"[Kth Largest Element in an Array, /problems/kth-largest-element-in-an-array/, Medium]","design a class to find the `kth` largest element in a stream. note that it is the `kth` largest element in the sorted order, not the `kth` distinct element. implement `kthlargest` class: `kthlargest(int k, int[] nums)` initializes the object with the integer `k` and the stream of integers `nums`. `int add(int val)` returns the element representing the `kth` largest element in the stream.","input [""kthlargest"", ""add"", ""add"", ""add"", ""add"", ""add""] [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]] output [null, 4, 5, 5, 8, 8] explanation kthlargest kthlargest = new kthlargest(3, [4, 5, 8, 2]); kthlargest.add(3); // return 4 kthlargest.add(5); // return 5 kthlargest.add(10); // return 5 kthlargest.add(9); // return 8 kthlargest.add(4); // return 8",`1 <= k <= 10^4` `0 <= nums.length <= 10^4` `-10^4 <= nums[i] <= 10^4` `-10^4 <= val <= 10^4` at most `10^4` calls will be made to `add`. it is guaranteed that there will be at least `k` elements in the array when you search for the `kth` element.,
704,Binary Search,"Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.


Example 1:
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4

Example 2:
Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1

Constraints:
`1 <= nums.length <= 104`
`-9999 <= nums[i], target <= 9999`
All the integers in `nums` are unique.

`nums` is sorted in an ascending order.",Easy,https://leetcode.com/problems/binary-search,"Microsoft,Facebook,Amazon",Binary Search,1269,"[Search in a Sorted Array of Unknown Size, /problems/search-in-a-sorted-array-of-unknown-size/, Medium]","given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. if `target` exists, then return its index. otherwise, return `-1`.","input: nums = [-1,0,3,5,9,12], target = 9 output: 4 explanation: 9 exists in nums and its index is 4 example 2: input: nums = [-1,0,3,5,9,12], target = 2 output: -1 explanation: 2 does not exist in nums so return -1","`1 <= nums.length <= 10^4` `-9999 <= nums[i], target <= 9999` all the integers in `nums` are unique. `nums` is sorted in an ascending order.",
705,Design HashSet,"Design a HashSet without using any built-in hash table libraries.

Implement `MyHashSet` class:
`void add(key)` Inserts the value `key` into the HashSet.

`bool contains(key)` Returns whether the value `key` exists in the HashSet or not.

`void remove(key)` Removes the value `key` in the HashSet. If `key` does not exist in the HashSet, do nothing.


Example 1:
Input
[""MyHashSet"", ""add"", ""add"", ""contains"", ""contains"", ""add"", ""contains"", ""remove"", ""contains""]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]
Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)

Constraints:
`0 <= key <= 106`
At most `104` calls will be made to `add`, `remove`, and `contains`.

Follow up: Could you solve the problem without using the built-in HashSet library?",Easy,https://leetcode.com/problems/design-hashset,"Google,Adobe","Hash Table,Design",699,"[Design HashMap, /problems/design-hashmap/, Easy], [Design Skiplist, /problems/design-skiplist/, Hard]","design a hashset without using any built-in hash table libraries. implement `myhashset` class: `void add(key)` inserts the value `key` into the hashset. `bool contains(key)` returns whether the value `key` exists in the hashset or not. `void remove(key)` removes the value `key` in the hashset. if `key` does not exist in the hashset, do nothing.","input [""myhashset"", ""add"", ""add"", ""contains"", ""contains"", ""add"", ""contains"", ""remove"", ""contains""] [[], [1], [2], [1], [3], [2], [2], [2], [2]] output [null, null, null, true, false, null, true, null, false] explanation myhashset myhashset = new myhashset(); myhashset.add(1); // set = [1] myhashset.add(2); // set = [1, 2] myhashset.contains(1); // return true myhashset.contains(3); // return false, (not found) myhashset.add(2); // set = [1, 2] myhashset.contains(2); // return true myhashset.remove(2); // set = [1] myhashset.contains(2); // return false, (already removed)","`0 <= key <= 10^6` at most `10^4` calls will be made to `add`, `remove`, and `contains`.",could you solve the problem without using the built-in hashset library?
706,Design HashMap,"Design a HashMap without using any built-in hash table libraries.

Implement the `MyHashMap` class:
`MyHashMap()` initializes the object with an empty map.

`void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`.

`int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.

`void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.


Example 1:
Input
[""MyHashMap"", ""put"", ""put"", ""get"", ""get"", ""put"", ""get"", ""remove"", ""get""]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]
Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]

Constraints:
`0 <= key, value <= 106`
At most `104` calls will be made to `put`, `get`, and `remove`.

Follow up: Please do not use the built-in HashMap library.",Easy,https://leetcode.com/problems/design-hashmap,"Goldman Sachs,Amazon,Microsoft,Apple,LinkedIn,Oracle,Google,ServiceNow,Uber,VMware,ByteDance,eBay","Hash Table,Design",1520,"[Design HashSet, /problems/design-hashset/, Easy], [Design Skiplist, /problems/design-skiplist/, Hard]","design a hashmap without using any built-in hash table libraries. implement the `myhashmap` class: `myhashmap()` initializes the object with an empty map. `void put(int key, int value)` inserts a `(key, value)` pair into the hashmap. if the `key` already exists in the map, update the corresponding `value`. `int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`. `void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.","input [""myhashmap"", ""put"", ""put"", ""get"", ""get"", ""put"", ""get"", ""remove"", ""get""] [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]] output [null, null, null, 1, -1, null, 1, null, -1] explanation myhashmap myhashmap = new myhashmap(); myhashmap.put(1, 1); // the map is now [[1,1]] myhashmap.put(2, 2); // the map is now [[1,1], [2,2]] myhashmap.get(1); // return 1, the map is now [[1,1], [2,2]] myhashmap.get(3); // return -1 (i.e., not found), the map is now [[1,1], [2,2]] myhashmap.put(2, 1); // the map is now [[1,1], [2,1]] (i.e., update the existing value) myhashmap.get(2); // return 1, the map is now [[1,1], [2,1]] myhashmap.remove(2); // remove the mapping for 2, the map is now [[1,1]] myhashmap.get(2); // return -1 (i.e., not found), the map is now [[1,1]]","`0 <= key, value <= 10^6` at most `10^4` calls will be made to `put`, `get`, and `remove`.",please do not use the built-in hashmap library.
707,Design Linked List,"Design your implementation of the linked list. You can choose to use a singly or doubly linked list.

A node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node.

If you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.

Implement the `MyLinkedList` class:
`MyLinkedList()` Initializes the `MyLinkedList` object.

`int get(int index)` Get the value of the `indexth` node in the linked list. If the index is invalid, return `-1`.

`void addAtHead(int val)` Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.

`void addAtTail(int val)` Append a node of value `val` as the last element of the linked list.

`void addAtIndex(int index, int val)` Add a node of value `val` before the `indexth` node in the linked list. If `index` equals the length of the linked list, the node will be appended to the end of the linked list. If `index` is greater than the length, the node will not be inserted.

`void deleteAtIndex(int index)` Delete the `indexth` node in the linked list, if the index is valid.


Example 1:
Input
[""MyLinkedList"", ""addAtHead"", ""addAtTail"", ""addAtIndex"", ""get"", ""deleteAtIndex"", ""get""]
[[], [1], [3], [1, 2], [1], [1], [1]]
Output
[null, null, null, null, 2, null, 3]
Explanation
MyLinkedList myLinkedList = new MyLinkedList();
myLinkedList.addAtHead(1);
myLinkedList.addAtTail(3);
myLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3
myLinkedList.get(1);              // return 2
myLinkedList.deleteAtIndex(1);    // now the linked list is 1->3
myLinkedList.get(1);              // return 3

Constraints:
`0 <= index, val <= 1000`
Please do not use the built-in LinkedList library.

At most `2000` calls will be made to `get`, `addAtHead`, `addAtTail`, `addAtIndex` and `deleteAtIndex`.",Medium,https://leetcode.com/problems/design-linked-list,"Microsoft,Amazon","Linked List,Design",821,"[Design Skiplist, /problems/design-skiplist/, Hard]","design your implementation of the linked list. you can choose to use a singly or doubly linked list. a node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node. if you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. assume all nodes in the linked list are 0-indexed. implement the `mylinkedlist` class: `mylinkedlist()` initializes the `mylinkedlist` object. `int get(int index)` get the value of the `indexth` node in the linked list. if the index is invalid, return `-1`. `void addathead(int val)` add a node of value `val` before the first element of the linked list. after the insertion, the new node will be the first node of the linked list. `void addattail(int val)` append a node of value `val` as the last element of the linked list. `void addatindex(int index, int val)` add a node of value `val` before the `indexth` node in the linked list. if `index` equals the length of the linked list, the node will be appended to the end of the linked list. if `index` is greater than the length, the node will not be inserted. `void deleteatindex(int index)` delete the `indexth` node in the linked list, if the index is valid.","input [""mylinkedlist"", ""addathead"", ""addattail"", ""addatindex"", ""get"", ""deleteatindex"", ""get""] [[], [1], [3], [1, 2], [1], [1], [1]] output [null, null, null, null, 2, null, 3] explanation mylinkedlist mylinkedlist = new mylinkedlist(); mylinkedlist.addathead(1); mylinkedlist.addattail(3); mylinkedlist.addatindex(1, 2); // linked list becomes 1->2->3 mylinkedlist.get(1); // return 2 mylinkedlist.deleteatindex(1); // now the linked list is 1->3 mylinkedlist.get(1); // return 3","`0 <= index, val <= 1000` please do not use the built-in linkedlist library. at most `2000` calls will be made to `get`, `addathead`, `addattail`, `addatindex` and `deleteatindex`.",
708,Insert into a Sorted Circular Linked List,"Given a node from a Circular Linked List which is sorted in ascending order, write a function to insert a value `insertVal` into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list.

If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.

If the list is empty (i.e., given node is `null`), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the original given node.


Example 1:
Input: head = [3,4,1], insertVal = 2
Output: [3,4,1,2]
Explanation: In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.


Example 2:
Input: head = [], insertVal = 1
Output: [1]
Explanation: The list is empty (given head is `null`). We create a new single circular list and return the reference to that single node.


Example 3:
Input: head = [1], insertVal = 0
Output: [1,0]

Constraints:
`0 <= Number of Nodes <= 5 * 10^4`
`-10^6 <= Node.val <= 10^6`
`-10^6 <= insertVal <= 10^6`",Medium,https://leetcode.com/problems/insert-into-a-sorted-circular-linked-list,"Facebook,Amazon,Microsoft",Linked List,513,"[Insertion Sort List, /problems/insertion-sort-list/, Medium]","given a node from a circular linked list which is sorted in ascending order, write a function to insert a value `insertval` into the list such that it remains a sorted circular list. the given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list. if there are multiple suitable places for insertion, you may choose any place to insert the new value. after the insertion, the circular list should remain sorted. if the list is empty (i.e., given node is `null`), you should create a new single circular list and return the reference to that single node. otherwise, you should return the original given node.","input: head = [3,4,1], insertval = 2 output: [3,4,1,2] explanation: in the figure above, there is a sorted circular list of three elements. you are given a reference to the node with value 3, and we need to insert 2 into the list. the new node should be inserted between node 1 and node 3. after the insertion, the list should look like this, and we should still return node 3. example 2: input: head = [], insertval = 1 output: [1] explanation: the list is empty (given head is `null`). we create a new single circular list and return the reference to that single node. example 3: input: head = [1], insertval = 0 output: [1,0]",`0 <= number of nodes <= 5 * 10^4` `-10^6 <= node.val <= 10^6` `-10^6 <= insertval <= 10^6`,
709,To Lower Case,"Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.


Example 1:
Input: ""Hello""
Output: ""hello""

Example 2:
Input: ""here""
Output: ""here""

Example 3:
Input: ""LOVELY""
Output: ""lovely""",Easy,https://leetcode.com/problems/to-lower-case,"Google,Adobe,Apple",String,661,,"implement function tolowercase() that has a string parameter str, and returns the same string in lowercase.","input: ""hello"" output: ""hello"" example 2: input: ""here"" output: ""here"" example 3: input: ""lovely"" output: ""lovely""",,
710,Random Pick with Blacklist,"Given a blacklist `B` containing unique integers from `[0, N)`, write a function to return a uniform random integer from `[0, N)` which is NOT in `B`.

Optimize it such that it minimizes the call to system’s `Math.random()`.

Note:
`1 <= N <= 1000000000`
`0 <= B.length < min(100000, N)`
`[0, N)` does NOT include N. See interval notation.


Example 1:
Input: 
[""Solution"",""pick"",""pick"",""pick""]
[[1,[]],[],[],[]]
Output: [null,0,0,0]

Example 2:
Input: 
[""Solution"",""pick"",""pick"",""pick""]
[[2,[]],[],[],[]]
Output: [null,1,1,1]

Example 3:
Input: 
[""Solution"",""pick"",""pick"",""pick""]
[[3,[1]],[],[],[]]
Output: [null,0,0,2]

Example 4:
Input: 
[""Solution"",""pick"",""pick"",""pick""]
[[4,[2]],[],[],[]]
Output: [null,1,3,1]
Explanation of Input Syntax:
The input is two lists: the subroutines called and their arguments. `Solution`'s constructor has two arguments, `N` and the blacklist `B`. `pick` has no arguments. Arguments are always wrapped with a list, even if there aren't any.",Hard,https://leetcode.com/problems/random-pick-with-blacklist,Two Sigma,"Hash Table,Binary Search,Sort,Random",420,"[Random Pick Index, /problems/random-pick-index/, Medium], [Random Pick with Weight, /problems/random-pick-with-weight/, Medium]","given a blacklist `b` containing unique integers from `[0, n)`, write a function to return a uniform random integer from `[0, n)` which is not in `b`. optimize it such that it minimizes the call to system’s `math.random()`. note: `1 <= n <= 1000000000` `0 <= b.length < min(100000, n)` `[0, n)` does not include n. see interval notation.","input: [""solution"",""pick"",""pick"",""pick""] [[1,[]],[],[],[]] output: [null,0,0,0] example 2: input: [""solution"",""pick"",""pick"",""pick""] [[2,[]],[],[],[]] output: [null,1,1,1] example 3: input: [""solution"",""pick"",""pick"",""pick""] [[3,[1]],[],[],[]] output: [null,0,0,2] example 4: input: [""solution"",""pick"",""pick"",""pick""] [[4,[2]],[],[],[]] output: [null,1,3,1] explanation of input syntax: the input is two lists: the subroutines called and their arguments. `solution`'s constructor has two arguments, `n` and the blacklist `b`. `pick` has no arguments. arguments are always wrapped with a list, even if there aren't any.",,
711,Number of Distinct Islands II,"Given a non-empty 2D array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.

Count the number of distinct islands.  An island is considered to be the same as another if they have the same shape, or have the same shape after rotation (90, 180, or 270 degrees only) or reflection (left/right direction or up/down direction).


Example 1:
11000
10000
00001
00011
Given the above grid map, return `1`.

Notice that:
11
1
and
 1
11
are considered same island shapes. Because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes.


Example 2:
11100
10001
01001
01110
Given the above grid map, return `2`.

Here are the two distinct islands:
111
1
and
1
1
Notice that:
111
1
and
1
111
are considered same island shapes. Because if we flip the first array in the up/down direction, then they have the same shapes.

Note:
The length of each dimension in the given `grid` does not exceed 50.",Hard,https://leetcode.com/problems/number-of-distinct-islands-ii,Amazon,"Hash Table,Depth-first Search",177,"[Number of Distinct Islands, /problems/number-of-distinct-islands/, Medium]","given a non-empty 2d array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.) you may assume all four edges of the grid are surrounded by water. count the number of distinct islands. an island is considered to be the same as another if they have the same shape, or have the same shape after rotation (90, 180, or 270 degrees only) or reflection (left/right direction or up/down direction).","11000 10000 00001 00011 given the above grid map, return `1`. notice that: 11 1 and 1 11 are considered same island shapes. because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes. example 2: 11100 10001 01001 01110 given the above grid map, return `2`. here are the two distinct islands: 111 1 and 1 1 notice that: 111 1 and 1 111 are considered same island shapes. because if we flip the first array in the up/down direction, then they have the same shapes. note: the length of each dimension in the given `grid` does not exceed 50.",,
712,Minimum ASCII Delete Sum for Two Strings,"Given two strings `s1, s2`, find the lowest ASCII sum of deleted characters to make two strings equal.


Example 1:
Input: s1 = ""sea"", s2 = ""eat""
Output: 231
Explanation: Deleting ""s"" from ""sea"" adds the ASCII value of ""s"" (115) to the sum.

Deleting ""t"" from ""eat"" adds 116 to the sum.

At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.


Example 2:
Input: s1 = ""delete"", s2 = ""leet""
Output: 403
Explanation: Deleting ""dee"" from ""delete"" to turn the string into ""let"",
adds 100[d]+101[e]+101[e] to the sum.  Deleting ""e"" from ""leet"" adds 101[e] to the sum.

At the end, both strings are equal to ""let"", and the answer is 100+101+101+101 = 403.

If instead we turned both strings into ""lee"" or ""eet"", we would get answers of 433 or 417, which are higher.

Note:
`0 < s1.length, s2.length <= 1000`.

All elements of each string will have an ASCII value in `[97, 122]`.",Medium,https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings,TripleByte,Dynamic Programming,1287,"[Edit Distance, /problems/edit-distance/, Hard], [Longest Increasing Subsequence, /problems/longest-increasing-subsequence/, Medium], [Delete Operation for Two Strings, /problems/delete-operation-for-two-strings/, Medium]","given two strings `s1, s2`, find the lowest ascii sum of deleted characters to make two strings equal.","input: s1 = ""sea"", s2 = ""eat"" output: 231 explanation: deleting ""s"" from ""sea"" adds the ascii value of ""s"" (115) to the sum. deleting ""t"" from ""eat"" adds 116 to the sum. at the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this. example 2: input: s1 = ""delete"", s2 = ""leet"" output: 403 explanation: deleting ""dee"" from ""delete"" to turn the string into ""let"", adds 100[d]+101[e]+101[e] to the sum. deleting ""e"" from ""leet"" adds 101[e] to the sum. at the end, both strings are equal to ""let"", and the answer is 100+101+101+101 = 403. if instead we turned both strings into ""lee"" or ""eet"", we would get answers of 433 or 417, which are higher. note: `0 < s1.length, s2.length <= 1000`. all elements of each string will have an ascii value in `[97, 122]`.",,
713,Subarray Product Less Than K,"Your are given an array of positive integers `nums`.

Count and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than `k`.


Example 1:
Input: nums = [10, 5, 2, 6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].

Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.

Note:
`0 < nums.length <= 50000`.

`0 < nums[i] < 1000`.

`0 <= k < 10^6`.",Medium,https://leetcode.com/problems/subarray-product-less-than-k,"Bloomberg,LinkedIn","Array,Two Pointers",2251,"[Maximum Product Subarray, /problems/maximum-product-subarray/, Medium], [Maximum Size Subarray Sum Equals k, /problems/maximum-size-subarray-sum-equals-k/, Medium], [Subarray Sum Equals K, /problems/subarray-sum-equals-k/, Medium], [Two Sum Less Than K, /problems/two-sum-less-than-k/, Easy]",your are given an array of positive integers `nums`. count and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than `k`.,"input: nums = [10, 5, 2, 6], k = 100 output: 8 explanation: the 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6]. note that [10, 5, 2] is not included as the product of 100 is not strictly less than k. note: `0 < nums.length <= 50000`. `0 < nums[i] < 1000`. `0 <= k < 10^6`.",,
714,Best Time to Buy and Sell Stock with Transaction Fee,"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `fee` representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:
Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.


Example 2:
Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6

Constraints:
`1 <= prices.length <= 5 * 104`
`1 <= prices[i] < 5 * 104`
`0 <= fee < 5 * 104`",Medium,https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee,Amazon,"Array,Dynamic Programming,Greedy",2465,"[Best Time to Buy and Sell Stock II, /problems/best-time-to-buy-and-sell-stock-ii/, Easy]","you are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `fee` representing a transaction fee. find the maximum profit you can achieve. you may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. note: you may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).","input: prices = [1,3,2,8,4,9], fee = 2 output: 8 explanation: the maximum profit can be achieved by: - buying at prices[0] = 1 - selling at prices[3] = 8 - buying at prices[4] = 4 - selling at prices[5] = 9 the total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8. example 2: input: prices = [1,3,7,5,10,3], fee = 3 output: 6",`1 <= prices.length <= 5 * 10^4` `1 <= prices[i] < 5 * 10^4` `0 <= fee < 5 * 10^4`,
715,Range Module,"A Range Module is a module that tracks ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.

`addRange(int left, int right)` Adds the half-open interval `[left, right)`, tracking every real number in that interval.  Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval `[left, right)` that are not already tracked.

`queryRange(int left, int right)` Returns true if and only if every real number in the interval `[left, right)`
 is currently being tracked.

`removeRange(int left, int right)` Stops tracking every real number currently being tracked in the interval `[left, right)`.


Example 1:
addRange(10, 20): null
removeRange(14, 16): null
queryRange(10, 14): true (Every number in [10, 14) is being tracked)
queryRange(13, 15): false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)
queryRange(16, 17): true (The number 16 in [16, 17) is still being tracked, despite the remove operation)
Note:
A half open interval `[left, right)` denotes all real numbers `left <= x < right`.

`0 < left < right < 10^9` in all calls to `addRange, queryRange, removeRange`.

The total number of calls to `addRange` in a single test case is at most `1000`.

The total number of calls to `queryRange` in a single test case is at most `5000`.

The total number of calls to `removeRange` in a single test case is at most `1000`.",Hard,https://leetcode.com/problems/range-module,"Google,Amazon","Segment Tree,Ordered Map",627,"[Merge Intervals, /problems/merge-intervals/, Medium], [Insert Interval, /problems/insert-interval/, Medium], [Data Stream as Disjoint Intervals, /problems/data-stream-as-disjoint-intervals/, Hard]","a range module is a module that tracks ranges of numbers. your task is to design and implement the following interfaces in an efficient manner. `addrange(int left, int right)` adds the half-open interval `[left, right)`, tracking every real number in that interval. adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval `[left, right)` that are not already tracked. `queryrange(int left, int right)` returns true if and only if every real number in the interval `[left, right)` is currently being tracked. `removerange(int left, int right)` stops tracking every real number currently being tracked in the interval `[left, right)`.","addrange(10, 20): null removerange(14, 16): null queryrange(10, 14): true (every number in [10, 14) is being tracked) queryrange(13, 15): false (numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked) queryrange(16, 17): true (the number 16 in [16, 17) is still being tracked, despite the remove operation) note: a half open interval `[left, right)` denotes all real numbers `left <= x < right`. `0 < left < right < 10^9` in all calls to `addrange, queryrange, removerange`. the total number of calls to `addrange` in a single test case is at most `1000`. the total number of calls to `queryrange` in a single test case is at most `5000`. the total number of calls to `removerange` in a single test case is at most `1000`.",,
716,Max Stack,"Design a max stack data structure that supports the stack operations and supports finding the stack's maximum element.

Implement the `MaxStack` class:
`MaxStack()` Initializes the stack object.

`void push(int x)` Pushes element `x` onto the stack.

`int pop()` Removes the element on top of the stack and returns it.

`int top()` Gets the element on the top of the stack without removing it.

`int peekMax()` Retrieves the maximum element in the stack without removing it.

`int popMax()` Retrieves the maximum element in the stack and removes it. If there is more than one maximum element, only remove the top-most one.


Example 1:
Input
[""MaxStack"", ""push"", ""push"", ""push"", ""top"", ""popMax"", ""top"", ""peekMax"", ""pop"", ""top""]
[[], [5], [1], [5], [], [], [], [], [], []]
Output
[null, null, null, null, 5, 5, 1, 5, 1, 5]
Explanation
MaxStack stk = new MaxStack();
stk.push(5);   // [5] the top of the stack and the maximum number is 5.

stk.push(1);   // [5, 1] the top of the stack is 1, but the maximum is 5.

stk.push(5);   // [5, 1, 5] the top of the stack is 5, which is also the maximum, because it is the top most one.

stk.top();     // return 5, [5, 1, 5] the stack did not change.

stk.popMax();  // return 5, [5, 1] the stack is changed now, and the top is different from the max.

stk.top();     // return 1, [5, 1] the stack did not change.

stk.peekMax(); // return 5, [5, 1] the stack did not change.

stk.pop();     // return 1, [5] the top of the stack and the max element is now 5.

stk.top();     // return 5, [5] the stack did not change.


Constraints:
`-107 <= x <= 107`
At most `104` calls will be made to `push`, `pop`, `top`, `peekMax`, and `popMax`.

There will be at least one element in the stack when `pop`, `top`, `peekMax`, or `popMax` is called.

Follow up: Could you come up with a solution that supports `O(1)` for each `top` call and `O(logn)` for each other call?",Easy,https://leetcode.com/problems/max-stack,"Lyft,LinkedIn,Amazon,Microsoft,Facebook,Pure Storage,Twitter",Design,942,"[Min Stack, /problems/min-stack/, Easy]","design a max stack data structure that supports the stack operations and supports finding the stack's maximum element. implement the `maxstack` class: `maxstack()` initializes the stack object. `void push(int x)` pushes element `x` onto the stack. `int pop()` removes the element on top of the stack and returns it. `int top()` gets the element on the top of the stack without removing it. `int peekmax()` retrieves the maximum element in the stack without removing it. `int popmax()` retrieves the maximum element in the stack and removes it. if there is more than one maximum element, only remove the top-most one.","input [""maxstack"", ""push"", ""push"", ""push"", ""top"", ""popmax"", ""top"", ""peekmax"", ""pop"", ""top""] [[], [5], [1], [5], [], [], [], [], [], []] output [null, null, null, null, 5, 5, 1, 5, 1, 5] explanation maxstack stk = new maxstack(); stk.push(5); // [5] the top of the stack and the maximum number is 5. stk.push(1); // [5, 1] the top of the stack is 1, but the maximum is 5. stk.push(5); // [5, 1, 5] the top of the stack is 5, which is also the maximum, because it is the top most one. stk.top(); // return 5, [5, 1, 5] the stack did not change. stk.popmax(); // return 5, [5, 1] the stack is changed now, and the top is different from the max. stk.top(); // return 1, [5, 1] the stack did not change. stk.peekmax(); // return 5, [5, 1] the stack did not change. stk.pop(); // return 1, [5] the top of the stack and the max element is now 5. stk.top(); // return 5, [5] the stack did not change.","`-10^7 <= x <= 10^7` at most `10^4` calls will be made to `push`, `pop`, `top`, `peekmax`, and `popmax`. there will be at least one element in the stack when `pop`, `top`, `peekmax`, or `popmax` is called.",could you come up with a solution that supports `o(1)` for each `top` call and `o(logn)` for each other call?
717,1-bit and 2-bit Characters,"We have two special characters. The first character can be represented by one bit `0`. The second character can be represented by two bits (`10` or `11`).  
Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.


Example 1:
Input: 
bits = [1, 0, 0]
Output: True
Explanation: 
The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.


Example 2:
Input: 
bits = [1, 1, 1, 0]
Output: False
Explanation: 
The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.

Note:
`1 <= len(bits) <= 1000`.

`bits[i]` is always `0` or `1`.",Easy,https://leetcode.com/problems/1-bit-and-2-bit-characters,Amazon,Array,554,"[Gray Code, /problems/gray-code/, Medium]",we have two special characters. the first character can be represented by one bit `0`. the second character can be represented by two bits (`10` or `11`). now given a string represented by several bits. return whether the last character must be a one-bit character or not. the given string will always end with a zero.,"input: bits = [1, 0, 0] output: true explanation: the only way to decode it is two-bit character and one-bit character. so the last character is one-bit character. example 2: input: bits = [1, 1, 1, 0] output: false explanation: the only way to decode it is two-bit character and two-bit character. so the last character is not one-bit character. note: `1 <= len(bits) <= 1000`. `bits[i]` is always `0` or `1`.",,
718,Maximum Length of Repeated Subarray,"Given two integer arrays `A` and `B`, return the maximum length of an subarray that appears in both arrays.


Example 1:
Input:
A: [1,2,3,2,1]
B: [3,2,1,4,7]
Output: 3
Explanation: 
The repeated subarray with maximum length is [3, 2, 1].

Note:
1 <= len(A), len(B) <= 1000
0 <= A[i], B[i] < 100",Medium,https://leetcode.com/problems/maximum-length-of-repeated-subarray,"Karat,Indeed,Intuit,Apple,Google,Amazon","Array,Hash Table,Binary Search,Dynamic Programming",1939,"[Minimum Size Subarray Sum, /problems/minimum-size-subarray-sum/, Medium]","given two integer arrays `a` and `b`, return the maximum length of an subarray that appears in both arrays.","input: a: [1,2,3,2,1] b: [3,2,1,4,7] output: 3 explanation: the repeated subarray with maximum length is [3, 2, 1]. note: 1 <= len(a), len(b) <= 1000 0 <= a[i], b[i] < 100",,
719,Find K-th Smallest Pair Distance,"Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B. 

Example 1:
Input:
nums = [1,3,1]
k = 1
Output: 0 
Explanation:
Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.

Note:
`2 <= len(nums) <= 10000`.

`0 <= nums[i] < 1000000`.

`1 <= k <= len(nums) * (len(nums) - 1) / 2`.",Hard,https://leetcode.com/problems/find-k-th-smallest-pair-distance,"Google,Amazon","Array,Binary Search,Heap",1304,"[Find K Pairs with Smallest Sums, /problems/find-k-pairs-with-smallest-sums/, Medium], [Kth Smallest Element in a Sorted Matrix, /problems/kth-smallest-element-in-a-sorted-matrix/, Medium], [Find K Closest Elements, /problems/find-k-closest-elements/, Medium], [Kth Smallest Number in Multiplication Table, /problems/kth-smallest-number-in-multiplication-table/, Hard], [K-th Smallest Prime Fraction, /problems/k-th-smallest-prime-fraction/, Hard]","given an integer array, return the k-th smallest distance among all the pairs. the distance of a pair (a, b) is defined as the absolute difference between a and b.","input: nums = [1,3,1] k = 1 output: 0 explanation: here are all the pairs: (1,3) -> 2 (1,1) -> 0 (3,1) -> 2 then the 1st smallest distance pair is (1,1), and its distance is 0. note: `2 <= len(nums) <= 10000`. `0 <= nums[i] < 1000000`. `1 <= k <= len(nums) * (len(nums) - 1) / 2`.",,
720,Longest Word in Dictionary,"Given an array of strings `words` representing an English Dictionary, return the longest word in `words` that can be built one character at a time by other words in `words`.

If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.


Example 1:
Input: words = [""w"",""wo"",""wor"",""worl"",""world""]
Output: ""world""
Explanation: The word ""world"" can be built one character at a time by ""w"", ""wo"", ""wor"", and ""worl"".


Example 2:
Input: words = [""a"",""banana"",""app"",""appl"",""ap"",""apply"",""apple""]
Output: ""apple""
Explanation: Both ""apply"" and ""apple"" can be built from other words in the dictionary. However, ""apple"" is lexicographically smaller than ""apply"".


Constraints:
`1 <= words.length <= 1000`
`1 <= words[i].length <= 30`
`words[i]` consists of lowercase English letters.",Easy,https://leetcode.com/problems/longest-word-in-dictionary,"Goldman Sachs,Facebook","Hash Table,Trie",862,"[Longest Word in Dictionary through Deleting, /problems/longest-word-in-dictionary-through-deleting/, Medium], [Implement Magic Dictionary, /problems/implement-magic-dictionary/, Medium]","given an array of strings `words` representing an english dictionary, return the longest word in `words` that can be built one character at a time by other words in `words`. if there is more than one possible answer, return the longest word with the smallest lexicographical order. if there is no answer, return the empty string.","input: words = [""w"",""wo"",""wor"",""worl"",""world""] output: ""world"" explanation: the word ""world"" can be built one character at a time by ""w"", ""wo"", ""wor"", and ""worl"". example 2: input: words = [""a"",""banana"",""app"",""appl"",""ap"",""apply"",""apple""] output: ""apple"" explanation: both ""apply"" and ""apple"" can be built from other words in the dictionary. however, ""apple"" is lexicographically smaller than ""apply"".",`1 <= words.length <= 1000` `1 <= words[i].length <= 30` `words[i]` consists of lowercase english letters.,
721,Accounts Merge,"Given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are emails representing emails of the account.

Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.

After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.


Example 1:
Input: accounts = [[""John"",""johnsmith@mail.com"",""john_newyork@mail.com""],[""John"",""johnsmith@mail.com"",""john00@mail.com""],[""Mary"",""mary@mail.com""],[""John"",""johnnybravo@mail.com""]]
Output: [[""John"",""john00@mail.com"",""john_newyork@mail.com"",""johnsmith@mail.com""],[""Mary"",""mary@mail.com""],[""John"",""johnnybravo@mail.com""]]
Explanation:
The first and third John's are the same person as they have the common email ""johnsmith@mail.com"".

The second John and Mary are different people as none of their email addresses are used by other accounts.

We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], 
['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.


Example 2:
Input: accounts = [[""Gabe"",""Gabe0@m.co"",""Gabe3@m.co"",""Gabe1@m.co""],[""Kevin"",""Kevin3@m.co"",""Kevin5@m.co"",""Kevin0@m.co""],[""Ethan"",""Ethan5@m.co"",""Ethan4@m.co"",""Ethan0@m.co""],[""Hanzo"",""Hanzo3@m.co"",""Hanzo1@m.co"",""Hanzo0@m.co""],[""Fern"",""Fern5@m.co"",""Fern1@m.co"",""Fern0@m.co""]]
Output: [[""Ethan"",""Ethan0@m.co"",""Ethan4@m.co"",""Ethan5@m.co""],[""Gabe"",""Gabe0@m.co"",""Gabe1@m.co"",""Gabe3@m.co""],[""Hanzo"",""Hanzo0@m.co"",""Hanzo1@m.co"",""Hanzo3@m.co""],[""Kevin"",""Kevin0@m.co"",""Kevin3@m.co"",""Kevin5@m.co""],[""Fern"",""Fern0@m.co"",""Fern1@m.co"",""Fern5@m.co""]]

Constraints:
`1 <= accounts.length <= 1000`
`2 <= accounts[i].length <= 10`
`1 <= accounts[i][j] <= 30`
`accounts[i][0]` consists of English letters.

`accounts[i][j] (for j > 0)` is a valid email.",Medium,https://leetcode.com/problems/accounts-merge,"Facebook,Google,Amazon,Microsoft,Twitter,LinkedIn","Depth-first Search,Union Find",2301,"[Redundant Connection, /problems/redundant-connection/, Medium], [Sentence Similarity, /problems/sentence-similarity/, Easy], [Sentence Similarity II, /problems/sentence-similarity-ii/, Medium]","given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are emails representing emails of the account. now, we would like to merge these accounts. two accounts definitely belong to the same person if there is some common email to both accounts. note that even if two accounts have the same name, they may belong to different people as people could have the same name. a person can have any number of accounts initially, but all of their accounts definitely have the same name. after merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. the accounts themselves can be returned in any order.","input: accounts = [[""john"",""johnsmith@mail.com"",""john_newyork@mail.com""],[""john"",""johnsmith@mail.com"",""john00@mail.com""],[""mary"",""mary@mail.com""],[""john"",""johnnybravo@mail.com""]] output: [[""john"",""john00@mail.com"",""john_newyork@mail.com"",""johnsmith@mail.com""],[""mary"",""mary@mail.com""],[""john"",""johnnybravo@mail.com""]] explanation: the first and third john's are the same person as they have the common email ""johnsmith@mail.com"". the second john and mary are different people as none of their email addresses are used by other accounts. we could return these lists in any order, for example the answer [['mary', 'mary@mail.com'], ['john', 'johnnybravo@mail.com'], ['john', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted. example 2: input: accounts = [[""gabe"",""gabe0@m.co"",""gabe3@m.co"",""gabe1@m.co""],[""kevin"",""kevin3@m.co"",""kevin5@m.co"",""kevin0@m.co""],[""ethan"",""ethan5@m.co"",""ethan4@m.co"",""ethan0@m.co""],[""hanzo"",""hanzo3@m.co"",""hanzo1@m.co"",""hanzo0@m.co""],[""fern"",""fern5@m.co"",""fern1@m.co"",""fern0@m.co""]] output: [[""ethan"",""ethan0@m.co"",""ethan4@m.co"",""ethan5@m.co""],[""gabe"",""gabe0@m.co"",""gabe1@m.co"",""gabe3@m.co""],[""hanzo"",""hanzo0@m.co"",""hanzo1@m.co"",""hanzo3@m.co""],[""kevin"",""kevin0@m.co"",""kevin3@m.co"",""kevin5@m.co""],[""fern"",""fern0@m.co"",""fern1@m.co"",""fern5@m.co""]]",`1 <= accounts.length <= 1000` `2 <= accounts[i].length <= 10` `1 <= accounts[i][j] <= 30` `accounts[i][0]` consists of english letters. `accounts[i][j] (for j > 0)` is a valid email.,
722,Remove Comments,"Given a C++ program, remove comments from it. The program `source` is an array where `source[i]` is the `i`-th line of the source code.  This represents the result of splitting the original source code string by the newline character `\n`.

In C++, there are two types of comments, line comments, and block comments.

The string `//` denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.

The string `/*` denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of `*/` should be ignored.  (Here, occurrences happen in reading order: line by line from left to right.)  To be clear, the string `/*/` does not yet end the block comment, as the ending would be overlapping the beginning.

The first effective comment takes precedence over others: if the string `//` occurs in a block comment, it is ignored. Similarly, if the string `/*` occurs in a line or block comment, it is also ignored.

If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.

There will be no control characters, single quote, or double quote characters.  For example, `source = ""string s = ""/* Not a comment. */"";""` will not be a test case.  (Also, nothing else such as defines or macros will interfere with the comments.)
It is guaranteed that every open block comment will eventually be closed, so `/*` outside of a line or block comment always starts a new comment.

Finally, implicit newline characters can be deleted by block comments.  Please see the examples below for details.

After removing the comments from the source code, return the source code in the same format.


Example 1:
Input: 
source = [""/*Test program */"", ""int main()"", ""{ "", ""  // variable declaration "", ""int a, b, c;"", ""/* This is a test"", ""   multiline  "", ""   comment for "", ""   testing */"", ""a = b + c;"", ""}""]
The line by line code is visualized as below:
/*Test program */
int main()
{ 
  // variable declaration 
int a, b, c;
/* This is a test
   multiline  
   comment for 
   testing */
a = b + c;
}
Output: [""int main()"",""{ "",""  "",""int a, b, c;"",""a = b + c;"",""}""]
The line by line code is visualized as below:
int main()
{ 
  
int a, b, c;
a = b + c;
}
Explanation: 
The string `/*` denotes a block comment, including line 1 and lines 6-9. The string `//` denotes line 4 as comments.


Example 2:
Input: 
source = [""a/*comment"", ""line"", ""more_comment*/b""]
Output: [""ab""]
Explanation: The original source string is ""a/*comment\nline\nmore_comment*/b"", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string ""ab"", which when delimited by newline characters becomes [""ab""].

Note:
The length of `source` is in the range `[1, 100]`.

The length of `source[i]` is in the range `[0, 80]`.

Every open block comment is eventually closed.

There are no single-quote, double-quote, or control characters in the source code.",Medium,https://leetcode.com/problems/remove-comments,"Microsoft,Google,Databricks",String,456,"[Mini Parser, /problems/mini-parser/, Medium], [Ternary Expression Parser, /problems/ternary-expression-parser/, Medium]","given a c++ program, remove comments from it. the program `source` is an array where `source[i]` is the `i`-th line of the source code. this represents the result of splitting the original source code string by the newline character `\n`. in c++, there are two types of comments, line comments, and block comments. the string `//` denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored. the string `/*` denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of `*/` should be ignored. (here, occurrences happen in reading order: line by line from left to right.) to be clear, the string `/*/` does not yet end the block comment, as the ending would be overlapping the beginning. the first effective comment takes precedence over others: if the string `//` occurs in a block comment, it is ignored. similarly, if the string `/*` occurs in a line or block comment, it is also ignored. if a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty. there will be no control characters, single quote, or double quote characters. for example, `source = ""string s = ""/* not a comment. */"";""` will not be a test case. (also, nothing else such as defines or macros will interfere with the comments.) it is guaranteed that every open block comment will eventually be closed, so `/*` outside of a line or block comment always starts a new comment. finally, implicit newline characters can be deleted by block comments. please see the examples below for details. after removing the comments from the source code, return the source code in the same format.","input: source = [""/*test program */"", ""int main()"", ""{ "", "" // variable declaration "", ""int a, b, c;"", ""/* this is a test"", "" multiline "", "" comment for "", "" testing */"", ""a = b + c;"", ""}""] the line by line code is visualized as below: /*test program */ int main() { // variable declaration int a, b, c; /* this is a test multiline comment for testing */ a = b + c; } output: [""int main()"",""{ "","" "",""int a, b, c;"",""a = b + c;"",""}""] the line by line code is visualized as below: int main() { int a, b, c; a = b + c; } explanation: the string `/*` denotes a block comment, including line 1 and lines 6-9. the string `//` denotes line 4 as comments. example 2: input: source = [""a/*comment"", ""line"", ""more_comment*/b""] output: [""ab""] explanation: the original source string is ""a/*comment\nline\nmore_comment*/b"", where we have bolded the newline characters. after deletion, the implicit newline characters are deleted, leaving the string ""ab"", which when delimited by newline characters becomes [""ab""]. note: the length of `source` is in the range `[1, 100]`. the length of `source[i]` is in the range `[0, 80]`. every open block comment is eventually closed. there are no single-quote, double-quote, or control characters in the source code.",,
723,Candy Crush,"This question is about implementing a basic elimination algorithm for Candy Crush.

Given a 2D integer array `board` representing the grid of candy, different positive integers `board[i][j]` represent different types of candies. A value of `board[i][j] = 0` represents that the cell at position `(i, j)` is empty. The given board represents the state of the game following the player's move. Now, you need to restore the board to a stable state by crushing candies according to the following rules:
If three or more candies of the same type are adjacent vertically or horizontally, ""crush"" them all at the same time - these positions become empty.

After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. (No new candies will drop outside the top boundary.)
After the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.

If there does not exist more candies that can be crushed (ie. the board is stable), then return the current board.

You need to perform the above rules until the board becomes stable, then return the current board.


Example:
Input:
board = 
[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]
Output:
[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]
Explanation: 
Note:
The length of `board` will be in the range [3, 50].

The length of `board[i]` will be in the range [3, 50].

Each `board[i][j]` will initially start as an integer in the range [1, 2000].",Medium,https://leetcode.com/problems/candy-crush,Bloomberg,"Array,Two Pointers",562,,"this question is about implementing a basic elimination algorithm for candy crush. given a 2d integer array `board` representing the grid of candy, different positive integers `board[i][j]` represent different types of candies. a value of `board[i][j] = 0` represents that the cell at position `(i, j)` is empty. the given board represents the state of the game following the player's move. now, you need to restore the board to a stable state by crushing candies according to the following rules: if three or more candies of the same type are adjacent vertically or horizontally, ""crush"" them all at the same time - these positions become empty. after crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. (no new candies will drop outside the top boundary.) after the above steps, there may exist more candies that can be crushed. if so, you need to repeat the above steps. if there does not exist more candies that can be crushed (ie. the board is stable), then return the current board. you need to perform the above rules until the board becomes stable, then return the current board.","input: board = [[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]] output: [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]] explanation: note: the length of `board` will be in the range [3, 50]. the length of `board[i]` will be in the range [3, 50]. each `board[i][j]` will initially start as an integer in the range [1, 2000].",,
724,Find Pivot Index,"Given an array of integers `nums`, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.


Example 1:
Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.

Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11

Example 2:
Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.


Example 3:
Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.

Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0

Constraints:
`1 <= nums.length <= 104`
`-1000 <= nums[i] <= 1000`",Easy,https://leetcode.com/problems/find-pivot-index,"Facebook,Goldman Sachs,Twitter,Apple",Array,1672,"[Subarray Sum Equals K, /problems/subarray-sum-equals-k/, Medium]","given an array of integers `nums`, calculate the pivot index of this array. the pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right. if the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. this also applies to the right edge of the array. return the leftmost pivot index. if no such index exists, return -1.","input: nums = [1,7,3,6,5,6] output: 3 explanation: the pivot index is 3. left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11 right sum = nums[4] + nums[5] = 5 + 6 = 11 example 2: input: nums = [1,2,3] output: -1 explanation: there is no index that satisfies the conditions in the problem statement. example 3: input: nums = [2,1,-1] output: 0 explanation: the pivot index is 0. left sum = 0 (no elements to the left of index 0) right sum = nums[1] + nums[2] = 1 + -1 = 0",`1 <= nums.length <= 10^4` `-1000 <= nums[i] <= 1000`,
725,Split Linked List in Parts,"Given a (singly) linked list with head node `root`, write a function to split the linked list into `k` consecutive linked list ""parts"".

The length of each part should be as equal as possible: no two parts should have a size differing by more than 1.  This may lead to some parts being null.

The parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.

Return a List of ListNode's representing the linked list parts that are formed.


Examples
1->2->3->4, k = 5 // 5 equal parts
[ [1], 
[2],
[3],
[4],
null ]

Example 1:
Input: 
root = [1, 2, 3], k = 5
Output: [[1],[2],[3],[],[]]
Explanation:
The input and each element of the output are ListNodes, not arrays.

For example, the input root has root.val = 1, root.next.val = 2, \root.next.next.val = 3, and root.next.next.next = null.

The first element output[0] has output[0].val = 1, output[0].next = null.

The last element output[4] is null, but it's string representation as a ListNode is [].


Example 2:
Input: 
root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
Explanation:
The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.

Note:
The length of `root` will be in the range `[0, 1000]`.

Each value of a node in the input will be an integer in the range `[0, 999]`.

`k` will be an integer in the range `[1, 50]`.",Medium,https://leetcode.com/problems/split-linked-list-in-parts,"Amazon,Adobe",Linked List,931,"[Rotate List, /problems/rotate-list/, Medium], [Odd Even Linked List, /problems/odd-even-linked-list/, Medium]","given a (singly) linked list with head node `root`, write a function to split the linked list into `k` consecutive linked list ""parts"". the length of each part should be as equal as possible: no two parts should have a size differing by more than 1. this may lead to some parts being null. the parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later. return a list of listnode's representing the linked list parts that are formed. examples 1->2->3->4, k = 5 // 5 equal parts [ [1], [2], [3], [4], null ]","input: root = [1, 2, 3], k = 5 output: [[1],[2],[3],[],[]] explanation: the input and each element of the output are listnodes, not arrays. for example, the input root has root.val = 1, root.next.val = 2, \root.next.next.val = 3, and root.next.next.next = null. the first element output[0] has output[0].val = 1, output[0].next = null. the last element output[4] is null, but it's string representation as a listnode is []. example 2: input: root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3 output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]] explanation: the input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts. note: the length of `root` will be in the range `[0, 1000]`. each value of a node in the input will be an integer in the range `[0, 999]`. `k` will be an integer in the range `[1, 50]`.",,
726,Number of Atoms,"Given a chemical `formula` (given as a string), return the count of each atom.

The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.

One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is impossible.

Two formulas concatenated together to produce another formula. For example, H2O2He3Mg4 is also a formula.

A formula placed in parentheses, and a count (optionally added) is also a formula. For example, (H2O2) and (H2O2)3 are formulas.

Given a `formula`, return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.


Example 1:
Input: formula = ""H2O""
Output: ""H2O""
Explanation: The count of elements are {'H': 2, 'O': 1}.


Example 2:
Input: formula = ""Mg(OH)2""
Output: ""H2MgO2""
Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.


Example 3:
Input: formula = ""K4(ON(SO3)2)2""
Output: ""K4N2O14S4""
Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.


Example 4:
Input: formula = ""Be32""
Output: ""Be32""

Constraints:
`1 <= formula.length <= 1000`
`formula` consists of English letters, digits, `'('`, and `')'`.

`formula` is always valid.",Hard,https://leetcode.com/problems/number-of-atoms,"ByteDance,Amazon,Pinterest,Microsoft","Hash Table,Stack,Recursion",622,"[Decode String, /problems/decode-string/, Medium], [Encode String with Shortest Length, /problems/encode-string-with-shortest-length/, Hard], [Parse Lisp Expression, /problems/parse-lisp-expression/, Hard]","given a chemical `formula` (given as a string), return the count of each atom. the atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name. one or more digits representing that element's count may follow if the count is greater than 1. if the count is 1, no digits will follow. for example, h2o and h2o2 are possible, but h1o2 is impossible. two formulas concatenated together to produce another formula. for example, h2o2he3mg4 is also a formula. a formula placed in parentheses, and a count (optionally added) is also a formula. for example, (h2o2) and (h2o2)3 are formulas. given a `formula`, return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.","input: formula = ""h2o"" output: ""h2o"" explanation: the count of elements are {'h': 2, 'o': 1}. example 2: input: formula = ""mg(oh)2"" output: ""h2mgo2"" explanation: the count of elements are {'h': 2, 'mg': 1, 'o': 2}. example 3: input: formula = ""k4(on(so3)2)2"" output: ""k4n2o14s4"" explanation: the count of elements are {'k': 4, 'n': 2, 'o': 14, 's': 4}. example 4: input: formula = ""be32"" output: ""be32""","`1 <= formula.length <= 1000` `formula` consists of english letters, digits, `'('`, and `')'`. `formula` is always valid.",
727,Minimum Window Subsequence,"Given strings `S` and `T`, find the minimum (contiguous) substring `W` of `S`, so that `T` is a subsequence of `W`.

If there is no such window in `S` that covers all characters in `T`, return the empty string `""""`. If there are multiple such minimum-length windows, return the one with the left-most starting index.


Example 1:
Input: 
S = ""abcdebdde"", T = ""bde""
Output: ""bcde""
Explanation: 
""bcde"" is the answer because it occurs before ""bdde"" which has the same length.

""deb"" is not a smaller window because the elements of T in the window must occur in order.

Note:
All the strings in the input will only contain lowercase letters.

The length of `S` will be in the range `[1, 20000]`.

The length of `T` will be in the range `[1, 100]`.",Hard,https://leetcode.com/problems/minimum-window-subsequence,"Google,Amazon,Facebook","Dynamic Programming,Sliding Window",915,,"given strings `s` and `t`, find the minimum (contiguous) substring `w` of `s`, so that `t` is a subsequence of `w`. if there is no such window in `s` that covers all characters in `t`, return the empty string `""""`. if there are multiple such minimum-length windows, return the one with the left-most starting index.","input: s = ""abcdebdde"", t = ""bde"" output: ""bcde"" explanation: ""bcde"" is the answer because it occurs before ""bdde"" which has the same length. ""deb"" is not a smaller window because the elements of t in the window must occur in order. note: all the strings in the input will only contain lowercase letters. the length of `s` will be in the range `[1, 20000]`. the length of `t` will be in the range `[1, 100]`.",,
728,Self Dividing Numbers,"A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because `128 % 1 == 0`, `128 % 2 == 0`, and `128 % 8 == 0`.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.


Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note:
The boundaries of each input argument are `1 <= left <= right <= 10000`.",Easy,https://leetcode.com/problems/self-dividing-numbers,Adobe,Math,841,"[Perfect Number, /problems/perfect-number/, Easy]","a self-dividing number is a number that is divisible by every digit it contains. for example, 128 is a self-dividing number because `128 % 1 == 0`, `128 % 2 == 0`, and `128 % 8 == 0`. also, a self-dividing number is not allowed to contain the digit zero. given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.","input: left = 1, right = 22 output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22] note: the boundaries of each input argument are `1 <= left <= right <= 10000`.",,
729,My Calendar I,"Implement a `MyCalendar` class to store your events. A new event can be added if adding the event will not cause a double booking.

Your class will have the method, `book(int start, int end)`. Formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.

A double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)
For each call to the method `MyCalendar.book`, return `true` if the event can be added to the calendar successfully without causing a double booking. Otherwise, return `false` and do not add the event to the calendar.

Your class will be called like this: `MyCalendar cal = new MyCalendar();` `MyCalendar.book(start, end)`

Example 1:
MyCalendar();
MyCalendar.book(10, 20); // returns true
MyCalendar.book(15, 25); // returns false
MyCalendar.book(20, 30); // returns true
Explanation: 
The first event can be booked.  The second can't because time 15 is already booked by another event.

The third event can be booked, as the first event takes every time less than 20, but not including 20.

Note:
The number of calls to `MyCalendar.book` per test case will be at most `1000`.

In calls to `MyCalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.",Medium,https://leetcode.com/problems/my-calendar-i,"Google,Intuit,Amazon",Array,1037,"[My Calendar II, /problems/my-calendar-ii/, Medium], [My Calendar III, /problems/my-calendar-iii/, Hard]","implement a `mycalendar` class to store your events. a new event can be added if adding the event will not cause a double booking. your class will have the method, `book(int start, int end)`. formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`. a double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.) for each call to the method `mycalendar.book`, return `true` if the event can be added to the calendar successfully without causing a double booking. otherwise, return `false` and do not add the event to the calendar. your class will be called like this: `mycalendar cal = new mycalendar();` `mycalendar.book(start, end)`","mycalendar(); mycalendar.book(10, 20); // returns true mycalendar.book(15, 25); // returns false mycalendar.book(20, 30); // returns true explanation: the first event can be booked. the second can't because time 15 is already booked by another event. the third event can be booked, as the first event takes every time less than 20, but not including 20. note: the number of calls to `mycalendar.book` per test case will be at most `1000`. in calls to `mycalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.",,
730,Count Different Palindromic Subsequences,"Given a string S, find the number of different non-empty palindromic subsequences in S, and return that number modulo `10^9 + 7`.

A subsequence of a string S is obtained by deleting 0 or more characters from S.

A sequence is palindromic if it is equal to the sequence reversed.

Two sequences `A_1, A_2, ...` and `B_1, B_2, ...` are different if there is some `i` for which `A_i != B_i`.


Example 1:
Input: 
S = 'bccb'
Output: 6
Explanation: 
The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.

Note that 'bcb' is counted only once, even though it occurs twice.


Example 2:
Input: 
S = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba'
Output: 104860361
Explanation: 
There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.

Note:
The length of `S` will be in the range `[1, 1000]`.

Each character `S[i]` will be in the set `{'a', 'b', 'c', 'd'}`.",Hard,https://leetcode.com/problems/count-different-palindromic-subsequences,"LinkedIn,Google,Facebook","String,Dynamic Programming",762,"[Longest Palindromic Subsequence, /problems/longest-palindromic-subsequence/, Medium]","given a string s, find the number of different non-empty palindromic subsequences in s, and return that number modulo `10^9 + 7`. a subsequence of a string s is obtained by deleting 0 or more characters from s. a sequence is palindromic if it is equal to the sequence reversed. two sequences `a_1, a_2, ...` and `b_1, b_2, ...` are different if there is some `i` for which `a_i != b_i`.","input: s = 'bccb' output: 6 explanation: the 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'. note that 'bcb' is counted only once, even though it occurs twice. example 2: input: s = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba' output: 104860361 explanation: there are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7. note: the length of `s` will be in the range `[1, 1000]`. each character `s[i]` will be in the set `{'a', 'b', 'c', 'd'}`.",,
731,My Calendar II,"Implement a `MyCalendarTwo` class to store your events. A new event can be added if adding the event will not cause a triple booking.

Your class will have one method, `book(int start, int end)`. Formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.

A triple booking happens when three events have some non-empty intersection (ie., there is some time that is common to all 3 events.)
For each call to the method `MyCalendar.book`, return `true` if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return `false` and do not add the event to the calendar.

Your class will be called like this: `MyCalendar cal = new MyCalendar();` `MyCalendar.book(start, end)`

Example 1:
MyCalendar();
MyCalendar.book(10, 20); // returns true
MyCalendar.book(50, 60); // returns true
MyCalendar.book(10, 40); // returns true
MyCalendar.book(5, 15); // returns false
MyCalendar.book(5, 10); // returns true
MyCalendar.book(25, 55); // returns true
Explanation: 
The first two events can be booked.  The third event can be double booked.

The fourth event (5, 15) can't be booked, because it would result in a triple booking.

The fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked.

The sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event;
the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.

Note:
The number of calls to `MyCalendar.book` per test case will be at most `1000`.

In calls to `MyCalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.",Medium,https://leetcode.com/problems/my-calendar-ii,Bloomberg,Ordered Map,791,"[My Calendar I, /problems/my-calendar-i/, Medium], [My Calendar III, /problems/my-calendar-iii/, Hard]","implement a `mycalendartwo` class to store your events. a new event can be added if adding the event will not cause a triple booking. your class will have one method, `book(int start, int end)`. formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`. a triple booking happens when three events have some non-empty intersection (ie., there is some time that is common to all 3 events.) for each call to the method `mycalendar.book`, return `true` if the event can be added to the calendar successfully without causing a triple booking. otherwise, return `false` and do not add the event to the calendar. your class will be called like this: `mycalendar cal = new mycalendar();` `mycalendar.book(start, end)`","mycalendar(); mycalendar.book(10, 20); // returns true mycalendar.book(50, 60); // returns true mycalendar.book(10, 40); // returns true mycalendar.book(5, 15); // returns false mycalendar.book(5, 10); // returns true mycalendar.book(25, 55); // returns true explanation: the first two events can be booked. the third event can be double booked. the fourth event (5, 15) can't be booked, because it would result in a triple booking. the fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked. the sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event; the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event. note: the number of calls to `mycalendar.book` per test case will be at most `1000`. in calls to `mycalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.",,
732,My Calendar III,"A `k`-booking happens when `k` events have some non-empty intersection (i.e., there is some time that is common to all `k` events.)
You are given some events `[start, end)`, after each given event, return an integer `k` representing the maximum `k`-booking between all the previous events.

Implement the `MyCalendarThree` class:
`MyCalendarThree()` Initializes the object.

`int book(int start, int end)` Returns an integer `k` representing the largest integer such that there exists a `k`-booking in the calendar.


Example 1:
Input
[""MyCalendarThree"", ""book"", ""book"", ""book"", ""book"", ""book"", ""book""]
[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]
Output
[null, 1, 1, 2, 3, 3, 3]
Explanation
MyCalendarThree myCalendarThree = new MyCalendarThree();
myCalendarThree.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.

myCalendarThree.book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.

myCalendarThree.book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.

myCalendarThree.book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.

myCalendarThree.book(5, 10); // return 3
myCalendarThree.book(25, 55); // return 3

Constraints:
`0 <= start < end <= 109`
At most `400` calls will be made to `book`.",Hard,https://leetcode.com/problems/my-calendar-iii,Google,"Segment Tree,Ordered Map",461,"[My Calendar I, /problems/my-calendar-i/, Medium], [My Calendar II, /problems/my-calendar-ii/, Medium]","a `k`-booking happens when `k` events have some non-empty intersection (i.e., there is some time that is common to all `k` events.) you are given some events `[start, end)`, after each given event, return an integer `k` representing the maximum `k`-booking between all the previous events. implement the `mycalendarthree` class: `mycalendarthree()` initializes the object. `int book(int start, int end)` returns an integer `k` representing the largest integer such that there exists a `k`-booking in the calendar.","input [""mycalendarthree"", ""book"", ""book"", ""book"", ""book"", ""book"", ""book""] [[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]] output [null, 1, 1, 2, 3, 3, 3] explanation mycalendarthree mycalendarthree = new mycalendarthree(); mycalendarthree.book(10, 20); // return 1, the first event can be booked and is disjoint, so the maximum k-booking is a 1-booking. mycalendarthree.book(50, 60); // return 1, the second event can be booked and is disjoint, so the maximum k-booking is a 1-booking. mycalendarthree.book(10, 40); // return 2, the third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking. mycalendarthree.book(5, 15); // return 3, the remaining events cause the maximum k-booking to be only a 3-booking. mycalendarthree.book(5, 10); // return 3 mycalendarthree.book(25, 55); // return 3",`0 <= start < end <= 10^9` at most `400` calls will be made to `book`.,
733,Flood Fill,"An `image` is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).

Given a coordinate `(sr, sc)` representing the starting pixel (row and column) of the flood fill, and a pixel value `newColor`, ""flood fill"" the image.

To perform a ""flood fill"", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on.  Replace the color of all of the aforementioned pixels with the newColor.

At the end, return the modified image.


Example 1:
Input: 
image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1, sc = 1, newColor = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]
Explanation: 
From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected 
by a path of the same color as the starting pixel are colored with the new color.

Note the bottom corner is not colored 2, because it is not 4-directionally connected
to the starting pixel.

Note:
The length of `image` and `image[0]` will be in the range `[1, 50]`.

The given starting pixel will satisfy `0 <= sr < image.length` and `0 <= sc < image[0].length`.

The value of each color in `image[i][j]` and `newColor` will be an integer in `[0, 65535]`.",Easy,https://leetcode.com/problems/flood-fill,"Amazon,Microsoft,Google",Depth-first Search,1849,"[Island Perimeter, /problems/island-perimeter/, Easy]","an `image` is represented by a 2-d array of integers, each integer representing the pixel value of the image (from 0 to 65535). given a coordinate `(sr, sc)` representing the starting pixel (row and column) of the flood fill, and a pixel value `newcolor`, ""flood fill"" the image. to perform a ""flood fill"", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on. replace the color of all of the aforementioned pixels with the newcolor. at the end, return the modified image.","input: image = [[1,1,1],[1,1,0],[1,0,1]] sr = 1, sc = 1, newcolor = 2 output: [[2,2,2],[2,2,0],[2,0,1]] explanation: from the center of the image (with position (sr, sc) = (1, 1)), all pixels connected by a path of the same color as the starting pixel are colored with the new color. note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel. note: the length of `image` and `image[0]` will be in the range `[1, 50]`. the given starting pixel will satisfy `0 <= sr < image.length` and `0 <= sc < image[0].length`. the value of each color in `image[i][j]` and `newcolor` will be an integer in `[0, 65535]`.",,
734,Sentence Similarity,"We can represent a sentence as an array of words, for example, the sentence `""I am happy with leetcode""` can be represented as `arr = [""I"",""am"",happy"",""with"",""leetcode""]`.

Given two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar.

Return `true` if `sentence1` and `sentence2` are similar, or `false` if they are not similar.

Two sentences are similar if:
They have the same length (i.e. the same number of words)
`sentence1[i]` and `sentence2[i]` are similar.

Notice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words `a` and `b` are similar and the words `b` and `c` are similar, `a` and `c` are not necessarily similar.


Example 1:
Input: sentence1 = [""great"",""acting"",""skills""], sentence2 = [""fine"",""drama"",""talent""], similarPairs = [[""great"",""fine""],[""drama"",""acting""],[""skills"",""talent""]]
Output: true
Explanation: The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.


Example 2:
Input: sentence1 = [""great""], sentence2 = [""great""], similarPairs = []
Output: true
Explanation: A word is similar to itself.


Example 3:
Input: sentence1 = [""great""], sentence2 = [""doubleplus"",""good""], similarPairs = [[""great"",""doubleplus""]]
Output: false
Explanation: As they don't have the same length, we return false.


Constraints:
`1 <= sentence1.length, sentence2.length <= 1000`
`1 <= sentence1[i].length, sentence2[i].length <= 20`
`sentence1[i]` and `sentence2[i]` consist of lower-case and upper-case English letters.

`0 <= similarPairs.length <= 1000`
`similarPairs[i].length == 2`
`1 <= xi.length, yi.length <= 20`
`xi` and `yi` consist of lower-case and upper-case English letters.

All the pairs `(xi, yi)` are distinct.",Easy,https://leetcode.com/problems/sentence-similarity,Facebook,Hash Table,214,"[Number of Provinces, /problems/number-of-provinces/, Medium], [Accounts Merge, /problems/accounts-merge/, Medium], [Sentence Similarity II, /problems/sentence-similarity-ii/, Medium]","we can represent a sentence as an array of words, for example, the sentence `""i am happy with leetcode""` can be represented as `arr = [""i"",""am"",happy"",""with"",""leetcode""]`. given two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarpairs` where `similarpairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar. return `true` if `sentence1` and `sentence2` are similar, or `false` if they are not similar. two sentences are similar if: they have the same length (i.e. the same number of words) `sentence1[i]` and `sentence2[i]` are similar. notice that a word is always similar to itself, also notice that the similarity relation is not transitive. for example, if the words `a` and `b` are similar and the words `b` and `c` are similar, `a` and `c` are not necessarily similar.","input: sentence1 = [""great"",""acting"",""skills""], sentence2 = [""fine"",""drama"",""talent""], similarpairs = [[""great"",""fine""],[""drama"",""acting""],[""skills"",""talent""]] output: true explanation: the two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2. example 2: input: sentence1 = [""great""], sentence2 = [""great""], similarpairs = [] output: true explanation: a word is similar to itself. example 3: input: sentence1 = [""great""], sentence2 = [""doubleplus"",""good""], similarpairs = [[""great"",""doubleplus""]] output: false explanation: as they don't have the same length, we return false.","`1 <= sentence1.length, sentence2.length <= 1000` `1 <= sentence1[i].length, sentence2[i].length <= 20` `sentence1[i]` and `sentence2[i]` consist of lower-case and upper-case english letters. `0 <= similarpairs.length <= 1000` `similarpairs[i].length == 2` `1 <= xi.length, yi.length <= 20` `xi` and `yi` consist of lower-case and upper-case english letters. all the pairs `(xi, yi)` are distinct.",
735,Asteroid Collision,"We are given an array `asteroids` of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.


Example 1:
Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.


Example 2:
Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.


Example 3:
Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.


Example 4:
Input: asteroids = [-2,-1,1,2]
Output: [-2,-1,1,2]
Explanation: The -2 and -1 are moving left, while the 1 and 2 are moving right. Asteroids moving the same direction never meet, so no asteroids will meet each other.


Constraints:
`2 <= asteroids.length <= 104`
`-1000 <= asteroids[i] <= 1000`
`asteroids[i] != 0`",Medium,https://leetcode.com/problems/asteroid-collision,"Amazon,Lyft,ByteDance,Oracle",Stack,1883,"[Can Place Flowers, /problems/can-place-flowers/, Easy]","we are given an array `asteroids` of integers representing asteroids in a row. for each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). each asteroid moves at the same speed. find out the state of the asteroids after all collisions. if two asteroids meet, the smaller one will explode. if both are the same size, both will explode. two asteroids moving in the same direction will never meet.","input: asteroids = [5,10,-5] output: [5,10] explanation: the 10 and -5 collide resulting in 10. the 5 and 10 never collide. example 2: input: asteroids = [8,-8] output: [] explanation: the 8 and -8 collide exploding each other. example 3: input: asteroids = [10,2,-5] output: [10] explanation: the 2 and -5 collide resulting in -5. the 10 and -5 collide resulting in 10. example 4: input: asteroids = [-2,-1,1,2] output: [-2,-1,1,2] explanation: the -2 and -1 are moving left, while the 1 and 2 are moving right. asteroids moving the same direction never meet, so no asteroids will meet each other.",`2 <= asteroids.length <= 10^4` `-1000 <= asteroids[i] <= 1000` `asteroids[i] != 0`,
736,Parse Lisp Expression,"You are given a string `expression` representing a Lisp-like expression to return the integer value of.

The syntax for these expressions is given as follows.

An expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable.  Expressions always evaluate to a single integer.

(An integer could be positive or negative.)
A let-expression takes the form `(let v1 e1 v2 e2 ... vn en expr)`, where `let` is always the string `""let""`, then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on sequentially; and then the value of this let-expression is the value of the expression `expr`.

An add-expression takes the form `(add e1 e2)` where `add` is always the string `""add""`, there are always two expressions `e1, e2`, and this expression evaluates to the addition of the evaluation of `e1` and the evaluation of `e2`.

A mult-expression takes the form `(mult e1 e2)` where `mult` is always the string `""mult""`, there are always two expressions `e1, e2`, and this expression evaluates to the multiplication of the evaluation of `e1` and the evaluation of `e2`.

For the purposes of this question, we will use a smaller subset of variable names.  A variable starts with a lowercase letter, then zero or more lowercase letters or digits.  Additionally for your convenience, the names ""add"", ""let"", or ""mult"" are protected and will never be used as variable names.

Finally, there is the concept of scope.  When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially.  It is guaranteed that every expression is legal.  Please see the examples for more details on scope.


Evaluation Examples:
Input: (add 1 2)
Output: 3
Input: (mult 3 (add 2 3))
Output: 15
Input: (let x 2 (mult x 5))
Output: 10
Input: (let x 2 (mult x (let x 3 y 4 (add x y))))
Output: 14
Explanation: In the expression (add x y), when checking for the value of the variable x,
we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.

Since x = 3 is found first, the value of x is 3.

Input: (let x 3 x 2 x)
Output: 2
Explanation: Assignment in let statements is processed sequentially.

Input: (let x 1 y 2 x (add x y) (add x y))
Output: 5
Explanation: The first (add x y) evaluates as 3, and is assigned to x.

The second (add x y) evaluates as 3+2 = 5.

Input: (let x 2 (add (let x 3 (let x 4 x)) x))
Output: 6
Explanation: Even though (let x 4 x) has a deeper scope, it is outside the context
of the final x in the add-expression.  That final x will equal 2.

Input: (let a1 3 b2 (add a1 1) b2) 
Output 4
Explanation: Variable names can contain digits after the first character.

Note:
The given string `expression` is well formatted: There are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses.  The expression is guaranteed to be legal and evaluate to an integer.

The length of `expression` is at most 2000.  (It is also non-empty, as that would not be a legal expression.)
The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.",Hard,https://leetcode.com/problems/parse-lisp-expression,Google,String,323,"[Ternary Expression Parser, /problems/ternary-expression-parser/, Medium], [Number of Atoms, /problems/number-of-atoms/, Hard], [Basic Calculator IV, /problems/basic-calculator-iv/, Hard]","you are given a string `expression` representing a lisp-like expression to return the integer value of. the syntax for these expressions is given as follows. an expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable. expressions always evaluate to a single integer. (an integer could be positive or negative.) a let-expression takes the form `(let v1 e1 v2 e2 ... vn en expr)`, where `let` is always the string `""let""`, then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on sequentially; and then the value of this let-expression is the value of the expression `expr`. an add-expression takes the form `(add e1 e2)` where `add` is always the string `""add""`, there are always two expressions `e1, e2`, and this expression evaluates to the addition of the evaluation of `e1` and the evaluation of `e2`. a mult-expression takes the form `(mult e1 e2)` where `mult` is always the string `""mult""`, there are always two expressions `e1, e2`, and this expression evaluates to the multiplication of the evaluation of `e1` and the evaluation of `e2`. for the purposes of this question, we will use a smaller subset of variable names. a variable starts with a lowercase letter, then zero or more lowercase letters or digits. additionally for your convenience, the names ""add"", ""let"", or ""mult"" are protected and will never be used as variable names. finally, there is the concept of scope. when an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. it is guaranteed that every expression is legal. please see the examples for more details on scope. evaluation","input: (add 1 2) output: 3 input: (mult 3 (add 2 3)) output: 15 input: (let x 2 (mult x 5)) output: 10 input: (let x 2 (mult x (let x 3 y 4 (add x y)))) output: 14 explanation: in the expression (add x y), when checking for the value of the variable x, we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate. since x = 3 is found first, the value of x is 3. input: (let x 3 x 2 x) output: 2 explanation: assignment in let statements is processed sequentially. input: (let x 1 y 2 x (add x y) (add x y)) output: 5 explanation: the first (add x y) evaluates as 3, and is assigned to x. the second (add x y) evaluates as 3+2 = 5. input: (let x 2 (add (let x 3 (let x 4 x)) x)) output: 6 explanation: even though (let x 4 x) has a deeper scope, it is outside the context of the final x in the add-expression. that final x will equal 2. input: (let a1 3 b2 (add a1 1) b2) output 4 explanation: variable names can contain digits after the first character. note: the given string `expression` is well formatted: there are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses. the expression is guaranteed to be legal and evaluate to an integer. the length of `expression` is at most 2000. (it is also non-empty, as that would not be a legal expression.) the answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.",,
737,Sentence Similarity II,"Given two sentences `words1, words2` (each represented as an array of strings), and a list of similar word pairs `pairs`, determine if two sentences are similar.

For example, `words1 = [""great"", ""acting"", ""skills""]` and `words2 = [""fine"", ""drama"", ""talent""]` are similar, if the similar word pairs are `pairs = [[""great"", ""good""], [""fine"", ""good""], [""acting"",""drama""], [""skills"",""talent""]]`.

Note that the similarity relation is transitive. For example, if ""great"" and ""good"" are similar, and ""fine"" and ""good"" are similar, then ""great"" and ""fine"" are similar.

Similarity is also symmetric. For example, ""great"" and ""fine"" being similar is the same as ""fine"" and ""great"" being similar.

Also, a word is always similar with itself. For example, the sentences `words1 = [""great""], words2 = [""great""], pairs = []` are similar, even though there are no specified similar word pairs.

Finally, sentences can only be similar if they have the same number of words. So a sentence like `words1 = [""great""]` can never be similar to `words2 = [""doubleplus"",""good""]`.

Note:
The length of `words1` and `words2` will not exceed `1000`.

The length of `pairs` will not exceed `2000`.

The length of each `pairs[i]` will be `2`.

The length of each `words[i]` and `pairs[i][j]` will be in the range `[1, 20]`.",Medium,https://leetcode.com/problems/sentence-similarity-ii,Amazon,"Depth-first Search,Union Find",587,"[Number of Provinces, /problems/number-of-provinces/, Medium], [Accounts Merge, /problems/accounts-merge/, Medium], [Sentence Similarity, /problems/sentence-similarity/, Easy]","given two sentences `words1, words2` (each represented as an array of strings), and a list of similar word pairs `pairs`, determine if two sentences are similar. for example, `words1 = [""great"", ""acting"", ""skills""]` and `words2 = [""fine"", ""drama"", ""talent""]` are similar, if the similar word pairs are `pairs = [[""great"", ""good""], [""fine"", ""good""], [""acting"",""drama""], [""skills"",""talent""]]`. note that the similarity relation is transitive. for example, if ""great"" and ""good"" are similar, and ""fine"" and ""good"" are similar, then ""great"" and ""fine"" are similar. similarity is also symmetric. for example, ""great"" and ""fine"" being similar is the same as ""fine"" and ""great"" being similar. also, a word is always similar with itself. for example, the sentences `words1 = [""great""], words2 = [""great""], pairs = []` are similar, even though there are no specified similar word pairs. finally, sentences can only be similar if they have the same number of words. so a sentence like `words1 = [""great""]` can never be similar to `words2 = [""doubleplus"",""good""]`. note: the length of `words1` and `words2` will not exceed `1000`. the length of `pairs` will not exceed `2000`. the length of each `pairs[i]` will be `2`. the length of each `words[i]` and `pairs[i][j]` will be in the range `[1, 20]`.",,,
738,Monotone Increasing Digits,"Given a non-negative integer `N`, find the largest number that is less than or equal to `N` with monotone increasing digits.

(Recall that an integer has monotone increasing digits if and only if each pair of adjacent digits `x` and `y` satisfy `x <= y`.)

Example 1:
Input: N = 10
Output: 9

Example 2:
Input: N = 1234
Output: 1234

Example 3:
Input: N = 332
Output: 299
Note:
`N` is an integer in the range `[0, 10^9]`.",Medium,https://leetcode.com/problems/monotone-increasing-digits,SAP,Greedy,609,"[Remove K Digits, /problems/remove-k-digits/, Medium]","given a non-negative integer `n`, find the largest number that is less than or equal to `n` with monotone increasing digits. (recall that an integer has monotone increasing digits if and only if each pair of adjacent digits `x` and `y` satisfy `x <= y`.)","input: n = 10 output: 9 example 2: input: n = 1234 output: 1234 example 3: input: n = 332 output: 299 note: `n` is an integer in the range `[0, 10^9]`.",,
739,Daily Temperatures,"Given a list of daily temperatures `T`, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature.  If there is no future day for which this is possible, put `0` instead.

For example, given the list of temperatures `T = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`.

Note:
The length of `temperatures` will be in the range `[1, 30000]`.

Each temperature will be an integer in the range `[30, 100]`.",Medium,https://leetcode.com/problems/daily-temperatures,"Facebook,Bloomberg,Amazon,ByteDance,Google,Adobe,Microsoft,Paypal,Oracle,Salesforce,Twitter","Hash Table,Stack",4052,"[Next Greater Element I, /problems/next-greater-element-i/, Easy]","given a list of daily temperatures `t`, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. if there is no future day for which this is possible, put `0` instead. for example, given the list of temperatures `t = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`. note: the length of `temperatures` will be in the range `[1, 30000]`. each temperature will be an integer in the range `[30, 100]`.",,,
740,Delete and Earn,"Given an array `nums` of integers, you can perform operations on the array.

In each operation, you pick any `nums[i]` and delete it to earn `nums[i]` points. After, you must delete every element equal to `nums[i] - 1` or `nums[i] + 1`.

You start with `0` points. Return the maximum number of points you can earn by applying such operations.


Example 1:
Input: nums = [3,4,2]
Output: 6
Explanation: Delete 4 to earn 4 points, consequently 3 is also deleted.

Then, delete 2 to earn 2 points.

6 total points are earned.


Example 2:
Input: nums = [2,2,3,3,3,4]
Output: 9
Explanation: Delete 3 to earn 3 points, deleting both 2's and the 4.

Then, delete 3 again to earn 3 points, and 3 again to earn 3 points.

9 total points are earned.


Constraints:
`1 <= nums.length <= 2 * 104`
`1 <= nums[i] <= 104`",Medium,https://leetcode.com/problems/delete-and-earn,Goldman Sachs,Dynamic Programming,1448,"[House Robber, /problems/house-robber/, Medium]","given an array `nums` of integers, you can perform operations on the array. in each operation, you pick any `nums[i]` and delete it to earn `nums[i]` points. after, you must delete every element equal to `nums[i] - 1` or `nums[i] + 1`. you start with `0` points. return the maximum number of points you can earn by applying such operations.","input: nums = [3,4,2] output: 6 explanation: delete 4 to earn 4 points, consequently 3 is also deleted. then, delete 2 to earn 2 points. 6 total points are earned. example 2: input: nums = [2,2,3,3,3,4] output: 9 explanation: delete 3 to earn 3 points, deleting both 2's and the 4. then, delete 3 again to earn 3 points, and 3 again to earn 3 points. 9 total points are earned.",`1 <= nums.length <= 2 * 10^4` `1 <= nums[i] <= 10^4`,
741,Cherry Pickup,"You are given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers.

`0` means the cell is empty, so you can pass through,
`1` means the cell contains a cherry that you can pick up and pass through, or
`-1` means the cell contains a thorn that blocks your way.

Return the maximum number of cherries you can collect by following the rules below:
Starting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`).

After reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells.

When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`.

If there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected.


Example 1:
Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]]
Output: 5
Explanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).

4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].

Then, the player went left, up, up, left to return home, picking up one more cherry.

The total number of cherries picked up is 5, and this is the maximum possible.


Example 2:
Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]
Output: 0

Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 50`
`grid[i][j]` is `-1`, `0`, or `1`.

`grid[0][0] != -1`
`grid[n - 1][n - 1] != -1`",Hard,https://leetcode.com/problems/cherry-pickup,"Swiggy,Facebook,Mathworks",Dynamic Programming,1562,"[Minimum Path Sum, /problems/minimum-path-sum/, Medium], [Dungeon Game, /problems/dungeon-game/, Hard]","you are given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers. `0` means the cell is empty, so you can pass through, `1` means the cell contains a cherry that you can pick up and pass through, or `-1` means the cell contains a thorn that blocks your way. return the maximum number of cherries you can collect by following the rules below: starting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`). after reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells. when passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`. if there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected.","input: grid = [[0,1,-1],[1,0,-1],[1,1,1]] output: 5 explanation: the player started at (0, 0) and went down, down, right right to reach (2, 2). 4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]]. then, the player went left, up, up, left to return home, picking up one more cherry. the total number of cherries picked up is 5, and this is the maximum possible. example 2: input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]] output: 0","`n == grid.length` `n == grid[i].length` `1 <= n <= 50` `grid[i][j]` is `-1`, `0`, or `1`. `grid[0][0] != -1` `grid[n - 1][n - 1] != -1`",
742,Closest Leaf in a Binary Tree,"Given a binary tree where every node has a unique value, and a target key `k`, find the value of the nearest leaf node to target `k` in the tree.

Here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree.  Also, a node is called a leaf if it has no children.

In the following examples, the input tree is represented in flattened form row by row.

The actual `root` tree given will be a TreeNode object.


Example 1:
Input:
root = [1, 3, 2], k = 1
Diagram of binary tree:
          1
         / \
        3   2
Output: 2 (or 3)
Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.


Example 2:
Input:
root = [1], k = 1
Output: 1
Explanation: The nearest leaf node is the root node itself.


Example 3:
Input:
root = [1,2,3,4,null,null,null,5,null,6], k = 2
Diagram of binary tree:
             1
            / \
           2   3
          /
         4
        /
       5
      /
     6
Output: 3
Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.

Note:
`root` represents a binary tree with at least `1` node and at most `1000` nodes.

Every node has a unique `node.val` in range `[1, 1000]`.

There exists some node in the given binary tree for which `node.val == k`.",Medium,https://leetcode.com/problems/closest-leaf-in-a-binary-tree,Facebook,Tree,585,,"given a binary tree where every node has a unique value, and a target key `k`, find the value of the nearest leaf node to target `k` in the tree. here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree. also, a node is called a leaf if it has no children. in the following examples, the input tree is represented in flattened form row by row. the actual `root` tree given will be a treenode object.","input: root = [1, 3, 2], k = 1 diagram of binary tree: 1 / \ 3 2 output: 2 (or 3) explanation: either 2 or 3 is the nearest leaf node to the target of 1. example 2: input: root = [1], k = 1 output: 1 explanation: the nearest leaf node is the root node itself. example 3: input: root = [1,2,3,4,null,null,null,5,null,6], k = 2 diagram of binary tree: 1 / \ 2 3 / 4 / 5 / 6 output: 3 explanation: the leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2. note: `root` represents a binary tree with at least `1` node and at most `1000` nodes. every node has a unique `node.val` in range `[1, 1000]`. there exists some node in the given binary tree for which `node.val == k`.",,
743,Network Delay Time,"You are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target.

We will send a signal from a given node `k`. Return the time it takes for all the `n` nodes to receive the signal. If it is impossible for all the `n` nodes to receive the signal, return `-1`.


Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2

Example 2:
Input: times = [[1,2,1]], n = 2, k = 1
Output: 1

Example 3:
Input: times = [[1,2,1]], n = 2, k = 2
Output: -1

Constraints:
`1 <= k <= n <= 100`
`1 <= times.length <= 6000`
`times[i].length == 3`
`1 <= ui, vi <= n`
`ui != vi`
`0 <= wi <= 100`
All the pairs `(ui, vi)` are unique. (i.e., no multiple edges.)",Medium,https://leetcode.com/problems/network-delay-time,Amazon,"Heap,Depth-first Search,Breadth-first Search,Graph",2462,,"you are given a network of `n` nodes, labeled from `1` to `n`. you are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target. we will send a signal from a given node `k`. return the time it takes for all the `n` nodes to receive the signal. if it is impossible for all the `n` nodes to receive the signal, return `-1`.","input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2 output: 2 example 2: input: times = [[1,2,1]], n = 2, k = 1 output: 1 example 3: input: times = [[1,2,1]], n = 2, k = 2 output: -1","`1 <= k <= n <= 10^0` `1 <= times.length <= 6000` `times[i].length == 3` `1 <= ui, vi <= n` `ui != vi` `0 <= wi <= 10^0` all the pairs `(ui, vi)` are unique. (i.e., no multiple edges.)",
744,Find Smallest Letter Greater Than Target,"Given a list of sorted characters `letters` containing only lowercase letters, and given a target letter `target`, find the smallest element in the list that is larger than the given target.

Letters also wrap around.  For example, if the target is `target = 'z'` and `letters = ['a', 'b']`, the answer is `'a'`.


Examples:
Input:
letters = [""c"", ""f"", ""j""]
target = ""a""
Output: ""c""
Input:
letters = [""c"", ""f"", ""j""]
target = ""c""
Output: ""f""
Input:
letters = [""c"", ""f"", ""j""]
target = ""d""
Output: ""f""
Input:
letters = [""c"", ""f"", ""j""]
target = ""g""
Output: ""j""
Input:
letters = [""c"", ""f"", ""j""]
target = ""j""
Output: ""c""
Input:
letters = [""c"", ""f"", ""j""]
target = ""k""
Output: ""c""
Note:
`letters` has a length in range `[2, 10000]`.

`letters` consists of lowercase letters, and contains at least 2 unique letters.

`target` is a lowercase letter.",Easy,https://leetcode.com/problems/find-smallest-letter-greater-than-target,LinkedIn,Binary Search,607,,"given a list of sorted characters `letters` containing only lowercase letters, and given a target letter `target`, find the smallest element in the list that is larger than the given target. letters also wrap around. for example, if the target is `target = 'z'` and `letters = ['a', 'b']`, the answer is `'a'`.","input: letters = [""c"", ""f"", ""j""] target = ""a"" output: ""c"" input: letters = [""c"", ""f"", ""j""] target = ""c"" output: ""f"" input: letters = [""c"", ""f"", ""j""] target = ""d"" output: ""f"" input: letters = [""c"", ""f"", ""j""] target = ""g"" output: ""j"" input: letters = [""c"", ""f"", ""j""] target = ""j"" output: ""c"" input: letters = [""c"", ""f"", ""j""] target = ""k"" output: ""c"" note: `letters` has a length in range `[2, 10000]`. `letters` consists of lowercase letters, and contains at least 2 unique letters. `target` is a lowercase letter.",,
745,Prefix and Suffix Search,"Design a special dictionary which has some words and allows you to search the words in it by a prefix and a suffix.

Implement the `WordFilter` class:
`WordFilter(string[] words)` Initializes the object with the `words` in the dictionary.

`f(string prefix, string suffix)` Returns the index of the word in the dictionary which has the prefix `prefix` and the suffix `suffix`. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return `-1`.


Example 1:
Input
[""WordFilter"", ""f""]
[[[""apple""]], [""a"", ""e""]]
Output
[null, 0]
Explanation
WordFilter wordFilter = new WordFilter([""apple""]);
wordFilter.f(""a"", ""e""); // return 0, because the word at index 0 has prefix = ""a"" and suffix = 'e"".


Constraints:
`1 <= words.length <= 15000`
`1 <= words[i].length <= 10`
`1 <= prefix.length, suffix.length <= 10`
`words[i]`, `prefix` and `suffix` consist of lower-case English letters only.

At most `15000` calls will be made to the function `f`.",Hard,https://leetcode.com/problems/prefix-and-suffix-search,"Amazon,Facebook",Trie,461,"[Design Add and Search Words Data Structure, /problems/design-add-and-search-words-data-structure/, Medium]","design a special dictionary which has some words and allows you to search the words in it by a prefix and a suffix. implement the `wordfilter` class: `wordfilter(string[] words)` initializes the object with the `words` in the dictionary. `f(string prefix, string suffix)` returns the index of the word in the dictionary which has the prefix `prefix` and the suffix `suffix`. if there is more than one valid index, return the largest of them. if there is no such word in the dictionary, return `-1`.","input [""wordfilter"", ""f""] [[[""apple""]], [""a"", ""e""]] output [null, 0] explanation wordfilter wordfilter = new wordfilter([""apple""]); wordfilter.f(""a"", ""e""); // return 0, because the word at index 0 has prefix = ""a"" and suffix = 'e"".","`1 <= words.length <= 15000` `1 <= words[i].length <= 10` `1 <= prefix.length, suffix.length <= 10` `words[i]`, `prefix` and `suffix` consist of lower-case english letters only. at most `15000` calls will be made to the function `f`.",
746,Min Cost Climbing Stairs,"You are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index `0`, or the step with index `1`.

Return the minimum cost to reach the top of the floor.


Example 1:
Input: cost = [10,15,20]
Output: 15
Explanation: Cheapest is: start on cost[1], pay that cost, and go to the top.


Example 2:
Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
Explanation: Cheapest is: start on cost[0], and only step on 1s, skipping cost[3].


Constraints:
`2 <= cost.length <= 1000`
`0 <= cost[i] <= 999`",Easy,https://leetcode.com/problems/min-cost-climbing-stairs,"Amazon,Apple","Array,Dynamic Programming",3027,"[Climbing Stairs, /problems/climbing-stairs/, Easy]","you are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. once you pay the cost, you can either climb one or two steps. you can either start from the step with index `0`, or the step with index `1`. return the minimum cost to reach the top of the floor.","input: cost = [10,15,20] output: 15 explanation: cheapest is: start on cost[1], pay that cost, and go to the top. example 2: input: cost = [1,100,1,1,1,100,1,1,100,1] output: 6 explanation: cheapest is: start on cost[0], and only step on 1s, skipping cost[3].",`2 <= cost.length <= 1000` `0 <= cost[i] <= 999`,
747,Largest Number At Least Twice of Others,"In a given integer array `nums`, there is always exactly one largest element.

Find whether the largest element in the array is at least twice as much as every other number in the array.

If it is, return the index of the largest element, otherwise return -1.


Example 1:
Input: nums = [3, 6, 1, 0]
Output: 1
Explanation: 6 is the largest integer, and for every other number in the array x,
6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.


Example 2:
Input: nums = [1, 2, 3, 4]
Output: -1
Explanation: 4 isn't at least as big as twice the value of 3, so we return -1.

Note:
`nums` will have a length in the range `[1, 50]`.

Every `nums[i]` will be an integer in the range `[0, 99]`.",Easy,https://leetcode.com/problems/largest-number-at-least-twice-of-others,Google,Array,430,,"in a given integer array `nums`, there is always exactly one largest element. find whether the largest element in the array is at least twice as much as every other number in the array. if it is, return the index of the largest element, otherwise return -1.","input: nums = [3, 6, 1, 0] output: 1 explanation: 6 is the largest integer, and for every other number in the array x, 6 is more than twice as big as x. the index of value 6 is 1, so we return 1. example 2: input: nums = [1, 2, 3, 4] output: -1 explanation: 4 isn't at least as big as twice the value of 3, so we return -1. note: `nums` will have a length in the range `[1, 50]`. every `nums[i]` will be an integer in the range `[0, 99]`.",,
748,Shortest Completing Word,"Given a string `licensePlate` and an array of strings `words`, find the shortest completing word in `words`.

A completing word is a word that contains all the letters in `licensePlate`. Ignore numbers and spaces in `licensePlate`, and treat letters as case insensitive. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more.

For example, if `licensePlate`` = ""aBc 12c""`, then it contains letters `'a'`, `'b'` (ignoring case), and `'c'` twice. Possible completing words are `""abccdef""`, `""caaacab""`, and `""cbca""`.

Return the shortest completing word in `words`. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in `words`.


Example 1:
Input: licensePlate = ""1s3 PSt"", words = [""step"",""steps"",""stripe"",""stepple""]
Output: ""steps""
Explanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.

""step"" contains 't' and 'p', but only contains 1 's'.

""steps"" contains 't', 'p', and both 's' characters.

""stripe"" is missing an 's'.

""stepple"" is missing an 's'.

Since ""steps"" is the only word containing all the letters, that is the answer.


Example 2:
Input: licensePlate = ""1s3 456"", words = [""looks"",""pest"",""stew"",""show""]
Output: ""pest""
Explanation: licensePlate only contains the letter 's'. All the words contain 's', but among these ""pest"", ""stew"", and ""show"" are shortest. The answer is ""pest"" because it is the word that appears earliest of the 3.


Example 3:
Input: licensePlate = ""Ah71752"", words = [""suggest"",""letter"",""of"",""husband"",""easy"",""education"",""drug"",""prevent"",""writer"",""old""]
Output: ""husband""

Example 4:
Input: licensePlate = ""OgEu755"", words = [""enough"",""these"",""play"",""wide"",""wonder"",""box"",""arrive"",""money"",""tax"",""thus""]
Output: ""enough""

Example 5:
Input: licensePlate = ""iMSlpe4"", words = [""claim"",""consumer"",""student"",""camera"",""public"",""never"",""wonder"",""simple"",""thought"",""use""]
Output: ""simple""

Constraints:
`1 <= licensePlate.length <= 7`
`licensePlate` contains digits, letters (uppercase or lowercase), or space `' '`.

`1 <= words.length <= 1000`
`1 <= words[i].length <= 15`
`words[i]` consists of lower case English letters.",Easy,https://leetcode.com/problems/shortest-completing-word,Google,Hash Table,233,,"given a string `licenseplate` and an array of strings `words`, find the shortest completing word in `words`. a completing word is a word that contains all the letters in `licenseplate`. ignore numbers and spaces in `licenseplate`, and treat letters as case insensitive. if a letter appears more than once in `licenseplate`, then it must appear in the word the same number of times or more. for example, if `licenseplate`` = ""abc 12c""`, then it contains letters `'a'`, `'b'` (ignoring case), and `'c'` twice. possible completing words are `""abccdef""`, `""caaacab""`, and `""cbca""`. return the shortest completing word in `words`. it is guaranteed an answer exists. if there are multiple shortest completing words, return the first one that occurs in `words`.","input: licenseplate = ""1s3 pst"", words = [""step"",""steps"",""stripe"",""stepple""] output: ""steps"" explanation: licenseplate contains letters 's', 'p', 's' (ignoring case), and 't'. ""step"" contains 't' and 'p', but only contains 1 's'. ""steps"" contains 't', 'p', and both 's' characters. ""stripe"" is missing an 's'. ""stepple"" is missing an 's'. since ""steps"" is the only word containing all the letters, that is the answer. example 2: input: licenseplate = ""1s3 456"", words = [""looks"",""pest"",""stew"",""show""] output: ""pest"" explanation: licenseplate only contains the letter 's'. all the words contain 's', but among these ""pest"", ""stew"", and ""show"" are shortest. the answer is ""pest"" because it is the word that appears earliest of the 3. example 3: input: licenseplate = ""ah71752"", words = [""suggest"",""letter"",""of"",""husband"",""easy"",""education"",""drug"",""prevent"",""writer"",""old""] output: ""husband"" example 4: input: licenseplate = ""ogeu755"", words = [""enough"",""these"",""play"",""wide"",""wonder"",""box"",""arrive"",""money"",""tax"",""thus""] output: ""enough"" example 5: input: licenseplate = ""imslpe4"", words = [""claim"",""consumer"",""student"",""camera"",""public"",""never"",""wonder"",""simple"",""thought"",""use""] output: ""simple""","`1 <= licenseplate.length <= 7` `licenseplate` contains digits, letters (uppercase or lowercase), or space `' '`. `1 <= words.length <= 1000` `1 <= words[i].length <= 15` `words[i]` consists of lower case english letters.",
749,Contain Virus,"A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.

The world is modeled as a 2-D array of cells, where `0` represents uninfected cells, and `1` represents cells contaminated with the virus.  A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.

Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall.

Resources are limited. Each day, you can install walls around only one region -- the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night. There will never be a tie.

Can you save the day? If so, what is the number of walls required? If not, and the world becomes fully infected, return the number of walls used.


Example 1:
Input: grid = 
[[0,1,0,0,0,0,0,1],
 [0,1,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,0]]
Output: 10
Explanation:
There are 2 contaminated regions.

On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:
[[0,1,0,0,0,0,1,1],
 [0,1,0,0,0,0,1,1],
 [0,0,0,0,0,0,1,1],
 [0,0,0,0,0,0,0,1]]
On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.


Example 2:
Input: grid = 
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output: 4
Explanation: Even though there is only one cell saved, there are 4 walls built.

Notice that walls are only built on the shared boundary of two different cells.


Example 3:
Input: grid = 
[[1,1,1,0,0,0,0,0,0],
 [1,0,1,0,1,1,1,1,1],
 [1,1,1,0,0,0,0,0,0]]
Output: 13
Explanation: The region on the left only builds two new walls.

Note:
The number of rows and columns of `grid` will each be in the range `[1, 50]`.

Each `grid[i][j]` will be either `0` or `1`.

Throughout the described process, there is always a contiguous viral region that will infect strictly more uncontaminated squares in the next round.",Hard,https://leetcode.com/problems/contain-virus,Accolite,Depth-first Search,138,,"a virus is spreading rapidly, and your task is to quarantine the infected area by installing walls. the world is modeled as a 2-d array of cells, where `0` represents uninfected cells, and `1` represents cells contaminated with the virus. a wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary. every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall. resources are limited. each day, you can install walls around only one region -- the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night. there will never be a tie. can you save the day? if so, what is the number of walls required? if not, and the world becomes fully infected, return the number of walls used.","input: grid = [[0,1,0,0,0,0,0,1], [0,1,0,0,0,0,0,1], [0,0,0,0,0,0,0,1], [0,0,0,0,0,0,0,0]] output: 10 explanation: there are 2 contaminated regions. on the first day, add 5 walls to quarantine the viral region on the left. the board after the virus spreads is: [[0,1,0,0,0,0,1,1], [0,1,0,0,0,0,1,1], [0,0,0,0,0,0,1,1], [0,0,0,0,0,0,0,1]] on the second day, add 5 walls to quarantine the viral region on the right. the virus is fully contained. example 2: input: grid = [[1,1,1], [1,0,1], [1,1,1]] output: 4 explanation: even though there is only one cell saved, there are 4 walls built. notice that walls are only built on the shared boundary of two different cells. example 3: input: grid = [[1,1,1,0,0,0,0,0,0], [1,0,1,0,1,1,1,1,1], [1,1,1,0,0,0,0,0,0]] output: 13 explanation: the region on the left only builds two new walls. note: the number of rows and columns of `grid` will each be in the range `[1, 50]`. each `grid[i][j]` will be either `0` or `1`. throughout the described process, there is always a contiguous viral region that will infect strictly more uncontaminated squares in the next round.",,
750,Number Of Corner Rectangles,"Given a grid where each entry is only 0 or 1, find the number of corner rectangles.

A corner rectangle is 4 distinct 1s on the grid that form an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1s used must be distinct.


Example 1:
Input: grid = 
[[1, 0, 0, 1, 0],
 [0, 0, 1, 0, 1],
 [0, 0, 0, 1, 0],
 [1, 0, 1, 0, 1]]
Output: 1
Explanation: There is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].


Example 2:
Input: grid = 
[[1, 1, 1],
 [1, 1, 1],
 [1, 1, 1]]
Output: 9
Explanation: There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.


Example 3:
Input: grid = 
[[1, 1, 1, 1]]
Output: 0
Explanation: Rectangles must have four distinct corners.

Note:
The number of rows and columns of `grid` will each be in the range `[1, 200]`.

Each `grid[i][j]` will be either `0` or `1`.

The number of `1`s in the grid will be at most `6000`.",Medium,https://leetcode.com/problems/number-of-corner-rectangles,Facebook,Dynamic Programming,516,,"given a grid where each entry is only 0 or 1, find the number of corner rectangles. a corner rectangle is 4 distinct 1s on the grid that form an axis-aligned rectangle. note that only the corners need to have the value 1. also, all four 1s used must be distinct.","input: grid = [[1, 0, 0, 1, 0], [0, 0, 1, 0, 1], [0, 0, 0, 1, 0], [1, 0, 1, 0, 1]] output: 1 explanation: there is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4]. example 2: input: grid = [[1, 1, 1], [1, 1, 1], [1, 1, 1]] output: 9 explanation: there are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle. example 3: input: grid = [[1, 1, 1, 1]] output: 0 explanation: rectangles must have four distinct corners. note: the number of rows and columns of `grid` will each be in the range `[1, 200]`. each `grid[i][j]` will be either `0` or `1`. the number of `1`s in the grid will be at most `6000`.",,
751,IP to CIDR,"Given a start IP address `ip` and a number of ips we need to cover `n`, return a representation of the range as a list (of smallest possible length) of CIDR blocks.

A CIDR block is a string consisting of an IP, followed by a slash, and then the prefix length.  For example: ""123.45.67.89/20"".  That prefix length ""20"" represents the number of common prefix bits in the specified range.


Example 1:
Input: ip = ""255.0.0.7"", n = 10
Output: [""255.0.0.7/32"",""255.0.0.8/29"",""255.0.0.16/32""]
Explanation:
The initial ip address, when converted to binary, looks like this (spaces added for clarity):
255.0.0.7 -> 11111111 00000000 00000000 00000111
The address ""255.0.0.7/32"" specifies all addresses with a common prefix of 32 bits to the given address,
ie. just this one address.

The address ""255.0.0.8/29"" specifies all addresses with a common prefix of 29 bits to the given address:
255.0.0.8 -> 11111111 00000000 00000000 00001000
Addresses with common prefix of 29 bits are:
11111111 00000000 00000000 00001000
11111111 00000000 00000000 00001001
11111111 00000000 00000000 00001010
11111111 00000000 00000000 00001011
11111111 00000000 00000000 00001100
11111111 00000000 00000000 00001101
11111111 00000000 00000000 00001110
11111111 00000000 00000000 00001111
The address ""255.0.0.16/32"" specifies all addresses with a common prefix of 32 bits to the given address,
ie. just 11111111 00000000 00000000 00010000.

In total, the answer specifies the range of 10 ips starting with the address 255.0.0.7 .

There were other representations, such as:
[""255.0.0.7/32"",""255.0.0.8/30"", ""255.0.0.12/30"", ""255.0.0.16/32""],
but our answer was the shortest possible.

Also note that a representation beginning with say, ""255.0.0.7/30"" would be incorrect,
because it includes addresses like 255.0.0.4 = 11111111 00000000 00000000 00000100 
that are outside the specified range.

Note:
`ip` will be a valid IPv4 address.

Every implied address `ip + x` (for `x < n`) will be a valid IPv4 address.

`n` will be an integer in the range `[1, 1000]`.",Medium,https://leetcode.com/problems/ip-to-cidr,Airbnb,Bit Manipulation,104,"[Restore IP Addresses, /problems/restore-ip-addresses/, Medium], [Validate IP Address, /problems/validate-ip-address/, Medium]","given a start ip address `ip` and a number of ips we need to cover `n`, return a representation of the range as a list (of smallest possible length) of cidr blocks. a cidr block is a string consisting of an ip, followed by a slash, and then the prefix length. for","""123.45.67.89/20"". that prefix length ""20"" represents the number of common prefix bits in the specified range. example 1: input: ip = ""255.0.0.7"", n = 10 output: [""255.0.0.7/32"",""255.0.0.8/29"",""255.0.0.16/32""] explanation: the initial ip address, when converted to binary, looks like this (spaces added for clarity): 255.0.0.7 -> 11111111 00000000 00000000 00000111 the address ""255.0.0.7/32"" specifies all addresses with a common prefix of 32 bits to the given address, ie. just this one address. the address ""255.0.0.8/29"" specifies all addresses with a common prefix of 29 bits to the given address: 255.0.0.8 -> 11111111 00000000 00000000 00001000 addresses with common prefix of 29 bits are: 11111111 00000000 00000000 00001000 11111111 00000000 00000000 00001001 11111111 00000000 00000000 00001010 11111111 00000000 00000000 00001011 11111111 00000000 00000000 00001100 11111111 00000000 00000000 00001101 11111111 00000000 00000000 00001110 11111111 00000000 00000000 00001111 the address ""255.0.0.16/32"" specifies all addresses with a common prefix of 32 bits to the given address, ie. just 11111111 00000000 00000000 00010000. in total, the answer specifies the range of 10 ips starting with the address 255.0.0.7 . there were other representations, such as: [""255.0.0.7/32"",""255.0.0.8/30"", ""255.0.0.12/30"", ""255.0.0.16/32""], but our answer was the shortest possible. also note that a representation beginning with say, ""255.0.0.7/30"" would be incorrect, because it includes addresses like 255.0.0.4 = 11111111 00000000 00000000 00000100 that are outside the specified range. note: `ip` will be a valid ipv4 address. every implied address `ip + x` (for `x < n`) will be a valid ipv4 address. `n` will be an integer in the range `[1, 1000]`.",,
752,Open the Lock,"You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot.

The lock initially starts at `'0000'`, a string representing the state of the 4 wheels.

You are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.

Given a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.


Example 1:
Input: deadends = [""0201"",""0101"",""0102"",""1212"",""2002""], target = ""0202""
Output: 6
Explanation:
A sequence of valid moves would be ""0000"" -> ""1000"" -> ""1100"" -> ""1200"" -> ""1201"" -> ""1202"" -> ""0202"".

Note that a sequence like ""0000"" -> ""0001"" -> ""0002"" -> ""0102"" -> ""0202"" would be invalid,
because the wheels of the lock become stuck after the display becomes the dead end ""0102"".


Example 2:
Input: deadends = [""8888""], target = ""0009""
Output: 1
Explanation:
We can turn the last wheel in reverse to move from ""0000"" -> ""0009"".


Example 3:
Input: deadends = [""8887"",""8889"",""8878"",""8898"",""8788"",""8988"",""7888"",""9888""], target = ""8888""
Output: -1
Explanation:
We can't reach the target without getting stuck.


Example 4:
Input: deadends = [""0000""], target = ""8888""
Output: -1

Constraints:
`1 <= deadends.length <= 500`
`deadends[i].length == 4`
`target.length == 4`
target will not be in the list `deadends`.

`target` and `deadends[i]` consist of digits only.",Medium,https://leetcode.com/problems/open-the-lock,"Facebook,Amazon,Citadel,Bloomberg",Breadth-first Search,1534,,"you have a lock in front of you with 4 circular wheels. each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. the wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. each move consists of turning one wheel one slot. the lock initially starts at `'0000'`, a string representing the state of the 4 wheels. you are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it. given a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.","input: deadends = [""0201"",""0101"",""0102"",""1212"",""2002""], target = ""0202"" output: 6 explanation: a sequence of valid moves would be ""0000"" -> ""1000"" -> ""1100"" -> ""1200"" -> ""1201"" -> ""1202"" -> ""0202"". note that a sequence like ""0000"" -> ""0001"" -> ""0002"" -> ""0102"" -> ""0202"" would be invalid, because the wheels of the lock become stuck after the display becomes the dead end ""0102"". example 2: input: deadends = [""8888""], target = ""0009"" output: 1 explanation: we can turn the last wheel in reverse to move from ""0000"" -> ""0009"". example 3: input: deadends = [""8887"",""8889"",""8878"",""8898"",""8788"",""8988"",""7888"",""9888""], target = ""8888"" output: -1 explanation: we can't reach the target without getting stuck. example 4: input: deadends = [""0000""], target = ""8888"" output: -1",`1 <= deadends.length <= 500` `deadends[i].length == 4` `target.length == 4` target will not be in the list `deadends`. `target` and `deadends[i]` consist of digits only.,
753,Cracking the Safe,"There is a box protected by a password. The password is a sequence of `n` digits where each digit can be one of the first `k` digits `0, 1, ..., k-1`.

While entering a password, the last `n` digits entered will automatically be matched against the correct password.

For example, assuming the correct password is `""345""`, if you type `""012345""`, the box will open because the correct password matches the suffix of the entered password.

Return any password of minimum length that is guaranteed to open the box at some point of entering it.


Example 1:
Input: n = 1, k = 2
Output: ""01""
Note: ""10"" will be accepted too.


Example 2:
Input: n = 2, k = 2
Output: ""00110""
Note: ""01100"", ""10011"", ""11001"" will be accepted too.

Note:
`n` will be in the range `[1, 4]`.

`k` will be in the range `[1, 10]`.

`k^n` will be at most `4096`.",Hard,https://leetcode.com/problems/cracking-the-safe,Google,"Math,Depth-first Search",548,,"there is a box protected by a password. the password is a sequence of `n` digits where each digit can be one of the first `k` digits `0, 1, ..., k-1`. while entering a password, the last `n` digits entered will automatically be matched against the correct password. for example, assuming the correct password is `""345""`, if you type `""012345""`, the box will open because the correct password matches the suffix of the entered password. return any password of minimum length that is guaranteed to open the box at some point of entering it.","input: n = 1, k = 2 output: ""01"" note: ""10"" will be accepted too. example 2: input: n = 2, k = 2 output: ""00110"" note: ""01100"", ""10011"", ""11001"" will be accepted too. note: `n` will be in the range `[1, 4]`. `k` will be in the range `[1, 10]`. `k^n` will be at most `4096`.",,
754,Reach a Number,"You are standing at position `0` on an infinite number line.  There is a goal at position `target`.

On each move, you can either go left or right.  During the n-th move (starting from 1), you take n steps.

Return the minimum number of steps required to reach the destination.


Example 1:
Input: target = 3
Output: 2
Explanation:
On the first move we step from 0 to 1.

On the second step we step from 1 to 3.


Example 2:
Input: target = 2
Output: 3
Explanation:
On the first move we step from 0 to 1.

On the second move we step  from 1 to -1.

On the third move we step from -1 to 2.

Note:
`target` will be a non-zero integer in the range `[-10^9, 10^9]`.",Medium,https://leetcode.com/problems/reach-a-number,InMobi,Math,707,,"you are standing at position `0` on an infinite number line. there is a goal at position `target`. on each move, you can either go left or right. during the n-th move (starting from 1), you take n steps. return the minimum number of steps required to reach the destination.","input: target = 3 output: 2 explanation: on the first move we step from 0 to 1. on the second step we step from 1 to 3. example 2: input: target = 2 output: 3 explanation: on the first move we step from 0 to 1. on the second move we step from 1 to -1. on the third move we step from -1 to 2. note: `target` will be a non-zero integer in the range `[-10^9, 10^9]`.",,
755,Pour Water,"We are given an elevation map, `heights[i]` representing the height of the terrain at that index.  The width at each index is 1.  After `V` units of water fall at index `K`, how much water is at each index?
Water first drops at index `K` and rests on top of the highest terrain or water at that index.  Then, it flows according to the following rules:
If the droplet would eventually fall by moving left, then move left.

Otherwise, if the droplet would eventually fall by moving right, then move right.

Otherwise, rise at it's current position.

Here, ""eventually fall"" means that the droplet will eventually be at a lower level if it moves in that direction.

Also, ""level"" means the height of the terrain plus any water in that column.

We can assume there's infinitely high terrain on the two sides out of bounds of the array.  Also, there could not be partial water being spread out evenly on more than 1 grid block - each unit of water has to be in exactly one block.


Example 1:
Input: heights = [2,1,1,2,1,2,2], V = 4, K = 3
Output: [2,2,2,3,2,2,2]
Explanation:
#       #
#       #
##  # ###
#########
 0123456    <- index
The first drop of water lands at index K = 3:
#       #
#   w   #
##  # ###
#########
 0123456    
When moving left or right, the water can only move to the same level or a lower level.

(By level, we mean the total height of the terrain plus any water in that column.)
Since moving left will eventually make it fall, it moves left.

(A droplet ""made to fall"" means go to a lower height than it was at previously.)
#       #
#       #
## w# ###
#########
 0123456    
Since moving left will not make it fall, it stays in place.  The next droplet falls:
#       #
#   w   #
## w# ###
#########
 0123456  
Since the new droplet moving left will eventually make it fall, it moves left.

Notice that the droplet still preferred to move left,
even though it could move right (and moving right makes it fall quicker.)
#       #
#  w    #
## w# ###
#########
 0123456  
#       #
#       #
##ww# ###
#########
 0123456  
After those steps, the third droplet falls.

Since moving left would not eventually make it fall, it tries to move right.

Since moving right would eventually make it fall, it moves right.

#       #
#   w   #
##ww# ###
#########
 0123456  
#       #
#       #
##ww#w###
#########
 0123456  
Finally, the fourth droplet falls.

Since moving left would not eventually make it fall, it tries to move right.

Since moving right would not eventually make it fall, it stays in place:
#       #
#   w   #
##ww#w###
#########
 0123456  
The final answer is [2,2,2,3,2,2,2]:
    #    
 ####### 
 ####### 
 0123456 

Example 2:
Input: heights = [1,2,3,4], V = 2, K = 2
Output: [2,3,3,4]
Explanation:
The last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height.


Example 3:
Input: heights = [3,1,3], V = 5, K = 1
Output: [4,4,4]
Note:
`heights` will have length in `[1, 100]` and contain integers in `[0, 99]`.

`V` will be in range `[0, 2000]`.

`K` will be in range `[0, heights.length - 1]`.",Medium,https://leetcode.com/problems/pour-water,Airbnb,Array,218,"[Trapping Rain Water, /problems/trapping-rain-water/, Hard]","we are given an elevation map, `heights[i]` representing the height of the terrain at that index. the width at each index is 1. after `v` units of water fall at index `k`, how much water is at each index? water first drops at index `k` and rests on top of the highest terrain or water at that index. then, it flows according to the following rules: if the droplet would eventually fall by moving left, then move left. otherwise, if the droplet would eventually fall by moving right, then move right. otherwise, rise at it's current position. here, ""eventually fall"" means that the droplet will eventually be at a lower level if it moves in that direction. also, ""level"" means the height of the terrain plus any water in that column. we can assume there's infinitely high terrain on the two sides out of bounds of the array. also, there could not be partial water being spread out evenly on more than 1 grid block - each unit of water has to be in exactly one block.","input: heights = [2,1,1,2,1,2,2], v = 4, k = 3 output: [2,2,2,3,2,2,2] explanation: # # # # ## # ### ######### 0123456 <- index the first drop of water lands at index k = 3: # # # w # ## # ### ######### 0123456 when moving left or right, the water can only move to the same level or a lower level. (by level, we mean the total height of the terrain plus any water in that column.) since moving left will eventually make it fall, it moves left. (a droplet ""made to fall"" means go to a lower height than it was at previously.) # # # # ## w# ### ######### 0123456 since moving left will not make it fall, it stays in place. the next droplet falls: # # # w # ## w# ### ######### 0123456 since the new droplet moving left will eventually make it fall, it moves left. notice that the droplet still preferred to move left, even though it could move right (and moving right makes it fall quicker.) # # # w # ## w# ### ######### 0123456 # # # # ##ww# ### ######### 0123456 after those steps, the third droplet falls. since moving left would not eventually make it fall, it tries to move right. since moving right would eventually make it fall, it moves right. # # # w # ##ww# ### ######### 0123456 # # # # ##ww#w### ######### 0123456 finally, the fourth droplet falls. since moving left would not eventually make it fall, it tries to move right. since moving right would not eventually make it fall, it stays in place: # # # w # ##ww#w### ######### 0123456 the final answer is [2,2,2,3,2,2,2]: # ####### ####### 0123456 example 2: input: heights = [1,2,3,4], v = 2, k = 2 output: [2,3,3,4] explanation: the last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height. example 3: input: heights = [3,1,3], v = 5, k = 1 output: [4,4,4] note: `heights` will have length in `[1, 100]` and contain integers in `[0, 99]`. `v` will be in range `[0, 2000]`. `k` will be in range `[0, heights.length - 1]`.",,
756,Pyramid Transition Matrix,"We are stacking blocks to form a pyramid. Each block has a color which is a one-letter string.

We are allowed to place any color block `C` on top of two adjacent blocks of colors `A` and `B`, if and only if `ABC` is an allowed triple.

We start with a bottom row of `bottom`, represented as a single string. We also start with a list of allowed triples `allowed`. Each allowed triple is represented as a string of length `3`.

Return `true` if we can build the pyramid all the way to the top, otherwise `false`.


Example 1:
Input: bottom = ""BCD"", allowed = [""BCG"",""CDE"",""GEA"",""FFF""]
Output: true
Explanation:
We can stack the pyramid like this:
    A
   / \
  G   E
 / \ / \
B   C   D
We are allowed to place G on top of B and C because BCG is an allowed triple.  Similarly, we can place E on top of C and D, then A on top of G and E.


Example 2:
Input: bottom = ""AABA"", allowed = [""AAA"",""AAB"",""ABA"",""ABB"",""BAC""]
Output: false
Explanation:
We cannot stack the pyramid to the top.

Note that there could be allowed triples (A, B, C) and (A, B, D) with C != D.


Constraints:
`2 <= bottom.length <= 8`
`0 <= allowed.length <= 200`
`allowed[i].length == 3`
The letters in all input strings are from the set `{'A', 'B', 'C', 'D', 'E', 'F', 'G'}`.",Medium,https://leetcode.com/problems/pyramid-transition-matrix,Amazon,"Bit Manipulation,Depth-first Search",359,,"we are stacking blocks to form a pyramid. each block has a color which is a one-letter string. we are allowed to place any color block `c` on top of two adjacent blocks of colors `a` and `b`, if and only if `abc` is an allowed triple. we start with a bottom row of `bottom`, represented as a single string. we also start with a list of allowed triples `allowed`. each allowed triple is represented as a string of length `3`. return `true` if we can build the pyramid all the way to the top, otherwise `false`.","input: bottom = ""bcd"", allowed = [""bcg"",""cde"",""gea"",""fff""] output: true explanation: we can stack the pyramid like this: a / \ g e / \ / \ b c d we are allowed to place g on top of b and c because bcg is an allowed triple. similarly, we can place e on top of c and d, then a on top of g and e. example 2: input: bottom = ""aaba"", allowed = [""aaa"",""aab"",""aba"",""abb"",""bac""] output: false explanation: we cannot stack the pyramid to the top. note that there could be allowed triples (a, b, c) and (a, b, d) with c != d.","`2 <= bottom.length <= 8` `0 <= allowed.length <= 200` `allowed[i].length == 3` the letters in all input strings are from the set `{'a', 'b', 'c', 'd', 'e', 'f', 'g'}`.",
757,Set Intersection Size At Least Two,"An integer interval `[a, b]` (for integers `a < b`) is a set of all consecutive integers from `a` to `b`, including `a` and `b`.

Find the minimum size of a set S such that for every integer interval A in `intervals`, the intersection of S with A has a size of at least two.


Example 1:
Input: intervals = [[1,3],[1,4],[2,5],[3,5]]
Output: 3
Explanation: Consider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.

Also, there isn't a smaller size set that fulfills the above condition.

Thus, we output the size of this set, which is 3.


Example 2:
Input: intervals = [[1,2],[2,3],[2,4],[4,5]]
Output: 5
Explanation: An example of a minimum sized set is {1, 2, 3, 4, 5}.


Constraints:
`1 <= intervals.length <= 3000`
`intervals[i].length == 2`
`0 <= ai < bi <= 108`",Hard,https://leetcode.com/problems/set-intersection-size-at-least-two,Uber,Greedy,356,,"an integer interval `[a, b]` (for integers `a < b`) is a set of all consecutive integers from `a` to `b`, including `a` and `b`. find the minimum size of a set s such that for every integer interval a in `intervals`, the intersection of s with a has a size of at least two.","input: intervals = [[1,3],[1,4],[2,5],[3,5]] output: 3 explanation: consider the set s = {2, 3, 4}. for each interval, there are at least 2 elements from s in the interval. also, there isn't a smaller size set that fulfills the above condition. thus, we output the size of this set, which is 3. example 2: input: intervals = [[1,2],[2,3],[2,4],[4,5]] output: 5 explanation: an example of a minimum sized set is {1, 2, 3, 4, 5}.",`1 <= intervals.length <= 3000` `intervals[i].length == 2` `0 <= ai < bi <= 10^8`,
758,Bold Words in String,"Given a set of keywords `words` and a string `S`, make all appearances of all keywords in `S` bold. Any letters between `<b>` and `</b>` tags become bold.

The returned string should use the least number of tags possible, and of course the tags should form a valid combination.

For example, given that `words = [""ab"", ""bc""]` and `S = ""aabcd""`, we should return `""a<b>abc</b>d""`. Note that returning `""a<b>a<b>b</b>c</b>d""` would use more tags, so it is incorrect.


Constraints:
`words` has length in range `[0, 50]`.

`words[i]` has length in range `[1, 10]`.

`S` has length in range `[0, 500]`.

All characters in `words[i]` and `S` are lowercase letters.

Note: This question is the same as 616: https://leetcode.com/problems/add-bold-tag-in-string/",Easy,https://leetcode.com/problems/bold-words-in-string,Google,String,176,,"given a set of keywords `words` and a string `s`, make all appearances of all keywords in `s` bold. any letters between `<b>` and `</b>` tags become bold. the returned string should use the least number of tags possible, and of course the tags should form a valid combination. for example, given that `words = [""ab"", ""bc""]` and `s = ""aabcd""`, we should return `""a<b>abc</b>d""`. note that returning `""a<b>a<b>b</b>c</b>d""` would use more tags, so it is incorrect.",,"`words` has length in range `[0, 50]`. `words[i]` has length in range `[1, 10]`. `s` has length in range `[0, 500]`. all characters in `words[i]` and `s` are lowercase letters. note: this question is the same as 616: https://leetcode.com/problems/add-bold-tag-in-string/",
759,Employee Free Time,"We are given a list `schedule` of employees, which represents the working time for each employee.

Each employee has a list of non-overlapping `Intervals`, and these intervals are in sorted order.

Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.

(Even though we are representing `Intervals` in the form `[x, y]`, the objects inside are `Intervals`, not lists or arrays. For example, `schedule[0][0].start = 1`, `schedule[0][0].end = 2`, and `schedule[0][0][0]` is not defined).  Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.


Example 1:
Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
Output: [[3,4]]
Explanation: There are a total of three employees, and all common
free time intervals would be [-inf, 1], [3, 4], [10, inf].

We discard any intervals that contain inf as they aren't finite.


Example 2:
Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
Output: [[5,6],[7,9]]

Constraints:
`1 <= schedule.length , schedule[i].length <= 50`
`0 <= schedule[i].start < schedule[i].end <= 10^8`",Hard,https://leetcode.com/problems/employee-free-time,"DoorDash,Pinterest,Amazon,Intuit,Oracle,Bloomberg,Wayfair","Heap,Greedy",815,"[Merge Intervals, /problems/merge-intervals/, Medium], [Interval List Intersections, /problems/interval-list-intersections/, Medium]","we are given a list `schedule` of employees, which represents the working time for each employee. each employee has a list of non-overlapping `intervals`, and these intervals are in sorted order. return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order. (even though we are representing `intervals` in the form `[x, y]`, the objects inside are `intervals`, not lists or arrays. for example, `schedule[0][0].start = 1`, `schedule[0][0].end = 2`, and `schedule[0][0][0]` is not defined). also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.","input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]] output: [[3,4]] explanation: there are a total of three employees, and all common free time intervals would be [-inf, 1], [3, 4], [10, inf]. we discard any intervals that contain inf as they aren't finite. example 2: input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]] output: [[5,6],[7,9]]","`1 <= schedule.length , schedule[i].length <= 50` `0 <= schedule[i].start < schedule[i].end <= 10^8`",
760,Find Anagram Mappings,"Given two lists `A`and `B`, and `B` is an anagram of `A`. `B` is an anagram of `A` means `B` is made by randomizing the order of the elements in `A`.

We want to find an index mapping `P`, from `A` to `B`. A mapping `P[i] = j` means the `i`th element in `A` appears in `B` at index `j`.

These lists `A` and `B` may contain duplicates.  If there are multiple answers, output any of them.

For example, given
A = [12, 28, 46, 32, 50]
B = [50, 12, 32, 46, 28]
We should return
[1, 4, 3, 2, 0]
as `P[0] = 1` because the `0`th element of `A` appears at `B[1]`,
and `P[1] = 4` because the `1`st element of `A` appears at `B[4]`,
and so on.

Note:
`A, B` have equal lengths in range `[1, 100]`.

`A[i], B[i]` are integers in range `[0, 10^5]`.",Easy,https://leetcode.com/problems/find-anagram-mappings,Google,Hash Table,405,,"given two lists `a`and `b`, and `b` is an anagram of `a`. `b` is an anagram of `a` means `b` is made by randomizing the order of the elements in `a`. we want to find an index mapping `p`, from `a` to `b`. a mapping `p[i] = j` means the `i`th element in `a` appears in `b` at index `j`. these lists `a` and `b` may contain duplicates. if there are multiple answers, output any of them. for example, given a = [12, 28, 46, 32, 50] b = [50, 12, 32, 46, 28] we should return [1, 4, 3, 2, 0] as `p[0] = 1` because the `0`th element of `a` appears at `b[1]`, and `p[1] = 4` because the `1`st element of `a` appears at `b[4]`, and so on. note: `a, b` have equal lengths in range `[1, 100]`. `a[i], b[i]` are integers in range `[0, 10^5]`.",,,
761,Special Binary String,"Special binary strings are binary strings with the following two properties:
The number of 0's is equal to the number of 1's.

Every prefix of the binary string has at least as many 1's as 0's.

Given a special string `S`, a move consists of choosing two consecutive, non-empty, special substrings of `S`, and swapping them.  (Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.)
At the end of any number of moves, what is the lexicographically largest resulting string possible?

Example 1:
Input: S = ""11011000""
Output: ""11100100""
Explanation:
The strings ""10"" [occuring at S[1]] and ""1100"" [at S[3]] are swapped.

This is the lexicographically largest string possible after some number of swaps.

Note:
`S` has length at most `50`.

`S` is guaranteed to be a special binary string as defined above.",Hard,https://leetcode.com/problems/special-binary-string,Citrix,"String,Recursion",401,"[Valid Parenthesis String, /problems/valid-parenthesis-string/, Medium]","special binary strings are binary strings with the following two properties: the number of 0's is equal to the number of 1's. every prefix of the binary string has at least as many 1's as 0's. given a special string `s`, a move consists of choosing two consecutive, non-empty, special substrings of `s`, and swapping them. (two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.) at the end of any number of moves, what is the lexicographically largest resulting string possible?","input: s = ""11011000"" output: ""11100100"" explanation: the strings ""10"" [occuring at s[1]] and ""1100"" [at s[3]] are swapped. this is the lexicographically largest string possible after some number of swaps. note: `s` has length at most `50`. `s` is guaranteed to be a special binary string as defined above.",,
762,Prime Number of Set Bits in Binary Representation,"Given two integers `L` and `R`, find the count of numbers in the range `[L, R]` (inclusive) having a prime number of set bits in their binary representation.

(Recall that the number of set bits an integer has is the number of `1`s present when written in binary.  For example, `21` written in binary is `10101` which has 3 set bits.  Also, 1 is not a prime.)

Example 1:Input: L = 6, R = 10
Output: 4
Explanation:
6 -> 110 (2 set bits, 2 is prime)
7 -> 111 (3 set bits, 3 is prime)
9 -> 1001 (2 set bits , 2 is prime)
10->1010 (2 set bits , 2 is prime)

Example 2:Input: L = 10, R = 15
Output: 5
Explanation:
10 -> 1010 (2 set bits, 2 is prime)
11 -> 1011 (3 set bits, 3 is prime)
12 -> 1100 (2 set bits, 2 is prime)
13 -> 1101 (3 set bits, 3 is prime)
14 -> 1110 (3 set bits, 3 is prime)
15 -> 1111 (4 set bits, 4 is not prime)
Note:
`L, R` will be integers `L <= R` in the range `[1, 10^6]`.

`R - L` will be at most 10000.",Easy,https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation,Amazon,Bit Manipulation,314,"[Number of 1 Bits, /problems/number-of-1-bits/, Easy]","given two integers `l` and `r`, find the count of numbers in the range `[l, r]` (inclusive) having a prime number of set bits in their binary representation. (recall that the number of set bits an integer has is the number of `1`s present when written in binary. for example, `21` written in binary is `10101` which has 3 set bits. also, 1 is not a prime.)","input: l = 6, r = 10 output: 4 explanation: 6 -> 110 (2 set bits, 2 is prime) 7 -> 111 (3 set bits, 3 is prime) 9 -> 1001 (2 set bits , 2 is prime) 10->1010 (2 set bits , 2 is prime) example 2:input: l = 10, r = 15 output: 5 explanation: 10 -> 1010 (2 set bits, 2 is prime) 11 -> 1011 (3 set bits, 3 is prime) 12 -> 1100 (2 set bits, 2 is prime) 13 -> 1101 (3 set bits, 3 is prime) 14 -> 1110 (3 set bits, 3 is prime) 15 -> 1111 (4 set bits, 4 is not prime) note: `l, r` will be integers `l <= r` in the range `[1, 10^6]`. `r - l` will be at most 10000.",,
763,Partition Labels,"A string `S` of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.


Example 1:
Input: S = ""ababcbacadefegdehijhklij""
Output: [9,7,8]
Explanation:
The partition is ""ababcbaca"", ""defegde"", ""hijhklij"".

This is a partition so that each letter appears in at most one part.

A partition like ""ababcbacadefegde"", ""hijhklij"" is incorrect, because it splits S into less parts.

Note:
`S` will have length in range `[1, 500]`.

`S` will consist of lowercase English letters (`'a'` to `'z'`) only.",Medium,https://leetcode.com/problems/partition-labels,"Amazon,Uber,Adobe,Bloomberg","Two Pointers,Greedy",4384,"[Merge Intervals, /problems/merge-intervals/, Medium]","a string `s` of lowercase english letters is given. we want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.","input: s = ""ababcbacadefegdehijhklij"" output: [9,7,8] explanation: the partition is ""ababcbaca"", ""defegde"", ""hijhklij"". this is a partition so that each letter appears in at most one part. a partition like ""ababcbacadefegde"", ""hijhklij"" is incorrect, because it splits s into less parts. note: `s` will have length in range `[1, 500]`. `s` will consist of lowercase english letters (`'a'` to `'z'`) only.",,
764,Largest Plus Sign,"In a 2D `grid` from (0, 0) to (N-1, N-1), every cell contains a `1`, except those cells in the given list `mines` which are `0`.  What is the largest axis-aligned plus sign of `1`s contained in the grid?  Return the order of the plus sign.  If there is none, return 0.

An ""axis-aligned plus sign of `1`s of order k"" has some center `grid[x][y] = 1` along with 4 arms of length `k-1` going up, down, left, and right, and made of `1`s.  This is demonstrated in the diagrams below.  Note that there could be `0`s or `1`s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1s.


Examples of Axis-Aligned Plus Signs of Order k:Order 1:
000
010
000
Order 2:
00000
00100
01110
00100
00000
Order 3:
0000000
0001000
0001000
0111110
0001000
0001000
0000000

Example 1:Input: N = 5, mines = [[4, 2]]
Output: 2
Explanation:
11111
11111
11111
11111
11011
In the above grid, the largest plus sign can only be order 2.  One of them is marked in bold.


Example 2:Input: N = 2, mines = []
Output: 1
Explanation:
There is no plus sign of order 2, but there is of order 1.


Example 3:Input: N = 1, mines = [[0, 0]]
Output: 0
Explanation:
There is no plus sign, so return 0.

Note:
`N` will be an integer in the range `[1, 500]`.

`mines` will have length at most `5000`.

`mines[i]` will be length 2 and consist of integers in the range `[0, N-1]`.

(Additionally, programs submitted in C, C++, or C# will be judged with a slightly smaller time limit.)",Medium,https://leetcode.com/problems/largest-plus-sign,Facebook,Dynamic Programming,572,"[Maximal Square, /problems/maximal-square/, Medium]","in a 2d `grid` from (0, 0) to (n-1, n-1), every cell contains a `1`, except those cells in the given list `mines` which are `0`. what is the largest axis-aligned plus sign of `1`s contained in the grid? return the order of the plus sign. if there is none, return 0. an ""axis-aligned plus sign of `1`s of order k"" has some center `grid[x][y] = 1` along with 4 arms of length `k-1` going up, down, left, and right, and made of `1`s. this is demonstrated in the diagrams below. note that there could be `0`s or `1`s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1s. examples of axis-aligned plus signs of order k:order 1: 000 010 000 order 2: 00000 00100 01110 00100 00000 order 3: 0000000 0001000 0001000 0111110 0001000 0001000 0000000","input: n = 5, mines = [[4, 2]] output: 2 explanation: 11111 11111 11111 11111 11011 in the above grid, the largest plus sign can only be order 2. one of them is marked in bold. example 2:input: n = 2, mines = [] output: 1 explanation: there is no plus sign of order 2, but there is of order 1. example 3:input: n = 1, mines = [[0, 0]] output: 0 explanation: there is no plus sign, so return 0. note: `n` will be an integer in the range `[1, 500]`. `mines` will have length at most `5000`. `mines[i]` will be length 2 and consist of integers in the range `[0, n-1]`. (additionally, programs submitted in c, c++, or c# will be judged with a slightly smaller time limit.)",,
765,Couples Holding Hands,"N couples sit in 2N seats arranged in a row and want to hold hands.  We want to know the minimum number of swaps so that every couple is sitting side by side.  A swap consists of choosing any two people, then they stand up and switch seats. 
The people and seats are represented by an integer from `0` to `2N-1`, the couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2N-2, 2N-1)`.

The couples' initial seating is given by `row[i]` being the value of the person who is initially sitting in the i-th seat.


Example 1:Input: row = [0, 2, 1, 3]
Output: 1
Explanation: We only need to swap the second (row[1]) and third (row[2]) person.


Example 2:Input: row = [3, 2, 0, 1]
Output: 0
Explanation: All couples are already seated side by side.

Note:
 `len(row)` is even and in the range of `[4, 60]`.

 `row` is guaranteed to be a permutation of `0...len(row)-1`.",Hard,https://leetcode.com/problems/couples-holding-hands,Google,"Greedy,Union Find,Graph",1026,"[First Missing Positive, /problems/first-missing-positive/, Hard], [Missing Number, /problems/missing-number/, Easy], [K-Similar Strings, /problems/k-similar-strings/, Hard]","n couples sit in 2n seats arranged in a row and want to hold hands. we want to know the minimum number of swaps so that every couple is sitting side by side. a swap consists of choosing any two people, then they stand up and switch seats. the people and seats are represented by an integer from `0` to `2n-1`, the couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2n-2, 2n-1)`. the couples' initial seating is given by `row[i]` being the value of the person who is initially sitting in the i-th seat.","input: row = [0, 2, 1, 3] output: 1 explanation: we only need to swap the second (row[1]) and third (row[2]) person. example 2:input: row = [3, 2, 0, 1] output: 0 explanation: all couples are already seated side by side. note: `len(row)` is even and in the range of `[4, 60]`. `row` is guaranteed to be a permutation of `0...len(row)-1`.",,
766,Toeplitz Matrix,"Given an `m x n` `matrix`, return `true` if the matrix is Toeplitz. Otherwise, return `false`.

A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.


Example 1:
Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]
Output: true
Explanation:
In the above grid, the diagonals are:
""[9]"", ""[5, 5]"", ""[1, 1, 1]"", ""[2, 2, 2]"", ""[3, 3]"", ""[4]"".

In each diagonal all elements are the same, so the answer is True.


Example 2:
Input: matrix = [[1,2],[2,2]]
Output: false
Explanation:
The diagonal ""[1, 2]"" has different elements.


Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 20`
`0 <= matrix[i][j] <= 99`
Follow up:
What if the `matrix` is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?
What if the `matrix` is so large that you can only load up a partial row into the memory at once?",Easy,https://leetcode.com/problems/toeplitz-matrix,Facebook,Array,1347,"[Valid Word Square, /problems/valid-word-square/, Easy]","given an `m x n` `matrix`, return `true` if the matrix is toeplitz. otherwise, return `false`. a matrix is toeplitz if every diagonal from top-left to bottom-right has the same elements.","input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]] output: true explanation: in the above grid, the diagonals are: ""[9]"", ""[5, 5]"", ""[1, 1, 1]"", ""[2, 2, 2]"", ""[3, 3]"", ""[4]"". in each diagonal all elements are the same, so the answer is true. example 2: input: matrix = [[1,2],[2,2]] output: false explanation: the diagonal ""[1, 2]"" has different elements.","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 20` `0 <= matrix[i][j] <= 99`","what if the `matrix` is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once? what if the `matrix` is so large that you can only load up a partial row into the memory at once?"
767,Reorganize String,"Given a string `S`, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.

If possible, output any possible result.  If not possible, return the empty string.


Example 1:
Input: S = ""aab""
Output: ""aba""

Example 2:
Input: S = ""aaab""
Output: """"
Note:
`S` will consist of lowercase letters and have length in range `[1, 500]`.",Medium,https://leetcode.com/problems/reorganize-string,"Amazon,Google,Facebook,Microsoft,Wish,Uber,Goldman Sachs","String,Heap,Greedy,Sort",2740,"[Rearrange String k Distance Apart, /problems/rearrange-string-k-distance-apart/, Hard], [Task Scheduler, /problems/task-scheduler/, Medium]","given a string `s`, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same. if possible, output any possible result. if not possible, return the empty string.","input: s = ""aab"" output: ""aba"" example 2: input: s = ""aaab"" output: """" note: `s` will consist of lowercase letters and have length in range `[1, 500]`.",,
768,Max Chunks To Make Sorted II,"This question is the same as ""Max Chunks to Make Sorted"" except the integers of the given array are not necessarily distinct, the input array could be up to length `2000`, and the elements could be up to `10**8`.

Given an array `arr` of integers (not necessarily distinct), we split the array into some number of ""chunks"" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

Example 1:
Input: arr = [5,4,3,2,1]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.

For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.


Example 2:
Input: arr = [2,1,3,4,4]
Output: 4
Explanation:
We can split into two chunks, such as [2, 1], [3, 4, 4].

However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.

Note:
`arr` will have length in range `[1, 2000]`.

`arr[i]` will be an integer in range `[0, 10**8]`.",Hard,https://leetcode.com/problems/max-chunks-to-make-sorted-ii,"Microsoft,Google",Array,562,"[Max Chunks To Make Sorted, /problems/max-chunks-to-make-sorted/, Medium]","this question is the same as ""max chunks to make sorted"" except the integers of the given array are not necessarily distinct, the input array could be up to length `2000`, and the elements could be up to `10**8`. given an array `arr` of integers (not necessarily distinct), we split the array into some number of ""chunks"" (partitions), and individually sort each chunk. after concatenating them, the result equals the sorted array. what is the most number of chunks we could have made?","input: arr = [5,4,3,2,1] output: 1 explanation: splitting into two or more chunks will not return the required result. for example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted. example 2: input: arr = [2,1,3,4,4] output: 4 explanation: we can split into two chunks, such as [2, 1], [3, 4, 4]. however, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible. note: `arr` will have length in range `[1, 2000]`. `arr[i]` will be an integer in range `[0, 10**8]`.",,
769,Max Chunks To Make Sorted,"Given an array `arr` that is a permutation of `[0, 1, ..., arr.length - 1]`, we split the array into some number of ""chunks"" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

Example 1:
Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.

For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.


Example 2:
Input: arr = [1,0,2,3,4]
Output: 4
Explanation:
We can split into two chunks, such as [1, 0], [2, 3, 4].

However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.

Note:
`arr` will have length in range `[1, 10]`.

`arr[i]` will be a permutation of `[0, 1, ..., arr.length - 1]`.",Medium,https://leetcode.com/problems/max-chunks-to-make-sorted,Google,Array,1018,"[Max Chunks To Make Sorted II, /problems/max-chunks-to-make-sorted-ii/, Hard]","given an array `arr` that is a permutation of `[0, 1, ..., arr.length - 1]`, we split the array into some number of ""chunks"" (partitions), and individually sort each chunk. after concatenating them, the result equals the sorted array. what is the most number of chunks we could have made?","input: arr = [4,3,2,1,0] output: 1 explanation: splitting into two or more chunks will not return the required result. for example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted. example 2: input: arr = [1,0,2,3,4] output: 4 explanation: we can split into two chunks, such as [1, 0], [2, 3, 4]. however, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible. note: `arr` will have length in range `[1, 10]`. `arr[i]` will be a permutation of `[0, 1, ..., arr.length - 1]`.",,
770,Basic Calculator IV,"Given an `expression` such as `expression = ""e + 8 - a + 5""` and an evaluation map such as `{""e"": 1}` (given in terms of `evalvars = [""e""]` and `evalints = [1]`), return a list of tokens representing the simplified expression, such as `[""-1*a"",""14""]`
An expression alternates chunks and symbols, with a space separating each chunk and symbol.

A chunk is either an expression in parentheses, a variable, or a non-negative integer.

A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `""2x""` or `""-x""`.

Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, `expression = ""1 + 2 * 3""` has an answer of `[""7""]`.

The format of the output is as follows:
For each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like `""b*a*c""`, only `""a*b*c""`.

Terms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, `""a*a*b*c""` has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.

The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)  A leading coefficient of 1 is still printed.

An example of a well formatted answer is `[""-2*a*a*a"", ""3*a*a*b"", ""3*b*b"", ""4*a"", ""5*c"", ""-6""]` 
Terms (including constant terms) with coefficient 0 are not included.  For example, an expression of ""0"" has an output of [].


Examples:
Input: expression = ""e + 8 - a + 5"", evalvars = [""e""], evalints = [1]
Output: [""-1*a"",""14""]
Input: expression = ""e - 8 + temperature - pressure"",
evalvars = [""e"", ""temperature""], evalints = [1, 12]
Output: [""-1*pressure"",""5""]
Input: expression = ""(e + 8) * (e - 8)"", evalvars = [], evalints = []
Output: [""1*e*e"",""-64""]
Input: expression = ""7 - 7"", evalvars = [], evalints = []
Output: []
Input: expression = ""a * b * c + b * a * c * 4"", evalvars = [], evalints = []
Output: [""5*a*b*c""]
Input: expression = ""((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))"",
evalvars = [], evalints = []
Output: [""-1*a*a*b*b"",""2*a*a*b*c"",""-1*a*a*c*c"",""1*a*b*b*b"",""-1*a*b*b*c"",""-1*a*b*c*c"",""1*a*c*c*c"",""-1*b*b*b*c"",""2*b*b*c*c"",""-1*b*c*c*c"",""2*a*a*b"",""-2*a*a*c"",""-2*a*b*b"",""2*a*c*c"",""1*b*b*b"",""-1*b*b*c"",""1*b*c*c"",""-1*c*c*c"",""-1*a*a"",""1*a*b"",""1*a*c"",""-1*b*c""]
Note:
`expression` will have length in range `[1, 250]`.

`evalvars, evalints` will have equal lengths in range `[0, 100]`.",Hard,https://leetcode.com/problems/basic-calculator-iv,Roblox,"Hash Table,String,Stack",91,"[Parse Lisp Expression, /problems/parse-lisp-expression/, Hard], [Basic Calculator III, /problems/basic-calculator-iii/, Hard]","given an `expression` such as `expression = ""e + 8 - a + 5""` and an evaluation map such as `{""e"": 1}` (given in terms of `evalvars = [""e""]` and `evalints = [1]`), return a list of tokens representing the simplified expression, such as `[""-1*a"",""14""]` an expression alternates chunks and symbols, with a space separating each chunk and symbol. a chunk is either an expression in parentheses, a variable, or a non-negative integer. a variable is a string of lowercase letters (not including digits.) note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `""2x""` or `""-x""`. expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. for example, `expression = ""1 + 2 * 3""` has an answer of `[""7""]`. the format of the output is as follows: for each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. for example, we would never write a term like `""b*a*c""`, only `""a*b*c""`. terms have degree equal to the number of free variables being multiplied, counting multiplicity. (for example, `""a*a*b*c""` has degree 4.) we write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term. the leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.) a leading coefficient of 1 is still printed. an example of a well formatted answer is `[""-2*a*a*a"", ""3*a*a*b"", ""3*b*b"", ""4*a"", ""5*c"", ""-6""]` terms (including constant terms) with coefficient 0 are not included. for example, an expression of ""0"" has an output of [].","input: expression = ""e + 8 - a + 5"", evalvars = [""e""], evalints = [1] output: [""-1*a"",""14""] input: expression = ""e - 8 + temperature - pressure"", evalvars = [""e"", ""temperature""], evalints = [1, 12] output: [""-1*pressure"",""5""] input: expression = ""(e + 8) * (e - 8)"", evalvars = [], evalints = [] output: [""1*e*e"",""-64""] input: expression = ""7 - 7"", evalvars = [], evalints = [] output: [] input: expression = ""a * b * c + b * a * c * 4"", evalvars = [], evalints = [] output: [""5*a*b*c""] input: expression = ""((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))"", evalvars = [], evalints = [] output: [""-1*a*a*b*b"",""2*a*a*b*c"",""-1*a*a*c*c"",""1*a*b*b*b"",""-1*a*b*b*c"",""-1*a*b*c*c"",""1*a*c*c*c"",""-1*b*b*b*c"",""2*b*b*c*c"",""-1*b*c*c*c"",""2*a*a*b"",""-2*a*a*c"",""-2*a*b*b"",""2*a*c*c"",""1*b*b*b"",""-1*b*b*c"",""1*b*c*c"",""-1*c*c*c"",""-1*a*a"",""1*a*b"",""1*a*c"",""-1*b*c""] note: `expression` will have length in range `[1, 250]`. `evalvars, evalints` will have equal lengths in range `[0, 100]`.",,
771,Jewels and Stones,"You're given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. Each character in `stones` is a type of stone you have. You want to know how many of the stones you have are also jewels.

Letters are case sensitive, so `""a""` is considered a different type of stone from `""A""`.


Example 1:
Input: jewels = ""aA"", stones = ""aAAbbbb""
Output: 3

Example 2:
Input: jewels = ""z"", stones = ""ZZ""
Output: 0

Constraints:
`1 <= jewels.length, stones.length <= 50`
`jewels` and `stones` consist of only English letters.

All the characters of `jewels` are unique.",Easy,https://leetcode.com/problems/jewels-and-stones,Apple,Hash Table,2588,,"you're given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. each character in `stones` is a type of stone you have. you want to know how many of the stones you have are also jewels. letters are case sensitive, so `""a""` is considered a different type of stone from `""a""`.","input: jewels = ""aa"", stones = ""aaabbbb"" output: 3 example 2: input: jewels = ""z"", stones = ""zz"" output: 0","`1 <= jewels.length, stones.length <= 50` `jewels` and `stones` consist of only english letters. all the characters of `jewels` are unique.",
772,Basic Calculator III,"Implement a basic calculator to evaluate a simple expression string.

The expression string contains only non-negative integers, `'+'`, `'-'`, `'*'`, `'/'` operators, and open `'('` and closing parentheses `')'`. The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.


Example 1:
Input: s = ""1+1""
Output: 2

Example 2:
Input: s = ""6-4/2""
Output: 4

Example 3:
Input: s = ""2*(5+5*2)/3+(6/2+8)""
Output: 21

Example 4:
Input: s = ""(2+6*3+5-(3*14/7+2)*5)+3""
Output: -12

Example 5:
Input: s = ""0""
Output: 0

Constraints:
`1 <= s <= 104`
`s` consists of digits, `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.

`s` is a valid expression.

Follow up: Could you solve the problem without using built-in library functions?",Hard,https://leetcode.com/problems/basic-calculator-iii,"Facebook,Amazon,ByteDance","String,Stack",584,"[Basic Calculator, /problems/basic-calculator/, Hard], [Basic Calculator II, /problems/basic-calculator-ii/, Medium], [Basic Calculator IV, /problems/basic-calculator-iv/, Hard], [Build Binary Expression Tree From Infix Expression, /problems/build-binary-expression-tree-from-infix-expression/, Hard]","implement a basic calculator to evaluate a simple expression string. the expression string contains only non-negative integers, `'+'`, `'-'`, `'*'`, `'/'` operators, and open `'('` and closing parentheses `')'`. the integer division should truncate toward zero. you may assume that the given expression is always valid. all intermediate results will be in the range of `[-231, 231 - 1]`.","input: s = ""1+1"" output: 2 example 2: input: s = ""6-4/2"" output: 4 example 3: input: s = ""2*(5+5*2)/3+(6/2+8)"" output: 21 example 4: input: s = ""(2+6*3+5-(3*14/7+2)*5)+3"" output: -12 example 5: input: s = ""0"" output: 0","`1 <= s <= 10^4` `s` consists of digits, `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`. `s` is a valid expression.",could you solve the problem without using built-in library functions?
773,Sliding Puzzle,"On a 2x3 `board`, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.

A move consists of choosing `0` and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the `board` is `[[1,2,3],[4,5,0]].`
Given a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.


Examples:
Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.

Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.

Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.

An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
Input: board = [[3,2,4],[1,5,0]]
Output: 14
Note:
`board` will be a 2 x 3 array as described above.

`board[i][j]` will be a permutation of `[0, 1, 2, 3, 4, 5]`.",Hard,https://leetcode.com/problems/sliding-puzzle,"Uber,Airbnb,Facebook",Breadth-first Search,941,,"on a 2x3 `board`, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0. a move consists of choosing `0` and a 4-directionally adjacent number and swapping it. the state of the board is solved if and only if the `board` is `[[1,2,3],[4,5,0]].` given a puzzle board, return the least number of moves required so that the state of the board is solved. if it is impossible for the state of the board to be solved, return -1.","input: board = [[1,2,3],[4,0,5]] output: 1 explanation: swap the 0 and the 5 in one move. input: board = [[1,2,3],[5,4,0]] output: -1 explanation: no number of moves will make the board solved. input: board = [[4,1,2],[5,0,3]] output: 5 explanation: 5 is the smallest number of moves that solves the board. an example path: after move 0: [[4,1,2],[5,0,3]] after move 1: [[4,1,2],[0,5,3]] after move 2: [[0,1,2],[4,5,3]] after move 3: [[1,0,2],[4,5,3]] after move 4: [[1,2,0],[4,5,3]] after move 5: [[1,2,3],[4,5,0]] input: board = [[3,2,4],[1,5,0]] output: 14 note: `board` will be a 2 x 3 array as described above. `board[i][j]` will be a permutation of `[0, 1, 2, 3, 4, 5]`.",,
774,Minimize Max Distance to Gas Station,"You are given an integer array `stations` that represents the positions of the gas stations on the x-axis. You are also given an integer `k`.

You should add `k` new gas stations. You can add the stations anywhere on the x-axis, and not necessarily on an integer position.

Let `penalty()` be the maximum distance between adjacent gas stations after adding the `k` new stations.

Return the smallest possible value of `penalty()`. Answers within `10-6` of the actual answer will be accepted.


Example 1:
Input: stations = [1,2,3,4,5,6,7,8,9,10], k = 9
Output: 0.50000

Example 2:
Input: stations = [23,24,36,39,46,56,57,65,84,98], k = 1
Output: 14.00000

Constraints:
`10 <= stations.length <= 2000`
`0 <= stations[i] <= 108`
`stations` is sorted in a strictly increasing order.

`1 <= k <= 106`",Hard,https://leetcode.com/problems/minimize-max-distance-to-gas-station,Google,Binary Search,426,"[Koko Eating Bananas, /problems/koko-eating-bananas/, Medium]","you are given an integer array `stations` that represents the positions of the gas stations on the x-axis. you are also given an integer `k`. you should add `k` new gas stations. you can add the stations anywhere on the x-axis, and not necessarily on an integer position. let `penalty()` be the maximum distance between adjacent gas stations after adding the `k` new stations. return the smallest possible value of `penalty()`. answers within `10-6` of the actual answer will be accepted.","input: stations = [1,2,3,4,5,6,7,8,9,10], k = 9 output: 0.50000 example 2: input: stations = [23,24,36,39,46,56,57,65,84,98], k = 1 output: 14.00000",`10 <= stations.length <= 2000` `0 <= stations[i] <= 10^8` `stations` is sorted in a strictly increasing order. `1 <= k <= 10^6`,
775,Global and Local Inversions,"We have some permutation `A` of `[0, 1, ..., N - 1]`, where `N` is the length of `A`.

The number of (global) inversions is the number of `i < j` with `0 <= i < j < N` and `A[i] > A[j]`.

The number of local inversions is the number of `i` with `0 <= i < N` and `A[i] > A[i+1]`.

Return `true` if and only if the number of global inversions is equal to the number of local inversions.


Example 1:
Input: A = [1,0,2]
Output: true
Explanation: There is 1 global inversion, and 1 local inversion.


Example 2:
Input: A = [1,2,0]
Output: false
Explanation: There are 2 global inversions, and 1 local inversion.

Note:
`A` will be a permutation of `[0, 1, ..., A.length - 1]`.

`A` will have length in range `[1, 5000]`.

The time limit for this problem has been reduced.",Medium,https://leetcode.com/problems/global-and-local-inversions,Bloomberg,"Array,Math",747,,"we have some permutation `a` of `[0, 1, ..., n - 1]`, where `n` is the length of `a`. the number of (global) inversions is the number of `i < j` with `0 <= i < j < n` and `a[i] > a[j]`. the number of local inversions is the number of `i` with `0 <= i < n` and `a[i] > a[i+1]`. return `true` if and only if the number of global inversions is equal to the number of local inversions.","input: a = [1,0,2] output: true explanation: there is 1 global inversion, and 1 local inversion. example 2: input: a = [1,2,0] output: false explanation: there are 2 global inversions, and 1 local inversion. note: `a` will be a permutation of `[0, 1, ..., a.length - 1]`. `a` will have length in range `[1, 5000]`. the time limit for this problem has been reduced.",,
776,Split BST,"Given a Binary Search Tree (BST) with root node `root`, and a target value `V`, split the tree into two subtrees where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value.  It's not necessarily the case that the tree contains a node with value `V`.

Additionally, most of the structure of the original tree should remain.  Formally, for any child C with parent P in the original tree, if they are both in the same subtree after the split, then node C should still have the parent P.

You should output the root TreeNode of both subtrees after splitting, in any order.


Example 1:
Input: root = [4,2,6,1,3,5,7], V = 2
Output: [[2,1],[4,3,6,null,null,5,7]]
Explanation:
Note that root, output[0], and output[1] are TreeNode objects, not arrays.

The given tree [4,2,6,1,3,5,7] is represented by the following diagram:
          4
        /   \
      2      6
     / \    / \
    1   3  5   7
while the diagrams for the outputs are:
          4
        /   \
      3      6      and    2
            / \           /
           5   7         1
Note:
The size of the BST will not exceed `50`.

The BST is always valid and each node's value is different.",Medium,https://leetcode.com/problems/split-bst,"Google,Salesforce","Tree,Recursion",734,"[Delete Node in a BST, /problems/delete-node-in-a-bst/, Medium]","given a binary search tree (bst) with root node `root`, and a target value `v`, split the tree into two subtrees where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value. it's not necessarily the case that the tree contains a node with value `v`. additionally, most of the structure of the original tree should remain. formally, for any child c with parent p in the original tree, if they are both in the same subtree after the split, then node c should still have the parent p. you should output the root treenode of both subtrees after splitting, in any order.","input: root = [4,2,6,1,3,5,7], v = 2 output: [[2,1],[4,3,6,null,null,5,7]] explanation: note that root, output[0], and output[1] are treenode objects, not arrays. the given tree [4,2,6,1,3,5,7] is represented by the following diagram: 4 / \ 2 6 / \ / \ 1 3 5 7 while the diagrams for the outputs are: 4 / \ 3 6 and 2 / \ / 5 7 1 note: the size of the bst will not exceed `50`. the bst is always valid and each node's value is different.",,
777,Swap Adjacent in LR String,"In a string composed of `'L'`, `'R'`, and `'X'` characters, like `""RXXLRXRXL""`, a move consists of either replacing one occurrence of `""XL""` with `""LX""`, or replacing one occurrence of `""RX""` with `""XR""`. Given the starting string `start` and the ending string `end`, return `True` if and only if there exists a sequence of moves to transform one string to the other.


Example 1:
Input: start = ""RXXLRXRXL"", end = ""XRLXXRRLX""
Output: true
Explanation: We can transform start to end following these steps:
RXXLRXRXL ->
XRXLRXRXL ->
XRLXRXRXL ->
XRLXXRRXL ->
XRLXXRRLX

Example 2:
Input: start = ""X"", end = ""L""
Output: false

Example 3:
Input: start = ""LLR"", end = ""RRL""
Output: false

Example 4:
Input: start = ""XL"", end = ""LX""
Output: true

Example 5:
Input: start = ""XLLR"", end = ""LXLX""
Output: false

Constraints:
`1 <= start.length <= 104`
`start.length == end.length`
Both `start` and `end` will only consist of characters in `'L'`, `'R'`, and `'X'`.",Medium,https://leetcode.com/problems/swap-adjacent-in-lr-string,Google,Brainteaser,520,,"in a string composed of `'l'`, `'r'`, and `'x'` characters, like `""rxxlrxrxl""`, a move consists of either replacing one occurrence of `""xl""` with `""lx""`, or replacing one occurrence of `""rx""` with `""xr""`. given the starting string `start` and the ending string `end`, return `true` if and only if there exists a sequence of moves to transform one string to the other.","input: start = ""rxxlrxrxl"", end = ""xrlxxrrlx"" output: true explanation: we can transform start to end following these steps: rxxlrxrxl -> xrxlrxrxl -> xrlxrxrxl -> xrlxxrrxl -> xrlxxrrlx example 2: input: start = ""x"", end = ""l"" output: false example 3: input: start = ""llr"", end = ""rrl"" output: false example 4: input: start = ""xl"", end = ""lx"" output: true example 5: input: start = ""xllr"", end = ""lxlx"" output: false","`1 <= start.length <= 10^4` `start.length == end.length` both `start` and `end` will only consist of characters in `'l'`, `'r'`, and `'x'`.",
778,Swim in Rising Water,"On an N x N `grid`, each square `grid[i][j]` represents the elevation at that point `(i,j)`.

Now rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most `t`. You can swim infinite distance in zero time. Of course, you must stay within the boundaries of the grid during your swim.

You start at the top left square `(0, 0)`. What is the least time until you can reach the bottom right square `(N-1, N-1)`?

Example 1:
Input: [[0,2],[1,3]]
Output: 3
Explanation:
At time `0`, you are in grid location `(0, 0)`.

You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.

You cannot reach point `(1, 1)` until time `3`.

When the depth of water is `3`, we can swim anywhere inside the grid.


Example 2:
Input: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
Output: 16
Explanation:
 0  1  2  3  4
24 23 22 21  5
12 13 14 15 16
11 17 18 19 20
10  9  8  7  6
The final route is marked in bold.

We need to wait until time 16 so that (0, 0) and (4, 4) are connected.

Note:
`2 <= N <= 50`.

grid[i][j] is a permutation of [0, ..., N*N - 1].",Hard,https://leetcode.com/problems/swim-in-rising-water,Facebook,"Binary Search,Heap,Depth-first Search,Union Find",868,,"on an n x n `grid`, each square `grid[i][j]` represents the elevation at that point `(i,j)`. now rain starts to fall. at time `t`, the depth of the water everywhere is `t`. you can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most `t`. you can swim infinite distance in zero time. of course, you must stay within the boundaries of the grid during your swim. you start at the top left square `(0, 0)`. what is the least time until you can reach the bottom right square `(n-1, n-1)`?","input: [[0,2],[1,3]] output: 3 explanation: at time `0`, you are in grid location `(0, 0)`. you cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0. you cannot reach point `(1, 1)` until time `3`. when the depth of water is `3`, we can swim anywhere inside the grid. example 2: input: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]] output: 16 explanation: 0 1 2 3 4 24 23 22 21 5 12 13 14 15 16 11 17 18 19 20 10 9 8 7 6 the final route is marked in bold. we need to wait until time 16 so that (0, 0) and (4, 4) are connected. note: `2 <= n <= 50`. grid[i][j] is a permutation of [0, ..., n*n - 1].",,
779,K-th Symbol in Grammar,"On the first row, we write a `0`. Now in every subsequent row, we look at the previous row and replace each occurrence of `0` with `01`, and each occurrence of `1` with `10`.

Given row `N` and index `K`, return the `K`-th indexed symbol in row `N`. (The values of `K` are 1-indexed.) (1 indexed).


Examples:
Input: N = 1, K = 1
Output: 0
Input: N = 2, K = 1
Output: 0
Input: N = 2, K = 2
Output: 1
Input: N = 4, K = 5
Output: 1
Explanation:
row 1: 0
row 2: 01
row 3: 0110
row 4: 01101001
Note:
`N` will be an integer in the range `[1, 30]`.

`K` will be an integer in the range `[1, 2^(N-1)]`.",Medium,https://leetcode.com/problems/k-th-symbol-in-grammar,"Amazon,Facebook",Recursion,826,,"on the first row, we write a `0`. now in every subsequent row, we look at the previous row and replace each occurrence of `0` with `01`, and each occurrence of `1` with `10`. given row `n` and index `k`, return the `k`-th indexed symbol in row `n`. (the values of `k` are 1-indexed.) (1 indexed).","input: n = 1, k = 1 output: 0 input: n = 2, k = 1 output: 0 input: n = 2, k = 2 output: 1 input: n = 4, k = 5 output: 1 explanation: row 1: 0 row 2: 01 row 3: 0110 row 4: 01101001 note: `n` will be an integer in the range `[1, 30]`. `k` will be an integer in the range `[1, 2^(n-1)]`.",,
780,Reaching Points,"A move consists of taking a point `(x, y)` and transforming it to either `(x, x+y)` or `(x+y, y)`.

Given a starting point `(sx, sy)` and a target point `(tx, ty)`, return `True` if and only if a sequence of moves exists to transform the point `(sx, sy)` to `(tx, ty)`. Otherwise, return `False`.


Examples:
Input: sx = 1, sy = 1, tx = 3, ty = 5
Output: True
Explanation:
One series of moves that transforms the starting point to the target is:
(1, 1) -> (1, 2)
(1, 2) -> (3, 2)
(3, 2) -> (3, 5)
Input: sx = 1, sy = 1, tx = 2, ty = 2
Output: False
Input: sx = 1, sy = 1, tx = 1, ty = 1
Output: True
Note:
`sx, sy, tx, ty` will all be integers in the range `[1, 10^9]`.",Hard,https://leetcode.com/problems/reaching-points,"Twitter,Goldman Sachs",Math,713,,"a move consists of taking a point `(x, y)` and transforming it to either `(x, x+y)` or `(x+y, y)`. given a starting point `(sx, sy)` and a target point `(tx, ty)`, return `true` if and only if a sequence of moves exists to transform the point `(sx, sy)` to `(tx, ty)`. otherwise, return `false`.","input: sx = 1, sy = 1, tx = 3, ty = 5 output: true explanation: one series of moves that transforms the starting point to the target is: (1, 1) -> (1, 2) (1, 2) -> (3, 2) (3, 2) -> (3, 5) input: sx = 1, sy = 1, tx = 2, ty = 2 output: false input: sx = 1, sy = 1, tx = 1, ty = 1 output: true note: `sx, sy, tx, ty` will all be integers in the range `[1, 10^9]`.",,
781,Rabbits in Forest,"In a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those `answers` are placed in an array.

Return the minimum number of rabbits that could be in the forest.


Examples:
Input: answers = [1, 1, 2]
Output: 5
Explanation:
The two rabbits that answered ""1"" could both be the same color, say red.

The rabbit than answered ""2"" can't be red or the answers would be inconsistent.

Say the rabbit that answered ""2"" was blue.

Then there should be 2 other blue rabbits in the forest that didn't answer into the array.

The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.

Input: answers = [10, 10, 10]
Output: 11
Input: answers = []
Output: 0
Note:
`answers` will have length at most `1000`.

Each `answers[i]` will be an integer in the range `[0, 999]`.",Medium,https://leetcode.com/problems/rabbits-in-forest,Wish,"Hash Table,Math",386,,"in a forest, each rabbit has some color. some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. those `answers` are placed in an array. return the minimum number of rabbits that could be in the forest.","input: answers = [1, 1, 2] output: 5 explanation: the two rabbits that answered ""1"" could both be the same color, say red. the rabbit than answered ""2"" can't be red or the answers would be inconsistent. say the rabbit that answered ""2"" was blue. then there should be 2 other blue rabbits in the forest that didn't answer into the array. the smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't. input: answers = [10, 10, 10] output: 11 input: answers = [] output: 0 note: `answers` will have length at most `1000`. each `answers[i]` will be an integer in the range `[0, 999]`.",,
782,Transform to Chessboard,"An N x N `board` contains only `0`s and `1`s. In each move, you can swap any 2 rows with each other, or any 2 columns with each other.

What is the minimum number of moves to transform the board into a ""chessboard"" - a board where no `0`s and no `1`s are 4-directionally adjacent? If the task is impossible, return -1.


Examples:
Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
Output: 2
Explanation:
One potential sequence of moves is shown below, from left to right:
0110     1010     1010
0110 --> 1010 --> 0101
1001     0101     1010
1001     0101     0101
The first move swaps the first and second column.

The second move swaps the second and third row.

Input: board = [[0, 1], [1, 0]]
Output: 0
Explanation:
Also note that the board with 0 in the top left corner,
01
10
is also a valid chessboard.

Input: board = [[1, 0], [1, 0]]
Output: -1
Explanation:
No matter what sequence of moves you make, you cannot end with a valid chessboard.

Note:
`board` will have the same number of rows and columns, a number in the range `[2, 30]`.

`board[i][j]` will be only `0`s or `1`s.",Hard,https://leetcode.com/problems/transform-to-chessboard,Google,"Array,Math",149,,"an n x n `board` contains only `0`s and `1`s. in each move, you can swap any 2 rows with each other, or any 2 columns with each other. what is the minimum number of moves to transform the board into a ""chessboard"" - a board where no `0`s and no `1`s are 4-directionally adjacent? if the task is impossible, return -1.","input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]] output: 2 explanation: one potential sequence of moves is shown below, from left to right: 0110 1010 1010 0110 --> 1010 --> 0101 1001 0101 1010 1001 0101 0101 the first move swaps the first and second column. the second move swaps the second and third row. input: board = [[0, 1], [1, 0]] output: 0 explanation: also note that the board with 0 in the top left corner, 01 10 is also a valid chessboard. input: board = [[1, 0], [1, 0]] output: -1 explanation: no matter what sequence of moves you make, you cannot end with a valid chessboard. note: `board` will have the same number of rows and columns, a number in the range `[2, 30]`. `board[i][j]` will be only `0`s or `1`s.",,
783,Minimum Distance Between BST Nodes,"Given the `root` of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

Note: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/

Example 1:
Input: root = [4,2,6,1,3]
Output: 1

Example 2:
Input: root = [1,0,48,null,null,12,49]
Output: 1

Constraints:
The number of nodes in the tree is in the range `[2, 100]`.

`0 <= Node.val <= 105`",Easy,https://leetcode.com/problems/minimum-distance-between-bst-nodes,Amazon,"Tree,Depth-first Search,Recursion",990,"[Binary Tree Inorder Traversal, /problems/binary-tree-inorder-traversal/, Medium]","given the `root` of a binary search tree (bst), return the minimum difference between the values of any two different nodes in the tree. note: this question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/","input: root = [4,2,6,1,3] output: 1 example 2: input: root = [1,0,48,null,null,12,49] output: 1","the number of nodes in the tree is in the range `[2, 10^0]`. `0 <= node.val <= 10^5`",
784,Letter Case Permutation,"Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. You can return the output in any order.


Example 1:
Input: S = ""a1b2""
Output: [""a1b2"",""a1B2"",""A1b2"",""A1B2""]

Example 2:
Input: S = ""3z4""
Output: [""3z4"",""3Z4""]

Example 3:
Input: S = ""12345""
Output: [""12345""]

Example 4:
Input: S = ""0""
Output: [""0""]

Constraints:
`S` will be a string with length between `1` and `12`.

`S` will consist only of letters or digits.",Medium,https://leetcode.com/problems/letter-case-permutation,"Bloomberg,Amazon,Spotify","Backtracking,Bit Manipulation",2002,"[Subsets, /problems/subsets/, Medium], [Brace Expansion, /problems/brace-expansion/, Medium]","given a string s, we can transform every letter individually to be lowercase or uppercase to create another string. return a list of all possible strings we could create. you can return the output in any order.","input: s = ""a1b2"" output: [""a1b2"",""a1b2"",""a1b2"",""a1b2""] example 2: input: s = ""3z4"" output: [""3z4"",""3z4""] example 3: input: s = ""12345"" output: [""12345""] example 4: input: s = ""0"" output: [""0""]",`s` will be a string with length between `1` and `12`. `s` will consist only of letters or digits.,
785,Is Graph Bipartite?,"There is an undirected graph with `n` nodes, where each node is numbered between `0` and `n - 1`. You are given a 2D array `graph`, where `graph[u]` is an array of nodes that node `u` is adjacent to. More formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. The graph has the following properties:
There are no self-edges (`graph[u]` does not contain `u`).

There are no parallel edges (`graph[u]` does not contain duplicate values).

If `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected).

The graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them.

A graph is bipartite if the nodes can be partitioned into two independent sets `A` and `B` such that every edge in the graph connects a node in set `A` and a node in set `B`.

Return `true` if and only if it is bipartite.


Example 1:
Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.


Example 2:
Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.


Constraints:
`graph.length == n`
`1 <= n <= 100`
`0 <= graph[u].length < n`
`0 <= graph[u][i] <= n - 1`
`graph[u]` does not contain `u`.

All the values of `graph[u]` are unique.

If `graph[u]` contains `v`, then `graph[v]` contains `u`.",Medium,https://leetcode.com/problems/is-graph-bipartite,"Facebook,ByteDance,eBay","Depth-first Search,Breadth-first Search,Graph",2493,,"there is an undirected graph with `n` nodes, where each node is numbered between `0` and `n - 1`. you are given a 2d array `graph`, where `graph[u]` is an array of nodes that node `u` is adjacent to. more formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. the graph has the following properties: there are no self-edges (`graph[u]` does not contain `u`). there are no parallel edges (`graph[u]` does not contain duplicate values). if `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected). the graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them. a graph is bipartite if the nodes can be partitioned into two independent sets `a` and `b` such that every edge in the graph connects a node in set `a` and a node in set `b`. return `true` if and only if it is bipartite.","input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]] output: false explanation: there is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other. example 2: input: graph = [[1,3],[0,2],[1,3],[0,2]] output: true explanation: we can partition the nodes into two sets: {0, 2} and {1, 3}.","`graph.length == n` `1 <= n <= 10^0` `0 <= graph[u].length < n` `0 <= graph[u][i] <= n - 1` `graph[u]` does not contain `u`. all the values of `graph[u]` are unique. if `graph[u]` contains `v`, then `graph[v]` contains `u`.",
786,K-th Smallest Prime Fraction,"You are given a sorted integer array `arr` containing `1` and prime numbers, where all the integers of `arr` are unique. You are also given an integer `k`.

For every `i` and `j` where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`.

Return the `kth` smallest fraction considered. Return your answer as an array of integers of size `2`, where `answer[0] == arr[i]` and `answer[1] == arr[j]`.


Example 1:
Input: arr = [1,2,3,5], k = 3
Output: [2,5]
Explanation: The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.

The third fraction is 2/5.


Example 2:
Input: arr = [1,7], k = 1
Output: [1,7]

Constraints:
`2 <= arr.length <= 1000`
`1 <= arr[i] <= 3 * 104`
`arr[0] == 1`
`arr[i]` is a prime number for `i > 0`.

All the numbers of `arr` are unique and sorted in strictly increasing order.

`1 <= k <= arr.length * (arr.length - 1) / 2`",Hard,https://leetcode.com/problems/k-th-smallest-prime-fraction,Robinhood,"Binary Search,Heap",507,"[Kth Smallest Element in a Sorted Matrix, /problems/kth-smallest-element-in-a-sorted-matrix/, Medium], [Kth Smallest Number in Multiplication Table, /problems/kth-smallest-number-in-multiplication-table/, Hard], [Find K-th Smallest Pair Distance, /problems/find-k-th-smallest-pair-distance/, Hard]","you are given a sorted integer array `arr` containing `1` and prime numbers, where all the integers of `arr` are unique. you are also given an integer `k`. for every `i` and `j` where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`. return the `kth` smallest fraction considered. return your answer as an array of integers of size `2`, where `answer[0] == arr[i]` and `answer[1] == arr[j]`.","input: arr = [1,2,3,5], k = 3 output: [2,5] explanation: the fractions to be considered in sorted order are: 1/5, 1/3, 2/5, 1/2, 3/5, and 2/3. the third fraction is 2/5. example 2: input: arr = [1,7], k = 1 output: [1,7]",`2 <= arr.length <= 1000` `1 <= arr[i] <= 3 * 10^4` `arr[0] == 1` `arr[i]` is a prime number for `i > 0`. all the numbers of `arr` are unique and sorted in strictly increasing order. `1 <= k <= arr.length * (arr.length - 1) / 2`,
787,Cheapest Flights Within K Stops,"There are `n` cities connected by `m` flights. Each flight starts from city `u` and arrives at `v` with a price `w`.

Now given all the cities and flights, together with starting city `src` and the destination `dst`, your task is to find the cheapest price from `src` to `dst` with up to `k` stops. If there is no such route, output `-1`.


Example 1:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
Output: 200
Explanation: 
The graph looks like this:
The cheapest price from city `0` to city `2` with at most 1 stop costs 200, as marked red in the picture.


Example 2:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 0
Output: 500
Explanation: 
The graph looks like this:
The cheapest price from city `0` to city `2` with at most 0 stop costs 500, as marked blue in the picture.


Constraints:
The number of nodes `n` will be in range `[1, 100]`, with nodes labeled from `0` to `n`` - 1`.

The size of `flights` will be in range `[0, n * (n - 1) / 2]`.

The format of each flight will be `(src, ``dst``, price)`.

The price of each flight will be in the range `[1, 10000]`.

`k` is in the range of `[0, n - 1]`.

There will not be any duplicated flights or self cycles.",Medium,https://leetcode.com/problems/cheapest-flights-within-k-stops,"Facebook,Expedia,Apple,Airbnb,Amazon","Dynamic Programming,Heap,Breadth-first Search",2926,"[Maximum Vacation Days, /problems/maximum-vacation-days/, Hard]","there are `n` cities connected by `m` flights. each flight starts from city `u` and arrives at `v` with a price `w`. now given all the cities and flights, together with starting city `src` and the destination `dst`, your task is to find the cheapest price from `src` to `dst` with up to `k` stops. if there is no such route, output `-1`.","input: n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]] src = 0, dst = 2, k = 1 output: 200 explanation: the graph looks like this: the cheapest price from city `0` to city `2` with at most 1 stop costs 200, as marked red in the picture. example 2: input: n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]] src = 0, dst = 2, k = 0 output: 500 explanation: the graph looks like this: the cheapest price from city `0` to city `2` with at most 0 stop costs 500, as marked blue in the picture.","the number of nodes `n` will be in range `[1, 10^0]`, with nodes labeled from `0` to `n`` - 1`. the size of `flights` will be in range `[0, n * (n - 1) / 2]`. the format of each flight will be `(src, ``dst``, price)`. the price of each flight will be in the range `[1, 10000]`. `k` is in the range of `[0, n - 1]`. there will not be any duplicated flights or self cycles.",
788,Rotated Digits,"X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X.  Each digit must be rotated - we cannot choose to leave it alone.

A number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other (on this case they are rotated in a different direction, in other words 2 or 5 gets mirrored); 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid.

Now given a positive number `N`, how many numbers X from `1` to `N` are good?

Example:
Input: 10
Output: 4
Explanation: 
There are four good numbers in the range [1, 10] : 2, 5, 6, 9.

Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.

Note:
N  will be in range `[1, 10000]`.",Easy,https://leetcode.com/problems/rotated-digits,Google,String,418,,"x is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. each digit must be rotated - we cannot choose to leave it alone. a number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other (on this case they are rotated in a different direction, in other words 2 or 5 gets mirrored); 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid. now given a positive number `n`, how many numbers x from `1` to `n` are good?","input: 10 output: 4 explanation: there are four good numbers in the range [1, 10] : 2, 5, 6, 9. note that 1 and 10 are not good numbers, since they remain unchanged after rotating. note: n will be in range `[1, 10000]`.",,
789,Escape The Ghosts,"You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point `[0, 0]`, and you are given a destination point `target = [xtarget, ytarget]`, which you are trying to get to. There are several ghosts on the map with their starting positions given as an array `ghosts`, where `ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost. All inputs are integral coordinates.

Each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west or stay still. All actions happen simultaneously.

You escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.

Return `true` if it is possible to escape, otherwise return `false`.


Example 1:
Input: ghosts = [[1,0],[0,3]], target = [0,1]
Output: true
Explanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.


Example 2:
Input: ghosts = [[1,0]], target = [2,0]
Output: false
Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.


Example 3:
Input: ghosts = [[2,0]], target = [1,0]
Output: false
Explanation: The ghost can reach the target at the same time as you.


Example 4:
Input: ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]
Output: false

Example 5:
Input: ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]
Output: true

Constraints:
`1 <= ghosts.length <= 100`
`ghosts[i].length == 2`
`-104 <= xi, yi <= 104`
There can be multiple ghosts in the same location.

`target.length == 2`
`-104 <= xtarget, ytarget <= 104`",Medium,https://leetcode.com/problems/escape-the-ghosts,Google,Math,224,"[Cat and Mouse II, /problems/cat-and-mouse-ii/, Hard]","you are playing a simplified pac-man game on an infinite 2-d grid. you start at the point `[0, 0]`, and you are given a destination point `target = [xtarget, ytarget]`, which you are trying to get to. there are several ghosts on the map with their starting positions given as an array `ghosts`, where `ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost. all inputs are integral coordinates. each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west or stay still. all actions happen simultaneously. you escape if and only if you can reach the target before any ghost reaches you. if you reach any square (including the target) at the same time as a ghost, it does not count as an escape. return `true` if it is possible to escape, otherwise return `false`.","input: ghosts = [[1,0],[0,3]], target = [0,1] output: true explanation: you can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you. example 2: input: ghosts = [[1,0]], target = [2,0] output: false explanation: you need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination. example 3: input: ghosts = [[2,0]], target = [1,0] output: false explanation: the ghost can reach the target at the same time as you. example 4: input: ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7] output: false example 5: input: ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0] output: true","`1 <= ghosts.length <= 10^0` `ghosts[i].length == 2` `-10^4 <= xi, yi <= 10^4` there can be multiple ghosts in the same location. `target.length == 2` `-10^4 <= xtarget, ytarget <= 10^4`",
790,Domino and Tromino Tiling,"We have two types of tiles: a 2x1 domino shape, and an ""L"" tromino shape. These shapes may be rotated.

XX  <- domino
XX  <- ""L"" tromino
X
Given N, how many ways are there to tile a 2 x N board? Return your answer modulo 10^9 + 7.

(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)

Example:
Input: 3
Output: 5
Explanation: 
The five different ways are listed below, different letters indicates different tiles:
XYZ XXZ XYY XXY XYY
XYZ YYZ XZZ XYY XXY
Note:
N  will be in range `[1, 1000]`.",Medium,https://leetcode.com/problems/domino-and-tromino-tiling,Google,Dynamic Programming,528,,"we have two types of tiles: a 2x1 domino shape, and an ""l"" tromino shape. these shapes may be rotated. xx <- domino xx <- ""l"" tromino x given n, how many ways are there to tile a 2 x n board? return your answer modulo 10^9 + 7. (in a tiling, every square must be covered by a tile. two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)","input: 3 output: 5 explanation: the five different ways are listed below, different letters indicates different tiles: xyz xxz xyy xxy xyy xyz yyz xzz xyy xxy note: n will be in range `[1, 1000]`.",,
791,Custom Sort String,"`S` and `T` are strings composed of lowercase letters. In `S`, no letter occurs more than once.

`S` was sorted in some custom order previously. We want to permute the characters of `T` so that they match the order that `S` was sorted. More specifically, if `x` occurs before `y` in `S`, then `x` should occur before `y` in the returned string.

Return any permutation of `T` (as a string) that satisfies this property.


Example :
Input: 
S = ""cba""
T = ""abcd""
Output: ""cbad""
Explanation: 
""a"", ""b"", ""c"" appear in S, so the order of ""a"", ""b"", ""c"" should be ""c"", ""b"", and ""a"". 
Since ""d"" does not appear in S, it can be at any position in T. ""dcba"", ""cdba"", ""cbda"" are also valid outputs.

Note:
`S` has length at most `26`, and no character is repeated in `S`.

`T` has length at most `200`.

`S` and `T` consist of lowercase letters only.",Medium,https://leetcode.com/problems/custom-sort-string,Facebook,String,1003,,"`s` and `t` are strings composed of lowercase letters. in `s`, no letter occurs more than once. `s` was sorted in some custom order previously. we want to permute the characters of `t` so that they match the order that `s` was sorted. more specifically, if `x` occurs before `y` in `s`, then `x` should occur before `y` in the returned string. return any permutation of `t` (as a string) that satisfies this property.","input: s = ""cba"" t = ""abcd"" output: ""cbad"" explanation: ""a"", ""b"", ""c"" appear in s, so the order of ""a"", ""b"", ""c"" should be ""c"", ""b"", and ""a"". since ""d"" does not appear in s, it can be at any position in t. ""dcba"", ""cdba"", ""cbda"" are also valid outputs. note: `s` has length at most `26`, and no character is repeated in `s`. `t` has length at most `200`. `s` and `t` consist of lowercase letters only.",,
792,Number of Matching Subsequences,"Given a string `s` and an array of strings `words`, return the number of `words[i]` that is a subsequence of `s`.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, `""ace""` is a subsequence of `""abcde""`.


Example 1:
Input: s = ""abcde"", words = [""a"",""bb"",""acd"",""ace""]
Output: 3
Explanation: There are three strings in words that are a subsequence of s: ""a"", ""acd"", ""ace"".


Example 2:
Input: s = ""dsahjpjauf"", words = [""ahjpjau"",""ja"",""ahbwzgqnuk"",""tnmlanowax""]
Output: 2

Constraints:
`1 <= s.length <= 5 * 104`
`1 <= words.length <= 5000`
`1 <= words[i].length <= 50`
`s` and `words[i]` consist of only lowercase English letters.",Medium,https://leetcode.com/problems/number-of-matching-subsequences,Google,Array,1345,"[Is Subsequence, /problems/is-subsequence/, Easy], [Shortest Way to Form String, /problems/shortest-way-to-form-string/, Medium]","given a string `s` and an array of strings `words`, return the number of `words[i]` that is a subsequence of `s`. a subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. for example, `""ace""` is a subsequence of `""abcde""`.","input: s = ""abcde"", words = [""a"",""bb"",""acd"",""ace""] output: 3 explanation: there are three strings in words that are a subsequence of s: ""a"", ""acd"", ""ace"". example 2: input: s = ""dsahjpjauf"", words = [""ahjpjau"",""ja"",""ahbwzgqnuk"",""tnmlanowax""] output: 2",`1 <= s.length <= 5 * 10^4` `1 <= words.length <= 5000` `1 <= words[i].length <= 50` `s` and `words[i]` consist of only lowercase english letters.,
793,Preimage Size of Factorial Zeroes Function,"Let `f(x)` be the number of zeroes at the end of `x!`. (Recall that `x! = 1 * 2 * 3 * ... * x`, and by convention, `0! = 1`.)
For example, `f(3) = 0` because 3! = 6 has no zeroes at the end, while `f(11) = 2` because 11! = 39916800 has 2 zeroes at the end. Given `K`, find how many non-negative integers `x` have the property that `f(x) = K`.


Example 1:
Input: K = 0
Output: 5
Explanation: 0!, 1!, 2!, 3!, and 4! end with K = 0 zeroes.


Example 2:
Input: K = 5
Output: 0
Explanation: There is no x such that x! ends in K = 5 zeroes.

Note:
`K` will be an integer in the range `[0, 10^9]`.",Hard,https://leetcode.com/problems/preimage-size-of-factorial-zeroes-function,Adobe,Binary Search,217,"[Factorial Trailing Zeroes, /problems/factorial-trailing-zeroes/, Easy]","let `f(x)` be the number of zeroes at the end of `x!`. (recall that `x! = 1 * 2 * 3 * ... * x`, and by convention, `0! = 1`.) for example, `f(3) = 0` because 3! = 6 has no zeroes at the end, while `f(11) = 2` because 11! = 39916800 has 2 zeroes at the end. given `k`, find how many non-negative integers `x` have the property that `f(x) = k`.","input: k = 0 output: 5 explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes. example 2: input: k = 5 output: 0 explanation: there is no x such that x! ends in k = 5 zeroes. note: `k` will be an integer in the range `[0, 10^9]`.",,
794,Valid Tic-Tac-Toe State,"A Tic-Tac-Toe board is given as a string array `board`. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.

The `board` is a 3 x 3 array, and consists of characters `"" ""`, `""X""`, and `""O""`.  The "" "" character represents an empty square.

Here are the rules of Tic-Tac-Toe:
Players take turns placing characters into empty squares ("" "").

The first player always places ""X"" characters, while the second player always places ""O"" characters.

""X"" and ""O"" characters are always placed into empty squares, never filled ones.

The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.

The game also ends if all squares are non-empty.

No more moves can be played if the game is over.


Example 1:
Input: board = [""O  "", ""   "", ""   ""]
Output: false
Explanation: The first player always plays ""X"".


Example 2:
Input: board = [""XOX"", "" X "", ""   ""]
Output: false
Explanation: Players take turns making moves.


Example 3:
Input: board = [""XXX"", ""   "", ""OOO""]
Output: false

Example 4:
Input: board = [""XOX"", ""O O"", ""XOX""]
Output: true
Note:
`board` is a length-3 array of strings, where each string `board[i]` has length 3.

Each `board[i][j]` is a character in the set `{"" "", ""X"", ""O""}`.",Medium,https://leetcode.com/problems/valid-tic-tac-toe-state,"Amazon,Facebook,Bloomberg","Math,Recursion",259,"[Design Tic-Tac-Toe, /problems/design-tic-tac-toe/, Medium]","a tic-tac-toe board is given as a string array `board`. return true if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game. the `board` is a 3 x 3 array, and consists of characters `"" ""`, `""x""`, and `""o""`. the "" "" character represents an empty square. here are the rules of tic-tac-toe: players take turns placing characters into empty squares ("" ""). the first player always places ""x"" characters, while the second player always places ""o"" characters. ""x"" and ""o"" characters are always placed into empty squares, never filled ones. the game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal. the game also ends if all squares are non-empty. no more moves can be played if the game is over.","input: board = [""o "", "" "", "" ""] output: false explanation: the first player always plays ""x"". example 2: input: board = [""xox"", "" x "", "" ""] output: false explanation: players take turns making moves. example 3: input: board = [""xxx"", "" "", ""ooo""] output: false example 4: input: board = [""xox"", ""o o"", ""xox""] output: true note: `board` is a length-3 array of strings, where each string `board[i]` has length 3. each `board[i][j]` is a character in the set `{"" "", ""x"", ""o""}`.",,
795,Number of Subarrays with Bounded Maximum,"We are given an array `A` of positive integers, and two positive integers `L` and `R` (`L <= R`).

Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least `L` and at most `R`.


Example :
Input: 
A = [2, 1, 4, 3]
L = 2
R = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].

Note:
L, R  and `A[i]` will be an integer in the range `[0, 10^9]`.

The length of `A` will be in the range of `[1, 50000]`.",Medium,https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum,DoorDash,Array,759,,"we are given an array `a` of positive integers, and two positive integers `l` and `r` (`l <= r`). return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least `l` and at most `r`.","input: a = [2, 1, 4, 3] l = 2 r = 3 output: 3 explanation: there are three subarrays that meet the requirements: [2], [2, 1], [3]. note: l, r and `a[i]` will be an integer in the range `[0, 10^9]`. the length of `a` will be in the range of `[1, 50000]`.",,
796,Rotate String,"We are given two strings, `A` and `B`.

A shift on `A` consists of taking string `A` and moving the leftmost character to the rightmost position. For example, if `A = 'abcde'`, then it will be `'bcdea'` after one shift on `A`. Return `True` if and only if `A` can become `B` after some number of shifts on `A`.


Example 1:
Input: A = 'abcde', B = 'cdeab'
Output: true

Example 2:
Input: A = 'abcde', B = 'abced'
Output: false
Note:
`A` and `B` will have length at most `100`.",Easy,https://leetcode.com/problems/rotate-string,"Amazon,Microsoft,Oracle",,1059,,"we are given two strings, `a` and `b`. a shift on `a` consists of taking string `a` and moving the leftmost character to the rightmost position. for example, if `a = 'abcde'`, then it will be `'bcdea'` after one shift on `a`. return `true` if and only if `a` can become `b` after some number of shifts on `a`.","input: a = 'abcde', b = 'cdeab' output: true example 2: input: a = 'abcde', b = 'abced' output: false note: `a` and `b` will have length at most `100`.",,
797,All Paths From Source to Target,"Given a directed acyclic graph (DAG) of `n` nodes labeled from 0 to n - 1, find all possible paths from node `0` to node `n - 1`, and return them in any order.

The graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`).


Example 1:
Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.


Example 2:
Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]

Example 3:
Input: graph = [[1],[]]
Output: [[0,1]]

Example 4:
Input: graph = [[1,2,3],[2],[3],[]]
Output: [[0,1,2,3],[0,2,3],[0,3]]

Example 5:
Input: graph = [[1,3],[2],[3],[]]
Output: [[0,1,2,3],[0,3]]

Constraints:
`n == graph.length`
`2 <= n <= 15`
`0 <= graph[i][j] < n`
`graph[i][j] != i` (i.e., there will be no self-loops).

The input graph is guaranteed to be a DAG.",Medium,https://leetcode.com/problems/all-paths-from-source-to-target,"Bloomberg,Amazon","Backtracking,Depth-first Search,Graph",1798,,"given a directed acyclic graph (dag) of `n` nodes labeled from 0 to n - 1, find all possible paths from node `0` to node `n - 1`, and return them in any order. the graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`).","input: graph = [[1,2],[3],[3],[]] output: [[0,1,3],[0,2,3]] explanation: there are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3. example 2: input: graph = [[4,3,1],[3,2,4],[3],[4],[]] output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]] example 3: input: graph = [[1],[]] output: [[0,1]] example 4: input: graph = [[1,2,3],[2],[3],[]] output: [[0,1,2,3],[0,2,3],[0,3]] example 5: input: graph = [[1,3],[2],[3],[]] output: [[0,1,2,3],[0,3]]","`n == graph.length` `2 <= n <= 15` `0 <= graph[i][j] < n` `graph[i][j] != i` (i.e., there will be no self-loops). the input graph is guaranteed to be a dag.",
798,Smallest Rotation with Highest Score," Given an array `A`, we may rotate it by a non-negative integer `K` so that the array becomes `A[K], A[K+1], A{K+2], ... A[A.length - 1], A[0], A[1], ..., A[K-1]`.  Afterward, any entries that are less than or equal to their index are worth 1 point. 
For example, if we have `[2, 4, 1, 3, 0]`, and we rotate by `K = 2`, it becomes `[1, 3, 0, 2, 4]`.  This is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].

Over all possible rotations, return the rotation index K that corresponds to the highest score we could receive.  If there are multiple answers, return the smallest such index K.


Example 1:
Input: [2, 3, 1, 4, 0]
Output: 3
Explanation:  
Scores for each K are listed below: 
K = 0,  A = [2,3,1,4,0],    score 2
K = 1,  A = [3,1,4,0,2],    score 3
K = 2,  A = [1,4,0,2,3],    score 3
K = 3,  A = [4,0,2,3,1],    score 4
K = 4,  A = [0,2,3,1,4],    score 3
So we should choose K = 3, which has the highest score.


Example 2:
Input: [1, 3, 0, 2, 4]
Output: 0
Explanation:  A will always have 3 points no matter how it shifts.

So we will choose the smallest K, which is 0.

Note:
`A` will have length at most `20000`.

`A[i]` will be in the range `[0, A.length]`.",Hard,https://leetcode.com/problems/smallest-rotation-with-highest-score,,,262,,"given an array `a`, we may rotate it by a non-negative integer `k` so that the array becomes `a[k], a[k+1], a{k+2], ... a[a.length - 1], a[0], a[1], ..., a[k-1]`. afterward, any entries that are less than or equal to their index are worth 1 point. for example, if we have `[2, 4, 1, 3, 0]`, and we rotate by `k = 2`, it becomes `[1, 3, 0, 2, 4]`. this is worth 3 points because 1 > 0 [no points], 3 > 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point]. over all possible rotations, return the rotation index k that corresponds to the highest score we could receive. if there are multiple answers, return the smallest such index k.","input: [2, 3, 1, 4, 0] output: 3 explanation: scores for each k are listed below: k = 0, a = [2,3,1,4,0], score 2 k = 1, a = [3,1,4,0,2], score 3 k = 2, a = [1,4,0,2,3], score 3 k = 3, a = [4,0,2,3,1], score 4 k = 4, a = [0,2,3,1,4], score 3 so we should choose k = 3, which has the highest score. example 2: input: [1, 3, 0, 2, 4] output: 0 explanation: a will always have 3 points no matter how it shifts. so we will choose the smallest k, which is 0. note: `a` will have length at most `20000`. `a[i]` will be in the range `[0, a.length]`.",,
799,Champagne Tower,"We stack glasses in a pyramid, where the first row has `1` glass, the second row has `2` glasses, and so on until the 100th row.  Each glass holds one cup of champagne.

Then, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)
For example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.

Now after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)

Example 1:
Input: poured = 1, query_row = 1, query_glass = 1
Output: 0.00000
Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.


Example 2:
Input: poured = 2, query_row = 1, query_glass = 1
Output: 0.50000
Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.


Example 3:
Input: poured = 100000009, query_row = 33, query_glass = 17
Output: 1.00000

Constraints:
`0 <= poured <= 109`
`0 <= query_glass <= query_row < 100`",Medium,https://leetcode.com/problems/champagne-tower,Samsung,Dynamic Programming,780,,"we stack glasses in a pyramid, where the first row has `1` glass, the second row has `2` glasses, and so on until the 100th row. each glass holds one cup of champagne. then, some champagne is poured into the first glass at the top. when the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it. when those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on. (a glass at the bottom row has its excess champagne fall on the floor.) for example, after one cup of champagne is poured, the top most glass is full. after two cups of champagne are poured, the two glasses on the second row are half full. after three cups of champagne are poured, those two cups become full - there are 3 full glasses total now. after four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below. now after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)","input: poured = 1, query_row = 1, query_glass = 1 output: 0.00000 explanation: we poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). there will be no excess liquid so all the glasses under the top glass will remain empty. example 2: input: poured = 2, query_row = 1, query_glass = 1 output: 0.50000 explanation: we poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). there is one cup of excess liquid. the glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange. example 3: input: poured = 100000009, query_row = 33, query_glass = 17 output: 1.00000",`0 <= poured <= 10^9` `0 <= query_glass <= query_row < 10^0`,
800,Similar RGB Color,"In the following, every capital letter represents some hexadecimal digit from `0` to `f`.

The red-green-blue color `""#AABBCC""` can be written as `""#ABC""` in shorthand.  For example, `""#15c""` is shorthand for the color `""#1155cc""`.

Now, say the similarity between two colors `""#ABCDEF""` and `""#UVWXYZ""` is `-(AB - UV)^2 - (CD - WX)^2 - (EF - YZ)^2`.

Given the color `""#ABCDEF""`, return a 7 character color that is most similar to `#ABCDEF`, and has a shorthand (that is, it can be represented as some `""#XYZ""`

Example 1:
Input: color = ""#09f166""
Output: ""#11ee66""
Explanation:  
The similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 = -64 -9 -0 = -73.

This is the highest among any shorthand color.

Note:
`color` is a string of length `7`.

`color` is a valid RGB color: for `i > 0`, `color[i]` is a hexadecimal digit from `0` to `f`
Any answer which has the same (highest) similarity as the best answer will be accepted.

All inputs and outputs should use lowercase letters, and the output is 7 characters.",Easy,https://leetcode.com/problems/similar-rgb-color,Google,"Math,String",66,,"in the following, every capital letter represents some hexadecimal digit from `0` to `f`. the red-green-blue color `""#aabbcc""` can be written as `""#abc""` in shorthand. for example, `""#15c""` is shorthand for the color `""#1155cc""`. now, say the similarity between two colors `""#abcdef""` and `""#uvwxyz""` is `-(ab - uv)^2 - (cd - wx)^2 - (ef - yz)^2`. given the color `""#abcdef""`, return a 7 character color that is most similar to `#abcdef`, and has a shorthand (that is, it can be represented as some `""#xyz""`","input: color = ""#09f166"" output: ""#11ee66"" explanation: the similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 = -64 -9 -0 = -73. this is the highest among any shorthand color. note: `color` is a string of length `7`. `color` is a valid rgb color: for `i > 0`, `color[i]` is a hexadecimal digit from `0` to `f` any answer which has the same (highest) similarity as the best answer will be accepted. all inputs and outputs should use lowercase letters, and the output is 7 characters.",,
801,Minimum Swaps To Make Sequences Increasing,"We have two integer sequences `A` and `B` of the same non-zero length.

We are allowed to swap elements `A[i]` and `B[i]`.  Note that both elements are in the same index position in their respective sequences.

At the end of some number of swaps, `A` and `B` are both strictly increasing.  (A sequence is strictly increasing if and only if `A[0] < A[1] < A[2] < ... < A[A.length - 1]`.)
Given A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.


Example:
Input: A = [1,3,5,4], B = [1,2,3,7]
Output: 1
Explanation: 
Swap A[3] and B[3].  Then the sequences are:
A = [1, 3, 5, 7] and B = [1, 2, 3, 4]
which are both strictly increasing.

Note:
`A, B` are arrays with the same length, and that length will be in the range `[1, 1000]`.

`A[i], B[i]` are integer values in the range `[0, 2000]`.",Medium,https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing,Oracle,Dynamic Programming,1478,,"we have two integer sequences `a` and `b` of the same non-zero length. we are allowed to swap elements `a[i]` and `b[i]`. note that both elements are in the same index position in their respective sequences. at the end of some number of swaps, `a` and `b` are both strictly increasing. (a sequence is strictly increasing if and only if `a[0] < a[1] < a[2] < ... < a[a.length - 1]`.) given a and b, return the minimum number of swaps to make both sequences strictly increasing. it is guaranteed that the given input always makes it possible.","input: a = [1,3,5,4], b = [1,2,3,7] output: 1 explanation: swap a[3] and b[3]. then the sequences are: a = [1, 3, 5, 7] and b = [1, 2, 3, 4] which are both strictly increasing. note: `a, b` are arrays with the same length, and that length will be in the range `[1, 1000]`. `a[i], b[i]` are integer values in the range `[0, 2000]`.",,
802,Find Eventual Safe States,"We start at some node in a directed graph, and every turn, we walk along a directed edge of the graph. If we reach a terminal node (that is, it has no outgoing directed edges), we stop.

We define a starting node to be safe if we must eventually walk to a terminal node. More specifically, there is a natural number `k`, so that we must have stopped at a terminal node in less than `k` steps for any choice of where to walk.

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

The directed graph has `n` nodes with labels from `0` to `n - 1`, where `n` is the length of `graph`. The graph is given in the following form: `graph[i]` is a list of labels `j` such that `(i, j)` is a directed edge of the graph, going from node `i` to node `j`.


Example 1:
Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.


Example 2:
Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
Output: [4]

Constraints:
`n == graph.length`
`1 <= n <= 104`
`0 <= graph[i].legnth <= n`
`graph[i]` is sorted in a strictly increasing order.

The graph may contain self-loops.

The number of edges in the graph will be in the range `[1, 4 * 104]`.",Medium,https://leetcode.com/problems/find-eventual-safe-states,Amazon,"Depth-first Search,Graph",1106,,"we start at some node in a directed graph, and every turn, we walk along a directed edge of the graph. if we reach a terminal node (that is, it has no outgoing directed edges), we stop. we define a starting node to be safe if we must eventually walk to a terminal node. more specifically, there is a natural number `k`, so that we must have stopped at a terminal node in less than `k` steps for any choice of where to walk. return an array containing all the safe nodes of the graph. the answer should be sorted in ascending order. the directed graph has `n` nodes with labels from `0` to `n - 1`, where `n` is the length of `graph`. the graph is given in the following form: `graph[i]` is a list of labels `j` such that `(i, j)` is a directed edge of the graph, going from node `i` to node `j`.","input: graph = [[1,2],[2,3],[5],[0],[5],[],[]] output: [2,4,5,6] explanation: the given graph is shown above. example 2: input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]] output: [4]","`n == graph.length` `1 <= n <= 10^4` `0 <= graph[i].legnth <= n` `graph[i]` is sorted in a strictly increasing order. the graph may contain self-loops. the number of edges in the graph will be in the range `[1, 4 * 10^4]`.",
803,Bricks Falling When Hit,"You are given an `m x n` binary `grid`, where each `1` represents a brick and `0` represents an empty space. A brick is stable if:
It is directly connected to the top of the grid, or
At least one other brick in its four adjacent cells is stable.

You are also given an array `hits`, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location `hits[i] = (rowi, coli)`. The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the `grid` (i.e., it does not land on other stable bricks).

Return an array `result`, where each `result[i]` is the number of bricks that will fall after the `ith` erasure is applied.

Note that an erasure may refer to a location with no brick, and if it does, no bricks drop.


Example 1:
Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]
Output: [2]
Explanation: Starting with the grid:
[[1,0,0,0],
 [1,1,1,0]]
We erase the underlined brick at (1,0), resulting in the grid:
[[1,0,0,0],
 [0,1,1,0]]
The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:
[[1,0,0,0],
 [0,0,0,0]]
Hence the result is [2].


Example 2:
Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]
Output: [0,0]
Explanation: Starting with the grid:
[[1,0,0,0],
 [1,1,0,0]]
We erase the underlined brick at (1,1), resulting in the grid:
[[1,0,0,0],
 [1,0,0,0]]
All remaining bricks are still stable, so no bricks fall. The grid remains the same:
[[1,0,0,0],
 [1,0,0,0]]
Next, we erase the underlined brick at (1,0), resulting in the grid:
[[1,0,0,0],
 [0,0,0,0]]
Once again, all remaining bricks are still stable, so no bricks fall.

Hence the result is [0,0].


Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 200`
`grid[i][j]` is `0` or `1`.

`1 <= hits.length <= 4 * 104`
`hits[i].length == 2`
`0 <= xi <= m - 1`
`0 <= yi <= n - 1`
All `(xi, yi)` are unique.",Hard,https://leetcode.com/problems/bricks-falling-when-hit,Google,Union Find,534,,"you are given an `m x n` binary `grid`, where each `1` represents a brick and `0` represents an empty space. a brick is stable if: it is directly connected to the top of the grid, or at least one other brick in its four adjacent cells is stable. you are also given an array `hits`, which is a sequence of erasures we want to apply. each time we want to erase the brick at the location `hits[i] = (rowi, coli)`. the brick on that location (if it exists) will disappear. some other bricks may no longer be stable because of that erasure and will fall. once a brick falls, it is immediately erased from the `grid` (i.e., it does not land on other stable bricks). return an array `result`, where each `result[i]` is the number of bricks that will fall after the `ith` erasure is applied. note that an erasure may refer to a location with no brick, and if it does, no bricks drop.","input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]] output: [2] explanation: starting with the grid: [[1,0,0,0], [1,1,1,0]] we erase the underlined brick at (1,0), resulting in the grid: [[1,0,0,0], [0,1,1,0]] the two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. the resulting grid is: [[1,0,0,0], [0,0,0,0]] hence the result is [2]. example 2: input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]] output: [0,0] explanation: starting with the grid: [[1,0,0,0], [1,1,0,0]] we erase the underlined brick at (1,1), resulting in the grid: [[1,0,0,0], [1,0,0,0]] all remaining bricks are still stable, so no bricks fall. the grid remains the same: [[1,0,0,0], [1,0,0,0]] next, we erase the underlined brick at (1,0), resulting in the grid: [[1,0,0,0], [0,0,0,0]] once again, all remaining bricks are still stable, so no bricks fall. hence the result is [0,0].","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 200` `grid[i][j]` is `0` or `1`. `1 <= hits.length <= 4 * 10^4` `hits[i].length == 2` `0 <= xi <= m - 1` `0 <= yi <= n - 1` all `(xi, yi)` are unique.",
804,Unique Morse Code Words,"International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: `""a""` maps to `"".-""`, `""b""` maps to `""-...""`, `""c""` maps to `""-.-.""`, and so on.

For convenience, the full table for the 26 letters of the English alphabet is given below:
["".-"",""-..."",""-.-."",""-.."",""."",""..-."",""--."",""...."","".."","".---"",""-.-"","".-.."",""--"",""-."",""---"","".--."",""--.-"","".-."",""..."",""-"",""..-"",""...-"","".--"",""-..-"",""-.--"",""--..""]
Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter. For example, ""cab"" can be written as ""-.-..--..."", (which is the concatenation ""-.-."" + "".-"" + ""`-...`""). We'll call such a concatenation, the transformation of a word.

Return the number of different transformations among all words we have.


Example:
Input: words = [""gin"", ""zen"", ""gig"", ""msg""]
Output: 2
Explanation: 
The transformation of each word is:
""gin"" -> ""--...-.""
""zen"" -> ""--...-.""
""gig"" -> ""--...--.""
""msg"" -> ""--...--.""
There are 2 different transformations, ""--...-."" and ""--...--."".

Note:
The length of `words` will be at most `100`.

Each `words[i]` will have length in range `[1, 12]`.

`words[i]` will only consist of lowercase letters.",Easy,https://leetcode.com/problems/unique-morse-code-words,,,905,,"international morse code defines a standard encoding where each letter is mapped to a series of dots and dashes, as follows: `""a""` maps to `"".-""`, `""b""` maps to `""-...""`, `""c""` maps to `""-.-.""`, and so on. for convenience, the full table for the 26 letters of the english alphabet is given below: ["".-"",""-..."",""-.-."",""-.."",""."",""..-."",""--."",""...."","".."","".---"",""-.-"","".-.."",""--"",""-."",""---"","".--."",""--.-"","".-."",""..."",""-"",""..-"",""...-"","".--"",""-..-"",""-.--"",""--..""] now, given a list of words, each word can be written as a concatenation of the morse code of each letter. for example, ""cab"" can be written as ""-.-..--..."", (which is the concatenation ""-.-."" + "".-"" + ""`-...`""). we'll call such a concatenation, the transformation of a word. return the number of different transformations among all words we have.","input: words = [""gin"", ""zen"", ""gig"", ""msg""] output: 2 explanation: the transformation of each word is: ""gin"" -> ""--...-."" ""zen"" -> ""--...-."" ""gig"" -> ""--...--."" ""msg"" -> ""--...--."" there are 2 different transformations, ""--...-."" and ""--...--."". note: the length of `words` will be at most `100`. each `words[i]` will have length in range `[1, 12]`. `words[i]` will only consist of lowercase letters.",,
805,Split Array With Same Average,"You are given an integer array `nums`.

You should move each element of `nums` into one of the two arrays `A` and `B` such that `A` and `B` are non-empty, and `average(A) == average(B)`.

Return `true` if it is possible to achieve that and `false` otherwise.

Note that for an array `arr`, `average(arr)` is the sum of all the elements of `arr` over the length of `arr`.


Example 1:
Input: nums = [1,2,3,4,5,6,7,8]
Output: true
Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.


Example 2:
Input: nums = [3,1]
Output: false

Constraints:
`1 <= nums.length <= 30`
`0 <= nums[i] <= 104`",Hard,https://leetcode.com/problems/split-array-with-same-average,Apple,Math,506,,"you are given an integer array `nums`. you should move each element of `nums` into one of the two arrays `a` and `b` such that `a` and `b` are non-empty, and `average(a) == average(b)`. return `true` if it is possible to achieve that and `false` otherwise. note that for an array `arr`, `average(arr)` is the sum of all the elements of `arr` over the length of `arr`.","input: nums = [1,2,3,4,5,6,7,8] output: true explanation: we can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5. example 2: input: nums = [3,1] output: false",`1 <= nums.length <= 30` `0 <= nums[i] <= 10^4`,
806,Number of Lines To Write String,"You are given a string `s` of lowercase English letters and an array `widths` denoting how many pixels wide each lowercase English letter is. Specifically, `widths[0]` is the width of `'a'`, `widths[1]` is the width of `'b'`, and so on.

You are trying to write `s` across several lines, where each line is no longer than `100` pixels. Starting at the beginning of `s`, write as many letters on the first line such that the total width does not exceed `100` pixels. Then, from where you stopped in `s`, continue writing as many letters as you can on the second line. Continue this process until you have written all of `s`.

Return an array `result` of length 2 where:
`result[0]` is the total number of lines.

`result[1]` is the width of the last line in pixels.


Example 1:
Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = ""abcdefghijklmnopqrstuvwxyz""
Output: [3,60]
Explanation: You can write s as follows:
abcdefghij  // 100 pixels wide
klmnopqrst  // 100 pixels wide
uvwxyz      // 60 pixels wide
There are a total of 3 lines, and the last line is 60 pixels wide.


Example 2:
Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = ""bbbcccdddaaa""
Output: [2,4]
Explanation: You can write s as follows:
bbbcccdddaa  // 98 pixels wide
a            // 4 pixels wide
There are a total of 2 lines, and the last line is 4 pixels wide.


Constraints:
`widths.length == 26`
`2 <= widths[i] <= 10`
`1 <= s.length <= 1000`
`s` contains only lowercase English letters.",Easy,https://leetcode.com/problems/number-of-lines-to-write-string,Google,,285,,"you are given a string `s` of lowercase english letters and an array `widths` denoting how many pixels wide each lowercase english letter is. specifically, `widths[0]` is the width of `'a'`, `widths[1]` is the width of `'b'`, and so on. you are trying to write `s` across several lines, where each line is no longer than `100` pixels. starting at the beginning of `s`, write as many letters on the first line such that the total width does not exceed `100` pixels. then, from where you stopped in `s`, continue writing as many letters as you can on the second line. continue this process until you have written all of `s`. return an array `result` of length 2 where: `result[0]` is the total number of lines. `result[1]` is the width of the last line in pixels.","input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = ""abcdefghijklmnopqrstuvwxyz"" output: [3,60] explanation: you can write s as follows: abcdefghij // 100 pixels wide klmnopqrst // 100 pixels wide uvwxyz // 60 pixels wide there are a total of 3 lines, and the last line is 60 pixels wide. example 2: input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = ""bbbcccdddaaa"" output: [2,4] explanation: you can write s as follows: bbbcccdddaa // 98 pixels wide a // 4 pixels wide there are a total of 2 lines, and the last line is 4 pixels wide.",`widths.length == 26` `2 <= widths[i] <= 10` `1 <= s.length <= 1000` `s` contains only lowercase english letters.,
807,Max Increase to Keep City Skyline,"In a 2 dimensional array `grid`, each value `grid[i][j]` represents the height of a building located there. We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). Height 0 is considered to be a building as well. 
At the end, the ""skyline"" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. A city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.

What is the maximum total sum that the height of the buildings can be increased?

Example:
Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
Output: 35
Explanation: 
The grid is:
[ [3, 0, 8, 4], 
  [2, 4, 5, 7],
  [9, 2, 6, 3],
  [0, 3, 1, 0] ]
The skyline viewed from top or bottom is: [9, 4, 8, 7]
The skyline viewed from left or right is: [8, 7, 9, 3]
The grid after increasing the height of buildings without affecting skylines is:
gridNew = [ [8, 4, 8, 7],
            [7, 4, 7, 7],
            [9, 4, 8, 7],
            [3, 3, 3, 3] ]
Notes: 
`1 < grid.length = grid[0].length <= 50`.

All heights `grid[i][j]` are in the range `[0, 100]`.

All buildings in `grid[i][j]` occupy the entire grid cell: that is, they are a `1 x 1 x grid[i][j]` rectangular prism.",Medium,https://leetcode.com/problems/max-increase-to-keep-city-skyline,Google,,1116,,"in a 2 dimensional array `grid`, each value `grid[i][j]` represents the height of a building located there. we are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings). height 0 is considered to be a building as well. at the end, the ""skyline"" when viewed from all four directions of the grid, i.e. top, bottom, left, and right, must be the same as the skyline of the original grid. a city's skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. see the following example. what is the maximum total sum that the height of the buildings can be increased?","input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]] output: 35 explanation: the grid is: [ [3, 0, 8, 4], [2, 4, 5, 7], [9, 2, 6, 3], [0, 3, 1, 0] ] the skyline viewed from top or bottom is: [9, 4, 8, 7] the skyline viewed from left or right is: [8, 7, 9, 3] the grid after increasing the height of buildings without affecting skylines is: gridnew = [ [8, 4, 8, 7], [7, 4, 7, 7], [9, 4, 8, 7], [3, 3, 3, 3] ] notes: `1 < grid.length = grid[0].length <= 50`. all heights `grid[i][j]` are in the range `[0, 100]`. all buildings in `grid[i][j]` occupy the entire grid cell: that is, they are a `1 x 1 x grid[i][j]` rectangular prism.",,
808,Soup Servings,"There are two types of soup: type A and type B. Initially we have `N` ml of each type of soup. There are four kinds of operations:
Serve 100 ml of soup A and 0 ml of soup B
Serve 75 ml of soup A and 25 ml of soup B
Serve 50 ml of soup A and 50 ml of soup B
Serve 25 ml of soup A and 75 ml of soup B
When we serve some soup, we give it to someone and we no longer have it.  Each turn, we will choose from the four operations with equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as we can.  We stop once we no longer have some quantity of both types of soup.

Note that we do not have the operation where all 100 ml's of soup B are used first.  
Return the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time.


Example:
Input: N = 50
Output: 0.625
Explanation: 
If we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.

Notes: 
`0 <= N <= 10^9`. 
Answers within `10^-6` of the true value will be accepted as correct.",Medium,https://leetcode.com/problems/soup-servings,Google,Dynamic Programming,196,,"there are two types of soup: type a and type b. initially we have `n` ml of each type of soup. there are four kinds of operations: serve 100 ml of soup a and 0 ml of soup b serve 75 ml of soup a and 25 ml of soup b serve 50 ml of soup a and 50 ml of soup b serve 25 ml of soup a and 75 ml of soup b when we serve some soup, we give it to someone and we no longer have it. each turn, we will choose from the four operations with equal probability 0.25. if the remaining volume of soup is not enough to complete the operation, we will serve as much as we can. we stop once we no longer have some quantity of both types of soup. note that we do not have the operation where all 100 ml's of soup b are used first. return the probability that soup a will be empty first, plus half the probability that a and b become empty at the same time.","input: n = 50 output: 0.625 explanation: if we choose the first two operations, a will become empty first. for the third operation, a and b will become empty at the same time. for the fourth operation, b will become empty first. so the total probability of a becoming empty first plus half the probability that a and b become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625. notes: `0 <= n <= 10^9`. answers within `10^-6` of the true value will be accepted as correct.",,
809,Expressive Words,"Sometimes people repeat letters to represent extra feeling, such as ""hello"" -> ""heeellooo"", ""hi"" -> ""hiiii"".  In these strings like ""heeellooo"", we have groups of adjacent letters that are all the same:  ""h"", ""eee"", ""ll"", ""ooo"".

For some given string `S`, a query word is stretchy if it can be made to be equal to `S` by any number of applications of the following extension operation: choose a group consisting of characters `c`, and add some number of characters `c` to the group so that the size of the group is 3 or more.

For example, starting with ""hello"", we could do an extension on the group ""o"" to get ""hellooo"", but we cannot get ""helloo"" since the group ""oo"" has size less than 3.  Also, we could do another extension like ""ll"" -> ""lllll"" to get ""helllllooo"".  If `S = ""helllllooo""`, then the query word ""hello"" would be stretchy because of these two extension operations: `query = ""hello"" -> ""hellooo"" -> ""helllllooo"" = S`.

Given a list of query words, return the number of words that are stretchy. 

Example:
Input: 
S = ""heeellooo""
words = [""hello"", ""hi"", ""helo""]
Output: 1
Explanation: 
We can extend ""e"" and ""o"" in the word ""hello"" to get ""heeellooo"".

We can't extend ""helo"" to get ""heeellooo"" because the group ""ll"" is not size 3 or more.


Constraints:
`0 <= len(S) <= 100`.

`0 <= len(words) <= 100`.

`0 <= len(words[i]) <= 100`.

`S` and all words in `words` consist only of lowercase letters",Medium,https://leetcode.com/problems/expressive-words,Google,String,463,,"sometimes people repeat letters to represent extra feeling, such as ""hello"" -> ""heeellooo"", ""hi"" -> ""hiiii"". in these strings like ""heeellooo"", we have groups of adjacent letters that are all the same: ""h"", ""eee"", ""ll"", ""ooo"". for some given string `s`, a query word is stretchy if it can be made to be equal to `s` by any number of applications of the following extension operation: choose a group consisting of characters `c`, and add some number of characters `c` to the group so that the size of the group is 3 or more. for example, starting with ""hello"", we could do an extension on the group ""o"" to get ""hellooo"", but we cannot get ""helloo"" since the group ""oo"" has size less than 3. also, we could do another extension like ""ll"" -> ""lllll"" to get ""helllllooo"". if `s = ""helllllooo""`, then the query word ""hello"" would be stretchy because of these two extension operations: `query = ""hello"" -> ""hellooo"" -> ""helllllooo"" = s`. given a list of query words, return the number of words that are stretchy.","input: s = ""heeellooo"" words = [""hello"", ""hi"", ""helo""] output: 1 explanation: we can extend ""e"" and ""o"" in the word ""hello"" to get ""heeellooo"". we can't extend ""helo"" to get ""heeellooo"" because the group ""ll"" is not size 3 or more.",`0 <= len(s) <= 10^0`. `0 <= len(words) <= 10^0`. `0 <= len(words[i]) <= 10^0`. `s` and all words in `words` consist only of lowercase letters,
810,Chalkboard XOR Game,"We are given non-negative integers nums[i] which are written on a chalkboard.  Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first.  If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses.  (Also, we'll say the bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.)
Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.

Return True if and only if Alice wins the game, assuming both players play optimally.


Example:
Input: nums = [1, 1, 2]
Output: false
Explanation: 
Alice has two choices: erase 1 or erase 2. 
If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. 
If Alice erases 2 first, now nums becomes [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.

Notes: 
`1 <= N <= 1000`. 
`0 <= nums[i] <= 2^16`.",Hard,https://leetcode.com/problems/chalkboard-xor-game,Garena,Math,80,,"we are given non-negative integers nums[i] which are written on a chalkboard. alice and bob take turns erasing exactly one number from the chalkboard, with alice starting first. if erasing a number causes the bitwise xor of all the elements of the chalkboard to become 0, then that player loses. (also, we'll say the bitwise xor of one element is that element itself, and the bitwise xor of no elements is 0.) also, if any player starts their turn with the bitwise xor of all the elements of the chalkboard equal to 0, then that player wins. return true if and only if alice wins the game, assuming both players play optimally.","input: nums = [1, 1, 2] output: false explanation: alice has two choices: erase 1 or erase 2. if she erases 1, the nums array becomes [1, 2]. the bitwise xor of all the elements of the chalkboard is 1 xor 2 = 3. now bob can remove any element he wants, because alice will be the one to erase the last element and she will lose. if alice erases 2 first, now nums becomes [1, 1]. the bitwise xor of all the elements of the chalkboard is 1 xor 1 = 0. alice will lose. notes: `1 <= n <= 1000`. `0 <= nums[i] <= 2^16`.",,
811,Subdomain Visit Count,"A website domain like ""discuss.leetcode.com"" consists of various subdomains. At the top level, we have ""com"", at the next level, we have ""leetcode.com"", and at the lowest level, ""discuss.leetcode.com"". When we visit a domain like ""discuss.leetcode.com"", we will also visit the parent domains ""leetcode.com"" and ""com"" implicitly.

Now, call a ""count-paired domain"" to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be ""9001 discuss.leetcode.com"".

We are given a list `cpdomains` of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.


Example 1:
Input: 
[""9001 discuss.leetcode.com""]
Output: 
[""9001 discuss.leetcode.com"", ""9001 leetcode.com"", ""9001 com""]
Explanation: 
We only have one website domain: ""discuss.leetcode.com"". As discussed above, the subdomain ""leetcode.com"" and ""com"" will also be visited. So they will all be visited 9001 times.


Example 2:
Input: 
[""900 google.mail.com"", ""50 yahoo.com"", ""1 intel.mail.com"", ""5 wiki.org""]
Output: 
[""901 mail.com"",""50 yahoo.com"",""900 google.mail.com"",""5 wiki.org"",""5 org"",""1 intel.mail.com"",""951 com""]
Explanation: 
We will visit ""google.mail.com"" 900 times, ""yahoo.com"" 50 times, ""intel.mail.com"" once and ""wiki.org"" 5 times. For the subdomains, we will visit ""mail.com"" 900 + 1 = 901 times, ""com"" 900 + 50 + 1 = 951 times, and ""org"" 5 times.

Notes: 
The length of `cpdomains` will not exceed `100`. 
The length of each domain name will not exceed `100`.

Each address will have either 1 or 2 ""."" characters.

The input count in any count-paired domain will not exceed `10000`.

The answer output can be returned in any order.",Easy,https://leetcode.com/problems/subdomain-visit-count,"Karat,Wayfair,Indeed,Intuit,Pinterest,Roblox",Hash Table,680,,"a website domain like ""discuss.leetcode.com"" consists of various subdomains. at the top level, we have ""com"", at the next level, we have ""leetcode.com"", and at the lowest level, ""discuss.leetcode.com"". when we visit a domain like ""discuss.leetcode.com"", we will also visit the parent domains ""leetcode.com"" and ""com"" implicitly. now, call a ""count-paired domain"" to be a count (representing the number of visits this domain received), followed by a space, followed by the address. an example of a count-paired domain might be ""9001 discuss.leetcode.com"". we are given a list `cpdomains` of count-paired domains. we would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.","input: [""9001 discuss.leetcode.com""] output: [""9001 discuss.leetcode.com"", ""9001 leetcode.com"", ""9001 com""] explanation: we only have one website domain: ""discuss.leetcode.com"". as discussed above, the subdomain ""leetcode.com"" and ""com"" will also be visited. so they will all be visited 9001 times. example 2: input: [""900 google.mail.com"", ""50 yahoo.com"", ""1 intel.mail.com"", ""5 wiki.org""] output: [""901 mail.com"",""50 yahoo.com"",""900 google.mail.com"",""5 wiki.org"",""5 org"",""1 intel.mail.com"",""951 com""] explanation: we will visit ""google.mail.com"" 900 times, ""yahoo.com"" 50 times, ""intel.mail.com"" once and ""wiki.org"" 5 times. for the subdomains, we will visit ""mail.com"" 900 + 1 = 901 times, ""com"" 900 + 50 + 1 = 951 times, and ""org"" 5 times. notes: the length of `cpdomains` will not exceed `100`. the length of each domain name will not exceed `100`. each address will have either 1 or 2 ""."" characters. the input count in any count-paired domain will not exceed `10000`. the answer output can be returned in any order.",,
812,Largest Triangle Area,"You have a list of points in the plane. Return the area of the largest triangle that can be formed by any 3 of the points.


Example:
Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
Output: 2
Explanation: 
The five points are show in the figure below. The red triangle is the largest.

Notes: 
`3 <= points.length <= 50`.

No points will be duplicated.

 `-50 <= points[i][j] <= 50`.

Answers within `10^-6` of the true value will be accepted as correct.",Easy,https://leetcode.com/problems/largest-triangle-area,Google,Math,238,"[Largest Perimeter Triangle, /problems/largest-perimeter-triangle/, Easy]",you have a list of points in the plane. return the area of the largest triangle that can be formed by any 3 of the points.,"input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]] output: 2 explanation: the five points are show in the figure below. the red triangle is the largest. notes: `3 <= points.length <= 50`. no points will be duplicated. `-50 <= points[i][j] <= 50`. answers within `10^-6` of the true value will be accepted as correct.",,
813,Largest Sum of Averages,"We partition a row of numbers `A` into at most `K` adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?
Note that our partition must use every number in A, and that scores are not necessarily integers.


Example:
Input: 
A = [9,1,2,3,9]
K = 3
Output: 20
Explanation: 
The best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.

We could have also partitioned A into [9, 1], [2], [3, 9], for example.

That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.

Note: 
`1 <= A.length <= 100`.

`1 <= A[i] <= 10000`.

`1 <= K <= A.length`.

Answers within `10^-6` of the correct answer will be accepted as correct.",Medium,https://leetcode.com/problems/largest-sum-of-averages,Amazon,Dynamic Programming,1183,,"we partition a row of numbers `a` into at most `k` adjacent (non-empty) groups, then our score is the sum of the average of each group. what is the largest score we can achieve? note that our partition must use every number in a, and that scores are not necessarily integers.","input: a = [9,1,2,3,9] k = 3 output: 20 explanation: the best choice is to partition a into [9], [1, 2, 3], [9]. the answer is 9 + (1 + 2 + 3) / 3 + 9 = 20. we could have also partitioned a into [9, 1], [2], [3, 9], for example. that partition would lead to a score of 5 + 2 + 6 = 13, which is worse. note: `1 <= a.length <= 100`. `1 <= a[i] <= 10000`. `1 <= k <= a.length`. answers within `10^-6` of the correct answer will be accepted as correct.",,
814,Binary Tree Pruning,"We are given the head node `root` of a binary tree, where additionally every node's value is either a 0 or a 1.

Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.

(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)

Example 1:
Input: [1,null,0,0,1]
Output: [1,null,0,null,1]
Explanation: 
Only the red nodes satisfy the property ""every subtree not containing a 1"".

The diagram on the right represents the answer.


Example 2:
Input: [1,0,1,0,0,0,1]
Output: [1,null,1,null,1]

Example 3:
Input: [1,1,0,1,1,0,1,0]
Output: [1,1,0,1,1,null,1]
Note: 
The binary tree will have at most `200 nodes`.

The value of each node will only be `0` or `1`.",Medium,https://leetcode.com/problems/binary-tree-pruning,"Amazon,Facebook",Tree,1397,,"we are given the head node `root` of a binary tree, where additionally every node's value is either a 0 or a 1. return the same tree where every subtree (of the given tree) not containing a 1 has been removed. (recall that the subtree of a node x is x, plus every node that is a descendant of x.)","input: [1,null,0,0,1] output: [1,null,0,null,1] explanation: only the red nodes satisfy the property ""every subtree not containing a 1"". the diagram on the right represents the answer. example 2: input: [1,0,1,0,0,0,1] output: [1,null,1,null,1] example 3: input: [1,1,0,1,1,0,1,0] output: [1,1,0,1,1,null,1] note: the binary tree will have at most `200 nodes`. the value of each node will only be `0` or `1`.",,
815,Bus Routes,"You are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever.

For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever.

You will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only.

Return the least number of buses you must take to travel from `source` to `target`. Return `-1` if it is not possible.


Example 1:
Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
Output: 2
Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.


Example 2:
Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
Output: -1

Constraints:
`1 <= routes.length <= 500`.

`1 <= routes[i].length <= 105`
All the values of `routes[i]` are unique.

`sum(routes[i].length) <= 105`
`0 <= routes[i][j] < 106`
`0 <= source, target < 106`",Hard,https://leetcode.com/problems/bus-routes,"Amazon,Square,Uber",Breadth-first Search,1072,,"you are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever. for example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever. you will start at the bus stop `source` (you are not on any bus initially), and you want to go to the bus stop `target`. you can travel between bus stops by buses only. return the least number of buses you must take to travel from `source` to `target`. return `-1` if it is not possible.","input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6 output: 2 explanation: the best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6. example 2: input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12 output: -1","`1 <= routes.length <= 500`. `1 <= routes[i].length <= 10^5` all the values of `routes[i]` are unique. `sum(routes[i].length) <= 10^5` `0 <= routes[i][j] < 10^6` `0 <= source, target < 10^6`",
816,Ambiguous Coordinates,"We had some 2-dimensional coordinates, like `""(1, 3)""` or `""(2, 0.5)""`.  Then, we removed all commas, decimal points, and spaces, and ended up with the string `S`.  Return a list of strings representing all possibilities for what our original coordinates could have been.

Our original representation never had extraneous zeroes, so we never started with numbers like ""00"", ""0.0"", ""0.00"", ""1.0"", ""001"", ""00.01"", or any other number that can be represented with less digits.  Also, a decimal point within a number never occurs without at least one digit occuring before it, so we never started with numbers like "".1"".

The final answer list can be returned in any order.  Also note that all coordinates in the final answer have exactly one space between them (occurring after the comma.)

Example 1:
Input: ""(123)""
Output: [""(1, 23)"", ""(12, 3)"", ""(1.2, 3)"", ""(1, 2.3)""]

Example 2:
Input: ""(00011)""
Output:  [""(0.001, 1)"", ""(0, 0.011)""]
Explanation: 
0.0, 00, 0001 or 00.01 are not allowed.


Example 3:
Input: ""(0123)""
Output: [""(0, 123)"", ""(0, 12.3)"", ""(0, 1.23)"", ""(0.1, 23)"", ""(0.1, 2.3)"", ""(0.12, 3)""]

Example 4:
Input: ""(100)""
Output: [(10, 0)]
Explanation: 
1.0 is not allowed.

Note: 
`4 <= S.length <= 12`.

`S[0]` = ""("", `S[S.length - 1]` = "")"", and the other elements in `S` are digits.",Medium,https://leetcode.com/problems/ambiguous-coordinates,Google,String,135,,"we had some 2-dimensional coordinates, like `""(1, 3)""` or `""(2, 0.5)""`. then, we removed all commas, decimal points, and spaces, and ended up with the string `s`. return a list of strings representing all possibilities for what our original coordinates could have been. our original representation never had extraneous zeroes, so we never started with numbers like ""00"", ""0.0"", ""0.00"", ""1.0"", ""001"", ""00.01"", or any other number that can be represented with less digits. also, a decimal point within a number never occurs without at least one digit occuring before it, so we never started with numbers like "".1"". the final answer list can be returned in any order. also note that all coordinates in the final answer have exactly one space between them (occurring after the comma.)","input: ""(123)"" output: [""(1, 23)"", ""(12, 3)"", ""(1.2, 3)"", ""(1, 2.3)""] example 2: input: ""(00011)"" output: [""(0.001, 1)"", ""(0, 0.011)""] explanation: 0.0, 00, 0001 or 00.01 are not allowed. example 3: input: ""(0123)"" output: [""(0, 123)"", ""(0, 12.3)"", ""(0, 1.23)"", ""(0.1, 23)"", ""(0.1, 2.3)"", ""(0.12, 3)""] example 4: input: ""(100)"" output: [(10, 0)] explanation: 1.0 is not allowed. note: `4 <= s.length <= 12`. `s[0]` = ""("", `s[s.length - 1]` = "")"", and the other elements in `s` are digits.",,
817,Linked List Components,"We are given `head`, the head node of a linked list containing unique integer values.

We are also given the list `G`, a subset of the values in the linked list.

Return the number of connected components in `G`, where two values are connected if they appear consecutively in the linked list.


Example 1:
Input: 
head: 0->1->2->3
G = [0, 1, 3]
Output: 2
Explanation: 
0 and 1 are connected, so [0, 1] and [3] are the two connected components.


Example 2:
Input: 
head: 0->1->2->3->4
G = [0, 3, 1, 4]
Output: 2
Explanation: 
0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.

Note: 
If `N` is the length of the linked list given by `head`, `1 <= N <= 10000`.

The value of each node in the linked list will be in the range` [0, N - 1]`.

`1 <= G.length <= 10000`.

`G` is a subset of all values in the linked list.",Medium,https://leetcode.com/problems/linked-list-components,Google,Linked List,493,,"we are given `head`, the head node of a linked list containing unique integer values. we are also given the list `g`, a subset of the values in the linked list. return the number of connected components in `g`, where two values are connected if they appear consecutively in the linked list.","input: head: 0->1->2->3 g = [0, 1, 3] output: 2 explanation: 0 and 1 are connected, so [0, 1] and [3] are the two connected components. example 2: input: head: 0->1->2->3->4 g = [0, 3, 1, 4] output: 2 explanation: 0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components. note: if `n` is the length of the linked list given by `head`, `1 <= n <= 10000`. the value of each node in the linked list will be in the range` [0, n - 1]`. `1 <= g.length <= 10000`. `g` is a subset of all values in the linked list.",,
818,Race Car,"Your car starts at position 0 and speed +1 on an infinite number line.  (Your car can go into negative positions.)
Your car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).

When you get an instruction ""A"", your car does the following: `position += speed, speed *= 2`.

When you get an instruction ""R"", your car does the following: if your speed is positive then `speed = -1` , otherwise `speed = 1`.  (Your position stays the same.)
For example, after commands ""AAR"", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1.

Now for some target position, say the length of the shortest sequence of instructions to get there.


Example 1:
Input: 
target = 3
Output: 2
Explanation: 
The shortest instruction sequence is ""AA"".

Your position goes from 0->1->3.


Example 2:
Input: 
target = 6
Output: 5
Explanation: 
The shortest instruction sequence is ""AAARA"".

Your position goes from 0->1->3->7->7->6.

Note: 
`1 <= target <= 10000`.",Hard,https://leetcode.com/problems/race-car,Google,"Dynamic Programming,Heap",632,,"your car starts at position 0 and speed +1 on an infinite number line. (your car can go into negative positions.) your car drives automatically according to a sequence of instructions a (accelerate) and r (reverse). when you get an instruction ""a"", your car does the following: `position += speed, speed *= 2`. when you get an instruction ""r"", your car does the following: if your speed is positive then `speed = -1` , otherwise `speed = 1`. (your position stays the same.) for example, after commands ""aar"", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1. now for some target position, say the length of the shortest sequence of instructions to get there.","input: target = 3 output: 2 explanation: the shortest instruction sequence is ""aa"". your position goes from 0->1->3. example 2: input: target = 6 output: 5 explanation: the shortest instruction sequence is ""aaara"". your position goes from 0->1->3->7->7->6. note: `1 <= target <= 10000`.",,
819,Most Common Word,"Given a string `paragraph` and a string array of the banned words `banned`, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.

The words in `paragraph` are case-insensitive and the answer should be returned in lowercase.


Example 1:
Input: paragraph = ""Bob hit a ball, the hit BALL flew far after it was hit."", banned = [""hit""]
Output: ""ball""
Explanation: 
""hit"" occurs 3 times, but it is a banned word.

""ball"" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. 
Note that words in the paragraph are not case sensitive,
that punctuation is ignored (even if adjacent to words, such as ""ball,""), 
and that ""hit"" isn't the answer even though it occurs more because it is banned.


Example 2:
Input: paragraph = ""a."", banned = []
Output: ""a""

Constraints:
`1 <= paragraph.length <= 1000`
paragraph consists of English letters, space `' '`, or one of the symbols: `""!?',;.""`.

`0 <= banned.length <= 100`
`1 <= banned[i].length <= 10`
`banned[i]` consists of only lowercase English letters.",Easy,https://leetcode.com/problems/most-common-word,Amazon,String,948,,"given a string `paragraph` and a string array of the banned words `banned`, return the most frequent word that is not banned. it is guaranteed there is at least one word that is not banned, and that the answer is unique. the words in `paragraph` are case-insensitive and the answer should be returned in lowercase.","input: paragraph = ""bob hit a ball, the hit ball flew far after it was hit."", banned = [""hit""] output: ""ball"" explanation: ""hit"" occurs 3 times, but it is a banned word. ""ball"" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. note that words in the paragraph are not case sensitive, that punctuation is ignored (even if adjacent to words, such as ""ball,""), and that ""hit"" isn't the answer even though it occurs more because it is banned. example 2: input: paragraph = ""a."", banned = [] output: ""a""","`1 <= paragraph.length <= 1000` paragraph consists of english letters, space `' '`, or one of the symbols: `""!?',;.""`. `0 <= banned.length <= 10^0` `1 <= banned[i].length <= 10` `banned[i]` consists of only lowercase english letters.",
820,Short Encoding of Words,"A valid encoding of an array of `words` is any reference string `s` and array of indices `indices` such that:
`words.length == indices.length`
The reference string `s` ends with the `'#'` character.

For each index `indices[i]`, the substring of `s` starting from `indices[i]` and up to (but not including) the next `'#'` character is equal to `words[i]`.

Given an array of `words`, return the length of the shortest reference string `s` possible of any valid encoding of `words`.


Example 1:
Input: words = [""time"", ""me"", ""bell""]
Output: 10
Explanation: A valid encoding would be s = `""time#bell#"" and indices = [0, 2, 5`].

words[0] = ""time"", the substring of s starting from indices[0] = 0 to the next '#' is underlined in ""time#bell#""
words[1] = ""me"", the substring of s starting from indices[1] = 2 to the next '#' is underlined in ""time#bell#""
words[2] = ""bell"", the substring of s starting from indices[2] = 5 to the next '#' is underlined in ""time#bell#""

Example 2:
Input: words = [""t""]
Output: 2
Explanation: A valid encoding would be s = ""t#"" and indices = [0].


Constraints:
`1 <= words.length <= 2000`
`1 <= words[i].length <= 7`
`words[i]` consists of only lowercase letters.",Medium,https://leetcode.com/problems/short-encoding-of-words,,,595,,"a valid encoding of an array of `words` is any reference string `s` and array of indices `indices` such that: `words.length == indices.length` the reference string `s` ends with the `'#'` character. for each index `indices[i]`, the substring of `s` starting from `indices[i]` and up to (but not including) the next `'#'` character is equal to `words[i]`. given an array of `words`, return the length of the shortest reference string `s` possible of any valid encoding of `words`.","input: words = [""time"", ""me"", ""bell""] output: 10 explanation: a valid encoding would be s = `""time#bell#"" and indices = [0, 2, 5`]. words[0] = ""time"", the substring of s starting from indices[0] = 0 to the next '#' is underlined in ""time#bell#"" words[1] = ""me"", the substring of s starting from indices[1] = 2 to the next '#' is underlined in ""time#bell#"" words[2] = ""bell"", the substring of s starting from indices[2] = 5 to the next '#' is underlined in ""time#bell#"" example 2: input: words = [""t""] output: 2 explanation: a valid encoding would be s = ""t#"" and indices = [0].",`1 <= words.length <= 2000` `1 <= words[i].length <= 7` `words[i]` consists of only lowercase letters.,
821,Shortest Distance to a Character,"Given a string `s` and a character `c` that occurs in `s`, return an array of integers `answer` where `answer.length == s.length` and `answer[i]` is the distance from index `i` to the closest occurrence of character `c` in `s`.

The distance between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function.


Example 1:
Input: s = ""loveleetcode"", c = ""e""
Output: [3,2,1,0,1,0,0,1,2,2,1,0]
Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).

The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.

The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 3.

For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.

The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.


Example 2:
Input: s = ""aaab"", c = ""b""
Output: [3,2,1,0]

Constraints:
`1 <= s.length <= 104`
`s[i]` and `c` are lowercase English letters.

It is guaranteed that `c` occurs at least once in `s`.",Easy,https://leetcode.com/problems/shortest-distance-to-a-character,Apple,,1586,,"given a string `s` and a character `c` that occurs in `s`, return an array of integers `answer` where `answer.length == s.length` and `answer[i]` is the distance from index `i` to the closest occurrence of character `c` in `s`. the distance between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function.","input: s = ""loveleetcode"", c = ""e"" output: [3,2,1,0,1,0,0,1,2,2,1,0] explanation: the character 'e' appears at indices 3, 5, 6, and 11 (0-indexed). the closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3. the closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 3. for index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1. the closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2. example 2: input: s = ""aaab"", c = ""b"" output: [3,2,1,0]",`1 <= s.length <= 10^4` `s[i]` and `c` are lowercase english letters. it is guaranteed that `c` occurs at least once in `s`.,
822,Card Flipping Game,"On a table are `N` cards, with a positive integer printed on the front and back of each card (possibly different).

We flip any number of cards, and after we choose one card. 
If the number `X` on the back of the chosen card is not on the front of any card, then this number X is good.

What is the smallest number that is good?  If no number is good, output `0`.

Here, `fronts[i]` and `backs[i]` represent the number on the front and back of card `i`. 
A flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.


Example:
Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]
Output: `2`
Explanation: If we flip the second card, the fronts are `[1,3,4,4,7]` and the backs are `[1,2,4,1,3]`.

We choose the second card, which has number 2 on the back, and it isn't on the front of any card, so `2` is good.

Note:
`1 <= fronts.length == backs.length <= 1000`.

`1 <= fronts[i] <= 2000`.

`1 <= backs[i] <= 2000`.",Medium,https://leetcode.com/problems/card-flipping-game,,,86,,"on a table are `n` cards, with a positive integer printed on the front and back of each card (possibly different). we flip any number of cards, and after we choose one card. if the number `x` on the back of the chosen card is not on the front of any card, then this number x is good. what is the smallest number that is good? if no number is good, output `0`. here, `fronts[i]` and `backs[i]` represent the number on the front and back of card `i`. a flip swaps the front and back numbers, so the value on the front is now on the back and vice versa.","input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3] output: `2` explanation: if we flip the second card, the fronts are `[1,3,4,4,7]` and the backs are `[1,2,4,1,3]`. we choose the second card, which has number 2 on the back, and it isn't on the front of any card, so `2` is good. note: `1 <= fronts.length == backs.length <= 1000`. `1 <= fronts[i] <= 2000`. `1 <= backs[i] <= 2000`.",,
823,Binary Trees With Factors,"Given an array of unique integers, `arr`, where each integer `arr[i]` is strictly greater than `1`.

We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.

Return the number of binary trees we can make. The answer may be too large so return the answer modulo `109 + 7`.


Example 1:
Input: arr = [2,4]
Output: 3
Explanation: We can make these trees: `[2], [4], [4, 2, 2]`

Example 2:
Input: arr = [2,4,5,10]
Output: 7
Explanation: We can make these trees: `[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]`.


Constraints:
`1 <= arr.length <= 1000`
`2 <= arr[i] <= 109`
All the values of `arr` are unique.",Medium,https://leetcode.com/problems/binary-trees-with-factors,,,677,,"given an array of unique integers, `arr`, where each integer `arr[i]` is strictly greater than `1`. we make a binary tree using these integers, and each number may be used for any number of times. each non-leaf node's value should be equal to the product of the values of its children. return the number of binary trees we can make. the answer may be too large so return the answer modulo `109 + 7`.","input: arr = [2,4] output: 3 explanation: we can make these trees: `[2], [4], [4, 2, 2]` example 2: input: arr = [2,4,5,10] output: 7 explanation: we can make these trees: `[2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2]`.",`1 <= arr.length <= 1000` `2 <= arr[i] <= 10^9` all the values of `arr` are unique.,
824,Goat Latin,"A sentence `S` is given, composed of words separated by spaces. Each word consists of lowercase and uppercase letters only.

We would like to convert the sentence to ""Goat Latin"" (a made-up language similar to Pig Latin.)
The rules of Goat Latin are as follows:
If a word begins with a vowel (a, e, i, o, or u), append `""ma""` to the end of the word.

	For example, the word 'apple' becomes 'applema'.

	 
If a word begins with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add `""ma""`.

	For example, the word `""goat""` becomes `""oatgma""`.

	 
Add one letter `'a'` to the end of each word per its word index in the sentence, starting with 1.

	For example, the first word gets `""a""` added to the end, the second word gets `""aa""` added to the end and so on.

Return the final sentence representing the conversion from `S` to Goat Latin. 

Example 1:
Input: ""I speak Goat Latin""
Output: ""Imaa peaksmaaa oatGmaaaa atinLmaaaaa""

Example 2:
Input: ""The quick brown fox jumped over the lazy dog""
Output: ""heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa""
Notes:
`S` contains only uppercase, lowercase and spaces. Exactly one space between each word.

`1 <= S.length <= 150`.",Easy,https://leetcode.com/problems/goat-latin,Facebook,String,503,,"a sentence `s` is given, composed of words separated by spaces. each word consists of lowercase and uppercase letters only. we would like to convert the sentence to ""goat latin"" (a made-up language similar to pig latin.) the rules of goat latin are as follows: if a word begins with a vowel (a, e, i, o, or u), append `""ma""` to the end of the word. for example, the word 'apple' becomes 'applema'. if a word begins with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add `""ma""`. for example, the word `""goat""` becomes `""oatgma""`. add one letter `'a'` to the end of each word per its word index in the sentence, starting with 1. for example, the first word gets `""a""` added to the end, the second word gets `""aa""` added to the end and so on. return the final sentence representing the conversion from `s` to goat latin.","input: ""i speak goat latin"" output: ""imaa peaksmaaa oatgmaaaa atinlmaaaaa"" example 2: input: ""the quick brown fox jumped over the lazy dog"" output: ""hetmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"" notes: `s` contains only uppercase, lowercase and spaces. exactly one space between each word. `1 <= s.length <= 150`.",,
825,Friends Of Appropriate Ages,"Some people will make friend requests. The list of their ages is given and `ages[i]` is the age of the ith person. 
Person A will NOT friend request person B (B != A) if any of the following conditions are true:
`age[B] <= 0.5 * age[A] + 7`
`age[B] > age[A]`
`age[B] > 100 && age[A] < 100`
Otherwise, A will friend request B.

Note that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves.

How many total friend requests are made?

Example 1:
Input: [16,16]
Output: 2
Explanation: 2 people friend request each other.


Example 2:
Input: [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.


Example 3:
Input: [20,30,100,110,120]
Output: 3
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.

Notes:
`1 <= ages.length <= 20000`.

`1 <= ages[i] <= 120`.",Medium,https://leetcode.com/problems/friends-of-appropriate-ages,Facebook,Array,396,,"some people will make friend requests. the list of their ages is given and `ages[i]` is the age of the ith person. person a will not friend request person b (b != a) if any of the following conditions are true: `age[b] <= 0.5 * age[a] + 7` `age[b] > age[a]` `age[b] > 100 && age[a] < 100` otherwise, a will friend request b. note that if a requests b, b does not necessarily request a. also, people will not friend request themselves. how many total friend requests are made?","input: [16,16] output: 2 explanation: 2 people friend request each other. example 2: input: [16,17,18] output: 2 explanation: friend requests are made 17 -> 16, 18 -> 17. example 3: input: [20,30,100,110,120] output: 3 explanation: friend requests are made 110 -> 100, 120 -> 110, 120 -> 100. notes: `1 <= ages.length <= 20000`. `1 <= ages[i] <= 120`.",,
826,Most Profit Assigning Work,"We have jobs: `difficulty[i]` is the difficulty of the `i`th job, and `profit[i]` is the profit of the `i`th job. 
Now we have some workers. `worker[i]` is the ability of the `i`th worker, which means that this worker can only complete a job with difficulty at most `worker[i]`. 
Every worker can be assigned at most one job, but one job can be completed multiple times.

For example, if 3 people attempt the same job that pays $1, then the total profit will be $3.  If a worker cannot complete any job, his profit is $0.

What is the most profit we can make?

Example 1:
Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]
Output: 100 
Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.

Notes:
`1 <= difficulty.length = profit.length <= 10000`
`1 <= worker.length <= 10000`
`difficulty[i], profit[i], worker[i]`  are in range `[1, 10^5]`",Medium,https://leetcode.com/problems/most-profit-assigning-work,Amazon,Two Pointers,500,,"we have jobs: `difficulty[i]` is the difficulty of the `i`th job, and `profit[i]` is the profit of the `i`th job. now we have some workers. `worker[i]` is the ability of the `i`th worker, which means that this worker can only complete a job with difficulty at most `worker[i]`. every worker can be assigned at most one job, but one job can be completed multiple times. for example, if 3 people attempt the same job that pays $1, then the total profit will be $3. if a worker cannot complete any job, his profit is $0. what is the most profit we can make?","input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7] output: 100 explanation: workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately. notes: `1 <= difficulty.length = profit.length <= 10000` `1 <= worker.length <= 10000` `difficulty[i], profit[i], worker[i]` are in range `[1, 10^5]`",,
827,Making A Large Island,"You are given an `n x n` binary matrix `grid`. You are allowed to change at most one `0` to be `1`.

Return the size of the largest island in `grid` after applying this operation.

An island is a 4-directionally connected group of `1`s.


Example 1:
Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.


Example 2:
Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.


Example 3:
Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.


Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 500`
`grid[i][j]` is either `0` or `1`.",Hard,https://leetcode.com/problems/making-a-large-island,"Facebook,Google,Amazon","Depth-first Search,Breadth-first Search",712,,you are given an `n x n` binary matrix `grid`. you are allowed to change at most one `0` to be `1`. return the size of the largest island in `grid` after applying this operation. an island is a 4-directionally connected group of `1`s.,"input: grid = [[1,0],[0,1]] output: 3 explanation: change one 0 to 1 and connect two 1s, then we get an island with area = 3. example 2: input: grid = [[1,1],[1,0]] output: 4 explanation: change the 0 to 1 and make the island bigger, only one island with area = 4. example 3: input: grid = [[1,1],[1,1]] output: 4 explanation: can't change any 0 to 1, only one island with area = 4.",`n == grid.length` `n == grid[i].length` `1 <= n <= 500` `grid[i][j]` is either `0` or `1`.,
828,Count Unique Characters of All Substrings of a Given String,"Let's define a function `countUniqueChars(s)` that returns the number of unique characters on `s`, for example if `s = ""LEETCODE""` then `""L""`, `""T""`,`""C""`,`""O""`,`""D""` are the unique characters since they appear only once in `s`, therefore `countUniqueChars(s) = 5`.

On this problem given a string `s` we need to return the sum of `countUniqueChars(t)` where `t` is a substring of `s`. Notice that some substrings can be repeated so on this case you have to count the repeated ones too.

Since the answer can be very large, return the answer modulo `10 ^ 9 + 7`.


Example 1:
Input: s = ""ABC""
Output: 10
Explanation: All possible substrings are: ""A"",""B"",""C"",""AB"",""BC"" and ""ABC"".

Evey substring is composed with only unique letters.

Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10

Example 2:
Input: s = ""ABA""
Output: 8
Explanation: The same as example 1, except `countUniqueChars`(""ABA"") = 1.


Example 3:
Input: s = ""LEETCODE""
Output: 92

Constraints:
`0 <= s.length <= 10^4`
`s` contain upper-case English letters only.",Hard,https://leetcode.com/problems/count-unique-characters-of-all-substrings-of-a-given-string,Microsoft,Two Pointers,608,,"let's define a function `countuniquechars(s)` that returns the number of unique characters on `s`, for example if `s = ""leetcode""` then `""l""`, `""t""`,`""c""`,`""o""`,`""d""` are the unique characters since they appear only once in `s`, therefore `countuniquechars(s) = 5`. on this problem given a string `s` we need to return the sum of `countuniquechars(t)` where `t` is a substring of `s`. notice that some substrings can be repeated so on this case you have to count the repeated ones too. since the answer can be very large, return the answer modulo `10 ^ 9 + 7`.","input: s = ""abc"" output: 10 explanation: all possible substrings are: ""a"",""b"",""c"",""ab"",""bc"" and ""abc"". evey substring is composed with only unique letters. sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10 example 2: input: s = ""aba"" output: 8 explanation: the same as example 1, except `countuniquechars`(""aba"") = 1. example 3: input: s = ""leetcode"" output: 92",`0 <= s.length <= 10^4` `s` contain upper-case english letters only.,
829,Consecutive Numbers Sum,"Given a positive integer `N`, how many ways can we write it as a sum of consecutive positive integers?

Example 1:
Input: 5
Output: 2
Explanation: 5 = 5 = 2 + 3

Example 2:
Input: 9
Output: 3
Explanation: 9 = 9 = 4 + 5 = 2 + 3 + 4

Example 3:
Input: 15
Output: 4
Explanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5
Note: `1 <= N <= 10 ^ 9`.",Hard,https://leetcode.com/problems/consecutive-numbers-sum,"Citadel,Visa,Amazon,Nvidia",Math,598,,"given a positive integer `n`, how many ways can we write it as a sum of consecutive positive integers?",input: 5 output: 2 explanation: 5 = 5 = 2 + 3 example 2: input: 9 output: 3 explanation: 9 = 9 = 4 + 5 = 2 + 3 + 4 example 3: input: 15 output: 4 explanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5 note: `1 <= n <= 10 ^ 9`.,,
830,Positions of Large Groups,"In a string `s` of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like `s = ""abbxxxxzyy""` has the groups `""a""`, `""bb""`, `""xxxx""`, `""z""`, and `""yy""`.

A group is identified by an interval `[start, end]`, where `start` and `end` denote the start and end indices (inclusive) of the group. In the above example, `""xxxx""` has the interval `[3,6]`.

A group is considered large if it has 3 or more characters.

Return the intervals of every large group sorted in increasing order by start index.


Example 1:
Input: s = ""abbxxxxzzy""
Output: [[3,6]]
Explanation: `""xxxx"" is the only `large group with start index 3 and end index 6.


Example 2:
Input: s = ""abc""
Output: []
Explanation: We have groups ""a"", ""b"", and ""c"", none of which are large groups.


Example 3:
Input: s = ""abcdddeeeeaabbbcd""
Output: [[3,5],[6,9],[12,14]]
Explanation: The large groups are ""ddd"", ""eeee"", and ""bbb"".


Example 4:
Input: s = ""aba""
Output: []

Constraints:
`1 <= s.length <= 1000`
`s` contains lower-case English letters only.",Easy,https://leetcode.com/problems/positions-of-large-groups,Google,Array,468,,"in a string `s` of lowercase letters, these letters form consecutive groups of the same character. for example, a string like `s = ""abbxxxxzyy""` has the groups `""a""`, `""bb""`, `""xxxx""`, `""z""`, and `""yy""`. a group is identified by an interval `[start, end]`, where `start` and `end` denote the start and end indices (inclusive) of the group. in the above example, `""xxxx""` has the interval `[3,6]`. a group is considered large if it has 3 or more characters. return the intervals of every large group sorted in increasing order by start index.","input: s = ""abbxxxxzzy"" output: [[3,6]] explanation: `""xxxx"" is the only `large group with start index 3 and end index 6. example 2: input: s = ""abc"" output: [] explanation: we have groups ""a"", ""b"", and ""c"", none of which are large groups. example 3: input: s = ""abcdddeeeeaabbbcd"" output: [[3,5],[6,9],[12,14]] explanation: the large groups are ""ddd"", ""eeee"", and ""bbb"". example 4: input: s = ""aba"" output: []",`1 <= s.length <= 1000` `s` contains lower-case english letters only.,
831,Masking Personal Information,"We are given a personal information string `S`, which may represent either an email address or a phone number.

We would like to mask this personal information according to the following rules:
1. Email address:
We define a name to be a string of `length ≥ 2` consisting of only lowercase letters `a-z` or uppercase letters `A-Z`.

An email address starts with a name, followed by the symbol `'@'`, followed by a name, followed by the dot `'.'` and followed by a name. 
All email addresses are guaranteed to be valid and in the format of `""name1@name2.name3"".`
To mask an email, all names must be converted to lowercase and all letters between the first and last letter of the first name must be replaced by 5 asterisks `'*'`.

2. Phone number:
A phone number is a string consisting of only the digits `0-9` or the characters from the set `{'+', '-', '(', ')', ' '}.` You may assume a phone number contains 10 to 13 digits.

The last 10 digits make up the local number, while the digits before those make up the country code. Note that the country code is optional. We want to expose only the last 4 digits and mask all other digits.

The local number should be formatted and masked as `""***-***-1111"", `where `1` represents the exposed digits.

To mask a phone number with country code like `""+111 111 111 1111""`, we write it in the form `""+***-***-***-1111"".`  The `'+'` sign and the first `'-'` sign before the local number should only exist if there is a country code.  For example, a 12 digit phone number mask should start with `""+**-""`.

Note that extraneous characters like `""("", "")"", "" ""`, as well as extra dashes or plus signs not part of the above formatting scheme should be removed.

Return the correct ""mask"" of the information provided.


Example 1:
Input: ""LeetCode@LeetCode.com""
Output: ""l*****e@leetcode.com""
Explanation: All names are converted to lowercase, and the letters between the
             first and last letter of the first name is replaced by 5 asterisks.

             Therefore, ""leetcode"" -> ""l*****e"".


Example 2:
Input: ""AB@qq.com""
Output: ""a*****b@qq.com""
Explanation: There must be 5 asterisks between the first and last letter 
             of the first name ""ab"". Therefore, ""ab"" -> ""a*****b"".


Example 3:
Input: ""1(234)567-890""
Output: ""***-***-7890""
Explanation: 10 digits in the phone number, which means all digits make up the local number.


Example 4:
Input: ""86-(10)12345678""
Output: ""+**-***-***-5678""
Explanation: 12 digits, 2 digits for country code and 10 digits for local number. 
Notes:
`S.length <= 40`.

Emails have length at least 8.

Phone numbers have length at least 10.",Medium,https://leetcode.com/problems/masking-personal-information,Twitter,String,92,,"we are given a personal information string `s`, which may represent either an email address or a phone number. we would like to mask this personal information according to the following rules: 1. email address: we define a name to be a string of `length ≥ 2` consisting of only lowercase letters `a-z` or uppercase letters `a-z`. an email address starts with a name, followed by the symbol `'@'`, followed by a name, followed by the dot `'.'` and followed by a name. all email addresses are guaranteed to be valid and in the format of `""name1@name2.name3"".` to mask an email, all names must be converted to lowercase and all letters between the first and last letter of the first name must be replaced by 5 asterisks `'*'`. 2. phone number: a phone number is a string consisting of only the digits `0-9` or the characters from the set `{'+', '-', '(', ')', ' '}.` you may assume a phone number contains 10 to 13 digits. the last 10 digits make up the local number, while the digits before those make up the country code. note that the country code is optional. we want to expose only the last 4 digits and mask all other digits. the local number should be formatted and masked as `""***-***-1111"", `where `1` represents the exposed digits. to mask a phone number with country code like `""+111 111 111 1111""`, we write it in the form `""+***-***-***-1111"".` the `'+'` sign and the first `'-'` sign before the local number should only exist if there is a country code. for example, a 12 digit phone number mask should start with `""+**-""`. note that extraneous characters like `""("", "")"", "" ""`, as well as extra dashes or plus signs not part of the above formatting scheme should be removed. return the correct ""mask"" of the information provided.","input: ""leetcode@leetcode.com"" output: ""l*****e@leetcode.com"" explanation: all names are converted to lowercase, and the letters between the first and last letter of the first name is replaced by 5 asterisks. therefore, ""leetcode"" -> ""l*****e"". example 2: input: ""ab@qq.com"" output: ""a*****b@qq.com"" explanation: there must be 5 asterisks between the first and last letter of the first name ""ab"". therefore, ""ab"" -> ""a*****b"". example 3: input: ""1(234)567-890"" output: ""***-***-7890"" explanation: 10 digits in the phone number, which means all digits make up the local number. example 4: input: ""86-(10)12345678"" output: ""+**-***-***-5678"" explanation: 12 digits, 2 digits for country code and 10 digits for local number. notes: `s.length <= 40`. emails have length at least 8. phone numbers have length at least 10.",,
832,Flipping an Image,"Given an `n x n` binary matrix `image`, flip the image horizontally, then invert it, and return the resulting image.

To flip an image horizontally means that each row of the image is reversed.

For example, flipping `[1,1,0]` horizontally results in `[0,1,1]`.

To invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`.

For example, inverting `[0,1,1]` results in `[1,0,0]`.


Example 1:
Input: image = [[1,1,0],[1,0,1],[0,0,0]]
Output: [[1,0,0],[0,1,0],[1,1,1]]
Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].

Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]

Example 2:
Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].

Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]

Constraints:
`n == image.length`
`n == image[i].length`
`1 <= n <= 20`
`images[i][j]` is either `0` or `1`.",Easy,https://leetcode.com/problems/flipping-an-image,"Facebook,Microsoft",Array,1310,,"given an `n x n` binary matrix `image`, flip the image horizontally, then invert it, and return the resulting image. to flip an image horizontally means that each row of the image is reversed. for example, flipping `[1,1,0]` horizontally results in `[0,1,1]`. to invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`. for example, inverting `[0,1,1]` results in `[1,0,0]`.","input: image = [[1,1,0],[1,0,1],[0,0,0]] output: [[1,0,0],[0,1,0],[1,1,1]] explanation: first reverse each row: [[0,1,1],[1,0,1],[0,0,0]]. then, invert the image: [[1,0,0],[0,1,0],[1,1,1]] example 2: input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]] output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]] explanation: first reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]]. then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]",`n == image.length` `n == image[i].length` `1 <= n <= 20` `images[i][j]` is either `0` or `1`.,
833,Find And Replace in String,"To some string `S`, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).

Each replacement operation has `3` parameters: a starting index `i`, a source word `x` and a target word `y`.  The rule is that if `x` starts at position `i` in the original string `S`, then we will replace that occurrence of `x` with `y`.  If not, we do nothing.

For example, if we have `S = ""abcd""` and we have some replacement operation `i = 2, x = ""cd"", y = ""ffff""`, then because `""cd""` starts at position `2` in the original string `S`, we will replace it with `""ffff""`.

Using another example on `S = ""abcd""`, if we have both the replacement operation `i = 0, x = ""ab"", y = ""eee""`, as well as another replacement operation `i = 2, x = ""ec"", y = ""ffff""`, this second operation does nothing because in the original string `S[2] = 'c'`, which doesn't match `x[0] = 'e'`.

All these operations occur simultaneously.  It's guaranteed that there won't be any overlap in replacement: for example, `S = ""abc"", indexes = [0, 1], sources = [""ab"",""bc""]` is not a valid test case.


Example 1:
Input: S = ""abcd"", indexes = [0, 2], sources = [""a"", ""cd""], targets = [""eee"", ""ffff""]
Output: ""eeebffff""
Explanation:
""a"" starts at index 0 in S, so it's replaced by ""eee"".

""cd"" starts at index 2 in S, so it's replaced by ""ffff"".


Example 2:
Input: S = ""abcd"", indexes = [0, 2], sources = [""ab"",""ec""], targets = [""eee"",""ffff""]
Output: ""eeecd""
Explanation:
""ab"" starts at index 0 in S, so it's replaced by ""eee"".

""ec"" doesn't starts at index 2 in the original S, so we do nothing.


Constraints:
`0 <= S.length <= 1000`
`S` consists of only lowercase English letters.

`0 <= indexes.length <= 100`
`0 <= indexes[i] < S.length`
`sources.length == indexes.length`
`targets.length == indexes.length`
`1 <= sources[i].length, targets[i].length <= 50`
`sources[i]` and `targets[i]` consist of only lowercase English letters.",Medium,https://leetcode.com/problems/find-and-replace-in-string,Google,String,452,,"to some string `s`, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size). each replacement operation has `3` parameters: a starting index `i`, a source word `x` and a target word `y`. the rule is that if `x` starts at position `i` in the original string `s`, then we will replace that occurrence of `x` with `y`. if not, we do nothing. for example, if we have `s = ""abcd""` and we have some replacement operation `i = 2, x = ""cd"", y = ""ffff""`, then because `""cd""` starts at position `2` in the original string `s`, we will replace it with `""ffff""`. using another example on `s = ""abcd""`, if we have both the replacement operation `i = 0, x = ""ab"", y = ""eee""`, as well as another replacement operation `i = 2, x = ""ec"", y = ""ffff""`, this second operation does nothing because in the original string `s[2] = 'c'`, which doesn't match `x[0] = 'e'`. all these operations occur simultaneously. it's guaranteed that there won't be any overlap in replacement: for example, `s = ""abc"", indexes = [0, 1], sources = [""ab"",""bc""]` is not a valid test case.","input: s = ""abcd"", indexes = [0, 2], sources = [""a"", ""cd""], targets = [""eee"", ""ffff""] output: ""eeebffff"" explanation: ""a"" starts at index 0 in s, so it's replaced by ""eee"". ""cd"" starts at index 2 in s, so it's replaced by ""ffff"". example 2: input: s = ""abcd"", indexes = [0, 2], sources = [""ab"",""ec""], targets = [""eee"",""ffff""] output: ""eeecd"" explanation: ""ab"" starts at index 0 in s, so it's replaced by ""eee"". ""ec"" doesn't starts at index 2 in the original s, so we do nothing.","`0 <= s.length <= 1000` `s` consists of only lowercase english letters. `0 <= indexes.length <= 10^0` `0 <= indexes[i] < s.length` `sources.length == indexes.length` `targets.length == indexes.length` `1 <= sources[i].length, targets[i].length <= 50` `sources[i]` and `targets[i]` consist of only lowercase english letters.",
834,Sum of Distances in Tree,"An undirected, connected tree with `N` nodes labelled `0...N-1` and `N-1` `edges` are given.

The `i`th edge connects nodes `edges[i][0] `and` edges[i][1]` together.

Return a list `ans`, where `ans[i]` is the sum of the distances between node `i` and all other nodes.


Example 1:
Input: N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
Output: [8,12,6,10,10,10]
Explanation: 
Here is a diagram of the given tree:
  0
 / \
1   2
   /|\
  3 4 5
We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)
equals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.

Note: `1 <= N <= 10000`",Hard,https://leetcode.com/problems/sum-of-distances-in-tree,Google,"Tree,Depth-first Search",1218,"[Distribute Coins in Binary Tree, /problems/distribute-coins-in-binary-tree/, Medium]","an undirected, connected tree with `n` nodes labelled `0...n-1` and `n-1` `edges` are given. the `i`th edge connects nodes `edges[i][0] `and` edges[i][1]` together. return a list `ans`, where `ans[i]` is the sum of the distances between node `i` and all other nodes.","input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]] output: [8,12,6,10,10,10] explanation: here is a diagram of the given tree: 0 / \ 1 2 /|\ 3 4 5 we can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5) equals 1 + 1 + 2 + 2 + 2 = 8. hence, answer[0] = 8, and so on. note: `1 <= n <= 10000`",,
835,Image Overlap,"You are given two images `img1` and `img2` both of size `n x n`, represented as binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.)
We translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image.  After, the overlap of this translation is the number of positions that have a 1 in both images.

(Note also that a translation does not include any kind of rotation.)
What is the largest possible overlap?

Example 1:
Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]
Output: 3
Explanation: We slide img1 to right by 1 unit and down by 1 unit.

The number of positions that have a 1 in both images is 3. (Shown in red)

Example 2:
Input: img1 = [[1]], img2 = [[1]]
Output: 1

Example 3:
Input: img1 = [[0]], img2 = [[0]]
Output: 0

Constraints:
`n == img1.length`
`n == img1[i].length`
`n == img2.length `
`n == img2[i].length`
`1 <= n <= 30`
`img1[i][j]` is `0` or `1`.

`img2[i][j]` is `0` or `1`.",Medium,https://leetcode.com/problems/image-overlap,Google,Array,576,,"you are given two images `img1` and `img2` both of size `n x n`, represented as binary, square matrices of the same size. (a binary matrix has only 0s and 1s as values.) we translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image. after, the overlap of this translation is the number of positions that have a 1 in both images. (note also that a translation does not include any kind of rotation.) what is the largest possible overlap?","input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]] output: 3 explanation: we slide img1 to right by 1 unit and down by 1 unit. the number of positions that have a 1 in both images is 3. (shown in red) example 2: input: img1 = [[1]], img2 = [[1]] output: 1 example 3: input: img1 = [[0]], img2 = [[0]] output: 0",`n == img1.length` `n == img1[i].length` `n == img2.length ` `n == img2[i].length` `1 <= n <= 30` `img1[i][j]` is `0` or `1`. `img2[i][j]` is `0` or `1`.,
836,Rectangle Overlap,"An axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where `(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.

Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.

Given two axis-aligned rectangles `rec1` and `rec2`, return `true` if they overlap, otherwise return `false`.


Example 1:
Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]
Output: true

Example 2:
Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]
Output: false

Example 3:
Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]
Output: false

Constraints:
`rect1.length == 4`
`rect2.length == 4`
`-109 <= rec1[i], rec2[i] <= 109`
`rec1[0] <= rec1[2]` and `rec1[1] <= rec1[3]`
`rec2[0] <= rec2[2]` and `rec2[1] <= rec2[3]`",Easy,https://leetcode.com/problems/rectangle-overlap,"Microsoft,Amazon,Google",Math,988,"[Rectangle Area, /problems/rectangle-area/, Medium]","an axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where `(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the coordinate of its top-right corner. its top and bottom edges are parallel to the x-axis, and its left and right edges are parallel to the y-axis. two rectangles overlap if the area of their intersection is positive. to be clear, two rectangles that only touch at the corner or edges do not overlap. given two axis-aligned rectangles `rec1` and `rec2`, return `true` if they overlap, otherwise return `false`.","input: rec1 = [0,0,2,2], rec2 = [1,1,3,3] output: true example 2: input: rec1 = [0,0,1,1], rec2 = [1,0,2,1] output: false example 3: input: rec1 = [0,0,1,1], rec2 = [2,2,3,3] output: false","`rect1.length == 4` `rect2.length == 4` `-10^9 <= rec1[i], rec2[i] <= 10^9` `rec1[0] <= rec1[2]` and `rec1[1] <= rec1[3]` `rec2[0] <= rec2[2]` and `rec2[1] <= rec2[3]`",
837,New 21 Game,"Alice plays the following game, loosely based on the card game ""21"".

Alice starts with `0` points, and draws numbers while she has less than `K` points.  During each draw, she gains an integer number of points randomly from the range `[1, W]`, where `W` is an integer.  Each draw is independent and the outcomes have equal probabilities.

Alice stops drawing numbers when she gets `K` or more points.  What is the probability that she has `N` or less points?

Example 1:
Input: N = 10, K = 1, W = 10
Output: 1.00000
Explanation:  Alice gets a single card, then stops.


Example 2:
Input: N = 6, K = 1, W = 10
Output: 0.60000
Explanation:  Alice gets a single card, then stops.

In 6 out of W = 10 possibilities, she is at or below N = 6 points.


Example 3:
Input: N = 21, K = 17, W = 10
Output: 0.73278
Note:
`0 <= K <= N <= 10000`
`1 <= W <= 10000`
Answers will be accepted as correct if they are within `10^-5` of the correct answer.

The judging time limit has been reduced for this question.",Medium,https://leetcode.com/problems/new-21-game,Google,Dynamic Programming,685,,"alice plays the following game, loosely based on the card game ""21"". alice starts with `0` points, and draws numbers while she has less than `k` points. during each draw, she gains an integer number of points randomly from the range `[1, w]`, where `w` is an integer. each draw is independent and the outcomes have equal probabilities. alice stops drawing numbers when she gets `k` or more points. what is the probability that she has `n` or less points?","input: n = 10, k = 1, w = 10 output: 1.00000 explanation: alice gets a single card, then stops. example 2: input: n = 6, k = 1, w = 10 output: 0.60000 explanation: alice gets a single card, then stops. in 6 out of w = 10 possibilities, she is at or below n = 6 points. example 3: input: n = 21, k = 17, w = 10 output: 0.73278 note: `0 <= k <= n <= 10000` `1 <= w <= 10000` answers will be accepted as correct if they are within `10^-5` of the correct answer. the judging time limit has been reduced for this question.",,
838,Push Dominoes,"There are `N` dominoes in a line, and we place each domino vertically upright.

In the beginning, we simultaneously push some of the dominoes either to the left or to the right.

After each second, each domino that is falling to the left pushes the adjacent domino on the left.

Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.

When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.

For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.

Given a string ""S"" representing the initial state. `S[i] = 'L'`, if the i-th domino has been pushed to the left; `S[i] = 'R'`, if the i-th domino has been pushed to the right; `S[i] = '.'`, if the `i`-th domino has not been pushed.

Return a string representing the final state. 

Example 1:
Input: "".L.R...LR..L..""
Output: ""LL.RR.LLRRLL..""

Example 2:
Input: ""RR.L""
Output: ""RR.L""
Explanation: The first domino expends no additional force on the second domino.

Note:
`0 <= N <= 10^5`
String `dominoes` contains only `'L`', `'R'` and `'.'`",Medium,https://leetcode.com/problems/push-dominoes,Google,"Two Pointers,Dynamic Programming",834,,"there are `n` dominoes in a line, and we place each domino vertically upright. in the beginning, we simultaneously push some of the dominoes either to the left or to the right. after each second, each domino that is falling to the left pushes the adjacent domino on the left. similarly, the dominoes falling to the right push their adjacent dominoes standing on the right. when a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces. for the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino. given a string ""s"" representing the initial state. `s[i] = 'l'`, if the i-th domino has been pushed to the left; `s[i] = 'r'`, if the i-th domino has been pushed to the right; `s[i] = '.'`, if the `i`-th domino has not been pushed. return a string representing the final state.","input: "".l.r...lr..l.."" output: ""ll.rr.llrrll.."" example 2: input: ""rr.l"" output: ""rr.l"" explanation: the first domino expends no additional force on the second domino. note: `0 <= n <= 10^5` string `dominoes` contains only `'l`', `'r'` and `'.'`",,
839,Similar String Groups,"Two strings `X` and `Y` are similar if we can swap two letters (in different positions) of `X`, so that it equals `Y`. Also two strings `X` and `Y` are similar if they are equal.

For example, `""tars""` and `""rats""` are similar (swapping at positions `0` and `2`), and `""rats""` and `""arts""` are similar, but `""star""` is not similar to `""tars""`, `""rats""`, or `""arts""`.

Together, these form two connected groups by similarity: `{""tars"", ""rats"", ""arts""}` and `{""star""}`.  Notice that `""tars""` and `""arts""` are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.

We are given a list `strs` of strings where every string in `strs` is an anagram of every other string in `strs`. How many groups are there?

Example 1:
Input: strs = [""tars"",""rats"",""arts"",""star""]
Output: 2

Example 2:
Input: strs = [""omv"",""ovm""]
Output: 1

Constraints:
`1 <= strs.length <= 300`
`1 <= strs[i].length <= 300`
`strs[i]` consists of lowercase letters only.

All words in `strs` have the same length and are anagrams of each other.",Hard,https://leetcode.com/problems/similar-string-groups,Facebook,"Depth-first Search,Union Find,Graph",514,,"two strings `x` and `y` are similar if we can swap two letters (in different positions) of `x`, so that it equals `y`. also two strings `x` and `y` are similar if they are equal. for example, `""tars""` and `""rats""` are similar (swapping at positions `0` and `2`), and `""rats""` and `""arts""` are similar, but `""star""` is not similar to `""tars""`, `""rats""`, or `""arts""`. together, these form two connected groups by similarity: `{""tars"", ""rats"", ""arts""}` and `{""star""}`. notice that `""tars""` and `""arts""` are in the same group even though they are not similar. formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group. we are given a list `strs` of strings where every string in `strs` is an anagram of every other string in `strs`. how many groups are there?","input: strs = [""tars"",""rats"",""arts"",""star""] output: 2 example 2: input: strs = [""omv"",""ovm""] output: 1",`1 <= strs.length <= 300` `1 <= strs[i].length <= 300` `strs[i]` consists of lowercase letters only. all words in `strs` have the same length and are anagrams of each other.,
840,Magic Squares In Grid,"A `3 x 3` magic square is a `3 x 3` grid filled with distinct numbers from `1` to `9` such that each row, column, and both diagonals all have the same sum.

Given a `row x col` `grid` of integers, how many `3 x 3` ""magic square"" subgrids are there?  (Each subgrid is contiguous).


Example 1:
Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]
Output: 1
Explanation: 
The following subgrid is a 3 x 3 magic square:
while this one is not:
In total, there is only one magic square inside the given grid.


Example 2:
Input: grid = [[8]]
Output: 0

Example 3:
Input: grid = [[4,4],[3,3]]
Output: 0

Example 4:
Input: grid = [[4,7,8],[9,5,1],[2,3,6]]
Output: 0

Constraints:
`row == grid.length`
`col == grid[i].length`
`1 <= row, col <= 10`
`0 <= grid[i][j] <= 15`",Medium,https://leetcode.com/problems/magic-squares-in-grid,Google,Array,190,,"a `3 x 3` magic square is a `3 x 3` grid filled with distinct numbers from `1` to `9` such that each row, column, and both diagonals all have the same sum. given a `row x col` `grid` of integers, how many `3 x 3` ""magic square"" subgrids are there? (each subgrid is contiguous).","input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]] output: 1 explanation: the following subgrid is a 3 x 3 magic square: while this one is not: in total, there is only one magic square inside the given grid. example 2: input: grid = [[8]] output: 0 example 3: input: grid = [[4,4],[3,3]] output: 0 example 4: input: grid = [[4,7,8],[9,5,1],[2,3,6]] output: 0","`row == grid.length` `col == grid[i].length` `1 <= row, col <= 10` `0 <= grid[i][j] <= 15`",
841,Keys and Rooms,"There are `N` rooms and you start in room `0`.  Each room has a distinct number in `0, 1, 2, ..., N-1`, and each room may have some keys to access the next room. 
Formally, each room `i` has a list of keys `rooms[i]`, and each key `rooms[i][j]` is an integer in `[0, 1, ..., N-1]` where `N = rooms.length`.  A key `rooms[i][j] = v` opens the room with number `v`.

Initially, all the rooms start locked (except for room `0`). 
You can walk back and forth between rooms freely.

Return `true` if and only if you can enter every room.


Example 1:
Input: [[1],[2],[3],[]]
Output: true
Explanation:  
We start in room 0, and pick up key 1.

We then go to room 1, and pick up key 2.

We then go to room 2, and pick up key 3.

We then go to room 3.  Since we were able to go to every room, we return true.


Example 2:
Input: [[1,3],[3,0,1],[2],[0]]
Output: false
Explanation: We can't enter the room with number 2.

Note:
`1 <= rooms.length <= 1000`
`0 <= rooms[i].length <= 1000`
The number of keys in all rooms combined is at most `3000`.",Medium,https://leetcode.com/problems/keys-and-rooms,"Amazon,Twitch","Depth-first Search,Graph",1776,,"there are `n` rooms and you start in room `0`. each room has a distinct number in `0, 1, 2, ..., n-1`, and each room may have some keys to access the next room. formally, each room `i` has a list of keys `rooms[i]`, and each key `rooms[i][j]` is an integer in `[0, 1, ..., n-1]` where `n = rooms.length`. a key `rooms[i][j] = v` opens the room with number `v`. initially, all the rooms start locked (except for room `0`). you can walk back and forth between rooms freely. return `true` if and only if you can enter every room.","input: [[1],[2],[3],[]] output: true explanation: we start in room 0, and pick up key 1. we then go to room 1, and pick up key 2. we then go to room 2, and pick up key 3. we then go to room 3. since we were able to go to every room, we return true. example 2: input: [[1,3],[3,0,1],[2],[0]] output: false explanation: we can't enter the room with number 2. note: `1 <= rooms.length <= 1000` `0 <= rooms[i].length <= 1000` the number of keys in all rooms combined is at most `3000`.",,
842,Split Array into Fibonacci Sequence,"Given a string `S` of digits, such as `S = ""123456579""`, we can split it into a Fibonacci-like sequence `[123, 456, 579].`
Formally, a Fibonacci-like sequence is a list `F` of non-negative integers such that:
`0 <= F[i] <= 2^31 - 1`, (that is, each integer fits a 32-bit signed integer type);
`F.length >= 3`;
and` F[i] + F[i+1] = F[i+2] `for all `0 <= i < F.length - 2`.

Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.

Return any Fibonacci-like sequence split from `S`, or return `[]` if it cannot be done.


Example 1:
Input: ""123456579""
Output: [123,456,579]

Example 2:
Input: ""11235813""
Output: [1,1,2,3,5,8,13]

Example 3:
Input: ""112358130""
Output: []
Explanation: The task is impossible.


Example 4:
Input: ""0123""
Output: []
Explanation: Leading zeroes are not allowed, so ""01"", ""2"", ""3"" is not valid.


Example 5:
Input: ""1101111""
Output: [110, 1, 111]
Explanation: The output [11, 0, 11, 11] would also be accepted.

Note: 
`1 <= S.length <= 200`
`S` contains only digits.",Medium,https://leetcode.com/problems/split-array-into-fibonacci-sequence,Amazon,"String,Backtracking,Greedy",615,"[Additive Number, /problems/additive-number/, Medium], [Fibonacci Number, /problems/fibonacci-number/, Easy]","given a string `s` of digits, such as `s = ""123456579""`, we can split it into a fibonacci-like sequence `[123, 456, 579].` formally, a fibonacci-like sequence is a list `f` of non-negative integers such that: `0 <= f[i] <= 2^31 - 1`, (that is, each integer fits a 32-bit signed integer type); `f.length >= 3`; and` f[i] + f[i+1] = f[i+2] `for all `0 <= i < f.length - 2`. also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself. return any fibonacci-like sequence split from `s`, or return `[]` if it cannot be done.","input: ""123456579"" output: [123,456,579] example 2: input: ""11235813"" output: [1,1,2,3,5,8,13] example 3: input: ""112358130"" output: [] explanation: the task is impossible. example 4: input: ""0123"" output: [] explanation: leading zeroes are not allowed, so ""01"", ""2"", ""3"" is not valid. example 5: input: ""1101111"" output: [110, 1, 111] explanation: the output [11, 0, 11, 11] would also be accepted. note: `1 <= s.length <= 200` `s` contains only digits.",,
843,Guess the Word,"This is an interactive problem.

You are given an array of unique strings `wordlist` where `wordlist[i]` is `6` letters long, and one word in this list is chosen as `secret`.

You may call `Master.guess(word)` to guess a word. The guessed word should have type `string` and must be from the original list with `6` lowercase letters.

This function returns an `integer` type, representing the number of exact matches (value and position) of your guess to the `secret` word. Also, if your guess is not in the given wordlist, it will return `-1` instead.

For each test case, you have exactly `10` guesses to guess the word. At the end of any number of calls, if you have made `10` or fewer calls to `Master.guess` and at least one of these guesses was `secret`, then you pass the test case.


Example 1:
Input: secret = ""acckzz"", wordlist = [""acckzz"",""ccbazz"",""eiowzz"",""abcczz""], numguesses = 10
Output: You guessed the secret word correctly.
Explanation:
master.guess(""aaaaaa"") returns -1, because ""aaaaaa"" is not in wordlist.

master.guess(""acckzz"") returns 6, because ""acckzz"" is secret and has all 6 matches.

master.guess(""ccbazz"") returns 3, because ""ccbazz"" has 3 matches.

master.guess(""eiowzz"") returns 2, because ""eiowzz"" has 2 matches.

master.guess(""abcczz"") returns 4, because ""abcczz"" has 4 matches.

We made 5 calls to master.guess and one of them was the secret, so we pass the test case.


Example 2:
Input: secret = ""hamada"", wordlist = [""hamada"",""khaled""], numguesses = 10
Output: You guessed the secret word correctly.

Constraints:
`1 <= wordlist.length <= 100`
`wordlist[i].length == 6`
`wordlist[i]` consist of lowercase English letters.

All the strings of `wordlist` are unique.

`secret` exists in `wordlist`.

`numguesses == 10`",Hard,https://leetcode.com/problems/guess-the-word,Google,Minimax,778,,"this is an interactive problem. you are given an array of unique strings `wordlist` where `wordlist[i]` is `6` letters long, and one word in this list is chosen as `secret`. you may call `master.guess(word)` to guess a word. the guessed word should have type `string` and must be from the original list with `6` lowercase letters. this function returns an `integer` type, representing the number of exact matches (value and position) of your guess to the `secret` word. also, if your guess is not in the given wordlist, it will return `-1` instead. for each test case, you have exactly `10` guesses to guess the word. at the end of any number of calls, if you have made `10` or fewer calls to `master.guess` and at least one of these guesses was `secret`, then you pass the test case.","input: secret = ""acckzz"", wordlist = [""acckzz"",""ccbazz"",""eiowzz"",""abcczz""], numguesses = 10 output: you guessed the secret word correctly. explanation: master.guess(""aaaaaa"") returns -1, because ""aaaaaa"" is not in wordlist. master.guess(""acckzz"") returns 6, because ""acckzz"" is secret and has all 6 matches. master.guess(""ccbazz"") returns 3, because ""ccbazz"" has 3 matches. master.guess(""eiowzz"") returns 2, because ""eiowzz"" has 2 matches. master.guess(""abcczz"") returns 4, because ""abcczz"" has 4 matches. we made 5 calls to master.guess and one of them was the secret, so we pass the test case. example 2: input: secret = ""hamada"", wordlist = [""hamada"",""khaled""], numguesses = 10 output: you guessed the secret word correctly.",`1 <= wordlist.length <= 10^0` `wordlist[i].length == 6` `wordlist[i]` consist of lowercase english letters. all the strings of `wordlist` are unique. `secret` exists in `wordlist`. `numguesses == 10`,
844,Backspace String Compare,"Given two strings `s` and `t`, return `true` if they are equal when both are typed into empty text editors. `'#'` means a backspace character.

Note that after backspacing an empty text, the text will continue empty.


Example 1:
Input: s = ""ab#c"", t = ""ad#c""
Output: true
Explanation: Both s and t become ""ac"".


Example 2:
Input: s = ""ab##"", t = ""c#d#""
Output: true
Explanation: Both s and t become """".


Example 3:
Input: s = ""a##c"", t = ""#a#c""
Output: true
Explanation: Both s and t become ""c"".


Example 4:
Input: s = ""a#c"", t = ""b""
Output: false
Explanation: s becomes ""c"" while t becomes ""b"".


Constraints:
`1 <= s.length, t.length <= 200`
`s` and `t` only contain lowercase letters and `'#'` characters.

Follow up: Can you solve it in `O(n)` time and `O(1)` space?",Easy,https://leetcode.com/problems/backspace-string-compare,"Facebook,Google,Amazon,Oracle","Two Pointers,Stack",2383,"[Crawler Log Folder, /problems/crawler-log-folder/, Easy]","given two strings `s` and `t`, return `true` if they are equal when both are typed into empty text editors. `'#'` means a backspace character. note that after backspacing an empty text, the text will continue empty.","input: s = ""ab#c"", t = ""ad#c"" output: true explanation: both s and t become ""ac"". example 2: input: s = ""ab##"", t = ""c#d#"" output: true explanation: both s and t become """". example 3: input: s = ""a##c"", t = ""#a#c"" output: true explanation: both s and t become ""c"". example 4: input: s = ""a#c"", t = ""b"" output: false explanation: s becomes ""c"" while t becomes ""b"".","`1 <= s.length, t.length <= 200` `s` and `t` only contain lowercase letters and `'#'` characters.",can you solve it in `o(n)` time and `o(1)` space?
845,Longest Mountain in Array,"You may recall that an array `arr` is a mountain array if and only if:
`arr.length >= 3`
There exists some index `i` (0-indexed) with `0 < i < arr.length - 1` such that:
	
`arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`
`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`
Given an integer array `arr`, return the length of the longest subarray, which is a mountain. Return `0` if there is no mountain subarray.


Example 1:
Input: arr = [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.


Example 2:
Input: arr = [2,2,2]
Output: 0
Explanation: There is no mountain.


Constraints:
`1 <= arr.length <= 104`
`0 <= arr[i] <= 104`
Follow up:
Can you solve it using only one pass?
Can you solve it in `O(1)` space?",Medium,https://leetcode.com/problems/longest-mountain-in-array,"Amazon,Paypal",Two Pointers,1122,"[Minimum Number of Removals to Make Mountain Array, /problems/minimum-number-of-removals-to-make-mountain-array/, Hard]","you may recall that an array `arr` is a mountain array if and only if: `arr.length >= 3` there exists some index `i` (0-indexed) with `0 < i < arr.length - 1` such that: `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` given an integer array `arr`, return the length of the longest subarray, which is a mountain. return `0` if there is no mountain subarray.","input: arr = [2,1,4,7,3,2,5] output: 5 explanation: the largest mountain is [1,4,7,3,2] which has length 5. example 2: input: arr = [2,2,2] output: 0 explanation: there is no mountain.",`1 <= arr.length <= 10^4` `0 <= arr[i] <= 10^4`,can you solve it using only one pass? can you solve it in `o(1)` space?
846,Hand of Straights,"Alice has a `hand` of cards, given as an array of integers.

Now she wants to rearrange the cards into groups so that each group is size `W`, and consists of `W` consecutive cards.

Return `true` if and only if she can.

Note: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/

Example 1:
Input: hand = [1,2,3,6,2,3,4,7,8], W = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]

Example 2:
Input: hand = [1,2,3,4,5], W = 4
Output: false
Explanation: Alice's hand can't be rearranged into groups of 4.


Constraints:
`1 <= hand.length <= 10000`
`0 <= hand[i] <= 10^9`
`1 <= W <= hand.length`",Medium,https://leetcode.com/problems/hand-of-straights,"Apple,Google,eBay",Ordered Map,942,,"alice has a `hand` of cards, given as an array of integers. now she wants to rearrange the cards into groups so that each group is size `w`, and consists of `w` consecutive cards. return `true` if and only if she can. note: this question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/","input: hand = [1,2,3,6,2,3,4,7,8], w = 3 output: true explanation: alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8] example 2: input: hand = [1,2,3,4,5], w = 4 output: false explanation: alice's hand can't be rearranged into groups of 4.",`1 <= hand.length <= 10000` `0 <= hand[i] <= 10^9` `1 <= w <= hand.length`,
847,Shortest Path Visiting All Nodes,"An undirected, connected graph of N nodes (labeled `0, 1, 2, ..., N-1`) is given as `graph`.

`graph.length = N`, and `j != i` is in the list `graph[i]` exactly once, if and only if nodes `i` and `j` are connected.

Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.


Example 1:
Input: [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]

Example 2:
Input: [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]
Note:
`1 <= graph.length <= 12`
`0 <= graph[i].length < graph.length`",Hard,https://leetcode.com/problems/shortest-path-visiting-all-nodes,Google,"Dynamic Programming,Breadth-first Search",787,,"an undirected, connected graph of n nodes (labeled `0, 1, 2, ..., n-1`) is given as `graph`. `graph.length = n`, and `j != i` is in the list `graph[i]` exactly once, if and only if nodes `i` and `j` are connected. return the length of the shortest path that visits every node. you may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.","input: [[1,2,3],[0],[0],[0]] output: 4 explanation: one possible path is [1,0,2,0,3] example 2: input: [[1],[0,2,4],[1,3,4],[2],[1,2]] output: 4 explanation: one possible path is [0,1,4,2,3] note: `1 <= graph.length <= 12` `0 <= graph[i].length < graph.length`",,
848,Shifting Letters,"We have a string `S` of lowercase letters, and an integer array `shifts`.

Call the shift of a letter, the next letter in the alphabet, (wrapping around so that `'z'` becomes `'a'`). 
For example, `shift('a') = 'b'`, `shift('t') = 'u'`, and `shift('z') = 'a'`.

Now for each `shifts[i] = x`, we want to shift the first `i+1` letters of `S`, `x` times.

Return the final string after all such shifts to `S` are applied.


Example 1:
Input: S = ""abc"", shifts = [3,5,9]
Output: ""rpl""
Explanation: 
We start with ""abc"".

After shifting the first 1 letters of S by 3, we have ""dbc"".

After shifting the first 2 letters of S by 5, we have ""igc"".

After shifting the first 3 letters of S by 9, we have ""rpl"", the answer.

Note:
`1 <= S.length = shifts.length <= 20000`
`0 <= shifts[i] <= 10 ^ 9`",Medium,https://leetcode.com/problems/shifting-letters,,,370,,"we have a string `s` of lowercase letters, and an integer array `shifts`. call the shift of a letter, the next letter in the alphabet, (wrapping around so that `'z'` becomes `'a'`). for example, `shift('a') = 'b'`, `shift('t') = 'u'`, and `shift('z') = 'a'`. now for each `shifts[i] = x`, we want to shift the first `i+1` letters of `s`, `x` times. return the final string after all such shifts to `s` are applied.","input: s = ""abc"", shifts = [3,5,9] output: ""rpl"" explanation: we start with ""abc"". after shifting the first 1 letters of s by 3, we have ""dbc"". after shifting the first 2 letters of s by 5, we have ""igc"". after shifting the first 3 letters of s by 9, we have ""rpl"", the answer. note: `1 <= s.length = shifts.length <= 20000` `0 <= shifts[i] <= 10 ^ 9`",,
849,Maximize Distance to Closest Person,"You are given an array representing a row of `seats` where `seats[i] = 1` represents a person sitting in the `ith` seat, and `seats[i] = 0` represents that the `ith` seat is empty (0-indexed).

There is at least one empty seat, and at least one person sitting.

Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. 
Return that maximum distance to the closest person.


Example 1:
Input: seats = [1,0,0,0,1,0,1]
Output: 2
Explanation: 
If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.

If Alex sits in any other open seat, the closest person has distance 1.

Thus, the maximum distance to the closest person is 2.


Example 2:
Input: seats = [1,0,0,0]
Output: 3
Explanation: 
If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.

This is the maximum distance possible, so the answer is 3.


Example 3:
Input: seats = [0,1]
Output: 1

Constraints:
`2 <= seats.length <= 2 * 104`
`seats[i]` is `0` or `1`.

At least one seat is empty.

At least one seat is occupied.",Medium,https://leetcode.com/problems/maximize-distance-to-closest-person,"Yandex,Google,Amazon",Array,1278,"[Exam Room, /problems/exam-room/, Medium]","you are given an array representing a row of `seats` where `seats[i] = 1` represents a person sitting in the `ith` seat, and `seats[i] = 0` represents that the `ith` seat is empty (0-indexed). there is at least one empty seat, and at least one person sitting. alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. return that maximum distance to the closest person.","input: seats = [1,0,0,0,1,0,1] output: 2 explanation: if alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2. if alex sits in any other open seat, the closest person has distance 1. thus, the maximum distance to the closest person is 2. example 2: input: seats = [1,0,0,0] output: 3 explanation: if alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away. this is the maximum distance possible, so the answer is 3. example 3: input: seats = [0,1] output: 1",`2 <= seats.length <= 2 * 10^4` `seats[i]` is `0` or `1`. at least one seat is empty. at least one seat is occupied.,
850,Rectangle Area II,"We are given a list of (axis-aligned) `rectangles`. Each `rectangle[i] = [xi1, yi1, xi2, yi2] `, where `(xi1, yi1)` are the coordinates of the bottom-left corner, and `(xi2, yi2)` are the coordinates of the top-right corner of the `ith` rectangle.

Find the total area covered by all `rectangles` in the plane. Since the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]
Output: 6
Explanation: As illustrated in the picture.


Example 2:
Input: rectangles = [[0,0,1000000000,1000000000]]
Output: 49
Explanation: The answer is 1018 modulo (109 + 7), which is (109)2 = (-7)2 = 49.


Constraints:
`1 <= rectangles.length <= 200`
`rectanges[i].length = 4`
`0 <= rectangles[i][j] <= 109`
The total area covered by all rectangles will never exceed `263 - 1` and thus will fit in a 64-bit signed integer.",Hard,https://leetcode.com/problems/rectangle-area-ii,Sumologic,"Segment Tree,Line Sweep",449,,"we are given a list of (axis-aligned) `rectangles`. each `rectangle[i] = [xi1, yi1, xi2, yi2] `, where `(xi1, yi1)` are the coordinates of the bottom-left corner, and `(xi2, yi2)` are the coordinates of the top-right corner of the `ith` rectangle. find the total area covered by all `rectangles` in the plane. since the answer may be too large, return it modulo `109 + 7`.","input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]] output: 6 explanation: as illustrated in the picture. example 2: input: rectangles = [[0,0,1000000000,1000000000]] output: 49 explanation: the answer is 1018 modulo (109 + 7), which is (109)2 = (-7)2 = 49.",`1 <= rectangles.length <= 200` `rectanges[i].length = 4` `0 <= rectangles[i][j] <= 10^9` the total area covered by all rectangles will never exceed `263 - 1` and thus will fit in a 64-bit signed integer.,
851,Loud and Rich,"In a group of N people (labelled `0, 1, 2, ..., N-1`), each person has different amounts of money, and different levels of quietness.

For convenience, we'll call the person with label `x`, simply ""person `x`"".

We'll say that `richer[i] = [x, y]` if person `x` definitely has more money than person `y`.  Note that `richer` may only be a subset of valid observations.

Also, we'll say `quiet[x] = q` if person x has quietness `q`.

Now, return `answer`, where `answer[x] = y` if `y` is the least quiet person (that is, the person `y` with the smallest value of `quiet[y]`), among all people who definitely have equal to or more money than person `x`.


Example 1:
Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]
Output: [5,5,2,5,4,5,6,7]
Explanation: 
answer[0] = 5.

Person 5 has more money than 3, which has more money than 1, which has more money than 0.

The only person who is quieter (has lower quiet[x]) is person 7, but
it isn't clear if they have more money than person 0.

answer[7] = 7.

Among all people that definitely have equal to or more money than person 7
(which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x])
is person 7.

The other answers can be filled out with similar reasoning.

Note:
`1 <= quiet.length = N <= 500`
`0 <= quiet[i] < N`, all `quiet[i]` are different.

`0 <= richer.length <= N * (N-1) / 2`
`0 <= richer[i][j] < N`
`richer[i][0] != richer[i][1]`
`richer[i]`'s are all different.

The observations in `richer` are all logically consistent.",Medium,https://leetcode.com/problems/loud-and-rich,Amazon,Depth-first Search,318,,"in a group of n people (labelled `0, 1, 2, ..., n-1`), each person has different amounts of money, and different levels of quietness. for convenience, we'll call the person with label `x`, simply ""person `x`"". we'll say that `richer[i] = [x, y]` if person `x` definitely has more money than person `y`. note that `richer` may only be a subset of valid observations. also, we'll say `quiet[x] = q` if person x has quietness `q`. now, return `answer`, where `answer[x] = y` if `y` is the least quiet person (that is, the person `y` with the smallest value of `quiet[y]`), among all people who definitely have equal to or more money than person `x`.","input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0] output: [5,5,2,5,4,5,6,7] explanation: answer[0] = 5. person 5 has more money than 3, which has more money than 1, which has more money than 0. the only person who is quieter (has lower quiet[x]) is person 7, but it isn't clear if they have more money than person 0. answer[7] = 7. among all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7. the other answers can be filled out with similar reasoning. note: `1 <= quiet.length = n <= 500` `0 <= quiet[i] < n`, all `quiet[i]` are different. `0 <= richer.length <= n * (n-1) / 2` `0 <= richer[i][j] < n` `richer[i][0] != richer[i][1]` `richer[i]`'s are all different. the observations in `richer` are all logically consistent.",,
852,Peak Index in a Mountain Array,"Let's call an array `arr` a mountain if the following properties hold:
`arr.length >= 3`
There exists some `i` with `0 < i < arr.length - 1` such that:
	
`arr[0] < arr[1] < ... arr[i-1] < arr[i] `
`arr[i] > arr[i+1] > ... > arr[arr.length - 1]`
Given an integer array `arr` that is guaranteed to be a mountain, return any `i` such that `arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`.


Example 1:
Input: arr = [0,1,0]
Output: 1

Example 2:
Input: arr = [0,2,1,0]
Output: 1

Example 3:
Input: arr = [0,10,5,2]
Output: 1

Example 4:
Input: arr = [3,4,5,1]
Output: 2

Example 5:
Input: arr = [24,69,100,99,79,78,67,36,26,19]
Output: 2

Constraints:
`3 <= arr.length <= 104`
`0 <= arr[i] <= 106`
`arr` is guaranteed to be a mountain array.

Follow up: Finding the `O(n)` is straightforward, could you find an `O(log(n))` solution?",Easy,https://leetcode.com/problems/peak-index-in-a-mountain-array,"Bloomberg,Yahoo",Binary Search,1027,"[Find Peak Element, /problems/find-peak-element/, Medium], [Find in Mountain Array, /problems/find-in-mountain-array/, Hard], [Minimum Number of Removals to Make Mountain Array, /problems/minimum-number-of-removals-to-make-mountain-array/, Hard]","let's call an array `arr` a mountain if the following properties hold: `arr.length >= 3` there exists some `i` with `0 < i < arr.length - 1` such that: `arr[0] < arr[1] < ... arr[i-1] < arr[i] ` `arr[i] > arr[i+1] > ... > arr[arr.length - 1]` given an integer array `arr` that is guaranteed to be a mountain, return any `i` such that `arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`.","input: arr = [0,1,0] output: 1 example 2: input: arr = [0,2,1,0] output: 1 example 3: input: arr = [0,10,5,2] output: 1 example 4: input: arr = [3,4,5,1] output: 2 example 5: input: arr = [24,69,100,99,79,78,67,36,26,19] output: 2",`3 <= arr.length <= 10^4` `0 <= arr[i] <= 10^6` `arr` is guaranteed to be a mountain array.,"finding the `o(n)` is straightforward, could you find an `o(log(n))` solution?"
853,Car Fleet,"`N` cars are going to the same destination along a one lane road.  The destination is `target` miles away.

Each car `i` has a constant speed `speed[i]` (in miles per hour), and initial position `position[i]` miles towards the target along the road.

A car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.

The distance between these two cars is ignored - they are assumed to have the same position.

A car fleet is some non-empty set of cars driving at the same position and same speed.  Note that a single car is also a car fleet.

If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.

How many car fleets will arrive at the destination?

Example 1:
Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 and 8 become a fleet, meeting each other at 12.

The car starting at 0 doesn't catch up to any other car, so it is a fleet by itself.

The cars starting at 5 and 3 become a fleet, meeting each other at 6.

Note that no other cars meet these fleets before the destination, so the answer is 3.

Note:
`0 <= N <= 10 ^ 4`
`0 < target <= 10 ^ 6`
`0 < speed[i] <= 10 ^ 6`
`0 <= position[i] < target`
All initial positions are different.",Medium,https://leetcode.com/problems/car-fleet,"Google,Nutanix",Sort,658,"[Car Fleet II, /problems/car-fleet-ii/, Hard]","`n` cars are going to the same destination along a one lane road. the destination is `target` miles away. each car `i` has a constant speed `speed[i]` (in miles per hour), and initial position `position[i]` miles towards the target along the road. a car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed. the distance between these two cars is ignored - they are assumed to have the same position. a car fleet is some non-empty set of cars driving at the same position and same speed. note that a single car is also a car fleet. if a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet. how many car fleets will arrive at the destination?","input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3] output: 3 explanation: the cars starting at 10 and 8 become a fleet, meeting each other at 12. the car starting at 0 doesn't catch up to any other car, so it is a fleet by itself. the cars starting at 5 and 3 become a fleet, meeting each other at 6. note that no other cars meet these fleets before the destination, so the answer is 3. note: `0 <= n <= 10 ^ 4` `0 < target <= 10 ^ 6` `0 < speed[i] <= 10 ^ 6` `0 <= position[i] < target` all initial positions are different.",,
854,K-Similar Strings,"Strings `s1` and `s2` are `k`-similar (for some non-negative integer `k`) if we can swap the positions of two letters in `s1` exactly `k` times so that the resulting string equals `s2`.

Given two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and `s2` are `k`-similar.


Example 1:
Input: s1 = ""ab"", s2 = ""ba""
Output: 1

Example 2:
Input: s1 = ""abc"", s2 = ""bca""
Output: 2

Example 3:
Input: s1 = ""abac"", s2 = ""baca""
Output: 2

Example 4:
Input: s1 = ""aabc"", s2 = ""abca""
Output: 2

Constraints:
`1 <= s1.length <= 20`
`s2.length == s1.length`
`s1` and `s2` contain only lowercase letters from the set `{'a', 'b', 'c', 'd', 'e', 'f'}`.

`s2` is an anagram of `s1`.",Hard,https://leetcode.com/problems/k-similar-strings,Amazon,"Breadth-first Search,Graph",567,"[Couples Holding Hands, /problems/couples-holding-hands/, Hard]","strings `s1` and `s2` are `k`-similar (for some non-negative integer `k`) if we can swap the positions of two letters in `s1` exactly `k` times so that the resulting string equals `s2`. given two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and `s2` are `k`-similar.","input: s1 = ""ab"", s2 = ""ba"" output: 1 example 2: input: s1 = ""abc"", s2 = ""bca"" output: 2 example 3: input: s1 = ""abac"", s2 = ""baca"" output: 2 example 4: input: s1 = ""aabc"", s2 = ""abca"" output: 2","`1 <= s1.length <= 20` `s2.length == s1.length` `s1` and `s2` contain only lowercase letters from the set `{'a', 'b', 'c', 'd', 'e', 'f'}`. `s2` is an anagram of `s1`.",
855,Exam Room,"In an exam room, there are `N` seats in a single row, numbered `0, 1, 2, ..., N-1`.

When a student enters the room, they must sit in the seat that maximizes the distance to the closest person.  If there are multiple such seats, they sit in the seat with the lowest number.  (Also, if no one is in the room, then the student sits at seat number 0.)
Return a class `ExamRoom(int N)` that exposes two functions: `ExamRoom.seat()` returning an `int` representing what seat the student sat in, and `ExamRoom.leave(int p)` representing that the student in seat number `p` now leaves the room.  It is guaranteed that any calls to `ExamRoom.leave(p)` have a student sitting in seat `p`.


Example 1:
Input: [""ExamRoom"",""seat"",""seat"",""seat"",""seat"",""leave"",""seat""], [[10],[],[],[],[],[4],[]]
Output: [null,0,9,4,2,null,5]
Explanation:
ExamRoom(10) -> null
seat() -> 0, no one is in the room, then the student sits at seat number 0.

seat() -> 9, the student sits at the last seat number 9.

seat() -> 4, the student sits at the last seat number 4.

seat() -> 2, the student sits at the last seat number 2.

leave(4) -> null
seat() -> 5, the student sits at the last seat number 5.

​​​​​​​
Note:
`1 <= N <= 10^9`
`ExamRoom.seat()` and `ExamRoom.leave()` will be called at most `10^4` times across all test cases.

Calls to `ExamRoom.leave(p)` are guaranteed to have a student currently sitting in seat number `p`.",Medium,https://leetcode.com/problems/exam-room,Google,Ordered Map,715,"[Maximize Distance to Closest Person, /problems/maximize-distance-to-closest-person/, Medium]","in an exam room, there are `n` seats in a single row, numbered `0, 1, 2, ..., n-1`. when a student enters the room, they must sit in the seat that maximizes the distance to the closest person. if there are multiple such seats, they sit in the seat with the lowest number. (also, if no one is in the room, then the student sits at seat number 0.) return a class `examroom(int n)` that exposes two functions: `examroom.seat()` returning an `int` representing what seat the student sat in, and `examroom.leave(int p)` representing that the student in seat number `p` now leaves the room. it is guaranteed that any calls to `examroom.leave(p)` have a student sitting in seat `p`.","input: [""examroom"",""seat"",""seat"",""seat"",""seat"",""leave"",""seat""], [[10],[],[],[],[],[4],[]] output: [null,0,9,4,2,null,5] explanation: examroom(10) -> null seat() -> 0, no one is in the room, then the student sits at seat number 0. seat() -> 9, the student sits at the last seat number 9. seat() -> 4, the student sits at the last seat number 4. seat() -> 2, the student sits at the last seat number 2. leave(4) -> null seat() -> 5, the student sits at the last seat number 5. ​​​​​​​ note: `1 <= n <= 10^9` `examroom.seat()` and `examroom.leave()` will be called at most `10^4` times across all test cases. calls to `examroom.leave(p)` are guaranteed to have a student currently sitting in seat number `p`.",,
856,Score of Parentheses,"Given a balanced parentheses string `S`, compute the score of the string based on the following rule:
`()` has score 1
`AB` has score `A + B`, where A and B are balanced parentheses strings.

`(A)` has score `2 * A`, where A is a balanced parentheses string.


Example 1:
Input: ""()""
Output: 1

Example 2:
Input: ""(())""
Output: 2

Example 3:
Input: ""()()""
Output: 2

Example 4:
Input: ""(()(()))""
Output: 6
Note:
`S` is a balanced parentheses string, containing only `(` and `)`.

`2 <= S.length <= 50`",Medium,https://leetcode.com/problems/score-of-parentheses,Google,"String,Stack",2088,,"given a balanced parentheses string `s`, compute the score of the string based on the following rule: `()` has score 1 `ab` has score `a + b`, where a and b are balanced parentheses strings. `(a)` has score `2 * a`, where a is a balanced parentheses string.","input: ""()"" output: 1 example 2: input: ""(())"" output: 2 example 3: input: ""()()"" output: 2 example 4: input: ""(()(()))"" output: 6 note: `s` is a balanced parentheses string, containing only `(` and `)`. `2 <= s.length <= 50`",,
857,Minimum Cost to Hire K Workers,"There are `N` workers.  The `i`-th worker has a `quality[i]` and a minimum wage expectation `wage[i]`.

Now we want to hire exactly `K` workers to form a paid group.  When hiring a group of K workers, we must pay them according to the following rules:
Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.

Every worker in the paid group must be paid at least their minimum wage expectation.

Return the least amount of money needed to form a paid group satisfying the above conditions.


Example 1:
Input: quality = [10,20,5], wage = [70,50,30], K = 2
Output: 105.00000
Explanation: We pay 70 to 0-th worker and 35 to 2-th worker.


Example 2:
Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3
Output: 30.66667
Explanation: We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately. 
Note:
`1 <= K <= N <= 10000`, where `N = quality.length = wage.length`
`1 <= quality[i] <= 10000`
`1 <= wage[i] <= 10000`
Answers within `10^-5` of the correct answer will be considered correct.",Hard,https://leetcode.com/problems/minimum-cost-to-hire-k-workers,Google,Heap,1142,,"there are `n` workers. the `i`-th worker has a `quality[i]` and a minimum wage expectation `wage[i]`. now we want to hire exactly `k` workers to form a paid group. when hiring a group of k workers, we must pay them according to the following rules: every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group. every worker in the paid group must be paid at least their minimum wage expectation. return the least amount of money needed to form a paid group satisfying the above conditions.","input: quality = [10,20,5], wage = [70,50,30], k = 2 output: 105.00000 explanation: we pay 70 to 0-th worker and 35 to 2-th worker. example 2: input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3 output: 30.66667 explanation: we pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately. note: `1 <= k <= n <= 10000`, where `n = quality.length = wage.length` `1 <= quality[i] <= 10000` `1 <= wage[i] <= 10000` answers within `10^-5` of the correct answer will be considered correct.",,
858,Mirror Reflection,"There is a special square room with mirrors on each of the four walls.  Except for the southwest corner, there are receptors on each of the remaining corners, numbered `0`, `1`, and `2`.

The square room has walls of length `p`, and a laser ray from the southwest corner first meets the east wall at a distance `q` from the `0`th receptor.

Return the number of the receptor that the ray meets first.  (It is guaranteed that the ray will meet a receptor eventually.)

Example 1:
Input: p = 2, q = 1
Output: 2
Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.

Note:
`1 <= p <= 1000`
`0 <= q <= p`",Medium,https://leetcode.com/problems/mirror-reflection,Facebook,Math,327,,"there is a special square room with mirrors on each of the four walls. except for the southwest corner, there are receptors on each of the remaining corners, numbered `0`, `1`, and `2`. the square room has walls of length `p`, and a laser ray from the southwest corner first meets the east wall at a distance `q` from the `0`th receptor. return the number of the receptor that the ray meets first. (it is guaranteed that the ray will meet a receptor eventually.)","input: p = 2, q = 1 output: 2 explanation: the ray meets receptor 2 the first time it gets reflected back to the left wall. note: `1 <= p <= 1000` `0 <= q <= p`",,
859,Buddy Strings,"Given two strings `a` and `b`, return `true` if you can swap two letters in `a` so the result is equal to `b`, otherwise, return `false`.

Swapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `a[i]` and `b[j]`. For example, swapping at indices `0` and `2` in `""abcd""` results in `""cbad""`.


Example 1:
Input: a = ""ab"", b = ""ba""
Output: true
Explanation: You can swap a[0] = 'a' and a[1] = 'b' to get ""ba"", which is equal to b.


Example 2:
Input: a = ""ab"", b = ""ab""
Output: false
Explanation: The only letters you can swap are a[0] = 'a' and a[1] = 'b', which results in ""ba"" != b.


Example 3:
Input: a = ""aa"", b = ""aa""
Output: true
Explanation: You can swap a[0] = 'a' and a[1] = 'a' to get ""aa"", which is equal to b.


Example 4:
Input: a = ""aaaaaaabc"", b = ""aaaaaaacb""
Output: true

Constraints:
`1 <= a.length, b.length <= 2 * 104`
`a` and `b` consist of lowercase letters.",Easy,https://leetcode.com/problems/buddy-strings,Facebook,String,928,"[Determine if Two Strings Are Close, /problems/determine-if-two-strings-are-close/, Medium], [Check if One String Swap Can Make Strings Equal, /problems/check-if-one-string-swap-can-make-strings-equal/, Easy]","given two strings `a` and `b`, return `true` if you can swap two letters in `a` so the result is equal to `b`, otherwise, return `false`. swapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `a[i]` and `b[j]`. for example, swapping at indices `0` and `2` in `""abcd""` results in `""cbad""`.","input: a = ""ab"", b = ""ba"" output: true explanation: you can swap a[0] = 'a' and a[1] = 'b' to get ""ba"", which is equal to b. example 2: input: a = ""ab"", b = ""ab"" output: false explanation: the only letters you can swap are a[0] = 'a' and a[1] = 'b', which results in ""ba"" != b. example 3: input: a = ""aa"", b = ""aa"" output: true explanation: you can swap a[0] = 'a' and a[1] = 'a' to get ""aa"", which is equal to b. example 4: input: a = ""aaaaaaabc"", b = ""aaaaaaacb"" output: true","`1 <= a.length, b.length <= 2 * 10^4` `a` and `b` consist of lowercase letters.",
860,Lemonade Change,"At a lemonade stand, each lemonade costs `$5`. 
Customers are standing in a queue to buy from you, and order one at a time (in the order specified by `bills`).

Each customer will only buy one lemonade and pay with either a `$5`, `$10`, or `$20` bill.  You must provide the correct change to each customer, so that the net transaction is that the customer pays $5.

Note that you don't have any change in hand at first.

Return `true` if and only if you can provide every customer with correct change.


Example 1:
Input: [5,5,5,10,20]
Output: true
Explanation: 
From the first 3 customers, we collect three $5 bills in order.

From the fourth customer, we collect a $10 bill and give back a $5.

From the fifth customer, we give a $10 bill and a $5 bill.

Since all customers got correct change, we output true.


Example 2:
Input: [5,5,10]
Output: true

Example 3:
Input: [10,10]
Output: false

Example 4:
Input: [5,5,10,10,20]
Output: false
Explanation: 
From the first two customers in order, we collect two $5 bills.

For the next two customers in order, we collect a $10 bill and give back a $5 bill.

For the last customer, we can't give change of $15 back because we only have two $10 bills.

Since not every customer received correct change, the answer is false.

Note:
`0 <= bills.length <= 10000`
`bills[i]` will be either `5`, `10`, or `20`.",Easy,https://leetcode.com/problems/lemonade-change,Atlassian,Greedy,811,,"at a lemonade stand, each lemonade costs `$5`. customers are standing in a queue to buy from you, and order one at a time (in the order specified by `bills`). each customer will only buy one lemonade and pay with either a `$5`, `$10`, or `$20` bill. you must provide the correct change to each customer, so that the net transaction is that the customer pays $5. note that you don't have any change in hand at first. return `true` if and only if you can provide every customer with correct change.","input: [5,5,5,10,20] output: true explanation: from the first 3 customers, we collect three $5 bills in order. from the fourth customer, we collect a $10 bill and give back a $5. from the fifth customer, we give a $10 bill and a $5 bill. since all customers got correct change, we output true. example 2: input: [5,5,10] output: true example 3: input: [10,10] output: false example 4: input: [5,5,10,10,20] output: false explanation: from the first two customers in order, we collect two $5 bills. for the next two customers in order, we collect a $10 bill and give back a $5 bill. for the last customer, we can't give change of $15 back because we only have two $10 bills. since not every customer received correct change, the answer is false. note: `0 <= bills.length <= 10000` `bills[i]` will be either `5`, `10`, or `20`.",,
861,Score After Flipping Matrix,"We have a two dimensional matrix `A` where each value is `0` or `1`.

A move consists of choosing any row or column, and toggling each value in that row or column: changing all `0`s to `1`s, and all `1`s to `0`s.

After making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.

Return the highest possible score.


Example 1:
Input: [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
Explanation:
Toggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].

0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
Note:
`1 <= A.length <= 20`
`1 <= A[0].length <= 20`
`A[i][j]` is `0` or `1`.",Medium,https://leetcode.com/problems/score-after-flipping-matrix,Amazon,Greedy,660,,"we have a two dimensional matrix `a` where each value is `0` or `1`. a move consists of choosing any row or column, and toggling each value in that row or column: changing all `0`s to `1`s, and all `1`s to `0`s. after making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers. return the highest possible score.","input: [[0,0,1,1],[1,0,1,0],[1,1,0,0]] output: 39 explanation: toggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]]. 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39 note: `1 <= a.length <= 20` `1 <= a[0].length <= 20` `a[i][j]` is `0` or `1`.",,
862,Shortest Subarray with Sum at Least K,"Return the length of the shortest, non-empty, contiguous subarray of `A` with sum at least `K`.

If there is no non-empty subarray with sum at least `K`, return `-1`.


Example 1:
Input: A = [1], K = 1
Output: 1

Example 2:
Input: A = [1,2], K = 4
Output: -1

Example 3:
Input: A = [2,-1,2], K = 3
Output: 3
Note:
`1 <= A.length <= 50000`
`-10 ^ 5 <= A[i] <= 10 ^ 5`
`1 <= K <= 10 ^ 9`",Hard,https://leetcode.com/problems/shortest-subarray-with-sum-at-least-k,Goldman Sachs,"Binary Search,Queue",1714,,"return the length of the shortest, non-empty, contiguous subarray of `a` with sum at least `k`. if there is no non-empty subarray with sum at least `k`, return `-1`.","input: a = [1], k = 1 output: 1 example 2: input: a = [1,2], k = 4 output: -1 example 3: input: a = [2,-1,2], k = 3 output: 3 note: `1 <= a.length <= 50000` `-10 ^ 5 <= a[i] <= 10 ^ 5` `1 <= k <= 10 ^ 9`",,
863,All Nodes Distance K in Binary Tree,"We are given a binary tree (with root node `root`), a `target` node, and an integer value `K`.

Return a list of the values of all nodes that have a distance `K` from the `target` node.  The answer can be returned in any order.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
Output: [7,4,1]
Explanation: 
The nodes that are a distance 2 from the target node (with value 5)
have values 7, 4, and 1.

Note that the inputs ""root"" and ""target"" are actually TreeNodes.

The descriptions of the inputs above are just serializations of these objects.

Note:
The given tree is non-empty.

Each node in the tree has unique values `0 <= node.val <= 500`.

The `target` node is a node in the tree.

`0 <= K <= 1000`.",Medium,https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree,"Amazon,Facebook,Google","Tree,Depth-first Search,Breadth-first Search",3408,,"we are given a binary tree (with root node `root`), a `target` node, and an integer value `k`. return a list of the values of all nodes that have a distance `k` from the `target` node. the answer can be returned in any order.","input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2 output: [7,4,1] explanation: the nodes that are a distance 2 from the target node (with value 5) have values 7, 4, and 1. note that the inputs ""root"" and ""target"" are actually treenodes. the descriptions of the inputs above are just serializations of these objects. note: the given tree is non-empty. each node in the tree has unique values `0 <= node.val <= 500`. the `target` node is a node in the tree. `0 <= k <= 1000`.",,
864,Shortest Path to Get All Keys,"We are given a 2-dimensional `grid`. `"".""` is an empty cell, `""#""` is a wall, `""@""` is the starting point, (`""a""`, `""b""`, ...) are keys, and (`""A""`, `""B""`, ...) are locks.

We start at the starting point, and one move consists of walking one space in one of the 4 cardinal directions.  We cannot walk outside the grid, or walk into a wall.  If we walk over a key, we pick it up.  We can't walk over a lock unless we have the corresponding key.

For some 1 <= K <= 6, there is exactly one lowercase and one uppercase letter of the first `K` letters of the English alphabet in the grid.  This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.

Return the lowest number of moves to acquire all keys.  If it's impossible, return `-1`.


Example 1:
Input: [""@.a.#"",""###.#"",""b.A.B""]
Output: 8

Example 2:
Input: [""@..aA"",""..B#."",""....b""]
Output: 6
Note:
`1 <= grid.length <= 30`
`1 <= grid[0].length <= 30`
`grid[i][j]` contains only` '.'`, `'#'`, `'@'`, `'a'-``'f``'` and `'A'-'F'`
The number of keys is in `[1, 6]`.  Each key has a different letter and opens exactly one lock.",Hard,https://leetcode.com/problems/shortest-path-to-get-all-keys,"ByteDance,Airbnb","Heap,Breadth-first Search",543,,"we are given a 2-dimensional `grid`. `"".""` is an empty cell, `""#""` is a wall, `""@""` is the starting point, (`""a""`, `""b""`, ...) are keys, and (`""a""`, `""b""`, ...) are locks. we start at the starting point, and one move consists of walking one space in one of the 4 cardinal directions. we cannot walk outside the grid, or walk into a wall. if we walk over a key, we pick it up. we can't walk over a lock unless we have the corresponding key. for some 1 <= k <= 6, there is exactly one lowercase and one uppercase letter of the first `k` letters of the english alphabet in the grid. this means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the english alphabet. return the lowest number of moves to acquire all keys. if it's impossible, return `-1`.","input: [""@.a.#"",""###.#"",""b.a.b""] output: 8 example 2: input: [""@..aa"",""..b#."",""....b""] output: 6 note: `1 <= grid.length <= 30` `1 <= grid[0].length <= 30` `grid[i][j]` contains only` '.'`, `'#'`, `'@'`, `'a'-``'f``'` and `'a'-'f'` the number of keys is in `[1, 6]`. each key has a different letter and opens exactly one lock.",,
865,Smallest Subtree with all the Deepest Nodes,"Given the `root` of a binary tree, the depth of each node is the shortest distance to the root.

Return the smallest subtree such that it contains all the deepest nodes in the original tree.

A node is called the deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is tree consisting of that node, plus the set of all descendants of that node.

Note: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored in yellow in the diagram.

The nodes coloured in blue are the deepest nodes of the tree.

Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.


Example 2:
Input: root = [1]
Output: [1]
Explanation: The root is the deepest node in the tree.


Example 3:
Input: root = [0,1,3,null,2]
Output: [2]
Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.


Constraints:
The number of nodes in the tree will be in the range `[1, 500]`.

`0 <= Node.val <= 500`
The values of the nodes in the tree are unique.",Medium,https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes,Facebook,"Tree,Depth-first Search,Breadth-first Search,Recursion",1277,,"given the `root` of a binary tree, the depth of each node is the shortest distance to the root. return the smallest subtree such that it contains all the deepest nodes in the original tree. a node is called the deepest if it has the largest depth possible among any node in the entire tree. the subtree of a node is tree consisting of that node, plus the set of all descendants of that node. note: this question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/","input: root = [3,5,1,6,2,0,8,null,null,7,4] output: [2,7,4] explanation: we return the node with value 2, colored in yellow in the diagram. the nodes coloured in blue are the deepest nodes of the tree. notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it. example 2: input: root = [1] output: [1] explanation: the root is the deepest node in the tree. example 3: input: root = [0,1,3,null,2] output: [2] explanation: the deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.","the number of nodes in the tree will be in the range `[1, 500]`. `0 <= node.val <= 500` the values of the nodes in the tree are unique.",
866,Prime Palindrome,"Find the smallest prime palindrome greater than or equal to `N`.

Recall that a number is prime if it's only divisors are 1 and itself, and it is greater than 1. 
For example, 2,3,5,7,11 and 13 are primes.

Recall that a number is a palindrome if it reads the same from left to right as it does from right to left. 
For example, 12321 is a palindrome.


Example 1:
Input: 6
Output: 7

Example 2:
Input: 8
Output: 11

Example 3:
Input: 13
Output: 101
Note:
`1 <= N <= 10^8`
The answer is guaranteed to exist and be less than `2 * 10^8`.",Medium,https://leetcode.com/problems/prime-palindrome,Amazon,Math,238,,"find the smallest prime palindrome greater than or equal to `n`. recall that a number is prime if it's only divisors are 1 and itself, and it is greater than 1. for example, 2,3,5,7,11 and 13 are primes. recall that a number is a palindrome if it reads the same from left to right as it does from right to left. for example, 12321 is a palindrome.",input: 6 output: 7 example 2: input: 8 output: 11 example 3: input: 13 output: 101 note: `1 <= n <= 10^8` the answer is guaranteed to exist and be less than `2 * 10^8`.,,
867,Transpose Matrix,"Given a 2D integer array `matrix`, return the transpose of `matrix`.

The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.


Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]

Example 2:
Input: matrix = [[1,2,3],[4,5,6]]
Output: [[1,4],[2,5],[3,6]]

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 1000`
`1 <= m * n <= 105`
`-109 <= matrix[i][j] <= 109`",Easy,https://leetcode.com/problems/transpose-matrix,"Apple,Microsoft,Nvidia,Citadel",Array,626,,"given a 2d integer array `matrix`, return the transpose of `matrix`. the transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.","input: matrix = [[1,2,3],[4,5,6],[7,8,9]] output: [[1,4,7],[2,5,8],[3,6,9]] example 2: input: matrix = [[1,2,3],[4,5,6]] output: [[1,4],[2,5],[3,6]]","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 1000` `1 <= m * n <= 10^5` `-10^9 <= matrix[i][j] <= 10^9`",
868,Binary Gap,"Given a positive integer `n`, find and return the longest distance between any two adjacent `1`'s in the binary representation of `n`. If there are no two adjacent `1`'s, return `0`.

Two `1`'s are adjacent if there are only `0`'s separating them (possibly no `0`'s). The distance between two `1`'s is the absolute difference between their bit positions. For example, the two `1`'s in `""1001""` have a distance of 3.


Example 1:
Input: n = 22
Output: 2
Explanation: 22 in binary is ""10110"".

The first adjacent pair of 1's is ""10110"" with a distance of 2.

The second adjacent pair of 1's is ""10110"" with a distance of 1.

The answer is the largest of these two distances, which is 2.

Note that ""10110"" is not a valid pair since there is a 1 separating the two 1's underlined.


Example 2:
Input: n = 5
Output: 2
Explanation: 5 in binary is ""101"".


Example 3:
Input: n = 6
Output: 1
Explanation: 6 in binary is ""110"".


Example 4:
Input: n = 8
Output: 0
Explanation: 8 in binary is ""1000"".

There aren't any adjacent pairs of 1's in the binary representation of 8, so we return 0.


Example 5:
Input: n = 1
Output: 0

Constraints:
`1 <= n <= 109`",Easy,https://leetcode.com/problems/binary-gap,"Twitter,eBay",Math,290,,"given a positive integer `n`, find and return the longest distance between any two adjacent `1`'s in the binary representation of `n`. if there are no two adjacent `1`'s, return `0`. two `1`'s are adjacent if there are only `0`'s separating them (possibly no `0`'s). the distance between two `1`'s is the absolute difference between their bit positions. for example, the two `1`'s in `""1001""` have a distance of 3.","input: n = 22 output: 2 explanation: 22 in binary is ""10110"". the first adjacent pair of 1's is ""10110"" with a distance of 2. the second adjacent pair of 1's is ""10110"" with a distance of 1. the answer is the largest of these two distances, which is 2. note that ""10110"" is not a valid pair since there is a 1 separating the two 1's underlined. example 2: input: n = 5 output: 2 explanation: 5 in binary is ""101"". example 3: input: n = 6 output: 1 explanation: 6 in binary is ""110"". example 4: input: n = 8 output: 0 explanation: 8 in binary is ""1000"". there aren't any adjacent pairs of 1's in the binary representation of 8, so we return 0. example 5: input: n = 1 output: 0",`1 <= n <= 10^9`,
869,Reordered Power of 2,"You are given an integer `n`. We reorder the digits in any order (including the original order) such that the leading digit is not zero.

Return `true` if and only if we can do this so that the resulting number is a power of two.


Example 1:
Input: n = 1
Output: true

Example 2:
Input: n = 10
Output: false

Example 3:
Input: n = 16
Output: true

Example 4:
Input: n = 24
Output: false

Example 5:
Input: n = 46
Output: true

Constraints:
`1 <= n <= 109`",Medium,https://leetcode.com/problems/reordered-power-of-2,,,422,,you are given an integer `n`. we reorder the digits in any order (including the original order) such that the leading digit is not zero. return `true` if and only if we can do this so that the resulting number is a power of two.,input: n = 1 output: true example 2: input: n = 10 output: false example 3: input: n = 16 output: true example 4: input: n = 24 output: false example 5: input: n = 46 output: true,`1 <= n <= 10^9`,
870,Advantage Shuffle,"Given two arrays `A` and `B` of equal size, the advantage of `A` with respect to `B` is the number of indices `i` for which `A[i] > B[i]`.

Return any permutation of `A` that maximizes its advantage with respect to `B`.


Example 1:
Input: A = [2,7,11,15], B = [1,10,4,11]
Output: [2,11,7,15]

Example 2:
Input: A = [12,24,8,32], B = [13,25,32,11]
Output: [24,32,8,12]
Note:
`1 <= A.length = B.length <= 10000`
`0 <= A[i] <= 10^9`
`0 <= B[i] <= 10^9`",Medium,https://leetcode.com/problems/advantage-shuffle,"Apple,Facebook","Array,Greedy",975,,"given two arrays `a` and `b` of equal size, the advantage of `a` with respect to `b` is the number of indices `i` for which `a[i] > b[i]`. return any permutation of `a` that maximizes its advantage with respect to `b`.","input: a = [2,7,11,15], b = [1,10,4,11] output: [2,11,7,15] example 2: input: a = [12,24,8,32], b = [13,25,32,11] output: [24,32,8,12] note: `1 <= a.length = b.length <= 10000` `0 <= a[i] <= 10^9` `0 <= b[i] <= 10^9`",,
871,Minimum Number of Refueling Stops,"A car travels from a starting position to a destination which is `target` miles east of the starting position.

Along the way, there are gas stations.  Each `station[i]` represents a gas station that is `station[i][0]` miles east of the starting position, and has `station[i][1]` liters of gas.

The car starts with an infinite tank of gas, which initially has `startFuel` liters of fuel in it.  It uses 1 liter of gas per 1 mile that it drives.

When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.

What is the least number of refueling stops the car must make in order to reach its destination?  If it cannot reach the destination, return `-1`.

Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there.  If the car reaches the destination with 0 fuel left, it is still considered to have arrived.


Example 1:
Input: target = 1, startFuel = 1, stations = []
Output: 0
Explanation: We can reach the target without refueling.


Example 2:
Input: target = 100, startFuel = 1, stations = [[10,100]]
Output: -1
Explanation: We can't reach the target (or even the first gas station).


Example 3:
Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]
Output: 2
Explanation: 
We start with 10 liters of fuel.

We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.

Then, we drive from position 10 to position 60 (expending 50 liters of fuel),
and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.

We made 2 refueling stops along the way, so we return 2.

Note:
`1 <= target, startFuel, stations[i][1] <= 10^9`
`0 <= stations.length <= 500`
`0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target`",Hard,https://leetcode.com/problems/minimum-number-of-refueling-stops,"Flipkart,Google","Dynamic Programming,Heap",1143,,"a car travels from a starting position to a destination which is `target` miles east of the starting position. along the way, there are gas stations. each `station[i]` represents a gas station that is `station[i][0]` miles east of the starting position, and has `station[i][1]` liters of gas. the car starts with an infinite tank of gas, which initially has `startfuel` liters of fuel in it. it uses 1 liter of gas per 1 mile that it drives. when the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car. what is the least number of refueling stops the car must make in order to reach its destination? if it cannot reach the destination, return `-1`. note that if the car reaches a gas station with 0 fuel left, the car can still refuel there. if the car reaches the destination with 0 fuel left, it is still considered to have arrived.","input: target = 1, startfuel = 1, stations = [] output: 0 explanation: we can reach the target without refueling. example 2: input: target = 100, startfuel = 1, stations = [[10,100]] output: -1 explanation: we can't reach the target (or even the first gas station). example 3: input: target = 100, startfuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]] output: 2 explanation: we start with 10 liters of fuel. we drive to position 10, expending 10 liters of fuel. we refuel from 0 liters to 60 liters of gas. then, we drive from position 10 to position 60 (expending 50 liters of fuel), and refuel from 10 liters to 50 liters of gas. we then drive to and reach the target. we made 2 refueling stops along the way, so we return 2. note: `1 <= target, startfuel, stations[i][1] <= 10^9` `0 <= stations.length <= 500` `0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target`",,
872,Leaf-Similar Trees,"Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.

For example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9, 8)`.

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return `true` if and only if the two given trees with head nodes `root1` and `root2` are leaf-similar.


Example 1:
Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true

Example 2:
Input: root1 = [1], root2 = [1]
Output: true

Example 3:
Input: root1 = [1], root2 = [2]
Output: false

Example 4:
Input: root1 = [1,2], root2 = [2,2]
Output: true

Example 5:
Input: root1 = [1,2,3], root2 = [1,3,2]
Output: false

Constraints:
The number of nodes in each tree will be in the range `[1, 200]`.

Both of the given trees will have values in the range `[0, 200]`.",Easy,https://leetcode.com/problems/leaf-similar-trees,Amazon,"Tree,Depth-first Search",1121,,"consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence. for example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9, 8)`. two binary trees are considered leaf-similar if their leaf value sequence is the same. return `true` if and only if the two given trees with head nodes `root1` and `root2` are leaf-similar.","input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8] output: true example 2: input: root1 = [1], root2 = [1] output: true example 3: input: root1 = [1], root2 = [2] output: false example 4: input: root1 = [1,2], root2 = [2,2] output: true example 5: input: root1 = [1,2,3], root2 = [1,3,2] output: false","the number of nodes in each tree will be in the range `[1, 200]`. both of the given trees will have values in the range `[0, 200]`.",
873,Length of Longest Fibonacci Subsequence,"A sequence `X1, X2, ..., Xn` is Fibonacci-like if:
`n >= 3`
`Xi + Xi+1 = Xi+2` for all `i + 2 <= n`
Given a strictly increasing array `arr` of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of `arr`. If one does not exist, return `0`.

A subsequence is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.


Example 1:
Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].


Example 2:
Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].


Constraints:
`3 <= arr.length <= 1000`
`1 <= arr[i] < arr[i + 1] <= 109`",Medium,https://leetcode.com/problems/length-of-longest-fibonacci-subsequence,Amazon,"Array,Dynamic Programming",961,"[Fibonacci Number, /problems/fibonacci-number/, Easy]","a sequence `x1, x2, ..., xn` is fibonacci-like if: `n >= 3` `xi + xi+1 = xi+2` for all `i + 2 <= n` given a strictly increasing array `arr` of positive integers forming a sequence, return the length of the longest fibonacci-like subsequence of `arr`. if one does not exist, return `0`. a subsequence is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. for example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.","input: arr = [1,2,3,4,5,6,7,8] output: 5 explanation: the longest subsequence that is fibonacci-like: [1,2,3,5,8]. example 2: input: arr = [1,3,7,11,12,14,18] output: 3 explanation: the longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].",`3 <= arr.length <= 1000` `1 <= arr[i] < arr[i + 1] <= 10^9`,
874,Walking Robot Simulation,"A robot on an infinite XY-plane starts at point `(0, 0)` and faces north. The robot can receive one of three possible types of `commands`:
`-2`: turn left `90` degrees,
`-1`: turn right `90` degrees, or
`1 <= k <= 9`: move forward `k` units.

Some of the grid squares are `obstacles`. The `ith` obstacle is at grid point `obstacles[i] = (xi, yi)`.

If the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)
Return the maximum Euclidean distance that the robot will be from the origin squared (i.e. if the distance is `5`, return `25`).

Note:
North means +Y direction.

East means +X direction.

South means -Y direction.

West means -X direction.


Example 1:
Input: commands = [4,-1,3], obstacles = []
Output: 25
Explanation: The robot starts at (0, 0):
1. Move north 4 units to (0, 4).

2. Turn right.

3. Move east 3 units to (3, 4).

The furthest point away from the origin is (3, 4), which is 32 + 42 = 25 units away.


Example 2:
Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]
Output: 65
Explanation: The robot starts at (0, 0):
1. Move north 4 units to (0, 4).

2. Turn right.

3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).

4. Turn left.

5. Move north 4 units to (1, 8).

The furthest point away from the origin is (1, 8), which is 12 + 82 = 65 units away.


Constraints:
`1 <= commands.length <= 104`
`commands[i]` is one of the values in the list `[-2,-1,1,2,3,4,5,6,7,8,9]`.

`0 <= obstacles.length <= 104`
`-3 * 104 <= xi, yi <= 3 * 104`
The answer is guaranteed to be less than `231`.",Easy,https://leetcode.com/problems/walking-robot-simulation,Jane Street,Greedy,236,,"a robot on an infinite xy-plane starts at point `(0, 0)` and faces north. the robot can receive one of three possible types of `commands`: `-2`: turn left `90` degrees, `-1`: turn right `90` degrees, or `1 <= k <= 9`: move forward `k` units. some of the grid squares are `obstacles`. the `ith` obstacle is at grid point `obstacles[i] = (xi, yi)`. if the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.) return the maximum euclidean distance that the robot will be from the origin squared (i.e. if the distance is `5`, return `25`). note: north means +y direction. east means +x direction. south means -y direction. west means -x direction.","input: commands = [4,-1,3], obstacles = [] output: 25 explanation: the robot starts at (0, 0): 1. move north 4 units to (0, 4). 2. turn right. 3. move east 3 units to (3, 4). the furthest point away from the origin is (3, 4), which is 32 + 42 = 25 units away. example 2: input: commands = [4,-1,4,-2,4], obstacles = [[2,4]] output: 65 explanation: the robot starts at (0, 0): 1. move north 4 units to (0, 4). 2. turn right. 3. move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4). 4. turn left. 5. move north 4 units to (1, 8). the furthest point away from the origin is (1, 8), which is 12 + 82 = 65 units away.","`1 <= commands.length <= 10^4` `commands[i]` is one of the values in the list `[-2,-1,1,2,3,4,5,6,7,8,9]`. `0 <= obstacles.length <= 10^4` `-3 * 10^4 <= xi, yi <= 3 * 10^4` the answer is guaranteed to be less than `231`.",
875,Koko Eating Bananas,"Koko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.

Koko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer `k` such that she can eat all the bananas within `h` hours.


Example 1:
Input: piles = [3,6,7,11], h = 8
Output: 4

Example 2:
Input: piles = [30,11,23,4,20], h = 5
Output: 30

Example 3:
Input: piles = [30,11,23,4,20], h = 6
Output: 23

Constraints:
`1 <= piles.length <= 104`
`piles.length <= h <= 109`
`1 <= piles[i] <= 109`",Medium,https://leetcode.com/problems/koko-eating-bananas,Facebook,Binary Search,1387,"[Minimize Max Distance to Gas Station, /problems/minimize-max-distance-to-gas-station/, Hard]","koko loves to eat bananas. there are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. the guards have gone and will come back in `h` hours. koko can decide her bananas-per-hour eating speed of `k`. each hour, she chooses some pile of bananas and eats `k` bananas from that pile. if the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour. koko likes to eat slowly but still wants to finish eating all the bananas before the guards return. return the minimum integer `k` such that she can eat all the bananas within `h` hours.","input: piles = [3,6,7,11], h = 8 output: 4 example 2: input: piles = [30,11,23,4,20], h = 5 output: 30 example 3: input: piles = [30,11,23,4,20], h = 6 output: 23",`1 <= piles.length <= 10^4` `piles.length <= h <= 10^9` `1 <= piles[i] <= 10^9`,
876,Middle of the Linked List,"Given a non-empty, singly linked list with head node `head`, return a middle node of linked list.

If there are two middle nodes, return the second middle node.


Example 1:
Input: [1,2,3,4,5]
Output: Node 3 from this list (Serialization: [3,4,5])
The returned node has value 3.  (The judge's serialization of this node is [3,4,5]).

Note that we returned a ListNode object ans, such that:
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.


Example 2:
Input: [1,2,3,4,5,6]
Output: Node 4 from this list (Serialization: [4,5,6])
Since the list has two middle nodes with values 3 and 4, we return the second one.

Note:
The number of nodes in the given list will be between `1` and `100`.",Easy,https://leetcode.com/problems/middle-of-the-linked-list,Microsoft,Linked List,2236,,"given a non-empty, singly linked list with head node `head`, return a middle node of linked list. if there are two middle nodes, return the second middle node.","input: [1,2,3,4,5] output: node 3 from this list (serialization: [3,4,5]) the returned node has value 3. (the judge's serialization of this node is [3,4,5]). note that we returned a listnode object ans, such that: ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = null. example 2: input: [1,2,3,4,5,6] output: node 4 from this list (serialization: [4,5,6]) since the list has two middle nodes with values 3 and 4, we return the second one. note: the number of nodes in the given list will be between `1` and `100`.",,
877,Stone Game,"Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and each pile has a positive integer number of stones `piles[i]`.

The objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.

Alex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from either the beginning or the end of the row.  This continues until there are no more piles left, at which point the person with the most stones wins.

Assuming Alex and Lee play optimally, return `True` if and only if Alex wins the game.


Example 1:
Input: piles = [5,3,4,5]
Output: true
Explanation: 
Alex starts first, and can only take the first 5 or the last 5.

Say he takes the first 5, so that the row becomes [3, 4, 5].

If Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.

If Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.

This demonstrated that taking the first 5 was a winning move for Alex, so we return true.


Constraints:
`2 <= piles.length <= 500`
`piles.length` is even.

`1 <= piles[i] <= 500`
`sum(piles)` is odd.",Medium,https://leetcode.com/problems/stone-game,"Adobe,Apple","Math,Dynamic Programming,Minimax",1062,"[Stone Game V, /problems/stone-game-v/, Hard], [Stone Game VI, /problems/stone-game-vi/, Medium], [Stone Game VII, /problems/stone-game-vii/, Medium]","alex and lee play a game with piles of stones. there are an even number of piles arranged in a row, and each pile has a positive integer number of stones `piles[i]`. the objective of the game is to end with the most stones. the total number of stones is odd, so there are no ties. alex and lee take turns, with alex starting first. each turn, a player takes the entire pile of stones from either the beginning or the end of the row. this continues until there are no more piles left, at which point the person with the most stones wins. assuming alex and lee play optimally, return `true` if and only if alex wins the game.","input: piles = [5,3,4,5] output: true explanation: alex starts first, and can only take the first 5 or the last 5. say he takes the first 5, so that the row becomes [3, 4, 5]. if lee takes 3, then the board is [4, 5], and alex takes 5 to win with 10 points. if lee takes the last 5, then the board is [3, 4], and alex takes 4 to win with 9 points. this demonstrated that taking the first 5 was a winning move for alex, so we return true.",`2 <= piles.length <= 500` `piles.length` is even. `1 <= piles[i] <= 500` `sum(piles)` is odd.,
878,Nth Magical Number,"A positive integer is magical if it is divisible by either `a` or `b`.

Given the three integers `n`, `a`, and `b`, return the `nth` magical number. Since the answer may be very large, return it modulo `109 + 7`.


Example 1:
Input: n = 1, a = 2, b = 3
Output: 2

Example 2:
Input: n = 4, a = 2, b = 3
Output: 6

Example 3:
Input: n = 5, a = 2, b = 4
Output: 10

Example 4:
Input: n = 3, a = 6, b = 4
Output: 8

Constraints:
`1 <= n <= 109`
`2 <= a, b <= 4 * 104`",Hard,https://leetcode.com/problems/nth-magical-number,,,265,,"a positive integer is magical if it is divisible by either `a` or `b`. given the three integers `n`, `a`, and `b`, return the `nth` magical number. since the answer may be very large, return it modulo `109 + 7`.","input: n = 1, a = 2, b = 3 output: 2 example 2: input: n = 4, a = 2, b = 3 output: 6 example 3: input: n = 5, a = 2, b = 4 output: 10 example 4: input: n = 3, a = 6, b = 4 output: 8","`1 <= n <= 10^9` `2 <= a, b <= 4 * 10^4`",
879,Profitable Schemes,"There is a group of `n` members, and a list of various crimes they could commit. The `ith` crime generates a `profit[i]` and requires `group[i]` members to participate in it. If a member participates in one crime, that member can't participate in another crime.

Let's call a profitable scheme any subset of these crimes that generates at least `minProfit` profit, and the total number of members participating in that subset of crimes is at most `n`.

Return the number of schemes that can be chosen. Since the answer may be very large, return it modulo `109 + 7`.


Example 1:
Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]
Output: 2
Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.

In total, there are 2 schemes.


Example 2:
Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]
Output: 7
Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.

There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).


Constraints:
`1 <= n <= 100`
`0 <= minProfit <= 100`
`1 <= group.length <= 100`
`1 <= group[i] <= 100`
`profit.length == group.length`
`0 <= profit[i] <= 100`",Hard,https://leetcode.com/problems/profitable-schemes,Google,Dynamic Programming,297,,"there is a group of `n` members, and a list of various crimes they could commit. the `ith` crime generates a `profit[i]` and requires `group[i]` members to participate in it. if a member participates in one crime, that member can't participate in another crime. let's call a profitable scheme any subset of these crimes that generates at least `minprofit` profit, and the total number of members participating in that subset of crimes is at most `n`. return the number of schemes that can be chosen. since the answer may be very large, return it modulo `109 + 7`.","input: n = 5, minprofit = 3, group = [2,2], profit = [2,3] output: 2 explanation: to make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1. in total, there are 2 schemes. example 2: input: n = 10, minprofit = 5, group = [2,3,5], profit = [6,7,8] output: 7 explanation: to make a profit of at least 5, the group could commit any crimes, as long as they commit one. there are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).",`1 <= n <= 10^0` `0 <= minprofit <= 10^0` `1 <= group.length <= 10^0` `1 <= group[i] <= 10^0` `profit.length == group.length` `0 <= profit[i] <= 10^0`,
880,Decoded String at Index,"An encoded string `S` is given.  To find and write the decoded string to a tape, the encoded string is read one character at a time and the following steps are taken:
If the character read is a letter, that letter is written onto the tape.

If the character read is a digit (say `d`), the entire current tape is repeatedly written `d-1` more times in total.

Now for some encoded string `S`, and an index `K`, find and return the `K`-th letter (1 indexed) in the decoded string.


Example 1:
Input: S = ""leet2code3"", K = 10
Output: ""o""
Explanation: 
The decoded string is ""leetleetcodeleetleetcodeleetleetcode"".

The 10th letter in the string is ""o"".


Example 2:
Input: S = ""ha22"", K = 5
Output: ""h""
Explanation: 
The decoded string is ""hahahaha"".  The 5th letter is ""h"".


Example 3:
Input: S = ""a2345678999999999999999"", K = 1
Output: ""a""
Explanation: 
The decoded string is ""a"" repeated 8301530446056247680 times.  The 1st letter is ""a"".


Constraints:
`2 <= S.length <= 100`
`S` will only contain lowercase letters and digits `2` through `9`.

`S` starts with a letter.

`1 <= K <= 10^9`
It's guaranteed that `K` is less than or equal to the length of the decoded string.

The decoded string is guaranteed to have less than `2^63` letters.",Medium,https://leetcode.com/problems/decoded-string-at-index,"Amazon,National Instruments",Stack,897,,"an encoded string `s` is given. to find and write the decoded string to a tape, the encoded string is read one character at a time and the following steps are taken: if the character read is a letter, that letter is written onto the tape. if the character read is a digit (say `d`), the entire current tape is repeatedly written `d-1` more times in total. now for some encoded string `s`, and an index `k`, find and return the `k`-th letter (1 indexed) in the decoded string.","input: s = ""leet2code3"", k = 10 output: ""o"" explanation: the decoded string is ""leetleetcodeleetleetcodeleetleetcode"". the 10th letter in the string is ""o"". example 2: input: s = ""ha22"", k = 5 output: ""h"" explanation: the decoded string is ""hahahaha"". the 5th letter is ""h"". example 3: input: s = ""a2345678999999999999999"", k = 1 output: ""a"" explanation: the decoded string is ""a"" repeated 8301530446056247680 times. the 1st letter is ""a"".",`2 <= s.length <= 10^0` `s` will only contain lowercase letters and digits `2` through `9`. `s` starts with a letter. `1 <= k <= 10^9` it's guaranteed that `k` is less than or equal to the length of the decoded string. the decoded string is guaranteed to have less than `2^63` letters.,
881,Boats to Save People,"You are given an array `people` where `people[i]` is the weight of the `ith` person, and an infinite number of boats where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`.

Return the minimum number of boats to carry every given person.


Example 1:
Input: people = [1,2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)

Example 2:
Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 boats (1, 2), (2) and (3)

Example 3:
Input: people = [3,5,3,4], limit = 5
Output: 4
Explanation: 4 boats (3), (3), (4), (5)

Constraints:
`1 <= people.length <= 5 * 104`
`1 <= people[i] <= limit <= 3 * 104`",Medium,https://leetcode.com/problems/boats-to-save-people,"Roblox,Paypal","Two Pointers,Greedy",1252,,"you are given an array `people` where `people[i]` is the weight of the `ith` person, and an infinite number of boats where each boat can carry a maximum weight of `limit`. each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`. return the minimum number of boats to carry every given person.","input: people = [1,2], limit = 3 output: 1 explanation: 1 boat (1, 2) example 2: input: people = [3,2,2,1], limit = 3 output: 3 explanation: 3 boats (1, 2), (2) and (3) example 3: input: people = [3,5,3,4], limit = 5 output: 4 explanation: 4 boats (3), (3), (4), (5)",`1 <= people.length <= 5 * 10^4` `1 <= people[i] <= limit <= 3 * 10^4`,
882,Reachable Nodes In Subdivided Graph,"You are given an undirected graph (the ""original graph"") with `n` nodes labeled from `0` to `n - 1`. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.

The graph is given as a 2D array of `edges` where `edges[i] = [ui, vi, cnti]` indicates that there is an edge between nodes `ui` and `vi` in the original graph, and `cnti` is the total number of new nodes that you will subdivide the edge into. Note that `cnti == 0` means you will not subdivide the edge.

To subdivide the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges and `cnti` new nodes. The new nodes are `x1`, `x2`, ..., `xcnti`, and the new edges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti+1, xcnti]`, `[xcnti, vi]`.

In this new graph, you want to know how many nodes are reachable from the node `0`, where a node is reachable if the distance is `maxMoves` or less.

Given the original graph and `maxMoves`, return the number of nodes that are reachable from node `0` in the new graph.


Example 1:
Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3
Output: 13
Explanation: The edge subdivisions are shown in the image above.

The nodes that are reachable are highlighted in yellow.


Example 2:
Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4
Output: 23

Example 3:
Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5
Output: 1
Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.


Constraints:
`0 <= edges.length <= min(n * (n - 1) / 2, 104)`
`edges[i].length == 3`
`0 <= ui < vi < n`
There are no multiple edges in the graph.

`0 <= cnti <= 104`
`0 <= maxMoves <= 109`
`1 <= n <= 3000`",Hard,https://leetcode.com/problems/reachable-nodes-in-subdivided-graph,Amazon,"Heap,Breadth-first Search",183,,"you are given an undirected graph (the ""original graph"") with `n` nodes labeled from `0` to `n - 1`. you decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge. the graph is given as a 2d array of `edges` where `edges[i] = [ui, vi, cnti]` indicates that there is an edge between nodes `ui` and `vi` in the original graph, and `cnti` is the total number of new nodes that you will subdivide the edge into. note that `cnti == 0` means you will not subdivide the edge. to subdivide the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges and `cnti` new nodes. the new nodes are `x1`, `x2`, ..., `xcnti`, and the new edges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti+1, xcnti]`, `[xcnti, vi]`. in this new graph, you want to know how many nodes are reachable from the node `0`, where a node is reachable if the distance is `maxmoves` or less. given the original graph and `maxmoves`, return the number of nodes that are reachable from node `0` in the new graph.","input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxmoves = 6, n = 3 output: 13 explanation: the edge subdivisions are shown in the image above. the nodes that are reachable are highlighted in yellow. example 2: input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxmoves = 10, n = 4 output: 23 example 3: input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxmoves = 17, n = 5 output: 1 explanation: node 0 is disconnected from the rest of the graph, so only node 0 is reachable.","`0 <= edges.length <= min(n * (n - 1) / 2, 10^4)` `edges[i].length == 3` `0 <= ui < vi < n` there are no multiple edges in the graph. `0 <= cnti <= 10^4` `0 <= maxmoves <= 10^9` `1 <= n <= 3000`",
883,Projection Area of 3D Shapes,"You are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are axis-aligned with the `x`, `y`, and `z` axes.

Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of the cell `(i, j)`.

We view the projection of these cubes onto the `xy`, `yz`, and `zx` planes.

A projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. We are viewing the ""shadow"" when looking at the cubes from the top, the front, and the side.

Return the total area of all three projections.


Example 1:
Input: grid = [[1,2],[3,4]]
Output: 17
Explanation: Here are the three projections (""shadows"") of the shape made with each axis-aligned plane.


Example 2:
Input: grid = [[2]]
Output: 5

Example 3:
Input: grid = [[1,0],[0,2]]
Output: 8

Example 4:
Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 14

Example 5:
Input: grid = [[2,2,2],[2,1,2],[2,2,2]]
Output: 21

Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 50`
`0 <= grid[i][j] <= 50`",Easy,https://leetcode.com/problems/projection-area-of-3d-shapes,,,303,,"you are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are axis-aligned with the `x`, `y`, and `z` axes. each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of the cell `(i, j)`. we view the projection of these cubes onto the `xy`, `yz`, and `zx` planes. a projection is like a shadow, that maps our 3-dimensional figure to a 2-dimensional plane. we are viewing the ""shadow"" when looking at the cubes from the top, the front, and the side. return the total area of all three projections.","input: grid = [[1,2],[3,4]] output: 17 explanation: here are the three projections (""shadows"") of the shape made with each axis-aligned plane. example 2: input: grid = [[2]] output: 5 example 3: input: grid = [[1,0],[0,2]] output: 8 example 4: input: grid = [[1,1,1],[1,0,1],[1,1,1]] output: 14 example 5: input: grid = [[2,2,2],[2,1,2],[2,2,2]] output: 21",`n == grid.length` `n == grid[i].length` `1 <= n <= 50` `0 <= grid[i][j] <= 50`,
884,Uncommon Words from Two Sentences,"We are given two sentences `A` and `B`.  (A sentence is a string of space separated words.  Each word consists only of lowercase letters.)
A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.

Return a list of all uncommon words. 
You may return the list in any order.


Example 1:
Input: A = ""this apple is sweet"", B = ""this apple is sour""
Output: [""sweet"",""sour""]

Example 2:
Input: A = ""apple apple"", B = ""banana""
Output: [""banana""]
Note:
`0 <= A.length <= 200`
`0 <= B.length <= 200`
`A` and `B` both contain only spaces and lowercase letters.",Easy,https://leetcode.com/problems/uncommon-words-from-two-sentences,"Amazon,Facebook",Hash Table,589,,"we are given two sentences `a` and `b`. (a sentence is a string of space separated words. each word consists only of lowercase letters.) a word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence. return a list of all uncommon words. you may return the list in any order.","input: a = ""this apple is sweet"", b = ""this apple is sour"" output: [""sweet"",""sour""] example 2: input: a = ""apple apple"", b = ""banana"" output: [""banana""] note: `0 <= a.length <= 200` `0 <= b.length <= 200` `a` and `b` both contain only spaces and lowercase letters.",,
885,Spiral Matrix III,"On a 2 dimensional grid with `R` rows and `C` columns, we start at `(r0, c0)` facing east.

Here, the north-west corner of the grid is at the first row and column, and the south-east corner of the grid is at the last row and column.

Now, we walk in a clockwise spiral shape to visit every position in this grid. 
Whenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.) 
Eventually, we reach all `R * C` spaces of the grid.

Return a list of coordinates representing the positions of the grid in the order they were visited.


Example 1:
Input: R = 1, C = 4, r0 = 0, c0 = 0
Output: [[0,0],[0,1],[0,2],[0,3]]

Example 2:
Input: R = 5, C = 6, r0 = 1, c0 = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]
Note:
`1 <= R <= 100`
`1 <= C <= 100`
`0 <= r0 < R`
`0 <= c0 < C`",Medium,https://leetcode.com/problems/spiral-matrix-iii,Facebook,Math,312,"[Spiral Matrix, /problems/spiral-matrix/, Medium], [Spiral Matrix II, /problems/spiral-matrix-ii/, Medium]","on a 2 dimensional grid with `r` rows and `c` columns, we start at `(r0, c0)` facing east. here, the north-west corner of the grid is at the first row and column, and the south-east corner of the grid is at the last row and column. now, we walk in a clockwise spiral shape to visit every position in this grid. whenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.) eventually, we reach all `r * c` spaces of the grid. return a list of coordinates representing the positions of the grid in the order they were visited.","input: r = 1, c = 4, r0 = 0, c0 = 0 output: [[0,0],[0,1],[0,2],[0,3]] example 2: input: r = 5, c = 6, r0 = 1, c0 = 4 output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]] note: `1 <= r <= 100` `1 <= c <= 100` `0 <= r0 < r` `0 <= c0 < c`",,
886,Possible Bipartition,"Given a set of `N` people (numbered `1, 2, ..., N`), we would like to split everyone into two groups of any size.

Each person may dislike some other people, and they should not go into the same group. 
Formally, if `dislikes[i] = [a, b]`, it means it is not allowed to put the people numbered `a` and `b` into the same group.

Return `true` if and only if it is possible to split everyone into two groups in this way.


Example 1:
Input: N = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4], group2 [2,3]

Example 2:
Input: N = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false

Example 3:
Input: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false

Constraints:
`1 <= N <= 2000`
`0 <= dislikes.length <= 10000`
`dislikes[i].length == 2`
`1 <= dislikes[i][j] <= N`
`dislikes[i][0] < dislikes[i][1]`
There does not exist `i != j` for which `dislikes[i] == dislikes[j]`.",Medium,https://leetcode.com/problems/possible-bipartition,"Amazon,Google,Apple,Coupang","Depth-first Search,Graph",1368,,"given a set of `n` people (numbered `1, 2, ..., n`), we would like to split everyone into two groups of any size. each person may dislike some other people, and they should not go into the same group. formally, if `dislikes[i] = [a, b]`, it means it is not allowed to put the people numbered `a` and `b` into the same group. return `true` if and only if it is possible to split everyone into two groups in this way.","input: n = 4, dislikes = [[1,2],[1,3],[2,4]] output: true explanation: group1 [1,4], group2 [2,3] example 2: input: n = 3, dislikes = [[1,2],[1,3],[2,3]] output: false example 3: input: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]] output: false",`1 <= n <= 2000` `0 <= dislikes.length <= 10000` `dislikes[i].length == 2` `1 <= dislikes[i][j] <= n` `dislikes[i][0] < dislikes[i][1]` there does not exist `i != j` for which `dislikes[i] == dislikes[j]`.,
887,Super Egg Drop,"You are given `k` identical eggs and you have access to a building with `n` floors labeled from `1` to `n`.

You know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor higher than `f` will break, and any egg dropped at or below floor `f` will not break.

Each move, you may take an unbroken egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of `f` is.


Example 1:
Input: k = 1, n = 2
Output: 2
Explanation: 
Drop the egg from floor 1. If it breaks, we know that f = 0.

Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.

If it does not break, then we know f = 2.

Hence, we need at minimum 2 moves to determine with certainty what the value of f is.


Example 2:
Input: k = 2, n = 6
Output: 3

Example 3:
Input: k = 3, n = 14
Output: 4

Constraints:
`1 <= k <= 100`
`1 <= n <= 104`",Hard,https://leetcode.com/problems/super-egg-drop,Amazon,"Math,Binary Search,Dynamic Programming",1332,,"you are given `k` identical eggs and you have access to a building with `n` floors labeled from `1` to `n`. you know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor higher than `f` will break, and any egg dropped at or below floor `f` will not break. each move, you may take an unbroken egg and drop it from any floor `x` (where `1 <= x <= n`). if the egg breaks, you can no longer use it. however, if the egg does not break, you may reuse it in future moves. return the minimum number of moves that you need to determine with certainty what the value of `f` is.","input: k = 1, n = 2 output: 2 explanation: drop the egg from floor 1. if it breaks, we know that f = 0. otherwise, drop the egg from floor 2. if it breaks, we know that f = 1. if it does not break, then we know f = 2. hence, we need at minimum 2 moves to determine with certainty what the value of f is. example 2: input: k = 2, n = 6 output: 3 example 3: input: k = 3, n = 14 output: 4",`1 <= k <= 10^0` `1 <= n <= 10^4`,
888,Fair Candy Swap,"Alice and Bob have candy bars of different sizes: `A[i]` is the size of the `i`-th bar of candy that Alice has, and `B[j]` is the size of the `j`-th bar of candy that Bob has.

Since they are friends, they would like to exchange one candy bar each so that after the exchange, they both have the same total amount of candy.  (The total amount of candy a person has is the sum of the sizes of candy bars they have.)
Return an integer array `ans` where `ans[0]` is the size of the candy bar that Alice must exchange, and `ans[1]` is the size of the candy bar that Bob must exchange.

If there are multiple answers, you may return any one of them.  It is guaranteed an answer exists.


Example 1:
Input: A = [1,1], B = [2,2]
Output: [1,2]

Example 2:
Input: A = [1,2], B = [2,3]
Output: [1,2]

Example 3:
Input: A = [2], B = [1,3]
Output: [2,3]

Example 4:
Input: A = [1,2,5], B = [2,4]
Output: [5,4]
Note:
`1 <= A.length <= 10000`
`1 <= B.length <= 10000`
`1 <= A[i] <= 100000`
`1 <= B[i] <= 100000`
It is guaranteed that Alice and Bob have different total amounts of candy.

It is guaranteed there exists an answer.",Easy,https://leetcode.com/problems/fair-candy-swap,Yahoo,Array,735,,"alice and bob have candy bars of different sizes: `a[i]` is the size of the `i`-th bar of candy that alice has, and `b[j]` is the size of the `j`-th bar of candy that bob has. since they are friends, they would like to exchange one candy bar each so that after the exchange, they both have the same total amount of candy. (the total amount of candy a person has is the sum of the sizes of candy bars they have.) return an integer array `ans` where `ans[0]` is the size of the candy bar that alice must exchange, and `ans[1]` is the size of the candy bar that bob must exchange. if there are multiple answers, you may return any one of them. it is guaranteed an answer exists.","input: a = [1,1], b = [2,2] output: [1,2] example 2: input: a = [1,2], b = [2,3] output: [1,2] example 3: input: a = [2], b = [1,3] output: [2,3] example 4: input: a = [1,2,5], b = [2,4] output: [5,4] note: `1 <= a.length <= 10000` `1 <= b.length <= 10000` `1 <= a[i] <= 100000` `1 <= b[i] <= 100000` it is guaranteed that alice and bob have different total amounts of candy. it is guaranteed there exists an answer.",,
889,Construct Binary Tree from Preorder and Postorder Traversal,"Return any binary tree that matches the given preorder and postorder traversals.

Values in the traversals `pre` and `post` are distinct positive integers.


Example 1:
Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]
Note:
`1 <= pre.length == post.length <= 30`
`pre[]` and `post[]` are both permutations of `1, 2, ..., pre.length`.

It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.",Medium,https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal,"Amazon,Bloomberg",Tree,1172,,return any binary tree that matches the given preorder and postorder traversals. values in the traversals `pre` and `post` are distinct positive integers.,"input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1] output: [1,2,3,4,5,6,7] note: `1 <= pre.length == post.length <= 30` `pre[]` and `post[]` are both permutations of `1, 2, ..., pre.length`. it is guaranteed an answer exists. if there exists multiple answers, you can return any of them.",,
890,Find and Replace Pattern,"You have a list of `words` and a `pattern`, and you want to know which words in `words` matches the pattern.

A word matches the pattern if there exists a permutation of letters `p` so that after replacing every letter `x` in the pattern with `p(x)`, we get the desired word.

(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)
Return a list of the words in `words` that match the given pattern. 
You may return the answer in any order.


Example 1:
Input: words = [""abc"",""deq"",""mee"",""aqq"",""dkd"",""ccc""], pattern = ""abb""
Output: [""mee"",""aqq""]
Explanation: ""mee"" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
""ccc"" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,
since a and b map to the same letter.

Note:
`1 <= words.length <= 50`
`1 <= pattern.length = words[i].length <= 20`",Medium,https://leetcode.com/problems/find-and-replace-pattern,Microsoft,String,958,,"you have a list of `words` and a `pattern`, and you want to know which words in `words` matches the pattern. a word matches the pattern if there exists a permutation of letters `p` so that after replacing every letter `x` in the pattern with `p(x)`, we get the desired word. (recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.) return a list of the words in `words` that match the given pattern. you may return the answer in any order.","input: words = [""abc"",""deq"",""mee"",""aqq"",""dkd"",""ccc""], pattern = ""abb"" output: [""mee"",""aqq""] explanation: ""mee"" matches the pattern because there is a permutation {a -> m, b -> e, ...}. ""ccc"" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter. note: `1 <= words.length <= 50` `1 <= pattern.length = words[i].length <= 20`",,
891,Sum of Subsequence Widths,"Given an array of integers `A`, consider all non-empty subsequences of `A`.

For any sequence S, let the width of S be the difference between the maximum and minimum element of S.

Return the sum of the widths of all subsequences of A. 
As the answer may be very large, return the answer modulo 10^9 + 7.


Example 1:
Input: [2,1,3]
Output: 6
Explanation:
Subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].

The corresponding widths are 0, 0, 0, 1, 1, 2, 2.

The sum of these widths is 6.

Note:
`1 <= A.length <= 20000`
`1 <= A[i] <= 20000`",Hard,https://leetcode.com/problems/sum-of-subsequence-widths,Sapient,"Array,Math",319,,"given an array of integers `a`, consider all non-empty subsequences of `a`. for any sequence s, let the width of s be the difference between the maximum and minimum element of s. return the sum of the widths of all subsequences of a. as the answer may be very large, return the answer modulo 10^9 + 7.","input: [2,1,3] output: 6 explanation: subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3]. the corresponding widths are 0, 0, 0, 1, 1, 2, 2. the sum of these widths is 6. note: `1 <= a.length <= 20000` `1 <= a[i] <= 20000`",,
892,Surface Area of 3D Shapes,"You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`.

After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.

Return the total surface area of the resulting shapes.

Note: The bottom face of each shape counts toward its surface area.


Example 1:
Input: grid = [[2]]
Output: 10

Example 2:
Input: grid = [[1,2],[3,4]]
Output: 34

Example 3:
Input: grid = [[1,0],[0,2]]
Output: 16

Example 4:
Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 32

Example 5:
Input: grid = [[2,2,2],[2,1,2],[2,2,2]]
Output: 46

Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 50`
`0 <= grid[i][j] <= 50`",Easy,https://leetcode.com/problems/surface-area-of-3d-shapes,,,306,,"you are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`. after placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3d shapes. return the total surface area of the resulting shapes. note: the bottom face of each shape counts toward its surface area.","input: grid = [[2]] output: 10 example 2: input: grid = [[1,2],[3,4]] output: 34 example 3: input: grid = [[1,0],[0,2]] output: 16 example 4: input: grid = [[1,1,1],[1,0,1],[1,1,1]] output: 32 example 5: input: grid = [[2,2,2],[2,1,2],[2,2,2]] output: 46",`n == grid.length` `n == grid[i].length` `1 <= n <= 50` `0 <= grid[i][j] <= 50`,
893,Groups of Special-Equivalent Strings,"You are given an array `A` of strings.

A move onto `S` consists of swapping any two even indexed characters of `S`, or any two odd indexed characters of `S`.

Two strings `S` and `T` are special-equivalent if after any number of moves onto `S`, `S == T`.

For example, `S = ""zzxy""` and `T = ""xyzz""` are special-equivalent because we may make the moves `""zzxy"" -> ""xzzy"" -> ""xyzz""` that swap `S[0]` and `S[2]`, then `S[1]` and `S[3]`.

Now, a group of special-equivalent strings from `A` is a non-empty subset of A such that:
Every pair of strings in the group are special equivalent, and;
The group is the largest size possible (ie., there isn't a string S not in the group such that S is special equivalent to every string in the group)
Return the number of groups of special-equivalent strings from `A`.


Example 1:
Input: [""abcd"",""cdab"",""cbad"",""xyzz"",""zzxy"",""zzyx""]
Output: 3
Explanation: 
One group is [""abcd"", ""cdab"", ""cbad""], since they are all pairwise special equivalent, and none of the other strings are all pairwise special equivalent to these.

The other two groups are [""xyzz"", ""zzxy""] and [""zzyx""].  Note that in particular, ""zzxy"" is not special equivalent to ""zzyx"".


Example 2:
Input: [""abc"",""acb"",""bac"",""bca"",""cab"",""cba""]
Output: 3
Note:
`1 <= A.length <= 1000`
`1 <= A[i].length <= 20`
All `A[i]` have the same length.

All `A[i]` consist of only lowercase letters.",Easy,https://leetcode.com/problems/groups-of-special-equivalent-strings,Facebook,String,328,,"you are given an array `a` of strings. a move onto `s` consists of swapping any two even indexed characters of `s`, or any two odd indexed characters of `s`. two strings `s` and `t` are special-equivalent if after any number of moves onto `s`, `s == t`. for example, `s = ""zzxy""` and `t = ""xyzz""` are special-equivalent because we may make the moves `""zzxy"" -> ""xzzy"" -> ""xyzz""` that swap `s[0]` and `s[2]`, then `s[1]` and `s[3]`. now, a group of special-equivalent strings from `a` is a non-empty subset of a such that: every pair of strings in the group are special equivalent, and; the group is the largest size possible (ie., there isn't a string s not in the group such that s is special equivalent to every string in the group) return the number of groups of special-equivalent strings from `a`.","input: [""abcd"",""cdab"",""cbad"",""xyzz"",""zzxy"",""zzyx""] output: 3 explanation: one group is [""abcd"", ""cdab"", ""cbad""], since they are all pairwise special equivalent, and none of the other strings are all pairwise special equivalent to these. the other two groups are [""xyzz"", ""zzxy""] and [""zzyx""]. note that in particular, ""zzxy"" is not special equivalent to ""zzyx"". example 2: input: [""abc"",""acb"",""bac"",""bca"",""cab"",""cba""] output: 3 note: `1 <= a.length <= 1000` `1 <= a[i].length <= 20` all `a[i]` have the same length. all `a[i]` consist of only lowercase letters.",,
894,All Possible Full Binary Trees,"Given an integer `n`, return a list of all possible full binary trees with `n` nodes. Each node of each tree in the answer must have `Node.val == 0`.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly `0` or `2` children.


Example 1:
Input: n = 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]

Example 2:
Input: n = 3
Output: [[0,0,0]]

Constraints:
`1 <= n <= 20`",Medium,https://leetcode.com/problems/all-possible-full-binary-trees,"Google,Amazon","Tree,Recursion",1356,,"given an integer `n`, return a list of all possible full binary trees with `n` nodes. each node of each tree in the answer must have `node.val == 0`. each element of the answer is the root node of one possible tree. you may return the final list of trees in any order. a full binary tree is a binary tree where each node has exactly `0` or `2` children.","input: n = 7 output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]] example 2: input: n = 3 output: [[0,0,0]]",`1 <= n <= 20`,
895,Maximum Frequency Stack,"Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.

Implement the `FreqStack` class:
`FreqStack()` constructs an empty frequency stack.

`void push(int val)` pushes an integer `val` onto the top of the stack.

`int pop()` removes and returns the most frequent element in the stack.

	
If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.


Example 1:
Input
[""FreqStack"", ""push"", ""push"", ""push"", ""push"", ""push"", ""push"", ""pop"", ""pop"", ""pop"", ""pop""]
[[], [5], [7], [5], [7], [4], [5], [], [], [], []]
Output
[null, null, null, null, null, null, null, 5, 7, 5, 4]
Explanation
FreqStack freqStack = new FreqStack();
freqStack.push(5); // The stack is [5]
freqStack.push(7); // The stack is [5,7]
freqStack.push(5); // The stack is [5,7,5]
freqStack.push(7); // The stack is [5,7,5,7]
freqStack.push(4); // The stack is [5,7,5,7,4]
freqStack.push(5); // The stack is [5,7,5,7,4,5]
freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].

freqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].

freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].

freqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].


Constraints:
`0 <= val <= 109`
At most `2 * 104` calls will be made to `push` and `pop`.

It is guaranteed that there will be at least one element in the stack before calling `pop`.",Hard,https://leetcode.com/problems/maximum-frequency-stack,"Amazon,Microsoft,Bloomberg,Adobe","Hash Table,Stack",1768,,"design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack. implement the `freqstack` class: `freqstack()` constructs an empty frequency stack. `void push(int val)` pushes an integer `val` onto the top of the stack. `int pop()` removes and returns the most frequent element in the stack. if there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.","input [""freqstack"", ""push"", ""push"", ""push"", ""push"", ""push"", ""push"", ""pop"", ""pop"", ""pop"", ""pop""] [[], [5], [7], [5], [7], [4], [5], [], [], [], []] output [null, null, null, null, null, null, null, 5, 7, 5, 4] explanation freqstack freqstack = new freqstack(); freqstack.push(5); // the stack is [5] freqstack.push(7); // the stack is [5,7] freqstack.push(5); // the stack is [5,7,5] freqstack.push(7); // the stack is [5,7,5,7] freqstack.push(4); // the stack is [5,7,5,7,4] freqstack.push(5); // the stack is [5,7,5,7,4,5] freqstack.pop(); // return 5, as 5 is the most frequent. the stack becomes [5,7,5,7,4]. freqstack.pop(); // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. the stack becomes [5,7,5,4]. freqstack.pop(); // return 5, as 5 is the most frequent. the stack becomes [5,7,4]. freqstack.pop(); // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. the stack becomes [5,7].",`0 <= val <= 10^9` at most `2 * 10^4` calls will be made to `push` and `pop`. it is guaranteed that there will be at least one element in the stack before calling `pop`.,
896,Monotonic Array,"An array is monotonic if it is either monotone increasing or monotone decreasing.

An array `A` is monotone increasing if for all `i <= j`, `A[i] <= A[j]`.  An array `A` is monotone decreasing if for all `i <= j`, `A[i] >= A[j]`.

Return `true` if and only if the given array `A` is monotonic.


Example 1:
Input: [1,2,2,3]
Output: true

Example 2:
Input: [6,5,4,4]
Output: true

Example 3:
Input: [1,3,2]
Output: false

Example 4:
Input: [1,2,4,5]
Output: true

Example 5:
Input: [1,1,1]
Output: true
Note:
`1 <= A.length <= 50000`
`-100000 <= A[i] <= 100000`",Easy,https://leetcode.com/problems/monotonic-array,Facebook,Array,957,,"an array is monotonic if it is either monotone increasing or monotone decreasing. an array `a` is monotone increasing if for all `i <= j`, `a[i] <= a[j]`. an array `a` is monotone decreasing if for all `i <= j`, `a[i] >= a[j]`. return `true` if and only if the given array `a` is monotonic.","input: [1,2,2,3] output: true example 2: input: [6,5,4,4] output: true example 3: input: [1,3,2] output: false example 4: input: [1,2,4,5] output: true example 5: input: [1,1,1] output: true note: `1 <= a.length <= 50000` `-100000 <= a[i] <= 100000`",,
897,Increasing Order Search Tree,"Given the `root` of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.


Example 1:
Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

Example 2:
Input: root = [5,1,7]
Output: [1,null,5,null,7]

Constraints:
The number of nodes in the given tree will be in the range `[1, 100]`.

`0 <= Node.val <= 1000`",Easy,https://leetcode.com/problems/increasing-order-search-tree,"Apple,Amazon","Tree,Depth-first Search,Recursion",1330,,"given the `root` of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.","input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9] output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9] example 2: input: root = [5,1,7] output: [1,null,5,null,7]","the number of nodes in the given tree will be in the range `[1, 10^0]`. `0 <= node.val <= 1000`",
898,Bitwise ORs of Subarrays,"We have an array `arr` of non-negative integers.

For every (contiguous) subarray `sub = [arr[i], arr[i + 1], ..., arr[j]]` (with `i <= j`), we take the bitwise OR of all the elements in `sub`, obtaining a result `arr[i] | arr[i + 1] | ... | arr[j]`.

Return the number of possible results. Results that occur more than once are only counted once in the final answer

Example 1:
Input: arr = [0]
Output: 1
Explanation: There is only one possible result: 0.


Example 2:
Input: arr = [1,1,2]
Output: 3
Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].

These yield the results 1, 1, 2, 1, 3, 3.

There are 3 unique values, so the answer is 3.


Example 3:
Input: arr = [1,2,4]
Output: 6
Explanation: The possible results are 1, 2, 3, 4, 6, and 7.


Constraints:
`1 <= nums.length <= 5 * 104`
`0 <= nums[i] <= 109`",Medium,https://leetcode.com/problems/bitwise-ors-of-subarrays,Amazon,"Dynamic Programming,Bit Manipulation",673,,"we have an array `arr` of non-negative integers. for every (contiguous) subarray `sub = [arr[i], arr[i + 1], ..., arr[j]]` (with `i <= j`), we take the bitwise or of all the elements in `sub`, obtaining a result `arr[i] | arr[i + 1] | ... | arr[j]`. return the number of possible results. results that occur more than once are only counted once in the final answer","input: arr = [0] output: 1 explanation: there is only one possible result: 0. example 2: input: arr = [1,1,2] output: 3 explanation: the possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2]. these yield the results 1, 1, 2, 1, 3, 3. there are 3 unique values, so the answer is 3. example 3: input: arr = [1,2,4] output: 6 explanation: the possible results are 1, 2, 3, 4, 6, and 7.",`1 <= nums.length <= 5 * 10^4` `0 <= nums[i] <= 10^9`,
899,Orderly Queue,"A string `S` of lowercase letters is given.  Then, we may make any number of moves.

In each move, we choose one of the first `K` letters (starting from the left), remove it, and place it at the end of the string.

Return the lexicographically smallest string we could have after any number of moves.


Example 1:
Input: S = ""cba"", K = 1
Output: ""acb""
Explanation: 
In the first move, we move the 1st character (""c"") to the end, obtaining the string ""bac"".

In the second move, we move the 1st character (""b"") to the end, obtaining the final result ""acb"".


Example 2:
Input: S = ""baaca"", K = 3
Output: ""aaabc""
Explanation: 
In the first move, we move the 1st character (""b"") to the end, obtaining the string ""aacab"".

In the second move, we move the 3rd character (""c"") to the end, obtaining the final result ""aaabc"".

Note:
`1 <= K <= S.length <= 1000`
`S` consists of lowercase letters only.",Hard,https://leetcode.com/problems/orderly-queue,Amazon,"Math,String",251,,"a string `s` of lowercase letters is given. then, we may make any number of moves. in each move, we choose one of the first `k` letters (starting from the left), remove it, and place it at the end of the string. return the lexicographically smallest string we could have after any number of moves.","input: s = ""cba"", k = 1 output: ""acb"" explanation: in the first move, we move the 1st character (""c"") to the end, obtaining the string ""bac"". in the second move, we move the 1st character (""b"") to the end, obtaining the final result ""acb"". example 2: input: s = ""baaca"", k = 3 output: ""aaabc"" explanation: in the first move, we move the 1st character (""b"") to the end, obtaining the string ""aacab"". in the second move, we move the 3rd character (""c"") to the end, obtaining the final result ""aaabc"". note: `1 <= k <= s.length <= 1000` `s` consists of lowercase letters only.",,
900,RLE Iterator,"Write an iterator that iterates through a run-length encoded sequence.

The iterator is initialized by `RLEIterator(int[] A)`, where `A` is a run-length encoding of some sequence.  More specifically, for all even `i`, `A[i]` tells us the number of times that the non-negative integer value `A[i+1]` is repeated in the sequence.

The iterator supports one function: `next(int n)`, which exhausts the next `n` elements (`n >= 1`) and returns the last element exhausted in this way.  If there is no element left to exhaust, `next` returns `-1` instead.

For example, we start with `A = [3,8,0,9,2,5]`, which is a run-length encoding of the sequence `[8,8,8,5,5]`.  This is because the sequence can be read as ""three eights, zero nines, two fives"".


Example 1:
Input: [""RLEIterator"",""next"",""next"",""next"",""next""], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]
Output: [null,8,8,5,-1]
Explanation: 
RLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).

This maps to the sequence [8,8,8,5,5].

RLEIterator.next is then called 4 times:
.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].

.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].

.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].

.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,
but the second term did not exist.  Since the last term exhausted does not exist, we return -1.

Note:
`0 <= A.length <= 1000`
`A.length` is an even integer.

`0 <= A[i] <= 10^9`
There are at most `1000` calls to `RLEIterator.next(int n)` per test case.

Each call to `RLEIterator.next(int n)` will have `1 <= n <= 10^9`.",Medium,https://leetcode.com/problems/rle-iterator,Google,Array,325,,"write an iterator that iterates through a run-length encoded sequence. the iterator is initialized by `rleiterator(int[] a)`, where `a` is a run-length encoding of some sequence. more specifically, for all even `i`, `a[i]` tells us the number of times that the non-negative integer value `a[i+1]` is repeated in the sequence. the iterator supports one function: `next(int n)`, which exhausts the next `n` elements (`n >= 1`) and returns the last element exhausted in this way. if there is no element left to exhaust, `next` returns `-1` instead. for example, we start with `a = [3,8,0,9,2,5]`, which is a run-length encoding of the sequence `[8,8,8,5,5]`. this is because the sequence can be read as ""three eights, zero nines, two fives"".","input: [""rleiterator"",""next"",""next"",""next"",""next""], [[[3,8,0,9,2,5]],[2],[1],[1],[2]] output: [null,8,8,5,-1] explanation: rleiterator is initialized with rleiterator([3,8,0,9,2,5]). this maps to the sequence [8,8,8,5,5]. rleiterator.next is then called 4 times: .next(2) exhausts 2 terms of the sequence, returning 8. the remaining sequence is now [8, 5, 5]. .next(1) exhausts 1 term of the sequence, returning 8. the remaining sequence is now [5, 5]. .next(1) exhausts 1 term of the sequence, returning 5. the remaining sequence is now [5]. .next(2) exhausts 2 terms, returning -1. this is because the first term exhausted was 5, but the second term did not exist. since the last term exhausted does not exist, we return -1. note: `0 <= a.length <= 1000` `a.length` is an even integer. `0 <= a[i] <= 10^9` there are at most `1000` calls to `rleiterator.next(int n)` per test case. each call to `rleiterator.next(int n)` will have `1 <= n <= 10^9`.",,
901,Online Stock Span,"Write a class `StockSpanner` which collects daily price quotes for some stock, and returns the span of that stock's price for the current day.

The span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today's price.

For example, if the price of a stock over the next 7 days were `[100, 80, 60, 70, 60, 75, 85]`, then the stock spans would be `[1, 1, 1, 2, 1, 4, 6]`.


Example 1:
Input: [""StockSpanner"",""next"",""next"",""next"",""next"",""next"",""next"",""next""], [[],[100],[80],[60],[70],[60],[75],[85]]
Output: [null,1,1,1,2,1,4,6]
Explanation: 
First, S = StockSpanner() is initialized.  Then:
S.next(100) is called and returns 1,
S.next(80) is called and returns 1,
S.next(60) is called and returns 1,
S.next(70) is called and returns 2,
S.next(60) is called and returns 1,
S.next(75) is called and returns 4,
S.next(85) is called and returns 6.

Note that (for example) S.next(75) returned 4, because the last 4 prices
(including today's price of 75) were less than or equal to today's price.

Note:
Calls to `StockSpanner.next(int price)` will have `1 <= price <= 10^5`.

There will be at most `10000` calls to `StockSpanner.next` per test case.

There will be at most `150000` calls to `StockSpanner.next` across all test cases.

The total time limit for this problem has been reduced by 75% for C++, and 50% for all other languages.",Medium,https://leetcode.com/problems/online-stock-span,Amazon,Stack,1397,,"write a class `stockspanner` which collects daily price quotes for some stock, and returns the span of that stock's price for the current day. the span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today's price. for example, if the price of a stock over the next 7 days were `[100, 80, 60, 70, 60, 75, 85]`, then the stock spans would be `[1, 1, 1, 2, 1, 4, 6]`.","input: [""stockspanner"",""next"",""next"",""next"",""next"",""next"",""next"",""next""], [[],[100],[80],[60],[70],[60],[75],[85]] output: [null,1,1,1,2,1,4,6] explanation: first, s = stockspanner() is initialized. then: s.next(100) is called and returns 1, s.next(80) is called and returns 1, s.next(60) is called and returns 1, s.next(70) is called and returns 2, s.next(60) is called and returns 1, s.next(75) is called and returns 4, s.next(85) is called and returns 6. note that (for example) s.next(75) returned 4, because the last 4 prices (including today's price of 75) were less than or equal to today's price. note: calls to `stockspanner.next(int price)` will have `1 <= price <= 10^5`. there will be at most `10000` calls to `stockspanner.next` per test case. there will be at most `150000` calls to `stockspanner.next` across all test cases. the total time limit for this problem has been reduced by 75% for c++, and 50% for all other languages.",,
902,Numbers At Most N Given Digit Set,"Given an array of `digits` which is sorted in non-decreasing order. You can write numbers using each `digits[i]` as many times as we want. For example, if `digits = ['1','3','5']`, we may write numbers such as `'13'`, `'551'`, and `'1351315'`.

Return the number of positive integers that can be generated that are less than or equal to a given integer `n`.


Example 1:
Input: digits = [""1"",""3"",""5"",""7""], n = 100
Output: 20
Explanation: 
The 20 numbers that can be written are:
1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.


Example 2:
Input: digits = [""1"",""4"",""9""], n = 1000000000
Output: 29523
Explanation: 
We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,
81 four digit numbers, 243 five digit numbers, 729 six digit numbers,
2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.

In total, this is 29523 integers that can be written using the digits array.


Example 3:
Input: digits = [""7""], n = 8
Output: 1

Constraints:
`1 <= digits.length <= 9`
`digits[i].length == 1`
`digits[i]` is a digit from `'1'` to `'9'`.

All the values in `digits` are unique.

`digits` is sorted in non-decreasing order.

`1 <= n <= 109`",Hard,https://leetcode.com/problems/numbers-at-most-n-given-digit-set,Amazon,"Math,Dynamic Programming",492,,"given an array of `digits` which is sorted in non-decreasing order. you can write numbers using each `digits[i]` as many times as we want. for example, if `digits = ['1','3','5']`, we may write numbers such as `'13'`, `'551'`, and `'1351315'`. return the number of positive integers that can be generated that are less than or equal to a given integer `n`.","input: digits = [""1"",""3"",""5"",""7""], n = 100 output: 20 explanation: the 20 numbers that can be written are: 1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77. example 2: input: digits = [""1"",""4"",""9""], n = 1000000000 output: 29523 explanation: we can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers, 81 four digit numbers, 243 five digit numbers, 729 six digit numbers, 2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers. in total, this is 29523 integers that can be written using the digits array. example 3: input: digits = [""7""], n = 8 output: 1",`1 <= digits.length <= 9` `digits[i].length == 1` `digits[i]` is a digit from `'1'` to `'9'`. all the values in `digits` are unique. `digits` is sorted in non-decreasing order. `1 <= n <= 10^9`,
903,Valid Permutations for DI Sequence,"We are given `S`, a length `n` string of characters from the set `{'D', 'I'}`. (These letters stand for ""decreasing"" and ""increasing"".)
A valid permutation is a permutation `P[0], P[1], ..., P[n]` of integers `{0, 1, ..., n}`, such that for all `i`:
If `S[i] == 'D'`, then `P[i] > P[i+1]`, and;
If `S[i] == 'I'`, then `P[i] < P[i+1]`.

How many valid permutations are there?  Since the answer may be large, return your answer modulo `10^9 + 7`.


Example 1:
Input: ""DID""
Output: 5
Explanation: 
The 5 valid permutations of (0, 1, 2, 3) are:
(1, 0, 3, 2)
(2, 0, 3, 1)
(2, 1, 3, 0)
(3, 0, 2, 1)
(3, 1, 2, 0)
Note:
`1 <= S.length <= 200`
`S` consists only of characters from the set `{'D', 'I'}`.",Hard,https://leetcode.com/problems/valid-permutations-for-di-sequence,,,351,,"we are given `s`, a length `n` string of characters from the set `{'d', 'i'}`. (these letters stand for ""decreasing"" and ""increasing"".) a valid permutation is a permutation `p[0], p[1], ..., p[n]` of integers `{0, 1, ..., n}`, such that for all `i`: if `s[i] == 'd'`, then `p[i] > p[i+1]`, and; if `s[i] == 'i'`, then `p[i] < p[i+1]`. how many valid permutations are there? since the answer may be large, return your answer modulo `10^9 + 7`.","input: ""did"" output: 5 explanation: the 5 valid permutations of (0, 1, 2, 3) are: (1, 0, 3, 2) (2, 0, 3, 1) (2, 1, 3, 0) (3, 0, 2, 1) (3, 1, 2, 0) note: `1 <= s.length <= 200` `s` consists only of characters from the set `{'d', 'i'}`.",,
904,Fruit Into Baskets,"In a row of trees, the `i`-th tree produces fruit with type `tree[i]`.

You start at any tree of your choice, then repeatedly perform the following steps:
Add one piece of fruit from this tree to your baskets.  If you cannot, stop.

Move to the next tree to the right of the current tree.  If there is no tree to the right, stop.

Note that you do not have any choice after the initial choice of starting tree: you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop.

You have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each.

What is the total amount of fruit you can collect with this procedure?

Example 1:
Input: [1,2,1]
Output: 3
Explanation: We can collect [1,2,1].


Example 2:
Input: [0,1,2,2]
Output: 3
Explanation: We can collect [1,2,2].

If we started at the first tree, we would only collect [0, 1].


Example 3:
Input: [1,2,3,2,2]
Output: 4
Explanation: We can collect [2,3,2,2].

If we started at the first tree, we would only collect [1, 2].


Example 4:
Input: [3,3,3,1,2,1,1,2,3,3,4]
Output: 5
Explanation: We can collect [1,2,1,1,2].

If we started at the first tree or the eighth tree, we would only collect 4 fruits.

Note:
`1 <= tree.length <= 40000`
`0 <= tree[i] < tree.length`",Medium,https://leetcode.com/problems/fruit-into-baskets,"Google,Akamai",Two Pointers,1164,,"in a row of trees, the `i`-th tree produces fruit with type `tree[i]`. you start at any tree of your choice, then repeatedly perform the following steps: add one piece of fruit from this tree to your baskets. if you cannot, stop. move to the next tree to the right of the current tree. if there is no tree to the right, stop. note that you do not have any choice after the initial choice of starting tree: you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop. you have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each. what is the total amount of fruit you can collect with this procedure?","input: [1,2,1] output: 3 explanation: we can collect [1,2,1]. example 2: input: [0,1,2,2] output: 3 explanation: we can collect [1,2,2]. if we started at the first tree, we would only collect [0, 1]. example 3: input: [1,2,3,2,2] output: 4 explanation: we can collect [2,3,2,2]. if we started at the first tree, we would only collect [1, 2]. example 4: input: [3,3,3,1,2,1,1,2,3,3,4] output: 5 explanation: we can collect [1,2,1,1,2]. if we started at the first tree or the eighth tree, we would only collect 4 fruits. note: `1 <= tree.length <= 40000` `0 <= tree[i] < tree.length`",,
905,Sort Array By Parity,"Given an array `A` of non-negative integers, return an array consisting of all the even elements of `A`, followed by all the odd elements of `A`.

You may return any answer array that satisfies this condition.


Example 1:
Input: [3,1,2,4]
Output: [2,4,3,1]
The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.

Note:
`1 <= A.length <= 5000`
`0 <= A[i] <= 5000`",Easy,https://leetcode.com/problems/sort-array-by-parity,"Capital One,VMware",Array,1633,,"given an array `a` of non-negative integers, return an array consisting of all the even elements of `a`, followed by all the odd elements of `a`. you may return any answer array that satisfies this condition.","input: [3,1,2,4] output: [2,4,3,1] the outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted. note: `1 <= a.length <= 5000` `0 <= a[i] <= 5000`",,
906,Super Palindromes,"Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.

Given two positive integers `left` and `right` represented as strings, return the number of super-palindromes integers in the inclusive range `[left, right]`.


Example 1:
Input: left = ""4"", right = ""1000""
Output: 4
Explanation: 4, 9, 121, and 484 are superpalindromes.

Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.


Example 2:
Input: left = ""1"", right = ""2""
Output: 1

Constraints:
`1 <= left.length, right.length <= 18`
`left` and `right` consist of only digits.

`left` and `right` cannot have leading zeros.

`left` and `right` represent integers in the range `[1, 1018]`.

`left` is less than or equal to `right`.",Hard,https://leetcode.com/problems/super-palindromes,Google,Math,98,,"let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome. given two positive integers `left` and `right` represented as strings, return the number of super-palindromes integers in the inclusive range `[left, right]`.","input: left = ""4"", right = ""1000"" output: 4 explanation: 4, 9, 121, and 484 are superpalindromes. note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome. example 2: input: left = ""1"", right = ""2"" output: 1","`1 <= left.length, right.length <= 18` `left` and `right` consist of only digits. `left` and `right` cannot have leading zeros. `left` and `right` represent integers in the range `[1, 1018]`. `left` is less than or equal to `right`.",
907,Sum of Subarray Minimums,"Given an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. Since the answer may be large, return the answer modulo `109 + 7`.


Example 1:
Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.

Sum is 17.


Example 2:
Input: arr = [11,81,94,43,3]
Output: 444

Constraints:
`1 <= arr.length <= 3 * 104`
`1 <= arr[i] <= 3 * 104`",Medium,https://leetcode.com/problems/sum-of-subarray-minimums,"Google,Dunzo,Microsoft,VMware","Array,Stack",1896,,"given an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. since the answer may be large, return the answer modulo `109 + 7`.","input: arr = [3,1,2,4] output: 17 explanation: subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1. sum is 17. example 2: input: arr = [11,81,94,43,3] output: 444",`1 <= arr.length <= 3 * 10^4` `1 <= arr[i] <= 3 * 10^4`,
908,Smallest Range I,"Given an array `A` of integers, for each integer `A[i]` we may choose any `x` with `-K <= x <= K`, and add `x` to `A[i]`.

After this process, we have some array `B`.

Return the smallest possible difference between the maximum value of `B` and the minimum value of `B`.


Example 1:
Input: A = [1], K = 0
Output: 0
Explanation: B = [1]

Example 2:
Input: A = [0,10], K = 2
Output: 6
Explanation: B = [2,8]

Example 3:
Input: A = [1,3,6], K = 3
Output: 0
Explanation: B = [3,3,3] or B = [4,4,4]
Note:
`1 <= A.length <= 10000`
`0 <= A[i] <= 10000`
`0 <= K <= 10000`",Easy,https://leetcode.com/problems/smallest-range-i,Adobe,Math,308,,"given an array `a` of integers, for each integer `a[i]` we may choose any `x` with `-k <= x <= k`, and add `x` to `a[i]`. after this process, we have some array `b`. return the smallest possible difference between the maximum value of `b` and the minimum value of `b`.","input: a = [1], k = 0 output: 0 explanation: b = [1] example 2: input: a = [0,10], k = 2 output: 6 explanation: b = [2,8] example 3: input: a = [1,3,6], k = 3 output: 0 explanation: b = [3,3,3] or b = [4,4,4] note: `1 <= a.length <= 10000` `0 <= a[i] <= 10000` `0 <= k <= 10000`",,
909,Snakes and Ladders,"On an N x N `board`, the numbers from `1` to `N*N` are written boustrophedonically starting from the bottom left of the board, and alternating direction each row.  For example, for a 6 x 6 board, the numbers are written as follows:
You start on square `1` of the board (which is always in the last row and first column).  Each move, starting from square `x`, consists of the following:
You choose a destination square `S` with number `x+1`, `x+2`, `x+3`, `x+4`, `x+5`, or `x+6`, provided this number is `<= N*N`.

	
(This choice simulates the result of a standard 6-sided die roll: ie., there are always at most 6 destinations, regardless of the size of the board.)
If `S` has a snake or ladder, you move to the destination of that snake or ladder.  Otherwise, you move to `S`.

A board square on row `r` and column `c` has a ""snake or ladder"" if `board[r][c] != -1`.  The destination of that snake or ladder is `board[r][c]`.

Note that you only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another snake or ladder, you do not continue moving.  (For example, if the board is `[[4,-1],[-1,3]]`, and on the first move your destination square is `2`, then you finish your first move at `3`, because you do not continue moving to `4`.)
Return the least number of moves required to reach square N*N.  If it is not possible, return `-1`.


Example 1:
Input: [
[-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1],
[-1,35,-1,-1,13,-1],
[-1,-1,-1,-1,-1,-1],
[-1,15,-1,-1,-1,-1]]
Output: 4
Explanation: 
At the beginning, you start at square 1 [at row 5, column 0].

You decide to move to square 2, and must take the ladder to square 15.

You then decide to move to square 17 (row 3, column 5), and must take the snake to square 13.

You then decide to move to square 14, and must take the ladder to square 35.

You then decide to move to square 36, ending the game.

It can be shown that you need at least 4 moves to reach the N*N-th square, so the answer is 4.

Note:
`2 <= board.length = board[0].length <= 20`
`board[i][j]` is between `1` and `N*N` or is equal to `-1`.

The board square with number `1` has no snake or ladder.

The board square with number `N*N` has no snake or ladder.",Medium,https://leetcode.com/problems/snakes-and-ladders,Amazon,Breadth-first Search,572,,"on an n x n `board`, the numbers from `1` to `n*n` are written boustrophedonically starting from the bottom left of the board, and alternating direction each row. for example, for a 6 x 6 board, the numbers are written as follows: you start on square `1` of the board (which is always in the last row and first column). each move, starting from square `x`, consists of the following: you choose a destination square `s` with number `x+1`, `x+2`, `x+3`, `x+4`, `x+5`, or `x+6`, provided this number is `<= n*n`. (this choice simulates the result of a standard 6-sided die roll: ie., there are always at most 6 destinations, regardless of the size of the board.) if `s` has a snake or ladder, you move to the destination of that snake or ladder. otherwise, you move to `s`. a board square on row `r` and column `c` has a ""snake or ladder"" if `board[r][c] != -1`. the destination of that snake or ladder is `board[r][c]`. note that you only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another snake or ladder, you do not continue moving. (for example, if the board is `[[4,-1],[-1,3]]`, and on the first move your destination square is `2`, then you finish your first move at `3`, because you do not continue moving to `4`.) return the least number of moves required to reach square n*n. if it is not possible, return `-1`.","input: [ [-1,-1,-1,-1,-1,-1], [-1,-1,-1,-1,-1,-1], [-1,-1,-1,-1,-1,-1], [-1,35,-1,-1,13,-1], [-1,-1,-1,-1,-1,-1], [-1,15,-1,-1,-1,-1]] output: 4 explanation: at the beginning, you start at square 1 [at row 5, column 0]. you decide to move to square 2, and must take the ladder to square 15. you then decide to move to square 17 (row 3, column 5), and must take the snake to square 13. you then decide to move to square 14, and must take the ladder to square 35. you then decide to move to square 36, ending the game. it can be shown that you need at least 4 moves to reach the n*n-th square, so the answer is 4. note: `2 <= board.length = board[0].length <= 20` `board[i][j]` is between `1` and `n*n` or is equal to `-1`. the board square with number `1` has no snake or ladder. the board square with number `n*n` has no snake or ladder.",,
910,Smallest Range II,"Given an array `A` of integers, for each integer `A[i]` we need to choose either `x = -K` or `x = K`, and add `x` to `A[i] (only once)`.

After this process, we have some array `B`.

Return the smallest possible difference between the maximum value of `B` and the minimum value of `B`.


Example 1:
Input: A = [1], K = 0
Output: 0
Explanation: B = [1]

Example 2:
Input: A = [0,10], K = 2
Output: 6
Explanation: B = [2,8]

Example 3:
Input: A = [1,3,6], K = 3
Output: 3
Explanation: B = [4,6,3]
Note:
`1 <= A.length <= 10000`
`0 <= A[i] <= 10000`
`0 <= K <= 10000`",Medium,https://leetcode.com/problems/smallest-range-ii,Adobe,"Math,Greedy",663,,"given an array `a` of integers, for each integer `a[i]` we need to choose either `x = -k` or `x = k`, and add `x` to `a[i] (only once)`. after this process, we have some array `b`. return the smallest possible difference between the maximum value of `b` and the minimum value of `b`.","input: a = [1], k = 0 output: 0 explanation: b = [1] example 2: input: a = [0,10], k = 2 output: 6 explanation: b = [2,8] example 3: input: a = [1,3,6], k = 3 output: 3 explanation: b = [4,6,3] note: `1 <= a.length <= 10000` `0 <= a[i] <= 10000` `0 <= k <= 10000`",,
911,Online Election,"In an election, the `i`-th vote was cast for `persons[i]` at time `times[i]`.

Now, we would like to implement the following query function: `TopVotedCandidate.q(int t)` will return the number of the person that was leading the election at time `t`.  
Votes cast at time `t` will count towards our query.  In the case of a tie, the most recent vote (among tied candidates) wins.


Example 1:
Input: [""TopVotedCandidate"",""q"",""q"",""q"",""q"",""q"",""q""], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]
Output: [null,0,1,1,0,0,1]
Explanation: 
At time 3, the votes are [0], and 0 is leading.

At time 12, the votes are [0,1,1], and 1 is leading.

At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)
This continues for 3 more queries at time 15, 24, and 8.

Note:
`1 <= persons.length = times.length <= 5000`
`0 <= persons[i] <= persons.length`
`times` is a strictly increasing array with all elements in `[0, 10^9]`.

`TopVotedCandidate.q` is called at most `10000` times per test case.

`TopVotedCandidate.q(int t)` is always called with `t >= times[0]`.",Medium,https://leetcode.com/problems/online-election,Google,Binary Search,463,"[Rank Teams by Votes, /problems/rank-teams-by-votes/, Medium]","in an election, the `i`-th vote was cast for `persons[i]` at time `times[i]`. now, we would like to implement the following query function: `topvotedcandidate.q(int t)` will return the number of the person that was leading the election at time `t`. votes cast at time `t` will count towards our query. in the case of a tie, the most recent vote (among tied candidates) wins.","input: [""topvotedcandidate"",""q"",""q"",""q"",""q"",""q"",""q""], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]] output: [null,0,1,1,0,0,1] explanation: at time 3, the votes are [0], and 0 is leading. at time 12, the votes are [0,1,1], and 1 is leading. at time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.) this continues for 3 more queries at time 15, 24, and 8. note: `1 <= persons.length = times.length <= 5000` `0 <= persons[i] <= persons.length` `times` is a strictly increasing array with all elements in `[0, 10^9]`. `topvotedcandidate.q` is called at most `10000` times per test case. `topvotedcandidate.q(int t)` is always called with `t >= times[0]`.",,
912,Sort an Array,"Given an array of integers `nums`, sort the array in ascending order.


Example 1:
Input: nums = [5,2,3,1]
Output: [1,2,3,5]

Example 2:
Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]

Constraints:
`1 <= nums.length <= 50000`
`-50000 <= nums[i] <= 50000`",Medium,https://leetcode.com/problems/sort-an-array,Apple,,788,,"given an array of integers `nums`, sort the array in ascending order.","input: nums = [5,2,3,1] output: [1,2,3,5] example 2: input: nums = [5,1,1,2,0,0] output: [0,0,1,1,2,5]",`1 <= nums.length <= 50000` `-50000 <= nums[i] <= 50000`,
913,Cat and Mouse,"A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.

The graph is given as follows: `graph[a]` is a list of all nodes `b` such that `ab` is an edge of the graph.

The mouse starts at node `1` and goes first, the cat starts at node `2` and goes second, and there is a hole at node `0`.

During each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in `graph[1]`.

Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)
Then, the game can end in three ways:
If ever the Cat occupies the same node as the Mouse, the Cat wins.

If ever the Mouse reaches the Hole, the Mouse wins.

If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.

Given a `graph`, and assuming both players play optimally, return
`1` if the mouse wins the game,
`2` if the cat wins the game, or
`0` if the game is a draw.


Example 1:
Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]
Output: 0

Example 2:
Input: graph = [[1,3],[0],[3],[0,2]]
Output: 1

Constraints:
`3 <= graph.length <= 50`
`1 <= graph[i].length < graph.length`
`0 <= graph[i][j] < graph.length`
`graph[i][j] != i`
`graph[i]` is unique.

The mouse and the cat can always move.",Hard,https://leetcode.com/problems/cat-and-mouse,Google,"Breadth-first Search,Minimax",439,"[Cat and Mouse II, /problems/cat-and-mouse-ii/, Hard]","a game on an undirected graph is played by two players, mouse and cat, who alternate turns. the graph is given as follows: `graph[a]` is a list of all nodes `b` such that `ab` is an edge of the graph. the mouse starts at node `1` and goes first, the cat starts at node `2` and goes second, and there is a hole at node `0`. during each player's turn, they must travel along one edge of the graph that meets where they are. for example, if the mouse is at node 1, it must travel to any node in `graph[1]`. additionally, it is not allowed for the cat to travel to the hole (node 0.) then, the game can end in three ways: if ever the cat occupies the same node as the mouse, the cat wins. if ever the mouse reaches the hole, the mouse wins. if ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw. given a `graph`, and assuming both players play optimally, return `1` if the mouse wins the game, `2` if the cat wins the game, or `0` if the game is a draw.","input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]] output: 0 example 2: input: graph = [[1,3],[0],[3],[0,2]] output: 1",`3 <= graph.length <= 50` `1 <= graph[i].length < graph.length` `0 <= graph[i][j] < graph.length` `graph[i][j] != i` `graph[i]` is unique. the mouse and the cat can always move.,
914,X of a Kind in a Deck of Cards,"In a deck of cards, each card has an integer written on it.

Return `true` if and only if you can choose `X >= 2` such that it is possible to split the entire deck into 1 or more groups of cards, where:
Each group has exactly `X` cards.

All the cards in each group have the same integer.


Example 1:
Input: deck = [1,2,3,4,4,3,2,1]
Output: true
Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].


Example 2:
Input: deck = [1,1,1,2,2,2,3,3]
Output: false
Explanation: No possible partition.


Example 3:
Input: deck = [1]
Output: false
Explanation: No possible partition.


Example 4:
Input: deck = [1,1]
Output: true
Explanation: Possible partition [1,1].


Example 5:
Input: deck = [1,1,2,2,2,2]
Output: true
Explanation: Possible partition [1,1],[2,2],[2,2].


Constraints:
`1 <= deck.length <= 104`
`0 <= deck[i] < 104`",Easy,https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards,Google,"Array,Math",783,,"in a deck of cards, each card has an integer written on it. return `true` if and only if you can choose `x >= 2` such that it is possible to split the entire deck into 1 or more groups of cards, where: each group has exactly `x` cards. all the cards in each group have the same integer.","input: deck = [1,2,3,4,4,3,2,1] output: true explanation: possible partition [1,1],[2,2],[3,3],[4,4]. example 2: input: deck = [1,1,1,2,2,2,3,3] output: false explanation: no possible partition. example 3: input: deck = [1] output: false explanation: no possible partition. example 4: input: deck = [1,1] output: true explanation: possible partition [1,1]. example 5: input: deck = [1,1,2,2,2,2] output: true explanation: possible partition [1,1],[2,2],[2,2].",`1 <= deck.length <= 10^4` `0 <= deck[i] < 10^4`,
915,Partition Array into Disjoint Intervals,"Given an array `A`, partition it into two (contiguous) subarrays `left` and `right` so that:
Every element in `left` is less than or equal to every element in `right`.

`left` and `right` are non-empty.

`left` has the smallest possible size.

Return the length of `left` after such a partitioning.  It is guaranteed that such a partitioning exists.


Example 1:
Input: [5,0,3,8,6]
Output: 3
Explanation: left = [5,0,3], right = [8,6]

Example 2:
Input: [1,1,1,0,6,12]
Output: 4
Explanation: left = [1,1,1,0], right = [6,12]
Note:
`2 <= A.length <= 30000`
`0 <= A[i] <= 10^6`
It is guaranteed there is at least one way to partition `A` as described.",Medium,https://leetcode.com/problems/partition-array-into-disjoint-intervals,Microsoft,Array,466,,"given an array `a`, partition it into two (contiguous) subarrays `left` and `right` so that: every element in `left` is less than or equal to every element in `right`. `left` and `right` are non-empty. `left` has the smallest possible size. return the length of `left` after such a partitioning. it is guaranteed that such a partitioning exists.","input: [5,0,3,8,6] output: 3 explanation: left = [5,0,3], right = [8,6] example 2: input: [1,1,1,0,6,12] output: 4 explanation: left = [1,1,1,0], right = [6,12] note: `2 <= a.length <= 30000` `0 <= a[i] <= 10^6` it is guaranteed there is at least one way to partition `a` as described.",,
916,Word Subsets,"We are given two arrays `A` and `B` of words.  Each word is a string of lowercase letters.

Now, say that word `b` is a subset of word `a` if every letter in `b` occurs in `a`, including multiplicity.  For example, `""wrr""` is a subset of `""warrior""`, but is not a subset of `""world""`.

Now say a word `a` from `A` is universal if for every `b` in `B`, `b` is a subset of `a`. 
Return a list of all universal words in `A`.  You can return the words in any order.


Example 1:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""e"",""o""]
Output: [""facebook"",""google"",""leetcode""]

Example 2:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""l"",""e""]
Output: [""apple"",""google"",""leetcode""]

Example 3:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""e"",""oo""]
Output: [""facebook"",""google""]

Example 4:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""lo"",""eo""]
Output: [""google"",""leetcode""]

Example 5:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""ec"",""oc"",""ceo""]
Output: [""facebook"",""leetcode""]
Note:
`1 <= A.length, B.length <= 10000`
`1 <= A[i].length, B[i].length <= 10`
`A[i]` and `B[i]` consist only of lowercase letters.

All words in `A[i]` are unique: there isn't `i != j` with `A[i] == A[j]`.",Medium,https://leetcode.com/problems/word-subsets,"Amazon,Google",String,705,,"we are given two arrays `a` and `b` of words. each word is a string of lowercase letters. now, say that word `b` is a subset of word `a` if every letter in `b` occurs in `a`, including multiplicity. for example, `""wrr""` is a subset of `""warrior""`, but is not a subset of `""world""`. now say a word `a` from `a` is universal if for every `b` in `b`, `b` is a subset of `a`. return a list of all universal words in `a`. you can return the words in any order.","input: a = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], b = [""e"",""o""] output: [""facebook"",""google"",""leetcode""] example 2: input: a = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], b = [""l"",""e""] output: [""apple"",""google"",""leetcode""] example 3: input: a = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], b = [""e"",""oo""] output: [""facebook"",""google""] example 4: input: a = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], b = [""lo"",""eo""] output: [""google"",""leetcode""] example 5: input: a = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], b = [""ec"",""oc"",""ceo""] output: [""facebook"",""leetcode""] note: `1 <= a.length, b.length <= 10000` `1 <= a[i].length, b[i].length <= 10` `a[i]` and `b[i]` consist only of lowercase letters. all words in `a[i]` are unique: there isn't `i != j` with `a[i] == a[j]`.",,
917,Reverse Only Letters,"Given a string `S`, return the ""reversed"" string where all characters that are not a letter stay in the same place, and all letters reverse their positions.


Example 1:
Input: ""ab-cd""
Output: ""dc-ba""

Example 2:
Input: ""a-bC-dEf-ghIj""
Output: ""j-Ih-gfE-dCba""

Example 3:
Input: ""Test1ng-Leet=code-Q!""
Output: ""Qedo1ct-eeLg=ntse-T!""
Note:
`S.length <= 100`
`33 <= S[i].ASCIIcode <= 122` 
`S` doesn't contain `\` or `""`",Easy,https://leetcode.com/problems/reverse-only-letters,Apple,String,801,,"given a string `s`, return the ""reversed"" string where all characters that are not a letter stay in the same place, and all letters reverse their positions.","input: ""ab-cd"" output: ""dc-ba"" example 2: input: ""a-bc-def-ghij"" output: ""j-ih-gfe-dcba"" example 3: input: ""test1ng-leet=code-q!"" output: ""qedo1ct-eelg=ntse-t!"" note: `s.length <= 100` `33 <= s[i].asciicode <= 122` `s` doesn't contain `\` or `""`",,
918,Maximum Sum Circular Subarray,"Given a circular array C of integers represented by `A`, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, `C[i] = A[i]` when `0 <= i < A.length`, and `C[i+A.length] = C[i]` when `i >= 0`.)
Also, a subarray may only include each element of the fixed buffer `A` at most once.  (Formally, for a subarray `C[i], C[i+1], ..., C[j]`, there does not exist `i <= k1, k2 <= j` with `k1 % A.length = k2 % A.length`.)

Example 1:
Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3

Example 2:
Input: [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10

Example 3:
Input: [3,-1,2,-1]
Output: 4
Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4

Example 4:
Input: [3,-2,2,-3]
Output: 3
Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3

Example 5:
Input: [-2,-3,-1]
Output: -1
Explanation: Subarray [-1] has maximum sum -1
Note: 
`-30000 <= A[i] <= 30000`
`1 <= A.length <= 30000`",Medium,https://leetcode.com/problems/maximum-sum-circular-subarray,"Two Sigma,Amazon,Facebook",Array,1568,,"given a circular array c of integers represented by `a`, find the maximum possible sum of a non-empty subarray of c. here, a circular array means the end of the array connects to the beginning of the array. (formally, `c[i] = a[i]` when `0 <= i < a.length`, and `c[i+a.length] = c[i]` when `i >= 0`.) also, a subarray may only include each element of the fixed buffer `a` at most once. (formally, for a subarray `c[i], c[i+1], ..., c[j]`, there does not exist `i <= k1, k2 <= j` with `k1 % a.length = k2 % a.length`.)","input: [1,-2,3,-2] output: 3 explanation: subarray [3] has maximum sum 3 example 2: input: [5,-3,5] output: 10 explanation: subarray [5,5] has maximum sum 5 + 5 = 10 example 3: input: [3,-1,2,-1] output: 4 explanation: subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4 example 4: input: [3,-2,2,-3] output: 3 explanation: subarray [3] and [3,-2,2] both have maximum sum 3 example 5: input: [-2,-3,-1] output: -1 explanation: subarray [-1] has maximum sum -1 note: `-30000 <= a[i] <= 30000` `1 <= a.length <= 30000`",,
919,Complete Binary Tree Inserter,"A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.

Write a data structure `CBTInserter` that is initialized with a complete binary tree and supports the following operations:
`CBTInserter(TreeNode root)` initializes the data structure on a given tree with head node `root`;
`CBTInserter.insert(int v)` will insert a `TreeNode` into the tree with value `node.val = v` so that the tree remains complete, and returns the value of the parent of the inserted `TreeNode`;
`CBTInserter.get_root()` will return the head node of the tree.


Example 1:
Input: inputs = [""CBTInserter"",""insert"",""get_root""], inputs = [[[1]],[2],[]]
Output: [null,1,[1,2]]

Example 2:
Input: inputs = [""CBTInserter"",""insert"",""insert"",""get_root""], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]
Output: [null,3,4,[1,2,3,4,5,6,7,8]]
Note:
The initial given tree is complete and contains between `1` and `1000` nodes.

`CBTInserter.insert` is called at most `10000` times per test case.

Every value of a given or inserted node is between `0` and `5000`.",Medium,https://leetcode.com/problems/complete-binary-tree-inserter,"Facebook,Microsoft",Tree,409,,"a complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible. write a data structure `cbtinserter` that is initialized with a complete binary tree and supports the following operations: `cbtinserter(treenode root)` initializes the data structure on a given tree with head node `root`; `cbtinserter.insert(int v)` will insert a `treenode` into the tree with value `node.val = v` so that the tree remains complete, and returns the value of the parent of the inserted `treenode`; `cbtinserter.get_root()` will return the head node of the tree.","input: inputs = [""cbtinserter"",""insert"",""get_root""], inputs = [[[1]],[2],[]] output: [null,1,[1,2]] example 2: input: inputs = [""cbtinserter"",""insert"",""insert"",""get_root""], inputs = [[[1,2,3,4,5,6]],[7],[8],[]] output: [null,3,4,[1,2,3,4,5,6,7,8]] note: the initial given tree is complete and contains between `1` and `1000` nodes. `cbtinserter.insert` is called at most `10000` times per test case. every value of a given or inserted node is between `0` and `5000`.",,
920,Number of Music Playlists,"Your music player contains `N` different songs and she wants to listen to `L` (not necessarily different) songs during your trip.  You create a playlist so that:
Every song is played at least once
A song can only be played again only if `K` other songs have been played
Return the number of possible playlists.  As the answer can be very large, return it modulo `10^9 + 7`.


Example 1:
Input: N = 3, L = 3, K = 1
Output: 6
Explanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].


Example 2:
Input: N = 2, L = 3, K = 0
Output: 6
Explanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]

Example 3:
Input: N = 2, L = 3, K = 1
Output: 2
Explanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]
Note:
`0 <= K < N <= L <= 100`",Hard,https://leetcode.com/problems/number-of-music-playlists,"Salesforce,Facebook",Dynamic Programming,542,,"your music player contains `n` different songs and she wants to listen to `l` (not necessarily different) songs during your trip. you create a playlist so that: every song is played at least once a song can only be played again only if `k` other songs have been played return the number of possible playlists. as the answer can be very large, return it modulo `10^9 + 7`.","input: n = 3, l = 3, k = 1 output: 6 explanation: there are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]. example 2: input: n = 2, l = 3, k = 0 output: 6 explanation: there are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2] example 3: input: n = 2, l = 3, k = 1 output: 2 explanation: there are 2 possible playlists. [1, 2, 1], [2, 1, 2] note: `0 <= k < n <= l <= 100`",,
921,Minimum Add to Make Parentheses Valid,"Given a string `S` of `'('` and `')'` parentheses, we add the minimum number of parentheses ( `'('` or `')'`, and in any positions ) so that the resulting parentheses string is valid.

Formally, a parentheses string is valid if and only if:
It is the empty string, or
It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or
It can be written as `(A)`, where `A` is a valid string.

Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.


Example 1:
Input: ""())""
Output: 1

Example 2:
Input: ""(((""
Output: 3

Example 3:
Input: ""()""
Output: 0

Example 4:
Input: ""()))((""
Output: 4
Note:
`S.length <= 1000`
`S` only consists of `'('` and `')'` characters.",Medium,https://leetcode.com/problems/minimum-add-to-make-parentheses-valid,"Facebook,Visa","Stack,Greedy",1146,,"given a string `s` of `'('` and `')'` parentheses, we add the minimum number of parentheses ( `'('` or `')'`, and in any positions ) so that the resulting parentheses string is valid. formally, a parentheses string is valid if and only if: it is the empty string, or it can be written as `ab` (`a` concatenated with `b`), where `a` and `b` are valid strings, or it can be written as `(a)`, where `a` is a valid string. given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.","input: ""())"" output: 1 example 2: input: ""((("" output: 3 example 3: input: ""()"" output: 0 example 4: input: ""()))(("" output: 4 note: `s.length <= 1000` `s` only consists of `'('` and `')'` characters.",,
922,Sort Array By Parity II,"Given an array of integers `nums`, half of the integers in `nums` are odd, and the other half are even.

Sort the array so that whenever `nums[i]` is odd, `i` is odd, and whenever `nums[i]` is even, `i` is even.

Return any answer array that satisfies this condition.


Example 1:
Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.


Example 2:
Input: nums = [2,3]
Output: [2,3]

Constraints:
`2 <= nums.length <= 2 * 104`
`nums.length` is even.

Half of the integers in `nums` are even.

`0 <= nums[i] <= 1000`",Easy,https://leetcode.com/problems/sort-array-by-parity-ii,Amazon,"Array,Sort",978,,"given an array of integers `nums`, half of the integers in `nums` are odd, and the other half are even. sort the array so that whenever `nums[i]` is odd, `i` is odd, and whenever `nums[i]` is even, `i` is even. return any answer array that satisfies this condition.","input: nums = [4,2,5,7] output: [4,5,2,7] explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted. example 2: input: nums = [2,3] output: [2,3]",`2 <= nums.length <= 2 * 10^4` `nums.length` is even. half of the integers in `nums` are even. `0 <= nums[i] <= 1000`,
923,3Sum With Multiplicity,"Given an integer array `arr`, and an integer `target`, return the number of tuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`.

As the answer can be very large, return it modulo `109 + 7`.


Example 1:
Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8
Output: 20
Explanation: 
Enumerating by the values (arr[i], arr[j], arr[k]):
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2, 2, 4) occurs 2 times;
(2, 3, 3) occurs 2 times.


Example 2:
Input: arr = [1,1,2,2,2,2], target = 5
Output: 12
Explanation: 
arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:
We choose one 1 from [1,1] in 2 ways,
and two 2s from [2,2,2,2] in 6 ways.


Constraints:
`3 <= arr.length <= 3000`
`0 <= arr[i] <= 100`
`0 <= target <= 300`",Medium,https://leetcode.com/problems/3sum-with-multiplicity,Quora,Two Pointers,681,,"given an integer array `arr`, and an integer `target`, return the number of tuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`. as the answer can be very large, return it modulo `109 + 7`.","input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8 output: 20 explanation: enumerating by the values (arr[i], arr[j], arr[k]): (1, 2, 5) occurs 8 times; (1, 3, 4) occurs 8 times; (2, 2, 4) occurs 2 times; (2, 3, 3) occurs 2 times. example 2: input: arr = [1,1,2,2,2,2], target = 5 output: 12 explanation: arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times: we choose one 1 from [1,1] in 2 ways, and two 2s from [2,2,2,2] in 6 ways.",`3 <= arr.length <= 3000` `0 <= arr[i] <= 10^0` `0 <= target <= 300`,
924,Minimize Malware Spread,"You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.

Some nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from `initial`.

Return the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with the smallest index.

Note that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread.


Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

Constraints:
`n == graph.length`
`n == graph[i].length`
`2 <= n <= 300`
`graph[i][j]` is `0` or `1`.

`graph[i][j] == graph[j][i]`
`graph[i][i] == 1`
`1 <= initial.length <= n`
`0 <= initial[i] <= n - 1`
All the integers in `initial` are unique.",Hard,https://leetcode.com/problems/minimize-malware-spread,ByteDance,"Depth-first Search,Union Find",411,,"you are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`. some nodes `initial` are initially infected by malware. whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. this spread of malware will continue until no more nodes can be infected in this manner. suppose `m(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. we will remove exactly one node from `initial`. return the node that, if removed, would minimize `m(initial)`. if multiple nodes could be removed to minimize `m(initial)`, return such a node with the smallest index. note that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread.","input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1] output: 0 example 2: input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2] output: 0 example 3: input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2] output: 1",`n == graph.length` `n == graph[i].length` `2 <= n <= 300` `graph[i][j]` is `0` or `1`. `graph[i][j] == graph[j][i]` `graph[i][i] == 1` `1 <= initial.length <= n` `0 <= initial[i] <= n - 1` all the integers in `initial` are unique.,
925,Long Pressed Name,"Your friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get long pressed, and the character will be typed 1 or more times.

You examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.


Example 1:
Input: name = ""alex"", typed = ""aaleex""
Output: true
Explanation: 'a' and 'e' in 'alex' were long pressed.


Example 2:
Input: name = ""saeed"", typed = ""ssaaedd""
Output: false
Explanation: 'e' must have been pressed twice, but it wasn't in the typed output.


Example 3:
Input: name = ""leelee"", typed = ""lleeelee""
Output: true

Example 4:
Input: name = ""laiden"", typed = ""laiden""
Output: true
Explanation: It's not necessary to long press any character.


Constraints:
`1 <= name.length <= 1000`
`1 <= typed.length <= 1000`
`name` and `typed` contain only lowercase English letters.",Easy,https://leetcode.com/problems/long-pressed-name,Google,"Two Pointers,String",939,,"your friend is typing his `name` into a keyboard. sometimes, when typing a character `c`, the key might get long pressed, and the character will be typed 1 or more times. you examine the `typed` characters of the keyboard. return `true` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.","input: name = ""alex"", typed = ""aaleex"" output: true explanation: 'a' and 'e' in 'alex' were long pressed. example 2: input: name = ""saeed"", typed = ""ssaaedd"" output: false explanation: 'e' must have been pressed twice, but it wasn't in the typed output. example 3: input: name = ""leelee"", typed = ""lleeelee"" output: true example 4: input: name = ""laiden"", typed = ""laiden"" output: true explanation: it's not necessary to long press any character.",`1 <= name.length <= 1000` `1 <= typed.length <= 1000` `name` and `typed` contain only lowercase english letters.,
926,Flip String to Monotone Increasing,"A string of `'0'`s and `'1'`s is monotone increasing if it consists of some number of `'0'`s (possibly 0), followed by some number of `'1'`s (also possibly 0.)
We are given a string `S` of `'0'`s and `'1'`s, and we may flip any `'0'` to a `'1'` or a `'1'` to a `'0'`.

Return the minimum number of flips to make `S` monotone increasing.


Example 1:
Input: ""00110""
Output: 1
Explanation: We flip the last digit to get 00111.


Example 2:
Input: ""010110""
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.


Example 3:
Input: ""00011000""
Output: 2
Explanation: We flip to get 00000000.

Note:
`1 <= S.length <= 20000`
`S` only consists of `'0'` and `'1'` characters.",Medium,https://leetcode.com/problems/flip-string-to-monotone-increasing,Amazon,Array,766,,"a string of `'0'`s and `'1'`s is monotone increasing if it consists of some number of `'0'`s (possibly 0), followed by some number of `'1'`s (also possibly 0.) we are given a string `s` of `'0'`s and `'1'`s, and we may flip any `'0'` to a `'1'` or a `'1'` to a `'0'`. return the minimum number of flips to make `s` monotone increasing.","input: ""00110"" output: 1 explanation: we flip the last digit to get 00111. example 2: input: ""010110"" output: 2 explanation: we flip to get 011111, or alternatively 000111. example 3: input: ""00011000"" output: 2 explanation: we flip to get 00000000. note: `1 <= s.length <= 20000` `s` only consists of `'0'` and `'1'` characters.",,
927,Three Equal Parts,"You are given an array `arr` which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.

If it is possible, return any `[i, j]` with `i + 1 < j`, such that:
`arr[0], arr[1], ..., arr[i]` is the first part,
`arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and
`arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part.

All three parts have equal binary values.

If it is not possible, return `[-1, -1]`.

Note that the entire part is used when considering what binary value it represents. For example, `[1,1,0]` represents `6` in decimal, not `3`. Also, leading zeros are allowed, so `[0,1,1]` and `[1,1]` represent the same value.


Example 1:
Input: arr = [1,0,1,0,1]
Output: [0,3]

Example 2:
Input: arr = [1,1,0,1,1]
Output: [-1,-1]

Example 3:
Input: arr = [1,1,0,0,1]
Output: [0,2]

Constraints:
`3 <= arr.length <= 3 * 104`
`arr[i]` is `0` or `1`",Hard,https://leetcode.com/problems/three-equal-parts,"Netflix,Hotstar","Math,Binary Search,Greedy",296,,"you are given an array `arr` which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value. if it is possible, return any `[i, j]` with `i + 1 < j`, such that: `arr[0], arr[1], ..., arr[i]` is the first part, `arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and `arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part. all three parts have equal binary values. if it is not possible, return `[-1, -1]`. note that the entire part is used when considering what binary value it represents. for example, `[1,1,0]` represents `6` in decimal, not `3`. also, leading zeros are allowed, so `[0,1,1]` and `[1,1]` represent the same value.","input: arr = [1,0,1,0,1] output: [0,3] example 2: input: arr = [1,1,0,1,1] output: [-1,-1] example 3: input: arr = [1,1,0,0,1] output: [0,2]",`3 <= arr.length <= 3 * 10^4` `arr[i]` is `0` or `1`,
928,Minimize Malware Spread II,"You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.

Some nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops.

We will remove exactly one node from `initial`, completely removing it and any connections from this node to any other node.

Return the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with the smallest index.


Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1

Example 3:
Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1

Constraints:
`n == graph.length`
`n == graph[i].length`
`2 <= n <= 300`
`graph[i][j]` is `0` or `1`.

`graph[i][j] == graph[j][i]`
`graph[i][i] == 1`
`1 <= initial.length < n`
`0 <= initial[i] <= n - 1`
All the integers in `initial` are unique.",Hard,https://leetcode.com/problems/minimize-malware-spread-ii,Dropbox,"Depth-first Search,Union Find,Graph",278,,"you are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`. some nodes `initial` are initially infected by malware. whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. this spread of malware will continue until no more nodes can be infected in this manner. suppose `m(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. we will remove exactly one node from `initial`, completely removing it and any connections from this node to any other node. return the node that, if removed, would minimize `m(initial)`. if multiple nodes could be removed to minimize `m(initial)`, return such a node with the smallest index.","input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1] output: 0 example 2: input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1] output: 1 example 3: input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1] output: 1",`n == graph.length` `n == graph[i].length` `2 <= n <= 300` `graph[i][j]` is `0` or `1`. `graph[i][j] == graph[j][i]` `graph[i][i] == 1` `1 <= initial.length < n` `0 <= initial[i] <= n - 1` all the integers in `initial` are unique.,
929,Unique Email Addresses,"Every valid email consists of a local name and a domain name, separated by the `'@'` sign. Besides lowercase letters, the email may contain one or more `'.'` or `'+'`.

For example, in `""alice@leetcode.com""`, `""alice""` is the local name, and `""leetcode.com""` is the domain name.

If you add periods `'.'` between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.

For example, `""alice.z@leetcode.com""` and `""alicez@leetcode.com""` forward to the same email address.

If you add a plus `'+'` in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.

For example, `""m.y+name@email.com""` will be forwarded to `""my@email.com""`.

It is possible to use both of these rules at the same time.

Given an array of strings `emails` where we send one email to each `email[i]`, return the number of different addresses that actually receive mails.


Example 1:
Input: emails = [""test.email+alex@leetcode.com"",""test.e.mail+bob.cathy@leetcode.com"",""testemail+david@lee.tcode.com""]
Output: 2
Explanation: ""testemail@leetcode.com"" and ""testemail@lee.tcode.com"" actually receive mails.


Example 2:
Input: emails = [""a@leetcode.com"",""b@leetcode.com"",""c@leetcode.com""]
Output: 3

Constraints:
`1 <= emails.length <= 100`
`1 <= emails[i].length <= 100`
`email[i]` consist of lowercase English letters, `'+'`, `'.'` and `'@'`.

Each `emails[i]` contains exactly one `'@'` character.

All local and domain names are non-empty.

Local names do not start with a `'+'` character.",Easy,https://leetcode.com/problems/unique-email-addresses,Google,String,1146,,"every valid email consists of a local name and a domain name, separated by the `'@'` sign. besides lowercase letters, the email may contain one or more `'.'` or `'+'`. for example, in `""alice@leetcode.com""`, `""alice""` is the local name, and `""leetcode.com""` is the domain name. if you add periods `'.'` between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. note that this rule does not apply to domain names. for example, `""alice.z@leetcode.com""` and `""alicez@leetcode.com""` forward to the same email address. if you add a plus `'+'` in the local name, everything after the first plus sign will be ignored. this allows certain emails to be filtered. note that this rule does not apply to domain names. for example, `""m.y+name@email.com""` will be forwarded to `""my@email.com""`. it is possible to use both of these rules at the same time. given an array of strings `emails` where we send one email to each `email[i]`, return the number of different addresses that actually receive mails.","input: emails = [""test.email+alex@leetcode.com"",""test.e.mail+bob.cathy@leetcode.com"",""testemail+david@lee.tcode.com""] output: 2 explanation: ""testemail@leetcode.com"" and ""testemail@lee.tcode.com"" actually receive mails. example 2: input: emails = [""a@leetcode.com"",""b@leetcode.com"",""c@leetcode.com""] output: 3","`1 <= emails.length <= 10^0` `1 <= emails[i].length <= 10^0` `email[i]` consist of lowercase english letters, `'+'`, `'.'` and `'@'`. each `emails[i]` contains exactly one `'@'` character. all local and domain names are non-empty. local names do not start with a `'+'` character.",
930,Binary Subarrays With Sum,"In an array `A` of `0`s and `1`s, how many non-empty subarrays have sum `S`?

Example 1:
Input: A = [1,0,1,0,1], S = 2
Output: 4
Explanation: 
The 4 subarrays are bolded below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Note:
`A.length <= 30000`
`0 <= S <= A.length`
`A[i]` is either `0` or `1`.",Medium,https://leetcode.com/problems/binary-subarrays-with-sum,C3 IoT,"Hash Table,Two Pointers",772,,"in an array `a` of `0`s and `1`s, how many non-empty subarrays have sum `s`?","input: a = [1,0,1,0,1], s = 2 output: 4 explanation: the 4 subarrays are bolded below: [1,0,1,0,1] [1,0,1,0,1] [1,0,1,0,1] [1,0,1,0,1] note: `a.length <= 30000` `0 <= s <= a.length` `a[i]` is either `0` or `1`.",,
931,Minimum Falling Path Sum,"Given an `n x n` array of integers `matrix`, return the minimum sum of any falling path through `matrix`.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.


Example 1:
Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum underlined below:
[[2,1,3],      [[2,1,3],
 [6,5,4],       [6,5,4],
 [7,8,9]]       [7,8,9]]

Example 2:
Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is underlined below:
[[-19,57],
 [-40,-5]]

Example 3:
Input: matrix = [[-48]]
Output: -48

Constraints:
`n == matrix.length`
`n == matrix[i].length`
`1 <= n <= 100`
`-100 <= matrix[i][j] <= 100`",Medium,https://leetcode.com/problems/minimum-falling-path-sum,Amazon,Dynamic Programming,1146,"[Minimum Falling Path Sum II, /problems/minimum-falling-path-sum-ii/, Hard]","given an `n x n` array of integers `matrix`, return the minimum sum of any falling path through `matrix`. a falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.","input: matrix = [[2,1,3],[6,5,4],[7,8,9]] output: 13 explanation: there are two falling paths with a minimum sum underlined below: [[2,1,3], [[2,1,3], [6,5,4], [6,5,4], [7,8,9]] [7,8,9]] example 2: input: matrix = [[-19,57],[-40,-5]] output: -59 explanation: the falling path with a minimum sum is underlined below: [[-19,57], [-40,-5]] example 3: input: matrix = [[-48]] output: -48",`n == matrix.length` `n == matrix[i].length` `1 <= n <= 10^0` `-10^0 <= matrix[i][j] <= 10^0`,
932,Beautiful Array,"For some fixed `N`, an array `A` is beautiful if it is a permutation of the integers `1, 2, ..., N`, such that:
For every `i < j`, there is no `k` with `i < k < j` such that `A[k] * 2 = A[i] + A[j]`.

Given `N`, return any beautiful array `A`.  (It is guaranteed that one exists.)

Example 1:
Input: 4
Output: [2,1,4,3]

Example 2:
Input: 5
Output: [3,1,2,5,4]
Note:
`1 <= N <= 1000`",Medium,https://leetcode.com/problems/beautiful-array,Google,Divide and Conquer,466,,"for some fixed `n`, an array `a` is beautiful if it is a permutation of the integers `1, 2, ..., n`, such that: for every `i < j`, there is no `k` with `i < k < j` such that `a[k] * 2 = a[i] + a[j]`. given `n`, return any beautiful array `a`. (it is guaranteed that one exists.)","input: 4 output: [2,1,4,3] example 2: input: 5 output: [3,1,2,5,4] note: `1 <= n <= 1000`",,
933,Number of Recent Calls,"You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.

Implement the `RecentCounter` class:
`RecentCounter()` Initializes the counter with zero recent requests.

`int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.

It is guaranteed that every call to `ping` uses a strictly larger value of `t` than the previous call.


Example 1:
Input
[""RecentCounter"", ""ping"", ""ping"", ""ping"", ""ping""]
[[], [1], [100], [3001], [3002]]
Output
[null, 1, 2, 3, 3]
Explanation
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1
recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2
recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3
recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3

Constraints:
`1 <= t <= 109`
Each test case will call `ping` with strictly increasing values of `t`.

At most `104` calls will be made to `ping`.",Easy,https://leetcode.com/problems/number-of-recent-calls,Yandex,Queue,561,,"you have a `recentcounter` class which counts the number of recent requests within a certain time frame. implement the `recentcounter` class: `recentcounter()` initializes the counter with zero recent requests. `int ping(int t)` adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`. it is guaranteed that every call to `ping` uses a strictly larger value of `t` than the previous call.","input [""recentcounter"", ""ping"", ""ping"", ""ping"", ""ping""] [[], [1], [100], [3001], [3002]] output [null, 1, 2, 3, 3] explanation recentcounter recentcounter = new recentcounter(); recentcounter.ping(1); // requests = [1], range is [-2999,1], return 1 recentcounter.ping(100); // requests = [1, 100], range is [-2900,100], return 2 recentcounter.ping(3001); // requests = [1, 100, 3001], range is [1,3001], return 3 recentcounter.ping(3002); // requests = [1, 100, 3001, 3002], range is [2,3002], return 3",`1 <= t <= 10^9` each test case will call `ping` with strictly increasing values of `t`. at most `10^4` calls will be made to `ping`.,
934,Shortest Bridge,"In a given 2D binary array `A`, there are two islands.  (An island is a 4-directionally connected group of `1`s not connected to any other 1s.)
Now, we may change `0`s to `1`s so as to connect the two islands together to form 1 island.

Return the smallest number of `0`s that must be flipped.  (It is guaranteed that the answer is at least 1.)

Example 1:
Input: A = [[0,1],[1,0]]
Output: 1

Example 2:
Input: A = [[0,1,0],[0,0,0],[0,0,1]]
Output: 2

Example 3:
Input: A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Output: 1

Constraints:
`2 <= A.length == A[0].length <= 100`
`A[i][j] == 0` or `A[i][j] == 1`",Medium,https://leetcode.com/problems/shortest-bridge,"Google,Uber,Bloomberg,Snapchat","Depth-first Search,Breadth-first Search",1283,,"in a given 2d binary array `a`, there are two islands. (an island is a 4-directionally connected group of `1`s not connected to any other 1s.) now, we may change `0`s to `1`s so as to connect the two islands together to form 1 island. return the smallest number of `0`s that must be flipped. (it is guaranteed that the answer is at least 1.)","input: a = [[0,1],[1,0]] output: 1 example 2: input: a = [[0,1,0],[0,0,0],[0,0,1]] output: 2 example 3: input: a = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]] output: 1",`2 <= a.length == a[0].length <= 10^0` `a[i][j] == 0` or `a[i][j] == 1`,
935,Knight Dialer,"The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:
A chess knight can move as indicated in the chess diagram below:
We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).

Given an integer `n`, return how many distinct phone numbers of length `n` we can dial.

You are allowed to place the knight on any numeric cell initially and then you should perform `n - 1` jumps to dial a number of length `n`. All jumps should be valid knight jumps.

As the answer may be very large, return the answer modulo `109 + 7`.


Example 1:
Input: n = 1
Output: 10
Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.


Example 2:
Input: n = 2
Output: 20
Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]

Example 3:
Input: n = 3
Output: 46

Example 4:
Input: n = 4
Output: 104

Example 5:
Input: n = 3131
Output: 136006598
Explanation: Please take care of the mod.


Constraints:
`1 <= n <= 5000`",Medium,https://leetcode.com/problems/knight-dialer,Qualtrics,Dynamic Programming,817,,"the chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an l). the possible movements of chess knight are shown in this diagaram: a chess knight can move as indicated in the chess diagram below: we have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell). given an integer `n`, return how many distinct phone numbers of length `n` we can dial. you are allowed to place the knight on any numeric cell initially and then you should perform `n - 1` jumps to dial a number of length `n`. all jumps should be valid knight jumps. as the answer may be very large, return the answer modulo `109 + 7`.","input: n = 1 output: 10 explanation: we need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient. example 2: input: n = 2 output: 20 explanation: all the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94] example 3: input: n = 3 output: 46 example 4: input: n = 4 output: 104 example 5: input: n = 3131 output: 136006598 explanation: please take care of the mod.",`1 <= n <= 5000`,
936,Stamping The Sequence,"You want to form a `target` string of lowercase letters.

At the beginning, your sequence is `target.length` `'?'` marks.  You also have a `stamp` of lowercase letters.

On each turn, you may place the stamp over the sequence, and replace every letter in the sequence with the corresponding letter from the stamp.  You can make up to `10 * target.length` turns.

For example, if the initial sequence is ""?????"", and your stamp is `""abc""`,  then you may make ""abc??"", ""?abc?"", ""??abc"" in the first turn.  (Note that the stamp must be fully contained in the boundaries of the sequence in order to stamp.)
If the sequence is possible to stamp, then return an array of the index of the left-most letter being stamped at each turn.  If the sequence is not possible to stamp, return an empty array.

For example, if the sequence is ""ababc"", and the stamp is `""abc""`, then we could return the answer `[0, 2]`, corresponding to the moves ""?????"" -> ""abc??"" -> ""ababc"".

Also, if the sequence is possible to stamp, it is guaranteed it is possible to stamp within `10 * target.length` moves.  Any answers specifying more than this number of moves will not be accepted.


Example 1:
Input: stamp = ""abc"", target = ""ababc""
Output: [0,2]
([1,0,2] would also be accepted as an answer, as well as some other answers.)

Example 2:
Input: stamp = ""abca"", target = ""aabcaca""
Output: [3,0,1]
Note:
`1 <= stamp.length <= target.length <= 1000`
`stamp` and `target` only contain lowercase letters.",Hard,https://leetcode.com/problems/stamping-the-sequence,Facebook,"String,Greedy",431,,"you want to form a `target` string of lowercase letters. at the beginning, your sequence is `target.length` `'?'` marks. you also have a `stamp` of lowercase letters. on each turn, you may place the stamp over the sequence, and replace every letter in the sequence with the corresponding letter from the stamp. you can make up to `10 * target.length` turns. for example, if the initial sequence is ""?????"", and your stamp is `""abc""`, then you may make ""abc??"", ""?abc?"", ""??abc"" in the first turn. (note that the stamp must be fully contained in the boundaries of the sequence in order to stamp.) if the sequence is possible to stamp, then return an array of the index of the left-most letter being stamped at each turn. if the sequence is not possible to stamp, return an empty array. for example, if the sequence is ""ababc"", and the stamp is `""abc""`, then we could return the answer `[0, 2]`, corresponding to the moves ""?????"" -> ""abc??"" -> ""ababc"". also, if the sequence is possible to stamp, it is guaranteed it is possible to stamp within `10 * target.length` moves. any answers specifying more than this number of moves will not be accepted.","input: stamp = ""abc"", target = ""ababc"" output: [0,2] ([1,0,2] would also be accepted as an answer, as well as some other answers.) example 2: input: stamp = ""abca"", target = ""aabcaca"" output: [3,0,1] note: `1 <= stamp.length <= target.length <= 1000` `stamp` and `target` only contain lowercase letters.",,
937,Reorder Data in Log Files,"You are given an array of `logs`. Each log is a space-delimited string of words, where the first word is the identifier.

There are two types of logs:
Letter-logs: All words (except the identifier) consist of lowercase English letters.

Digit-logs: All words (except the identifier) consist of digits.

Reorder these logs so that:
The letter-logs come before all digit-logs.

The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.

The digit-logs maintain their relative ordering.

Return the final order of the logs.


Example 1:
Input: logs = [""dig1 8 1 5 1"",""let1 art can"",""dig2 3 6"",""let2 own kit dig"",""let3 art zero""]
Output: [""let1 art can"",""let3 art zero"",""let2 own kit dig"",""dig1 8 1 5 1"",""dig2 3 6""]
Explanation:
The letter-log contents are all different, so their ordering is ""art can"", ""art zero"", ""own kit dig"".

The digit-logs have a relative order of ""dig1 8 1 5 1"", ""dig2 3 6"".


Example 2:
Input: logs = [""a1 9 2 3 1"",""g1 act car"",""zo4 4 7"",""ab1 off key dog"",""a8 act zoo""]
Output: [""g1 act car"",""a8 act zoo"",""ab1 off key dog"",""a1 9 2 3 1"",""zo4 4 7""]

Constraints:
`1 <= logs.length <= 100`
`3 <= logs[i].length <= 100`
All the tokens of `logs[i]` are separated by a single space.

`logs[i]` is guaranteed to have an identifier and at least one word after the identifier.",Easy,https://leetcode.com/problems/reorder-data-in-log-files,"Amazon,Audible",String,1056,,"you are given an array of `logs`. each log is a space-delimited string of words, where the first word is the identifier. there are two types of logs: letter-logs: all words (except the identifier) consist of lowercase english letters. digit-logs: all words (except the identifier) consist of digits. reorder these logs so that: the letter-logs come before all digit-logs. the letter-logs are sorted lexicographically by their contents. if their contents are the same, then sort them lexicographically by their identifiers. the digit-logs maintain their relative ordering. return the final order of the logs.","input: logs = [""dig1 8 1 5 1"",""let1 art can"",""dig2 3 6"",""let2 own kit dig"",""let3 art zero""] output: [""let1 art can"",""let3 art zero"",""let2 own kit dig"",""dig1 8 1 5 1"",""dig2 3 6""] explanation: the letter-log contents are all different, so their ordering is ""art can"", ""art zero"", ""own kit dig"". the digit-logs have a relative order of ""dig1 8 1 5 1"", ""dig2 3 6"". example 2: input: logs = [""a1 9 2 3 1"",""g1 act car"",""zo4 4 7"",""ab1 off key dog"",""a8 act zoo""] output: [""g1 act car"",""a8 act zoo"",""ab1 off key dog"",""a1 9 2 3 1"",""zo4 4 7""]",`1 <= logs.length <= 10^0` `3 <= logs[i].length <= 10^0` all the tokens of `logs[i]` are separated by a single space. `logs[i]` is guaranteed to have an identifier and at least one word after the identifier.,
938,Range Sum of BST,"Given the `root` node of a binary search tree, return the sum of values of all nodes with a value in the range `[low, high]`.


Example 1:
Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32

Example 2:
Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23

Constraints:
The number of nodes in the tree is in the range `[1, 2 * 104]`.

`1 <= Node.val <= 105`
`1 <= low <= high <= 105`
All `Node.val` are unique.",Easy,https://leetcode.com/problems/range-sum-of-bst,"Facebook,Google,Oracle","Tree,Depth-first Search,Recursion",2230,,"given the `root` node of a binary search tree, return the sum of values of all nodes with a value in the range `[low, high]`.","input: root = [10,5,15,3,7,null,18], low = 7, high = 15 output: 32 example 2: input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10 output: 23","the number of nodes in the tree is in the range `[1, 2 * 10^4]`. `1 <= node.val <= 10^5` `1 <= low <= high <= 10^5` all `node.val` are unique.",
939,Minimum Area Rectangle,"Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.

If there isn't any rectangle, return 0.


Example 1:
Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]
Output: 4

Example 2:
Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
Output: 2
Note:
`1 <= points.length <= 500`
`0 <= points[i][0] <= 40000`
`0 <= points[i][1] <= 40000`
All points are distinct.",Medium,https://leetcode.com/problems/minimum-area-rectangle,"Facebook,Amazon,Snapchat",Hash Table,932,,"given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes. if there isn't any rectangle, return 0.","input: [[1,1],[1,3],[3,1],[3,3],[2,2]] output: 4 example 2: input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]] output: 2 note: `1 <= points.length <= 500` `0 <= points[i][0] <= 40000` `0 <= points[i][1] <= 40000` all points are distinct.",,
940,Distinct Subsequences II,"Given a string `S`, count the number of distinct, non-empty subsequences of `S` .

Since the result may be large, return the answer modulo `10^9 + 7`.


Example 1:
Input: ""abc""
Output: 7
Explanation: The 7 distinct subsequences are ""a"", ""b"", ""c"", ""ab"", ""ac"", ""bc"", and ""abc"".


Example 2:
Input: ""aba""
Output: 6
Explanation: The 6 distinct subsequences are ""a"", ""b"", ""ab"", ""ba"", ""aa"" and ""aba"".


Example 3:
Input: ""aaa""
Output: 3
Explanation: The 3 distinct subsequences are ""a"", ""aa"" and ""aaa"".

Note:
`S` contains only lowercase letters.

`1 <= S.length <= 2000`",Hard,https://leetcode.com/problems/distinct-subsequences-ii,,,520,,"given a string `s`, count the number of distinct, non-empty subsequences of `s` . since the result may be large, return the answer modulo `10^9 + 7`.","input: ""abc"" output: 7 explanation: the 7 distinct subsequences are ""a"", ""b"", ""c"", ""ab"", ""ac"", ""bc"", and ""abc"". example 2: input: ""aba"" output: 6 explanation: the 6 distinct subsequences are ""a"", ""b"", ""ab"", ""ba"", ""aa"" and ""aba"". example 3: input: ""aaa"" output: 3 explanation: the 3 distinct subsequences are ""a"", ""aa"" and ""aaa"". note: `s` contains only lowercase letters. `1 <= s.length <= 2000`",,
941,Valid Mountain Array,"Given an array of integers `arr`, return `true` if and only if it is a valid mountain array.

Recall that arr is a mountain array if and only if:
`arr.length >= 3`
There exists some `i` with `0 < i < arr.length - 1` such that:
	
`arr[0] < arr[1] < ... < arr[i - 1] < arr[i] `
`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`

Example 1:
Input: arr = [2,1]
Output: false

Example 2:
Input: arr = [3,5,5]
Output: false

Example 3:
Input: arr = [0,3,2,1]
Output: true

Constraints:
`1 <= arr.length <= 104`
`0 <= arr[i] <= 104`",Easy,https://leetcode.com/problems/valid-mountain-array,,,889,,"given an array of integers `arr`, return `true` if and only if it is a valid mountain array. recall that arr is a mountain array if and only if: `arr.length >= 3` there exists some `i` with `0 < i < arr.length - 1` such that: `arr[0] < arr[1] < ... < arr[i - 1] < arr[i] ` `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`","input: arr = [2,1] output: false example 2: input: arr = [3,5,5] output: false example 3: input: arr = [0,3,2,1] output: true",`1 <= arr.length <= 10^4` `0 <= arr[i] <= 10^4`,
942,DI String Match,"A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where:
`s[i] == 'I'` if `perm[i] < perm[i + 1]`, and
`s[i] == 'D'` if `perm[i] > perm[i + 1]`.

Given a string `s`, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.


Example 1:
Input: s = ""IDID""
Output: [0,4,1,3,2]

Example 2:
Input: s = ""III""
Output: [0,1,2,3]

Example 3:
Input: s = ""DDI""
Output: [3,2,0,1]

Constraints:
`1 <= s.length <= 105`
`s[i]` is either `'I'` or `'D'`.",Easy,https://leetcode.com/problems/di-string-match,Uber,Math,1129,,"a permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where: `s[i] == 'i'` if `perm[i] < perm[i + 1]`, and `s[i] == 'd'` if `perm[i] > perm[i + 1]`. given a string `s`, reconstruct the permutation perm and return it. if there are multiple valid permutations perm, return any of them.","input: s = ""idid"" output: [0,4,1,3,2] example 2: input: s = ""iii"" output: [0,1,2,3] example 3: input: s = ""ddi"" output: [3,2,0,1]",`1 <= s.length <= 10^5` `s[i]` is either `'i'` or `'d'`.,
943,Find the Shortest Superstring,"Given an array of strings `words`, return the smallest string that contains each string in `words` as a substring. If there are multiple valid strings of the smallest length, return any of them.

You may assume that no string in `words` is a substring of another string in `words`.


Example 1:
Input: words = [""alex"",""loves"",""leetcode""]
Output: ""alexlovesleetcode""
Explanation: All permutations of ""alex"",""loves"",""leetcode"" would also be accepted.


Example 2:
Input: words = [""catg"",""ctaagt"",""gcta"",""ttca"",""atgcatc""]
Output: ""gctaagttcatgcatc""

Constraints:
`1 <= words.length <= 12`
`1 <= words[i].length <= 20`
`words[i]` consists of lowercase English letters.

All the strings of `words` are unique.",Hard,https://leetcode.com/problems/find-the-shortest-superstring,"Amazon,Google",Dynamic Programming,515,,"given an array of strings `words`, return the smallest string that contains each string in `words` as a substring. if there are multiple valid strings of the smallest length, return any of them. you may assume that no string in `words` is a substring of another string in `words`.","input: words = [""alex"",""loves"",""leetcode""] output: ""alexlovesleetcode"" explanation: all permutations of ""alex"",""loves"",""leetcode"" would also be accepted. example 2: input: words = [""catg"",""ctaagt"",""gcta"",""ttca"",""atgcatc""] output: ""gctaagttcatgcatc""",`1 <= words.length <= 12` `1 <= words[i].length <= 20` `words[i]` consists of lowercase english letters. all the strings of `words` are unique.,
944,Delete Columns to Make Sorted,"You are given an array of `n` strings `strs`, all of the same length.

The strings can be arranged such that there is one on each line, making a grid. For example, `strs = [""abc"", ""bce"", ""cae""]` can be arranged as:
abc
bce
cae
You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e'`) are sorted while column 1 (`'b'`, `'c'`, `'a'`) is not, so you would delete column 1.

Return the number of columns that you will delete.


Example 1:
Input: strs = [""cba"",""daf"",""ghi""]
Output: 1
Explanation: The grid looks as follows:
  cba
  daf
  ghi
Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.


Example 2:
Input: strs = [""a"",""b""]
Output: 0
Explanation: The grid looks as follows:
  a
  b
Column 0 is the only column and is sorted, so you will not delete any columns.


Example 3:
Input: strs = [""zyx"",""wvu"",""tsr""]
Output: 3
Explanation: The grid looks as follows:
  zyx
  wvu
  tsr
All 3 columns are not sorted, so you will delete all 3.


Constraints:
`n == strs.length`
`1 <= n <= 100`
`1 <= strs[i].length <= 1000`
`strs[i]` consists of lowercase English letters.",Easy,https://leetcode.com/problems/delete-columns-to-make-sorted,Google,Greedy,221,,"you are given an array of `n` strings `strs`, all of the same length. the strings can be arranged such that there is one on each line, making a grid. for example, `strs = [""abc"", ""bce"", ""cae""]` can be arranged as: abc bce cae you want to delete the columns that are not sorted lexicographically. in the above example (0-indexed), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e'`) are sorted while column 1 (`'b'`, `'c'`, `'a'`) is not, so you would delete column 1. return the number of columns that you will delete.","input: strs = [""cba"",""daf"",""ghi""] output: 1 explanation: the grid looks as follows: cba daf ghi columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column. example 2: input: strs = [""a"",""b""] output: 0 explanation: the grid looks as follows: a b column 0 is the only column and is sorted, so you will not delete any columns. example 3: input: strs = [""zyx"",""wvu"",""tsr""] output: 3 explanation: the grid looks as follows: zyx wvu tsr all 3 columns are not sorted, so you will delete all 3.",`n == strs.length` `1 <= n <= 10^0` `1 <= strs[i].length <= 1000` `strs[i]` consists of lowercase english letters.,
945,Minimum Increment to Make Array Unique,"Given an array of integers A, a move consists of choosing any `A[i]`, and incrementing it by `1`.

Return the least number of moves to make every value in `A` unique.


Example 1:
Input: [1,2,2]
Output: 1
Explanation:  After 1 move, the array could be [1, 2, 3].


Example 2:
Input: [3,2,1,2,1,7]
Output: 6
Explanation:  After 6 moves, the array could be [3, 4, 1, 2, 5, 7].

It can be shown with 5 or less moves that it is impossible for the array to have all unique values.

Note:
`0 <= A.length <= 40000`
`0 <= A[i] < 40000`",Medium,https://leetcode.com/problems/minimum-increment-to-make-array-unique,"Twitter,Uber,eBay",Array,622,,"given an array of integers a, a move consists of choosing any `a[i]`, and incrementing it by `1`. return the least number of moves to make every value in `a` unique.","input: [1,2,2] output: 1 explanation: after 1 move, the array could be [1, 2, 3]. example 2: input: [3,2,1,2,1,7] output: 6 explanation: after 6 moves, the array could be [3, 4, 1, 2, 5, 7]. it can be shown with 5 or less moves that it is impossible for the array to have all unique values. note: `0 <= a.length <= 40000` `0 <= a[i] < 40000`",,
946,Validate Stack Sequences,"Given two sequences `pushed` and `popped` with distinct values, return `true` if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.


Example 1:
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

Example 2:
Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.


Constraints:
`0 <= pushed.length == popped.length <= 1000`
`0 <= pushed[i], popped[i] < 1000`
`pushed` is a permutation of `popped`.

`pushed` and `popped` have distinct values.",Medium,https://leetcode.com/problems/validate-stack-sequences,"Google,Facebook",Stack,1654,,"given two sequences `pushed` and `popped` with distinct values, return `true` if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.","input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1] output: true explanation: we might do the following sequence: push(1), push(2), push(3), push(4), pop() -> 4, push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1 example 2: input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2] output: false explanation: 1 cannot be popped before 2.","`0 <= pushed.length == popped.length <= 1000` `0 <= pushed[i], popped[i] < 1000` `pushed` is a permutation of `popped`. `pushed` and `popped` have distinct values.",
947,Most Stones Removed with Same Row or Column,"On a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return the largest possible number of stones that can be removed.


Example 1:
Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].

2. Remove stone [2,1] because it shares the same column as [0,1].

3. Remove stone [1,2] because it shares the same row as [1,0].

4. Remove stone [1,0] because it shares the same column as [0,0].

5. Remove stone [0,1] because it shares the same row as [0,0].

Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.


Example 2:
Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to make 3 moves is as follows:
1. Remove stone [2,2] because it shares the same row as [2,0].

2. Remove stone [2,0] because it shares the same column as [0,0].

3. Remove stone [0,2] because it shares the same row as [0,0].

Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.


Example 3:
Input: stones = [[0,0]]
Output: 0
Explanation: [0,0] is the only stone on the plane, so you cannot remove it.


Constraints:
`1 <= stones.length <= 1000`
`0 <= xi, yi <= 104`
No two stones are at the same coordinate point.",Medium,https://leetcode.com/problems/most-stones-removed-with-same-row-or-column,Google,"Depth-first Search,Union Find",1411,,"on a 2d plane, we place `n` stones at some integer coordinate points. each coordinate point may have at most one stone. a stone can be removed if it shares either the same row or the same column as another stone that has not been removed. given an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return the largest possible number of stones that can be removed.","input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]] output: 5 explanation: one way to remove 5 stones is as follows: 1. remove stone [2,2] because it shares the same row as [2,1]. 2. remove stone [2,1] because it shares the same column as [0,1]. 3. remove stone [1,2] because it shares the same row as [1,0]. 4. remove stone [1,0] because it shares the same column as [0,0]. 5. remove stone [0,1] because it shares the same row as [0,0]. stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane. example 2: input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]] output: 3 explanation: one way to make 3 moves is as follows: 1. remove stone [2,2] because it shares the same row as [2,0]. 2. remove stone [2,0] because it shares the same column as [0,0]. 3. remove stone [0,2] because it shares the same row as [0,0]. stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane. example 3: input: stones = [[0,0]] output: 0 explanation: [0,0] is the only stone on the plane, so you cannot remove it.","`1 <= stones.length <= 1000` `0 <= xi, yi <= 10^4` no two stones are at the same coordinate point.",
948,Bag of Tokens,"You have an initial power of `P`, an initial score of `0`, and a bag of `tokens` where `tokens[i]` is the value of the `ith` token (0-indexed).

Your goal is to maximize your total score by potentially playing each token in one of two ways:
If your current power is at least `tokens[i]`, you may play the `ith` token face up, losing `tokens[i]` power and gaining `1` score.

If your current score is at least `1`, you may play the `ith` token face down, gaining `tokens[i]` power and losing `1` score.

Each token may be played at most once and in any order. You do not have to play all the tokens.

Return the largest possible score you can achieve after playing any number of tokens.


Example 1:
Input: tokens = [100], P = 50
Output: 0
Explanation: Playing the only token in the bag is impossible because you either have too little power or too little score.


Example 2:
Input: tokens = [100,200], P = 150
Output: 1
Explanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.

There is no need to play the 1st token since you cannot play it face up to add to your score.


Example 3:
Input: tokens = [100,200,300,400], P = 200
Output: 2
Explanation: Play the tokens in this order to get a score of 2:
1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.

2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.

3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.

4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.


Constraints:
`0 <= tokens.length <= 1000`
`0 <= tokens[i], P < 104`",Medium,https://leetcode.com/problems/bag-of-tokens,Google,"Two Pointers,Greedy,Sort",482,,"you have an initial power of `p`, an initial score of `0`, and a bag of `tokens` where `tokens[i]` is the value of the `ith` token (0-indexed). your goal is to maximize your total score by potentially playing each token in one of two ways: if your current power is at least `tokens[i]`, you may play the `ith` token face up, losing `tokens[i]` power and gaining `1` score. if your current score is at least `1`, you may play the `ith` token face down, gaining `tokens[i]` power and losing `1` score. each token may be played at most once and in any order. you do not have to play all the tokens. return the largest possible score you can achieve after playing any number of tokens.","input: tokens = [100], p = 50 output: 0 explanation: playing the only token in the bag is impossible because you either have too little power or too little score. example 2: input: tokens = [100,200], p = 150 output: 1 explanation: play the 0th token (100) face up, your power becomes 50 and score becomes 1. there is no need to play the 1st token since you cannot play it face up to add to your score. example 3: input: tokens = [100,200,300,400], p = 200 output: 2 explanation: play the tokens in this order to get a score of 2: 1. play the 0th token (100) face up, your power becomes 100 and score becomes 1. 2. play the 3rd token (400) face down, your power becomes 500 and score becomes 0. 3. play the 1st token (200) face up, your power becomes 300 and score becomes 1. 4. play the 2nd token (300) face up, your power becomes 0 and score becomes 2.","`0 <= tokens.length <= 1000` `0 <= tokens[i], p < 10^4`",
949,Largest Time for Given Digits,"Given an array `arr` of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.

24-hour times are formatted as `""HH:MM""`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.

Return the latest 24-hour time in `""HH:MM""` format.  If no valid time can be made, return an empty string.


Example 1:
Input: A = [1,2,3,4]
Output: ""23:41""
Explanation: The valid 24-hour times are ""12:34"", ""12:43"", ""13:24"", ""13:42"", ""14:23"", ""14:32"", ""21:34"", ""21:43"", ""23:14"", and ""23:41"". Of these times, ""23:41"" is the latest.


Example 2:
Input: A = [5,5,5,5]
Output: """"
Explanation: There are no valid 24-hour times as ""55:55"" is not valid.


Example 3:
Input: A = [0,0,0,0]
Output: ""00:00""

Example 4:
Input: A = [0,0,1,0]
Output: ""10:00""

Constraints:
`arr.length == 4`
`0 <= arr[i] <= 9`",Medium,https://leetcode.com/problems/largest-time-for-given-digits,"Google,Microsoft",Math,441,,"given an array `arr` of 4 digits, find the latest 24-hour time that can be made using each digit exactly once. 24-hour times are formatted as `""hh:mm""`, where `hh` is between `00` and `23`, and `mm` is between `00` and `59`. the earliest 24-hour time is `00:00`, and the latest is `23:59`. return the latest 24-hour time in `""hh:mm""` format. if no valid time can be made, return an empty string.","input: a = [1,2,3,4] output: ""23:41"" explanation: the valid 24-hour times are ""12:34"", ""12:43"", ""13:24"", ""13:42"", ""14:23"", ""14:32"", ""21:34"", ""21:43"", ""23:14"", and ""23:41"". of these times, ""23:41"" is the latest. example 2: input: a = [5,5,5,5] output: """" explanation: there are no valid 24-hour times as ""55:55"" is not valid. example 3: input: a = [0,0,0,0] output: ""00:00"" example 4: input: a = [0,0,1,0] output: ""10:00""",`arr.length == 4` `0 <= arr[i] <= 9`,
950,Reveal Cards In Increasing Order,"In a deck of cards, every card has a unique integer.  You can order the deck in any order you want.

Initially, all the cards start face down (unrevealed) in one deck.

Now, you do the following steps repeatedly, until all cards are revealed:
Take the top card of the deck, reveal it, and take it out of the deck.

If there are still cards in the deck, put the next top card of the deck at the bottom of the deck.

If there are still unrevealed cards, go back to step 1.  Otherwise, stop.

Return an ordering of the deck that would reveal the cards in increasing order.

The first entry in the answer is considered to be the top of the deck.


Example 1:
Input: [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
Explanation: 
We get the deck in the order [17,13,11,2,3,5,7] (this order doesn't matter), and reorder it.

After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.

We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].

We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].

We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].

We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].

We reveal 11, and move 17 to the bottom.  The deck is now [13,17].

We reveal 13, and move 17 to the bottom.  The deck is now [17].

We reveal 17.

Since all the cards revealed are in increasing order, the answer is correct.

Note:
`1 <= A.length <= 1000`
`1 <= A[i] <= 10^6`
`A[i] != A[j]` for all `i != j`",Medium,https://leetcode.com/problems/reveal-cards-in-increasing-order,Amazon,Array,1217,,"in a deck of cards, every card has a unique integer. you can order the deck in any order you want. initially, all the cards start face down (unrevealed) in one deck. now, you do the following steps repeatedly, until all cards are revealed: take the top card of the deck, reveal it, and take it out of the deck. if there are still cards in the deck, put the next top card of the deck at the bottom of the deck. if there are still unrevealed cards, go back to step 1. otherwise, stop. return an ordering of the deck that would reveal the cards in increasing order. the first entry in the answer is considered to be the top of the deck.","input: [17,13,11,2,3,5,7] output: [2,13,3,11,5,17,7] explanation: we get the deck in the order [17,13,11,2,3,5,7] (this order doesn't matter), and reorder it. after reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck. we reveal 2, and move 13 to the bottom. the deck is now [3,11,5,17,7,13]. we reveal 3, and move 11 to the bottom. the deck is now [5,17,7,13,11]. we reveal 5, and move 17 to the bottom. the deck is now [7,13,11,17]. we reveal 7, and move 13 to the bottom. the deck is now [11,17,13]. we reveal 11, and move 17 to the bottom. the deck is now [13,17]. we reveal 13, and move 17 to the bottom. the deck is now [17]. we reveal 17. since all the cards revealed are in increasing order, the answer is correct. note: `1 <= a.length <= 1000` `1 <= a[i] <= 10^6` `a[i] != a[j]` for all `i != j`",,
951,Flip Equivalent Binary Trees,"For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.

A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.

Given the roots of two binary trees `root1` and `root2`, return `true` if the two trees are flip equivelent or `false` otherwise.


Example 1:
Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
Output: true
Explanation: We flipped at nodes with values 1, 3, and 5.


Example 2:
Input: root1 = [], root2 = []
Output: true

Example 3:
Input: root1 = [], root2 = [1]
Output: false

Example 4:
Input: root1 = [0,null,1], root2 = []
Output: false

Example 5:
Input: root1 = [0,null,1], root2 = [0,1]
Output: true

Constraints:
The number of nodes in each tree is in the range `[0, 100]`.

Each tree will have unique node values in the range `[0, 99]`.",Medium,https://leetcode.com/problems/flip-equivalent-binary-trees,"Google,Microsoft",Tree,978,,"for a binary tree t, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees. a binary tree x is flip equivalent to a binary tree y if and only if we can make x equal to y after some number of flip operations. given the roots of two binary trees `root1` and `root2`, return `true` if the two trees are flip equivelent or `false` otherwise.","input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7] output: true explanation: we flipped at nodes with values 1, 3, and 5. example 2: input: root1 = [], root2 = [] output: true example 3: input: root1 = [], root2 = [1] output: false example 4: input: root1 = [0,null,1], root2 = [] output: false example 5: input: root1 = [0,null,1], root2 = [0,1] output: true","the number of nodes in each tree is in the range `[0, 10^0]`. each tree will have unique node values in the range `[0, 99]`.",
952,Largest Component Size by Common Factor,"Given a non-empty array of unique positive integers `A`, consider the following graph:
There are `A.length` nodes, labelled `A[0]` to `A[A.length - 1];`
There is an edge between `A[i]` and `A[j]` if and only if `A[i]` and `A[j]` share a common factor greater than 1.

Return the size of the largest connected component in the graph.


Example 1:
Input: [4,6,15,35]
Output: 4

Example 2:
Input: [20,50,9,63]
Output: 2

Example 3:
Input: [2,3,6,7,4,12,21,39]
Output: 8
Note:
`1 <= A.length <= 20000`
`1 <= A[i] <= 100000`",Hard,https://leetcode.com/problems/largest-component-size-by-common-factor,Google,"Math,Union Find",564,,"given a non-empty array of unique positive integers `a`, consider the following graph: there are `a.length` nodes, labelled `a[0]` to `a[a.length - 1];` there is an edge between `a[i]` and `a[j]` if and only if `a[i]` and `a[j]` share a common factor greater than 1. return the size of the largest connected component in the graph.","input: [4,6,15,35] output: 4 example 2: input: [20,50,9,63] output: 2 example 3: input: [2,3,6,7,4,12,21,39] output: 8 note: `1 <= a.length <= 20000` `1 <= a[i] <= 100000`",,
953,Verifying an Alien Dictionary,"In an alien language, surprisingly they also use english lowercase letters, but possibly in a different `order`. The `order` of the alphabet is some permutation of lowercase letters.

Given a sequence of `words` written in the alien language, and the `order` of the alphabet, return `true` if and only if the given `words` are sorted lexicographicaly in this alien language.


Example 1:
Input: words = [""hello"",""leetcode""], order = ""hlabcdefgijkmnopqrstuvwxyz""
Output: true
Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.


Example 2:
Input: words = [""word"",""world"",""row""], order = ""worldabcefghijkmnpqstuvxyz""
Output: false
Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.


Example 3:
Input: words = [""apple"",""app""], order = ""abcdefghijklmnopqrstuvwxyz""
Output: false
Explanation: The first three characters ""app"" match, and the second string is shorter (in size.) According to lexicographical rules ""apple"" > ""app"", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info).


Constraints:
`1 <= words.length <= 100`
`1 <= words[i].length <= 20`
`order.length == 26`
All characters in `words[i]` and `order` are English lowercase letters.",Easy,https://leetcode.com/problems/verifying-an-alien-dictionary,"Facebook,Walmart Labs,Amazon",Hash Table,1504,,"in an alien language, surprisingly they also use english lowercase letters, but possibly in a different `order`. the `order` of the alphabet is some permutation of lowercase letters. given a sequence of `words` written in the alien language, and the `order` of the alphabet, return `true` if and only if the given `words` are sorted lexicographicaly in this alien language.","input: words = [""hello"",""leetcode""], order = ""hlabcdefgijkmnopqrstuvwxyz"" output: true explanation: as 'h' comes before 'l' in this language, then the sequence is sorted. example 2: input: words = [""word"",""world"",""row""], order = ""worldabcefghijkmnpqstuvxyz"" output: false explanation: as 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted. example 3: input: words = [""apple"",""app""], order = ""abcdefghijklmnopqrstuvwxyz"" output: false explanation: the first three characters ""app"" match, and the second string is shorter (in size.) according to lexicographical rules ""apple"" > ""app"", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (more info).",`1 <= words.length <= 10^0` `1 <= words[i].length <= 20` `order.length == 26` all characters in `words[i]` and `order` are english lowercase letters.,
954,Array of Doubled Pairs,"Given an array of integers `arr` of even length, return `true` if and only if it is possible to reorder it such that `arr[2 * i + 1] = 2 * arr[2 * i]` for every `0 <= i < len(arr) / 2`.


Example 1:
Input: arr = [3,1,3,6]
Output: false

Example 2:
Input: arr = [2,1,2,6]
Output: false

Example 3:
Input: arr = [4,-2,2,-4]
Output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].


Example 4:
Input: arr = [1,2,4,16,8,4]
Output: false

Constraints:
`0 <= arr.length <= 3 * 104`
`arr.length` is even.

`-105 <= arr[i] <= 105`",Medium,https://leetcode.com/problems/array-of-doubled-pairs,Google,"Array,Hash Table",406,,"given an array of integers `arr` of even length, return `true` if and only if it is possible to reorder it such that `arr[2 * i + 1] = 2 * arr[2 * i]` for every `0 <= i < len(arr) / 2`.","input: arr = [3,1,3,6] output: false example 2: input: arr = [2,1,2,6] output: false example 3: input: arr = [4,-2,2,-4] output: true explanation: we can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4]. example 4: input: arr = [1,2,4,16,8,4] output: false",`0 <= arr.length <= 3 * 10^4` `arr.length` is even. `-10^5 <= arr[i] <= 10^5`,
955,Delete Columns to Make Sorted II,"You are given an array of `n` strings `strs`, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have `strs = [""abcdef"",""uvwxyz""]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[""bef"", ""vyz""]`.

Suppose we chose a set of deletion indices `answer` such that after deletions, the final array has its elements in lexicographic order (i.e., `strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). Return the minimum possible value of `answer.length`.


Example 1:
Input: strs = [""ca"",""bb"",""ac""]
Output: 1
Explanation: 
After deleting the first column, strs = [""a"", ""b"", ""c""].

Now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).

We require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.


Example 2:
Input: strs = [""xc"",""yb"",""za""]
Output: 0
Explanation: 
strs is already in lexicographic order, so we do not need to delete anything.

Note that the rows of strs are not necessarily in lexicographic order:
i.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)

Example 3:
Input: strs = [""zyx"",""wvu"",""tsr""]
Output: 3
Explanation: We have to delete every column.


Constraints:
`n == strs.length`
`1 <= n <= 100`
`1 <= strs[i].length <= 100`
`strs[i]` consists of lowercase English letters.",Medium,https://leetcode.com/problems/delete-columns-to-make-sorted-ii,Google,Greedy,331,,"you are given an array of `n` strings `strs`, all of the same length. we may choose any deletion indices, and we delete all the characters in those indices for each string. for example, if we have `strs = [""abcdef"",""uvwxyz""]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[""bef"", ""vyz""]`. suppose we chose a set of deletion indices `answer` such that after deletions, the final array has its elements in lexicographic order (i.e., `strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). return the minimum possible value of `answer.length`.","input: strs = [""ca"",""bb"",""ac""] output: 1 explanation: after deleting the first column, strs = [""a"", ""b"", ""c""]. now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]). we require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1. example 2: input: strs = [""xc"",""yb"",""za""] output: 0 explanation: strs is already in lexicographic order, so we do not need to delete anything. note that the rows of strs are not necessarily in lexicographic order: i.e., it is not necessarily true that (strs[0][0] <= strs[0][1] <= ...) example 3: input: strs = [""zyx"",""wvu"",""tsr""] output: 3 explanation: we have to delete every column.",`n == strs.length` `1 <= n <= 10^0` `1 <= strs[i].length <= 10^0` `strs[i]` consists of lowercase english letters.,
956,Tallest Billboard,"You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.

You are given a collection of `rods` that can be welded together. For example, if you have rods of lengths `1`, `2`, and `3`, you can weld them together to make a support of length `6`.

Return the largest possible height of your billboard installation. If you cannot support the billboard, return `0`.


Example 1:
Input: rods = [1,2,3,6]
Output: 6
Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.


Example 2:
Input: rods = [1,2,3,4,5,6]
Output: 10
Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.


Example 3:
Input: rods = [1,2]
Output: 0
Explanation: The billboard cannot be supported, so we return 0.


Constraints:
`1 <= rods.length <= 20`
`1 <= rods[i] <= 1000`
`sum(rods[i]) <= 5000`",Hard,https://leetcode.com/problems/tallest-billboard,,,441,,"you are installing a billboard and want it to have the largest height. the billboard will have two steel supports, one on each side. each steel support must be an equal height. you are given a collection of `rods` that can be welded together. for example, if you have rods of lengths `1`, `2`, and `3`, you can weld them together to make a support of length `6`. return the largest possible height of your billboard installation. if you cannot support the billboard, return `0`.","input: rods = [1,2,3,6] output: 6 explanation: we have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6. example 2: input: rods = [1,2,3,4,5,6] output: 10 explanation: we have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10. example 3: input: rods = [1,2] output: 0 explanation: the billboard cannot be supported, so we return 0.",`1 <= rods.length <= 20` `1 <= rods[i] <= 1000` `sum(rods[i]) <= 5000`,
957,Prison Cells After N Days,"There are `8` prison cells in a row and each cell is either occupied or vacant.

Each day, whether the cell is occupied or vacant changes according to the following rules:
If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.

Otherwise, it becomes vacant.

Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.

You are given an integer array `cells` where `cells[i] == 1` if the `ith` cell is occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given an integer `n`.

Return the state of the prison after `n` days (i.e., `n` such changes described above).


Example 1:
Input: cells = [0,1,0,1,1,0,0,1], n = 7
Output: [0,0,1,1,0,0,0,0]
Explanation: The following table summarizes the state of the prison on each day:
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]

Example 2:
Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000
Output: [0,0,1,1,1,1,1,0]

Constraints:
`cells.length == 8`
`cells[i]` is either `0` or `1`.

`1 <= n <= 109`",Medium,https://leetcode.com/problems/prison-cells-after-n-days,Amazon,Hash Table,971,,"there are `8` prison cells in a row and each cell is either occupied or vacant. each day, whether the cell is occupied or vacant changes according to the following rules: if a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied. otherwise, it becomes vacant. note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors. you are given an integer array `cells` where `cells[i] == 1` if the `ith` cell is occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given an integer `n`. return the state of the prison after `n` days (i.e., `n` such changes described above).","input: cells = [0,1,0,1,1,0,0,1], n = 7 output: [0,0,1,1,0,0,0,0] explanation: the following table summarizes the state of the prison on each day: day 0: [0, 1, 0, 1, 1, 0, 0, 1] day 1: [0, 1, 1, 0, 0, 0, 0, 0] day 2: [0, 0, 0, 0, 1, 1, 1, 0] day 3: [0, 1, 1, 0, 0, 1, 0, 0] day 4: [0, 0, 0, 0, 0, 1, 0, 0] day 5: [0, 1, 1, 1, 0, 1, 0, 0] day 6: [0, 0, 1, 0, 1, 1, 0, 0] day 7: [0, 0, 1, 1, 0, 0, 0, 0] example 2: input: cells = [1,0,0,1,0,0,1,0], n = 1000000000 output: [0,0,1,1,1,1,1,0]",`cells.length == 8` `cells[i]` is either `0` or `1`. `1 <= n <= 10^9`,
958,Check Completeness of a Binary Tree,"Given the `root` of a binary tree, determine if it is a complete binary tree.

In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.


Example 1:
Input: root = [1,2,3,4,5,6]
Output: true
Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.


Example 2:
Input: root = [1,2,3,4,5,null,7]
Output: false
Explanation: The node with value 7 isn't as far left as possible.


Constraints:
The number of nodes in the tree is in the range `[1, 100]`.

`1 <= Node.val <= 1000`",Medium,https://leetcode.com/problems/check-completeness-of-a-binary-tree,Facebook,Tree,1200,,"given the `root` of a binary tree, determine if it is a complete binary tree. in a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. it can have between `1` and `2h` nodes inclusive at the last level `h`.","input: root = [1,2,3,4,5,6] output: true explanation: every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible. example 2: input: root = [1,2,3,4,5,null,7] output: false explanation: the node with value 7 isn't as far left as possible.","the number of nodes in the tree is in the range `[1, 10^0]`. `1 <= node.val <= 1000`",
959,Regions Cut By Slashes,"In a N x N `grid` composed of 1 x 1 squares, each 1 x 1 square consists of a `/`, `\`, or blank space.  These characters divide the square into contiguous regions.

(Note that backslash characters are escaped, so a `\` is represented as `""\\""`.)
Return the number of regions.


Example 1:
Input:
[
  "" /"",
  ""/ ""
]
Output: 2
Explanation: The 2x2 grid is as follows:

Example 2:
Input:
[
  "" /"",
  ""  ""
]
Output: 1
Explanation: The 2x2 grid is as follows:

Example 3:
Input:
[
  ""\\/"",
  ""/\\""
]
Output: 4
Explanation: (Recall that because \ characters are escaped, ""\\/"" refers to \/, and ""/\\"" refers to /\.)
The 2x2 grid is as follows:

Example 4:
Input:
[
  ""/\\"",
  ""\\/""
]
Output: 5
Explanation: (Recall that because \ characters are escaped, ""/\\"" refers to /\, and ""\\/"" refers to \/.)
The 2x2 grid is as follows:

Example 5:
Input:
[
  ""//"",
  ""/ ""
]
Output: 3
Explanation: The 2x2 grid is as follows:
Note:
`1 <= grid.length == grid[0].length <= 30`
`grid[i][j]` is either `'/'`, `'\'`, or `' '`.",Medium,https://leetcode.com/problems/regions-cut-by-slashes,Uber,"Depth-first Search,Union Find,Graph",1245,,"in a n x n `grid` composed of 1 x 1 squares, each 1 x 1 square consists of a `/`, `\`, or blank space. these characters divide the square into contiguous regions. (note that backslash characters are escaped, so a `\` is represented as `""\\""`.) return the number of regions.","input: [ "" /"", ""/ "" ] output: 2 explanation: the 2x2 grid is as follows: example 2: input: [ "" /"", "" "" ] output: 1 explanation: the 2x2 grid is as follows: example 3: input: [ ""\\/"", ""/\\"" ] output: 4 explanation: (recall that because \ characters are escaped, ""\\/"" refers to \/, and ""/\\"" refers to /\.) the 2x2 grid is as follows: example 4: input: [ ""/\\"", ""\\/"" ] output: 5 explanation: (recall that because \ characters are escaped, ""/\\"" refers to /\, and ""\\/"" refers to \/.) the 2x2 grid is as follows: example 5: input: [ ""//"", ""/ "" ] output: 3 explanation: the 2x2 grid is as follows: note: `1 <= grid.length == grid[0].length <= 30` `grid[i][j]` is either `'/'`, `'\'`, or `' '`.",,
960,Delete Columns to Make Sorted III,"You are given an array of `n` strings `strs`, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have `strs = [""abcdef"",""uvwxyz""]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[""bef"", ""vyz""]`.

Suppose we chose a set of deletion indices `answer` such that after deletions, the final array has every string (row) in lexicographic order. (i.e., `(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])`, and `(strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, and so on). Return the minimum possible value of `answer.length`.


Example 1:
Input: strs = [""babca"",""bbazb""]
Output: 3
Explanation: After deleting columns 0, 1, and 4, the final array is strs = [""bc"", ""az""].

Both these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).

Note that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order.


Example 2:
Input: strs = [""edcba""]
Output: 4
Explanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.


Example 3:
Input: strs = [""ghi"",""def"",""abc""]
Output: 0
Explanation: All rows are already lexicographically sorted.


Constraints:
`n == strs.length`
`1 <= n <= 100`
`1 <= strs[i].length <= 100`
`strs[i]` consists of lowercase English letters.",Hard,https://leetcode.com/problems/delete-columns-to-make-sorted-iii,Google,Dynamic Programming,301,,"you are given an array of `n` strings `strs`, all of the same length. we may choose any deletion indices, and we delete all the characters in those indices for each string. for example, if we have `strs = [""abcdef"",""uvwxyz""]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[""bef"", ""vyz""]`. suppose we chose a set of deletion indices `answer` such that after deletions, the final array has every string (row) in lexicographic order. (i.e., `(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])`, and `(strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, and so on). return the minimum possible value of `answer.length`.","input: strs = [""babca"",""bbazb""] output: 3 explanation: after deleting columns 0, 1, and 4, the final array is strs = [""bc"", ""az""]. both these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]). note that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order. example 2: input: strs = [""edcba""] output: 4 explanation: if we delete less than 4 columns, the only row will not be lexicographically sorted. example 3: input: strs = [""ghi"",""def"",""abc""] output: 0 explanation: all rows are already lexicographically sorted.",`n == strs.length` `1 <= n <= 10^0` `1 <= strs[i].length <= 10^0` `strs[i]` consists of lowercase english letters.,
961,N-Repeated Element in Size 2N Array,"In a array `A` of size `2N`, there are `N+1` unique elements, and exactly one of these elements is repeated `N` times.

Return the element repeated `N` times.


Example 1:
Input: [1,2,3,3]
Output: 3

Example 2:
Input: [2,1,2,5,3,2]
Output: 2

Example 3:
Input: [5,1,5,2,5,3,5,4]
Output: 5
Note:
`4 <= A.length <= 10000`
`0 <= A[i] < 10000`
`A.length` is even",Easy,https://leetcode.com/problems/n-repeated-element-in-size-2n-array,"Apple,Akamai",Hash Table,622,,"in a array `a` of size `2n`, there are `n+1` unique elements, and exactly one of these elements is repeated `n` times. return the element repeated `n` times.","input: [1,2,3,3] output: 3 example 2: input: [2,1,2,5,3,2] output: 2 example 3: input: [5,1,5,2,5,3,5,4] output: 5 note: `4 <= a.length <= 10000` `0 <= a[i] < 10000` `a.length` is even",,
962,Maximum Width Ramp,"Given an array `A` of integers, a ramp is a tuple `(i, j)` for which `i < j` and `A[i] <= A[j]`.  The width of such a ramp is `j - i`.

Find the maximum width of a ramp in `A`.  If one doesn't exist, return 0.


Example 1:
Input: [6,0,8,2,1,5]
Output: 4
Explanation: 
The maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.


Example 2:
Input: [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: 
The maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.

Note:
`2 <= A.length <= 50000`
`0 <= A[i] <= 50000`",Medium,https://leetcode.com/problems/maximum-width-ramp,Facebook,Array,746,,"given an array `a` of integers, a ramp is a tuple `(i, j)` for which `i < j` and `a[i] <= a[j]`. the width of such a ramp is `j - i`. find the maximum width of a ramp in `a`. if one doesn't exist, return 0.","input: [6,0,8,2,1,5] output: 4 explanation: the maximum width ramp is achieved at (i, j) = (1, 5): a[1] = 0 and a[5] = 5. example 2: input: [9,8,1,0,1,9,4,0,4,1] output: 7 explanation: the maximum width ramp is achieved at (i, j) = (2, 9): a[2] = 1 and a[9] = 1. note: `2 <= a.length <= 50000` `0 <= a[i] <= 50000`",,
963,Minimum Area Rectangle II,"Given a set of points in the xy-plane, determine the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the x and y axes.

If there isn't any rectangle, return 0.


Example 1:
Input: [[1,2],[2,1],[1,0],[0,1]]
Output: 2.00000
Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.


Example 2:
Input: [[0,1],[2,1],[1,1],[1,0],[2,0]]
Output: 1.00000
Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.


Example 3:
Input: [[0,3],[1,2],[3,1],[1,3],[2,1]]
Output: 0
Explanation: There is no possible rectangle to form from these points.


Example 4:
Input: [[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]
Output: 2.00000
Explanation: The minimum area rectangle occurs at [2,1],[2,3],[3,3],[3,1], with an area of 2.

Note:
`1 <= points.length <= 50`
`0 <= points[i][0] <= 40000`
`0 <= points[i][1] <= 40000`
All points are distinct.

Answers within `10^-5` of the actual value will be accepted as correct.",Medium,https://leetcode.com/problems/minimum-area-rectangle-ii,Google,"Math,Geometry",203,,"given a set of points in the xy-plane, determine the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the x and y axes. if there isn't any rectangle, return 0.","input: [[1,2],[2,1],[1,0],[0,1]] output: 2.00000 explanation: the minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2. example 2: input: [[0,1],[2,1],[1,1],[1,0],[2,0]] output: 1.00000 explanation: the minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1. example 3: input: [[0,3],[1,2],[3,1],[1,3],[2,1]] output: 0 explanation: there is no possible rectangle to form from these points. example 4: input: [[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]] output: 2.00000 explanation: the minimum area rectangle occurs at [2,1],[2,3],[3,3],[3,1], with an area of 2. note: `1 <= points.length <= 50` `0 <= points[i][0] <= 40000` `0 <= points[i][1] <= 40000` all points are distinct. answers within `10^-5` of the actual value will be accepted as correct.",,
964,Least Operators to Express Number,"Given a single positive integer `x`, we will write an expression of the form `x (op1) x (op2) x (op3) x ...` where each operator `op1`, `op2`, etc. is either addition, subtraction, multiplication, or division (`+`, `-`, `*`, or `/)`. For example, with `x = 3`, we might write `3 * 3 / 3 + 3 - 3` which is a value of 3.

When writing such an expression, we adhere to the following conventions:
The division operator (`/`) returns rational numbers.

There are no parentheses placed anywhere.

We use the usual order of operations: multiplication and division happen before addition and subtraction.

It is not allowed to use the unary negation operator (`-`). For example, ""`x - x`"" is a valid expression as it only uses subtraction, but ""`-x + x`"" is not because it uses negation.

We would like to write an expression with the least number of operators such that the expression equals the given `target`. Return the least number of operators used.


Example 1:
Input: x = 3, target = 19
Output: 5
Explanation: 3 * 3 + 3 * 3 + 3 / 3.

The expression contains 5 operations.


Example 2:
Input: x = 5, target = 501
Output: 8
Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.

The expression contains 8 operations.


Example 3:
Input: x = 100, target = 100000000
Output: 3
Explanation: 100 * 100 * 100 * 100.

The expression contains 3 operations.


Constraints:
`2 <= x <= 100`
`1 <= target <= 2 * 108`",Hard,https://leetcode.com/problems/least-operators-to-express-number,Snapchat,"Math,Dynamic Programming",207,,"given a single positive integer `x`, we will write an expression of the form `x (op1) x (op2) x (op3) x ...` where each operator `op1`, `op2`, etc. is either addition, subtraction, multiplication, or division (`+`, `-`, `*`, or `/)`. for example, with `x = 3`, we might write `3 * 3 / 3 + 3 - 3` which is a value of 3. when writing such an expression, we adhere to the following conventions: the division operator (`/`) returns rational numbers. there are no parentheses placed anywhere. we use the usual order of operations: multiplication and division happen before addition and subtraction. it is not allowed to use the unary negation operator (`-`). for example, ""`x - x`"" is a valid expression as it only uses subtraction, but ""`-x + x`"" is not because it uses negation. we would like to write an expression with the least number of operators such that the expression equals the given `target`. return the least number of operators used.","input: x = 3, target = 19 output: 5 explanation: 3 * 3 + 3 * 3 + 3 / 3. the expression contains 5 operations. example 2: input: x = 5, target = 501 output: 8 explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5. the expression contains 8 operations. example 3: input: x = 100, target = 100000000 output: 3 explanation: 100 * 100 * 100 * 100. the expression contains 3 operations.",`2 <= x <= 10^0` `1 <= target <= 2 * 10^8`,
965,Univalued Binary Tree,"A binary tree is univalued if every node in the tree has the same value.

Return `true` if and only if the given tree is univalued.


Example 1:
Input: [1,1,1,1,1,null,1]
Output: true

Example 2:
Input: [2,2,2,5,2]
Output: false
Note:
The number of nodes in the given tree will be in the range `[1, 100]`.

Each node's value will be an integer in the range `[0, 99]`.",Easy,https://leetcode.com/problems/univalued-binary-tree,Box,Tree,794,"[Find All The Lonely Nodes, /problems/find-all-the-lonely-nodes/, Easy]",a binary tree is univalued if every node in the tree has the same value. return `true` if and only if the given tree is univalued.,"input: [1,1,1,1,1,null,1] output: true example 2: input: [2,2,2,5,2] output: false note: the number of nodes in the given tree will be in the range `[1, 100]`. each node's value will be an integer in the range `[0, 99]`.",,
966,Vowel Spellchecker,"Given a `wordlist`, we want to implement a spellchecker that converts a query word into a correct word.

For a given `query` word, the spell checker handles two categories of spelling mistakes:
Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.

	

Example: `wordlist = [""yellow""]`, `query = ""YellOw""`: `correct = ""yellow""`

Example: `wordlist = [""Yellow""]`, `query = ""yellow""`: `correct = ""Yellow""`

Example: `wordlist = [""yellow""]`, `query = ""yellow""`: `correct = ""yellow""`
Vowel Errors: If after replacing the vowels `('a', 'e', 'i', 'o', 'u')` of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.

	

Example: `wordlist = [""YellOw""]`, `query = ""yollow""`: `correct = ""YellOw""`

Example: `wordlist = [""YellOw""]`, `query = ""yeellow""`: `correct = """"` (no match)

Example: `wordlist = [""YellOw""]`, `query = ""yllw""`: `correct = """"` (no match)
In addition, the spell checker operates under the following precedence rules:
When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.

When the query matches a word up to capitlization, you should return the first such match in the wordlist.

When the query matches a word up to vowel errors, you should return the first such match in the wordlist.

If the query has no matches in the wordlist, you should return the empty string.

Given some `queries`, return a list of words `answer`, where `answer[i]` is the correct word for `query = queries[i]`.


Example 1:
Input: wordlist = [""KiTe"",""kite"",""hare"",""Hare""], queries = [""kite"",""Kite"",""KiTe"",""Hare"",""HARE"",""Hear"",""hear"",""keti"",""keet"",""keto""]
Output: [""kite"",""KiTe"",""KiTe"",""Hare"",""hare"","""","""",""KiTe"","""",""KiTe""]

Example 2:
Input: wordlist = [""yellow""], queries = [""YellOw""]
Output: [""yellow""]

Constraints:
`1 <= wordlist.length, queries.length <= 5000`
`1 <= wordlist[i].length, queries[i].length <= 7`
`wordlist[i]` and `queries[i]` consist only of only English letters.",Medium,https://leetcode.com/problems/vowel-spellchecker,"Facebook,Amazon,Google,Thumbtack","Hash Table,String",294,,"given a `wordlist`, we want to implement a spellchecker that converts a query word into a correct word. for a given `query` word, the spell checker handles two categories of spelling mistakes: capitalization: if the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.","`wordlist = [""yellow""]`, `query = ""yellow""`: `correct = ""yellow""` example: `wordlist = [""yellow""]`, `query = ""yellow""`: `correct = ""yellow""` example: `wordlist = [""yellow""]`, `query = ""yellow""`: `correct = ""yellow""` vowel errors: if after replacing the vowels `('a', 'e', 'i', 'o', 'u')` of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist. example: `wordlist = [""yellow""]`, `query = ""yollow""`: `correct = ""yellow""` example: `wordlist = [""yellow""]`, `query = ""yeellow""`: `correct = """"` (no match) example: `wordlist = [""yellow""]`, `query = ""yllw""`: `correct = """"` (no match) in addition, the spell checker operates under the following precedence rules: when the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back. when the query matches a word up to capitlization, you should return the first such match in the wordlist. when the query matches a word up to vowel errors, you should return the first such match in the wordlist. if the query has no matches in the wordlist, you should return the empty string. given some `queries`, return a list of words `answer`, where `answer[i]` is the correct word for `query = queries[i]`. example 1: input: wordlist = [""kite"",""kite"",""hare"",""hare""], queries = [""kite"",""kite"",""kite"",""hare"",""hare"",""hear"",""hear"",""keti"",""keet"",""keto""] output: [""kite"",""kite"",""kite"",""hare"",""hare"","""","""",""kite"","""",""kite""] example 2: input: wordlist = [""yellow""], queries = [""yellow""] output: [""yellow""]","`1 <= wordlist.length, queries.length <= 5000` `1 <= wordlist[i].length, queries[i].length <= 7` `wordlist[i]` and `queries[i]` consist only of only english letters.",
967,Numbers With Same Consecutive Differences,"Return all non-negative integers of length `n` such that the absolute difference between every two consecutive digits is `k`.

Note that every number in the answer must not have leading zeros. For example, `01` has one leading zero and is invalid.

You may return the answer in any order.


Example 1:
Input: n = 3, k = 7
Output: [181,292,707,818,929]
Explanation: Note that 070 is not a valid number, because it has leading zeroes.


Example 2:
Input: n = 2, k = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]

Example 3:
Input: n = 2, k = 0
Output: [11,22,33,44,55,66,77,88,99]

Example 4:
Input: n = 2, k = 2
Output: [13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]

Constraints:
`2 <= n <= 9`
`0 <= k <= 9`",Medium,https://leetcode.com/problems/numbers-with-same-consecutive-differences,Flipkart,"Backtracking,Depth-first Search,Breadth-first Search,Recursion",635,,"return all non-negative integers of length `n` such that the absolute difference between every two consecutive digits is `k`. note that every number in the answer must not have leading zeros. for example, `01` has one leading zero and is invalid. you may return the answer in any order.","input: n = 3, k = 7 output: [181,292,707,818,929] explanation: note that 070 is not a valid number, because it has leading zeroes. example 2: input: n = 2, k = 1 output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98] example 3: input: n = 2, k = 0 output: [11,22,33,44,55,66,77,88,99] example 4: input: n = 2, k = 2 output: [13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]",`2 <= n <= 9` `0 <= k <= 9`,
968,Binary Tree Cameras,"Given a binary tree, we install cameras on the nodes of the tree. 
Each camera at a node can monitor its parent, itself, and its immediate children.

Calculate the minimum number of cameras needed to monitor all nodes of the tree.


Example 1:
Input: [0,0,null,0,0]
Output: 1
Explanation: One camera is enough to monitor all nodes if placed as shown.


Example 2:
Input: [0,0,null,0,null,0,null,null,0]
Output: 2
Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.

Note:
The number of nodes in the given tree will be in the range `[1, 1000]`.

Every node has value 0.",Hard,https://leetcode.com/problems/binary-tree-cameras,"Google,Microsoft,Bloomberg,Flipkart","Dynamic Programming,Tree,Depth-first Search",1244,"[Distribute Coins in Binary Tree, /problems/distribute-coins-in-binary-tree/, Medium]","given a binary tree, we install cameras on the nodes of the tree. each camera at a node can monitor its parent, itself, and its immediate children. calculate the minimum number of cameras needed to monitor all nodes of the tree.","input: [0,0,null,0,0] output: 1 explanation: one camera is enough to monitor all nodes if placed as shown. example 2: input: [0,0,null,0,null,0,null,null,0] output: 2 explanation: at least two cameras are needed to monitor all nodes of the tree. the above image shows one of the valid configurations of camera placement. note: the number of nodes in the given tree will be in the range `[1, 1000]`. every node has value 0.",,
969,Pancake Sorting,"Given an array of integers `arr`, sort the array by performing a series of pancake flips.

In one pancake flip we do the following steps:
Choose an integer `k` where `1 <= k <= arr.length`.

Reverse the sub-array `arr[0...k-1]` (0-indexed).

For example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k = 3`, we reverse the sub-array `[3,2,1]`, so `arr = [1,2,3,4]` after the pancake flip at `k = 3`.

Return an array of the `k`-values corresponding to a sequence of pancake flips that sort `arr`. Any valid answer that sorts the array within `10 * arr.length` flips will be judged as correct.


Example 1:
Input: arr = [3,2,4,1]
Output: [4,2,4,3]
Explanation: 
We perform 4 pancake flips, with k values 4, 2, 4, and 3.

Starting state: arr = [3, 2, 4, 1]
After 1st flip (k = 4): arr = [1, 4, 2, 3]
After 2nd flip (k = 2): arr = [4, 1, 2, 3]
After 3rd flip (k = 4): arr = [3, 2, 1, 4]
After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.


Example 2:
Input: arr = [1,2,3]
Output: []
Explanation: The input is already sorted, so there is no need to flip anything.

Note that other answers, such as [3, 3], would also be accepted.


Constraints:
`1 <= arr.length <= 100`
`1 <= arr[i] <= arr.length`
All integers in `arr` are unique (i.e. `arr` is a permutation of the integers from `1` to `arr.length`).",Medium,https://leetcode.com/problems/pancake-sorting,Apple,"Array,Sort",747,,"given an array of integers `arr`, sort the array by performing a series of pancake flips. in one pancake flip we do the following steps: choose an integer `k` where `1 <= k <= arr.length`. reverse the sub-array `arr[0...k-1]` (0-indexed). for example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k = 3`, we reverse the sub-array `[3,2,1]`, so `arr = [1,2,3,4]` after the pancake flip at `k = 3`. return an array of the `k`-values corresponding to a sequence of pancake flips that sort `arr`. any valid answer that sorts the array within `10 * arr.length` flips will be judged as correct.","input: arr = [3,2,4,1] output: [4,2,4,3] explanation: we perform 4 pancake flips, with k values 4, 2, 4, and 3. starting state: arr = [3, 2, 4, 1] after 1st flip (k = 4): arr = [1, 4, 2, 3] after 2nd flip (k = 2): arr = [4, 1, 2, 3] after 3rd flip (k = 4): arr = [3, 2, 1, 4] after 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted. example 2: input: arr = [1,2,3] output: [] explanation: the input is already sorted, so there is no need to flip anything. note that other answers, such as [3, 3], would also be accepted.",`1 <= arr.length <= 10^0` `1 <= arr[i] <= arr.length` all integers in `arr` are unique (i.e. `arr` is a permutation of the integers from `1` to `arr.length`).,
970,Powerful Integers,"Given three integers `x`, `y`, and `bound`, return a list of all the powerful integers that have a value less than or equal to `bound`.

An integer is powerful if it can be represented as `xi + yj` for some integers `i >= 0` and `j >= 0`.

You may return the answer in any order. In your answer, each value should occur at most once.


Example 1:
Input: x = 2, y = 3, bound = 10
Output: [2,3,4,5,7,9,10]
Explanation:
2 = 20 + 30
3 = 21 + 30
4 = 20 + 31
5 = 21 + 31
7 = 22 + 31
9 = 23 + 30
10 = 20 + 32

Example 2:
Input: x = 3, y = 5, bound = 15
Output: [2,4,6,8,10,14]

Constraints:
`1 <= x, y <= 100`
`0 <= bound <= 106`",Medium,https://leetcode.com/problems/powerful-integers,,,16,,"given three integers `x`, `y`, and `bound`, return a list of all the powerful integers that have a value less than or equal to `bound`. an integer is powerful if it can be represented as `xi + yj` for some integers `i >= 0` and `j >= 0`. you may return the answer in any order. in your answer, each value should occur at most once.","input: x = 2, y = 3, bound = 10 output: [2,3,4,5,7,9,10] explanation: 2 = 20 + 30 3 = 21 + 30 4 = 20 + 31 5 = 21 + 31 7 = 22 + 31 9 = 23 + 30 10 = 20 + 32 example 2: input: x = 3, y = 5, bound = 15 output: [2,4,6,8,10,14]","`1 <= x, y <= 10^0` `0 <= bound <= 10^6`",
971,Flip Binary Tree To Match Preorder Traversal,"You are given the `root` of a binary tree with `n` nodes, where each node is uniquely assigned a value from `1` to `n`. You are also given a sequence of `n` values `voyage`, which is the desired pre-order traversal of the binary tree.

Any node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:
Flip the smallest number of nodes so that the pre-order traversal of the tree matches `voyage`.

Return a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match `voyage`, return the list `[-1]`.


Example 1:
Input: root = [1,2], voyage = [2,1]
Output: [-1]
Explanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.


Example 2:
Input: root = [1,2,3], voyage = [1,3,2]
Output: [1]
Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.


Example 3:
Input: root = [1,2,3], voyage = [1,2,3]
Output: []
Explanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.


Constraints:
The number of nodes in the tree is `n`.

`n == voyage.length`
`1 <= n <= 100`
`1 <= Node.val, voyage[i] <= n`
All the values in the tree are unique.

All the values in `voyage` are unique.",Medium,https://leetcode.com/problems/flip-binary-tree-to-match-preorder-traversal,Bloomberg,"Tree,Depth-first Search",522,,"you are given the `root` of a binary tree with `n` nodes, where each node is uniquely assigned a value from `1` to `n`. you are also given a sequence of `n` values `voyage`, which is the desired pre-order traversal of the binary tree. any node in the binary tree can be flipped by swapping its left and right subtrees. for example, flipping node 1 will have the following effect: flip the smallest number of nodes so that the pre-order traversal of the tree matches `voyage`. return a list of the values of all flipped nodes. you may return the answer in any order. if it is impossible to flip the nodes in the tree to make the pre-order traversal match `voyage`, return the list `[-1]`.","input: root = [1,2], voyage = [2,1] output: [-1] explanation: it is impossible to flip the nodes such that the pre-order traversal matches voyage. example 2: input: root = [1,2,3], voyage = [1,3,2] output: [1] explanation: flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage. example 3: input: root = [1,2,3], voyage = [1,2,3] output: [] explanation: the tree's pre-order traversal already matches voyage, so no nodes need to be flipped.","the number of nodes in the tree is `n`. `n == voyage.length` `1 <= n <= 10^0` `1 <= node.val, voyage[i] <= n` all the values in the tree are unique. all the values in `voyage` are unique.",
972,Equal Rational Numbers,"Given two strings `s` and `t`, each of which represents a non-negative rational number, return `true` if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.

A rational number can be represented using up to three parts: `<IntegerPart>`, `<NonRepeatingPart>`, and a `<RepeatingPart>`. The number will be represented in one of the following three ways:
`<IntegerPart>`
	
For example, `12`, `0`, and `123`.

`<IntegerPart><.><NonRepeatingPart>`
	
For example, `0.5`, `1.`, `2.12`, and `123.0001`.

`<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>`
	
For example, `0.1(6)`, `1.(9)`, `123.00(1212)`.

The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:
`1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)`.


Example 1:
Input: s = ""0.(52)"", t = ""0.5(25)""
Output: true
Explanation: Because ""0.(52)"" represents 0.52525252..., and ""0.5(25)"" represents 0.52525252525..... , the strings represent the same number.


Example 2:
Input: s = ""0.1666(6)"", t = ""0.166(66)""
Output: true

Example 3:
Input: s = ""0.9(9)"", t = ""1.""
Output: true
Explanation: ""0.9(9)"" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.]
""1."" represents the number 1, which is formed correctly: (IntegerPart) = ""1"" and (NonRepeatingPart) = """".


Constraints:
Each part consists only of digits.

The `<IntegerPart>` does not have leading zeros (except for the zero itself).

`1 <= <IntegerPart>.length <= 4`
`0 <= <NonRepeatingPart>.length <= 4`
`1 <= <RepeatingPart>.length <= 4`",Hard,https://leetcode.com/problems/equal-rational-numbers,Microsoft,Math,54,,"given two strings `s` and `t`, each of which represents a non-negative rational number, return `true` if and only if they represent the same number. the strings may use parentheses to denote the repeating part of the rational number. a rational number can be represented using up to three parts: `<integerpart>`, `<nonrepeatingpart>`, and a `<repeatingpart>`. the number will be represented in one of the following three ways: `<integerpart>` for example, `12`, `0`, and `123`. `<integerpart><.><nonrepeatingpart>` for example, `0.5`, `1.`, `2.12`, and `123.0001`. `<integerpart><.><nonrepeatingpart><(><repeatingpart><)>` for example, `0.1(6)`, `1.(9)`, `123.00(1212)`. the repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. for","`1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)`. example 1: input: s = ""0.(52)"", t = ""0.5(25)"" output: true explanation: because ""0.(52)"" represents 0.52525252..., and ""0.5(25)"" represents 0.52525252525..... , the strings represent the same number. example 2: input: s = ""0.1666(6)"", t = ""0.166(66)"" output: true example 3: input: s = ""0.9(9)"", t = ""1."" output: true explanation: ""0.9(9)"" represents 0.999999999... repeated forever, which equals 1. [see this link for an explanation.] ""1."" represents the number 1, which is formed correctly: (integerpart) = ""1"" and (nonrepeatingpart) = """".",each part consists only of digits. the `<integerpart>` does not have leading zeros (except for the zero itself). `1 <= <integerpart>.length <= 4` `0 <= <nonrepeatingpart>.length <= 4` `1 <= <repeatingpart>.length <= 4`,
973,K Closest Points to Origin,"Given an array of `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`.

The distance between two points on the X-Y plane is the Euclidean distance (i.e., `√(x1 - x2)2 + (y1 - y2)2`).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).


Example 1:
Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).

The distance between (-2, 2) and the origin is sqrt(8).

Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.

We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].


Example 2:
Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]
Explanation: The answer [[-2,4],[3,3]] would also be accepted.


Constraints:
`1 <= k <= points.length <= 104`
`-104 < xi, yi < 104`",Medium,https://leetcode.com/problems/k-closest-points-to-origin,"Facebook,Amazon,DoorDash,LinkedIn,Asana,Apple,Uber,ByteDance","Divide and Conquer,Heap,Sort",2901,"[Kth Largest Element in an Array, /problems/kth-largest-element-in-an-array/, Medium], [Top K Frequent Elements, /problems/top-k-frequent-elements/, Medium], [Top K Frequent Words, /problems/top-k-frequent-words/, Medium], [Find Nearest Point That Has the Same X or Y Coordinate, /problems/find-nearest-point-that-has-the-same-x-or-y-coordinate/, Easy]","given an array of `points` where `points[i] = [xi, yi]` represents a point on the x-y plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`. the distance between two points on the x-y plane is the euclidean distance (i.e., `√(x1 - x2)2 + (y1 - y2)2`). you may return the answer in any order. the answer is guaranteed to be unique (except for the order that it is in).","input: points = [[1,3],[-2,2]], k = 1 output: [[-2,2]] explanation: the distance between (1, 3) and the origin is sqrt(10). the distance between (-2, 2) and the origin is sqrt(8). since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin. we only want the closest k = 1 points from the origin, so the answer is just [[-2,2]]. example 2: input: points = [[3,3],[5,-1],[-2,4]], k = 2 output: [[3,3],[-2,4]] explanation: the answer [[-2,4],[3,3]] would also be accepted.","`1 <= k <= points.length <= 10^4` `-10^4 < xi, yi < 10^4`",
974,Subarray Sums Divisible by K,"Given an array `A` of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by `K`.


Example 1:
Input: A = [4,5,0,-2,-3,1], K = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by K = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Note:
`1 <= A.length <= 30000`
`-10000 <= A[i] <= 10000`
`2 <= K <= 10000`",Medium,https://leetcode.com/problems/subarray-sums-divisible-by-k,"Twilio,Facebook,ByteDance","Array,Hash Table",1535,"[Subarray Sum Equals K, /problems/subarray-sum-equals-k/, Medium], [Make Sum Divisible by P, /problems/make-sum-divisible-by-p/, Medium]","given an array `a` of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by `k`.","input: a = [4,5,0,-2,-3,1], k = 5 output: 7 explanation: there are 7 subarrays with a sum divisible by k = 5: [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3] note: `1 <= a.length <= 30000` `-10000 <= a[i] <= 10000` `2 <= k <= 10000`",,
975,Odd Even Jump,"You are given an integer array `arr`. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.

You may jump forward from index `i` to index `j` (with `i < j`) in the following way:
During odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. If there are multiple such indices `j`, you can only jump to the smallest such index `j`.

During even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. If there are multiple such indices `j`, you can only jump to the smallest such index `j`.

It may be the case that for some index `i`, there are no legal jumps.

A starting index is good if, starting from that index, you can reach the end of the array (index `arr.length - 1`) by jumping some number of times (possibly 0 or more than once).

Return the number of good starting indices.


Example 1:
Input: arr = [10,13,12,14,15]
Output: 2
Explanation: 
From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.

From starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.

From starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.

From starting index i = 4, we have reached the end already.

In total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of
jumps.


Example 2:
Input: arr = [2,3,1,1,4]
Output: 3
Explanation: 
From starting index i = 0, we make jumps to i = 1, i = 2, i = 3:
During our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].

During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3
During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].

We can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.

In a similar manner, we can deduce that:
From starting index i = 1, we jump to i = 4, so we reach the end.

From starting index i = 2, we jump to i = 3, and then we can't jump anymore.

From starting index i = 3, we jump to i = 4, so we reach the end.

From starting index i = 4, we are already at the end.

In total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some
number of jumps.


Example 3:
Input: arr = [5,1,3,4,2]
Output: 3
Explanation: We can reach the end from starting indices 1, 2, and 4.


Constraints:
`1 <= arr.length <= 2 * 104`
`0 <= arr[i] < 105`",Hard,https://leetcode.com/problems/odd-even-jump,Google,"Dynamic Programming,Stack,Ordered Map",916,,"you are given an integer array `arr`. from some starting index, you can make a series of jumps. the (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. note that the jumps are numbered, not the indices. you may jump forward from index `i` to index `j` (with `i < j`) in the following way: during odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. if there are multiple such indices `j`, you can only jump to the smallest such index `j`. during even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. if there are multiple such indices `j`, you can only jump to the smallest such index `j`. it may be the case that for some index `i`, there are no legal jumps. a starting index is good if, starting from that index, you can reach the end of the array (index `arr.length - 1`) by jumping some number of times (possibly 0 or more than once). return the number of good starting indices.","input: arr = [10,13,12,14,15] output: 2 explanation: from starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more. from starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more. from starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end. from starting index i = 4, we have reached the end already. in total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of jumps. example 2: input: arr = [2,3,1,1,4] output: 3 explanation: from starting index i = 0, we make jumps to i = 1, i = 2, i = 3: during our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0]. during our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3 during our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2]. we can't jump from i = 3 to i = 4, so the starting index i = 0 is not good. in a similar manner, we can deduce that: from starting index i = 1, we jump to i = 4, so we reach the end. from starting index i = 2, we jump to i = 3, and then we can't jump anymore. from starting index i = 3, we jump to i = 4, so we reach the end. from starting index i = 4, we are already at the end. in total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some number of jumps. example 3: input: arr = [5,1,3,4,2] output: 3 explanation: we can reach the end from starting indices 1, 2, and 4.",`1 <= arr.length <= 2 * 10^4` `0 <= arr[i] < 10^5`,
976,Largest Perimeter Triangle,"Given an integer array `nums`, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return `0`.


Example 1:
Input: nums = [2,1,2]
Output: 5

Example 2:
Input: nums = [1,2,1]
Output: 0

Example 3:
Input: nums = [3,2,3,4]
Output: 10

Example 4:
Input: nums = [3,6,2,3]
Output: 8

Constraints:
`3 <= nums.length <= 104`
`1 <= nums[i] <= 106`",Easy,https://leetcode.com/problems/largest-perimeter-triangle,C3 IoT,"Math,Sort",509,"[Largest Triangle Area, /problems/largest-triangle-area/, Easy]","given an integer array `nums`, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. if it is impossible to form any triangle of a non-zero area, return `0`.","input: nums = [2,1,2] output: 5 example 2: input: nums = [1,2,1] output: 0 example 3: input: nums = [3,2,3,4] output: 10 example 4: input: nums = [3,6,2,3] output: 8",`3 <= nums.length <= 10^4` `1 <= nums[i] <= 10^6`,
977,Squares of a Sorted Array,"Given an integer array `nums` sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.


Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].

After sorting, it becomes [0,1,9,16,100].


Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

Constraints:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`nums` is sorted in non-decreasing order.

Follow up: Squaring each element and sorting the new array is very trivial, could you find an `O(n)` solution using a different approach?",Easy,https://leetcode.com/problems/squares-of-a-sorted-array,"Facebook,Uber,Google,Amazon,Apple,Bloomberg,Yandex,Microsoft,ByteDance,Flipkart,Cisco","Array,Two Pointers",2213,"[Merge Sorted Array, /problems/merge-sorted-array/, Easy], [Sort Transformed Array, /problems/sort-transformed-array/, Medium]","given an integer array `nums` sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.","input: nums = [-4,-1,0,3,10] output: [0,1,9,16,100] explanation: after squaring, the array becomes [16,1,0,9,100]. after sorting, it becomes [0,1,9,16,100]. example 2: input: nums = [-7,-3,2,3,11] output: [4,9,9,49,121]",`1 <= nums.length <= 10^4` `-10^4 <= nums[i] <= 10^4` `nums` is sorted in non-decreasing order.,"squaring each element and sorting the new array is very trivial, could you find an `o(n)` solution using a different approach?"
978,Longest Turbulent Subarray,"Given an integer array `arr`, return the length of a maximum size turbulent subarray of `arr`.

A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

More formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said to be turbulent if and only if:
For `i <= k < j`:
	
`arr[k] > arr[k + 1]` when `k` is odd, and
`arr[k] < arr[k + 1]` when `k` is even.

Or, for `i <= k < j`:
	
`arr[k] > arr[k + 1]` when `k` is even, and
`arr[k] < arr[k + 1]` when `k` is odd.


Example 1:
Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]

Example 2:
Input: arr = [4,8,12,16]
Output: 2

Example 3:
Input: arr = [100]
Output: 1

Constraints:
`1 <= arr.length <= 4 * 104`
`0 <= arr[i] <= 109`",Medium,https://leetcode.com/problems/longest-turbulent-subarray,"Amazon,Bloomberg","Array,Dynamic Programming,Sliding Window",610,"[Maximum Subarray, /problems/maximum-subarray/, Easy]","given an integer array `arr`, return the length of a maximum size turbulent subarray of `arr`. a subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray. more formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said to be turbulent if and only if: for `i <= k < j`: `arr[k] > arr[k + 1]` when `k` is odd, and `arr[k] < arr[k + 1]` when `k` is even. or, for `i <= k < j`: `arr[k] > arr[k + 1]` when `k` is even, and `arr[k] < arr[k + 1]` when `k` is odd.","input: arr = [9,4,2,10,7,8,8,1,9] output: 5 explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5] example 2: input: arr = [4,8,12,16] output: 2 example 3: input: arr = [100] output: 1",`1 <= arr.length <= 4 * 10^4` `0 <= arr[i] <= 10^9`,
979,Distribute Coins in Binary Tree,"You are given the `root` of a binary tree with `n` nodes where each `node` in the tree has `node.val` coins and there are `n` coins total.

In one move, we may choose two adjacent nodes and move one coin from one node to another. (A move may be from parent to child, or from child to parent.)
Return the number of moves required to make every node have exactly one coin.


Example 1:
Input: root = [3,0,0]
Output: 2
Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.


Example 2:
Input: root = [0,3,0]
Output: 3
Explanation: From the left child of the root, we move two coins to the root [taking two moves].  Then, we move one coin from the root of the tree to the right child.


Example 3:
Input: root = [1,0,2]
Output: 2

Example 4:
Input: root = [1,0,0,null,3]
Output: 4

Constraints:
The number of nodes in the tree is `n`.

`1 <= n <= 100`
`0 <= Node.val <= n`
The sum of `Node.val` is `n`.",Medium,https://leetcode.com/problems/distribute-coins-in-binary-tree,Amazon,"Tree,Depth-first Search",2336,"[Sum of Distances in Tree, /problems/sum-of-distances-in-tree/, Hard], [Binary Tree Cameras, /problems/binary-tree-cameras/, Hard]","you are given the `root` of a binary tree with `n` nodes where each `node` in the tree has `node.val` coins and there are `n` coins total. in one move, we may choose two adjacent nodes and move one coin from one node to another. (a move may be from parent to child, or from child to parent.) return the number of moves required to make every node have exactly one coin.","input: root = [3,0,0] output: 2 explanation: from the root of the tree, we move one coin to its left child, and one coin to its right child. example 2: input: root = [0,3,0] output: 3 explanation: from the left child of the root, we move two coins to the root [taking two moves]. then, we move one coin from the root of the tree to the right child. example 3: input: root = [1,0,2] output: 2 example 4: input: root = [1,0,0,null,3] output: 4",the number of nodes in the tree is `n`. `1 <= n <= 10^0` `0 <= node.val <= n` the sum of `node.val` is `n`.,
980,Unique Paths III,"On a 2-dimensional `grid`, there are 4 types of squares:
`1` represents the starting square.  There is exactly one starting square.

`2` represents the ending square.  There is exactly one ending square.

`0` represents empty squares we can walk over.

`-1` represents obstacles that we cannot walk over.

Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.


Example 1:
Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)

Example 2:
Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)

Example 3:
Input: [[0,1],[2,0]]
Output: 0
Explanation: 
There is no path that walks over every empty square exactly once.

Note that the starting and ending square can be anywhere in the grid.

Note:
`1 <= grid.length * grid[0].length <= 20`",Hard,https://leetcode.com/problems/unique-paths-iii,"Amazon,JPMorgan","Backtracking,Depth-first Search",1376,"[Sudoku Solver, /problems/sudoku-solver/, Hard], [Unique Paths II, /problems/unique-paths-ii/, Medium], [Word Search II, /problems/word-search-ii/, Hard]","on a 2-dimensional `grid`, there are 4 types of squares: `1` represents the starting square. there is exactly one starting square. `2` represents the ending square. there is exactly one ending square. `0` represents empty squares we can walk over. `-1` represents obstacles that we cannot walk over. return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.","input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]] output: 2 explanation: we have the following two paths: 1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2) 2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2) example 2: input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]] output: 4 explanation: we have the following four paths: 1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3) 2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3) 3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3) 4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3) example 3: input: [[0,1],[2,0]] output: 0 explanation: there is no path that walks over every empty square exactly once. note that the starting and ending square can be anywhere in the grid. note: `1 <= grid.length * grid[0].length <= 20`",,
981,Time Based Key-Value Store,"Create a timebased key-value store class `TimeMap`, that supports two operations.

1. `set(string key, string value, int timestamp)`
Stores the `key` and `value`, along with the given `timestamp`.

2. `get(string key, int timestamp)`
Returns a value such that `set(key, value, timestamp_prev)` was called previously, with `timestamp_prev <= timestamp`.

If there are multiple such values, it returns the one with the largest `timestamp_prev`.

If there are no values, it returns the empty string (`""""`).


Example 1:
Input: inputs = [""TimeMap"",""set"",""get"",""get"",""set"",""get"",""get""], inputs = [[],[""foo"",""bar"",1],[""foo"",1],[""foo"",3],[""foo"",""bar2"",4],[""foo"",4],[""foo"",5]]
Output: [null,null,""bar"",""bar"",null,""bar2"",""bar2""]
Explanation:   
TimeMap kv;   
kv.set(""foo"", ""bar"", 1); // store the key ""foo"" and value ""bar"" along with timestamp = 1   
kv.get(""foo"", 1);  // output ""bar""   
kv.get(""foo"", 3); // output ""bar"" since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie ""bar""   
kv.set(""foo"", ""bar2"", 4);   
kv.get(""foo"", 4); // output ""bar2""   
kv.get(""foo"", 5); //output ""bar2""   

Example 2:
Input: inputs = [""TimeMap"",""set"",""set"",""get"",""get"",""get"",""get"",""get""], inputs = [[],[""love"",""high"",10],[""love"",""low"",20],[""love"",5],[""love"",10],[""love"",15],[""love"",20],[""love"",25]]
Output: [null,null,null,"""",""high"",""high"",""low"",""low""]
Note:
All key/value strings are lowercase.

All key/value strings have length in the range `[1, 100]`
The `timestamps` for all `TimeMap.set` operations are strictly increasing.

`1 <= timestamp <= 10^7`
`TimeMap.set` and `TimeMap.get` functions will be called a total of `120000` times (combined) per test case.",Medium,https://leetcode.com/problems/time-based-key-value-store,"Oracle,ByteDance,Uber,Apple,Lyft,Sumologic,Google,Atlassian,Microsoft,Twitter,Netflix","Hash Table,Binary Search",1177,,"create a timebased key-value store class `timemap`, that supports two operations. 1. `set(string key, string value, int timestamp)` stores the `key` and `value`, along with the given `timestamp`. 2. `get(string key, int timestamp)` returns a value such that `set(key, value, timestamp_prev)` was called previously, with `timestamp_prev <= timestamp`. if there are multiple such values, it returns the one with the largest `timestamp_prev`. if there are no values, it returns the empty string (`""""`).","input: inputs = [""timemap"",""set"",""get"",""get"",""set"",""get"",""get""], inputs = [[],[""foo"",""bar"",1],[""foo"",1],[""foo"",3],[""foo"",""bar2"",4],[""foo"",4],[""foo"",5]] output: [null,null,""bar"",""bar"",null,""bar2"",""bar2""] explanation: timemap kv; kv.set(""foo"", ""bar"", 1); // store the key ""foo"" and value ""bar"" along with timestamp = 1 kv.get(""foo"", 1); // output ""bar"" kv.get(""foo"", 3); // output ""bar"" since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie ""bar"" kv.set(""foo"", ""bar2"", 4); kv.get(""foo"", 4); // output ""bar2"" kv.get(""foo"", 5); //output ""bar2"" example 2: input: inputs = [""timemap"",""set"",""set"",""get"",""get"",""get"",""get"",""get""], inputs = [[],[""love"",""high"",10],[""love"",""low"",20],[""love"",5],[""love"",10],[""love"",15],[""love"",20],[""love"",25]] output: [null,null,null,"""",""high"",""high"",""low"",""low""] note: all key/value strings are lowercase. all key/value strings have length in the range `[1, 100]` the `timestamps` for all `timemap.set` operations are strictly increasing. `1 <= timestamp <= 10^7` `timemap.set` and `timemap.get` functions will be called a total of `120000` times (combined) per test case.",,
982,Triples with Bitwise AND Equal To Zero,"Given an array of integers `A`, find the number of triples of indices (i, j, k) such that:
`0 <= i < A.length`
`0 <= j < A.length`
`0 <= k < A.length`
`A[i] & A[j] & A[k] == 0`, where `&` represents the bitwise-AND operator.


Example 1:
Input: [2,1,3]
Output: 12
Explanation: We could choose the following i, j, k triples:
(i=0, j=0, k=1) : 2 & 2 & 1
(i=0, j=1, k=0) : 2 & 1 & 2
(i=0, j=1, k=1) : 2 & 1 & 1
(i=0, j=1, k=2) : 2 & 1 & 3
(i=0, j=2, k=1) : 2 & 3 & 1
(i=1, j=0, k=0) : 1 & 2 & 2
(i=1, j=0, k=1) : 1 & 2 & 1
(i=1, j=0, k=2) : 1 & 2 & 3
(i=1, j=1, k=0) : 1 & 1 & 2
(i=1, j=2, k=0) : 1 & 3 & 2
(i=2, j=0, k=1) : 3 & 2 & 1
(i=2, j=1, k=0) : 3 & 1 & 2
Note:
`1 <= A.length <= 1000`
`0 <= A[i] < 2^16`",Hard,https://leetcode.com/problems/triples-with-bitwise-and-equal-to-zero,Flipkart,Dynamic Programming,148,,"given an array of integers `a`, find the number of triples of indices (i, j, k) such that: `0 <= i < a.length` `0 <= j < a.length` `0 <= k < a.length` `a[i] & a[j] & a[k] == 0`, where `&` represents the bitwise-and operator.","input: [2,1,3] output: 12 explanation: we could choose the following i, j, k triples: (i=0, j=0, k=1) : 2 & 2 & 1 (i=0, j=1, k=0) : 2 & 1 & 2 (i=0, j=1, k=1) : 2 & 1 & 1 (i=0, j=1, k=2) : 2 & 1 & 3 (i=0, j=2, k=1) : 2 & 3 & 1 (i=1, j=0, k=0) : 1 & 2 & 2 (i=1, j=0, k=1) : 1 & 2 & 1 (i=1, j=0, k=2) : 1 & 2 & 3 (i=1, j=1, k=0) : 1 & 1 & 2 (i=1, j=2, k=0) : 1 & 3 & 2 (i=2, j=0, k=1) : 3 & 2 & 1 (i=2, j=1, k=0) : 3 & 1 & 2 note: `1 <= a.length <= 1000` `0 <= a[i] < 2^16`",,
983,Minimum Cost For Tickets,"In a country popular for train travel, you have planned some train travelling one year in advance.  The days of the year that you will travel is given as an array `days`.  Each day is an integer from `1` to `365`.

Train tickets are sold in 3 different ways:
a 1-day pass is sold for `costs[0]` dollars;
a 7-day pass is sold for `costs[1]` dollars;
a 30-day pass is sold for `costs[2]` dollars.

The passes allow that many days of consecutive travel.  For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.

Return the minimum number of dollars you need to travel every day in the given list of `days`.


Example 1:
Input: days = [1,4,6,7,8,20], costs = [2,7,15]
Output: 11
Explanation: 
For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.

On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.

On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.

In total you spent $11 and covered all the days of your travel.


Example 2:
Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
Output: 17
Explanation: 
For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.

On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.

In total you spent $17 and covered all the days of your travel.

Note:
`1 <= days.length <= 365`
`1 <= days[i] <= 365`
`days` is in strictly increasing order.

`costs.length == 3`
`1 <= costs[i] <= 1000`",Medium,https://leetcode.com/problems/minimum-cost-for-tickets,"Facebook,Apple,Grab",Dynamic Programming,2676,"[Coin Change, /problems/coin-change/, Medium]","in a country popular for train travel, you have planned some train travelling one year in advance. the days of the year that you will travel is given as an array `days`. each day is an integer from `1` to `365`. train tickets are sold in 3 different ways: a 1-day pass is sold for `costs[0]` dollars; a 7-day pass is sold for `costs[1]` dollars; a 30-day pass is sold for `costs[2]` dollars. the passes allow that many days of consecutive travel. for example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8. return the minimum number of dollars you need to travel every day in the given list of `days`.","input: days = [1,4,6,7,8,20], costs = [2,7,15] output: 11 explanation: for example, here is one way to buy passes that lets you travel your travel plan: on day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1. on day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9. on day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20. in total you spent $11 and covered all the days of your travel. example 2: input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15] output: 17 explanation: for example, here is one way to buy passes that lets you travel your travel plan: on day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30. on day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31. in total you spent $17 and covered all the days of your travel. note: `1 <= days.length <= 365` `1 <= days[i] <= 365` `days` is in strictly increasing order. `costs.length == 3` `1 <= costs[i] <= 1000`",,
984,String Without AAA or BBB,"Given two integers `a` and `b`, return any string `s` such that:
`s` has length `a + b` and contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters,
The substring `'aaa'` does not occur in `s`, and
The substring `'bbb'` does not occur in `s`.


Example 1:
Input: a = 1, b = 2
Output: ""abb""
Explanation: ""abb"", ""bab"" and ""bba"" are all correct answers.


Example 2:
Input: a = 4, b = 1
Output: ""aabaa""

Constraints:
`0 <= a, b <= 100`
It is guaranteed such an `s` exists for the given `a` and `b`.",Medium,https://leetcode.com/problems/string-without-aaa-or-bbb,"Grab,Zalando",Greedy,288,,"given two integers `a` and `b`, return any string `s` such that: `s` has length `a + b` and contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters, the substring `'aaa'` does not occur in `s`, and the substring `'bbb'` does not occur in `s`.","input: a = 1, b = 2 output: ""abb"" explanation: ""abb"", ""bab"" and ""bba"" are all correct answers. example 2: input: a = 4, b = 1 output: ""aabaa""","`0 <= a, b <= 10^0` it is guaranteed such an `s` exists for the given `a` and `b`.",
985,Sum of Even Numbers After Queries,"We have an array `A` of integers, and an array `queries` of queries.

For the `i`-th query `val = queries[i][0], index = queries[i][1]`, we add val to `A[index]`.  Then, the answer to the `i`-th query is the sum of the even values of `A`.

(Here, the given `index = queries[i][1]` is a 0-based index, and each query permanently modifies the array `A`.)
Return the answer to all queries.  Your `answer` array should have `answer[i]` as the answer to the `i`-th query.


Example 1:
Input: A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
Output: [8,6,2,4]
Explanation: 
At the beginning, the array is [1,2,3,4].

After adding 1 to A[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.

After adding -3 to A[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.

After adding -4 to A[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.

After adding 2 to A[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.

Note:
`1 <= A.length <= 10000`
`-10000 <= A[i] <= 10000`
`1 <= queries.length <= 10000`
`-10000 <= queries[i][0] <= 10000`
`0 <= queries[i][1] < A.length`",Easy,https://leetcode.com/problems/sum-of-even-numbers-after-queries,Indeed,Array,501,,"we have an array `a` of integers, and an array `queries` of queries. for the `i`-th query `val = queries[i][0], index = queries[i][1]`, we add val to `a[index]`. then, the answer to the `i`-th query is the sum of the even values of `a`. (here, the given `index = queries[i][1]` is a 0-based index, and each query permanently modifies the array `a`.) return the answer to all queries. your `answer` array should have `answer[i]` as the answer to the `i`-th query.","input: a = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]] output: [8,6,2,4] explanation: at the beginning, the array is [1,2,3,4]. after adding 1 to a[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8. after adding -3 to a[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6. after adding -4 to a[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2. after adding 2 to a[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4. note: `1 <= a.length <= 10000` `-10000 <= a[i] <= 10000` `1 <= queries.length <= 10000` `-10000 <= queries[i][0] <= 10000` `0 <= queries[i][1] < a.length`",,
986,Interval List Intersections,"You are given two lists of closed intervals, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`. Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval `[a, b]` (with `a < b`) denotes the set of real numbers `x` with `a <= x <= b`.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of `[1, 3]` and `[2, 4]` is `[2, 3]`.


Example 1:
Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

Example 2:
Input: firstList = [[1,3],[5,9]], secondList = []
Output: []

Example 3:
Input: firstList = [], secondList = [[4,8],[10,12]]
Output: []

Example 4:
Input: firstList = [[1,7]], secondList = [[3,10]]
Output: [[3,7]]

Constraints:
`0 <= firstList.length, secondList.length <= 1000`
`firstList.length + secondList.length >= 1`
`0 <= starti < endi <= 109`
`endi < starti+1`
`0 <= startj < endj <= 109 `
`endj < startj+1`",Medium,https://leetcode.com/problems/interval-list-intersections,"Facebook,Uber,Apple,Google,Amazon,Bloomberg",Two Pointers,2170,"[Merge Intervals, /problems/merge-intervals/, Medium], [Merge Sorted Array, /problems/merge-sorted-array/, Easy], [Employee Free Time, /problems/employee-free-time/, Hard]","you are given two lists of closed intervals, `firstlist` and `secondlist`, where `firstlist[i] = [starti, endi]` and `secondlist[j] = [startj, endj]`. each list of intervals is pairwise disjoint and in sorted order. return the intersection of these two interval lists. a closed interval `[a, b]` (with `a < b`) denotes the set of real numbers `x` with `a <= x <= b`. the intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. for example, the intersection of `[1, 3]` and `[2, 4]` is `[2, 3]`.","input: firstlist = [[0,2],[5,10],[13,23],[24,25]], secondlist = [[1,5],[8,12],[15,24],[25,26]] output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]] example 2: input: firstlist = [[1,3],[5,9]], secondlist = [] output: [] example 3: input: firstlist = [], secondlist = [[4,8],[10,12]] output: [] example 4: input: firstlist = [[1,7]], secondlist = [[3,10]] output: [[3,7]]","`0 <= firstlist.length, secondlist.length <= 1000` `firstlist.length + secondlist.length >= 1` `0 <= starti < endi <= 10^9` `endi < starti+1` `0 <= startj < endj <= 10^9 ` `endj < startj+1`",
987,Vertical Order Traversal of a Binary Tree,"Given the `root` of a binary tree, calculate the vertical order traversal of the binary tree.

For each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`.

The vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.

Return the vertical order traversal of the binary tree.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation:
Column -1: Only node 9 is in this column.

Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.

Column 1: Only node 20 is in this column.

Column 2: Only node 7 is in this column.


Example 2:
Input: root = [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
Column -2: Only node 4 is in this column.

Column -1: Only node 2 is in this column.

Column 0: Nodes 1, 5, and 6 are in this column.

          1 is at the top, so it comes first.

          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.

Column 1: Only node 3 is in this column.

Column 2: Only node 7 is in this column.


Example 3:
Input: root = [1,2,3,4,6,5,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
This case is the exact same as example 2, but with nodes 5 and 6 swapped.

Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.


Constraints:
The number of nodes in the tree is in the range `[1, 1000]`.

`0 <= Node.val <= 1000`",Hard,https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree,"Facebook,Bloomberg,Amazon,Microsoft,Apple,ByteDance","Hash Table,Tree,Depth-first Search,Breadth-first Search",1406,,"given the `root` of a binary tree, calculate the vertical order traversal of the binary tree. for each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. the root of the tree is at `(0, 0)`. the vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. there may be multiple nodes in the same row and same column. in such a case, sort these nodes by their values. return the vertical order traversal of the binary tree.","input: root = [3,9,20,null,null,15,7] output: [[9],[3,15],[20],[7]] explanation: column -1: only node 9 is in this column. column 0: nodes 3 and 15 are in this column in that order from top to bottom. column 1: only node 20 is in this column. column 2: only node 7 is in this column. example 2: input: root = [1,2,3,4,5,6,7] output: [[4],[2],[1,5,6],[3],[7]] explanation: column -2: only node 4 is in this column. column -1: only node 2 is in this column. column 0: nodes 1, 5, and 6 are in this column. 1 is at the top, so it comes first. 5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6. column 1: only node 3 is in this column. column 2: only node 7 is in this column. example 3: input: root = [1,2,3,4,6,5,7] output: [[4],[2],[1,5,6],[3],[7]] explanation: this case is the exact same as example 2, but with nodes 5 and 6 swapped. note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.","the number of nodes in the tree is in the range `[1, 1000]`. `0 <= node.val <= 1000`",
988,Smallest String Starting From Leaf,"Given the `root` of a binary tree, each node has a value from `0` to `25` representing the letters `'a'` to `'z'`: a value of `0` represents `'a'`, a value of `1` represents `'b'`, and so on.

Find the lexicographically smallest string that starts at a leaf of this tree and ends at the root.

(As a reminder, any shorter prefix of a string is lexicographically smaller: for example, `""ab""` is lexicographically smaller than `""aba""`.  A leaf of a node is a node that has no children.)

Example 1:
Input: [0,1,2,3,4,3,4]
Output: ""dba""

Example 2:
Input: [25,1,3,1,3,0,2]
Output: ""adz""

Example 3:
Input: [2,2,1,null,1,0,null,0]
Output: ""abc""
Note:
The number of nodes in the given tree will be between `1` and `8500`.

Each node in the tree will have a value between `0` and `25`.",Medium,https://leetcode.com/problems/smallest-string-starting-from-leaf,Google,"Tree,Depth-first Search",593,"[Sum Root to Leaf Numbers, /problems/sum-root-to-leaf-numbers/, Medium], [Binary Tree Paths, /problems/binary-tree-paths/, Easy]","given the `root` of a binary tree, each node has a value from `0` to `25` representing the letters `'a'` to `'z'`: a value of `0` represents `'a'`, a value of `1` represents `'b'`, and so on. find the lexicographically smallest string that starts at a leaf of this tree and ends at the root. (as a reminder, any shorter prefix of a string is lexicographically smaller: for example, `""ab""` is lexicographically smaller than `""aba""`. a leaf of a node is a node that has no children.)","input: [0,1,2,3,4,3,4] output: ""dba"" example 2: input: [25,1,3,1,3,0,2] output: ""adz"" example 3: input: [2,2,1,null,1,0,null,0] output: ""abc"" note: the number of nodes in the given tree will be between `1` and `8500`. each node in the tree will have a value between `0` and `25`.",,
989,Add to Array-Form of Integer,"The array-form of an integer `num` is an array representing its digits in left to right order.

For example, for `num = 1321`, the array form is `[1,3,2,1]`.

Given `num`, the array-form of an integer, and an integer `k`, return the array-form of the integer `num + k`.


Example 1:
Input: num = [1,2,0,0], k = 34
Output: [1,2,3,4]
Explanation: 1200 + 34 = 1234

Example 2:
Input: num = [2,7,4], k = 181
Output: [4,5,5]
Explanation: 274 + 181 = 455

Example 3:
Input: num = [2,1,5], k = 806
Output: [1,0,2,1]
Explanation: 215 + 806 = 1021

Example 4:
Input: num = [9,9,9,9,9,9,9,9,9,9], k = 1
Output: [1,0,0,0,0,0,0,0,0,0,0]
Explanation: 9999999999 + 1 = 10000000000

Constraints:
`1 <= num.length <= 104`
`0 <= num[i] <= 9`
`num` does not contain any leading zeros except for the zero itself.

`1 <= k <= 104`",Easy,https://leetcode.com/problems/add-to-array-form-of-integer,Facebook,Array,581,"[Add Two Numbers, /problems/add-two-numbers/, Medium], [Plus One, /problems/plus-one/, Easy], [Add Binary, /problems/add-binary/, Easy], [Add Strings, /problems/add-strings/, Easy]","the array-form of an integer `num` is an array representing its digits in left to right order. for example, for `num = 1321`, the array form is `[1,3,2,1]`. given `num`, the array-form of an integer, and an integer `k`, return the array-form of the integer `num + k`.","input: num = [1,2,0,0], k = 34 output: [1,2,3,4] explanation: 1200 + 34 = 1234 example 2: input: num = [2,7,4], k = 181 output: [4,5,5] explanation: 274 + 181 = 455 example 3: input: num = [2,1,5], k = 806 output: [1,0,2,1] explanation: 215 + 806 = 1021 example 4: input: num = [9,9,9,9,9,9,9,9,9,9], k = 1 output: [1,0,0,0,0,0,0,0,0,0,0] explanation: 9999999999 + 1 = 10000000000",`1 <= num.length <= 10^4` `0 <= num[i] <= 9` `num` does not contain any leading zeros except for the zero itself. `1 <= k <= 10^4`,
990,Satisfiability of Equality Equations,"Given an array equations of strings that represent relationships between variables, each string `equations[i]` has length `4` and takes one of two different forms: `""a==b""` or `""a!=b""`.  Here, `a` and `b` are lowercase letters (not necessarily different) that represent one-letter variable names.

Return `true` if and only if it is possible to assign integers to variable names so as to satisfy all the given equations.


Example 1:
Input: [""a==b"",""b!=a""]
Output: false
Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.


Example 2:
Input: [""b==a"",""a==b""]
Output: true
Explanation: We could assign a = 1 and b = 1 to satisfy both equations.


Example 3:
Input: [""a==b"",""b==c"",""a==c""]
Output: true

Example 4:
Input: [""a==b"",""b!=c"",""c==a""]
Output: false

Example 5:
Input: [""c==c"",""b==d"",""x!=z""]
Output: true
Note:
`1 <= equations.length <= 500`
`equations[i].length == 4`
`equations[i][0]` and `equations[i][3]` are lowercase letters
`equations[i][1]` is either `'='` or `'!'`
`equations[i][2]` is `'='`",Medium,https://leetcode.com/problems/satisfiability-of-equality-equations,Sumologic,"Union Find,Graph",784,,"given an array equations of strings that represent relationships between variables, each string `equations[i]` has length `4` and takes one of two different forms: `""a==b""` or `""a!=b""`. here, `a` and `b` are lowercase letters (not necessarily different) that represent one-letter variable names. return `true` if and only if it is possible to assign integers to variable names so as to satisfy all the given equations.","input: [""a==b"",""b!=a""] output: false explanation: if we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second. there is no way to assign the variables to satisfy both equations. example 2: input: [""b==a"",""a==b""] output: true explanation: we could assign a = 1 and b = 1 to satisfy both equations. example 3: input: [""a==b"",""b==c"",""a==c""] output: true example 4: input: [""a==b"",""b!=c"",""c==a""] output: false example 5: input: [""c==c"",""b==d"",""x!=z""] output: true note: `1 <= equations.length <= 500` `equations[i].length == 4` `equations[i][0]` and `equations[i][3]` are lowercase letters `equations[i][1]` is either `'='` or `'!'` `equations[i][2]` is `'='`",,
991,Broken Calculator,"On a broken calculator that has a number showing on its display, we can perform two operations:
Double: Multiply the number on the display by 2, or;
Decrement: Subtract 1 from the number on the display.

Initially, the calculator is displaying the number `X`.

Return the minimum number of operations needed to display the number `Y`.


Example 1:
Input: X = 2, Y = 3
Output: 2
Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.


Example 2:
Input: X = 5, Y = 8
Output: 2
Explanation: Use decrement and then double {5 -> 4 -> 8}.


Example 3:
Input: X = 3, Y = 10
Output: 3
Explanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.


Example 4:
Input: X = 1024, Y = 1
Output: 1023
Explanation: Use decrement operations 1023 times.

Note:
`1 <= X <= 10^9`
`1 <= Y <= 10^9`",Medium,https://leetcode.com/problems/broken-calculator,Bloomberg,"Math,Greedy",865,"[2 Keys Keyboard, /problems/2-keys-keyboard/, Medium]","on a broken calculator that has a number showing on its display, we can perform two operations: double: multiply the number on the display by 2, or; decrement: subtract 1 from the number on the display. initially, the calculator is displaying the number `x`. return the minimum number of operations needed to display the number `y`.","input: x = 2, y = 3 output: 2 explanation: use double operation and then decrement operation {2 -> 4 -> 3}. example 2: input: x = 5, y = 8 output: 2 explanation: use decrement and then double {5 -> 4 -> 8}. example 3: input: x = 3, y = 10 output: 3 explanation: use double, decrement and double {3 -> 6 -> 5 -> 10}. example 4: input: x = 1024, y = 1 output: 1023 explanation: use decrement operations 1023 times. note: `1 <= x <= 10^9` `1 <= y <= 10^9`",,
992,Subarrays with K Different Integers,"Given an array `A` of positive integers, call a (contiguous, not necessarily distinct) subarray of `A` good if the number of different integers in that subarray is exactly `K`.

(For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`.)
Return the number of good subarrays of `A`.


Example 1:
Input: A = [1,2,1,2,3], K = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].


Example 2:
Input: A = [1,2,1,3,4], K = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].

Note:
`1 <= A.length <= 20000`
`1 <= A[i] <= A.length`
`1 <= K <= A.length`",Hard,https://leetcode.com/problems/subarrays-with-k-different-integers,"Amazon,Google","Hash Table,Two Pointers,Sliding Window",1663,"[Longest Substring Without Repeating Characters, /problems/longest-substring-without-repeating-characters/, Medium], [Longest Substring with At Most Two Distinct Characters, /problems/longest-substring-with-at-most-two-distinct-characters/, Medium], [Longest Substring with At Most K Distinct Characters, /problems/longest-substring-with-at-most-k-distinct-characters/, Medium]","given an array `a` of positive integers, call a (contiguous, not necessarily distinct) subarray of `a` good if the number of different integers in that subarray is exactly `k`. (for example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`.) return the number of good subarrays of `a`.","input: a = [1,2,1,2,3], k = 2 output: 7 explanation: subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]. example 2: input: a = [1,2,1,3,4], k = 3 output: 3 explanation: subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4]. note: `1 <= a.length <= 20000` `1 <= a[i] <= a.length` `1 <= k <= a.length`",,
993,Cousins in Binary Tree,"In a binary tree, the root node is at depth `0`, and children of each depth `k` node are at depth `k+1`.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the `root` of a binary tree with unique values, and the values `x` and `y` of two different nodes in the tree.

Return `true` if and only if the nodes corresponding to the values `x` and `y` are cousins.


Example 1:
Input: root = [1,2,3,4], x = 4, y = 3
Output: false

Example 2:
Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true

Example 3:
Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false

Constraints:
The number of nodes in the tree will be between `2` and `100`.

Each node has a unique integer value from `1` to `100`.",Easy,https://leetcode.com/problems/cousins-in-binary-tree,"Bloomberg,Amazon,Facebook","Tree,Breadth-first Search",1425,"[Binary Tree Level Order Traversal, /problems/binary-tree-level-order-traversal/, Medium]","in a binary tree, the root node is at depth `0`, and children of each depth `k` node are at depth `k+1`. two nodes of a binary tree are cousins if they have the same depth, but have different parents. we are given the `root` of a binary tree with unique values, and the values `x` and `y` of two different nodes in the tree. return `true` if and only if the nodes corresponding to the values `x` and `y` are cousins.","input: root = [1,2,3,4], x = 4, y = 3 output: false example 2: input: root = [1,2,3,null,4,null,5], x = 5, y = 4 output: true example 3: input: root = [1,2,3,null,4], x = 2, y = 3 output: false",the number of nodes in the tree will be between `2` and `10^0`. each node has a unique integer value from `1` to `10^0`.,
994,Rotting Oranges,"You are given an `m x n` `grid` where each cell can have one of three values:
`0` representing an empty cell,
`1` representing a fresh orange, or
`2` representing a rotten orange.

Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return `-1`.


Example 1:
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:
Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.


Example 3:
Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.


Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 10`
`grid[i][j]` is `0`, `1`, or `2`.",Medium,https://leetcode.com/problems/rotting-oranges,"Amazon,Google,Microsoft,Bloomberg,Oracle,Walmart Labs",Breadth-first Search,3211,"[Walls and Gates, /problems/walls-and-gates/, Medium]","you are given an `m x n` `grid` where each cell can have one of three values: `0` representing an empty cell, `1` representing a fresh orange, or `2` representing a rotten orange. every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten. return the minimum number of minutes that must elapse until no cell has a fresh orange. if this is impossible, return `-1`.","input: grid = [[2,1,1],[1,1,0],[0,1,1]] output: 4 example 2: input: grid = [[2,1,1],[0,1,1],[1,0,1]] output: -1 explanation: the orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally. example 3: input: grid = [[0,2]] output: 0 explanation: since there are already no fresh oranges at minute 0, the answer is just 0.","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 10` `grid[i][j]` is `0`, `1`, or `2`.",
995,Minimum Number of K Consecutive Bit Flips,"In an array `A` containing only 0s and 1s, a `K`-bit flip consists of choosing a (contiguous) subarray of length `K` and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.

Return the minimum number of `K`-bit flips required so that there is no 0 in the array.  If it is not possible, return `-1`.


Example 1:
Input: A = [0,1,0], K = 1
Output: 2
Explanation: Flip A[0], then flip A[2].


Example 2:
Input: A = [1,1,0], K = 2
Output: -1
Explanation: No matter how we flip subarrays of size 2, we can't make the array become [1,1,1].


Example 3:
Input: A = [0,0,0,1,0,1,1,0], K = 3
Output: 3
Explanation:
Flip A[0],A[1],A[2]: A becomes [1,1,1,1,0,1,1,0]
Flip A[4],A[5],A[6]: A becomes [1,1,1,1,1,0,0,0]
Flip A[5],A[6],A[7]: A becomes [1,1,1,1,1,1,1,1]
Note:
`1 <= A.length <= 30000`
`1 <= K <= A.length`",Hard,https://leetcode.com/problems/minimum-number-of-k-consecutive-bit-flips,"Google,Amazon","Greedy,Sliding Window",517,"[Bulb Switcher, /problems/bulb-switcher/, Medium]","in an array `a` containing only 0s and 1s, a `k`-bit flip consists of choosing a (contiguous) subarray of length `k` and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0. return the minimum number of `k`-bit flips required so that there is no 0 in the array. if it is not possible, return `-1`.","input: a = [0,1,0], k = 1 output: 2 explanation: flip a[0], then flip a[2]. example 2: input: a = [1,1,0], k = 2 output: -1 explanation: no matter how we flip subarrays of size 2, we can't make the array become [1,1,1]. example 3: input: a = [0,0,0,1,0,1,1,0], k = 3 output: 3 explanation: flip a[0],a[1],a[2]: a becomes [1,1,1,1,0,1,1,0] flip a[4],a[5],a[6]: a becomes [1,1,1,1,1,0,0,0] flip a[5],a[6],a[7]: a becomes [1,1,1,1,1,1,1,1] note: `1 <= a.length <= 30000` `1 <= k <= a.length`",,
996,Number of Squareful Arrays,"Given an array `A` of non-negative integers, the array is squareful if for every pair of adjacent elements, their sum is a perfect square.

Return the number of permutations of A that are squareful.  Two permutations `A1` and `A2` differ if and only if there is some index `i` such that `A1[i] != A2[i]`.


Example 1:
Input: [1,17,8]
Output: 2
Explanation: 
[1,8,17] and [17,8,1] are the valid permutations.


Example 2:
Input: [2,2,2]
Output: 1
Note:
`1 <= A.length <= 12`
`0 <= A[i] <= 1e9`",Hard,https://leetcode.com/problems/number-of-squareful-arrays,"Apple,Codenation","Math,Backtracking,Graph",465,"[Permutations II, /problems/permutations-ii/, Medium]","given an array `a` of non-negative integers, the array is squareful if for every pair of adjacent elements, their sum is a perfect square. return the number of permutations of a that are squareful. two permutations `a1` and `a2` differ if and only if there is some index `i` such that `a1[i] != a2[i]`.","input: [1,17,8] output: 2 explanation: [1,8,17] and [17,8,1] are the valid permutations. example 2: input: [2,2,2] output: 1 note: `1 <= a.length <= 12` `0 <= a[i] <= 1e9`",,
997,Find the Town Judge,"In a town, there are `N` people labelled from `1` to `N`.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:
The town judge trusts nobody.

Everybody (except for the town judge) trusts the town judge.

There is exactly one person that satisfies properties 1 and 2.

You are given `trust`, an array of pairs `trust[i] = [a, b]` representing that the person labelled `a` trusts the person labelled `b`.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return `-1`.


Example 1:
Input: N = 2, trust = [[1,2]]
Output: 2

Example 2:
Input: N = 3, trust = [[1,3],[2,3]]
Output: 3

Example 3:
Input: N = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1

Example 4:
Input: N = 3, trust = [[1,2],[2,3]]
Output: -1

Example 5:
Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
Output: 3

Constraints:
`1 <= N <= 1000`
`0 <= trust.length <= 10^4`
`trust[i].length == 2`
`trust[i]` are all different
`trust[i][0] != trust[i][1]`
`1 <= trust[i][0], trust[i][1] <= N`",Easy,https://leetcode.com/problems/find-the-town-judge,Amazon,Graph,1490,"[Find the Celebrity, /problems/find-the-celebrity/, Medium]","in a town, there are `n` people labelled from `1` to `n`. there is a rumor that one of these people is secretly the town judge. if the town judge exists, then: the town judge trusts nobody. everybody (except for the town judge) trusts the town judge. there is exactly one person that satisfies properties 1 and 2. you are given `trust`, an array of pairs `trust[i] = [a, b]` representing that the person labelled `a` trusts the person labelled `b`. if the town judge exists and can be identified, return the label of the town judge. otherwise, return `-1`.","input: n = 2, trust = [[1,2]] output: 2 example 2: input: n = 3, trust = [[1,3],[2,3]] output: 3 example 3: input: n = 3, trust = [[1,3],[2,3],[3,1]] output: -1 example 4: input: n = 3, trust = [[1,2],[2,3]] output: -1 example 5: input: n = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]] output: 3","`1 <= n <= 1000` `0 <= trust.length <= 10^4` `trust[i].length == 2` `trust[i]` are all different `trust[i][0] != trust[i][1]` `1 <= trust[i][0], trust[i][1] <= n`",
998,Maximum Binary Tree II,"We are given the `root` node of a maximum tree: a tree where every node has a value greater than any other value in its subtree.

Just as in the previous problem, the given tree was constructed from an list `A` (`root = Construct(A)`) recursively with the following `Construct(A)` routine:
If `A` is empty, return `null`.

Otherwise, let `A[i]` be the largest element of `A`.  Create a `root` node with value `A[i]`.

The left child of `root` will be `Construct([A[0], A[1], ..., A[i-1]])`
The right child of `root` will be `Construct([A[i+1], A[i+2], ..., A[A.length - 1]])`
Return `root`.

Note that we were not given A directly, only a root node `root = Construct(A)`.

Suppose `B` is a copy of `A` with the value `val` appended to it.  It is guaranteed that `B` has unique values.

Return `Construct(B)`.


Example 1:
Input: root = [4,1,3,null,null,2], val = 5
Output: [5,4,null,1,3,null,null,2]
Explanation: A = [1,4,2,3], B = [1,4,2,3,5]

Example 2:
Input: root = [5,2,4,null,1], val = 3
Output: [5,2,4,null,1,null,3]
Explanation: A = [2,1,5,4], B = [2,1,5,4,3]

Example 3:
Input: root = [5,2,3,null,1], val = 4
Output: [5,2,4,null,1,3]
Explanation: A = [2,1,5,3], B = [2,1,5,3,4]

Constraints:
`1 <= B.length <= 100`",Medium,https://leetcode.com/problems/maximum-binary-tree-ii,Facebook,Tree,246,"[Maximum Binary Tree, /problems/maximum-binary-tree/, Medium]","we are given the `root` node of a maximum tree: a tree where every node has a value greater than any other value in its subtree. just as in the previous problem, the given tree was constructed from an list `a` (`root = construct(a)`) recursively with the following `construct(a)` routine: if `a` is empty, return `null`. otherwise, let `a[i]` be the largest element of `a`. create a `root` node with value `a[i]`. the left child of `root` will be `construct([a[0], a[1], ..., a[i-1]])` the right child of `root` will be `construct([a[i+1], a[i+2], ..., a[a.length - 1]])` return `root`. note that we were not given a directly, only a root node `root = construct(a)`. suppose `b` is a copy of `a` with the value `val` appended to it. it is guaranteed that `b` has unique values. return `construct(b)`.","input: root = [4,1,3,null,null,2], val = 5 output: [5,4,null,1,3,null,null,2] explanation: a = [1,4,2,3], b = [1,4,2,3,5] example 2: input: root = [5,2,4,null,1], val = 3 output: [5,2,4,null,1,null,3] explanation: a = [2,1,5,4], b = [2,1,5,4,3] example 3: input: root = [5,2,3,null,1], val = 4 output: [5,2,4,null,1,3] explanation: a = [2,1,5,3], b = [2,1,5,3,4]",`1 <= b.length <= 10^0`,
999,Available Captures for Rook,"On an `8 x 8` chessboard, there is exactly one white rook `'R'` and some number of white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`.

When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. The number of available captures for the white rook is the number of pawns that the rook is attacking.

Return the number of available captures for the white rook.


Example 1:
Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""R"",""."",""."",""."",""p""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]]
Output: 3
Explanation: In this example, the rook is attacking all the pawns.


Example 2:
Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""p"",""p"",""p"",""p"",""p"",""."","".""],[""."",""p"",""p"",""B"",""p"",""p"",""."","".""],[""."",""p"",""B"",""R"",""B"",""p"",""."","".""],[""."",""p"",""p"",""B"",""p"",""p"",""."","".""],[""."",""p"",""p"",""p"",""p"",""p"",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]]
Output: 0
Explanation: The bishops are blocking the rook from attacking any of the pawns.


Example 3:
Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""p"",""p"",""."",""R"",""."",""p"",""B"","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""B"",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]]
Output: 3
Explanation: The rook is attacking the pawns at positions b5, d6, and f5.


Constraints:
`board.length == 8`
`board[i].length == 8`
`board[i][j]` is either `'R'`, `'.'`, `'B'`, or `'p'`
There is exactly one cell with `board[i][j] == 'R'`",Easy,https://leetcode.com/problems/available-captures-for-rook,Square,Array,312,,"on an `8 x 8` chessboard, there is exactly one white rook `'r'` and some number of white bishops `'b'`, black pawns `'p'`, and empty squares `'.'`. when the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. a rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. the number of available captures for the white rook is the number of pawns that the rook is attacking. return the number of available captures for the white rook.","input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""r"",""."",""."",""."",""p""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]] output: 3 explanation: in this example, the rook is attacking all the pawns. example 2: input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""p"",""p"",""p"",""p"",""p"",""."","".""],[""."",""p"",""p"",""b"",""p"",""p"",""."","".""],[""."",""p"",""b"",""r"",""b"",""p"",""."","".""],[""."",""p"",""p"",""b"",""p"",""p"",""."","".""],[""."",""p"",""p"",""p"",""p"",""p"",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]] output: 0 explanation: the bishops are blocking the rook from attacking any of the pawns. example 3: input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""p"",""p"",""."",""r"",""."",""p"",""b"","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""b"",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]] output: 3 explanation: the rook is attacking the pawns at positions b5, d6, and f5.","`board.length == 8` `board[i].length == 8` `board[i][j]` is either `'r'`, `'.'`, `'b'`, or `'p'` there is exactly one cell with `board[i][j] == 'r'`",
1000,Minimum Cost to Merge Stones,"There are `N` piles of stones arranged in a row.  The `i`-th pile has `stones[i]` stones.

A move consists of merging exactly `K` consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these `K` piles.

Find the minimum cost to merge all piles of stones into one pile.  If it is impossible, return `-1`.


Example 1:
Input: stones = [3,2,4,1], K = 2
Output: 20
Explanation: 
We start with [3, 2, 4, 1].

We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].

We merge [4, 1] for a cost of 5, and we are left with [5, 5].

We merge [5, 5] for a cost of 10, and we are left with [10].

The total cost was 20, and this is the minimum possible.


Example 2:
Input: stones = [3,2,4,1], K = 3
Output: -1
Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.


Example 3:
Input: stones = [3,5,1,2,6], K = 3
Output: 25
Explanation: 
We start with [3, 5, 1, 2, 6].

We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].

We merge [3, 8, 6] for a cost of 17, and we are left with [17].

The total cost was 25, and this is the minimum possible.

Note:
`1 <= stones.length <= 30`
`2 <= K <= 30`
`1 <= stones[i] <= 100`",Hard,https://leetcode.com/problems/minimum-cost-to-merge-stones,Amazon,Dynamic Programming,903,"[Burst Balloons, /problems/burst-balloons/, Hard], [Minimum Cost to Connect Sticks, /problems/minimum-cost-to-connect-sticks/, Medium]","there are `n` piles of stones arranged in a row. the `i`-th pile has `stones[i]` stones. a move consists of merging exactly `k` consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these `k` piles. find the minimum cost to merge all piles of stones into one pile. if it is impossible, return `-1`.","input: stones = [3,2,4,1], k = 2 output: 20 explanation: we start with [3, 2, 4, 1]. we merge [3, 2] for a cost of 5, and we are left with [5, 4, 1]. we merge [4, 1] for a cost of 5, and we are left with [5, 5]. we merge [5, 5] for a cost of 10, and we are left with [10]. the total cost was 20, and this is the minimum possible. example 2: input: stones = [3,2,4,1], k = 3 output: -1 explanation: after any merge operation, there are 2 piles left, and we can't merge anymore. so the task is impossible. example 3: input: stones = [3,5,1,2,6], k = 3 output: 25 explanation: we start with [3, 5, 1, 2, 6]. we merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6]. we merge [3, 8, 6] for a cost of 17, and we are left with [17]. the total cost was 25, and this is the minimum possible. note: `1 <= stones.length <= 30` `2 <= k <= 30` `1 <= stones[i] <= 100`",,
1001,Grid Illumination,"You are given a `grid` of size `N x N`, and each cell of this grid has a lamp that is initially turned off.

You are also given an array of lamp positions `lamps`, where `lamps[i] = [rowi, coli]` indicates that the lamp at `grid[rowi][coli]` is turned on. When a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.

Finally, you are given a query array `queries`, where `queries[i] = [rowi, coli]`. For the `ith` query, determine whether `grid[rowi][coli]` is illuminated or not. After answering the `ith` query, turn off the lamp at `grid[rowi][coli]` and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with `grid[rowi][coli]`.

Return an array of integers `ans`, where `ans[i]` should be `1` if the lamp in the `ith` query was illuminated, or `0` if the lamp was not.


Example 1:
Input: N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]
Output: [1,0]
Explanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].

The 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.

The 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.


Example 2:
Input: N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]
Output: [1,1]

Example 3:
Input: N = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]
Output: [1,1,0]

Constraints:
`1 <= N <= 109`
`0 <= lamps.length <= 20000`
`lamps[i].length == 2`
`0 <= lamps[i][j] < N`
`0 <= queries.length <= 20000`
`queries[i].length == 2`
`0 <= queries[i][j] < N`",Hard,https://leetcode.com/problems/grid-illumination,Dropbox,Hash Table,256,"[N-Queens, /problems/n-queens/, Hard]","you are given a `grid` of size `n x n`, and each cell of this grid has a lamp that is initially turned off. you are also given an array of lamp positions `lamps`, where `lamps[i] = [rowi, coli]` indicates that the lamp at `grid[rowi][coli]` is turned on. when a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal. finally, you are given a query array `queries`, where `queries[i] = [rowi, coli]`. for the `ith` query, determine whether `grid[rowi][coli]` is illuminated or not. after answering the `ith` query, turn off the lamp at `grid[rowi][coli]` and its 8 adjacent lamps if they exist. a lamp is adjacent if its cell shares either a side or corner with `grid[rowi][coli]`. return an array of integers `ans`, where `ans[i]` should be `1` if the lamp in the `ith` query was illuminated, or `0` if the lamp was not.","input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]] output: [1,0] explanation: we have the initial grid with all lamps turned off. in the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4]. the 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). it is illuminated, so set ans[0] = 1. then, we turn off all lamps in the red square. the 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). it is not illuminated, so set ans[1] = 0. then, we turn off all lamps in the red rectangle. example 2: input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]] output: [1,1] example 3: input: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]] output: [1,1,0]",`1 <= n <= 10^9` `0 <= lamps.length <= 20000` `lamps[i].length == 2` `0 <= lamps[i][j] < n` `0 <= queries.length <= 20000` `queries[i].length == 2` `0 <= queries[i][j] < n`,
1002,Find Common Characters,"Given an array `A` of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.

You may return the answer in any order.


Example 1:
Input: [""bella"",""label"",""roller""]
Output: [""e"",""l"",""l""]

Example 2:
Input: [""cool"",""lock"",""cook""]
Output: [""c"",""o""]
Note:
`1 <= A.length <= 100`
`1 <= A[i].length <= 100`
`A[i][j]` is a lowercase letter",Easy,https://leetcode.com/problems/find-common-characters,"Apple,Amazon","Array,Hash Table",1405,"[Intersection of Two Arrays II, /problems/intersection-of-two-arrays-ii/, Easy]","given an array `a` of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates). for example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer. you may return the answer in any order.","input: [""bella"",""label"",""roller""] output: [""e"",""l"",""l""] example 2: input: [""cool"",""lock"",""cook""] output: [""c"",""o""] note: `1 <= a.length <= 100` `1 <= a[i].length <= 100` `a[i][j]` is a lowercase letter",,
1003,Check If Word Is Valid After Substitutions,"Given a string `s`, determine if it is valid.

A string `s` is valid if, starting with an empty string `t = """"`, you can transform `t` into `s` after performing the following operation any number of times:
Insert string `""abc""` into any position in `t`. More formally, `t` becomes `tleft + ""abc"" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be empty.

Return `true` if `s` is a valid string, otherwise, return `false`.


Example 1:
Input: s = ""aabcbc""
Output: true
Explanation:
"""" -> ""abc"" -> ""aabcbc""
Thus, ""aabcbc"" is valid.


Example 2:
Input: s = ""abcabcababcc""
Output: true
Explanation:
"""" -> ""abc"" -> ""abcabc"" -> ""abcabcabc"" -> ""abcabcababcc""
Thus, ""abcabcababcc"" is valid.


Example 3:
Input: s = ""abccba""
Output: false
Explanation: It is impossible to get ""abccba"" using the operation.


Example 4:
Input: s = ""cababc""
Output: false
Explanation: It is impossible to get ""cababc"" using the operation.


Constraints:
`1 <= s.length <= 2 * 104`
`s` consists of letters `'a'`, `'b'`, and `'c'`",Medium,https://leetcode.com/problems/check-if-word-is-valid-after-substitutions,Nutanix,"String,Stack",331,"[Valid Parentheses, /problems/valid-parentheses/, Easy]","given a string `s`, determine if it is valid. a string `s` is valid if, starting with an empty string `t = """"`, you can transform `t` into `s` after performing the following operation any number of times: insert string `""abc""` into any position in `t`. more formally, `t` becomes `tleft + ""abc"" + tright`, where `t == tleft + tright`. note that `tleft` and `tright` may be empty. return `true` if `s` is a valid string, otherwise, return `false`.","input: s = ""aabcbc"" output: true explanation: """" -> ""abc"" -> ""aabcbc"" thus, ""aabcbc"" is valid. example 2: input: s = ""abcabcababcc"" output: true explanation: """" -> ""abc"" -> ""abcabc"" -> ""abcabcabc"" -> ""abcabcababcc"" thus, ""abcabcababcc"" is valid. example 3: input: s = ""abccba"" output: false explanation: it is impossible to get ""abccba"" using the operation. example 4: input: s = ""cababc"" output: false explanation: it is impossible to get ""cababc"" using the operation.","`1 <= s.length <= 2 * 10^4` `s` consists of letters `'a'`, `'b'`, and `'c'`",
1004,Max Consecutive Ones III,"Given an array `A` of 0s and 1s, we may change up to `K` values from 0 to 1.

Return the length of the longest (contiguous) subarray that contains only 1s. 

Example 1:
Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
Output: 6
Explanation: 
[1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.


Example 2:
Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3
Output: 10
Explanation: 
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.

Note:
`1 <= A.length <= 20000`
`0 <= K <= A.length`
`A[i]` is `0` or `1`",Medium,https://leetcode.com/problems/max-consecutive-ones-iii,"Facebook,Coupang,HBO","Two Pointers,Sliding Window",2020,"[Longest Substring with At Most K Distinct Characters, /problems/longest-substring-with-at-most-k-distinct-characters/, Medium], [Longest Repeating Character Replacement, /problems/longest-repeating-character-replacement/, Medium], [Max Consecutive Ones, /problems/max-consecutive-ones/, Easy], [Max Consecutive Ones II, /problems/max-consecutive-ones-ii/, Medium]","given an array `a` of 0s and 1s, we may change up to `k` values from 0 to 1. return the length of the longest (contiguous) subarray that contains only 1s.","input: a = [1,1,1,0,0,0,1,1,1,1,0], k = 2 output: 6 explanation: [1,1,1,0,0,1,1,1,1,1,1] bolded numbers were flipped from 0 to 1. the longest subarray is underlined. example 2: input: a = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3 output: 10 explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1] bolded numbers were flipped from 0 to 1. the longest subarray is underlined. note: `1 <= a.length <= 20000` `0 <= k <= a.length` `a[i]` is `0` or `1`",,
1005,Maximize Sum Of Array After K Negations,"Given an array `A` of integers, we must modify the array in the following way: we choose an `i` and replace `A[i]` with `-A[i]`, and we repeat this process `K` times in total.  (We may choose the same index `i` multiple times.)
Return the largest possible sum of the array after modifying it in this way.


Example 1:
Input: A = [4,2,3], K = 1
Output: 5
Explanation: Choose indices (1,) and A becomes [4,-2,3].


Example 2:
Input: A = [3,-1,0,2], K = 3
Output: 6
Explanation: Choose indices (1, 2, 2) and A becomes [3,1,0,2].


Example 3:
Input: A = [2,-3,-1,5,-4], K = 2
Output: 13
Explanation: Choose indices (1, 4) and A becomes [2,3,-1,5,4].

Note:
`1 <= A.length <= 10000`
`1 <= K <= 10000`
`-100 <= A[i] <= 100`",Easy,https://leetcode.com/problems/maximize-sum-of-array-after-k-negations,Amazon,Greedy,547,,"given an array `a` of integers, we must modify the array in the following way: we choose an `i` and replace `a[i]` with `-a[i]`, and we repeat this process `k` times in total. (we may choose the same index `i` multiple times.) return the largest possible sum of the array after modifying it in this way.","input: a = [4,2,3], k = 1 output: 5 explanation: choose indices (1,) and a becomes [4,-2,3]. example 2: input: a = [3,-1,0,2], k = 3 output: 6 explanation: choose indices (1, 2, 2) and a becomes [3,1,0,2]. example 3: input: a = [2,-3,-1,5,-4], k = 2 output: 13 explanation: choose indices (1, 4) and a becomes [2,3,-1,5,4]. note: `1 <= a.length <= 10000` `1 <= k <= 10000` `-100 <= a[i] <= 100`",,
1006,Clumsy Factorial,"Normally, the factorial of a positive integer `n` is the product of all positive integers less than or equal to `n`.  For example, `factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1`.

We instead make a clumsy factorial: using the integers in decreasing order, we swap out the multiply operations for a fixed rotation of operations: multiply (*), divide (/), add (+) and subtract (-) in this order.

For example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`.  However, these operations are still applied using the usual order of operations of arithmetic: we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.

Additionally, the division that we use is floor division such that `10 * 9 / 8` equals `11`.  This guarantees the result is an integer.

`Implement the clumsy` function as defined above: given an integer `N`, it returns the clumsy factorial of `N`.


Example 1:
Input: 4
Output: 7
Explanation: 7 = 4 * 3 / 2 + 1

Example 2:
Input: 10
Output: 12
Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
Note:
`1 <= N <= 10000`
`-2^31 <= answer <= 2^31 - 1`  (The answer is guaranteed to fit within a 32-bit integer.)",Medium,https://leetcode.com/problems/clumsy-factorial,Microsoft,Math,120,,"normally, the factorial of a positive integer `n` is the product of all positive integers less than or equal to `n`. for example, `factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1`. we instead make a clumsy factorial: using the integers in decreasing order, we swap out the multiply operations for a fixed rotation of operations: multiply (*), divide (/), add (+) and subtract (-) in this order. for example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`. however, these operations are still applied using the usual order of operations of arithmetic: we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right. additionally, the division that we use is floor division such that `10 * 9 / 8` equals `11`. this guarantees the result is an integer. `implement the clumsy` function as defined above: given an integer `n`, it returns the clumsy factorial of `n`.",input: 4 output: 7 explanation: 7 = 4 * 3 / 2 + 1 example 2: input: 10 output: 12 explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1 note: `1 <= n <= 10000` `-2^31 <= answer <= 2^31 - 1` (the answer is guaranteed to fit within a 32-bit integer.),,
1007,Minimum Domino Rotations For Equal Row,"In a row of dominoes, `A[i]` and `B[i]` represent the top and bottom halves of the `ith` domino.  (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)
We may rotate the `ith` domino, so that `A[i]` and `B[i]` swap values.

Return the minimum number of rotations so that all the values in `A` are the same, or all the values in `B` are the same.

If it cannot be done, return `-1`.


Example 1:
Input: A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]
Output: 2
Explanation: 
The first figure represents the dominoes as given by A and B: before we do any rotations.

If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.


Example 2:
Input: A = [3,5,1,2,3], B = [3,6,3,3,4]
Output: -1
Explanation: 
In this case, it is not possible to rotate the dominoes to make one row of values equal.


Constraints:
`2 <= A.length == B.length <= 2 * 104`
`1 <= A[i], B[i] <= 6`",Medium,https://leetcode.com/problems/minimum-domino-rotations-for-equal-row,Google,"Array,Greedy",1229,,"in a row of dominoes, `a[i]` and `b[i]` represent the top and bottom halves of the `ith` domino. (a domino is a tile with two numbers from 1 to 6 - one on each half of the tile.) we may rotate the `ith` domino, so that `a[i]` and `b[i]` swap values. return the minimum number of rotations so that all the values in `a` are the same, or all the values in `b` are the same. if it cannot be done, return `-1`.","input: a = [2,1,2,4,2,2], b = [5,2,6,2,3,2] output: 2 explanation: the first figure represents the dominoes as given by a and b: before we do any rotations. if we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure. example 2: input: a = [3,5,1,2,3], b = [3,6,3,3,4] output: -1 explanation: in this case, it is not possible to rotate the dominoes to make one row of values equal.","`2 <= a.length == b.length <= 2 * 10^4` `1 <= a[i], b[i] <= 6`",
1008,Construct Binary Search Tree from Preorder Traversal,"Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of `Node.left` has a value strictly less than `Node.val`, and any descendant of `Node.right` has a value strictly greater than `Node.val`.

A preorder traversal of a binary tree displays the value of the node first, then traverses `Node.left`, then traverses `Node.right`.


Example 1:
Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

Example 2:
Input: preorder = [1,3]
Output: [1,null,3]

Constraints:
`1 <= preorder.length <= 100`
`1 <= preorder[i] <= 108`
All the values of `preorder` are unique.",Medium,https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal,"Amazon,Oracle",Tree,1798,,"given an array of integers preorder, which represents the preorder traversal of a bst (i.e., binary search tree), construct the tree and return its root. it is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases. a binary search tree is a binary tree where for every node, any descendant of `node.left` has a value strictly less than `node.val`, and any descendant of `node.right` has a value strictly greater than `node.val`. a preorder traversal of a binary tree displays the value of the node first, then traverses `node.left`, then traverses `node.right`.","input: preorder = [8,5,1,7,10,12] output: [8,5,10,1,7,null,12] example 2: input: preorder = [1,3] output: [1,null,3]",`1 <= preorder.length <= 10^0` `1 <= preorder[i] <= 10^8` all the values of `preorder` are unique.,
1009,Complement of Base 10 Integer,"Every non-negative integer `N` has a binary representation.  For example, `5` can be represented as `""101""` in binary, `11` as `""1011""` in binary, and so on.  Note that except for `N = 0`, there are no leading zeroes in any binary representation.

The complement of a binary representation is the number in binary you get when changing every `1` to a `0` and `0` to a `1`.  For example, the complement of `""101""` in binary is `""010""` in binary.

For a given number `N` in base-10, return the complement of it's binary representation as a base-10 integer.


Example 1:
Input: 5
Output: 2
Explanation: 5 is ""101"" in binary, with complement ""010"" in binary, which is 2 in base-10.


Example 2:
Input: 7
Output: 0
Explanation: 7 is ""111"" in binary, with complement ""000"" in binary, which is 0 in base-10.


Example 3:
Input: 10
Output: 5
Explanation: 10 is ""1010"" in binary, with complement ""0101"" in binary, which is 5 in base-10.

Note:
`0 <= N < 10^9`
This question is the same as 476: https://leetcode.com/problems/number-complement/",Easy,https://leetcode.com/problems/complement-of-base-10-integer,Cloudera,Math,437,,"every non-negative integer `n` has a binary representation. for example, `5` can be represented as `""101""` in binary, `11` as `""1011""` in binary, and so on. note that except for `n = 0`, there are no leading zeroes in any binary representation. the complement of a binary representation is the number in binary you get when changing every `1` to a `0` and `0` to a `1`. for example, the complement of `""101""` in binary is `""010""` in binary. for a given number `n` in base-10, return the complement of it's binary representation as a base-10 integer.","input: 5 output: 2 explanation: 5 is ""101"" in binary, with complement ""010"" in binary, which is 2 in base-10. example 2: input: 7 output: 0 explanation: 7 is ""111"" in binary, with complement ""000"" in binary, which is 0 in base-10. example 3: input: 10 output: 5 explanation: 10 is ""1010"" in binary, with complement ""0101"" in binary, which is 5 in base-10. note: `0 <= n < 10^9` this question is the same as 476: https://leetcode.com/problems/number-complement/",,
1010,Pairs of Songs With Total Durations Divisible by 60,"You are given a list of songs where the ith song has a duration of `time[i]` seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.


Example 1:
Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60

Example 2:
Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.


Constraints:
`1 <= time.length <= 6 * 104`
`1 <= time[i] <= 500`",Medium,https://leetcode.com/problems/pairs-of-songs-with-total-durations-divisible-by-60,"Amazon,Citrix,IBM,Paypal,BlackRock",Array,1328,,"you are given a list of songs where the ith song has a duration of `time[i]` seconds. return the number of pairs of songs for which their total duration in seconds is divisible by `60`. formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.","input: time = [30,20,150,100,40] output: 3 explanation: three pairs have a total duration divisible by 60: (time[0] = 30, time[2] = 150): total duration 180 (time[1] = 20, time[3] = 100): total duration 120 (time[1] = 20, time[4] = 40): total duration 60 example 2: input: time = [60,60,60] output: 3 explanation: all three pairs have a total duration of 120, which is divisible by 60.",`1 <= time.length <= 6 * 10^4` `1 <= time[i] <= 500`,
1011,Capacity To Ship Packages Within D Days,"A conveyor belt has packages that must be shipped from one port to another within `D` days.

The ith package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `D` days.


Example 1:
Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10
Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.


Example 2:
Input: weights = [3,2,2,4,1,4], D = 3
Output: 6
Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:
1st day: 3, 2
2nd day: 2, 4
3rd day: 1, 4

Example 3:
Input: weights = [1,2,3,1,1], D = 4
Output: 3
Explanation:
1st day: 1
2nd day: 2
3rd day: 3
4th day: 1, 1

Constraints:
`1 <= D <= weights.length <= 5 * 104`
`1 <= weights[i] <= 500`",Medium,https://leetcode.com/problems/capacity-to-ship-packages-within-d-days,"Amazon,Flipkart","Array,Binary Search",1958,,"a conveyor belt has packages that must be shipped from one port to another within `d` days. the ith package on the conveyor belt has a weight of `weights[i]`. each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). we may not load more weight than the maximum weight capacity of the ship. return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `d` days.","input: weights = [1,2,3,4,5,6,7,8,9,10], d = 5 output: 15 explanation: a ship capacity of 15 is the minimum to ship all the packages in 5 days like this: 1st day: 1, 2, 3, 4, 5 2nd day: 6, 7 3rd day: 8 4th day: 9 5th day: 10 note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. example 2: input: weights = [3,2,2,4,1,4], d = 3 output: 6 explanation: a ship capacity of 6 is the minimum to ship all the packages in 3 days like this: 1st day: 3, 2 2nd day: 2, 4 3rd day: 1, 4 example 3: input: weights = [1,2,3,1,1], d = 4 output: 3 explanation: 1st day: 1 2nd day: 2 3rd day: 3 4th day: 1, 1",`1 <= d <= weights.length <= 5 * 10^4` `1 <= weights[i] <= 500`,
1012,Numbers With Repeated Digits,"Given a positive integer `N`, return the number of positive integers less than or equal to `N` that have at least 1 repeated digit.


Example 1:
Input: 20
Output: 1
Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11.


Example 2:
Input: 100
Output: 10
Explanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.


Example 3:
Input: 1000
Output: 262
Note:
`1 <= N <= 10^9`",Hard,https://leetcode.com/problems/numbers-with-repeated-digits,"Akuna Capital,IBM","Math,Dynamic Programming",281,,"given a positive integer `n`, return the number of positive integers less than or equal to `n` that have at least 1 repeated digit.","input: 20 output: 1 explanation: the only positive number (<= 20) with at least 1 repeated digit is 11. example 2: input: 100 output: 10 explanation: the positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100. example 3: input: 1000 output: 262 note: `1 <= n <= 10^9`",,
1013,Partition Array Into Three Parts With Equal Sum,"Given an array of integers `arr`, return `true` if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`

Example 1:
Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]
Output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1

Example 2:
Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]
Output: false

Example 3:
Input: arr = [3,3,6,5,-2,2,5,1,-9,4]
Output: true
Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4

Constraints:
`3 <= arr.length <= 5 * 104`
`-104 <= arr[i] <= 104`",Easy,https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum,"Amazon,Adobe",Array,659,,"given an array of integers `arr`, return `true` if we can partition the array into three non-empty parts with equal sums. formally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`","input: arr = [0,2,1,-6,6,-7,9,1,2,0,1] output: true explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1 example 2: input: arr = [0,2,1,-6,6,7,9,-1,2,0,1] output: false example 3: input: arr = [3,3,6,5,-2,2,5,1,-9,4] output: true explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4",`3 <= arr.length <= 5 * 10^4` `-10^4 <= arr[i] <= 10^4`,
1014,Best Sightseeing Pair,"You are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a distance `j - i` between them.

The score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.

Return the maximum score of a pair of sightseeing spots.


Example 1:
Input: values = [8,1,5,2,6]
Output: 11
Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11

Example 2:
Input: values = [1,2]
Output: 2

Constraints:
`2 <= values.length <= 5 * 104`
`1 <= values[i] <= 1000`",Medium,https://leetcode.com/problems/best-sightseeing-pair,Wayfair,Array,605,,"you are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. two sightseeing spots `i` and `j` have a distance `j - i` between them. the score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them. return the maximum score of a pair of sightseeing spots.","input: values = [8,1,5,2,6] output: 11 explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11 example 2: input: values = [1,2] output: 2",`2 <= values.length <= 5 * 10^4` `1 <= values[i] <= 1000`,
1015,Smallest Integer Divisible by K,"Given a positive integer `K`, you need to find the length of the smallest positive integer `N` such that `N` is divisible by `K`, and `N` only contains the digit `1`.

Return the length of `N`. If there is no such `N`, return -1.

Note: `N` may not fit in a 64-bit signed integer.


Example 1:
Input: K = 1
Output: 1
Explanation: The smallest answer is N = 1, which has length 1.


Example 2:
Input: K = 2
Output: -1
Explanation: There is no such positive integer N divisible by 2.


Example 3:
Input: K = 3
Output: 3
Explanation: The smallest answer is N = 111, which has length 3.


Constraints:
`1 <= K <= 105`",Medium,https://leetcode.com/problems/smallest-integer-divisible-by-k,Google,Math,365,,"given a positive integer `k`, you need to find the length of the smallest positive integer `n` such that `n` is divisible by `k`, and `n` only contains the digit `1`. return the length of `n`. if there is no such `n`, return -1. note: `n` may not fit in a 64-bit signed integer.","input: k = 1 output: 1 explanation: the smallest answer is n = 1, which has length 1. example 2: input: k = 2 output: -1 explanation: there is no such positive integer n divisible by 2. example 3: input: k = 3 output: 3 explanation: the smallest answer is n = 111, which has length 3.",`1 <= k <= 10^5`,
1016,Binary String With Substrings Representing 1 To N,"Given a binary string `S` (a string consisting only of '0' and '1's) and a positive integer `N`, return true if and only if for every integer X from 1 to N, the binary representation of X is a substring of S.


Example 1:
Input: S = ""0110"", N = 3
Output: true

Example 2:
Input: S = ""0110"", N = 4
Output: false
Note:
`1 <= S.length <= 1000`
`1 <= N <= 10^9`",Medium,https://leetcode.com/problems/binary-string-with-substrings-representing-1-to-n,Google,String,162,,"given a binary string `s` (a string consisting only of '0' and '1's) and a positive integer `n`, return true if and only if for every integer x from 1 to n, the binary representation of x is a substring of s.","input: s = ""0110"", n = 3 output: true example 2: input: s = ""0110"", n = 4 output: false note: `1 <= s.length <= 1000` `1 <= n <= 10^9`",,
1017,Convert to Base -2,"Given a number `N`, return a string consisting of `""0""`s and `""1""`s that represents its value in base `-2` (negative two).

The returned string must have no leading zeroes, unless the string is `""0""`.


Example 1:
Input: 2
Output: ""110""
Explantion: (-2) ^ 2 + (-2) ^ 1 = 2

Example 2:
Input: 3
Output: ""111""
Explantion: (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3

Example 3:
Input: 4
Output: ""100""
Explantion: (-2) ^ 2 = 4
Note:
`0 <= N <= 10^9`",Medium,https://leetcode.com/problems/convert-to-base-2,Grab,Math,236,"[Encode Number, /problems/encode-number/, Medium]","given a number `n`, return a string consisting of `""0""`s and `""1""`s that represents its value in base `-2` (negative two). the returned string must have no leading zeroes, unless the string is `""0""`.","input: 2 output: ""110"" explantion: (-2) ^ 2 + (-2) ^ 1 = 2 example 2: input: 3 output: ""111"" explantion: (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3 example 3: input: 4 output: ""100"" explantion: (-2) ^ 2 = 4 note: `0 <= n <= 10^9`",,
1018,Binary Prefix Divisible By 5,"Given an array `A` of `0`s and `1`s, consider `N_i`: the i-th subarray from `A[0]` to `A[i]` interpreted as a binary number (from most-significant-bit to least-significant-bit.)
Return a list of booleans `answer`, where `answer[i]` is `true` if and only if `N_i` is divisible by 5.


Example 1:
Input: [0,1,1]
Output: [true,false,false]
Explanation: 
The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.  Only the first number is divisible by 5, so answer[0] is true.


Example 2:
Input: [1,1,1]
Output: [false,false,false]

Example 3:
Input: [0,1,1,1,1,1]
Output: [true,false,false,false,true,false]

Example 4:
Input: [1,1,1,0,1]
Output: [false,false,false,false,false]
Note:
`1 <= A.length <= 30000`
`A[i]` is `0` or `1`",Easy,https://leetcode.com/problems/binary-prefix-divisible-by-5,,,363,,"given an array `a` of `0`s and `1`s, consider `n_i`: the i-th subarray from `a[0]` to `a[i]` interpreted as a binary number (from most-significant-bit to least-significant-bit.) return a list of booleans `answer`, where `answer[i]` is `true` if and only if `n_i` is divisible by 5.","input: [0,1,1] output: [true,false,false] explanation: the input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10. only the first number is divisible by 5, so answer[0] is true. example 2: input: [1,1,1] output: [false,false,false] example 3: input: [0,1,1,1,1,1] output: [true,false,false,false,true,false] example 4: input: [1,1,1,0,1] output: [false,false,false,false,false] note: `1 <= a.length <= 30000` `a[i]` is `0` or `1`",,
1019,Next Greater Node In Linked List,"We are given a linked list with `head` as the first node.  Let's number the nodes in the list: `node_1, node_2, node_3, ...` etc.

Each node may have a next larger value: for `node_i`, `next_larger(node_i)` is the `node_j.val` such that `j > i`, `node_j.val > node_i.val`, and `j` is the smallest possible choice.  If such a `j` does not exist, the next larger value is `0`.

Return an array of integers `answer`, where `answer[i] = next_larger(node_{i+1})`.

Note that in the example inputs (not outputs) below, arrays such as `[2,1,5]` represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.


Example 1:
Input: [2,1,5]
Output: [5,5,0]

Example 2:
Input: [2,7,4,3,5]
Output: [7,0,5,5,0]

Example 3:
Input: [1,7,5,1,9,2,5,1]
Output: [7,9,9,9,0,5,0,0]
Note:
`1 <= node.val <= 10^9` for each node in the linked list.

The given list has length in the range `[0, 10000]`.",Medium,https://leetcode.com/problems/next-greater-node-in-linked-list,"Amazon,Google,Facebook","Linked List,Stack",1289,,"we are given a linked list with `head` as the first node. let's number the nodes in the list: `node_1, node_2, node_3, ...` etc. each node may have a next larger value: for `node_i`, `next_larger(node_i)` is the `node_j.val` such that `j > i`, `node_j.val > node_i.val`, and `j` is the smallest possible choice. if such a `j` does not exist, the next larger value is `0`. return an array of integers `answer`, where `answer[i] = next_larger(node_{i+1})`. note that in the example inputs (not outputs) below, arrays such as `[2,1,5]` represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.","input: [2,1,5] output: [5,5,0] example 2: input: [2,7,4,3,5] output: [7,0,5,5,0] example 3: input: [1,7,5,1,9,2,5,1] output: [7,9,9,9,0,5,0,0] note: `1 <= node.val <= 10^9` for each node in the linked list. the given list has length in the range `[0, 10000]`.",,
1020,Number of Enclaves,"You are given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell.

A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the `grid`.

Return the number of land cells in `grid` for which we cannot walk off the boundary of the grid in any number of moves.


Example 1:
Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
Output: 3
Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.


Example 2:
Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
Output: 0
Explanation: All 1s are either on the boundary or can reach the boundary.


Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 500`
`grid[i][j]` is either `0` or `1`.",Medium,https://leetcode.com/problems/number-of-enclaves,Google,Depth-first Search,488,,"you are given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell. a move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the `grid`. return the number of land cells in `grid` for which we cannot walk off the boundary of the grid in any number of moves.","input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]] output: 3 explanation: there are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary. example 2: input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]] output: 0 explanation: all 1s are either on the boundary or can reach the boundary.","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 500` `grid[i][j]` is either `0` or `1`.",
1021,Remove Outermost Parentheses,"A valid parentheses string is either empty `("""")`, `""("" + A + "")""`, or `A + B`, where `A` and `B` are valid parentheses strings, and `+` represents string concatenation.  For example, `""""`, `""()""`, `""(())()""`, and `""(()(()))""` are all valid parentheses strings.

A valid parentheses string `S` is primitive if it is nonempty, and there does not exist a way to split it into `S = A+B`, with `A` and `B` nonempty valid parentheses strings.

Given a valid parentheses string `S`, consider its primitive decomposition: `S = P_1 + P_2 + ... + P_k`, where `P_i` are primitive valid parentheses strings.

Return `S` after removing the outermost parentheses of every primitive string in the primitive decomposition of `S`.


Example 1:
Input: ""(()())(())""
Output: ""()()()""
Explanation: 
The input string is ""(()())(())"", with primitive decomposition ""(()())"" + ""(())"".

After removing outer parentheses of each part, this is ""()()"" + ""()"" = ""()()()"".


Example 2:
Input: ""(()())(())(()(()))""
Output: ""()()()()(())""
Explanation: 
The input string is ""(()())(())(()(()))"", with primitive decomposition ""(()())"" + ""(())"" + ""(()(()))"".

After removing outer parentheses of each part, this is ""()()"" + ""()"" + ""()(())"" = ""()()()()(())"".


Example 3:
Input: ""()()""
Output: """"
Explanation: 
The input string is ""()()"", with primitive decomposition ""()"" + ""()"".

After removing outer parentheses of each part, this is """" + """" = """".

Note:
`S.length <= 10000`
`S[i]` is `""(""` or `"")""`
`S` is a valid parentheses string",Easy,https://leetcode.com/problems/remove-outermost-parentheses,Google,Stack,777,,"a valid parentheses string is either empty `("""")`, `""("" + a + "")""`, or `a + b`, where `a` and `b` are valid parentheses strings, and `+` represents string concatenation. for example, `""""`, `""()""`, `""(())()""`, and `""(()(()))""` are all valid parentheses strings. a valid parentheses string `s` is primitive if it is nonempty, and there does not exist a way to split it into `s = a+b`, with `a` and `b` nonempty valid parentheses strings. given a valid parentheses string `s`, consider its primitive decomposition: `s = p_1 + p_2 + ... + p_k`, where `p_i` are primitive valid parentheses strings. return `s` after removing the outermost parentheses of every primitive string in the primitive decomposition of `s`.","input: ""(()())(())"" output: ""()()()"" explanation: the input string is ""(()())(())"", with primitive decomposition ""(()())"" + ""(())"". after removing outer parentheses of each part, this is ""()()"" + ""()"" = ""()()()"". example 2: input: ""(()())(())(()(()))"" output: ""()()()()(())"" explanation: the input string is ""(()())(())(()(()))"", with primitive decomposition ""(()())"" + ""(())"" + ""(()(()))"". after removing outer parentheses of each part, this is ""()()"" + ""()"" + ""()(())"" = ""()()()()(())"". example 3: input: ""()()"" output: """" explanation: the input string is ""()()"", with primitive decomposition ""()"" + ""()"". after removing outer parentheses of each part, this is """" + """" = """". note: `s.length <= 10000` `s[i]` is `""(""` or `"")""` `s` is a valid parentheses string",,
1022,Sum of Root To Leaf Binary Numbers,"You are given the `root` of a binary tree where each node has a value `0` or `1`.  Each root-to-leaf path represents a binary number starting with the most significant bit.  For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`.

For all leaves in the tree, consider the numbers represented by the path from the root to that leaf.

Return the sum of these numbers. The answer is guaranteed to fit in a 32-bits integer.


Example 1:
Input: root = [1,0,1,0,1,0,1]
Output: 22
Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

Example 2:
Input: root = [0]
Output: 0

Example 3:
Input: root = [1]
Output: 1

Example 4:
Input: root = [1,1]
Output: 3

Constraints:
The number of nodes in the tree is in the range `[1, 1000]`.

`Node.val` is `0` or `1`.",Easy,https://leetcode.com/problems/sum-of-root-to-leaf-binary-numbers,Amazon,Tree,1131,,"you are given the `root` of a binary tree where each node has a value `0` or `1`. each root-to-leaf path represents a binary number starting with the most significant bit. for example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`. for all leaves in the tree, consider the numbers represented by the path from the root to that leaf. return the sum of these numbers. the answer is guaranteed to fit in a 32-bits integer.","input: root = [1,0,1,0,1,0,1] output: 22 explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22 example 2: input: root = [0] output: 0 example 3: input: root = [1] output: 1 example 4: input: root = [1,1] output: 3","the number of nodes in the tree is in the range `[1, 1000]`. `node.val` is `0` or `1`.",
1023,Camelcase Matching,"A query word matches a given `pattern` if we can insert lowercase letters to the pattern word so that it equals the `query`. (We may insert each character at any position, and may insert 0 characters.)
Given a list of `queries`, and a `pattern`, return an `answer` list of booleans, where `answer[i]` is true if and only if `queries[i]` matches the `pattern`.


Example 1:
Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FB""
Output: [true,false,true,true,false]
Explanation: 
""FooBar"" can be generated like this ""F"" + ""oo"" + ""B"" + ""ar"".

""FootBall"" can be generated like this ""F"" + ""oot"" + ""B"" + ""all"".

""FrameBuffer"" can be generated like this ""F"" + ""rame"" + ""B"" + ""uffer"".


Example 2:
Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FoBa""
Output: [true,false,true,false,false]
Explanation: 
""FooBar"" can be generated like this ""Fo"" + ""o"" + ""Ba"" + ""r"".

""FootBall"" can be generated like this ""Fo"" + ""ot"" + ""Ba"" + ""ll"".


Example 3:
Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FoBaT""
Output: [false,true,false,false,false]
Explanation: 
""FooBarTest"" can be generated like this ""Fo"" + ""o"" + ""Ba"" + ""r"" + ""T"" + ""est"".

Note:
`1 <= queries.length <= 100`
`1 <= queries[i].length <= 100`
`1 <= pattern.length <= 100`
All strings consists only of lower and upper case English letters.",Medium,https://leetcode.com/problems/camelcase-matching,"Amazon,Google","String,Trie",335,,"a query word matches a given `pattern` if we can insert lowercase letters to the pattern word so that it equals the `query`. (we may insert each character at any position, and may insert 0 characters.) given a list of `queries`, and a `pattern`, return an `answer` list of booleans, where `answer[i]` is true if and only if `queries[i]` matches the `pattern`.","input: queries = [""foobar"",""foobartest"",""football"",""framebuffer"",""forcefeedback""], pattern = ""fb"" output: [true,false,true,true,false] explanation: ""foobar"" can be generated like this ""f"" + ""oo"" + ""b"" + ""ar"". ""football"" can be generated like this ""f"" + ""oot"" + ""b"" + ""all"". ""framebuffer"" can be generated like this ""f"" + ""rame"" + ""b"" + ""uffer"". example 2: input: queries = [""foobar"",""foobartest"",""football"",""framebuffer"",""forcefeedback""], pattern = ""foba"" output: [true,false,true,false,false] explanation: ""foobar"" can be generated like this ""fo"" + ""o"" + ""ba"" + ""r"". ""football"" can be generated like this ""fo"" + ""ot"" + ""ba"" + ""ll"". example 3: input: queries = [""foobar"",""foobartest"",""football"",""framebuffer"",""forcefeedback""], pattern = ""fobat"" output: [false,true,false,false,false] explanation: ""foobartest"" can be generated like this ""fo"" + ""o"" + ""ba"" + ""r"" + ""t"" + ""est"". note: `1 <= queries.length <= 100` `1 <= queries[i].length <= 100` `1 <= pattern.length <= 100` all strings consists only of lower and upper case english letters.",,
1024,Video Stitching,"You are given a series of video clips from a sporting event that lasted `T` seconds.  These video clips can be overlapping with each other and have varied lengths.

Each video clip `clips[i]` is an interval: it starts at time `clips[i][0]` and ends at time `clips[i][1]`.  We can cut these clips into segments freely: for example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`.

Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event (`[0, T]`).  If the task is impossible, return `-1`.


Example 1:
Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10
Output: 3
Explanation: 
We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.

Then, we can reconstruct the sporting event as follows:
We cut [1,9] into segments [1,2] + [2,8] + [8,9].

Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].


Example 2:
Input: clips = [[0,1],[1,2]], T = 5
Output: -1
Explanation: 
We can't cover [0,5] with only [0,1] and [1,2].


Example 3:
Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9
Output: 3
Explanation: 
We can take clips [0,4], [4,7], and [6,9].


Example 4:
Input: clips = [[0,4],[2,8]], T = 5
Output: 2
Explanation: 
Notice you can have extra video after the event ends.


Constraints:
`1 <= clips.length <= 100`
`0 <= clips[i][0] <= clips[i][1] <= 100`
`0 <= T <= 100`",Medium,https://leetcode.com/problems/video-stitching,Amazon,Dynamic Programming,706,,"you are given a series of video clips from a sporting event that lasted `t` seconds. these video clips can be overlapping with each other and have varied lengths. each video clip `clips[i]` is an interval: it starts at time `clips[i][0]` and ends at time `clips[i][1]`. we can cut these clips into segments freely: for example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`. return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event (`[0, t]`). if the task is impossible, return `-1`.","input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], t = 10 output: 3 explanation: we take the clips [0,2], [8,10], [1,9]; a total of 3 clips. then, we can reconstruct the sporting event as follows: we cut [1,9] into segments [1,2] + [2,8] + [8,9]. now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10]. example 2: input: clips = [[0,1],[1,2]], t = 5 output: -1 explanation: we can't cover [0,5] with only [0,1] and [1,2]. example 3: input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], t = 9 output: 3 explanation: we can take clips [0,4], [4,7], and [6,9]. example 4: input: clips = [[0,4],[2,8]], t = 5 output: 2 explanation: notice you can have extra video after the event ends.",`1 <= clips.length <= 10^0` `0 <= clips[i][0] <= clips[i][1] <= 10^0` `0 <= t <= 10^0`,
1025,Divisor Game,"Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:
Choosing any `x` with `0 < x < n` and `n % x == 0`.

Replacing the number `n` on the chalkboard with `n - x`.

Also, if a player cannot make a move, they lose the game.

Return `true` if and only if Alice wins the game, assuming both players play optimally.


Example 1:
Input: n = 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.


Example 2:
Input: n = 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.


Constraints:
`1 <= n <= 1000`",Easy,https://leetcode.com/problems/divisor-game,"Adobe,Bloomberg,Amazon","Math,Dynamic Programming",742,,"alice and bob take turns playing a game, with alice starting first. initially, there is a number `n` on the chalkboard. on each player's turn, that player makes a move consisting of: choosing any `x` with `0 < x < n` and `n % x == 0`. replacing the number `n` on the chalkboard with `n - x`. also, if a player cannot make a move, they lose the game. return `true` if and only if alice wins the game, assuming both players play optimally.","input: n = 2 output: true explanation: alice chooses 1, and bob has no more moves. example 2: input: n = 3 output: false explanation: alice chooses 1, bob chooses 1, and alice has no more moves.",`1 <= n <= 1000`,
1026,Maximum Difference Between Node and Ancestor,"Given the `root` of a binary tree, find the maximum value `V` for which there exist different nodes `A` and `B` where `V = |A.val - B.val|` and `A` is an ancestor of `B`.

A node `A` is an ancestor of `B` if either: any child of `A` is equal to `B`, or any child of `A` is an ancestor of `B`.


Example 1:
Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.


Example 2:
Input: root = [1,null,2,null,0,3]
Output: 3

Constraints:
The number of nodes in the tree is in the range `[2, 5000]`.

`0 <= Node.val <= 105`",Medium,https://leetcode.com/problems/maximum-difference-between-node-and-ancestor,Facebook,"Tree,Depth-first Search",1192,,"given the `root` of a binary tree, find the maximum value `v` for which there exist different nodes `a` and `b` where `v = |a.val - b.val|` and `a` is an ancestor of `b`. a node `a` is an ancestor of `b` if either: any child of `a` is equal to `b`, or any child of `a` is an ancestor of `b`.","input: root = [8,3,10,1,6,null,14,null,null,4,7,13] output: 7 explanation: we have various ancestor-node differences, some of which are given below : |8 - 3| = 5 |3 - 7| = 4 |8 - 1| = 7 |10 - 13| = 3 among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7. example 2: input: root = [1,null,2,null,0,3] output: 3","the number of nodes in the tree is in the range `[2, 5000]`. `0 <= node.val <= 10^5`",
1027,Longest Arithmetic Subsequence,"Given an array `A` of integers, return the length of the longest arithmetic subsequence in `A`.

Recall that a subsequence of `A` is a list `A[i_1], A[i_2], ..., A[i_k]` with `0 <= i_1 < i_2 < ... < i_k <= A.length - 1`, and that a sequence `B` is arithmetic if `B[i+1] - B[i]` are all the same value (for `0 <= i < B.length - 1`).


Example 1:
Input: A = [3,6,9,12]
Output: 4
Explanation: 
The whole array is an arithmetic sequence with steps of length = 3.


Example 2:
Input: A = [9,4,7,2,10]
Output: 3
Explanation: 
The longest arithmetic subsequence is [4,7,10].


Example 3:
Input: A = [20,1,15,3,10,5,8]
Output: 4
Explanation: 
The longest arithmetic subsequence is [20,15,10,5].


Constraints:
`2 <= A.length <= 1000`
`0 <= A[i] <= 500`",Medium,https://leetcode.com/problems/longest-arithmetic-subsequence,"eBay,C3 IoT,Google,Facebook,Uber",Dynamic Programming,1226,,"given an array `a` of integers, return the length of the longest arithmetic subsequence in `a`. recall that a subsequence of `a` is a list `a[i_1], a[i_2], ..., a[i_k]` with `0 <= i_1 < i_2 < ... < i_k <= a.length - 1`, and that a sequence `b` is arithmetic if `b[i+1] - b[i]` are all the same value (for `0 <= i < b.length - 1`).","input: a = [3,6,9,12] output: 4 explanation: the whole array is an arithmetic sequence with steps of length = 3. example 2: input: a = [9,4,7,2,10] output: 3 explanation: the longest arithmetic subsequence is [4,7,10]. example 3: input: a = [20,1,15,3,10,5,8] output: 4 explanation: the longest arithmetic subsequence is [20,15,10,5].",`2 <= a.length <= 1000` `0 <= a[i] <= 500`,
1028,Recover a Tree From Preorder Traversal,"We run a preorder depth-first search (DFS) on the `root` of a binary tree.

At each node in this traversal, we output `D` dashes (where `D` is the depth of this node), then we output the value of this node.  If the depth of a node is `D`, the depth of its immediate child is `D + 1`.  The depth of the `root` node is `0`.

If a node has only one child, that child is guaranteed to be the left child.

Given the output `S` of this traversal, recover the tree and return its `root`.


Example 1:
Input: S = ""1-2--3--4-5--6--7""
Output: [1,2,5,3,4,6,7]

Example 2:
Input: S = ""1-2--3---4-5--6---7""
Output: [1,2,5,3,null,6,null,4,null,7]

Example 3:
Input: S = ""1-401--349---90--88""
Output: [1,401,null,349,88,90]

Constraints:
The number of nodes in the original tree is in the range `[1, 1000]`.

`1 <= Node.val <= 109`",Hard,https://leetcode.com/problems/recover-a-tree-from-preorder-traversal,"Amazon,LinkedIn","Tree,Depth-first Search",633,,"we run a preorder depth-first search (dfs) on the `root` of a binary tree. at each node in this traversal, we output `d` dashes (where `d` is the depth of this node), then we output the value of this node. if the depth of a node is `d`, the depth of its immediate child is `d + 1`. the depth of the `root` node is `0`. if a node has only one child, that child is guaranteed to be the left child. given the output `s` of this traversal, recover the tree and return its `root`.","input: s = ""1-2--3--4-5--6--7"" output: [1,2,5,3,4,6,7] example 2: input: s = ""1-2--3---4-5--6---7"" output: [1,2,5,3,null,6,null,4,null,7] example 3: input: s = ""1-401--349---90--88"" output: [1,401,null,349,88,90]","the number of nodes in the original tree is in the range `[1, 1000]`. `1 <= node.val <= 10^9`",
1029,Two City Scheduling,"A company is planning to interview `2n` people. Given the array `costs` where `costs[i] = [aCosti, bCosti]`, the cost of flying the `ith` person to city `a` is `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`.

Return the minimum cost to fly every person to a city such that exactly `n` people arrive in each city.


Example 1:
Input: costs = [[10,20],[30,200],[400,50],[30,20]]
Output: 110
Explanation: 
The first person goes to city A for a cost of 10.

The second person goes to city A for a cost of 30.

The third person goes to city B for a cost of 50.

The fourth person goes to city B for a cost of 20.

The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.


Example 2:
Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
Output: 1859

Example 3:
Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
Output: 3086

Constraints:
`2 * n == costs.length`
`2 <= costs.length <= 100`
`costs.length` is even.

`1 <= aCosti, bCosti <= 1000`",Medium,https://leetcode.com/problems/two-city-scheduling,Bloomberg,Greedy,1823,,"a company is planning to interview `2n` people. given the array `costs` where `costs[i] = [acosti, bcosti]`, the cost of flying the `ith` person to city `a` is `acosti`, and the cost of flying the `ith` person to city `b` is `bcosti`. return the minimum cost to fly every person to a city such that exactly `n` people arrive in each city.","input: costs = [[10,20],[30,200],[400,50],[30,20]] output: 110 explanation: the first person goes to city a for a cost of 10. the second person goes to city a for a cost of 30. the third person goes to city b for a cost of 50. the fourth person goes to city b for a cost of 20. the total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city. example 2: input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]] output: 1859 example 3: input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]] output: 3086","`2 * n == costs.length` `2 <= costs.length <= 10^0` `costs.length` is even. `1 <= acosti, bcosti <= 1000`",
1030,Matrix Cells in Distance Order,"We are given a matrix with `R` rows and `C` columns has cells with integer coordinates `(r, c)`, where `0 <= r < R` and `0 <= c < C`.

Additionally, we are given a cell in that matrix with coordinates `(r0, c0)`.

Return the coordinates of all cells in the matrix, sorted by their distance from `(r0, c0)` from smallest distance to largest distance.  Here, the distance between two cells `(r1, c1)` and `(r2, c2)` is the Manhattan distance, `|r1 - r2| + |c1 - c2|`.  (You may return the answer in any order that satisfies this condition.)

Example 1:
Input: R = 1, C = 2, r0 = 0, c0 = 0
Output: [[0,0],[0,1]]
Explanation: The distances from (r0, c0) to other cells are: [0,1]

Example 2:
Input: R = 2, C = 2, r0 = 0, c0 = 1
Output: [[0,1],[0,0],[1,1],[1,0]]
Explanation: The distances from (r0, c0) to other cells are: [0,1,1,2]
The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.


Example 3:
Input: R = 2, C = 3, r0 = 1, c0 = 2
Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
Explanation: The distances from (r0, c0) to other cells are: [0,1,1,2,2,3]
There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].

Note:
`1 <= R <= 100`
`1 <= C <= 100`
`0 <= r0 < R`
`0 <= c0 < C`",Easy,https://leetcode.com/problems/matrix-cells-in-distance-order,Yahoo,Sort,289,,"we are given a matrix with `r` rows and `c` columns has cells with integer coordinates `(r, c)`, where `0 <= r < r` and `0 <= c < c`. additionally, we are given a cell in that matrix with coordinates `(r0, c0)`. return the coordinates of all cells in the matrix, sorted by their distance from `(r0, c0)` from smallest distance to largest distance. here, the distance between two cells `(r1, c1)` and `(r2, c2)` is the manhattan distance, `|r1 - r2| + |c1 - c2|`. (you may return the answer in any order that satisfies this condition.)","input: r = 1, c = 2, r0 = 0, c0 = 0 output: [[0,0],[0,1]] explanation: the distances from (r0, c0) to other cells are: [0,1] example 2: input: r = 2, c = 2, r0 = 0, c0 = 1 output: [[0,1],[0,0],[1,1],[1,0]] explanation: the distances from (r0, c0) to other cells are: [0,1,1,2] the answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct. example 3: input: r = 2, c = 3, r0 = 1, c0 = 2 output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]] explanation: the distances from (r0, c0) to other cells are: [0,1,1,2,2,3] there are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]]. note: `1 <= r <= 100` `1 <= c <= 100` `0 <= r0 < r` `0 <= c0 < c`",,
1031,Maximum Sum of Two Non-Overlapping Subarrays,"Given an array `A` of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths `L` and `M`.  (For clarification, the `L`-length subarray could occur before or after the `M`-length subarray.)
Formally, return the largest `V` for which `V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1])` and either:
`0 <= i < i + L - 1 < j < j + M - 1 < A.length`, or
`0 <= j < j + M - 1 < i < i + L - 1 < A.length`.


Example 1:
Input: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.


Example 2:
Input: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.


Example 3:
Input: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.

Note:
`L >= 1`
`M >= 1`
`L + M <= A.length <= 1000`
`0 <= A[i] <= 1000`",Medium,https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays,Amazon,Array,1002,,"given an array `a` of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths `l` and `m`. (for clarification, the `l`-length subarray could occur before or after the `m`-length subarray.) formally, return the largest `v` for which `v = (a[i] + a[i+1] + ... + a[i+l-1]) + (a[j] + a[j+1] + ... + a[j+m-1])` and either: `0 <= i < i + l - 1 < j < j + m - 1 < a.length`, or `0 <= j < j + m - 1 < i < i + l - 1 < a.length`.","input: a = [0,6,5,2,2,5,1,9,4], l = 1, m = 2 output: 20 explanation: one choice of subarrays is [9] with length 1, and [6,5] with length 2. example 2: input: a = [3,8,1,3,2,1,8,9,0], l = 3, m = 2 output: 29 explanation: one choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2. example 3: input: a = [2,1,5,6,0,9,5,0,3,8], l = 4, m = 3 output: 31 explanation: one choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3. note: `l >= 1` `m >= 1` `l + m <= a.length <= 1000` `0 <= a[i] <= 1000`",,
1032,Stream of Characters,"Implement the `StreamChecker` class as follows:
`StreamChecker(words)`: Constructor, init the data structure with the given words.

`query(letter)`: returns true if and only if for some `k >= 1`, the last `k` characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.


Example:
StreamChecker streamChecker = new StreamChecker([""cd"",""f"",""kl""]); // init the dictionary.

streamChecker.query('a');          // return false
streamChecker.query('b');          // return false
streamChecker.query('c');          // return false
streamChecker.query('d');          // return true, because 'cd' is in the wordlist
streamChecker.query('e');          // return false
streamChecker.query('f');          // return true, because 'f' is in the wordlist
streamChecker.query('g');          // return false
streamChecker.query('h');          // return false
streamChecker.query('i');          // return false
streamChecker.query('j');          // return false
streamChecker.query('k');          // return false
streamChecker.query('l');          // return true, because 'kl' is in the wordlist
Note:
`1 <= words.length <= 2000`
`1 <= words[i].length <= 2000`
Words will only consist of lowercase English letters.

Queries will only consist of lowercase English letters.

The number of queries is at most 40000.",Hard,https://leetcode.com/problems/stream-of-characters,Facebook,Trie,782,,"implement the `streamchecker` class as follows: `streamchecker(words)`: constructor, init the data structure with the given words. `query(letter)`: returns true if and only if for some `k >= 1`, the last `k` characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.","streamchecker streamchecker = new streamchecker([""cd"",""f"",""kl""]); // init the dictionary. streamchecker.query('a'); // return false streamchecker.query('b'); // return false streamchecker.query('c'); // return false streamchecker.query('d'); // return true, because 'cd' is in the wordlist streamchecker.query('e'); // return false streamchecker.query('f'); // return true, because 'f' is in the wordlist streamchecker.query('g'); // return false streamchecker.query('h'); // return false streamchecker.query('i'); // return false streamchecker.query('j'); // return false streamchecker.query('k'); // return false streamchecker.query('l'); // return true, because 'kl' is in the wordlist note: `1 <= words.length <= 2000` `1 <= words[i].length <= 2000` words will only consist of lowercase english letters. queries will only consist of lowercase english letters. the number of queries is at most 40000.",,
1033,Moving Stones Until Consecutive,"Three stones are on a number line at positions `a`, `b`, and `c`.

Each turn, you pick up a stone at an endpoint (ie., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints.  Formally, let's say the stones are currently at positions `x, y, z` with `x < y < z`.  You pick up the stone at either position `x` or position `z`, and move that stone to an integer position `k`, with `x < k < z` and `k != y`.

The game ends when you cannot make any more moves, ie. the stones are in consecutive positions.

When the game ends, what is the minimum and maximum number of moves that you could have made?  Return the answer as an length 2 array: `answer = [minimum_moves, maximum_moves]`

Example 1:
Input: a = 1, b = 2, c = 5
Output: [1,2]
Explanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.


Example 2:
Input: a = 4, b = 3, c = 2
Output: [0,0]
Explanation: We cannot make any moves.


Example 3:
Input: a = 3, b = 5, c = 1
Output: [1,2]
Explanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.

Note:
`1 <= a <= 100`
`1 <= b <= 100`
`1 <= c <= 100`
`a != b, b != c, c != a`",Easy,https://leetcode.com/problems/moving-stones-until-consecutive,Facebook,Brainteaser,102,,"three stones are on a number line at positions `a`, `b`, and `c`. each turn, you pick up a stone at an endpoint (ie., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints. formally, let's say the stones are currently at positions `x, y, z` with `x < y < z`. you pick up the stone at either position `x` or position `z`, and move that stone to an integer position `k`, with `x < k < z` and `k != y`. the game ends when you cannot make any more moves, ie. the stones are in consecutive positions. when the game ends, what is the minimum and maximum number of moves that you could have made? return the answer as an length 2 array: `answer = [minimum_moves, maximum_moves]`","input: a = 1, b = 2, c = 5 output: [1,2] explanation: move the stone from 5 to 3, or move the stone from 5 to 4 to 3. example 2: input: a = 4, b = 3, c = 2 output: [0,0] explanation: we cannot make any moves. example 3: input: a = 3, b = 5, c = 1 output: [1,2] explanation: move the stone from 1 to 4; or move the stone from 1 to 2 to 4. note: `1 <= a <= 100` `1 <= b <= 100` `1 <= c <= 100` `a != b, b != c, c != a`",,
1034,Coloring A Border,"Given a 2-dimensional `grid` of integers, each value in the grid represents the color of the grid square at that location.

Two squares belong to the same connected component if and only if they have the same color and are next to each other in any of the 4 directions.

The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).

Given a square at location `(r0, c0)` in the grid and a `color`, color the border of the connected component of that square with the given `color`, and return the final `grid`.


Example 1:
Input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3
Output: [[3, 3], [3, 2]]

Example 2:
Input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3
Output: [[1, 3, 3], [2, 3, 3]]

Example 3:
Input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2
Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]
Note:
`1 <= grid.length <= 50`
`1 <= grid[0].length <= 50`
`1 <= grid[i][j] <= 1000`
`0 <= r0 < grid.length`
`0 <= c0 < grid[0].length`
`1 <= color <= 1000`",Medium,https://leetcode.com/problems/coloring-a-border,"Amazon,Booking,Booking.com",Depth-first Search,188,"[Island Perimeter, /problems/island-perimeter/, Easy]","given a 2-dimensional `grid` of integers, each value in the grid represents the color of the grid square at that location. two squares belong to the same connected component if and only if they have the same color and are next to each other in any of the 4 directions. the border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column). given a square at location `(r0, c0)` in the grid and a `color`, color the border of the connected component of that square with the given `color`, and return the final `grid`.","input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3 output: [[3, 3], [3, 2]] example 2: input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3 output: [[1, 3, 3], [2, 3, 3]] example 3: input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2 output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]] note: `1 <= grid.length <= 50` `1 <= grid[0].length <= 50` `1 <= grid[i][j] <= 1000` `0 <= r0 < grid.length` `0 <= c0 < grid[0].length` `1 <= color <= 1000`",,
1035,Uncrossed Lines,"We write the integers of `A` and `B` (in the order they are given) on two separate horizontal lines.

Now, we may draw connecting lines: a straight line connecting two numbers `A[i]` and `B[j]` such that:
`A[i] == B[j]`;
The line we draw does not intersect any other connecting (non-horizontal) line.

Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.

Return the maximum number of connecting lines we can draw in this way.


Example 1:
Input: A = [1,4,2], B = [1,2,4]
Output: 2
Explanation: We can draw 2 uncrossed lines as in the diagram.

We cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2.


Example 2:
Input: A = [2,5,1,2,5], B = [10,5,2,1,5,2]
Output: 3

Example 3:
Input: A = [1,3,7,1,7,5], B = [1,9,2,5,1]
Output: 2
Note:
`1 <= A.length <= 500`
`1 <= B.length <= 500`
`1 <= A[i], B[i] <= 2000`",Medium,https://leetcode.com/problems/uncrossed-lines,Amazon,Array,1110,"[Edit Distance, /problems/edit-distance/, Hard]","we write the integers of `a` and `b` (in the order they are given) on two separate horizontal lines. now, we may draw connecting lines: a straight line connecting two numbers `a[i]` and `b[j]` such that: `a[i] == b[j]`; the line we draw does not intersect any other connecting (non-horizontal) line. note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line. return the maximum number of connecting lines we can draw in this way.","input: a = [1,4,2], b = [1,2,4] output: 2 explanation: we can draw 2 uncrossed lines as in the diagram. we cannot draw 3 uncrossed lines, because the line from a[1]=4 to b[2]=4 will intersect the line from a[2]=2 to b[1]=2. example 2: input: a = [2,5,1,2,5], b = [10,5,2,1,5,2] output: 3 example 3: input: a = [1,3,7,1,7,5], b = [1,9,2,5,1] output: 2 note: `1 <= a.length <= 500` `1 <= b.length <= 500` `1 <= a[i], b[i] <= 2000`",,
1036,Escape a Large Maze,"There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are `(x, y)`.

We start at the `source = [sx, sy]` square and want to reach the `target = [tx, ty]` square. There is also an array of `blocked` squares, where each `blocked[i] = [xi, yi]` represents a blocked square with coordinates `(xi, yi)`.

Each move, we can walk one square north, east, south, or west if the square is not in the array of `blocked` squares. We are also not allowed to walk outside of the grid.

Return `true` if and only if it is possible to reach the `target` square from the `source` square through a sequence of valid moves.


Example 1:
Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
Output: false
Explanation: The target square is inaccessible starting from the source square because we cannot move.

We cannot move north or east because those squares are blocked.

We cannot move south or west because we cannot go outside of the grid.


Example 2:
Input: blocked = [], source = [0,0], target = [999999,999999]
Output: true
Explanation: Because there are no blocked cells, it is possible to reach the target square.


Constraints:
`0 <= blocked.length <= 200`
`blocked[i].length == 2`
`0 <= xi, yi < 106`
`source.length == target.length == 2`
`0 <= sx, sy, tx, ty < 106`
`source != target`
It is guaranteed that `source` and `target` are not blocked.",Hard,https://leetcode.com/problems/escape-a-large-maze,"Uber,Google,Facebook,UiPath",Breadth-first Search,291,,"there is a 1 million by 1 million grid on an xy-plane, and the coordinates of each grid square are `(x, y)`. we start at the `source = [sx, sy]` square and want to reach the `target = [tx, ty]` square. there is also an array of `blocked` squares, where each `blocked[i] = [xi, yi]` represents a blocked square with coordinates `(xi, yi)`. each move, we can walk one square north, east, south, or west if the square is not in the array of `blocked` squares. we are also not allowed to walk outside of the grid. return `true` if and only if it is possible to reach the `target` square from the `source` square through a sequence of valid moves.","input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2] output: false explanation: the target square is inaccessible starting from the source square because we cannot move. we cannot move north or east because those squares are blocked. we cannot move south or west because we cannot go outside of the grid. example 2: input: blocked = [], source = [0,0], target = [999999,999999] output: true explanation: because there are no blocked cells, it is possible to reach the target square.","`0 <= blocked.length <= 200` `blocked[i].length == 2` `0 <= xi, yi < 10^6` `source.length == target.length == 2` `0 <= sx, sy, tx, ty < 10^6` `source != target` it is guaranteed that `source` and `target` are not blocked.",
1037,Valid Boomerang,"Given an array `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane, return `true` if these points are a boomerang.

A boomerang is a set of three points that are all distinct and not in a straight line.


Example 1:
Input: points = [[1,1],[2,3],[3,2]]
Output: true

Example 2:
Input: points = [[1,1],[2,2],[3,3]]
Output: false

Constraints:
`points.length == 3`
`points[i].length == 2`
`0 <= xi, yi <= 100`",Easy,https://leetcode.com/problems/valid-boomerang,Google,Math,152,,"given an array `points` where `points[i] = [xi, yi]` represents a point on the x-y plane, return `true` if these points are a boomerang. a boomerang is a set of three points that are all distinct and not in a straight line.","input: points = [[1,1],[2,3],[3,2]] output: true example 2: input: points = [[1,1],[2,2],[3,3]] output: false","`points.length == 3` `points[i].length == 2` `0 <= xi, yi <= 10^0`",
1038,Binary Search Tree to Greater Sum Tree,"Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:
The left subtree of a node contains only nodes with keys less than the node's key.

The right subtree of a node contains only nodes with keys greater than the node's key.

Both the left and right subtrees must also be binary search trees.

Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/

Example 1:
Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

Example 2:
Input: root = [0,null,1]
Output: [1,null,1]

Example 3:
Input: root = [1,0,2]
Output: [3,3,2]

Example 4:
Input: root = [3,2,4,1]
Output: [7,9,4,10]

Constraints:
The number of nodes in the tree is in the range `[1, 100]`.

`0 <= Node.val <= 100`
All the values in the tree are unique.

`root` is guaranteed to be a valid binary search tree.",Medium,https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree,Facebook,"Tree,Depth-first Search,Binary Search Tree,Recursion",1411,,"given the `root` of a binary search tree (bst), convert it to a greater tree such that every key of the original bst is changed to the original key plus sum of all keys greater than the original key in bst. as a reminder, a binary search tree is a tree that satisfies these","input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] example 2: input: root = [0,null,1] output: [1,null,1] example 3: input: root = [1,0,2] output: [3,3,2] example 4: input: root = [3,2,4,1] output: [7,9,4,10] constraints: the number of nodes in the tree is in the range `[1, 100]`. `0 <= node.val <= 100` all the values in the tree are unique. `root` is guaranteed to be a valid binary search tree.","the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees. note: this question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/ example 1: input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8] output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8] example 2: input: root = [0,null,1] output: [1,null,1] example 3: input: root = [1,0,2] output: [3,3,2] example 4: input: root = [3,2,4,1] output: [7,9,4,10] constraints: the number of nodes in the tree is in the range `[1, 10^0]`. `0 <= node.val <= 10^0` all the values in the tree are unique. `root` is guaranteed to be a valid binary search tree.",
1039,Minimum Score Triangulation of Polygon,"You have a convex `n`-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., clockwise order).

You will triangulate the polygon into `n - 2` triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation.

Return the smallest possible total score that you can achieve with some triangulation of the polygon.


Example 1:
Input: values = [1,2,3]
Output: 6
Explanation: The polygon is already triangulated, and the score of the only triangle is 6.


Example 2:
Input: values = [3,7,4,5]
Output: 144
Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.

The minimum score is 144.


Example 3:
Input: values = [1,3,1,4,1,5]
Output: 13
Explanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.


Constraints:
`n == values.length`
`3 <= n <= 50`
`1 <= values[i] <= 100`",Medium,https://leetcode.com/problems/minimum-score-triangulation-of-polygon,Uber,Dynamic Programming,639,,"you have a convex `n`-sided polygon where each vertex has an integer value. you are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., clockwise order). you will triangulate the polygon into `n - 2` triangles. for each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation. return the smallest possible total score that you can achieve with some triangulation of the polygon.","input: values = [1,2,3] output: 6 explanation: the polygon is already triangulated, and the score of the only triangle is 6. example 2: input: values = [3,7,4,5] output: 144 explanation: there are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144. the minimum score is 144. example 3: input: values = [1,3,1,4,1,5] output: 13 explanation: the minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.",`n == values.length` `3 <= n <= 50` `1 <= values[i] <= 10^0`,
1040,Moving Stones Until Consecutive II,"On an infinite number line, the position of the i-th stone is given by `stones[i]`.  Call a stone an endpoint stone if it has the smallest or largest position.

Each turn, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.

In particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.

The game ends when you cannot make any more moves, ie. the stones are in consecutive positions.

When the game ends, what is the minimum and maximum number of moves that you could have made?  Return the answer as an length 2 array: `answer = [minimum_moves, maximum_moves]`

Example 1:
Input: [7,4,9]
Output: [1,2]
Explanation: 
We can move 4 -> 8 for one move to finish the game.

Or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.


Example 2:
Input: [6,5,4,3,10]
Output: [2,3]
We can move 3 -> 8 then 10 -> 7 to finish the game.

Or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.

Notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.


Example 3:
Input: [100,101,104,102,103]
Output: [0,0]
Note:
`3 <= stones.length <= 10^4`
`1 <= stones[i] <= 10^9`
`stones[i]` have distinct values.",Medium,https://leetcode.com/problems/moving-stones-until-consecutive-ii,Facebook,"Array,Sliding Window",227,,"on an infinite number line, the position of the i-th stone is given by `stones[i]`. call a stone an endpoint stone if it has the smallest or largest position. each turn, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone. in particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone. the game ends when you cannot make any more moves, ie. the stones are in consecutive positions. when the game ends, what is the minimum and maximum number of moves that you could have made? return the answer as an length 2 array: `answer = [minimum_moves, maximum_moves]`","input: [7,4,9] output: [1,2] explanation: we can move 4 -> 8 for one move to finish the game. or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game. example 2: input: [6,5,4,3,10] output: [2,3] we can move 3 -> 8 then 10 -> 7 to finish the game. or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game. notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move. example 3: input: [100,101,104,102,103] output: [0,0] note: `3 <= stones.length <= 10^4` `1 <= stones[i] <= 10^9` `stones[i]` have distinct values.",,
1041,Robot Bounded In Circle,"On an infinite plane, a robot initially stands at `(0, 0)` and faces north. The robot can receive one of three instructions:
`""G""`: go straight 1 unit;
`""L""`: turn 90 degrees to the left;
`""R""`: turn 90 degrees to the right.

The robot performs the `instructions` given in order, and repeats them forever.

Return `true` if and only if there exists a circle in the plane such that the robot never leaves the circle.


Example 1:
Input: instructions = ""GGLLGG""
Output: true
Explanation: The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).

When repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.


Example 2:
Input: instructions = ""GG""
Output: false
Explanation: The robot moves north indefinitely.


Example 3:
Input: instructions = ""GL""
Output: true
Explanation: The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...


Constraints:
`1 <= instructions.length <= 100`
`instructions[i]` is `'G'`, `'L'` or, `'R'`.",Medium,https://leetcode.com/problems/robot-bounded-in-circle,"Amazon,Goldman Sachs,Google,Expedia",Math,1027,,"on an infinite plane, a robot initially stands at `(0, 0)` and faces north. the robot can receive one of three instructions: `""g""`: go straight 1 unit; `""l""`: turn 90 degrees to the left; `""r""`: turn 90 degrees to the right. the robot performs the `instructions` given in order, and repeats them forever. return `true` if and only if there exists a circle in the plane such that the robot never leaves the circle.","input: instructions = ""ggllgg"" output: true explanation: the robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0). when repeating these instructions, the robot remains in the circle of radius 2 centered at the origin. example 2: input: instructions = ""gg"" output: false explanation: the robot moves north indefinitely. example 3: input: instructions = ""gl"" output: true explanation: the robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...","`1 <= instructions.length <= 10^0` `instructions[i]` is `'g'`, `'l'` or, `'r'`.",
1042,Flower Planting With No Adjacent,"You have `n` gardens, labeled from `1` to `n`, and an array `paths` where `paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to garden `yi`. In each garden, you want to plant one of 4 types of flowers.

All gardens have at most 3 paths coming into or leaving it.

Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.

Return any such a choice as an array `answer`, where `answer[i]` is the type of flower planted in the `(i+1)th` garden. The flower types are denoted `1`, `2`, `3`, or `4`. It is guaranteed an answer exists.


Example 1:
Input: n = 3, paths = [[1,2],[2,3],[3,1]]
Output: [1,2,3]
Explanation:
Gardens 1 and 2 have different types.

Gardens 2 and 3 have different types.

Gardens 3 and 1 have different types.

Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].


Example 2:
Input: n = 4, paths = [[1,2],[3,4]]
Output: [1,2,1,2]

Example 3:
Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
Output: [1,2,3,4]

Constraints:
`1 <= n <= 104`
`0 <= paths.length <= 2 * 104`
`paths[i].length == 2`
`1 <= xi, yi <= n`
`xi != yi`
Every garden has at most 3 paths coming into or leaving it.",Medium,https://leetcode.com/problems/flower-planting-with-no-adjacent,LinkedIn,Graph,536,,"you have `n` gardens, labeled from `1` to `n`, and an array `paths` where `paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to garden `yi`. in each garden, you want to plant one of 4 types of flowers. all gardens have at most 3 paths coming into or leaving it. your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers. return any such a choice as an array `answer`, where `answer[i]` is the type of flower planted in the `(i+1)th` garden. the flower types are denoted `1`, `2`, `3`, or `4`. it is guaranteed an answer exists.","input: n = 3, paths = [[1,2],[2,3],[3,1]] output: [1,2,3] explanation: gardens 1 and 2 have different types. gardens 2 and 3 have different types. gardens 3 and 1 have different types. hence, [1,2,3] is a valid answer. other valid answers include [1,2,4], [1,4,2], and [3,2,1]. example 2: input: n = 4, paths = [[1,2],[3,4]] output: [1,2,1,2] example 3: input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]] output: [1,2,3,4]","`1 <= n <= 10^4` `0 <= paths.length <= 2 * 10^4` `paths[i].length == 2` `1 <= xi, yi <= n` `xi != yi` every garden has at most 3 paths coming into or leaving it.",
1043,Partition Array for Maximum Sum,"Given an integer array `arr`, you should partition the array into (contiguous) subarrays of length at most `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning.


Example 1:
Input: arr = [1,15,7,9,2,5,10], k = 3
Output: 84
Explanation: arr becomes [15,15,15,9,10,10,10]

Example 2:
Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
Output: 83

Example 3:
Input: arr = [1], k = 1
Output: 1

Constraints:
`1 <= arr.length <= 500`
`0 <= arr[i] <= 109`
`1 <= k <= arr.length`",Medium,https://leetcode.com/problems/partition-array-for-maximum-sum,Amazon,Dynamic Programming,1150,,"given an integer array `arr`, you should partition the array into (contiguous) subarrays of length at most `k`. after partitioning, each subarray has their values changed to become the maximum value of that subarray. return the largest sum of the given array after partitioning.","input: arr = [1,15,7,9,2,5,10], k = 3 output: 84 explanation: arr becomes [15,15,15,9,10,10,10] example 2: input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4 output: 83 example 3: input: arr = [1], k = 1 output: 1",`1 <= arr.length <= 500` `0 <= arr[i] <= 10^9` `1 <= k <= arr.length`,
1044,Longest Duplicate Substring,"Given a string `s`, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap.

Return any duplicated substring that has the longest possible length. If `s` does not have a duplicated substring, the answer is `""""`.


Example 1:
Input: s = ""banana""
Output: ""ana""

Example 2:
Input: s = ""abcd""
Output: """"

Constraints:
`2 <= s.length <= 3 * 104`
`s` consists of lowercase English letters.",Hard,https://leetcode.com/problems/longest-duplicate-substring,Amazon,"Hash Table,Binary Search,Suffix Array",802,,"given a string `s`, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. the occurrences may overlap. return any duplicated substring that has the longest possible length. if `s` does not have a duplicated substring, the answer is `""""`.","input: s = ""banana"" output: ""ana"" example 2: input: s = ""abcd"" output: """"",`2 <= s.length <= 3 * 10^4` `s` consists of lowercase english letters.,
1045,Customers Who Bought All Products,SQL Schema,Medium,https://leetcode.com/problems/customers-who-bought-all-products,Amazon,,113,,sql schema,,,
1046,Last Stone Weight,"We have a collection of stones, each stone has a positive integer weight.

Each turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights `x` and `y` with `x <= y`.  The result of this smash is:
If `x == y`, both stones are totally destroyed;
If `x != y`, the stone of weight `x` is totally destroyed, and the stone of weight `y` has new weight `y-x`.

At the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)

Example 1:
Input: [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.

Note:
`1 <= stones.length <= 30`
`1 <= stones[i] <= 1000`",Easy,https://leetcode.com/problems/last-stone-weight,Amazon,"Heap,Greedy",1292,,"we have a collection of stones, each stone has a positive integer weight. each turn, we choose the two heaviest stones and smash them together. suppose the stones have weights `x` and `y` with `x <= y`. the result of this smash is: if `x == y`, both stones are totally destroyed; if `x != y`, the stone of weight `x` is totally destroyed, and the stone of weight `y` has new weight `y-x`. at the end, there is at most 1 stone left. return the weight of this stone (or 0 if there are no stones left.)","input: [2,7,4,1,8,1] output: 1 explanation: we combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then, we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then, we combine 2 and 1 to get 1 so the array converts to [1,1,1] then, we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone. note: `1 <= stones.length <= 30` `1 <= stones[i] <= 1000`",,
1047,Remove All Adjacent Duplicates In String,"Given a string `S` of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.

We repeatedly make duplicate removals on S until we no longer can.

Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.


Example 1:
Input: ""abbaca""
Output: ""ca""
Explanation: 
For example, in ""abbaca"" we could remove ""bb"" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is ""aaca"", of which only ""aa"" is possible, so the final string is ""ca"".

Note:
`1 <= S.length <= 20000`
`S` consists only of English lowercase letters.",Easy,https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string,"Facebook,Amazon,Oracle,Bloomberg,Microsoft",Stack,1466,"[Remove All Adjacent Duplicates in String II, /problems/remove-all-adjacent-duplicates-in-string-ii/, Medium]","given a string `s` of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them. we repeatedly make duplicate removals on s until we no longer can. return the final string after all such duplicate removals have been made. it is guaranteed the answer is unique.","input: ""abbaca"" output: ""ca"" explanation: for example, in ""abbaca"" we could remove ""bb"" since the letters are adjacent and equal, and this is the only possible move. the result of this move is that the string is ""aaca"", of which only ""aa"" is possible, so the final string is ""ca"". note: `1 <= s.length <= 20000` `s` consists only of english lowercase letters.",,
1048,Longest String Chain,"Given a list of words, each word consists of English lowercase letters.

Let's say `word1` is a predecessor of `word2` if and only if we can add exactly one letter anywhere in `word1` to make it equal to `word2`.  For example, `""abc""` is a predecessor of `""abac""`.

A word chain is a sequence of words `[word_1, word_2, ..., word_k]` with `k >= 1`, where `word_1` is a predecessor of `word_2`, `word_2` is a predecessor of `word_3`, and so on.

Return the longest possible length of a word chain with words chosen from the given list of `words`.


Example 1:
Input: words = [""a"",""b"",""ba"",""bca"",""bda"",""bdca""]
Output: 4
Explanation: One of the longest word chain is ""a"",""ba"",""bda"",""bdca"".


Example 2:
Input: words = [""xbc"",""pcxbcf"",""xb"",""cxbc"",""pcxbc""]
Output: 5

Constraints:
`1 <= words.length <= 1000`
`1 <= words[i].length <= 16`
`words[i]` only consists of English lowercase letters.",Medium,https://leetcode.com/problems/longest-string-chain,"Two Sigma,Google","Hash Table,Dynamic Programming",1572,,"given a list of words, each word consists of english lowercase letters. let's say `word1` is a predecessor of `word2` if and only if we can add exactly one letter anywhere in `word1` to make it equal to `word2`. for example, `""abc""` is a predecessor of `""abac""`. a word chain is a sequence of words `[word_1, word_2, ..., word_k]` with `k >= 1`, where `word_1` is a predecessor of `word_2`, `word_2` is a predecessor of `word_3`, and so on. return the longest possible length of a word chain with words chosen from the given list of `words`.","input: words = [""a"",""b"",""ba"",""bca"",""bda"",""bdca""] output: 4 explanation: one of the longest word chain is ""a"",""ba"",""bda"",""bdca"". example 2: input: words = [""xbc"",""pcxbcf"",""xb"",""cxbc"",""pcxbc""] output: 5",`1 <= words.length <= 1000` `1 <= words[i].length <= 16` `words[i]` only consists of english lowercase letters.,
1049,Last Stone Weight II,"You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.

We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights `x` and `y` with `x <= y`. The result of this smash is:
If `x == y`, both stones are destroyed, and
If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.

At the end of the game, there is at most one stone left.

Return the smallest possible weight of the left stone. If there are no stones left, return `0`.


Example 1:
Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation:
We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,
we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,
we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,
we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.


Example 2:
Input: stones = [31,26,33,21,40]
Output: 5

Example 3:
Input: stones = [1,2]
Output: 1

Constraints:
`1 <= stones.length <= 30`
`1 <= stones[i] <= 100`",Medium,https://leetcode.com/problems/last-stone-weight-ii,"ByteDance,Goldman Sachs",Dynamic Programming,1168,,"you are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone. we are playing a game with the stones. on each turn, we choose any two stones and smash them together. suppose the stones have weights `x` and `y` with `x <= y`. the result of this smash is: if `x == y`, both stones are destroyed, and if `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`. at the end of the game, there is at most one stone left. return the smallest possible weight of the left stone. if there are no stones left, return `0`.","input: stones = [2,7,4,1,8,1] output: 1 explanation: we can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then, we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then, we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then, we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value. example 2: input: stones = [31,26,33,21,40] output: 5 example 3: input: stones = [1,2] output: 1",`1 <= stones.length <= 30` `1 <= stones[i] <= 10^0`,
1050,Actors and Directors Who Cooperated At Least Three Times,SQL Schema,Easy,https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times,Amazon,,76,,sql schema,,,
1051,Height Checker,"A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array `expected` where `expected[i]` is the expected height of the `ith` student in line.

You are given an integer array `heights` representing the current order that the students are standing in. Each `heights[i]` is the height of the `ith` student in line (0-indexed).

Return the number of indices where `heights[i] != expected[i]`.


Example 1:
Input: heights = [1,1,4,2,1,3]
Output: 3
Explanation: 
heights:  [1,1,4,2,1,3]
expected: [1,1,1,2,3,4]
Indices 2, 4, and 5 do not match.


Example 2:
Input: heights = [5,1,2,3,4]
Output: 5
Explanation:
heights:  [5,1,2,3,4]
expected: [1,2,3,4,5]
All indices do not match.


Example 3:
Input: heights = [1,2,3,4,5]
Output: 0
Explanation:
heights:  [1,2,3,4,5]
expected: [1,2,3,4,5]
All indices match.


Constraints:
`1 <= heights.length <= 100`
`1 <= heights[i] <= 100`",Easy,https://leetcode.com/problems/height-checker,Goldman Sachs,Array,6,,a school is trying to take an annual photo of all the students. the students are asked to stand in a single file line in non-decreasing order by height. let this ordering be represented by the integer array `expected` where `expected[i]` is the expected height of the `ith` student in line. you are given an integer array `heights` representing the current order that the students are standing in. each `heights[i]` is the height of the `ith` student in line (0-indexed). return the number of indices where `heights[i] != expected[i]`.,"input: heights = [1,1,4,2,1,3] output: 3 explanation: heights: [1,1,4,2,1,3] expected: [1,1,1,2,3,4] indices 2, 4, and 5 do not match. example 2: input: heights = [5,1,2,3,4] output: 5 explanation: heights: [5,1,2,3,4] expected: [1,2,3,4,5] all indices do not match. example 3: input: heights = [1,2,3,4,5] output: 0 explanation: heights: [1,2,3,4,5] expected: [1,2,3,4,5] all indices match.",`1 <= heights.length <= 10^0` `1 <= heights[i] <= 10^0`,
1052,Grumpy Bookstore Owner,"Today, the bookstore owner has a store open for `customers.length` minutes.  Every minute, some number of customers (`customers[i]`) enter the store, and all those customers leave after the end of that minute.

On some minutes, the bookstore owner is grumpy.  If the bookstore owner is grumpy on the i-th minute, `grumpy[i] = 1`, otherwise `grumpy[i] = 0`.  When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise they are satisfied.

The bookstore owner knows a secret technique to keep themselves not grumpy for `X` minutes straight, but can only use it once.

Return the maximum number of customers that can be satisfied throughout the day.


Example 1:
Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3
Output: 16
Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. 
The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.

Note:
`1 <= X <= customers.length == grumpy.length <= 20000`
`0 <= customers[i] <= 1000`
`0 <= grumpy[i] <= 1`",Medium,https://leetcode.com/problems/grumpy-bookstore-owner,Uber,"Array,Sliding Window",716,,"today, the bookstore owner has a store open for `customers.length` minutes. every minute, some number of customers (`customers[i]`) enter the store, and all those customers leave after the end of that minute. on some minutes, the bookstore owner is grumpy. if the bookstore owner is grumpy on the i-th minute, `grumpy[i] = 1`, otherwise `grumpy[i] = 0`. when the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise they are satisfied. the bookstore owner knows a secret technique to keep themselves not grumpy for `x` minutes straight, but can only use it once. return the maximum number of customers that can be satisfied throughout the day.","input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], x = 3 output: 16 explanation: the bookstore owner keeps themselves not grumpy for the last 3 minutes. the maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16. note: `1 <= x <= customers.length == grumpy.length <= 20000` `0 <= customers[i] <= 1000` `0 <= grumpy[i] <= 1`",,
1053,Previous Permutation With One Swap,"Given an array of positive integers `arr` (not necessarily distinct), return the lexicographically largest permutation that is smaller than `arr`, that can be made with exactly one swap (A swap exchanges the positions of two numbers `arr[i]` and `arr[j]`). If it cannot be done, then return the same array.


Example 1:
Input: arr = [3,2,1]
Output: [3,1,2]
Explanation: Swapping 2 and 1.


Example 2:
Input: arr = [1,1,5]
Output: [1,1,5]
Explanation: This is already the smallest permutation.


Example 3:
Input: arr = [1,9,4,6,7]
Output: [1,7,4,6,9]
Explanation: Swapping 9 and 7.


Example 4:
Input: arr = [3,1,1,3]
Output: [1,3,1,3]
Explanation: Swapping 1 and 3.


Constraints:
`1 <= arr.length <= 104`
`1 <= arr[i] <= 104`",Medium,https://leetcode.com/problems/previous-permutation-with-one-swap,Facebook,"Array,Greedy",256,,"given an array of positive integers `arr` (not necessarily distinct), return the lexicographically largest permutation that is smaller than `arr`, that can be made with exactly one swap (a swap exchanges the positions of two numbers `arr[i]` and `arr[j]`). if it cannot be done, then return the same array.","input: arr = [3,2,1] output: [3,1,2] explanation: swapping 2 and 1. example 2: input: arr = [1,1,5] output: [1,1,5] explanation: this is already the smallest permutation. example 3: input: arr = [1,9,4,6,7] output: [1,7,4,6,9] explanation: swapping 9 and 7. example 4: input: arr = [3,1,1,3] output: [1,3,1,3] explanation: swapping 1 and 3.",`1 <= arr.length <= 10^4` `1 <= arr[i] <= 10^4`,
1054,Distant Barcodes,"In a warehouse, there is a row of barcodes, where the `ith` barcode is `barcodes[i]`.

Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.


Example 1:
Input: barcodes = [1,1,1,2,2,2]
Output: [2,1,2,1,2,1]

Example 2:
Input: barcodes = [1,1,1,1,2,2,3,3]
Output: [1,3,1,3,1,2,1,2]

Constraints:
`1 <= barcodes.length <= 10000`
`1 <= barcodes[i] <= 10000`",Medium,https://leetcode.com/problems/distant-barcodes,Bloomberg,"Heap,Sort",560,,"in a warehouse, there is a row of barcodes, where the `ith` barcode is `barcodes[i]`. rearrange the barcodes so that no two adjacent barcodes are equal. you may return any answer, and it is guaranteed an answer exists.","input: barcodes = [1,1,1,2,2,2] output: [2,1,2,1,2,1] example 2: input: barcodes = [1,1,1,1,2,2,3,3] output: [1,3,1,3,1,2,1,2]",`1 <= barcodes.length <= 10000` `1 <= barcodes[i] <= 10000`,
1055,Shortest Way to Form String,"From any string, we can form a subsequence of that string by deleting some number of characters (possibly no deletions).

Given two strings `source` and `target`, return the minimum number of subsequences of `source` such that their concatenation equals `target`. If the task is impossible, return `-1`.


Example 1:
Input: source = ""abc"", target = ""abcbc""
Output: 2
Explanation: The target ""abcbc"" can be formed by ""abc"" and ""bc"", which are subsequences of source ""abc"".


Example 2:
Input: source = ""abc"", target = ""acdbc""
Output: -1
Explanation: The target string cannot be constructed from the subsequences of source string due to the character ""d"" in target string.


Example 3:
Input: source = ""xyz"", target = ""xzyxz""
Output: 3
Explanation: The target string can be constructed as follows ""xz"" + ""y"" + ""xz"".


Constraints:
Both the `source` and `target` strings consist of only lowercase English letters from ""a""-""z"".

The lengths of `source` and `target` string are between `1` and `1000`.",Medium,https://leetcode.com/problems/shortest-way-to-form-string,Facebook,"Dynamic Programming,Greedy",602,"[Is Subsequence, /problems/is-subsequence/, Easy], [Number of Matching Subsequences, /problems/number-of-matching-subsequences/, Medium]","from any string, we can form a subsequence of that string by deleting some number of characters (possibly no deletions). given two strings `source` and `target`, return the minimum number of subsequences of `source` such that their concatenation equals `target`. if the task is impossible, return `-1`.","input: source = ""abc"", target = ""abcbc"" output: 2 explanation: the target ""abcbc"" can be formed by ""abc"" and ""bc"", which are subsequences of source ""abc"". example 2: input: source = ""abc"", target = ""acdbc"" output: -1 explanation: the target string cannot be constructed from the subsequences of source string due to the character ""d"" in target string. example 3: input: source = ""xyz"", target = ""xzyxz"" output: 3 explanation: the target string can be constructed as follows ""xz"" + ""y"" + ""xz"".","both the `source` and `target` strings consist of only lowercase english letters from ""a""-""z"". the lengths of `source` and `target` string are between `1` and `1000`.",
1056,Confusing Number,"Given a number `N`, return `true` if and only if it is a confusing number, which satisfies the following condition:
We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid. A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.


Example 1:
Input: 6
Output: true
Explanation: 
We get `9` after rotating `6`, `9` is a valid number and `9!=6`.


Example 2:
Input: 89
Output: true
Explanation: 
We get `68` after rotating `89`, `86` is a valid number and `86!=89`.


Example 3:
Input: 11
Output: false
Explanation: 
We get `11` after rotating `11`, `11` is a valid number but the value remains the same, thus `11` is not a confusing number.


Example 4:
Input: 25
Output: false
Explanation: 
We get an invalid number after rotating `25`.

Note:
`0 <= N <= 10^9`
After the rotation we can ignore leading zeros, for example if after rotation we have `0008` then this number is considered as just `8`.",Easy,https://leetcode.com/problems/confusing-number,Google,Math,109,"[Strobogrammatic Number, /problems/strobogrammatic-number/, Easy], [Confusing Number II, /problems/confusing-number-ii/, Hard]","given a number `n`, return `true` if and only if it is a confusing number, which satisfies the following condition: we can rotate digits by 180 degrees to form new digits. when 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. when 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid. a confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.","input: 6 output: true explanation: we get `9` after rotating `6`, `9` is a valid number and `9!=6`. example 2: input: 89 output: true explanation: we get `68` after rotating `89`, `86` is a valid number and `86!=89`. example 3: input: 11 output: false explanation: we get `11` after rotating `11`, `11` is a valid number but the value remains the same, thus `11` is not a confusing number. example 4: input: 25 output: false explanation: we get an invalid number after rotating `25`. note: `0 <= n <= 10^9` after the rotation we can ignore leading zeros, for example if after rotation we have `0008` then this number is considered as just `8`.",,
1057,Campus Bikes,"On a campus represented as a 2D grid, there are `N` workers and `M` bikes, with `N <= M`. Each worker and bike is a 2D coordinate on this grid.

Our goal is to assign a bike to each worker. Among the available bikes and workers, we choose the (worker, bike) pair with the shortest Manhattan distance between each other, and assign the bike to that worker. (If there are multiple (worker, bike) pairs with the same shortest Manhattan distance, we choose the pair with the smallest worker index; if there are multiple ways to do that, we choose the pair with the smallest bike index). We repeat this process until there are no available workers.

The Manhattan distance between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.

Return a vector `ans` of length `N`, where `ans[i]` is the index (0-indexed) of the bike that the `i`-th worker is assigned to.


Example 1:
Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
Output: [1,0]
Explanation: 
Worker 1 grabs Bike 0 as they are closest (without ties), and Worker 0 is assigned Bike 1. So the output is [1, 0].


Example 2:
Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
Output: [0,2,1]
Explanation: 
Worker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share the same distance to Bike 2, thus Worker 1 is assigned to Bike 2, and Worker 2 will take Bike 1. So the output is [0,2,1].

Note:
`0 <= workers[i][j], bikes[i][j] < 1000`
All worker and bike locations are distinct.

`1 <= workers.length <= bikes.length <= 1000`",Medium,https://leetcode.com/problems/campus-bikes,"Google,Amazon,ByteDance","Greedy,Sort",673,"[Campus Bikes II, /problems/campus-bikes-ii/, Medium]","on a campus represented as a 2d grid, there are `n` workers and `m` bikes, with `n <= m`. each worker and bike is a 2d coordinate on this grid. our goal is to assign a bike to each worker. among the available bikes and workers, we choose the (worker, bike) pair with the shortest manhattan distance between each other, and assign the bike to that worker. (if there are multiple (worker, bike) pairs with the same shortest manhattan distance, we choose the pair with the smallest worker index; if there are multiple ways to do that, we choose the pair with the smallest bike index). we repeat this process until there are no available workers. the manhattan distance between two points `p1` and `p2` is `manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`. return a vector `ans` of length `n`, where `ans[i]` is the index (0-indexed) of the bike that the `i`-th worker is assigned to.","input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]] output: [1,0] explanation: worker 1 grabs bike 0 as they are closest (without ties), and worker 0 is assigned bike 1. so the output is [1, 0]. example 2: input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]] output: [0,2,1] explanation: worker 0 grabs bike 0 at first. worker 1 and worker 2 share the same distance to bike 2, thus worker 1 is assigned to bike 2, and worker 2 will take bike 1. so the output is [0,2,1]. note: `0 <= workers[i][j], bikes[i][j] < 1000` all worker and bike locations are distinct. `1 <= workers.length <= bikes.length <= 1000`",,
1058,Minimize Rounding Error to Meet Target,"Given an array of `prices` `[p1,p2...,pn]` and a `target`, round each price `pi` to `Roundi(pi)` so that the rounded array `[Round1(p1),Round2(p2)...,Roundn(pn)]` sums to the given `target`. Each operation `Roundi(pi)` could be either `Floor(pi)` or `Ceil(pi)`.

Return the string `""-1""` if the rounded array is impossible to sum to `target`. Otherwise, return the smallest rounding error, which is defined as `Σ |Roundi(pi) - (pi)|` for `i` from `1` to `n`, as a string with three places after the decimal.


Example 1:
Input: prices = [""0.700"",""2.800"",""4.900""], target = 8
Output: ""1.000""
Explanation:
Use Floor, Ceil and Ceil operations to get (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 .


Example 2:
Input: prices = [""1.500"",""2.500"",""3.500""], target = 10
Output: ""-1""
Explanation: It is impossible to meet the target.


Example 3:
Input: prices = [""1.500"",""2.500"",""3.500""], target = 9
Output: ""1.500""

Constraints:
`1 <= prices.length <= 500`
Each string `prices[i]` represents a real number in the range `[0.0, 1000.0]` and has exactly 3 decimal places.

`0 <= target <= 106`",Medium,https://leetcode.com/problems/minimize-rounding-error-to-meet-target,Microsoft,"Math,Dynamic Programming,Greedy",103,,"given an array of `prices` `[p1,p2...,pn]` and a `target`, round each price `pi` to `roundi(pi)` so that the rounded array `[round1(p1),round2(p2)...,roundn(pn)]` sums to the given `target`. each operation `roundi(pi)` could be either `floor(pi)` or `ceil(pi)`. return the string `""-1""` if the rounded array is impossible to sum to `target`. otherwise, return the smallest rounding error, which is defined as `σ |roundi(pi) - (pi)|` for `i` from `1` to `n`, as a string with three places after the decimal.","input: prices = [""0.700"",""2.800"",""4.900""], target = 8 output: ""1.000"" explanation: use floor, ceil and ceil operations to get (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 . example 2: input: prices = [""1.500"",""2.500"",""3.500""], target = 10 output: ""-1"" explanation: it is impossible to meet the target. example 3: input: prices = [""1.500"",""2.500"",""3.500""], target = 9 output: ""1.500""","`1 <= prices.length <= 500` each string `prices[i]` represents a real number in the range `[0.0, 1000.0]` and has exactly 3 decimal places. `0 <= target <= 10^6`",
1059,All Paths from Source Lead to Destination,"Given the `edges` of a directed graph where `edges[i] = [ai, bi]` indicates there is an edge between nodes `ai` and `bi`, and two nodes `source` and `destination` of this graph, determine whether or not all paths starting from `source` eventually, end at `destination`, that is:
At least one path exists from the `source` node to the `destination` node
If a path exists from the `source` node to a node with no outgoing edges, then that node is equal to `destination`.

The number of possible paths from `source` to `destination` is a finite number.

Return `true` if and only if all roads from `source` lead to `destination`.


Example 1:
Input: n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2
Output: false
Explanation: It is possible to reach and get stuck on both node 1 and node 2.


Example 2:
Input: n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3
Output: false
Explanation: We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely.


Example 3:
Input: n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3
Output: true

Example 4:
Input: n = 3, edges = [[0,1],[1,1],[1,2]], source = 0, destination = 2
Output: false
Explanation: All paths from the source node end at the destination node, but there are an infinite number of paths, such as 0-1-2, 0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on.


Example 5:
Input: n = 2, edges = [[0,1],[1,1]], source = 0, destination = 1
Output: false
Explanation: There is infinite self-loop at destination node.


Constraints:
`1 <= n <= 104`
`0 <= edges.length <= 104`
`edges.length == 2`
`0 <= ai, bi <= n - 1`
`0 <= source <= n - 1`
`0 <= destination <= n - 1`
The given graph may have self-loops and parallel edges.",Medium,https://leetcode.com/problems/all-paths-from-source-lead-to-destination,Bloomberg,"Depth-first Search,Graph",235,,"given the `edges` of a directed graph where `edges[i] = [ai, bi]` indicates there is an edge between nodes `ai` and `bi`, and two nodes `source` and `destination` of this graph, determine whether or not all paths starting from `source` eventually, end at `destination`, that is: at least one path exists from the `source` node to the `destination` node if a path exists from the `source` node to a node with no outgoing edges, then that node is equal to `destination`. the number of possible paths from `source` to `destination` is a finite number. return `true` if and only if all roads from `source` lead to `destination`.","input: n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2 output: false explanation: it is possible to reach and get stuck on both node 1 and node 2. example 2: input: n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3 output: false explanation: we have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely. example 3: input: n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3 output: true example 4: input: n = 3, edges = [[0,1],[1,1],[1,2]], source = 0, destination = 2 output: false explanation: all paths from the source node end at the destination node, but there are an infinite number of paths, such as 0-1-2, 0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on. example 5: input: n = 2, edges = [[0,1],[1,1]], source = 0, destination = 1 output: false explanation: there is infinite self-loop at destination node.","`1 <= n <= 10^4` `0 <= edges.length <= 10^4` `edges.length == 2` `0 <= ai, bi <= n - 1` `0 <= source <= n - 1` `0 <= destination <= n - 1` the given graph may have self-loops and parallel edges.",
1060,Missing Element in Sorted Array,"Given an integer array `nums` which is sorted in ascending order and all of its elements are unique and given also an integer `k`, return the `kth` missing number starting from the leftmost number of the array.


Example 1:
Input: nums = [4,7,9,10], k = 1
Output: 5
Explanation: The first missing number is 5.


Example 2:
Input: nums = [4,7,9,10], k = 3
Output: 8
Explanation: The missing numbers are [5,6,8,...], hence the third missing number is 8.


Example 3:
Input: nums = [1,2,4], k = 3
Output: 6
Explanation: The missing numbers are [3,5,6,7,...], hence the third missing number is 6.


Constraints:
`1 <= nums.length <= 5 * 104`
`1 <= nums[i] <= 107`
`nums` is sorted in ascending order, and all the elements are unique.

`1 <= k <= 108`
Follow up: Can you find a logarithmic time complexity (i.e., `O(log(n))`) solution?",Medium,https://leetcode.com/problems/missing-element-in-sorted-array,"Facebook,Bloomberg",Binary Search,901,,"given an integer array `nums` which is sorted in ascending order and all of its elements are unique and given also an integer `k`, return the `kth` missing number starting from the leftmost number of the array.","input: nums = [4,7,9,10], k = 1 output: 5 explanation: the first missing number is 5. example 2: input: nums = [4,7,9,10], k = 3 output: 8 explanation: the missing numbers are [5,6,8,...], hence the third missing number is 8. example 3: input: nums = [1,2,4], k = 3 output: 6 explanation: the missing numbers are [3,5,6,7,...], hence the third missing number is 6.","`1 <= nums.length <= 5 * 10^4` `1 <= nums[i] <= 10^7` `nums` is sorted in ascending order, and all the elements are unique. `1 <= k <= 10^8`","can you find a logarithmic time complexity (i.e., `o(log(n))`) solution?"
1061,Lexicographically Smallest Equivalent String,"Given strings `A` and `B` of the same length, we say A[i] and B[i] are equivalent characters. For example, if `A = ""abc""` and `B = ""cde""`, then we have `'a' == 'c', 'b' == 'd', 'c' == 'e'`.

Equivalent characters follow the usual rules of any equivalence relation:
Reflexivity: 'a' == 'a'
Symmetry: 'a' == 'b' implies 'b' == 'a'
Transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'
For example, given the equivalency information from `A` and `B` above, `S = ""eed""`, `""acd""`, and `""aab""` are equivalent strings, and `""aab""` is the lexicographically smallest equivalent string of `S`.

Return the lexicographically smallest equivalent string of `S` by using the equivalency information from `A` and `B`.


Example 1:
Input: A = ""parker"", B = ""morris"", S = ""parser""
Output: ""makkek""
Explanation: Based on the equivalency information in `A` and `B`, we can group their characters as `[m,p]`, `[a,o]`, `[k,r,s]`, `[e,i]`. The characters in each group are equivalent and sorted in lexicographical order. So the answer is `""makkek""`.


Example 2:
Input: A = ""hello"", B = ""world"", S = ""hold""
Output: ""hdld""
Explanation:  Based on the equivalency information in `A` and `B`, we can group their characters as `[h,w]`, `[d,e,o]`, `[l,r]`. So only the second letter `'o'` in `S` is changed to `'d'`, the answer is `""hdld""`.


Example 3:
Input: A = ""leetcode"", B = ""programs"", S = ""sourcecode""
Output: ""aauaaaaada""
Explanation:  We group the equivalent characters in `A` and `B` as `[a,o,e,r,s,c]`, `[l,p]`, `[g,t]` and `[d,m]`, thus all letters in `S` except `'u'` and `'d'` are transformed to `'a'`, the answer is `""aauaaaaada""`.

Note:
String `A`, `B` and `S` consist of only lowercase English letters from `'a'` - `'z'`.

The lengths of string `A`, `B` and `S` are between `1` and `1000`.

String `A` and `B` are of the same length.",Medium,https://leetcode.com/problems/lexicographically-smallest-equivalent-string,,,137,,"given strings `a` and `b` of the same length, we say a[i] and b[i] are equivalent characters. for example, if `a = ""abc""` and `b = ""cde""`, then we have `'a' == 'c', 'b' == 'd', 'c' == 'e'`. equivalent characters follow the usual rules of any equivalence relation: reflexivity: 'a' == 'a' symmetry: 'a' == 'b' implies 'b' == 'a' transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c' for example, given the equivalency information from `a` and `b` above, `s = ""eed""`, `""acd""`, and `""aab""` are equivalent strings, and `""aab""` is the lexicographically smallest equivalent string of `s`. return the lexicographically smallest equivalent string of `s` by using the equivalency information from `a` and `b`.","input: a = ""parker"", b = ""morris"", s = ""parser"" output: ""makkek"" explanation: based on the equivalency information in `a` and `b`, we can group their characters as `[m,p]`, `[a,o]`, `[k,r,s]`, `[e,i]`. the characters in each group are equivalent and sorted in lexicographical order. so the answer is `""makkek""`. example 2: input: a = ""hello"", b = ""world"", s = ""hold"" output: ""hdld"" explanation: based on the equivalency information in `a` and `b`, we can group their characters as `[h,w]`, `[d,e,o]`, `[l,r]`. so only the second letter `'o'` in `s` is changed to `'d'`, the answer is `""hdld""`. example 3: input: a = ""leetcode"", b = ""programs"", s = ""sourcecode"" output: ""aauaaaaada"" explanation: we group the equivalent characters in `a` and `b` as `[a,o,e,r,s,c]`, `[l,p]`, `[g,t]` and `[d,m]`, thus all letters in `s` except `'u'` and `'d'` are transformed to `'a'`, the answer is `""aauaaaaada""`. note: string `a`, `b` and `s` consist of only lowercase english letters from `'a'` - `'z'`. the lengths of string `a`, `b` and `s` are between `1` and `1000`. string `a` and `b` are of the same length.",,
1062,Longest Repeating Substring,"Given a string `S`, find out the length of the longest repeating substring(s). Return `0` if no repeating substring exists.


Example 1:
Input: S = ""abcd""
Output: 0
Explanation: There is no repeating substring.


Example 2:
Input: S = ""abbaba""
Output: 2
Explanation: The longest repeating substrings are ""ab"" and ""ba"", each of which occurs twice.


Example 3:
Input: S = ""aabcaabdaab""
Output: 3
Explanation: The longest repeating substring is ""aab"", which occurs `3` times.


Example 4:
Input: S = ""aaaaa""
Output: 4
Explanation: The longest repeating substring is ""aaaa"", which occurs twice.


Constraints:
The string `S` consists of only lowercase English letters from `'a'` - `'z'`.

`1 <= S.length <= 1500`",Medium,https://leetcode.com/problems/longest-repeating-substring,Google,String,378,,"given a string `s`, find out the length of the longest repeating substring(s). return `0` if no repeating substring exists.","input: s = ""abcd"" output: 0 explanation: there is no repeating substring. example 2: input: s = ""abbaba"" output: 2 explanation: the longest repeating substrings are ""ab"" and ""ba"", each of which occurs twice. example 3: input: s = ""aabcaabdaab"" output: 3 explanation: the longest repeating substring is ""aab"", which occurs `3` times. example 4: input: s = ""aaaaa"" output: 4 explanation: the longest repeating substring is ""aaaa"", which occurs twice.",the string `s` consists of only lowercase english letters from `'a'` - `'z'`. `1 <= s.length <= 1500`,
1063,Number of Valid Subarrays,"Given an array `A` of integers, return the number of non-empty continuous subarrays that satisfy the following condition:
The leftmost element of the subarray is not larger than other elements in the subarray.


Example 1:
Input: [1,4,2,5,3]
Output: 11
Explanation: There are 11 valid subarrays: [1],[4],[2],[5],[3],[1,4],[2,5],[1,4,2],[2,5,3],[1,4,2,5],[1,4,2,5,3].


Example 2:
Input: [3,2,1]
Output: 3
Explanation: The 3 valid subarrays are: [3],[2],[1].


Example 3:
Input: [2,2,2]
Output: 6
Explanation: There are 6 valid subarrays: [2],[2],[2],[2,2],[2,2],[2,2,2].

Note:
`1 <= A.length <= 50000`
`0 <= A[i] <= 100000`",Hard,https://leetcode.com/problems/number-of-valid-subarrays,Hulu,Stack,126,,"given an array `a` of integers, return the number of non-empty continuous subarrays that satisfy the following condition: the leftmost element of the subarray is not larger than other elements in the subarray.","input: [1,4,2,5,3] output: 11 explanation: there are 11 valid subarrays: [1],[4],[2],[5],[3],[1,4],[2,5],[1,4,2],[2,5,3],[1,4,2,5],[1,4,2,5,3]. example 2: input: [3,2,1] output: 3 explanation: the 3 valid subarrays are: [3],[2],[1]. example 3: input: [2,2,2] output: 6 explanation: there are 6 valid subarrays: [2],[2],[2],[2,2],[2,2],[2,2,2]. note: `1 <= a.length <= 50000` `0 <= a[i] <= 100000`",,
1064,Fixed Point,"Given an array of distinct integers `arr`, where `arr` is sorted in ascending order, return the smallest index `i` that satisfies `arr[i] == i`. If there is no such index, return `-1`.


Example 1:
Input: arr = [-10,-5,0,3,7]
Output: 3
Explanation: For the given array, `arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3`, thus the output is 3.


Example 2:
Input: arr = [0,2,5,8,17]
Output: 0
Explanation: `arr[0] = 0`, thus the output is 0.


Example 3:
Input: arr = [-10,-5,3,4,7,9]
Output: -1
Explanation: There is no such `i` that `arr[i] == i`, thus the output is -1.


Constraints:
`1 <= arr.length < 104`
`-109 <= arr[i] <= 109`
Follow up: The `O(n)` solution is very straightforward. Can we do better?",Easy,https://leetcode.com/problems/fixed-point,Uber,"Array,Binary Search",193,,"given an array of distinct integers `arr`, where `arr` is sorted in ascending order, return the smallest index `i` that satisfies `arr[i] == i`. if there is no such index, return `-1`.","input: arr = [-10,-5,0,3,7] output: 3 explanation: for the given array, `arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3`, thus the output is 3. example 2: input: arr = [0,2,5,8,17] output: 0 explanation: `arr[0] = 0`, thus the output is 0. example 3: input: arr = [-10,-5,3,4,7,9] output: -1 explanation: there is no such `i` that `arr[i] == i`, thus the output is -1.",`1 <= arr.length < 10^4` `-10^9 <= arr[i] <= 10^9`,the `o(n)` solution is very straightforward. can we do better?
1065,Index Pairs of a String,"Given a `text` string and `words` (a list of strings), return all index pairs `[i, j]` so that the substring `text[i]...text[j]` is in the list of `words`.


Example 1:
Input: text = ""thestoryofleetcodeandme"", words = [""story"",""fleet"",""leetcode""]
Output: [[3,7],[9,13],[10,17]]

Example 2:
Input: text = ""ababa"", words = [""aba"",""ab""]
Output: [[0,1],[0,2],[2,3],[2,4]]
Explanation: 
Notice that matches can overlap, see ""aba"" is found in [0,2] and [2,4].

Note:
All strings contains only lowercase English letters.

It's guaranteed that all strings in `words` are different.

`1 <= text.length <= 100`
`1 <= words.length <= 20`
`1 <= words[i].length <= 50`
Return the pairs `[i,j]` in sorted order (i.e. sort them by their first coordinate in case of ties sort them by their second coordinate).",Easy,https://leetcode.com/problems/index-pairs-of-a-string,Amazon,"String,Trie",142,,"given a `text` string and `words` (a list of strings), return all index pairs `[i, j]` so that the substring `text[i]...text[j]` is in the list of `words`.","input: text = ""thestoryofleetcodeandme"", words = [""story"",""fleet"",""leetcode""] output: [[3,7],[9,13],[10,17]] example 2: input: text = ""ababa"", words = [""aba"",""ab""] output: [[0,1],[0,2],[2,3],[2,4]] explanation: notice that matches can overlap, see ""aba"" is found in [0,2] and [2,4]. note: all strings contains only lowercase english letters. it's guaranteed that all strings in `words` are different. `1 <= text.length <= 100` `1 <= words.length <= 20` `1 <= words[i].length <= 50` return the pairs `[i,j]` in sorted order (i.e. sort them by their first coordinate in case of ties sort them by their second coordinate).",,
1066,Campus Bikes II,"On a campus represented as a 2D grid, there are `N` workers and `M` bikes, with `N <= M`. Each worker and bike is a 2D coordinate on this grid.

We assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.

The Manhattan distance between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.

Return the minimum possible sum of Manhattan distances between each worker and their assigned bike.


Example 1:
Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
Output: 6
Explanation: 
We assign bike 0 to worker 0, bike 1 to worker 1. The Manhattan distance of both assignments is 3, so the output is 6.


Example 2:
Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
Output: 4
Explanation: 
We first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both assignments lead to sum of the Manhattan distances as 4.


Example 3:
Input: workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]]
Output: 4995

Constraints:
`N == workers.length`
`M == bikes.length`
`1 <= N <= M <= 10`
`workers[i].length == 2`
`bikes[i].length == 2`
`0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000`
All the workers and the bikes locations are unique.",Medium,https://leetcode.com/problems/campus-bikes-ii,Google,"Dynamic Programming,Backtracking",522,"[Campus Bikes, /problems/campus-bikes/, Medium]","on a campus represented as a 2d grid, there are `n` workers and `m` bikes, with `n <= m`. each worker and bike is a 2d coordinate on this grid. we assign one unique bike to each worker so that the sum of the manhattan distances between each worker and their assigned bike is minimized. the manhattan distance between two points `p1` and `p2` is `manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`. return the minimum possible sum of manhattan distances between each worker and their assigned bike.","input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]] output: 6 explanation: we assign bike 0 to worker 0, bike 1 to worker 1. the manhattan distance of both assignments is 3, so the output is 6. example 2: input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]] output: 4 explanation: we first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. both assignments lead to sum of the manhattan distances as 4. example 3: input: workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]] output: 4995","`n == workers.length` `m == bikes.length` `1 <= n <= m <= 10` `workers[i].length == 2` `bikes[i].length == 2` `0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000` all the workers and the bikes locations are unique.",
1067,Digit Count in Range,"Given an integer `d` between `0` and `9`, and two positive integers `low` and `high` as lower and upper bounds, respectively. Return the number of times that `d` occurs as a digit in all integers between `low` and `high`, including the bounds `low` and `high`.


Example 1:
Input: d = 1, low = 1, high = 13
Output: 6
Explanation: 
The digit `d=1` occurs `6` times in `1,10,11,12,13`. Note that the digit `d=1` occurs twice in the number `11`.


Example 2:
Input: d = 3, low = 100, high = 250
Output: 35
Explanation: 
The digit `d=3` occurs `35` times in `103,113,123,130,131,...,238,239,243`.

Note:
`0 <= d <= 9`
`1 <= low <= high <= 2×10^8`",Hard,https://leetcode.com/problems/digit-count-in-range,"eBay,Amazon","Math,Dynamic Programming",48,"[Number of Digit One, /problems/number-of-digit-one/, Hard]","given an integer `d` between `0` and `9`, and two positive integers `low` and `high` as lower and upper bounds, respectively. return the number of times that `d` occurs as a digit in all integers between `low` and `high`, including the bounds `low` and `high`.","input: d = 1, low = 1, high = 13 output: 6 explanation: the digit `d=1` occurs `6` times in `1,10,11,12,13`. note that the digit `d=1` occurs twice in the number `11`. example 2: input: d = 3, low = 100, high = 250 output: 35 explanation: the digit `d=3` occurs `35` times in `103,113,123,130,131,...,238,239,243`. note: `0 <= d <= 9` `1 <= low <= high <= 2×10^8`",,
1068,Product Sales Analysis I,SQL Schema,Easy,https://leetcode.com/problems/product-sales-analysis-i,Amazon,,59,,sql schema,,,
1069,Product Sales Analysis II,SQL Schema,Easy,https://leetcode.com/problems/product-sales-analysis-ii,Amazon,,34,,sql schema,,,
1070,Product Sales Analysis III,SQL Schema,Medium,https://leetcode.com/problems/product-sales-analysis-iii,Amazon,,49,,sql schema,,,
1071,Greatest Common Divisor of Strings,"For two strings `s` and `t`, we say ""`t` divides `s`"" if and only if `s = t + ... + t`  (`t` concatenated with itself 1 or more times)
Given two strings str1 and str2, return the largest string `x` such that `x` divides both `str1` and `str2`.


Example 1:
Input: str1 = ""ABCABC"", str2 = ""ABC""
Output: ""ABC""

Example 2:
Input: str1 = ""ABABAB"", str2 = ""ABAB""
Output: ""AB""

Example 3:
Input: str1 = ""LEET"", str2 = ""CODE""
Output: """"

Example 4:
Input: str1 = ""ABCDEF"", str2 = ""ABC""
Output: """"

Constraints:
`1 <= str1.length <= 1000`
`1 <= str2.length <= 1000`
`str1` and `str2` consist of English uppercase letters.",Easy,https://leetcode.com/problems/greatest-common-divisor-of-strings,"Amazon,Atlassian,Visa",String,770,,"for two strings `s` and `t`, we say ""`t` divides `s`"" if and only if `s = t + ... + t` (`t` concatenated with itself 1 or more times) given two strings str1 and str2, return the largest string `x` such that `x` divides both `str1` and `str2`.","input: str1 = ""abcabc"", str2 = ""abc"" output: ""abc"" example 2: input: str1 = ""ababab"", str2 = ""abab"" output: ""ab"" example 3: input: str1 = ""leet"", str2 = ""code"" output: """" example 4: input: str1 = ""abcdef"", str2 = ""abc"" output: """"",`1 <= str1.length <= 1000` `1 <= str2.length <= 1000` `str1` and `str2` consist of english uppercase letters.,
1072,Flip Columns For Maximum Number of Equal Rows,"You are given an `m x n` binary matrix `matrix`.

You can choose any number of columns in the matrix and flip every cell in that column (i.e., Change the value of the cell from `0` to `1` or vice versa).

Return the maximum number of rows that have all values equal after some number of flips.


Example 1:
Input: matrix = [[0,1],[1,1]]
Output: 1
Explanation: After flipping no values, 1 row has all values equal.


Example 2:
Input: matrix = [[0,1],[1,0]]
Output: 2
Explanation: After flipping values in the first column, both rows have equal values.


Example 3:
Input: matrix = [[0,0,0],[0,0,1],[1,1,0]]
Output: 2
Explanation: After flipping values in the first two columns, the last two rows have equal values.


Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 300`
`matrix[i][j]` is either `0` or `1`.",Medium,https://leetcode.com/problems/flip-columns-for-maximum-number-of-equal-rows,,,353,,"you are given an `m x n` binary matrix `matrix`. you can choose any number of columns in the matrix and flip every cell in that column (i.e., change the value of the cell from `0` to `1` or vice versa). return the maximum number of rows that have all values equal after some number of flips.","input: matrix = [[0,1],[1,1]] output: 1 explanation: after flipping no values, 1 row has all values equal. example 2: input: matrix = [[0,1],[1,0]] output: 2 explanation: after flipping values in the first column, both rows have equal values. example 3: input: matrix = [[0,0,0],[0,0,1],[1,1,0]] output: 2 explanation: after flipping values in the first two columns, the last two rows have equal values.","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 300` `matrix[i][j]` is either `0` or `1`.",
1073,Adding Two Negabinary Numbers,"Given two numbers `arr1` and `arr2` in base -2, return the result of adding them together.

Each number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.  For example, `arr = [1,1,0,1]` represents the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`.  A number `arr` in array, format is also guaranteed to have no leading zeros: either `arr == [0]` or `arr[0] == 1`.

Return the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s with no leading zeros.


Example 1:
Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]
Output: [1,0,0,0,0]
Explanation: arr1 represents 11, arr2 represents 5, the output represents 16.


Example 2:
Input: arr1 = [0], arr2 = [0]
Output: [0]

Example 3:
Input: arr1 = [0], arr2 = [1]
Output: [1]

Constraints:
`1 <= arr1.length, arr2.length <= 1000`
`arr1[i]` and `arr2[i]` are `0` or `1`
`arr1` and `arr2` have no leading zeros",Medium,https://leetcode.com/problems/adding-two-negabinary-numbers,Grab,Math,153,,"given two numbers `arr1` and `arr2` in base -2, return the result of adding them together. each number is given in array format: as an array of 0s and 1s, from most significant bit to least significant bit. for example, `arr = [1,1,0,1]` represents the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`. a number `arr` in array, format is also guaranteed to have no leading zeros: either `arr == [0]` or `arr[0] == 1`. return the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s with no leading zeros.","input: arr1 = [1,1,1,1,1], arr2 = [1,0,1] output: [1,0,0,0,0] explanation: arr1 represents 11, arr2 represents 5, the output represents 16. example 2: input: arr1 = [0], arr2 = [0] output: [0] example 3: input: arr1 = [0], arr2 = [1] output: [1]","`1 <= arr1.length, arr2.length <= 1000` `arr1[i]` and `arr2[i]` are `0` or `1` `arr1` and `arr2` have no leading zeros",
1074,Number of Submatrices That Sum to Target,"Given a `matrix` and a `target`, return the number of non-empty submatrices that sum to target.

A submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` with `x1 <= x <= x2` and `y1 <= y <= y2`.

Two submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if they have some coordinate that is different: for example, if `x1 != x1'`.


Example 1:
Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.


Example 2:
Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.


Example 3:
Input: matrix = [[904]], target = 0
Output: 0

Constraints:
`1 <= matrix.length <= 100`
`1 <= matrix[0].length <= 100`
`-1000 <= matrix[i] <= 1000`
`-10^8 <= target <= 10^8`",Hard,https://leetcode.com/problems/number-of-submatrices-that-sum-to-target,Google,"Array,Dynamic Programming,Sliding Window",820,,"given a `matrix` and a `target`, return the number of non-empty submatrices that sum to target. a submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` with `x1 <= x <= x2` and `y1 <= y <= y2`. two submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if they have some coordinate that is different: for example, if `x1 != x1'`.","input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0 output: 4 explanation: the four 1x1 submatrices that only contain 0. example 2: input: matrix = [[1,-1],[-1,1]], target = 0 output: 5 explanation: the two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix. example 3: input: matrix = [[904]], target = 0 output: 0",`1 <= matrix.length <= 10^0` `1 <= matrix[0].length <= 10^0` `-1000 <= matrix[i] <= 1000` `-10^8 <= target <= 10^8`,
1075,Project Employees I,SQL Schema,Easy,https://leetcode.com/problems/project-employees-i,Facebook,,42,,sql schema,,,
1076,Project Employees II,SQL Schema,Easy,https://leetcode.com/problems/project-employees-ii,Facebook,,84,,sql schema,,,
1077,Project Employees III,SQL Schema,Medium,https://leetcode.com/problems/project-employees-iii,Facebook,,113,,sql schema,,,
1078,Occurrences After Bigram,"Given words `first` and `second`, consider occurrences in some `text` of the form ""`first second third`"", where `second` comes immediately after `first`, and `third` comes immediately after `second`.

For each such occurrence, add ""`third`"" to the answer, and return the answer.


Example 1:
Input: text = ""alice is a good girl she is a good student"", first = ""a"", second = ""good""
Output: [""girl"",""student""]

Example 2:
Input: text = ""we will we will rock you"", first = ""we"", second = ""will""
Output: [""we"",""rock""]
Note:
`1 <= text.length <= 1000`
`text` consists of space separated words, where each word consists of lowercase English letters.

`1 <= first.length, second.length <= 10`
`first` and `second` consist of lowercase English letters.",Easy,https://leetcode.com/problems/occurrences-after-bigram,Google,Hash Table,218,,"given words `first` and `second`, consider occurrences in some `text` of the form ""`first second third`"", where `second` comes immediately after `first`, and `third` comes immediately after `second`. for each such occurrence, add ""`third`"" to the answer, and return the answer.","input: text = ""alice is a good girl she is a good student"", first = ""a"", second = ""good"" output: [""girl"",""student""] example 2: input: text = ""we will we will rock you"", first = ""we"", second = ""will"" output: [""we"",""rock""] note: `1 <= text.length <= 1000` `text` consists of space separated words, where each word consists of lowercase english letters. `1 <= first.length, second.length <= 10` `first` and `second` consist of lowercase english letters.",,
1079,Letter Tile Possibilities,"You have `n`  `tiles`, where each tile has one letter `tiles[i]` printed on it.

Return the number of possible non-empty sequences of letters you can make using the letters printed on those `tiles`.


Example 1:
Input: tiles = ""AAB""
Output: 8
Explanation: The possible sequences are ""A"", ""B"", ""AA"", ""AB"", ""BA"", ""AAB"", ""ABA"", ""BAA"".


Example 2:
Input: tiles = ""AAABBC""
Output: 188

Example 3:
Input: tiles = ""V""
Output: 1

Constraints:
`1 <= tiles.length <= 7`
`tiles` consists of uppercase English letters.",Medium,https://leetcode.com/problems/letter-tile-possibilities,Microsoft,Backtracking,992,,"you have `n` `tiles`, where each tile has one letter `tiles[i]` printed on it. return the number of possible non-empty sequences of letters you can make using the letters printed on those `tiles`.","input: tiles = ""aab"" output: 8 explanation: the possible sequences are ""a"", ""b"", ""aa"", ""ab"", ""ba"", ""aab"", ""aba"", ""baa"". example 2: input: tiles = ""aaabbc"" output: 188 example 3: input: tiles = ""v"" output: 1",`1 <= tiles.length <= 7` `tiles` consists of uppercase english letters.,
1080,Insufficient Nodes in Root to Leaf Paths,"Given the `root` of a binary tree, consider all root to leaf paths: paths from the root to any leaf.  (A leaf is a node with no children.)
A `node` is insufficient if every such root to leaf path intersecting this `node` has sum strictly less than `limit`.

Delete all insufficient nodes simultaneously, and return the root of the resulting binary tree.


Example 1:
Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1
Output: [1,2,3,4,null,null,7,8,9,null,14]

Example 2:
Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22
Output: [5,4,8,11,null,17,4,7,null,null,null,5]

Example 3:
Input: root = [1,2,-3,-5,null,4,null], limit = -1
Output: [1,null,-3,4]
Note:
The given tree will have between `1` and `5000` nodes.

`-10^5 <= node.val <= 10^5`
`-10^9 <= limit <= 10^9`",Medium,https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths,Amazon,Depth-first Search,251,,"given the `root` of a binary tree, consider all root to leaf paths: paths from the root to any leaf. (a leaf is a node with no children.) a `node` is insufficient if every such root to leaf path intersecting this `node` has sum strictly less than `limit`. delete all insufficient nodes simultaneously, and return the root of the resulting binary tree.","input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1 output: [1,2,3,4,null,null,7,8,9,null,14] example 2: input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22 output: [5,4,8,11,null,17,4,7,null,null,null,5] example 3: input: root = [1,2,-3,-5,null,4,null], limit = -1 output: [1,null,-3,4] note: the given tree will have between `1` and `5000` nodes. `-10^5 <= node.val <= 10^5` `-10^9 <= limit <= 10^9`",,
1081,Smallest Subsequence of Distinct Characters,"Return the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once.

Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/

Example 1:
Input: s = ""bcabc""
Output: ""abc""

Example 2:
Input: s = ""cbacdcbc""
Output: ""acdb""

Constraints:
`1 <= s.length <= 1000`
`s` consists of lowercase English letters.",Medium,https://leetcode.com/problems/smallest-subsequence-of-distinct-characters,"Amazon,FactSet,Google,ByteDance","String,Stack,Greedy",866,"[Find the Most Competitive Subsequence, /problems/find-the-most-competitive-subsequence/, Medium]",return the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once. note: this question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/,"input: s = ""bcabc"" output: ""abc"" example 2: input: s = ""cbacdcbc"" output: ""acdb""",`1 <= s.length <= 1000` `s` consists of lowercase english letters.,
1082,Sales Analysis I,SQL Schema,Easy,https://leetcode.com/problems/sales-analysis-i,Amazon,,103,,sql schema,,,
1083,Sales Analysis II,SQL Schema,Easy,https://leetcode.com/problems/sales-analysis-ii,Amazon,,114,,sql schema,,,
1084,Sales Analysis III,SQL Schema,Easy,https://leetcode.com/problems/sales-analysis-iii,Amazon,,109,,sql schema,,,
1085,Sum of Digits in the Minimum Number,"Given an array `A` of positive integers, let `S` be the sum of the digits of the minimal element of `A`.

Return 0 if `S` is odd, otherwise return 1.


Example 1:
Input: [34,23,1,24,75,33,54,8]
Output: 0
Explanation: 
The minimal element is 1, and the sum of those digits is S = 1 which is odd, so the answer is 0.


Example 2:
Input: [99,77,33,66,55]
Output: 1
Explanation: 
The minimal element is 33, and the sum of those digits is S = 3 + 3 = 6 which is even, so the answer is 1.


Constraints:
`1 <= A.length <= 100`
`1 <= A[i] <= 100`",Easy,https://leetcode.com/problems/sum-of-digits-in-the-minimum-number,Amazon,Array,58,"[Add Digits, /problems/add-digits/, Easy]","given an array `a` of positive integers, let `s` be the sum of the digits of the minimal element of `a`. return 0 if `s` is odd, otherwise return 1.","input: [34,23,1,24,75,33,54,8] output: 0 explanation: the minimal element is 1, and the sum of those digits is s = 1 which is odd, so the answer is 0. example 2: input: [99,77,33,66,55] output: 1 explanation: the minimal element is 33, and the sum of those digits is s = 3 + 3 = 6 which is even, so the answer is 1.",`1 <= a.length <= 10^0` `1 <= a[i] <= 10^0`,
1086,High Five,"Given a list of the scores of different students, `items`, where `items[i] = [IDi, scorei]` represents one score from a student with `IDi`, calculate each student's top five average.

Return the answer as an array of pairs `result`, where `result[j] = [IDj, topFiveAveragej]` represents the student with `IDj` and their top five average. Sort `result` by `IDj` in increasing order.

A student's top five average is calculated by taking the sum of their top five scores and dividing it by `5` using integer division.


Example 1:
Input: items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]
Output: [[1,87],[2,88]]
Explanation: 
The student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87.

The student with ID = 2 got scores 93, 97, 77, 100, and 76. Their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but with integer division their average converts to 88.


Example 2:
Input: items = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]]
Output: [[1,100],[7,100]]

Constraints:
`1 <= items.length <= 1000`
`items[i].length == 2`
`1 <= IDi <= 1000`
`0 <= scorei <= 100`
For each `IDi`, there will be at least five scores.",Easy,https://leetcode.com/problems/high-five,Goldman Sachs,"Array,Hash Table,Sort",432,,"given a list of the scores of different students, `items`, where `items[i] = [idi, scorei]` represents one score from a student with `idi`, calculate each student's top five average. return the answer as an array of pairs `result`, where `result[j] = [idj, topfiveaveragej]` represents the student with `idj` and their top five average. sort `result` by `idj` in increasing order. a student's top five average is calculated by taking the sum of their top five scores and dividing it by `5` using integer division.","input: items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]] output: [[1,87],[2,88]] explanation: the student with id = 1 got scores 91, 92, 60, 65, 87, and 100. their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87. the student with id = 2 got scores 93, 97, 77, 100, and 76. their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but with integer division their average converts to 88. example 2: input: items = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]] output: [[1,100],[7,100]]","`1 <= items.length <= 1000` `items[i].length == 2` `1 <= idi <= 1000` `0 <= scorei <= 10^0` for each `idi`, there will be at least five scores.",
1087,Brace Expansion,"You are given a string `s` representing a list of words. Each letter in the word has one or more options.

If there is one option, the letter is represented as is.

If there is more than one option, then curly braces delimit the options. For example, `""{a,b,c}""` represents options `[""a"", ""b"", ""c""]`.

For example, if `s = ""a{b,c}""`, the first character is always `'a'`, but the second character can be `'b'` or `'c'`. The original list is `[""ab"", ""ac""]`.

Return all words that can be formed in this manner, sorted in lexicographical order.


Example 1:
Input: s = ""{a,b}c{d,e}f""
Output: [""acdf"",""acef"",""bcdf"",""bcef""]

Example 2:
Input: s = ""abcd""
Output: [""abcd""]

Constraints:
`1 <= s.length <= 50`
`s` consists of curly brackets `'{}'`, commas `','`, and lowercase English letters.

`s` is guaranteed to be a valid input.

There are no nested curly brackets.

All characters inside a pair of consecutive opening and ending curly brackets are different.",Medium,https://leetcode.com/problems/brace-expansion,Google,Backtracking,325,"[Decode String, /problems/decode-string/, Medium], [Letter Case Permutation, /problems/letter-case-permutation/, Medium], [Brace Expansion II, /problems/brace-expansion-ii/, Hard]","you are given a string `s` representing a list of words. each letter in the word has one or more options. if there is one option, the letter is represented as is. if there is more than one option, then curly braces delimit the options. for example, `""{a,b,c}""` represents options `[""a"", ""b"", ""c""]`. for example, if `s = ""a{b,c}""`, the first character is always `'a'`, but the second character can be `'b'` or `'c'`. the original list is `[""ab"", ""ac""]`. return all words that can be formed in this manner, sorted in lexicographical order.","input: s = ""{a,b}c{d,e}f"" output: [""acdf"",""acef"",""bcdf"",""bcef""] example 2: input: s = ""abcd"" output: [""abcd""]","`1 <= s.length <= 50` `s` consists of curly brackets `'{}'`, commas `','`, and lowercase english letters. `s` is guaranteed to be a valid input. there are no nested curly brackets. all characters inside a pair of consecutive opening and ending curly brackets are different.",
1088,Confusing Number II,"We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid.

A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.(Note that the rotated number can be greater than the original number.)
Given a positive integer `N`, return the number of confusing numbers between `1` and `N` inclusive.


Example 1:
Input: 20
Output: 6
Explanation: 
The confusing numbers are [6,9,10,16,18,19].

6 converts to 9.

9 converts to 6.

10 converts to 01 which is just 1.

16 converts to 91.

18 converts to 81.

19 converts to 61.


Example 2:
Input: 100
Output: 19
Explanation: 
The confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100].

Note:
`1 <= N <= 10^9`",Hard,https://leetcode.com/problems/confusing-number-ii,Google,"Math,Backtracking",252,"[Confusing Number, /problems/confusing-number/, Easy]","we can rotate digits by 180 degrees to form new digits. when 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. when 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid. a confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.(note that the rotated number can be greater than the original number.) given a positive integer `n`, return the number of confusing numbers between `1` and `n` inclusive.","input: 20 output: 6 explanation: the confusing numbers are [6,9,10,16,18,19]. 6 converts to 9. 9 converts to 6. 10 converts to 01 which is just 1. 16 converts to 91. 18 converts to 81. 19 converts to 61. example 2: input: 100 output: 19 explanation: the confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100]. note: `1 <= n <= 10^9`",,
1089,Duplicate Zeros,"Given a fixed length array `arr` of integers, duplicate each occurrence of zero, shifting the remaining elements to the right.

Note that elements beyond the length of the original array are not written.

Do the above modifications to the input array in place, do not return anything from your function.


Example 1:
Input: [1,0,2,3,0,4,5,0]
Output: null
Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]

Example 2:
Input: [1,2,3]
Output: null
Explanation: After calling your function, the input array is modified to: [1,2,3]
Note:
`1 <= arr.length <= 10000`
`0 <= arr[i] <= 9`",Easy,https://leetcode.com/problems/duplicate-zeros,Google,Array,904,,"given a fixed length array `arr` of integers, duplicate each occurrence of zero, shifting the remaining elements to the right. note that elements beyond the length of the original array are not written. do the above modifications to the input array in place, do not return anything from your function.","input: [1,0,2,3,0,4,5,0] output: null explanation: after calling your function, the input array is modified to: [1,0,0,2,3,0,0,4] example 2: input: [1,2,3] output: null explanation: after calling your function, the input array is modified to: [1,2,3] note: `1 <= arr.length <= 10000` `0 <= arr[i] <= 9`",,
1090,Largest Values From Labels,"We have a set of items: the `i`-th item has value `values[i]` and label `labels[i]`.

Then, we choose a subset `S` of these items, such that:
`|S| <= num_wanted`
For every label `L`, the number of items in `S` with label `L` is `<= use_limit`.

Return the largest possible sum of the subset `S`.


Example 1:
Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], `num_wanted `= 3, use_limit = 1
Output: 9
Explanation: The subset chosen is the first, third, and fifth item.


Example 2:
Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], `num_wanted `= 3, use_limit = 2
Output: 12
Explanation: The subset chosen is the first, second, and third item.


Example 3:
Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], `num_wanted `= 3, use_limit = 1
Output: 16
Explanation: The subset chosen is the first and fourth item.


Example 4:
Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], `num_wanted `= 3, use_limit = 2
Output: 24
Explanation: The subset chosen is the first, second, and fourth item.

Note:
`1 <= values.length == labels.length <= 20000`
`0 <= values[i], labels[i] <= 20000`
`1 <= num_wanted, use_limit <= values.length`",Medium,https://leetcode.com/problems/largest-values-from-labels,Google,"Hash Table,Greedy",178,,"we have a set of items: the `i`-th item has value `values[i]` and label `labels[i]`. then, we choose a subset `s` of these items, such that: `|s| <= num_wanted` for every label `l`, the number of items in `s` with label `l` is `<= use_limit`. return the largest possible sum of the subset `s`.","input: values = [5,4,3,2,1], labels = [1,1,2,2,3], `num_wanted `= 3, use_limit = 1 output: 9 explanation: the subset chosen is the first, third, and fifth item. example 2: input: values = [5,4,3,2,1], labels = [1,3,3,3,2], `num_wanted `= 3, use_limit = 2 output: 12 explanation: the subset chosen is the first, second, and third item. example 3: input: values = [9,8,8,7,6], labels = [0,0,0,1,1], `num_wanted `= 3, use_limit = 1 output: 16 explanation: the subset chosen is the first and fourth item. example 4: input: values = [9,8,8,7,6], labels = [0,0,0,1,1], `num_wanted `= 3, use_limit = 2 output: 24 explanation: the subset chosen is the first, second, and fourth item. note: `1 <= values.length == labels.length <= 20000` `0 <= values[i], labels[i] <= 20000` `1 <= num_wanted, use_limit <= values.length`",,
1091,Shortest Path in Binary Matrix,"Given an `n x n` binary matrix `grid`, return the length of the shortest clear path in the matrix. If there is no clear path, return `-1`.

A clear path in a binary matrix is a path from the top-left cell (i.e., `(0, 0)`) to the bottom-right cell (i.e., `(n - 1, n - 1)`) such that:
All the visited cells of the path are `0`.

All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).

The length of a clear path is the number of visited cells of this path.


Example 1:
Input: grid = [[0,1],[1,0]]
Output: 2

Example 2:
Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4

Example 3:
Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1

Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 100`
`grid[i][j] is 0 or 1`",Medium,https://leetcode.com/problems/shortest-path-in-binary-matrix,"Amazon,Google,Facebook,Oracle,Snapchat",Breadth-first Search,1144,,"given an `n x n` binary matrix `grid`, return the length of the shortest clear path in the matrix. if there is no clear path, return `-1`. a clear path in a binary matrix is a path from the top-left cell (i.e., `(0, 0)`) to the bottom-right cell (i.e., `(n - 1, n - 1)`) such that: all the visited cells of the path are `0`. all the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner). the length of a clear path is the number of visited cells of this path.","input: grid = [[0,1],[1,0]] output: 2 example 2: input: grid = [[0,0,0],[1,1,0],[1,1,0]] output: 4 example 3: input: grid = [[1,0,0],[1,1,0],[1,1,0]] output: -1",`n == grid.length` `n == grid[i].length` `1 <= n <= 10^0` `grid[i][j] is 0 or 1`,
1092,Shortest Common Supersequence,"Given two strings `str1` and `str2`, return the shortest string that has both `str1` and `str2` as subsequences.  If multiple answers exist, you may return any of them.

(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)

Example 1:
Input: str1 = ""abac"", str2 = ""cab""
Output: ""cabac""
Explanation: 
str1 = ""abac"" is a subsequence of ""cabac"" because we can delete the first ""c"".

str2 = ""cab"" is a subsequence of ""cabac"" because we can delete the last ""ac"".

The answer provided is the shortest such string that satisfies these properties.

Note:
`1 <= str1.length, str2.length <= 1000`
`str1` and `str2` consist of lowercase English letters.",Hard,https://leetcode.com/problems/shortest-common-supersequence,"Microsoft,Amazon",Dynamic Programming,941,"[Longest Common Subsequence, /problems/longest-common-subsequence/, Medium]","given two strings `str1` and `str2`, return the shortest string that has both `str1` and `str2` as subsequences. if multiple answers exist, you may return any of them. (a string s is a subsequence of string t if deleting some number of characters from t (possibly 0, and the characters are chosen anywhere from t) results in the string s.)","input: str1 = ""abac"", str2 = ""cab"" output: ""cabac"" explanation: str1 = ""abac"" is a subsequence of ""cabac"" because we can delete the first ""c"". str2 = ""cab"" is a subsequence of ""cabac"" because we can delete the last ""ac"". the answer provided is the shortest such string that satisfies these properties. note: `1 <= str1.length, str2.length <= 1000` `str1` and `str2` consist of lowercase english letters.",,
1093,Statistics from a Large Sample,"You are given a large sample of integers in the range `[0, 255]`. Since the sample is so large, it is represented by an array `count` where `count[k]` is the number of times that `k` appears in the sample.

Calculate the following statistics:
`minimum`: The minimum element in the sample.

`maximum`: The maximum element in the sample.

`mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.

`median`:
	
If the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted.

If the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted.

`mode`: The number that appears the most in the sample. It is guaranteed to be unique.

Return the statistics of the sample as an array of floating-point numbers `[minimum, maximum, mean, median, mode]`. Answers within `10-5` of the actual answer will be accepted.


Example 1:
Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,3.00000,2.37500,2.50000,3.00000]
Explanation: The sample represented by count is [1,2,2,2,3,3,3,3].

The minimum and maximum are 1 and 3 respectively.

The mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.

Since the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.

The mode is 3 as it appears the most in the sample.


Example 2:
Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,4.00000,2.18182,2.00000,1.00000]
Explanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].

The minimum and maximum are 1 and 4 respectively.

The mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).

Since the size of the sample is odd, the median is the middle element 2.

The mode is 1 as it appears the most in the sample.


Constraints:
`count.length == 256`
`0 <= count[i] <= 109`
`1 <= sum(count) <= 109`
The mode of the sample that `count` represents is unique.",Medium,https://leetcode.com/problems/statistics-from-a-large-sample,Microsoft,"Math,Two Pointers",5,,"you are given a large sample of integers in the range `[0, 255]`. since the sample is so large, it is represented by an array `count` where `count[k]` is the number of times that `k` appears in the sample. calculate the following statistics: `minimum`: the minimum element in the sample. `maximum`: the maximum element in the sample. `mean`: the average of the sample, calculated as the total sum of all elements divided by the total number of elements. `median`: if the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted. if the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted. `mode`: the number that appears the most in the sample. it is guaranteed to be unique. return the statistics of the sample as an array of floating-point numbers `[minimum, maximum, mean, median, mode]`. answers within `10-5` of the actual answer will be accepted.","input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] output: [1.00000,3.00000,2.37500,2.50000,3.00000] explanation: the sample represented by count is [1,2,2,2,3,3,3,3]. the minimum and maximum are 1 and 3 respectively. the mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375. since the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5. the mode is 3 as it appears the most in the sample. example 2: input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] output: [1.00000,4.00000,2.18182,2.00000,1.00000] explanation: the sample represented by count is [1,1,1,1,2,2,2,3,3,4,4]. the minimum and maximum are 1 and 4 respectively. the mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182). since the size of the sample is odd, the median is the middle element 2. the mode is 1 as it appears the most in the sample.",`count.length == 256` `0 <= count[i] <= 10^9` `1 <= sum(count) <= 10^9` the mode of the sample that `count` represents is unique.,
1094,Car Pooling,"You are driving a vehicle that has `capacity` empty seats initially available for passengers.  The vehicle only drives east (ie. it cannot turn around and drive west.)
Given a list of `trips`, `trip[i] = [num_passengers, start_location, end_location]` contains information about the `i`-th trip: the number of passengers that must be picked up, and the locations to pick them up and drop them off.  The locations are given as the number of kilometers due east from your vehicle's initial location.

Return `true` if and only if it is possible to pick up and drop off all passengers for all the given trips. 

Example 1:
Input: trips = [[2,1,5],[3,3,7]], capacity = 4
Output: false

Example 2:
Input: trips = [[2,1,5],[3,3,7]], capacity = 5
Output: true

Example 3:
Input: trips = [[2,1,5],[3,5,7]], capacity = 3
Output: true

Example 4:
Input: trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11
Output: true

Constraints:
`trips.length <= 1000`
`trips[i].length == 3`
`1 <= trips[i][0] <= 100`
`0 <= trips[i][1] < trips[i][2] <= 1000`
`1 <= capacity <= 100000`",Medium,https://leetcode.com/problems/car-pooling,Facebook,Greedy,1179,"[Meeting Rooms II, /problems/meeting-rooms-ii/, Medium]","you are driving a vehicle that has `capacity` empty seats initially available for passengers. the vehicle only drives east (ie. it cannot turn around and drive west.) given a list of `trips`, `trip[i] = [num_passengers, start_location, end_location]` contains information about the `i`-th trip: the number of passengers that must be picked up, and the locations to pick them up and drop them off. the locations are given as the number of kilometers due east from your vehicle's initial location. return `true` if and only if it is possible to pick up and drop off all passengers for all the given trips.","input: trips = [[2,1,5],[3,3,7]], capacity = 4 output: false example 2: input: trips = [[2,1,5],[3,3,7]], capacity = 5 output: true example 3: input: trips = [[2,1,5],[3,5,7]], capacity = 3 output: true example 4: input: trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11 output: true",`trips.length <= 1000` `trips[i].length == 3` `1 <= trips[i][0] <= 10^0` `0 <= trips[i][1] < trips[i][2] <= 1000` `1 <= capacity <= 100000`,
1095,Find in Mountain Array,"(This problem is an interactive problem.)
You may recall that an array `A` is a mountain array if and only if:
`A.length >= 3`
There exists some `i` with `0 < i < A.length - 1` such that:
	
`A[0] < A[1] < ... A[i-1] < A[i]`
`A[i] > A[i+1] > ... > A[A.length - 1]`
Given a mountain array `mountainArr`, return the minimum `index` such that `mountainArr.get(index) == target`.  If such an `index` doesn't exist, return `-1`.

You can't access the mountain array directly.  You may only access the array using a `MountainArray` interface:
`MountainArray.get(k)` returns the element of the array at index `k` (0-indexed).

`MountainArray.length()` returns the length of the array.

Submissions making more than `100` calls to `MountainArray.get` will be judged Wrong Answer.  Also, any solutions that attempt to circumvent the judge will result in disqualification.


Example 1:
Input: array = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.


Example 2:
Input: array = [0,1,2,4,2,1], target = 3
Output: -1
Explanation: 3 does not exist in `the array,` so we return -1.


Constraints:
`3 <= mountain_arr.length() <= 10000`
`0 <= target <= 10^9`
`0 <= mountain_arr.get(index) <= 10^9`",Hard,https://leetcode.com/problems/find-in-mountain-array,"Apple,Bloomberg,Quora",Binary Search,491,"[Peak Index in a Mountain Array, /problems/peak-index-in-a-mountain-array/, Easy], [Minimum Number of Removals to Make Mountain Array, /problems/minimum-number-of-removals-to-make-mountain-array/, Hard]","(this problem is an interactive problem.) you may recall that an array `a` is a mountain array if and only if: `a.length >= 3` there exists some `i` with `0 < i < a.length - 1` such that: `a[0] < a[1] < ... a[i-1] < a[i]` `a[i] > a[i+1] > ... > a[a.length - 1]` given a mountain array `mountainarr`, return the minimum `index` such that `mountainarr.get(index) == target`. if such an `index` doesn't exist, return `-1`. you can't access the mountain array directly. you may only access the array using a `mountainarray` interface: `mountainarray.get(k)` returns the element of the array at index `k` (0-indexed). `mountainarray.length()` returns the length of the array. submissions making more than `100` calls to `mountainarray.get` will be judged wrong answer. also, any solutions that attempt to circumvent the judge will result in disqualification.","input: array = [1,2,3,4,5,3,1], target = 3 output: 2 explanation: 3 exists in the array, at index=2 and index=5. return the minimum index, which is 2. example 2: input: array = [0,1,2,4,2,1], target = 3 output: -1 explanation: 3 does not exist in `the array,` so we return -1.",`3 <= mountain_arr.length() <= 10000` `0 <= target <= 10^9` `0 <= mountain_arr.get(index) <= 10^9`,
1096,Brace Expansion II,"Under a grammar given below, strings can represent a set of lowercase words.  Let's use `R(expr)` to denote the set of words the expression represents.

Grammar can best be understood through simple examples:
Single letters represent a singleton set containing that word.

	
`R(""a"") = {""a""}`
`R(""w"") = {""w""}`
When we take a comma delimited list of 2 or more expressions, we take the union of possibilities.

	
`R(""{a,b,c}"") = {""a"",""b"",""c""}`
`R(""{{a,b},{b,c}}"") = {""a"",""b"",""c""}` (notice the final set only contains each word at most once)
When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.

	
`R(""{a,b}{c,d}"") = {""ac"",""ad"",""bc"",""bd""}`
`R(""a{b,c}{d,e}f{g,h}"") = {""abdfg"", ""abdfh"", ""abefg"", ""abefh"", ""acdfg"", ""acdfh"", ""acefg"", ""acefh""}`
Formally, the 3 rules for our grammar:
For every lowercase letter `x`, we have `R(x) = {x}`
For expressions `e_1, e_2, ... , e_k` with `k >= 2`, we have `R({e_1,e_2,...}) = R(e_1) ∪ R(e_2) ∪ ...`
For expressions `e_1` and `e_2`, we have `R(e_1 + e_2) = {a + b for (a, b) in R(e_1) × R(e_2)}`, where + denotes concatenation, and × denotes the cartesian product.

Given an `expression` representing a set of words under the given grammar, return the sorted list of words that the expression represents.


Example 1:
Input: ""{a,b}{c,{d,e}}""
Output: [""ac"",""ad"",""ae"",""bc"",""bd"",""be""]

Example 2:
Input: ""{{a,z},a{b,c},{ab,z}}""
Output: [""a"",""ab"",""ac"",""z""]
Explanation: Each distinct word is written only once in the final answer.


Constraints:
`1 <= expression.length <= 60`
`expression[i]` consists of `'{'`, `'}'`, `','`or lowercase English letters.

The given `expression` represents a set of words based on the grammar given in the description.",Hard,https://leetcode.com/problems/brace-expansion-ii,"Google,Adobe",String,258,"[Brace Expansion, /problems/brace-expansion/, Medium]","under a grammar given below, strings can represent a set of lowercase words. let's use `r(expr)` to denote the set of words the expression represents. grammar can best be understood through simple","single letters represent a singleton set containing that word. `r(""a"") = {""a""}` `r(""w"") = {""w""}` when we take a comma delimited list of 2 or more expressions, we take the union of possibilities. `r(""{a,b,c}"") = {""a"",""b"",""c""}` `r(""{{a,b},{b,c}}"") = {""a"",""b"",""c""}` (notice the final set only contains each word at most once) when we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression. `r(""{a,b}{c,d}"") = {""ac"",""ad"",""bc"",""bd""}` `r(""a{b,c}{d,e}f{g,h}"") = {""abdfg"", ""abdfh"", ""abefg"", ""abefh"", ""acdfg"", ""acdfh"", ""acefg"", ""acefh""}` formally, the 3 rules for our grammar: for every lowercase letter `x`, we have `r(x) = {x}` for expressions `e_1, e_2, ... , e_k` with `k >= 2`, we have `r({e_1,e_2,...}) = r(e_1) ∪ r(e_2) ∪ ...` for expressions `e_1` and `e_2`, we have `r(e_1 + e_2) = {a + b for (a, b) in r(e_1) × r(e_2)}`, where + denotes concatenation, and × denotes the cartesian product. given an `expression` representing a set of words under the given grammar, return the sorted list of words that the expression represents. example 1: input: ""{a,b}{c,{d,e}}"" output: [""ac"",""ad"",""ae"",""bc"",""bd"",""be""] example 2: input: ""{{a,z},a{b,c},{ab,z}}"" output: [""a"",""ab"",""ac"",""z""] explanation: each distinct word is written only once in the final answer.","`1 <= expression.length <= 60` `expression[i]` consists of `'{'`, `'}'`, `','`or lowercase english letters. the given `expression` represents a set of words based on the grammar given in the description.",
1097,Game Play Analysis V,SQL Schema,Hard,https://leetcode.com/problems/game-play-analysis-v,GSN Games,,71,,sql schema,,,
1098,Unpopular Books,SQL Schema,Medium,https://leetcode.com/problems/unpopular-books,,,89,,sql schema,,,
1099,Two Sum Less Than K,"Given an array `nums` of integers and integer `k`, return the maximum `sum` such that there exists `i < j` with `nums[i] + nums[j] = sum` and `sum < k`. If no `i`, `j` exist satisfying this equation, return `-1`.


Example 1:
Input: nums = [34,23,1,24,75,33,54,8], k = 60
Output: 58
Explanation: We can use 34 and 24 to sum 58 which is less than 60.


Example 2:
Input: nums = [10,20,30], k = 15
Output: -1
Explanation: In this case it is not possible to get a pair sum less that 15.


Constraints:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 1000`
`1 <= k <= 2000`",Easy,https://leetcode.com/problems/two-sum-less-than-k,Amazon,"Array,Two Pointers,Sort",510,"[Two Sum, /problems/two-sum/, Easy], [Two Sum II - Input array is sorted, /problems/two-sum-ii-input-array-is-sorted/, Easy], [3Sum Smaller, /problems/3sum-smaller/, Medium], [Subarray Product Less Than K, /problems/subarray-product-less-than-k/, Medium]","given an array `nums` of integers and integer `k`, return the maximum `sum` such that there exists `i < j` with `nums[i] + nums[j] = sum` and `sum < k`. if no `i`, `j` exist satisfying this equation, return `-1`.","input: nums = [34,23,1,24,75,33,54,8], k = 60 output: 58 explanation: we can use 34 and 24 to sum 58 which is less than 60. example 2: input: nums = [10,20,30], k = 15 output: -1 explanation: in this case it is not possible to get a pair sum less that 15.",`1 <= nums.length <= 10^0` `1 <= nums[i] <= 1000` `1 <= k <= 2000`,
1100,Find K-Length Substrings With No Repeated Characters,"Given a string `S`, return the number of substrings of length `K` with no repeated characters.


Example 1:
Input: S = ""havefunonleetcode"", K = 5
Output: 6
Explanation: 
There are 6 substrings they are : 'havef','avefu','vefun','efuno','etcod','tcode'.


Example 2:
Input: S = ""home"", K = 5
Output: 0
Explanation: 
Notice K can be larger than the length of S. In this case is not possible to find any substring.

Note:
`1 <= S.length <= 10^4`
All characters of S are lowercase English letters.

`1 <= K <= 10^4`",Medium,https://leetcode.com/problems/find-k-length-substrings-with-no-repeated-characters,Amazon,"String,Sliding Window",253,,"given a string `s`, return the number of substrings of length `k` with no repeated characters.","input: s = ""havefunonleetcode"", k = 5 output: 6 explanation: there are 6 substrings they are : 'havef','avefu','vefun','efuno','etcod','tcode'. example 2: input: s = ""home"", k = 5 output: 0 explanation: notice k can be larger than the length of s. in this case is not possible to find any substring. note: `1 <= s.length <= 10^4` all characters of s are lowercase english letters. `1 <= k <= 10^4`",,
1101,The Earliest Moment When Everyone Become Friends,"In a social group, there are `N` people, with unique integer ids from `0` to `N-1`.

We have a list of `logs`, where each `logs[i] = [timestamp, id_A, id_B]` contains a non-negative integer timestamp, and the ids of two different people.

Each log represents the time in which two different people became friends.  Friendship is symmetric: if A is friends with B, then B is friends with A.

Let's say that person A is acquainted with person B if A is friends with B, or A is a friend of someone acquainted with B.

Return the earliest time for which every person became acquainted with every other person. Return -1 if there is no such earliest time.


Example 1:
Input: logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6
Output: 20190301
Explanation: 
The first event occurs at timestamp = 20190101 and after 0 and 1 become friends we have the following friendship groups [0,1], [2], [3], [4], [5].

The second event occurs at timestamp = 20190104 and after 3 and 4 become friends we have the following friendship groups [0,1], [2], [3,4], [5].

The third event occurs at timestamp = 20190107 and after 2 and 3 become friends we have the following friendship groups [0,1], [2,3,4], [5].

The fourth event occurs at timestamp = 20190211 and after 1 and 5 become friends we have the following friendship groups [0,1,5], [2,3,4].

The fifth event occurs at timestamp = 20190224 and as 2 and 4 are already friend anything happens.

The sixth event occurs at timestamp = 20190301 and after 0 and 3 become friends we have that all become friends.

Note:
`2 <= N <= 100`
`1 <= logs.length <= 10^4`
`0 <= logs[i][0] <= 10^9`
`0 <= logs[i][1], logs[i][2] <= N - 1`
It's guaranteed that all timestamps in `logs[i][0]` are different.

`logs `are not necessarily ordered by some criteria.

`logs[i][1] != logs[i][2]`",Medium,https://leetcode.com/problems/the-earliest-moment-when-everyone-become-friends,Google,Union Find,173,"[Number of Provinces, /problems/number-of-provinces/, Medium]","in a social group, there are `n` people, with unique integer ids from `0` to `n-1`. we have a list of `logs`, where each `logs[i] = [timestamp, id_a, id_b]` contains a non-negative integer timestamp, and the ids of two different people. each log represents the time in which two different people became friends. friendship is symmetric: if a is friends with b, then b is friends with a. let's say that person a is acquainted with person b if a is friends with b, or a is a friend of someone acquainted with b. return the earliest time for which every person became acquainted with every other person. return -1 if there is no such earliest time.","input: logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], n = 6 output: 20190301 explanation: the first event occurs at timestamp = 20190101 and after 0 and 1 become friends we have the following friendship groups [0,1], [2], [3], [4], [5]. the second event occurs at timestamp = 20190104 and after 3 and 4 become friends we have the following friendship groups [0,1], [2], [3,4], [5]. the third event occurs at timestamp = 20190107 and after 2 and 3 become friends we have the following friendship groups [0,1], [2,3,4], [5]. the fourth event occurs at timestamp = 20190211 and after 1 and 5 become friends we have the following friendship groups [0,1,5], [2,3,4]. the fifth event occurs at timestamp = 20190224 and as 2 and 4 are already friend anything happens. the sixth event occurs at timestamp = 20190301 and after 0 and 3 become friends we have that all become friends. note: `2 <= n <= 100` `1 <= logs.length <= 10^4` `0 <= logs[i][0] <= 10^9` `0 <= logs[i][1], logs[i][2] <= n - 1` it's guaranteed that all timestamps in `logs[i][0]` are different. `logs `are not necessarily ordered by some criteria. `logs[i][1] != logs[i][2]`",,
1102,Path With Maximum Minimum Value,"Given a matrix of integers `A` with R rows and C columns, find the maximum score of a path starting at `[0,0]` and ending at `[R-1,C-1]`.

The score of a path is the minimum value in that path.  For example, the value of the path 8 →  4 →  5 →  9 is 4.

A path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).


Example 1:
Input: [[5,4,5],[1,2,6],[7,4,6]]
Output: 4
Explanation: 
The path with the maximum score is highlighted in yellow. 

Example 2:
Input: [[2,2,1,2,2,2],[1,2,2,2,1,2]]
Output: 2

Example 3:
Input: [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]
Output: 3
Note:
`1 <= R, C <= 100`
`0 <= A[i][j] <= 10^9`",Medium,https://leetcode.com/problems/path-with-maximum-minimum-value,"Google,Facebook","Depth-first Search,Union Find,Graph",663,"[Path With Minimum Effort, /problems/path-with-minimum-effort/, Medium]","given a matrix of integers `a` with r rows and c columns, find the maximum score of a path starting at `[0,0]` and ending at `[r-1,c-1]`. the score of a path is the minimum value in that path. for example, the value of the path 8 → 4 → 5 → 9 is 4. a path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).","input: [[5,4,5],[1,2,6],[7,4,6]] output: 4 explanation: the path with the maximum score is highlighted in yellow. example 2: input: [[2,2,1,2,2,2],[1,2,2,2,1,2]] output: 2 example 3: input: [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]] output: 3 note: `1 <= r, c <= 100` `0 <= a[i][j] <= 10^9`",,
1103,Distribute Candies to People,"We distribute some number of `candies`, to a row of `n = num_people` people in the following way:
We then give 1 candy to the first person, 2 candies to the second person, and so on until we give `n` candies to the last person.

Then, we go back to the start of the row, giving `n + 1` candies to the first person, `n + 2` candies to the second person, and so on until we give `2 * n` candies to the last person.

This process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies.  The last person will receive all of our remaining candies (not necessarily one more than the previous gift).

Return an array (of length `num_people` and sum `candies`) that represents the final distribution of candies.


Example 1:
Input: candies = 7, num_people = 4
Output: [1,2,3,1]
Explanation:
On the first turn, ans[0] += 1, and the array is [1,0,0,0].

On the second turn, ans[1] += 2, and the array is [1,2,0,0].

On the third turn, ans[2] += 3, and the array is [1,2,3,0].

On the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].


Example 2:
Input: candies = 10, num_people = 3
Output: [5,2,3]
Explanation: 
On the first turn, ans[0] += 1, and the array is [1,0,0].

On the second turn, ans[1] += 2, and the array is [1,2,0].

On the third turn, ans[2] += 3, and the array is [1,2,3].

On the fourth turn, ans[0] += 4, and the final array is [5,2,3].


Constraints:
1 <= candies <= 10^9
1 <= num_people <= 1000",Easy,https://leetcode.com/problems/distribute-candies-to-people,,,511,,"we distribute some number of `candies`, to a row of `n = num_people` people in the following way: we then give 1 candy to the first person, 2 candies to the second person, and so on until we give `n` candies to the last person. then, we go back to the start of the row, giving `n + 1` candies to the first person, `n + 2` candies to the second person, and so on until we give `2 * n` candies to the last person. this process repeats (with us giving one more candy each time, and moving to the start of the row after we reach the end) until we run out of candies. the last person will receive all of our remaining candies (not necessarily one more than the previous gift). return an array (of length `num_people` and sum `candies`) that represents the final distribution of candies.","input: candies = 7, num_people = 4 output: [1,2,3,1] explanation: on the first turn, ans[0] += 1, and the array is [1,0,0,0]. on the second turn, ans[1] += 2, and the array is [1,2,0,0]. on the third turn, ans[2] += 3, and the array is [1,2,3,0]. on the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1]. example 2: input: candies = 10, num_people = 3 output: [5,2,3] explanation: on the first turn, ans[0] += 1, and the array is [1,0,0]. on the second turn, ans[1] += 2, and the array is [1,2,0]. on the third turn, ans[2] += 3, and the array is [1,2,3]. on the fourth turn, ans[0] += 4, and the final array is [5,2,3].",1 <= candies <= 10^9 1 <= num_people <= 1000,
1104,Path In Zigzag Labelled Binary Tree,"In an infinite binary tree where every node has two children, the nodes are labelled in row order.

In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.

Given the `label` of a node in this tree, return the labels in the path from the root of the tree to the node with that `label`.


Example 1:
Input: label = 14
Output: [1,3,4,14]

Example 2:
Input: label = 26
Output: [1,2,6,10,26]

Constraints:
`1 <= label <= 10^6`",Medium,https://leetcode.com/problems/path-in-zigzag-labelled-binary-tree,"Amazon,Microsoft,Bloomberg","Math,Tree",609,,"in an infinite binary tree where every node has two children, the nodes are labelled in row order. in the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left. given the `label` of a node in this tree, return the labels in the path from the root of the tree to the node with that `label`.","input: label = 14 output: [1,3,4,14] example 2: input: label = 26 output: [1,2,6,10,26]",`1 <= label <= 10^6`,
1105,Filling Bookcase Shelves,"We have a sequence of `books`: the `i`-th book has thickness `books[i][0]` and height `books[i][1]`.

We want to place these books in order onto bookcase shelves that have total width `shelf_width`.

We choose some of the books to place on this shelf (such that the sum of their thickness is `<= shelf_width`), then build another level of shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down.  We repeat this process until there are no more books to place.

Note again that at each step of the above process, the order of the books we place is the same order as the given sequence of books.  For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.

Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.


Example 1:
Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4
Output: 6
Explanation:
The sum of the heights of the 3 shelves are 1 + 3 + 2 = 6.

Notice that book number 2 does not have to be on the first shelf.


Constraints:
`1 <= books.length <= 1000`
`1 <= books[i][0] <= shelf_width <= 1000`
`1 <= books[i][1] <= 1000`",Medium,https://leetcode.com/problems/filling-bookcase-shelves,Amazon,Dynamic Programming,842,,"we have a sequence of `books`: the `i`-th book has thickness `books[i][0]` and height `books[i][1]`. we want to place these books in order onto bookcase shelves that have total width `shelf_width`. we choose some of the books to place on this shelf (such that the sum of their thickness is `<= shelf_width`), then build another level of shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. we repeat this process until there are no more books to place. note again that at each step of the above process, the order of the books we place is the same order as the given sequence of books. for example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf. return the minimum possible height that the total bookshelf can be after placing shelves in this manner.","input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4 output: 6 explanation: the sum of the heights of the 3 shelves are 1 + 3 + 2 = 6. notice that book number 2 does not have to be on the first shelf.",`1 <= books.length <= 1000` `1 <= books[i][0] <= shelf_width <= 1000` `1 <= books[i][1] <= 1000`,
1106,Parsing A Boolean Expression,"Return the result of evaluating a given boolean `expression`, represented as a string.

An expression can either be:
`""t""`, evaluating to `True`;
`""f""`, evaluating to `False`;
`""!(expr)""`, evaluating to the logical NOT of the inner expression `expr`;
`""&(expr1,expr2,...)""`, evaluating to the logical AND of 2 or more inner expressions `expr1, expr2, ...`;
`""|(expr1,expr2,...)""`, evaluating to the logical OR of 2 or more inner expressions `expr1, expr2, ...`

Example 1:
Input: expression = ""!(f)""
Output: true

Example 2:
Input: expression = ""|(f,t)""
Output: true

Example 3:
Input: expression = ""&(t,f)""
Output: false

Example 4:
Input: expression = ""|(&(t,f,t),!(t))""
Output: false

Constraints:
`1 <= expression.length <= 20000`
`expression[i]` consists of characters in `{'(', ')', '&', '|', '!', 't', 'f', ','}`.

`expression` is a valid expression representing a boolean, as given in the description.",Hard,https://leetcode.com/problems/parsing-a-boolean-expression,Amazon,String,341,,"return the result of evaluating a given boolean `expression`, represented as a string. an expression can either be: `""t""`, evaluating to `true`; `""f""`, evaluating to `false`; `""!(expr)""`, evaluating to the logical not of the inner expression `expr`; `""&(expr1,expr2,...)""`, evaluating to the logical and of 2 or more inner expressions `expr1, expr2, ...`; `""|(expr1,expr2,...)""`, evaluating to the logical or of 2 or more inner expressions `expr1, expr2, ...`","input: expression = ""!(f)"" output: true example 2: input: expression = ""|(f,t)"" output: true example 3: input: expression = ""&(t,f)"" output: false example 4: input: expression = ""|(&(t,f,t),!(t))"" output: false","`1 <= expression.length <= 20000` `expression[i]` consists of characters in `{'(', ')', '&', '|', '!', 't', 'f', ','}`. `expression` is a valid expression representing a boolean, as given in the description.",
1107,New Users Daily Count,SQL Schema,Medium,https://leetcode.com/problems/new-users-daily-count,Amazon,,66,,sql schema,,,
1108,Defanging an IP Address,"Given a valid (IPv4) IP `address`, return a defanged version of that IP address.

A defanged IP address replaces every period `"".""` with `""[.]""`.


Example 1:
Input: address = ""1.1.1.1""
Output: ""1[.]1[.]1[.]1""

Example 2:
Input: address = ""255.100.50.0""
Output: ""255[.]100[.]50[.]0""

Constraints:
The given `address` is a valid IPv4 address.",Easy,https://leetcode.com/problems/defanging-an-ip-address,Adobe,String,659,,"given a valid (ipv4) ip `address`, return a defanged version of that ip address. a defanged ip address replaces every period `"".""` with `""[.]""`.","input: address = ""1.1.1.1"" output: ""1[.]1[.]1[.]1"" example 2: input: address = ""255.100.50.0"" output: ""255[.]100[.]50[.]0""",the given `address` is a valid ipv4 address.,
1109,Corporate Flight Bookings,"There are `n` flights that are labeled from `1` to `n`.

You are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (inclusive) with `seatsi` seats reserved for each flight in the range.

Return an array `answer` of length `n`, where `answer[i]` is the total number of seats reserved for flight `i`.


Example 1:
Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
Output: [10,55,45,25,25]
Explanation:
Flight labels:        1   2   3   4   5
Booking 1 reserved:  10  10
Booking 2 reserved:      20  20
Booking 3 reserved:      25  25  25  25
Total seats:         10  55  45  25  25
Hence, answer = [10,55,45,25,25]

Example 2:
Input: bookings = [[1,2,10],[2,2,15]], n = 2
Output: [10,25]
Explanation:
Flight labels:        1   2
Booking 1 reserved:  10  10
Booking 2 reserved:      15
Total seats:         10  25
Hence, answer = [10,25]

Constraints:
`1 <= n <= 2 * 104`
`1 <= bookings.length <= 2 * 104`
`bookings[i].length == 3`
`1 <= firsti <= lasti <= n`
`1 <= seatsi <= 104`",Medium,https://leetcode.com/problems/corporate-flight-bookings,Goldman Sachs,"Array,Math",665,,"there are `n` flights that are labeled from `1` to `n`. you are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (inclusive) with `seatsi` seats reserved for each flight in the range. return an array `answer` of length `n`, where `answer[i]` is the total number of seats reserved for flight `i`.","input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5 output: [10,55,45,25,25] explanation: flight labels: 1 2 3 4 5 booking 1 reserved: 10 10 booking 2 reserved: 20 20 booking 3 reserved: 25 25 25 25 total seats: 10 55 45 25 25 hence, answer = [10,55,45,25,25] example 2: input: bookings = [[1,2,10],[2,2,15]], n = 2 output: [10,25] explanation: flight labels: 1 2 booking 1 reserved: 10 10 booking 2 reserved: 15 total seats: 10 25 hence, answer = [10,25]",`1 <= n <= 2 * 10^4` `1 <= bookings.length <= 2 * 10^4` `bookings[i].length == 3` `1 <= firsti <= lasti <= n` `1 <= seatsi <= 10^4`,
1110,Delete Nodes And Return Forest,"Given the `root` of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.


Example 1:
Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]

Example 2:
Input: root = [1,2,4,null,3], to_delete = [3]
Output: [[1,2,4]]

Constraints:
The number of nodes in the given tree is at most `1000`.

Each node has a distinct value between `1` and `1000`.

`to_delete.length <= 1000`
`to_delete` contains distinct values between `1` and `1000`.",Medium,https://leetcode.com/problems/delete-nodes-and-return-forest,"Google,Amazon,Facebook,Salesforce","Tree,Depth-first Search",1747,,"given the `root` of a binary tree, each node in the tree has a distinct value. after deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees). return the roots of the trees in the remaining forest. you may return the result in any order.","input: root = [1,2,3,4,5,6,7], to_delete = [3,5] output: [[1,2,null,4],[6],[7]] example 2: input: root = [1,2,4,null,3], to_delete = [3] output: [[1,2,4]]",the number of nodes in the given tree is at most `1000`. each node has a distinct value between `1` and `1000`. `to_delete.length <= 1000` `to_delete` contains distinct values between `1` and `1000`.,
1111,Maximum Nesting Depth of Two Valid Parentheses Strings,"A string is a valid parentheses string (denoted VPS) if and only if it consists of `""(""` and `"")""` characters only, and:
It is the empty string, or
It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or
It can be written as `(A)`, where `A` is a VPS.

We can similarly define the nesting depth `depth(S)` of any VPS `S` as follows:
`depth("""") = 0`
`depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's
`depth(""("" + A + "")"") = 1 + depth(A)`, where `A` is a VPS.

For example,  `""""`, `""()()""`, and `""()(()())""` are VPS's (with nesting depths 0, 1, and 2), and `"")(""` and `""(()""` are not VPS's.

Given a VPS seq, split it into two disjoint subsequences `A` and `B`, such that `A` and `B` are VPS's (and `A.length + B.length = seq.length`).

Now choose any such `A` and `B` such that `max(depth(A), depth(B))` is the minimum possible value.

Return an `answer` array (of length `seq.length`) that encodes such a choice of `A` and `B`:  `answer[i] = 0` if `seq[i]` is part of `A`, else `answer[i] = 1`.  Note that even though multiple answers may exist, you may return any of them.


Example 1:
Input: seq = ""(()())""
Output: [0,1,1,1,1,0]

Example 2:
Input: seq = ""()(())()""
Output: [0,0,0,1,1,0,1,1]

Constraints:
`1 <= seq.size <= 10000`",Medium,https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings,"Facebook,Bloomreach","Binary Search,Greedy",183,"[Maximum Nesting Depth of the Parentheses, /problems/maximum-nesting-depth-of-the-parentheses/, Easy]","a string is a valid parentheses string (denoted vps) if and only if it consists of `""(""` and `"")""` characters only, and: it is the empty string, or it can be written as `ab` (`a` concatenated with `b`), where `a` and `b` are vps's, or it can be written as `(a)`, where `a` is a vps. we can similarly define the nesting depth `depth(s)` of any vps `s` as follows: `depth("""") = 0` `depth(a + b) = max(depth(a), depth(b))`, where `a` and `b` are vps's `depth(""("" + a + "")"") = 1 + depth(a)`, where `a` is a vps. for example, `""""`, `""()()""`, and `""()(()())""` are vps's (with nesting depths 0, 1, and 2), and `"")(""` and `""(()""` are not vps's. given a vps seq, split it into two disjoint subsequences `a` and `b`, such that `a` and `b` are vps's (and `a.length + b.length = seq.length`). now choose any such `a` and `b` such that `max(depth(a), depth(b))` is the minimum possible value. return an `answer` array (of length `seq.length`) that encodes such a choice of `a` and `b`: `answer[i] = 0` if `seq[i]` is part of `a`, else `answer[i] = 1`. note that even though multiple answers may exist, you may return any of them.","input: seq = ""(()())"" output: [0,1,1,1,1,0] example 2: input: seq = ""()(())()"" output: [0,0,0,1,1,0,1,1]",`1 <= seq.size <= 10000`,
1112,Highest Grade For Each Student,SQL Schema,Medium,https://leetcode.com/problems/highest-grade-for-each-student,Coursera,,114,,sql schema,,,
1113,Reported Posts,SQL Schema,Easy,https://leetcode.com/problems/reported-posts,Facebook,,42,,sql schema,,,
1114,Print in Order,"Suppose we have a class:
public class Foo {
  public void first() { print(""first""); }
  public void second() { print(""second""); }
  public void third() { print(""third""); }
}
The same instance of `Foo` will be passed to three different threads. Thread A will call `first()`, thread B will call `second()`, and thread C will call `third()`. Design a mechanism and modify the program to ensure that `second()` is executed after `first()`, and `third()` is executed after `second()`.


Example 1:
Input: [1,2,3]
Output: ""firstsecondthird""
Explanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). ""firstsecondthird"" is the correct output.


Example 2:
Input: [1,3,2]
Output: ""firstsecondthird""
Explanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). ""firstsecondthird"" is the correct output.

Note:
We do not know how the threads will be scheduled in the operating system, even though the numbers in the input seems to imply the ordering. The input format you see is mainly to ensure our tests' comprehensiveness.",Easy,https://leetcode.com/problems/print-in-order,Microsoft,,706,,"suppose we have a class: public class foo { public void first() { print(""first""); } public void second() { print(""second""); } public void third() { print(""third""); } } the same instance of `foo` will be passed to three different threads. thread a will call `first()`, thread b will call `second()`, and thread c will call `third()`. design a mechanism and modify the program to ensure that `second()` is executed after `first()`, and `third()` is executed after `second()`.","input: [1,2,3] output: ""firstsecondthird"" explanation: there are three threads being fired asynchronously. the input [1,2,3] means thread a calls first(), thread b calls second(), and thread c calls third(). ""firstsecondthird"" is the correct output. example 2: input: [1,3,2] output: ""firstsecondthird"" explanation: the input [1,3,2] means thread a calls first(), thread b calls third(), and thread c calls second(). ""firstsecondthird"" is the correct output. note: we do not know how the threads will be scheduled in the operating system, even though the numbers in the input seems to imply the ordering. the input format you see is mainly to ensure our tests' comprehensiveness.",,
1115,Print FooBar Alternately,"Suppose you are given the following code:
class FooBar {
  public void foo() {
    for (int i = 0; i < n; i++) {
      print(""foo"");
    }
  }
  public void bar() {
    for (int i = 0; i < n; i++) {
      print(""bar"");
    }
  }
}
The same instance of `FooBar` will be passed to two different threads. Thread A will call `foo()` while thread B will call `bar()`. Modify the given program to output ""foobar"" n times.


Example 1:
Input: n = 1
Output: ""foobar""
Explanation: There are two threads being fired asynchronously. One of them calls foo(), while the other calls bar(). ""foobar"" is being output 1 time.


Example 2:
Input: n = 2
Output: ""foobarfoobar""
Explanation: ""foobar"" is being output 2 times.",Medium,https://leetcode.com/problems/print-foobar-alternately,,,362,,"suppose you are given the following code: class foobar { public void foo() { for (int i = 0; i < n; i++) { print(""foo""); } } public void bar() { for (int i = 0; i < n; i++) { print(""bar""); } } } the same instance of `foobar` will be passed to two different threads. thread a will call `foo()` while thread b will call `bar()`. modify the given program to output ""foobar"" n times.","input: n = 1 output: ""foobar"" explanation: there are two threads being fired asynchronously. one of them calls foo(), while the other calls bar(). ""foobar"" is being output 1 time. example 2: input: n = 2 output: ""foobarfoobar"" explanation: ""foobar"" is being output 2 times.",,
1116,Print Zero Even Odd,"Suppose you are given the following code:
class ZeroEvenOdd {
  public ZeroEvenOdd(int n) { ... }      // constructor
  public void zero(printNumber) { ... }  // only output 0's
  public void even(printNumber) { ... }  // only output even numbers
  public void odd(printNumber) { ... }   // only output odd numbers
}
The same instance of `ZeroEvenOdd` will be passed to three different threads:
Thread A will call `zero()` which should only output 0's.

Thread B will call `even()` which should only ouput even numbers.

Thread C will call `odd()` which should only output odd numbers.

Each of the threads is given a `printNumber` method to output an integer. Modify the given program to output the series `010203040506`... where the length of the series must be 2n.


Example 1:
Input: n = 2
Output: ""0102""
Explanation: There are three threads being fired asynchronously. One of them calls zero(), the other calls even(), and the last one calls odd(). ""0102"" is the correct output.


Example 2:
Input: n = 5
Output: ""0102030405""",Medium,https://leetcode.com/problems/print-zero-even-odd,Microsoft,,238,,suppose you are given the following code: class zeroevenodd { public zeroevenodd(int n) { ... } // constructor public void zero(printnumber) { ... } // only output 0's public void even(printnumber) { ... } // only output even numbers public void odd(printnumber) { ... } // only output odd numbers } the same instance of `zeroevenodd` will be passed to three different threads: thread a will call `zero()` which should only output 0's. thread b will call `even()` which should only ouput even numbers. thread c will call `odd()` which should only output odd numbers. each of the threads is given a `printnumber` method to output an integer. modify the given program to output the series `010203040506`... where the length of the series must be 2n.,"input: n = 2 output: ""0102"" explanation: there are three threads being fired asynchronously. one of them calls zero(), the other calls even(), and the last one calls odd(). ""0102"" is the correct output. example 2: input: n = 5 output: ""0102030405""",,
1117,Building H2O,"There are two kinds of threads, `oxygen` and `hydrogen`. Your goal is to group these threads to form water molecules. There is a barrier where each thread has to wait until a complete molecule can be formed. Hydrogen and oxygen threads will be given `releaseHydrogen` and `releaseOxygen` methods respectively, which will allow them to pass the barrier. These threads should pass the barrier in groups of three, and they must be able to immediately bond with each other to form a water molecule. You must guarantee that all the threads from one molecule bond before any other threads from the next molecule do.

In other words:
If an oxygen thread arrives at the barrier when no hydrogen threads are present, it has to wait for two hydrogen threads.

If a hydrogen thread arrives at the barrier when no other threads are present, it has to wait for an oxygen thread and another hydrogen thread.

We don’t have to worry about matching the threads up explicitly; that is, the threads do not necessarily know which other threads they are paired up with. The key is just that threads pass the barrier in complete sets; thus, if we examine the sequence of threads that bond and divide them into groups of three, each group should contain one oxygen and two hydrogen threads.

Write synchronization code for oxygen and hydrogen molecules that enforces these constraints.


Example 1:
Input: ""HOH""
Output: ""HHO""
Explanation: ""HOH"" and ""OHH"" are also valid answers.


Example 2:
Input: ""OOHHHH""
Output: ""HHOHHO""
Explanation: ""HOHHHO"", ""OHHHHO"", ""HHOHOH"", ""HOHHOH"", ""OHHHOH"", ""HHOOHH"", ""HOHOHH"" and ""OHHOHH"" are also valid answers.


Constraints:
Total length of input string will be 3n, where 1 ≤ n ≤ 20.

Total number of `H` will be 2n in the input string.

Total number of `O` will be n in the input string.",Medium,https://leetcode.com/problems/building-h2o,"LinkedIn,Amazon",,242,,"there are two kinds of threads, `oxygen` and `hydrogen`. your goal is to group these threads to form water molecules. there is a barrier where each thread has to wait until a complete molecule can be formed. hydrogen and oxygen threads will be given `releasehydrogen` and `releaseoxygen` methods respectively, which will allow them to pass the barrier. these threads should pass the barrier in groups of three, and they must be able to immediately bond with each other to form a water molecule. you must guarantee that all the threads from one molecule bond before any other threads from the next molecule do. in other words: if an oxygen thread arrives at the barrier when no hydrogen threads are present, it has to wait for two hydrogen threads. if a hydrogen thread arrives at the barrier when no other threads are present, it has to wait for an oxygen thread and another hydrogen thread. we don’t have to worry about matching the threads up explicitly; that is, the threads do not necessarily know which other threads they are paired up with. the key is just that threads pass the barrier in complete sets; thus, if we examine the sequence of threads that bond and divide them into groups of three, each group should contain one oxygen and two hydrogen threads. write synchronization code for oxygen and hydrogen molecules that enforces these constraints.","input: ""hoh"" output: ""hho"" explanation: ""hoh"" and ""ohh"" are also valid answers. example 2: input: ""oohhhh"" output: ""hhohho"" explanation: ""hohhho"", ""ohhhho"", ""hhohoh"", ""hohhoh"", ""ohhhoh"", ""hhoohh"", ""hohohh"" and ""ohhohh"" are also valid answers.","total length of input string will be 3n, where 1 ≤ n ≤ 20. total number of `h` will be 2n in the input string. total number of `o` will be n in the input string.",
1118,Number of Days in a Month,"Given a year `Y` and a month `M`, return how many days there are in that month.


Example 1:
Input: Y = 1992, M = 7
Output: 31

Example 2:
Input: Y = 2000, M = 2
Output: 29

Example 3:
Input: Y = 1900, M = 2
Output: 28
Note:
`1583 <= Y <= 2100`
`1 <= M <= 12`",Easy,https://leetcode.com/problems/number-of-days-in-a-month,Amazon,,20,,"given a year `y` and a month `m`, return how many days there are in that month.","input: y = 1992, m = 7 output: 31 example 2: input: y = 2000, m = 2 output: 29 example 3: input: y = 1900, m = 2 output: 28 note: `1583 <= y <= 2100` `1 <= m <= 12`",,
1119,Remove Vowels from a String,"Given a string `s`, remove the vowels `'a'`, `'e'`, `'i'`, `'o'`, and `'u'` from it, and return the new string.


Example 1:
Input: s = ""leetcodeisacommunityforcoders""
Output: ""ltcdscmmntyfrcdrs""

Example 2:
Input: s = ""aeiou""
Output: """"

Constraints:
`1 <= s.length <= 1000`
`s` consists of only lowercase English letters.",Easy,https://leetcode.com/problems/remove-vowels-from-a-string,Amazon,String,177,"[Reverse Vowels of a String, /problems/reverse-vowels-of-a-string/, Easy]","given a string `s`, remove the vowels `'a'`, `'e'`, `'i'`, `'o'`, and `'u'` from it, and return the new string.","input: s = ""leetcodeisacommunityforcoders"" output: ""ltcdscmmntyfrcdrs"" example 2: input: s = ""aeiou"" output: """"",`1 <= s.length <= 1000` `s` consists of only lowercase english letters.,
1120,Maximum Average Subtree,"Given the `root` of a binary tree, find the maximum average value of any subtree of that tree.

(A subtree of a tree is any node of that tree plus all its descendants. The average value of a tree is the sum of its values, divided by the number of nodes.)

Example 1:
Input: [5,6,1]
Output: 6.00000
Explanation: 
For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.

For the node with value = 6 we have an average of 6 / 1 = 6.

For the node with value = 1 we have an average of 1 / 1 = 1.

So the answer is 6 which is the maximum.

Note:
The number of nodes in the tree is between `1` and `5000`.

Each node will have a value between `0` and `100000`.

Answers will be accepted as correct if they are within `10^-5` of the correct answer.",Medium,https://leetcode.com/problems/maximum-average-subtree,"Amazon,Facebook",Tree,396,,"given the `root` of a binary tree, find the maximum average value of any subtree of that tree. (a subtree of a tree is any node of that tree plus all its descendants. the average value of a tree is the sum of its values, divided by the number of nodes.)","input: [5,6,1] output: 6.00000 explanation: for the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4. for the node with value = 6 we have an average of 6 / 1 = 6. for the node with value = 1 we have an average of 1 / 1 = 1. so the answer is 6 which is the maximum. note: the number of nodes in the tree is between `1` and `5000`. each node will have a value between `0` and `100000`. answers will be accepted as correct if they are within `10^-5` of the correct answer.",,
1121,Divide Array Into Increasing Sequences,"Given a non-decreasing array of positive integers `nums` and an integer `K`, find out if this array can be divided into one or more disjoint increasing subsequences of length at least `K`.


Example 1:
Input: nums = [1,2,2,3,3,4,4], K = 3
Output: true
Explanation: 
The array can be divided into the two subsequences [1,2,3,4] and [2,3,4] with lengths at least 3 each.


Example 2:
Input: nums = [5,6,6,7,8], K = 3
Output: false
Explanation: 
There is no way to divide the array using the conditions required.

Note:
`1 <= nums.length <= 10^5`
`1 <= K <= nums.length`
`1 <= nums[i] <= 10^5`",Hard,https://leetcode.com/problems/divide-array-into-increasing-sequences,Google,Math,67,,"given a non-decreasing array of positive integers `nums` and an integer `k`, find out if this array can be divided into one or more disjoint increasing subsequences of length at least `k`.","input: nums = [1,2,2,3,3,4,4], k = 3 output: true explanation: the array can be divided into the two subsequences [1,2,3,4] and [2,3,4] with lengths at least 3 each. example 2: input: nums = [5,6,6,7,8], k = 3 output: false explanation: there is no way to divide the array using the conditions required. note: `1 <= nums.length <= 10^5` `1 <= k <= nums.length` `1 <= nums[i] <= 10^5`",,
1122,Relative Sort Array,"Given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`.

Sort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`.  Elements that don't appear in `arr2` should be placed at the end of `arr1` in ascending order.


Example 1:
Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]

Constraints:
`1 <= arr1.length, arr2.length <= 1000`
`0 <= arr1[i], arr2[i] <= 1000`
All the elements of `arr2` are distinct.

Each `arr2[i]` is in `arr1`.",Easy,https://leetcode.com/problems/relative-sort-array,"Amazon,Apple","Array,Sort",1036,,"given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`. sort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`. elements that don't appear in `arr2` should be placed at the end of `arr1` in ascending order.","input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6] output: [2,2,2,1,4,3,3,9,6,7,19]","`1 <= arr1.length, arr2.length <= 1000` `0 <= arr1[i], arr2[i] <= 1000` all the elements of `arr2` are distinct. each `arr2[i]` is in `arr1`.",
1123,Lowest Common Ancestor of Deepest Leaves,"Given the `root` of a binary tree, return the lowest common ancestor of its deepest leaves.

Recall that:
The node of a binary tree is a leaf if and only if it has no children
The depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`.

The lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`.

Note: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored in yellow in the diagram.

The nodes coloured in blue are the deepest leaf-nodes of the tree.

Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.


Example 2:
Input: root = [1]
Output: [1]
Explanation: The root is the deepest node in the tree, and it's the lca of itself.


Example 3:
Input: root = [0,1,3,null,2]
Output: [2]
Explanation: The deepest leaf node in the tree is 2, the lca of one node is itself.


Constraints:
The number of nodes in the tree will be in the range `[1, 1000]`.

`0 <= Node.val <= 1000`
The values of the nodes in the tree are unique.",Medium,https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves,Facebook,"Tree,Depth-first Search",661,"[Lowest Common Ancestor of a Binary Tree IV, /problems/lowest-common-ancestor-of-a-binary-tree-iv/, Medium]","given the `root` of a binary tree, return the lowest common ancestor of its deepest leaves. recall that: the node of a binary tree is a leaf if and only if it has no children the depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`. the lowest common ancestor of a set `s` of nodes, is the node `a` with the largest depth such that every node in `s` is in the subtree with root `a`. note: this question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/","input: root = [3,5,1,6,2,0,8,null,null,7,4] output: [2,7,4] explanation: we return the node with value 2, colored in yellow in the diagram. the nodes coloured in blue are the deepest leaf-nodes of the tree. note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3. example 2: input: root = [1] output: [1] explanation: the root is the deepest node in the tree, and it's the lca of itself. example 3: input: root = [0,1,3,null,2] output: [2] explanation: the deepest leaf node in the tree is 2, the lca of one node is itself.","the number of nodes in the tree will be in the range `[1, 1000]`. `0 <= node.val <= 1000` the values of the nodes in the tree are unique.",
1124,Longest Well-Performing Interval,"We are given `hours`, a list of the number of hours worked per day for a given employee.

A day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than `8`.

A well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.

Return the length of the longest well-performing interval.


Example 1:
Input: hours = [9,9,6,0,6,6,9]
Output: 3
Explanation: The longest well-performing interval is [9,9,6].


Constraints:
`1 <= hours.length <= 10000`
`0 <= hours[i] <= 16`",Medium,https://leetcode.com/problems/longest-well-performing-interval,Adobe,Stack,593,,"we are given `hours`, a list of the number of hours worked per day for a given employee. a day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than `8`. a well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days. return the length of the longest well-performing interval.","input: hours = [9,9,6,0,6,6,9] output: 3 explanation: the longest well-performing interval is [9,9,6].",`1 <= hours.length <= 10000` `0 <= hours[i] <= 16`,
1125,Smallest Sufficient Team,"In a project, you have a list of required skills `req_skills`, and a list of people. The `ith` person `people[i]` contains a list of skills that the person has.

Consider a sufficient team: a set of people such that for every required skill in `req_skills`, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.

For example, `team = [0, 1, 3]` represents the people with skills `people[0]`, `people[1]`, and `people[3]`.

Return any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.

It is guaranteed an answer exists.


Example 1:
Input: req_skills = [""java"",""nodejs"",""reactjs""], people = [[""java""],[""nodejs""],[""nodejs"",""reactjs""]]
Output: [0,2]

Example 2:
Input: req_skills = [""algorithms"",""math"",""java"",""reactjs"",""csharp"",""aws""], people = [[""algorithms"",""math"",""java""],[""algorithms"",""math"",""reactjs""],[""java"",""csharp"",""aws""],[""reactjs"",""csharp""],[""csharp"",""math""],[""aws"",""java""]]
Output: [1,2]

Constraints:
`1 <= req_skills.length <= 16`
`1 <= req_skills[i].length <= 16`
`req_skills[i]` consists of lowercase English letters.

All the strings of `req_skills` are unique.

`1 <= people.length <= 60`
`0 <= people[i].length <= 16`
`1 <= people[i][j].length <= 16`
`people[i][j]` consists of lowercase English letters.

All the strings of `people[i]` are unique.

Every skill in `people[i]` is a skill in `req_skills`.

It is guaranteed a sufficient team exists.",Hard,https://leetcode.com/problems/smallest-sufficient-team,Google,"Dynamic Programming,Bit Manipulation",469,,"in a project, you have a list of required skills `req_skills`, and a list of people. the `ith` person `people[i]` contains a list of skills that the person has. consider a sufficient team: a set of people such that for every required skill in `req_skills`, there is at least one person in the team who has that skill. we can represent these teams by the index of each person. for example, `team = [0, 1, 3]` represents the people with skills `people[0]`, `people[1]`, and `people[3]`. return any sufficient team of the smallest possible size, represented by the index of each person. you may return the answer in any order. it is guaranteed an answer exists.","input: req_skills = [""java"",""nodejs"",""reactjs""], people = [[""java""],[""nodejs""],[""nodejs"",""reactjs""]] output: [0,2] example 2: input: req_skills = [""algorithms"",""math"",""java"",""reactjs"",""csharp"",""aws""], people = [[""algorithms"",""math"",""java""],[""algorithms"",""math"",""reactjs""],[""java"",""csharp"",""aws""],[""reactjs"",""csharp""],[""csharp"",""math""],[""aws"",""java""]] output: [1,2]",`1 <= req_skills.length <= 16` `1 <= req_skills[i].length <= 16` `req_skills[i]` consists of lowercase english letters. all the strings of `req_skills` are unique. `1 <= people.length <= 60` `0 <= people[i].length <= 16` `1 <= people[i][j].length <= 16` `people[i][j]` consists of lowercase english letters. all the strings of `people[i]` are unique. every skill in `people[i]` is a skill in `req_skills`. it is guaranteed a sufficient team exists.,
1126,Active Businesses,SQL Schema,Medium,https://leetcode.com/problems/active-businesses,Yelp,,119,,sql schema,,,
1127,User Purchase Platform,SQL Schema,Hard,https://leetcode.com/problems/user-purchase-platform,LinkedIn,,90,,sql schema,,,
1128,Number of Equivalent Domino Pairs,"Given a list of `dominoes`, `dominoes[i] = [a, b]` is equivalent to `dominoes[j] = [c, d]` if and only if either (`a==c` and `b==d`), or (`a==d` and `b==c`) - that is, one domino can be rotated to be equal to another domino.

Return the number of pairs `(i, j)` for which `0 <= i < j < dominoes.length`, and `dominoes[i]` is equivalent to `dominoes[j]`.


Example 1:
Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1

Constraints:
`1 <= dominoes.length <= 40000`
`1 <= dominoes[i][j] <= 9`",Easy,https://leetcode.com/problems/number-of-equivalent-domino-pairs,Amazon,Array,310,,"given a list of `dominoes`, `dominoes[i] = [a, b]` is equivalent to `dominoes[j] = [c, d]` if and only if either (`a==c` and `b==d`), or (`a==d` and `b==c`) - that is, one domino can be rotated to be equal to another domino. return the number of pairs `(i, j)` for which `0 <= i < j < dominoes.length`, and `dominoes[i]` is equivalent to `dominoes[j]`.","input: dominoes = [[1,2],[2,1],[3,4],[5,6]] output: 1",`1 <= dominoes.length <= 40000` `1 <= dominoes[i][j] <= 9`,
1129,Shortest Path with Alternating Colors,"Consider a directed graph, with nodes labelled `0, 1, ..., n-1`.  In this graph, each edge is either red or blue, and there could be self-edges or parallel edges.

Each `[i, j]` in `red_edges` denotes a red directed edge from node `i` to node `j`.  Similarly, each `[i, j]` in `blue_edges` denotes a blue directed edge from node `i` to node `j`.

Return an array `answer` of length `n`, where each `answer[X]` is the length of the shortest path from node `0` to node `X` such that the edge colors alternate along the path (or `-1` if such a path doesn't exist).


Example 1:
Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
Output: [0,1,-1]

Example 2:
Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
Output: [0,1,-1]

Example 3:
Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
Output: [0,-1,-1]

Example 4:
Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
Output: [0,1,2]

Example 5:
Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]
Output: [0,1,1]

Constraints:
`1 <= n <= 100`
`red_edges.length <= 400`
`blue_edges.length <= 400`
`red_edges[i].length == blue_edges[i].length == 2`
`0 <= red_edges[i][j], blue_edges[i][j] < n`",Medium,https://leetcode.com/problems/shortest-path-with-alternating-colors,Amazon,"Breadth-first Search,Graph",651,,"consider a directed graph, with nodes labelled `0, 1, ..., n-1`. in this graph, each edge is either red or blue, and there could be self-edges or parallel edges. each `[i, j]` in `red_edges` denotes a red directed edge from node `i` to node `j`. similarly, each `[i, j]` in `blue_edges` denotes a blue directed edge from node `i` to node `j`. return an array `answer` of length `n`, where each `answer[x]` is the length of the shortest path from node `0` to node `x` such that the edge colors alternate along the path (or `-1` if such a path doesn't exist).","input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = [] output: [0,1,-1] example 2: input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]] output: [0,1,-1] example 3: input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]] output: [0,-1,-1] example 4: input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]] output: [0,1,2] example 5: input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]] output: [0,1,1]","`1 <= n <= 10^0` `red_edges.length <= 400` `blue_edges.length <= 400` `red_edges[i].length == blue_edges[i].length == 2` `0 <= red_edges[i][j], blue_edges[i][j] < n`",
1130,Minimum Cost Tree From Leaf Values,"Given an array `arr` of positive integers, consider all binary trees such that:
Each node has either 0 or 2 children;
The values of `arr` correspond to the values of each leaf in an in-order traversal of the tree.  (Recall that a node is a leaf if and only if it has 0 children.)
The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.

Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.  It is guaranteed this sum fits into a 32-bit integer.


Example 1:
Input: arr = [6,2,4]
Output: 32
Explanation:
There are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.

    24            24
   /  \          /  \
  12   4        6    8
 /  \               / \
6    2             2   4

Constraints:
`2 <= arr.length <= 40`
`1 <= arr[i] <= 15`
It is guaranteed that the answer fits into a 32-bit signed integer (ie. it is less than `2^31`).",Medium,https://leetcode.com/problems/minimum-cost-tree-from-leaf-values,"Amazon,Bloomberg","Dynamic Programming,Stack,Tree",2035,,"given an array `arr` of positive integers, consider all binary trees such that: each node has either 0 or 2 children; the values of `arr` correspond to the values of each leaf in an in-order traversal of the tree. (recall that a node is a leaf if and only if it has 0 children.) the value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively. among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node. it is guaranteed this sum fits into a 32-bit integer.","input: arr = [6,2,4] output: 32 explanation: there are two possible trees. the first has non-leaf node sum 36, and the second has non-leaf node sum 32. 24 24 / \ / \ 12 4 6 8 / \ / \ 6 2 2 4",`2 <= arr.length <= 40` `1 <= arr[i] <= 15` it is guaranteed that the answer fits into a 32-bit signed integer (ie. it is less than `2^31`).,
1131,Maximum of Absolute Value Expression,"Given two arrays of integers with equal lengths, return the maximum value of:
`|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|`
where the maximum is taken over all `0 <= i, j < arr1.length`.


Example 1:
Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]
Output: 13

Example 2:
Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]
Output: 20

Constraints:
`2 <= arr1.length == arr2.length <= 40000`
`-10^6 <= arr1[i], arr2[i] <= 10^6`",Medium,https://leetcode.com/problems/maximum-of-absolute-value-expression,Google,"Math,Bit Manipulation",304,,"given two arrays of integers with equal lengths, return the maximum value of: `|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|` where the maximum is taken over all `0 <= i, j < arr1.length`.","input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6] output: 13 example 2: input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4] output: 20","`2 <= arr1.length == arr2.length <= 40000` `-10^6 <= arr1[i], arr2[i] <= 10^6`",
1132,Reported Posts II,SQL Schema,Medium,https://leetcode.com/problems/reported-posts-ii,Facebook,,80,,sql schema,,,
1133,Largest Unique Number,"Given an array of integers `A`, return the largest integer that only occurs once.

If no integer occurs once, return -1.


Example 1:
Input: [5,7,3,9,4,9,8,3,1]
Output: 8
Explanation: 
The maximum integer in the array is 9 but it is repeated. The number 8 occurs only once, so it's the answer.


Example 2:
Input: [9,9,8,8]
Output: -1
Explanation: 
There is no number that occurs only once.

Note:
`1 <= A.length <= 2000`
`0 <= A[i] <= 1000`",Easy,https://leetcode.com/problems/largest-unique-number,Amazon,"Array,Hash Table",178,,"given an array of integers `a`, return the largest integer that only occurs once. if no integer occurs once, return -1.","input: [5,7,3,9,4,9,8,3,1] output: 8 explanation: the maximum integer in the array is 9 but it is repeated. the number 8 occurs only once, so it's the answer. example 2: input: [9,9,8,8] output: -1 explanation: there is no number that occurs only once. note: `1 <= a.length <= 2000` `0 <= a[i] <= 1000`",,
1134,Armstrong Number,"Given an integer `n`, return `true` if and only if it is an Armstrong number.

The `k`-digit number `n` is an Armstrong number if and only if the `kth` power of each digit sums to `n`.


Example 1:
Input: n = 153
Output: true
Explanation: 153 is a 3-digit number, and 153 = 13 + 53 + 33.


Example 2:
Input: n = 123
Output: false
Explanation: 123 is a 3-digit number, and 123 != 13 + 23 + 33 = 36.


Constraints:
`1 <= n <= 108`",Easy,https://leetcode.com/problems/armstrong-number,Amazon,Math,91,,"given an integer `n`, return `true` if and only if it is an armstrong number. the `k`-digit number `n` is an armstrong number if and only if the `kth` power of each digit sums to `n`.","input: n = 153 output: true explanation: 153 is a 3-digit number, and 153 = 13 + 53 + 33. example 2: input: n = 123 output: false explanation: 123 is a 3-digit number, and 123 != 13 + 23 + 33 = 36.",`1 <= n <= 10^8`,
1135,Connecting Cities With Minimum Cost,"There are `N` cities numbered from 1 to `N`.

You are given `connections`, where each `connections[i] = [city1, city2, cost]` represents the cost to connect `city1` and `city2` together.  (A connection is bidirectional: connecting `city1` and `city2` is the same as connecting `city2` and `city1`.)
Return the minimum cost so that for every pair of cities, there exists a path of connections (possibly of length 1) that connects those two cities together.  The cost is the sum of the connection costs used. If the task is impossible, return -1.


Example 1:
Input: N = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]
Output: 6
Explanation: 
Choosing any 2 edges will connect all cities so we choose the minimum 2.


Example 2:
Input: N = 4, connections = [[1,2,3],[3,4,4]]
Output: -1
Explanation: 
There is no way to connect all cities even if all edges are used.

Note:
`1 <= N <= 10000`
`1 <= connections.length <= 10000`
`1 <= connections[i][0], connections[i][1] <= N`
`0 <= connections[i][2] <= 10^5`
`connections[i][0] != connections[i][1]`",Medium,https://leetcode.com/problems/connecting-cities-with-minimum-cost,"Amazon,Uber","Union Find,Graph",471,,"there are `n` cities numbered from 1 to `n`. you are given `connections`, where each `connections[i] = [city1, city2, cost]` represents the cost to connect `city1` and `city2` together. (a connection is bidirectional: connecting `city1` and `city2` is the same as connecting `city2` and `city1`.) return the minimum cost so that for every pair of cities, there exists a path of connections (possibly of length 1) that connects those two cities together. the cost is the sum of the connection costs used. if the task is impossible, return -1.","input: n = 3, connections = [[1,2,5],[1,3,6],[2,3,1]] output: 6 explanation: choosing any 2 edges will connect all cities so we choose the minimum 2. example 2: input: n = 4, connections = [[1,2,3],[3,4,4]] output: -1 explanation: there is no way to connect all cities even if all edges are used. note: `1 <= n <= 10000` `1 <= connections.length <= 10000` `1 <= connections[i][0], connections[i][1] <= n` `0 <= connections[i][2] <= 10^5` `connections[i][0] != connections[i][1]`",,
1136,Parallel Courses,"You are given an integer `n` which indicates that we have `n` courses, labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [a, b]`, representing a prerequisite relationship between course `a` and course `b`: course `a` has to be studied before course `b`.

In one semester, you can study any number of courses as long as you have studied all the prerequisites for the course you are studying.

Return the minimum number of semesters needed to study all courses. If there is no way to study all the courses, return `-1`.


Example 1:
Input: n = 3, relations = [[1,3],[2,3]]
Output: 2
Explanation: In the first semester, courses 1 and 2 are studied. In the second semester, course 3 is studied.


Example 2:
Input: n = 3, relations = [[1,2],[2,3],[3,1]]
Output: -1
Explanation: No course can be studied because they depend on each other.


Constraints:
`1 <= n <= 5000`
`1 <= relations.length <= 5000`
`1 <= a, b <= n`
`a != b`
All the pairs `[a, b]` are unique.",Medium,https://leetcode.com/problems/parallel-courses,"Google,Uber","Dynamic Programming,Depth-first Search,Graph",362,"[Course Schedule II, /problems/course-schedule-ii/, Medium], [Parallel Courses II, /problems/parallel-courses-ii/, Hard]","you are given an integer `n` which indicates that we have `n` courses, labeled from `1` to `n`. you are also given an array `relations` where `relations[i] = [a, b]`, representing a prerequisite relationship between course `a` and course `b`: course `a` has to be studied before course `b`. in one semester, you can study any number of courses as long as you have studied all the prerequisites for the course you are studying. return the minimum number of semesters needed to study all courses. if there is no way to study all the courses, return `-1`.","input: n = 3, relations = [[1,3],[2,3]] output: 2 explanation: in the first semester, courses 1 and 2 are studied. in the second semester, course 3 is studied. example 2: input: n = 3, relations = [[1,2],[2,3],[3,1]] output: -1 explanation: no course can be studied because they depend on each other.","`1 <= n <= 5000` `1 <= relations.length <= 5000` `1 <= a, b <= n` `a != b` all the pairs `[a, b]` are unique.",
1137,N-th Tribonacci Number,"The Tribonacci sequence Tn is defined as follows: 
T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given `n`, return the value of Tn.


Example 1:
Input: n = 4
Output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4

Example 2:
Input: n = 25
Output: 1389537

Constraints:
`0 <= n <= 37`
The answer is guaranteed to fit within a 32-bit integer, ie. `answer <= 2^31 - 1`.",Easy,https://leetcode.com/problems/n-th-tribonacci-number,Facebook,Recursion,515,"[Climbing Stairs, /problems/climbing-stairs/, Easy], [Fibonacci Number, /problems/fibonacci-number/, Easy]","the tribonacci sequence tn is defined as follows: t0 = 0, t1 = 1, t2 = 1, and tn+3 = tn + tn+1 + tn+2 for n >= 0. given `n`, return the value of tn.",input: n = 4 output: 4 explanation: t_3 = 0 + 1 + 1 = 2 t_4 = 1 + 1 + 2 = 4 example 2: input: n = 25 output: 1389537,"`0 <= n <= 37` the answer is guaranteed to fit within a 32-bit integer, ie. `answer <= 2^31 - 1`.",
1138,Alphabet Board Path,"On an alphabet board, we start at position `(0, 0)`, corresponding to character `board[0][0]`.

Here, `board = [""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]`, as shown in the diagram below.

We may make the following moves:
`'U'` moves our position up one row, if the position exists on the board;
`'D'` moves our position down one row, if the position exists on the board;
`'L'` moves our position left one column, if the position exists on the board;
`'R'` moves our position right one column, if the position exists on the board;
`'!'` adds the character `board[r][c]` at our current position `(r, c)` to the answer.

(Here, the only positions that exist on the board are positions with letters on them.)
Return a sequence of moves that makes our answer equal to `target` in the minimum number of moves.  You may return any path that does so.


Example 1:
Input: target = ""leet""
Output: ""DDR!UURRR!!DDD!""

Example 2:
Input: target = ""code""
Output: ""RR!DDRR!UUL!R!""

Constraints:
`1 <= target.length <= 100`
`target` consists only of English lowercase letters.",Medium,https://leetcode.com/problems/alphabet-board-path,"Google,Amazon","Hash Table,String",423,,"on an alphabet board, we start at position `(0, 0)`, corresponding to character `board[0][0]`. here, `board = [""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]`, as shown in the diagram below. we may make the following moves: `'u'` moves our position up one row, if the position exists on the board; `'d'` moves our position down one row, if the position exists on the board; `'l'` moves our position left one column, if the position exists on the board; `'r'` moves our position right one column, if the position exists on the board; `'!'` adds the character `board[r][c]` at our current position `(r, c)` to the answer. (here, the only positions that exist on the board are positions with letters on them.) return a sequence of moves that makes our answer equal to `target` in the minimum number of moves. you may return any path that does so.","input: target = ""leet"" output: ""ddr!uurrr!!ddd!"" example 2: input: target = ""code"" output: ""rr!ddrr!uul!r!""",`1 <= target.length <= 10^0` `target` consists only of english lowercase letters.,
1139,Largest 1-Bordered Square,"Given a 2D `grid` of `0`s and `1`s, return the number of elements in the largest square subgrid that has all `1`s on its border, or `0` if such a subgrid doesn't exist in the `grid`.


Example 1:
Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 9

Example 2:
Input: grid = [[1,1,0,0]]
Output: 1

Constraints:
`1 <= grid.length <= 100`
`1 <= grid[0].length <= 100`
`grid[i][j]` is `0` or `1`",Medium,https://leetcode.com/problems/largest-1-bordered-square,Amazon,Dynamic Programming,303,,"given a 2d `grid` of `0`s and `1`s, return the number of elements in the largest square subgrid that has all `1`s on its border, or `0` if such a subgrid doesn't exist in the `grid`.","input: grid = [[1,1,1],[1,0,1],[1,1,1]] output: 9 example 2: input: grid = [[1,1,0,0]] output: 1",`1 <= grid.length <= 10^0` `1 <= grid[0].length <= 10^0` `grid[i][j]` is `0` or `1`,
1140,Stone Game II,"Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones `piles[i]`.  The objective of the game is to end with the most stones. 
Alice and Bob take turns, with Alice starting first.  Initially, `M = 1`.

On each player's turn, that player can take all the stones in the first `X` remaining piles, where `1 <= X <= 2M`.  Then, we set `M = max(M, X)`.

The game continues until all the stones have been taken.

Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.


Example 1:
Input: piles = [2,7,9,4,4]
Output: 10
Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 

Example 2:
Input: piles = [1,2,3,4,5,100]
Output: 104

Constraints:
`1 <= piles.length <= 100`
`1 <= piles[i] <= 104`",Medium,https://leetcode.com/problems/stone-game-ii,Google,Dynamic Programming,760,"[Stone Game V, /problems/stone-game-v/, Hard], [Stone Game VI, /problems/stone-game-vi/, Medium], [Stone Game VII, /problems/stone-game-vii/, Medium]","alice and bob continue their games with piles of stones. there are a number of piles arranged in a row, and each pile has a positive integer number of stones `piles[i]`. the objective of the game is to end with the most stones. alice and bob take turns, with alice starting first. initially, `m = 1`. on each player's turn, that player can take all the stones in the first `x` remaining piles, where `1 <= x <= 2m`. then, we set `m = max(m, x)`. the game continues until all the stones have been taken. assuming alice and bob play optimally, return the maximum number of stones alice can get.","input: piles = [2,7,9,4,4] output: 10 explanation: if alice takes one pile at the beginning, bob takes two piles, then alice takes 2 piles again. alice can get 2 + 4 + 4 = 10 piles in total. if alice takes two piles at the beginning, then bob can take all three piles left. in this case, alice get 2 + 7 = 9 piles in total. so we return 10 since it's larger. example 2: input: piles = [1,2,3,4,5,100] output: 104",`1 <= piles.length <= 10^0` `1 <= piles[i] <= 10^4`,
1141,User Activity for the Past 30 Days I,SQL Schema,Easy,https://leetcode.com/problems/user-activity-for-the-past-30-days-i,Zoom,,49,,sql schema,,,
1142,User Activity for the Past 30 Days II,SQL Schema,Easy,https://leetcode.com/problems/user-activity-for-the-past-30-days-ii,"Facebook,Zoom",,49,,sql schema,,,
1143,Longest Common Subsequence,"Given two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return `0`.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, `""ace""` is a subsequence of `""abcde""`.

A common subsequence of two strings is a subsequence that is common to both strings.


Example 1:
Input: text1 = ""abcde"", text2 = ""ace"" 
Output: 3  
Explanation: The longest common subsequence is ""ace"" and its length is 3.


Example 2:
Input: text1 = ""abc"", text2 = ""abc""
Output: 3
Explanation: The longest common subsequence is ""abc"" and its length is 3.


Example 3:
Input: text1 = ""abc"", text2 = ""def""
Output: 0
Explanation: There is no such common subsequence, so the result is 0.


Constraints:
`1 <= text1.length, text2.length <= 1000`
`text1` and `text2` consist of only lowercase English characters.",Medium,https://leetcode.com/problems/longest-common-subsequence,"Amazon,Microsoft,eBay",Dynamic Programming,2799,"[Longest Palindromic Subsequence, /problems/longest-palindromic-subsequence/, Medium], [Delete Operation for Two Strings, /problems/delete-operation-for-two-strings/, Medium], [Shortest Common Supersequence , /problems/shortest-common-supersequence/, Hard]","given two strings `text1` and `text2`, return the length of their longest common subsequence. if there is no common subsequence, return `0`. a subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters. for example, `""ace""` is a subsequence of `""abcde""`. a common subsequence of two strings is a subsequence that is common to both strings.","input: text1 = ""abcde"", text2 = ""ace"" output: 3 explanation: the longest common subsequence is ""ace"" and its length is 3. example 2: input: text1 = ""abc"", text2 = ""abc"" output: 3 explanation: the longest common subsequence is ""abc"" and its length is 3. example 3: input: text1 = ""abc"", text2 = ""def"" output: 0 explanation: there is no such common subsequence, so the result is 0.","`1 <= text1.length, text2.length <= 1000` `text1` and `text2` consist of only lowercase english characters.",
1144,Decrease Elements To Make Array Zigzag,"Given an array `nums` of integers, a move consists of choosing any element and decreasing it by 1.

An array `A` is a zigzag array if either:
Every even-indexed element is greater than adjacent elements, ie. `A[0] > A[1] < A[2] > A[3] < A[4] > ...`
OR, every odd-indexed element is greater than adjacent elements, ie. `A[0] < A[1] > A[2] < A[3] > A[4] < ...`
Return the minimum number of moves to transform the given array `nums` into a zigzag array.


Example 1:
Input: nums = [1,2,3]
Output: 2
Explanation: We can decrease 2 to 0 or 3 to 1.


Example 2:
Input: nums = [9,6,1,6,2]
Output: 4

Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 1000`",Medium,https://leetcode.com/problems/decrease-elements-to-make-array-zigzag,Google,Array,174,,"given an array `nums` of integers, a move consists of choosing any element and decreasing it by 1. an array `a` is a zigzag array if either: every even-indexed element is greater than adjacent elements, ie. `a[0] > a[1] < a[2] > a[3] < a[4] > ...` or, every odd-indexed element is greater than adjacent elements, ie. `a[0] < a[1] > a[2] < a[3] > a[4] < ...` return the minimum number of moves to transform the given array `nums` into a zigzag array.","input: nums = [1,2,3] output: 2 explanation: we can decrease 2 to 0 or 3 to 1. example 2: input: nums = [9,6,1,6,2] output: 4",`1 <= nums.length <= 1000` `1 <= nums[i] <= 1000`,
1145,Binary Tree Coloring Game,"Two players play a turn based game on a binary tree.  We are given the `root` of this binary tree, and the number of nodes `n` in the tree.  `n` is odd, and each node has a distinct value from `1` to `n`.

Initially, the first player names a value `x` with `1 <= x <= n`, and the second player names a value `y` with `1 <= y <= n` and `y != x`.  The first player colors the node with value `x` red, and the second player colors the node with value `y` blue.

Then, the players take turns starting with the first player.  In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)
If (and only if) a player cannot choose such a node in this way, they must pass their turn.  If both players pass their turn, the game ends, and the winner is the player that colored more nodes.

You are the second player.  If it is possible to choose such a `y` to ensure you win the game, return `true`.  If it is not possible, return `false`.


Example 1:
Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3
Output: true
Explanation: The second player can choose the node with value 2.


Constraints:
`root` is the root of a binary tree with `n` nodes and distinct node values from `1` to `n`.

`n` is odd.

`1 <= x <= n <= 100`",Medium,https://leetcode.com/problems/binary-tree-coloring-game,"Google,Bloomberg","Tree,Depth-first Search",630,,"two players play a turn based game on a binary tree. we are given the `root` of this binary tree, and the number of nodes `n` in the tree. `n` is odd, and each node has a distinct value from `1` to `n`. initially, the first player names a value `x` with `1 <= x <= n`, and the second player names a value `y` with `1 <= y <= n` and `y != x`. the first player colors the node with value `x` red, and the second player colors the node with value `y` blue. then, the players take turns starting with the first player. in each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.) if (and only if) a player cannot choose such a node in this way, they must pass their turn. if both players pass their turn, the game ends, and the winner is the player that colored more nodes. you are the second player. if it is possible to choose such a `y` to ensure you win the game, return `true`. if it is not possible, return `false`.","input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3 output: true explanation: the second player can choose the node with value 2.",`root` is the root of a binary tree with `n` nodes and distinct node values from `1` to `n`. `n` is odd. `1 <= x <= n <= 10^0`,
1146,Snapshot Array,"Implement a SnapshotArray that supports the following interface:
`SnapshotArray(int length)` initializes an array-like data structure with the given length.  Initially, each element equals 0.

`void set(index, val)` sets the element at the given `index` to be equal to `val`.

`int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`.

`int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id`

Example 1:
Input: [""SnapshotArray"",""set"",""snap"",""set"",""get""]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5

Constraints:
`1 <= length <= 50000`
At most `50000` calls will be made to `set`, `snap`, and `get`.

`0 <= index < length`
`0 <= snap_id < `(the total number of times we call `snap()`)
`0 <= val <= 10^9`",Medium,https://leetcode.com/problems/snapshot-array,"Google,Rubrik",Array,826,,"implement a snapshotarray that supports the following interface: `snapshotarray(int length)` initializes an array-like data structure with the given length. initially, each element equals 0. `void set(index, val)` sets the element at the given `index` to be equal to `val`. `int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`. `int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id`","input: [""snapshotarray"",""set"",""snap"",""set"",""get""] [[3],[0,5],[],[0,6],[0,0]] output: [null,null,0,null,5] explanation: snapshotarray snapshotarr = new snapshotarray(3); // set the length to be 3 snapshotarr.set(0,5); // set array[0] = 5 snapshotarr.snap(); // take a snapshot, return snap_id = 0 snapshotarr.set(0,6); snapshotarr.get(0,0); // get the value of array[0] with snap_id = 0, return 5","`1 <= length <= 50000` at most `50000` calls will be made to `set`, `snap`, and `get`. `0 <= index < length` `0 <= snap_id < `(the total number of times we call `snap()`) `0 <= val <= 10^9`",
1147,Longest Chunked Palindrome Decomposition,"You are given a string `text`. You should split it to k substrings `(subtext1, subtext2, ..., subtextk)` such that:
`subtexti` is a non-empty string.

The concatenation of all the substrings is equal to `text` (i.e., `subtext1 + subtext2 + ... + subtextk == text`).

`subtexti == subtextk - i + 1` for all valid values of `i` (i.e., `1 <= i <= k`).

Return the largest possible value of `k`.


Example 1:
Input: text = ""ghiabcdefhelloadamhelloabcdefghi""
Output: 7
Explanation: We can split the string on ""(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)"".


Example 2:
Input: text = ""merchant""
Output: 1
Explanation: We can split the string on ""(merchant)"".


Example 3:
Input: text = ""antaprezatepzapreanta""
Output: 11
Explanation: We can split the string on ""(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)"".


Example 4:
Input: text = ""aaa""
Output: 3
Explanation: We can split the string on ""(a)(a)(a)"".


Constraints:
`1 <= text.length <= 1000`
`text` consists only of lowercase English characters.",Hard,https://leetcode.com/problems/longest-chunked-palindrome-decomposition,Google,"Dynamic Programming,Rolling Hash",264,,"you are given a string `text`. you should split it to k substrings `(subtext1, subtext2, ..., subtextk)` such that: `subtexti` is a non-empty string. the concatenation of all the substrings is equal to `text` (i.e., `subtext1 + subtext2 + ... + subtextk == text`). `subtexti == subtextk - i + 1` for all valid values of `i` (i.e., `1 <= i <= k`). return the largest possible value of `k`.","input: text = ""ghiabcdefhelloadamhelloabcdefghi"" output: 7 explanation: we can split the string on ""(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)"". example 2: input: text = ""merchant"" output: 1 explanation: we can split the string on ""(merchant)"". example 3: input: text = ""antaprezatepzapreanta"" output: 11 explanation: we can split the string on ""(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)"". example 4: input: text = ""aaa"" output: 3 explanation: we can split the string on ""(a)(a)(a)"".",`1 <= text.length <= 1000` `text` consists only of lowercase english characters.,
1148,Article Views I,SQL Schema,Easy,https://leetcode.com/problems/article-views-i,LinkedIn,,49,,sql schema,,,
1149,Article Views II,SQL Schema,Medium,https://leetcode.com/problems/article-views-ii,LinkedIn,,54,,sql schema,,,
1150,Check If a Number Is Majority Element in a Sorted Array,"Given an array `nums` sorted in non-decreasing order, and a number `target`, return `True` if and only if `target` is a majority element.

A majority element is an element that appears more than `N/2` times in an array of length `N`.


Example 1:
Input: nums = [2,4,5,5,5,5,5,6,6], target = 5
Output: true
Explanation: 
The value 5 appears 5 times and the length of the array is 9.

Thus, 5 is a majority element because 5 > 9/2 is true.


Example 2:
Input: nums = [10,100,101,101], target = 101
Output: false
Explanation: 
The value 101 appears 2 times and the length of the array is 4.

Thus, 101 is not a majority element because 2 > 4/2 is false.


Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 10^9`
`1 <= target <= 10^9`",Easy,https://leetcode.com/problems/check-if-a-number-is-majority-element-in-a-sorted-array,Facebook,"Array,Binary Search",191,"[Majority Element, /problems/majority-element/, Easy], [Majority Element II, /problems/majority-element-ii/, Medium]","given an array `nums` sorted in non-decreasing order, and a number `target`, return `true` if and only if `target` is a majority element. a majority element is an element that appears more than `n/2` times in an array of length `n`.","input: nums = [2,4,5,5,5,5,5,6,6], target = 5 output: true explanation: the value 5 appears 5 times and the length of the array is 9. thus, 5 is a majority element because 5 > 9/2 is true. example 2: input: nums = [10,100,101,101], target = 101 output: false explanation: the value 101 appears 2 times and the length of the array is 4. thus, 101 is not a majority element because 2 > 4/2 is false.",`1 <= nums.length <= 1000` `1 <= nums[i] <= 10^9` `1 <= target <= 10^9`,
1151,Minimum Swaps to Group All 1's Together,"Given a binary array `data`, return the minimum number of swaps required to group all `1`’s present in the array together in any place in the array.


Example 1:
Input: data = [1,0,1,0,1]
Output: 1
Explanation: 
There are 3 ways to group all 1's together:
[1,1,1,0,0] using 1 swap.

[0,1,1,1,0] using 2 swaps.

[0,0,1,1,1] using 1 swap.

The minimum is 1.


Example 2:
Input: data = [0,0,0,1,0]
Output: 0
Explanation: 
Since there is only one 1 in the array, no swaps needed.


Example 3:
Input: data = [1,0,1,0,1,0,0,1,1,0,1]
Output: 3
Explanation: 
One possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1].


Example 4:
Input: data = [1,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1]
Output: 8

Constraints:
`1 <= data.length <= 105`
`data[i]` is `0` or `1`.",Medium,https://leetcode.com/problems/minimum-swaps-to-group-all-1s-together,"IBM,Twitter","Array,Sliding Window",330,"[Minimum Adjacent Swaps for K Consecutive Ones, /problems/minimum-adjacent-swaps-for-k-consecutive-ones/, Hard]","given a binary array `data`, return the minimum number of swaps required to group all `1`’s present in the array together in any place in the array.","input: data = [1,0,1,0,1] output: 1 explanation: there are 3 ways to group all 1's together: [1,1,1,0,0] using 1 swap. [0,1,1,1,0] using 2 swaps. [0,0,1,1,1] using 1 swap. the minimum is 1. example 2: input: data = [0,0,0,1,0] output: 0 explanation: since there is only one 1 in the array, no swaps needed. example 3: input: data = [1,0,1,0,1,0,0,1,1,0,1] output: 3 explanation: one possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1]. example 4: input: data = [1,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1] output: 8",`1 <= data.length <= 10^5` `data[i]` is `0` or `1`.,
1152,Analyze User Website Visit Pattern,"We are given some website visits: the user with name `username[i]` visited the website `website[i]` at time `timestamp[i]`.

A 3-sequence is a list of websites of length 3 sorted in ascending order by the time of their visits.  (The websites in a 3-sequence are not necessarily distinct.)
Find the 3-sequence visited by the largest number of users. If there is more than one solution, return the lexicographically smallest such 3-sequence.


Example 1:
Input: username = [""joe"",""joe"",""joe"",""james"",""james"",""james"",""james"",""mary"",""mary"",""mary""], timestamp = [1,2,3,4,5,6,7,8,9,10], website = [""home"",""about"",""career"",""home"",""cart"",""maps"",""home"",""home"",""about"",""career""]
Output: [""home"",""about"",""career""]
Explanation: 
The tuples in this example are:
[""joe"", 1, ""home""]
[""joe"", 2, ""about""]
[""joe"", 3, ""career""]
[""james"", 4, ""home""]
[""james"", 5, ""cart""]
[""james"", 6, ""maps""]
[""james"", 7, ""home""]
[""mary"", 8, ""home""]
[""mary"", 9, ""about""]
[""mary"", 10, ""career""]
The 3-sequence (""home"", ""about"", ""career"") was visited at least once by 2 users.

The 3-sequence (""home"", ""cart"", ""maps"") was visited at least once by 1 user.

The 3-sequence (""home"", ""cart"", ""home"") was visited at least once by 1 user.

The 3-sequence (""home"", ""maps"", ""home"") was visited at least once by 1 user.

The 3-sequence (""cart"", ""maps"", ""home"") was visited at least once by 1 user.

Note:
`3 <= N = username.length = timestamp.length = website.length <= 50`
`1 <= username[i].length <= 10`
`0 <= timestamp[i] <= 10^9`
`1 <= website[i].length <= 10`
Both `username[i]` and `website[i]` contain only lowercase characters.

It is guaranteed that there is at least one user who visited at least 3 websites.

No user visits two websites at the same time.",Medium,https://leetcode.com/problems/analyze-user-website-visit-pattern,"Amazon,Spotify,DoorDash","Array,Hash Table,Sort",169,,"we are given some website visits: the user with name `username[i]` visited the website `website[i]` at time `timestamp[i]`. a 3-sequence is a list of websites of length 3 sorted in ascending order by the time of their visits. (the websites in a 3-sequence are not necessarily distinct.) find the 3-sequence visited by the largest number of users. if there is more than one solution, return the lexicographically smallest such 3-sequence.","input: username = [""joe"",""joe"",""joe"",""james"",""james"",""james"",""james"",""mary"",""mary"",""mary""], timestamp = [1,2,3,4,5,6,7,8,9,10], website = [""home"",""about"",""career"",""home"",""cart"",""maps"",""home"",""home"",""about"",""career""] output: [""home"",""about"",""career""] explanation: the tuples in this example are: [""joe"", 1, ""home""] [""joe"", 2, ""about""] [""joe"", 3, ""career""] [""james"", 4, ""home""] [""james"", 5, ""cart""] [""james"", 6, ""maps""] [""james"", 7, ""home""] [""mary"", 8, ""home""] [""mary"", 9, ""about""] [""mary"", 10, ""career""] the 3-sequence (""home"", ""about"", ""career"") was visited at least once by 2 users. the 3-sequence (""home"", ""cart"", ""maps"") was visited at least once by 1 user. the 3-sequence (""home"", ""cart"", ""home"") was visited at least once by 1 user. the 3-sequence (""home"", ""maps"", ""home"") was visited at least once by 1 user. the 3-sequence (""cart"", ""maps"", ""home"") was visited at least once by 1 user. note: `3 <= n = username.length = timestamp.length = website.length <= 50` `1 <= username[i].length <= 10` `0 <= timestamp[i] <= 10^9` `1 <= website[i].length <= 10` both `username[i]` and `website[i]` contain only lowercase characters. it is guaranteed that there is at least one user who visited at least 3 websites. no user visits two websites at the same time.",,
1153,String Transforms Into Another String,"Given two strings `str1` and `str2` of the same length, determine whether you can transform `str1` into `str2` by doing zero or more conversions.

In one conversion you can convert all occurrences of one character in `str1` to any other lowercase English character.

Return `true` if and only if you can transform `str1` into `str2`.


Example 1:
Input: str1 = ""aabcc"", str2 = ""ccdee""
Output: true
Explanation: Convert 'c' to 'e' then 'b' to 'd' then 'a' to 'c'. Note that the order of conversions matter.


Example 2:
Input: str1 = ""leetcode"", str2 = ""codeleet""
Output: false
Explanation: There is no way to transform str1 to str2.


Constraints:
`1 <= str1.length == str2.length <= 104`
`str1` and `str2` contain only lowercase English letters.",Hard,https://leetcode.com/problems/string-transforms-into-another-string,"Google,ByteDance",Graph,572,,"given two strings `str1` and `str2` of the same length, determine whether you can transform `str1` into `str2` by doing zero or more conversions. in one conversion you can convert all occurrences of one character in `str1` to any other lowercase english character. return `true` if and only if you can transform `str1` into `str2`.","input: str1 = ""aabcc"", str2 = ""ccdee"" output: true explanation: convert 'c' to 'e' then 'b' to 'd' then 'a' to 'c'. note that the order of conversions matter. example 2: input: str1 = ""leetcode"", str2 = ""codeleet"" output: false explanation: there is no way to transform str1 to str2.",`1 <= str1.length == str2.length <= 10^4` `str1` and `str2` contain only lowercase english letters.,
1154,Day of the Year,"Given a string `date` representing a Gregorian calendar date formatted as `YYYY-MM-DD`, return the day number of the year.


Example 1:
Input: date = ""2019-01-09""
Output: 9
Explanation: Given date is the 9th day of the year in 2019.


Example 2:
Input: date = ""2019-02-10""
Output: 41

Example 3:
Input: date = ""2003-03-01""
Output: 60

Example 4:
Input: date = ""2004-03-01""
Output: 61

Constraints:
`date.length == 10`
`date[4] == date[7] == '-'`, and all other `date[i]`'s are digits
`date` represents a calendar date between Jan 1st, 1900 and Dec 31, 2019.",Easy,https://leetcode.com/problems/day-of-the-year,ZScaler,Math,150,,"given a string `date` representing a gregorian calendar date formatted as `yyyy-mm-dd`, return the day number of the year.","input: date = ""2019-01-09"" output: 9 explanation: given date is the 9th day of the year in 2019. example 2: input: date = ""2019-02-10"" output: 41 example 3: input: date = ""2003-03-01"" output: 60 example 4: input: date = ""2004-03-01"" output: 61","`date.length == 10` `date[4] == date[7] == '-'`, and all other `date[i]`'s are digits `date` represents a calendar date between jan 1st, 1900 and dec 31, 2019.",
1155,Number of Dice Rolls With Target Sum,"You have `d` dice, and each die has `f` faces numbered `1, 2, ..., f`.

Return the number of possible ways (out of `fd` total ways) modulo `10^9 + 7` to roll the dice so the sum of the face up numbers equals `target`.


Example 1:
Input: d = 1, f = 6, target = 3
Output: 1
Explanation: 
You throw one die with 6 faces.  There is only one way to get a sum of 3.


Example 2:
Input: d = 2, f = 6, target = 7
Output: 6
Explanation: 
You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:
1+6, 2+5, 3+4, 4+3, 5+2, 6+1.


Example 3:
Input: d = 2, f = 5, target = 10
Output: 1
Explanation: 
You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.


Example 4:
Input: d = 1, f = 2, target = 3
Output: 0
Explanation: 
You throw one die with 2 faces.  There is no way to get a sum of 3.


Example 5:
Input: d = 30, f = 30, target = 500
Output: 222616187
Explanation: 
The answer must be returned modulo 10^9 + 7.


Constraints:
`1 <= d, f <= 30`
`1 <= target <= 1000`",Medium,https://leetcode.com/problems/number-of-dice-rolls-with-target-sum,"Amazon,Microsoft,ByteDance",Dynamic Programming,1230,"[Equal Sum Arrays With Minimum Number of Operations, /problems/equal-sum-arrays-with-minimum-number-of-operations/, Medium]","you have `d` dice, and each die has `f` faces numbered `1, 2, ..., f`. return the number of possible ways (out of `fd` total ways) modulo `10^9 + 7` to roll the dice so the sum of the face up numbers equals `target`.","input: d = 1, f = 6, target = 3 output: 1 explanation: you throw one die with 6 faces. there is only one way to get a sum of 3. example 2: input: d = 2, f = 6, target = 7 output: 6 explanation: you throw two dice, each with 6 faces. there are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1. example 3: input: d = 2, f = 5, target = 10 output: 1 explanation: you throw two dice, each with 5 faces. there is only one way to get a sum of 10: 5+5. example 4: input: d = 1, f = 2, target = 3 output: 0 explanation: you throw one die with 2 faces. there is no way to get a sum of 3. example 5: input: d = 30, f = 30, target = 500 output: 222616187 explanation: the answer must be returned modulo 10^9 + 7.","`1 <= d, f <= 30` `1 <= target <= 1000`",
1156,Swap For Longest Repeated Character Substring,"Given a string `text`, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.


Example 1:
Input: text = ""ababa""
Output: 3
Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is ""aaa"", which its length is 3.


Example 2:
Input: text = ""aaabaaa""
Output: 6
Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring ""aaaaaa"", which its length is 6.


Example 3:
Input: text = ""aaabbaaa""
Output: 4

Example 4:
Input: text = ""aaaaa""
Output: 5
Explanation: No need to swap, longest repeated character substring is ""aaaaa"", length is 5.


Example 5:
Input: text = ""abcdef""
Output: 1

Constraints:
`1 <= text.length <= 20000`
`text` consist of lowercase English characters only.",Medium,https://leetcode.com/problems/swap-for-longest-repeated-character-substring,Amazon,String,463,,"given a string `text`, we are allowed to swap two of the characters in the string. find the length of the longest substring with repeated characters.","input: text = ""ababa"" output: 3 explanation: we can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. then, the longest repeated character substring is ""aaa"", which its length is 3. example 2: input: text = ""aaabaaa"" output: 6 explanation: swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring ""aaaaaa"", which its length is 6. example 3: input: text = ""aaabbaaa"" output: 4 example 4: input: text = ""aaaaa"" output: 5 explanation: no need to swap, longest repeated character substring is ""aaaaa"", length is 5. example 5: input: text = ""abcdef"" output: 1",`1 <= text.length <= 20000` `text` consist of lowercase english characters only.,
1157,Online Majority Element In Subarray,"Implementing the class `MajorityChecker`, which has the following API:
`MajorityChecker(int[] arr)` constructs an instance of MajorityChecker with the given array `arr`;
`int query(int left, int right, int threshold)` has arguments such that:
	
`0 <= left <= right < arr.length` representing a subarray of `arr`;
`2 * threshold > right - left + 1`, ie. the threshold is always a strict majority of the length of the subarray
Each `query(...)` returns the element in `arr[left], arr[left+1], ..., arr[right]` that occurs at least `threshold` times, or `-1` if no such element exists.


Example:
MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);
majorityChecker.query(0,5,4); // returns 1
majorityChecker.query(0,3,3); // returns -1
majorityChecker.query(2,3,2); // returns 2

Constraints:
`1 <= arr.length <= 20000`
`1 <= arr[i] <= 20000`
For each query, `0 <= left <= right < len(arr)`
For each query, `2 * threshold > right - left + 1`
The number of queries is at most `10000`",Hard,https://leetcode.com/problems/online-majority-element-in-subarray,"Google,Nutanix","Array,Binary Search,Segment Tree",302,,"implementing the class `majoritychecker`, which has the following api: `majoritychecker(int[] arr)` constructs an instance of majoritychecker with the given array `arr`; `int query(int left, int right, int threshold)` has arguments such that: `0 <= left <= right < arr.length` representing a subarray of `arr`; `2 * threshold > right - left + 1`, ie. the threshold is always a strict majority of the length of the subarray each `query(...)` returns the element in `arr[left], arr[left+1], ..., arr[right]` that occurs at least `threshold` times, or `-1` if no such element exists.","majoritychecker majoritychecker = new majoritychecker([1,1,2,2,1,1]); majoritychecker.query(0,5,4); // returns 1 majoritychecker.query(0,3,3); // returns -1 majoritychecker.query(2,3,2); // returns 2","`1 <= arr.length <= 20000` `1 <= arr[i] <= 20000` for each query, `0 <= left <= right < len(arr)` for each query, `2 * threshold > right - left + 1` the number of queries is at most `10000`",
1158,Market Analysis I,SQL Schema,Medium,https://leetcode.com/problems/market-analysis-i,Poshmark,,57,,sql schema,,,
1159,Market Analysis II,SQL Schema,Hard,https://leetcode.com/problems/market-analysis-ii,Poshmark,,55,,sql schema,,,
1160,Find Words That Can Be Formed by Characters,"You are given an array of strings `words` and a string `chars`.

A string is good if it can be formed by characters from `chars` (each character can only be used once).

Return the sum of lengths of all good strings in `words`.


Example 1:
Input: words = [""cat"",""bt"",""hat"",""tree""], chars = ""atach""
Output: 6
Explanation: 
The strings that can be formed are ""cat"" and ""hat"" so the answer is 3 + 3 = 6.


Example 2:
Input: words = [""hello"",""world"",""leetcode""], chars = ""welldonehoneyr""
Output: 10
Explanation: 
The strings that can be formed are ""hello"" and ""world"" so the answer is 5 + 5 = 10.

Note:
`1 <= words.length <= 1000`
`1 <= words[i].length, chars.length <= 100`
All strings contain lowercase English letters only.",Easy,https://leetcode.com/problems/find-words-that-can-be-formed-by-characters,Amazon,"Array,Hash Table",592,,you are given an array of strings `words` and a string `chars`. a string is good if it can be formed by characters from `chars` (each character can only be used once). return the sum of lengths of all good strings in `words`.,"input: words = [""cat"",""bt"",""hat"",""tree""], chars = ""atach"" output: 6 explanation: the strings that can be formed are ""cat"" and ""hat"" so the answer is 3 + 3 = 6. example 2: input: words = [""hello"",""world"",""leetcode""], chars = ""welldonehoneyr"" output: 10 explanation: the strings that can be formed are ""hello"" and ""world"" so the answer is 5 + 5 = 10. note: `1 <= words.length <= 1000` `1 <= words[i].length, chars.length <= 100` all strings contain lowercase english letters only.",,
1161,Maximum Level Sum of a Binary Tree,"Given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on.

Return the smallest level `x` such that the sum of all the values of nodes at level `x` is maximal.


Example 1:
Input: root = [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.

Level 2 sum = 7 + 0 = 7.

Level 3 sum = 7 + -8 = -1.

So we return the level with the maximum sum which is level 2.


Example 2:
Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]
Output: 2

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-105 <= Node.val <= 105`",Medium,https://leetcode.com/problems/maximum-level-sum-of-a-binary-tree,"Amazon,Facebook","Tree,Breadth-first Search",741,,"given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on. return the smallest level `x` such that the sum of all the values of nodes at level `x` is maximal.","input: root = [1,7,0,7,-8,null,null] output: 2 explanation: level 1 sum = 1. level 2 sum = 7 + 0 = 7. level 3 sum = 7 + -8 = -1. so we return the level with the maximum sum which is level 2. example 2: input: root = [989,null,10250,98693,-89388,null,null,null,-32127] output: 2","the number of nodes in the tree is in the range `[1, 10^4]`. `-10^5 <= node.val <= 10^5`",
1162,As Far from Land as Possible,"Given an `n x n` `grid` containing only values `0` and `1`, where `0` represents water and `1` represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return `-1`.

The distance used in this problem is the Manhattan distance: the distance between two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.


Example 1:
Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.


Example 2:
Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.


Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 100`
`grid[i][j]` is `0` or `1`",Medium,https://leetcode.com/problems/as-far-from-land-as-possible,"Facebook,Google","Breadth-first Search,Graph",829,"[Shortest Distance from All Buildings, /problems/shortest-distance-from-all-buildings/, Hard]","given an `n x n` `grid` containing only values `0` and `1`, where `0` represents water and `1` represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. if no land or water exists in the grid, return `-1`. the distance used in this problem is the manhattan distance: the distance between two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.","input: grid = [[1,0,1],[0,0,0],[1,0,1]] output: 2 explanation: the cell (1, 1) is as far as possible from all the land with distance 2. example 2: input: grid = [[1,0,0],[0,0,0],[0,0,0]] output: 4 explanation: the cell (2, 2) is as far as possible from all the land with distance 4.",`n == grid.length` `n == grid[i].length` `1 <= n <= 10^0` `grid[i][j]` is `0` or `1`,
1163,Last Substring in Lexicographical Order,"Given a string `s`, return the last substring of `s` in lexicographical order.


Example 1:
Input: s = ""abab""
Output: ""bab""
Explanation: The substrings are [""a"", ""ab"", ""aba"", ""abab"", ""b"", ""ba"", ""bab""]. The lexicographically maximum substring is ""bab"".


Example 2:
Input: s = ""leetcode""
Output: ""tcode""

Constraints:
`1 <= s.length <= 4 * 105`
`s` contains only lowercase English letters.",Hard,https://leetcode.com/problems/last-substring-in-lexicographical-order,"Goldman Sachs,Salesforce","String,Suffix Array",317,,"given a string `s`, return the last substring of `s` in lexicographical order.","input: s = ""abab"" output: ""bab"" explanation: the substrings are [""a"", ""ab"", ""aba"", ""abab"", ""b"", ""ba"", ""bab""]. the lexicographically maximum substring is ""bab"". example 2: input: s = ""leetcode"" output: ""tcode""",`1 <= s.length <= 4 * 10^5` `s` contains only lowercase english letters.,
1164,Product Price at a Given Date,SQL Schema,Medium,https://leetcode.com/problems/product-price-at-a-given-date,Amazon,,143,,sql schema,,,
1165,Single-Row Keyboard,"There is a special keyboard with all keys in a single row.

Given a string `keyboard` of length `26` indicating the layout of the keyboard (indexed from `0` to `25`). Initially, your finger is at index `0`. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index `i` to index `j` is `|i - j|`.

You want to type a string `word`. Write a function to calculate how much time it takes to type it with one finger.


Example 1:
Input: keyboard = ""abcdefghijklmnopqrstuvwxyz"", word = ""cba""
Output: 4
Explanation: The index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'.

Total time = 2 + 1 + 1 = 4. 

Example 2:
Input: keyboard = ""pqrstuvwxyzabcdefghijklmno"", word = ""leetcode""
Output: 73

Constraints:
`keyboard.length == 26`
`keyboard` contains each English lowercase letter exactly once in some order.

`1 <= word.length <= 104`
`word[i]` is an English lowercase letter.",Easy,https://leetcode.com/problems/single-row-keyboard,Google,String,266,,"there is a special keyboard with all keys in a single row. given a string `keyboard` of length `26` indicating the layout of the keyboard (indexed from `0` to `25`). initially, your finger is at index `0`. to type a character, you have to move your finger to the index of the desired character. the time taken to move your finger from index `i` to index `j` is `|i - j|`. you want to type a string `word`. write a function to calculate how much time it takes to type it with one finger.","input: keyboard = ""abcdefghijklmnopqrstuvwxyz"", word = ""cba"" output: 4 explanation: the index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'. total time = 2 + 1 + 1 = 4. example 2: input: keyboard = ""pqrstuvwxyzabcdefghijklmno"", word = ""leetcode"" output: 73",`keyboard.length == 26` `keyboard` contains each english lowercase letter exactly once in some order. `1 <= word.length <= 10^4` `word[i]` is an english lowercase letter.,
1166,Design File System,"You are asked to design a file system that allows you to create new paths and associate them with different values.

The format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, ""`/leetcode""` and ""`/leetcode/problems""` are valid paths while an empty string `""""` and `""/""` are not.

Implement the `FileSystem` class:
`bool createPath(string path, int value)` Creates a new `path` and associates a `value` to it if possible and returns `true`. Returns `false` if the path already exists or its parent path doesn't exist.

`int get(string path)` Returns the value associated with `path` or returns `-1` if the path doesn't exist.


Example 1:
Input: 
[""FileSystem"",""createPath"",""get""]
[[],[""/a"",1],[""/a""]]
Output: 
[null,true,1]
Explanation: 
FileSystem fileSystem = new FileSystem();
fileSystem.createPath(""/a"", 1); // return true
fileSystem.get(""/a""); // return 1

Example 2:
Input: 
[""FileSystem"",""createPath"",""createPath"",""get"",""createPath"",""get""]
[[],[""/leet"",1],[""/leet/code"",2],[""/leet/code""],[""/c/d"",1],[""/c""]]
Output: 
[null,true,true,2,false,-1]
Explanation: 
FileSystem fileSystem = new FileSystem();
fileSystem.createPath(""/leet"", 1); // return true
fileSystem.createPath(""/leet/code"", 2); // return true
fileSystem.get(""/leet/code""); // return 2
fileSystem.createPath(""/c/d"", 1); // return false because the parent path ""/c"" doesn't exist.

fileSystem.get(""/c""); // return -1 because this path doesn't exist.


Constraints:
The number of calls to the two functions is less than or equal to `104` in total.

`2 <= path.length <= 100`
`1 <= value <= 109`",Medium,https://leetcode.com/problems/design-file-system,Amazon,"Hash Table,Design",149,,"you are asked to design a file system that allows you to create new paths and associate them with different values. the format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase english letters. for example, ""`/leetcode""` and ""`/leetcode/problems""` are valid paths while an empty string `""""` and `""/""` are not. implement the `filesystem` class: `bool createpath(string path, int value)` creates a new `path` and associates a `value` to it if possible and returns `true`. returns `false` if the path already exists or its parent path doesn't exist. `int get(string path)` returns the value associated with `path` or returns `-1` if the path doesn't exist.","input: [""filesystem"",""createpath"",""get""] [[],[""/a"",1],[""/a""]] output: [null,true,1] explanation: filesystem filesystem = new filesystem(); filesystem.createpath(""/a"", 1); // return true filesystem.get(""/a""); // return 1 example 2: input: [""filesystem"",""createpath"",""createpath"",""get"",""createpath"",""get""] [[],[""/leet"",1],[""/leet/code"",2],[""/leet/code""],[""/c/d"",1],[""/c""]] output: [null,true,true,2,false,-1] explanation: filesystem filesystem = new filesystem(); filesystem.createpath(""/leet"", 1); // return true filesystem.createpath(""/leet/code"", 2); // return true filesystem.get(""/leet/code""); // return 2 filesystem.createpath(""/c/d"", 1); // return false because the parent path ""/c"" doesn't exist. filesystem.get(""/c""); // return -1 because this path doesn't exist.",the number of calls to the two functions is less than or equal to `10^4` in total. `2 <= path.length <= 10^0` `1 <= value <= 10^9`,
1167,Minimum Cost to Connect Sticks,"You have some number of sticks with positive integer lengths. These lengths are given as an array `sticks`, where `sticks[i]` is the length of the `ith` stick.

You can connect any two sticks of lengths `x` and `y` into one stick by paying a cost of `x + y`. You must connect all the sticks until there is only one stick remaining.

Return the minimum cost of connecting all the given sticks into one stick in this way.


Example 1:
Input: sticks = [2,4,3]
Output: 14
Explanation: You start with sticks = [2,4,3].

1. Combine sticks 2 and 3 for a cost of 2 + 3 = 5. Now you have sticks = [5,4].

2. Combine sticks 5 and 4 for a cost of 5 + 4 = 9. Now you have sticks = [9].

There is only one stick left, so you are done. The total cost is 5 + 9 = 14.


Example 2:
Input: sticks = [1,8,3,5]
Output: 30
Explanation: You start with sticks = [1,8,3,5].

1. Combine sticks 1 and 3 for a cost of 1 + 3 = 4. Now you have sticks = [4,8,5].

2. Combine sticks 4 and 5 for a cost of 4 + 5 = 9. Now you have sticks = [9,8].

3. Combine sticks 9 and 8 for a cost of 9 + 8 = 17. Now you have sticks = [17].

There is only one stick left, so you are done. The total cost is 4 + 9 + 17 = 30.


Example 3:
Input: sticks = [5]
Output: 0
Explanation: There is only one stick, so you don't need to do anything. The total cost is 0.


Constraints:
`1 <= sticks.length <= 104`
`1 <= sticks[i] <= 104`",Medium,https://leetcode.com/problems/minimum-cost-to-connect-sticks,Amazon,Greedy,517,"[Minimum Cost to Merge Stones, /problems/minimum-cost-to-merge-stones/, Hard]","you have some number of sticks with positive integer lengths. these lengths are given as an array `sticks`, where `sticks[i]` is the length of the `ith` stick. you can connect any two sticks of lengths `x` and `y` into one stick by paying a cost of `x + y`. you must connect all the sticks until there is only one stick remaining. return the minimum cost of connecting all the given sticks into one stick in this way.","input: sticks = [2,4,3] output: 14 explanation: you start with sticks = [2,4,3]. 1. combine sticks 2 and 3 for a cost of 2 + 3 = 5. now you have sticks = [5,4]. 2. combine sticks 5 and 4 for a cost of 5 + 4 = 9. now you have sticks = [9]. there is only one stick left, so you are done. the total cost is 5 + 9 = 14. example 2: input: sticks = [1,8,3,5] output: 30 explanation: you start with sticks = [1,8,3,5]. 1. combine sticks 1 and 3 for a cost of 1 + 3 = 4. now you have sticks = [4,8,5]. 2. combine sticks 4 and 5 for a cost of 4 + 5 = 9. now you have sticks = [9,8]. 3. combine sticks 9 and 8 for a cost of 9 + 8 = 17. now you have sticks = [17]. there is only one stick left, so you are done. the total cost is 4 + 9 + 17 = 30. example 3: input: sticks = [5] output: 0 explanation: there is only one stick, so you don't need to do anything. the total cost is 0.",`1 <= sticks.length <= 10^4` `1 <= sticks[i] <= 10^4`,
1168,Optimize Water Distribution in a Village,"There are `n` houses in a village. We want to supply water for all the houses by building wells and laying pipes.

For each house `i`, we can either build a well inside it directly with cost `wells[i - 1]` (note the `-1` due to 0-indexing), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array `pipes`, where each `pipes[j] = [house1j, house2j, costj]` represents the cost to connect `house1j` and `house2j` together using a pipe. Connections are bidirectional.

Return the minimum total cost to supply water to all houses.


Example 1:
Input: n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]
Output: 3
Explanation: 
The image shows the costs of connecting houses using pipes.

The best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3.


Constraints:
`1 <= n <= 104`
`wells.length == n`
`0 <= wells[i] <= 105`
`1 <= pipes.length <= 104`
`pipes[j].length == 3`
`1 <= house1j, house2j <= n`
`0 <= costj <= 105`
`house1j != house2j`",Hard,https://leetcode.com/problems/optimize-water-distribution-in-a-village,"Google,Facebook,Yahoo","Union Find,Graph",396,,"there are `n` houses in a village. we want to supply water for all the houses by building wells and laying pipes. for each house `i`, we can either build a well inside it directly with cost `wells[i - 1]` (note the `-1` due to 0-indexing), or pipe in water from another well to it. the costs to lay pipes between houses are given by the array `pipes`, where each `pipes[j] = [house1j, house2j, costj]` represents the cost to connect `house1j` and `house2j` together using a pipe. connections are bidirectional. return the minimum total cost to supply water to all houses.","input: n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]] output: 3 explanation: the image shows the costs of connecting houses using pipes. the best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3.","`1 <= n <= 10^4` `wells.length == n` `0 <= wells[i] <= 10^5` `1 <= pipes.length <= 10^4` `pipes[j].length == 3` `1 <= house1j, house2j <= n` `0 <= costj <= 10^5` `house1j != house2j`",
1169,Invalid Transactions,"A transaction is possibly invalid if:
the amount exceeds `$1000`, or;
if it occurs within (and including) `60` minutes of another transaction with the same name in a different city.

You are given an array of strings `transaction` where `transactions[i]` consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.

Return a list of `transactions` that are possibly invalid. You may return the answer in any order.


Example 1:
Input: transactions = [""alice,20,800,mtv"",""alice,50,100,beijing""]
Output: [""alice,20,800,mtv"",""alice,50,100,beijing""]
Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.


Example 2:
Input: transactions = [""alice,20,800,mtv"",""alice,50,1200,mtv""]
Output: [""alice,50,1200,mtv""]

Example 3:
Input: transactions = [""alice,20,800,mtv"",""bob,50,1200,mtv""]
Output: [""bob,50,1200,mtv""]

Constraints:
`transactions.length <= 1000`
Each `transactions[i]` takes the form `""{name},{time},{amount},{city}""`
Each `{name}` and `{city}` consist of lowercase English letters, and have lengths between `1` and `10`.

Each `{time}` consist of digits, and represent an integer between `0` and `1000`.

Each `{amount}` consist of digits, and represent an integer between `0` and `2000`.",Medium,https://leetcode.com/problems/invalid-transactions,Bloomberg,"Array,String",151,,"a transaction is possibly invalid if: the amount exceeds `$1000`, or; if it occurs within (and including) `60` minutes of another transaction with the same name in a different city. you are given an array of strings `transaction` where `transactions[i]` consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction. return a list of `transactions` that are possibly invalid. you may return the answer in any order.","input: transactions = [""alice,20,800,mtv"",""alice,50,100,beijing""] output: [""alice,20,800,mtv"",""alice,50,100,beijing""] explanation: the first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. similarly the second one is invalid too. example 2: input: transactions = [""alice,20,800,mtv"",""alice,50,1200,mtv""] output: [""alice,50,1200,mtv""] example 3: input: transactions = [""alice,20,800,mtv"",""bob,50,1200,mtv""] output: [""bob,50,1200,mtv""]","`transactions.length <= 1000` each `transactions[i]` takes the form `""{name},{time},{amount},{city}""` each `{name}` and `{city}` consist of lowercase english letters, and have lengths between `1` and `10`. each `{time}` consist of digits, and represent an integer between `0` and `1000`. each `{amount}` consist of digits, and represent an integer between `0` and `2000`.",
1170,Compare Strings by Frequency of the Smallest Character,"Let the function `f(s)` be the frequency of the lexicographically smallest character in a non-empty string `s`. For example, if `s = ""dcce""` then `f(s) = 2` because the lexicographically smallest character is `'c'`, which has a frequency of 2.

You are given an array of strings `words` and another array of query strings `queries`. For each query `queries[i]`, count the number of words in `words` such that `f(queries[i])` < `f(W)` for each `W` in `words`.

Return an integer array `answer`, where each `answer[i]` is the answer to the `ith` query.


Example 1:
Input: queries = [""cbd""], words = [""zaaaz""]
Output: [1]
Explanation: On the first query we have f(""cbd"") = 1, f(""zaaaz"") = 3 so f(""cbd"") < f(""zaaaz"").


Example 2:
Input: queries = [""bbb"",""cc""], words = [""a"",""aa"",""aaa"",""aaaa""]
Output: [1,2]
Explanation: On the first query only f(""bbb"") < f(""aaaa""). On the second query both f(""aaa"") and f(""aaaa"") are both > f(""cc"").


Constraints:
`1 <= queries.length <= 2000`
`1 <= words.length <= 2000`
`1 <= queries[i].length, words[i].length <= 10`
`queries[i][j]`, `words[i][j]` consist of lowercase English letters.",Medium,https://leetcode.com/problems/compare-strings-by-frequency-of-the-smallest-character,Google,"Array,String,Binary Search",347,,"let the function `f(s)` be the frequency of the lexicographically smallest character in a non-empty string `s`. for example, if `s = ""dcce""` then `f(s) = 2` because the lexicographically smallest character is `'c'`, which has a frequency of 2. you are given an array of strings `words` and another array of query strings `queries`. for each query `queries[i]`, count the number of words in `words` such that `f(queries[i])` < `f(w)` for each `w` in `words`. return an integer array `answer`, where each `answer[i]` is the answer to the `ith` query.","input: queries = [""cbd""], words = [""zaaaz""] output: [1] explanation: on the first query we have f(""cbd"") = 1, f(""zaaaz"") = 3 so f(""cbd"") < f(""zaaaz""). example 2: input: queries = [""bbb"",""cc""], words = [""a"",""aa"",""aaa"",""aaaa""] output: [1,2] explanation: on the first query only f(""bbb"") < f(""aaaa""). on the second query both f(""aaa"") and f(""aaaa"") are both > f(""cc"").","`1 <= queries.length <= 2000` `1 <= words.length <= 2000` `1 <= queries[i].length, words[i].length <= 10` `queries[i][j]`, `words[i][j]` consist of lowercase english letters.",
1171,Remove Zero Sum Consecutive Nodes from Linked List,"Given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.

(Note that in the examples below, all sequences are serializations of `ListNode` objects.)

Example 1:
Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: The answer [1,2,1] would also be accepted.


Example 2:
Input: head = [1,2,3,-3,4]
Output: [1,2,4]

Example 3:
Input: head = [1,2,3,-3,-2]
Output: [1]

Constraints:
The given linked list will contain between `1` and `1000` nodes.

Each node in the linked list has `-1000 <= node.val <= 1000`.",Medium,https://leetcode.com/problems/remove-zero-sum-consecutive-nodes-from-linked-list,Amazon,Linked List,830,"[Delete N Nodes After M Nodes of a Linked List, /problems/delete-n-nodes-after-m-nodes-of-a-linked-list/, Easy]","given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences. after doing so, return the head of the final linked list. you may return any such answer. (note that in the examples below, all sequences are serializations of `listnode` objects.)","input: head = [1,2,-3,3,1] output: [3,1] note: the answer [1,2,1] would also be accepted. example 2: input: head = [1,2,3,-3,4] output: [1,2,4] example 3: input: head = [1,2,3,-3,-2] output: [1]",the given linked list will contain between `1` and `1000` nodes. each node in the linked list has `-1000 <= node.val <= 1000`.,
1172,Dinner Plate Stacks,"You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum `capacity`.

Implement the `DinnerPlates` class:
`DinnerPlates(int capacity)` Initializes the object with the maximum `capacity` of the stacks.

`void push(int val)` Pushes the given positive integer `val` into the leftmost stack with size less than `capacity`.

`int pop()` Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all stacks are empty.

`int popAtStack(int index)` Returns the value at the top of the stack with the given `index` and removes it from that stack, and returns -1 if the stack with that given `index` is empty.


Example:
Input: 
[""DinnerPlates"",""push"",""push"",""push"",""push"",""push"",""popAtStack"",""push"",""push"",""popAtStack"",""popAtStack"",""pop"",""pop"",""pop"",""pop"",""pop""]
[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]
Output: 
[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]
Explanation: 
DinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2
D.push(1);
D.push(2);
D.push(3);
D.push(4);
D.push(5);         // The stacks are now:  2  4
                                           1  3  5
                                           ] ] ]
D.popAtStack(0);   // Returns 2.  The stacks are now:     4
                                                       1  3  5
                                                       ] ] ]
D.push(20);        // The stacks are now: 20  4
                                           1  3  5
                                           ] ] ]
D.push(21);        // The stacks are now: 20  4 21
                                           1  3  5
                                           ] ] ]
D.popAtStack(0);   // Returns 20.  The stacks are now:     4 21
                                                        1  3  5
                                                        ] ] ]
D.popAtStack(2);   // Returns 21.  The stacks are now:     4
                                                        1  3  5
                                                        ] ] ] 
D.pop()            // Returns 5.  The stacks are now:      4
                                                        1  3 
                                                        ] ]  
D.pop()            // Returns 4.  The stacks are now:   1  3 
                                                        ] ]   
D.pop()            // Returns 3.  The stacks are now:   1 
                                                        ]   
D.pop()            // Returns 1.  There are no stacks.

D.pop()            // Returns -1.  There are still no stacks.


Constraints:
`1 <= capacity <= 20000`
`1 <= val <= 20000`
`0 <= index <= 100000`
At most `200000` calls will be made to `push`, `pop`, and `popAtStack`.",Hard,https://leetcode.com/problems/dinner-plate-stacks,ByteDance,Design,235,,"you have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum `capacity`. implement the `dinnerplates` class: `dinnerplates(int capacity)` initializes the object with the maximum `capacity` of the stacks. `void push(int val)` pushes the given positive integer `val` into the leftmost stack with size less than `capacity`. `int pop()` returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all stacks are empty. `int popatstack(int index)` returns the value at the top of the stack with the given `index` and removes it from that stack, and returns -1 if the stack with that given `index` is empty.","input: [""dinnerplates"",""push"",""push"",""push"",""push"",""push"",""popatstack"",""push"",""push"",""popatstack"",""popatstack"",""pop"",""pop"",""pop"",""pop"",""pop""] [[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]] output: [null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1] explanation: dinnerplates d = dinnerplates(2); // initialize with capacity = 2 d.push(1); d.push(2); d.push(3); d.push(4); d.push(5); // the stacks are now: 2 4 1 3 5 ] ] ] d.popatstack(0); // returns 2. the stacks are now: 4 1 3 5 ] ] ] d.push(20); // the stacks are now: 20 4 1 3 5 ] ] ] d.push(21); // the stacks are now: 20 4 21 1 3 5 ] ] ] d.popatstack(0); // returns 20. the stacks are now: 4 21 1 3 5 ] ] ] d.popatstack(2); // returns 21. the stacks are now: 4 1 3 5 ] ] ] d.pop() // returns 5. the stacks are now: 4 1 3 ] ] d.pop() // returns 4. the stacks are now: 1 3 ] ] d.pop() // returns 3. the stacks are now: 1 ] d.pop() // returns 1. there are no stacks. d.pop() // returns -1. there are still no stacks.","`1 <= capacity <= 20000` `1 <= val <= 20000` `0 <= index <= 100000` at most `200000` calls will be made to `push`, `pop`, and `popatstack`.",
1173,Immediate Food Delivery I,SQL Schema,Easy,https://leetcode.com/problems/immediate-food-delivery-i,DoorDash,,99,,sql schema,,,
1174,Immediate Food Delivery II,SQL Schema,Medium,https://leetcode.com/problems/immediate-food-delivery-ii,DoorDash,,52,,sql schema,,,
1175,Prime Arrangements,"Return the number of permutations of 1 to `n` so that prime numbers are at prime indices (1-indexed.)
(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)
Since the answer may be large, return the answer modulo `10^9 + 7`.


Example 1:
Input: n = 5
Output: 12
Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.


Example 2:
Input: n = 100
Output: 682289015

Constraints:
`1 <= n <= 100`",Easy,https://leetcode.com/problems/prime-arrangements,"Infosys,Amazon",Math,158,,"return the number of permutations of 1 to `n` so that prime numbers are at prime indices (1-indexed.) (recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.) since the answer may be large, return the answer modulo `10^9 + 7`.","input: n = 5 output: 12 explanation: for example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1. example 2: input: n = 100 output: 682289015",`1 <= n <= 10^0`,
1176,Diet Plan Performance,"A dieter consumes `calories[i]` calories on the `i`-th day. 
Given an integer `k`, for every consecutive sequence of `k` days (`calories[i], calories[i+1], ..., calories[i+k-1]` for all `0 <= i <= n-k`), they look at T, the total calories consumed during that sequence of `k` days (`calories[i] + calories[i+1] + ... + calories[i+k-1]`):
If `T < lower`, they performed poorly on their diet and lose 1 point; 
If `T > upper`, they performed well on their diet and gain 1 point;
Otherwise, they performed normally and there is no change in points.

Initially, the dieter has zero points. Return the total number of points the dieter has after dieting for `calories.length` days.

Note that the total points can be negative.


Example 1:
Input: calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3
Output: 0
Explanation: Since k = 1, we consider each element of the array separately and compare it to lower and upper.

calories[0] and calories[1] are less than lower so 2 points are lost.

calories[3] and calories[4] are greater than upper so 2 points are gained.


Example 2:
Input: calories = [3,2], k = 2, lower = 0, upper = 1
Output: 1
Explanation: Since k = 2, we consider subarrays of length 2.

calories[0] + calories[1] > upper so 1 point is gained.


Example 3:
Input: calories = [6,5,0,0], k = 2, lower = 1, upper = 5
Output: 0
Explanation:
calories[0] + calories[1] > upper so 1 point is gained.

lower <= calories[1] + calories[2] <= upper so no change in points.

calories[2] + calories[3] < lower so 1 point is lost.


Constraints:
`1 <= k <= calories.length <= 10^5`
`0 <= calories[i] <= 20000`
`0 <= lower <= upper`",Easy,https://leetcode.com/problems/diet-plan-performance,Amazon,"Array,Sliding Window",81,,"a dieter consumes `calories[i]` calories on the `i`-th day. given an integer `k`, for every consecutive sequence of `k` days (`calories[i], calories[i+1], ..., calories[i+k-1]` for all `0 <= i <= n-k`), they look at t, the total calories consumed during that sequence of `k` days (`calories[i] + calories[i+1] + ... + calories[i+k-1]`): if `t < lower`, they performed poorly on their diet and lose 1 point; if `t > upper`, they performed well on their diet and gain 1 point; otherwise, they performed normally and there is no change in points. initially, the dieter has zero points. return the total number of points the dieter has after dieting for `calories.length` days. note that the total points can be negative.","input: calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3 output: 0 explanation: since k = 1, we consider each element of the array separately and compare it to lower and upper. calories[0] and calories[1] are less than lower so 2 points are lost. calories[3] and calories[4] are greater than upper so 2 points are gained. example 2: input: calories = [3,2], k = 2, lower = 0, upper = 1 output: 1 explanation: since k = 2, we consider subarrays of length 2. calories[0] + calories[1] > upper so 1 point is gained. example 3: input: calories = [6,5,0,0], k = 2, lower = 1, upper = 5 output: 0 explanation: calories[0] + calories[1] > upper so 1 point is gained. lower <= calories[1] + calories[2] <= upper so no change in points. calories[2] + calories[3] < lower so 1 point is lost.",`1 <= k <= calories.length <= 10^5` `0 <= calories[i] <= 20000` `0 <= lower <= upper`,
1177,Can Make Palindrome from Substring,"Given a string `s`, we make queries on substrings of `s`.

For each query `queries[i] = [left, right, k]`, we may rearrange the substring `s[left], ..., s[right]`, and then choose up to `k` of them to replace with any lowercase English letter. 
If the substring is possible to be a palindrome string after the operations above, the result of the query is `true`. Otherwise, the result is `false`.

Return an array `answer[]`, where `answer[i]` is the result of the `i`-th query `queries[i]`.

Note that: Each letter is counted individually for replacement so if for example `s[left..right] = ""aaa""`, and `k = 2`, we can only replace two of the letters.  (Also, note that the initial string `s` is never modified by any query.)

Example :
Input: s = ""abcda"", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
Output: [true,false,false,true,true]
Explanation:
queries[0] : substring = ""d"", is palidrome.

queries[1] : substring = ""bc"", is not palidrome.

queries[2] : substring = ""abcd"", is not palidrome after replacing only 1 character.

queries[3] : substring = ""abcd"", could be changed to ""abba"" which is palidrome. Also this can be changed to ""baab"" first rearrange it ""bacd"" then replace ""cd"" with ""ab"".

queries[4] : substring = ""abcda"", could be changed to ""abcba"" which is palidrome.


Constraints:
`1 <= s.length, queries.length <= 10^5`
`0 <= queries[i][0] <= queries[i][1] < s.length`
`0 <= queries[i][2] <= s.length`
`s` only contains lowercase English letters.",Medium,https://leetcode.com/problems/can-make-palindrome-from-substring,SAP,"Array,String",345,,"given a string `s`, we make queries on substrings of `s`. for each query `queries[i] = [left, right, k]`, we may rearrange the substring `s[left], ..., s[right]`, and then choose up to `k` of them to replace with any lowercase english letter. if the substring is possible to be a palindrome string after the operations above, the result of the query is `true`. otherwise, the result is `false`. return an array `answer[]`, where `answer[i]` is the result of the `i`-th query `queries[i]`. note that: each letter is counted individually for replacement so if for example `s[left..right] = ""aaa""`, and `k = 2`, we can only replace two of the letters. (also, note that the initial string `s` is never modified by any query.)","input: s = ""abcda"", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]] output: [true,false,false,true,true] explanation: queries[0] : substring = ""d"", is palidrome. queries[1] : substring = ""bc"", is not palidrome. queries[2] : substring = ""abcd"", is not palidrome after replacing only 1 character. queries[3] : substring = ""abcd"", could be changed to ""abba"" which is palidrome. also this can be changed to ""baab"" first rearrange it ""bacd"" then replace ""cd"" with ""ab"". queries[4] : substring = ""abcda"", could be changed to ""abcba"" which is palidrome.","`1 <= s.length, queries.length <= 10^5` `0 <= queries[i][0] <= queries[i][1] < s.length` `0 <= queries[i][2] <= s.length` `s` only contains lowercase english letters.",
1178,Number of Valid Words for Each Puzzle,"With respect to a given `puzzle` string, a `word` is valid if both the following conditions are satisfied:
`word` contains the first letter of `puzzle`.

For each letter in `word`, that letter is in `puzzle`.

	For example, if the puzzle is ""abcdefg"", then valid words are ""faced"", ""cabbage"", and ""baggage""; while invalid words are ""beefed"" (doesn't include ""a"") and ""based"" (includes ""s"" which isn't in the puzzle).

Return an array `answer`, where `answer[i]` is the number of words in the given word list `words` that are valid with respect to the puzzle `puzzles[i]`.


Example :
Input: 
words = [""aaaa"",""asas"",""able"",""ability"",""actt"",""actor"",""access""], 
puzzles = [""aboveyz"",""abrodyz"",""abslute"",""absoryz"",""actresz"",""gaswxyz""]
Output: [1,1,3,2,4,0]
Explanation:
1 valid word for ""aboveyz"" : ""aaaa"" 
1 valid word for ""abrodyz"" : ""aaaa""
3 valid words for ""abslute"" : ""aaaa"", ""asas"", ""able""
2 valid words for ""absoryz"" : ""aaaa"", ""asas""
4 valid words for ""actresz"" : ""aaaa"", ""asas"", ""actt"", ""access""
There're no valid words for ""gaswxyz"" cause none of the words in the list contains letter 'g'.


Constraints:
`1 <= words.length <= 10^5`
`4 <= words[i].length <= 50`
`1 <= puzzles.length <= 10^4`
`puzzles[i].length == 7`
`words[i][j]`, `puzzles[i][j]` are English lowercase letters.

Each `puzzles[i] `doesn't contain repeated characters.",Hard,https://leetcode.com/problems/number-of-valid-words-for-each-puzzle,Dropbox,"Hash Table,Bit Manipulation",287,,"with respect to a given `puzzle` string, a `word` is valid if both the following conditions are satisfied: `word` contains the first letter of `puzzle`. for each letter in `word`, that letter is in `puzzle`. for example, if the puzzle is ""abcdefg"", then valid words are ""faced"", ""cabbage"", and ""baggage""; while invalid words are ""beefed"" (doesn't include ""a"") and ""based"" (includes ""s"" which isn't in the puzzle). return an array `answer`, where `answer[i]` is the number of words in the given word list `words` that are valid with respect to the puzzle `puzzles[i]`.","input: words = [""aaaa"",""asas"",""able"",""ability"",""actt"",""actor"",""access""], puzzles = [""aboveyz"",""abrodyz"",""abslute"",""absoryz"",""actresz"",""gaswxyz""] output: [1,1,3,2,4,0] explanation: 1 valid word for ""aboveyz"" : ""aaaa"" 1 valid word for ""abrodyz"" : ""aaaa"" 3 valid words for ""abslute"" : ""aaaa"", ""asas"", ""able"" 2 valid words for ""absoryz"" : ""aaaa"", ""asas"" 4 valid words for ""actresz"" : ""aaaa"", ""asas"", ""actt"", ""access"" there're no valid words for ""gaswxyz"" cause none of the words in the list contains letter 'g'.","`1 <= words.length <= 10^5` `4 <= words[i].length <= 50` `1 <= puzzles.length <= 10^4` `puzzles[i].length == 7` `words[i][j]`, `puzzles[i][j]` are english lowercase letters. each `puzzles[i] `doesn't contain repeated characters.",
1179,Reformat Department Table,SQL Schema,Easy,https://leetcode.com/problems/reformat-department-table,Amazon,,259,,sql schema,,,
1180,Count Substrings with Only One Distinct Letter,"Given a string `S`, return the number of substrings that have only one distinct letter.


Example 1:
Input: S = ""aaaba""
Output: 8
Explanation: The substrings with one distinct letter are ""aaa"", ""aa"", ""a"", ""b"".

""aaa"" occurs 1 time.

""aa"" occurs 2 times.

""a"" occurs 4 times.

""b"" occurs 1 time.

So the answer is 1 + 2 + 4 + 1 = 8.


Example 2:
Input: S = ""aaaaaaaaaa""
Output: 55

Constraints:
`1 <= S.length <= 1000`
`S[i]` consists of only lowercase English letters.",Easy,https://leetcode.com/problems/count-substrings-with-only-one-distinct-letter,Virtu Financial,"Math,String",190,,"given a string `s`, return the number of substrings that have only one distinct letter.","input: s = ""aaaba"" output: 8 explanation: the substrings with one distinct letter are ""aaa"", ""aa"", ""a"", ""b"". ""aaa"" occurs 1 time. ""aa"" occurs 2 times. ""a"" occurs 4 times. ""b"" occurs 1 time. so the answer is 1 + 2 + 4 + 1 = 8. example 2: input: s = ""aaaaaaaaaa"" output: 55",`1 <= s.length <= 1000` `s[i]` consists of only lowercase english letters.,
1181,Before and After Puzzle,"Given a list of `phrases`, generate a list of Before and After puzzles.

A phrase is a string that consists of lowercase English letters and spaces only. No space appears in the start or the end of a phrase. There are no consecutive spaces in a phrase.

Before and After puzzles are phrases that are formed by merging two phrases where the last word of the first phrase is the same as the first word of the second phrase.

Return the Before and After puzzles that can be formed by every two phrases `phrases[i]` and `phrases[j]` where `i != j`. Note that the order of matching two phrases matters, we want to consider both orders.

You should return a list of distinct strings sorted lexicographically.


Example 1:
Input: phrases = [""writing code"",""code rocks""]
Output: [""writing code rocks""]

Example 2:
Input: phrases = [""mission statement"",
                  ""a quick bite to eat"",
                  ""a chip off the old block"",
                  ""chocolate bar"",
                  ""mission impossible"",
                  ""a man on a mission"",
                  ""block party"",
                  ""eat my words"",
                  ""bar of soap""]
Output: [""a chip off the old block party"",
         ""a man on a mission impossible"",
         ""a man on a mission statement"",
         ""a quick bite to eat my words"",
         ""chocolate bar of soap""]

Example 3:
Input: phrases = [""a"",""b"",""a""]
Output: [""a""]

Constraints:
`1 <= phrases.length <= 100`
`1 <= phrases[i].length <= 100`",Medium,https://leetcode.com/problems/before-and-after-puzzle,Clutter,String,59,,"given a list of `phrases`, generate a list of before and after puzzles. a phrase is a string that consists of lowercase english letters and spaces only. no space appears in the start or the end of a phrase. there are no consecutive spaces in a phrase. before and after puzzles are phrases that are formed by merging two phrases where the last word of the first phrase is the same as the first word of the second phrase. return the before and after puzzles that can be formed by every two phrases `phrases[i]` and `phrases[j]` where `i != j`. note that the order of matching two phrases matters, we want to consider both orders. you should return a list of distinct strings sorted lexicographically.","input: phrases = [""writing code"",""code rocks""] output: [""writing code rocks""] example 2: input: phrases = [""mission statement"", ""a quick bite to eat"", ""a chip off the old block"", ""chocolate bar"", ""mission impossible"", ""a man on a mission"", ""block party"", ""eat my words"", ""bar of soap""] output: [""a chip off the old block party"", ""a man on a mission impossible"", ""a man on a mission statement"", ""a quick bite to eat my words"", ""chocolate bar of soap""] example 3: input: phrases = [""a"",""b"",""a""] output: [""a""]",`1 <= phrases.length <= 10^0` `1 <= phrases[i].length <= 10^0`,
1182,Shortest Distance to Target Color,"You are given an array `colors`, in which there are three colors: `1`, `2` and `3`.

You are also given some queries. Each query consists of two integers `i` and `c`, return the shortest distance between the given index `i` and the target color `c`. If there is no solution return `-1`.


Example 1:
Input: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]
Output: [3,0,3]
Explanation: 
The nearest 3 from index 1 is at index 4 (3 steps away).

The nearest 2 from index 2 is at index 2 itself (0 steps away).

The nearest 1 from index 6 is at index 3 (3 steps away).


Example 2:
Input: colors = [1,2], queries = [[0,3]]
Output: [-1]
Explanation: There is no 3 in the array.


Constraints:
`1 <= colors.length <= 5*10^4`
`1 <= colors[i] <= 3`
`1 <= queries.length <= 5*10^4`
`queries[i].length == 2`
`0 <= queries[i][0] < colors.length`
`1 <= queries[i][1] <= 3`",Medium,https://leetcode.com/problems/shortest-distance-to-target-color,Google,Binary Search,154,,"you are given an array `colors`, in which there are three colors: `1`, `2` and `3`. you are also given some queries. each query consists of two integers `i` and `c`, return the shortest distance between the given index `i` and the target color `c`. if there is no solution return `-1`.","input: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]] output: [3,0,3] explanation: the nearest 3 from index 1 is at index 4 (3 steps away). the nearest 2 from index 2 is at index 2 itself (0 steps away). the nearest 1 from index 6 is at index 3 (3 steps away). example 2: input: colors = [1,2], queries = [[0,3]] output: [-1] explanation: there is no 3 in the array.",`1 <= colors.length <= 5*10^4` `1 <= colors[i] <= 3` `1 <= queries.length <= 5*10^4` `queries[i].length == 2` `0 <= queries[i][0] < colors.length` `1 <= queries[i][1] <= 3`,
1183,Maximum Number of Ones,"Consider a matrix `M` with dimensions `width * height`, such that every cell has value `0` or `1`, and any square sub-matrix of `M` of size `sideLength * sideLength` has at most `maxOnes` ones.

Return the maximum possible number of ones that the matrix `M` can have.


Example 1:
Input: width = 3, height = 3, sideLength = 2, maxOnes = 1
Output: 4
Explanation:
In a 3*3 matrix, no 2*2 sub-matrix can have more than 1 one.

The best solution that has 4 ones is:
[1,0,1]
[0,0,0]
[1,0,1]

Example 2:
Input: width = 3, height = 3, sideLength = 2, maxOnes = 2
Output: 6
Explanation:
[1,0,1]
[1,0,1]
[1,0,1]

Constraints:
`1 <= width, height <= 100`
`1 <= sideLength <= width, height`
`0 <= maxOnes <= sideLength * sideLength`",Hard,https://leetcode.com/problems/maximum-number-of-ones,Qualcomm,"Math,Sort",76,,"consider a matrix `m` with dimensions `width * height`, such that every cell has value `0` or `1`, and any square sub-matrix of `m` of size `sidelength * sidelength` has at most `maxones` ones. return the maximum possible number of ones that the matrix `m` can have.","input: width = 3, height = 3, sidelength = 2, maxones = 1 output: 4 explanation: in a 3*3 matrix, no 2*2 sub-matrix can have more than 1 one. the best solution that has 4 ones is: [1,0,1] [0,0,0] [1,0,1] example 2: input: width = 3, height = 3, sidelength = 2, maxones = 2 output: 6 explanation: [1,0,1] [1,0,1] [1,0,1]","`1 <= width, height <= 10^0` `1 <= sidelength <= width, height` `0 <= maxones <= sidelength * sidelength`",
1184,Distance Between Bus Stops,"A bus has `n` stops numbered from `0` to `n - 1` that form a circle. We know the distance between all pairs of neighboring stops where `distance[i]` is the distance between the stops number `i` and `(i + 1) % n`.

The bus goes along both directions i.e. clockwise and counterclockwise.

Return the shortest distance between the given `start` and `destination` stops.


Example 1:
Input: distance = [1,2,3,4], start = 0, destination = 1
Output: 1
Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1.


Example 2:
Input: distance = [1,2,3,4], start = 0, destination = 2
Output: 3
Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3.


Example 3:
Input: distance = [1,2,3,4], start = 0, destination = 3
Output: 4
Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4.


Constraints:
`1 <= n <= 10^4`
`distance.length == n`
`0 <= start, destination < n`
`0 <= distance[i] <= 10^4`",Easy,https://leetcode.com/problems/distance-between-bus-stops,Google,Array,343,,a bus has `n` stops numbered from `0` to `n - 1` that form a circle. we know the distance between all pairs of neighboring stops where `distance[i]` is the distance between the stops number `i` and `(i + 1) % n`. the bus goes along both directions i.e. clockwise and counterclockwise. return the shortest distance between the given `start` and `destination` stops.,"input: distance = [1,2,3,4], start = 0, destination = 1 output: 1 explanation: distance between 0 and 1 is 1 or 9, minimum is 1. example 2: input: distance = [1,2,3,4], start = 0, destination = 2 output: 3 explanation: distance between 0 and 2 is 3 or 7, minimum is 3. example 3: input: distance = [1,2,3,4], start = 0, destination = 3 output: 4 explanation: distance between 0 and 3 is 6 or 4, minimum is 4.","`1 <= n <= 10^4` `distance.length == n` `0 <= start, destination < n` `0 <= distance[i] <= 10^4`",
1185,Day of the Week,"Given a date, return the corresponding day of the week for that date.

The input is given as three integers representing the `day`, `month` and `year` respectively.

Return the answer as one of the following values `{""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""}`.


Example 1:
Input: day = 31, month = 8, year = 2019
Output: ""Saturday""

Example 2:
Input: day = 18, month = 7, year = 1999
Output: ""Sunday""

Example 3:
Input: day = 15, month = 8, year = 1993
Output: ""Sunday""

Constraints:
The given dates are valid dates between the years `1971` and `2100`.",Easy,https://leetcode.com/problems/day-of-the-week,"Microsoft,United Health Group",Array,156,,"given a date, return the corresponding day of the week for that date. the input is given as three integers representing the `day`, `month` and `year` respectively. return the answer as one of the following values `{""sunday"", ""monday"", ""tuesday"", ""wednesday"", ""thursday"", ""friday"", ""saturday""}`.","input: day = 31, month = 8, year = 2019 output: ""saturday"" example 2: input: day = 18, month = 7, year = 1999 output: ""sunday"" example 3: input: day = 15, month = 8, year = 1993 output: ""sunday""",the given dates are valid dates between the years `1971` and `2100`.,
1186,Maximum Subarray Sum with One Deletion,"Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.

Note that the subarray needs to be non-empty after deleting one element.


Example 1:
Input: arr = [1,-2,0,3]
Output: 4
Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.


Example 2:
Input: arr = [1,-2,-2,3]
Output: 3
Explanation: We just choose [3] and it's the maximum sum.


Example 3:
Input: arr = [-1,-1,-1,-1]
Output: -1
Explanation: The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.


Constraints:
`1 <= arr.length <= 105`
`-104 <= arr[i] <= 104`",Medium,https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion,Goldman Sachs,Dynamic Programming,770,,"given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. in other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible. note that the subarray needs to be non-empty after deleting one element.","input: arr = [1,-2,0,3] output: 4 explanation: because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value. example 2: input: arr = [1,-2,-2,3] output: 3 explanation: we just choose [3] and it's the maximum sum. example 3: input: arr = [-1,-1,-1,-1] output: -1 explanation: the final subarray needs to be non-empty. you can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.",`1 <= arr.length <= 10^5` `-10^4 <= arr[i] <= 10^4`,
1187,Make Array Strictly Increasing,"Given two integer arrays `arr1` and `arr2`, return the minimum number of operations (possibly zero) needed to make `arr1` strictly increasing.

In one operation, you can choose two indices `0 <= i < arr1.length` and `0 <= j < arr2.length` and do the assignment `arr1[i] = arr2[j]`.

If there is no way to make `arr1` strictly increasing, return `-1`.


Example 1:
Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]
Output: 1
Explanation: Replace `5` with `2`, then `arr1 = [1, 2, 3, 6, 7]`.


Example 2:
Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]
Output: 2
Explanation: Replace `5` with `3` and then replace `3` with `4`. `arr1 = [1, 3, 4, 6, 7]`.


Example 3:
Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]
Output: -1
Explanation: You can't make `arr1` strictly increasing.


Constraints:
`1 <= arr1.length, arr2.length <= 2000`
`0 <= arr1[i], arr2[i] <= 10^9`",Hard,https://leetcode.com/problems/make-array-strictly-increasing,,,372,,"given two integer arrays `arr1` and `arr2`, return the minimum number of operations (possibly zero) needed to make `arr1` strictly increasing. in one operation, you can choose two indices `0 <= i < arr1.length` and `0 <= j < arr2.length` and do the assignment `arr1[i] = arr2[j]`. if there is no way to make `arr1` strictly increasing, return `-1`.","input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4] output: 1 explanation: replace `5` with `2`, then `arr1 = [1, 2, 3, 6, 7]`. example 2: input: arr1 = [1,5,3,6,7], arr2 = [4,3,1] output: 2 explanation: replace `5` with `3` and then replace `3` with `4`. `arr1 = [1, 3, 4, 6, 7]`. example 3: input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3] output: -1 explanation: you can't make `arr1` strictly increasing.","`1 <= arr1.length, arr2.length <= 2000` `0 <= arr1[i], arr2[i] <= 10^9`",
1188,Design Bounded Blocking Queue,"Implement a thread-safe bounded blocking queue that has the following methods:
`BoundedBlockingQueue(int capacity)` The constructor initializes the queue with a maximum `capacity`.

`void enqueue(int element)` Adds an `element` to the front of the queue. If the queue is full, the calling thread is blocked until the queue is no longer full.

`int dequeue()` Returns the element at the rear of the queue and removes it. If the queue is empty, the calling thread is blocked until the queue is no longer empty.

`int size()` Returns the number of elements currently in the queue.

Your implementation will be tested using multiple threads at the same time. Each thread will either be a producer thread that only makes calls to the `enqueue` method or a consumer thread that only makes calls to the `dequeue` method. The `size` method will be called after every test case.

Please do not use built-in implementations of bounded blocking queue as this will not be accepted in an interview.


Example 1:
Input:
1
1
[""BoundedBlockingQueue"",""enqueue"",""dequeue"",""dequeue"",""enqueue"",""enqueue"",""enqueue"",""enqueue"",""dequeue""]
[[2],[1],[],[],[0],[2],[3],[4],[]]
Output:
[1,0,2,2]
Explanation:
Number of producer threads = 1
Number of consumer threads = 1
BoundedBlockingQueue queue = new BoundedBlockingQueue(2);   // initialize the queue with capacity = 2.

queue.enqueue(1);   // The producer thread enqueues 1 to the queue.

queue.dequeue();    // The consumer thread calls dequeue and returns 1 from the queue.

queue.dequeue();    // Since the queue is empty, the consumer thread is blocked.

queue.enqueue(0);   // The producer thread enqueues 0 to the queue. The consumer thread is unblocked and returns 0 from the queue.

queue.enqueue(2);   // The producer thread enqueues 2 to the queue.

queue.enqueue(3);   // The producer thread enqueues 3 to the queue.

queue.enqueue(4);   // The producer thread is blocked because the queue's capacity (2) is reached.

queue.dequeue();    // The consumer thread returns 2 from the queue. The producer thread is unblocked and enqueues 4 to the queue.

queue.size();       // 2 elements remaining in the queue. size() is always called at the end of each test case.


Example 2:
Input:
3
4
[""BoundedBlockingQueue"",""enqueue"",""enqueue"",""enqueue"",""dequeue"",""dequeue"",""dequeue"",""enqueue""]
[[3],[1],[0],[2],[],[],[],[3]]
Output:
[1,0,2,1]
Explanation:
Number of producer threads = 3
Number of consumer threads = 4
BoundedBlockingQueue queue = new BoundedBlockingQueue(3);   // initialize the queue with capacity = 3.

queue.enqueue(1);   // Producer thread P1 enqueues 1 to the queue.

queue.enqueue(0);   // Producer thread P2 enqueues 0 to the queue.

queue.enqueue(2);   // Producer thread P3 enqueues 2 to the queue.

queue.dequeue();    // Consumer thread C1 calls dequeue.

queue.dequeue();    // Consumer thread C2 calls dequeue.

queue.dequeue();    // Consumer thread C3 calls dequeue.

queue.enqueue(3);   // One of the producer threads enqueues 3 to the queue.

queue.size();       // 1 element remaining in the queue.

Since the number of threads for producer/consumer is greater than 1, we do not know how the threads will be scheduled in the operating system, even though the input seems to imply the ordering. Therefore, any of the output [1,0,2] or [1,2,0] or [0,1,2] or [0,2,1] or [2,0,1] or [2,1,0] will be accepted.


Constraints:
`1 <= Number of Prdoucers <= 8`
`1 <= Number of Consumers <= 8`
`1 <= size <= 30`
`0 <= element <= 20`
The number of calls to `enqueue` is greater than or equal to the number of calls to `dequeue`.

At most `40` calls will be made to `enque`, `deque`, and `size`.",Medium,https://leetcode.com/problems/design-bounded-blocking-queue,"LinkedIn,Bloomberg,eBay,Apple,Microsoft,Rubrik",,266,,"implement a thread-safe bounded blocking queue that has the following methods: `boundedblockingqueue(int capacity)` the constructor initializes the queue with a maximum `capacity`. `void enqueue(int element)` adds an `element` to the front of the queue. if the queue is full, the calling thread is blocked until the queue is no longer full. `int dequeue()` returns the element at the rear of the queue and removes it. if the queue is empty, the calling thread is blocked until the queue is no longer empty. `int size()` returns the number of elements currently in the queue. your implementation will be tested using multiple threads at the same time. each thread will either be a producer thread that only makes calls to the `enqueue` method or a consumer thread that only makes calls to the `dequeue` method. the `size` method will be called after every test case. please do not use built-in implementations of bounded blocking queue as this will not be accepted in an interview.","input: 1 1 [""boundedblockingqueue"",""enqueue"",""dequeue"",""dequeue"",""enqueue"",""enqueue"",""enqueue"",""enqueue"",""dequeue""] [[2],[1],[],[],[0],[2],[3],[4],[]] output: [1,0,2,2] explanation: number of producer threads = 1 number of consumer threads = 1 boundedblockingqueue queue = new boundedblockingqueue(2); // initialize the queue with capacity = 2. queue.enqueue(1); // the producer thread enqueues 1 to the queue. queue.dequeue(); // the consumer thread calls dequeue and returns 1 from the queue. queue.dequeue(); // since the queue is empty, the consumer thread is blocked. queue.enqueue(0); // the producer thread enqueues 0 to the queue. the consumer thread is unblocked and returns 0 from the queue. queue.enqueue(2); // the producer thread enqueues 2 to the queue. queue.enqueue(3); // the producer thread enqueues 3 to the queue. queue.enqueue(4); // the producer thread is blocked because the queue's capacity (2) is reached. queue.dequeue(); // the consumer thread returns 2 from the queue. the producer thread is unblocked and enqueues 4 to the queue. queue.size(); // 2 elements remaining in the queue. size() is always called at the end of each test case. example 2: input: 3 4 [""boundedblockingqueue"",""enqueue"",""enqueue"",""enqueue"",""dequeue"",""dequeue"",""dequeue"",""enqueue""] [[3],[1],[0],[2],[],[],[],[3]] output: [1,0,2,1] explanation: number of producer threads = 3 number of consumer threads = 4 boundedblockingqueue queue = new boundedblockingqueue(3); // initialize the queue with capacity = 3. queue.enqueue(1); // producer thread p1 enqueues 1 to the queue. queue.enqueue(0); // producer thread p2 enqueues 0 to the queue. queue.enqueue(2); // producer thread p3 enqueues 2 to the queue. queue.dequeue(); // consumer thread c1 calls dequeue. queue.dequeue(); // consumer thread c2 calls dequeue. queue.dequeue(); // consumer thread c3 calls dequeue. queue.enqueue(3); // one of the producer threads enqueues 3 to the queue. queue.size(); // 1 element remaining in the queue. since the number of threads for producer/consumer is greater than 1, we do not know how the threads will be scheduled in the operating system, even though the input seems to imply the ordering. therefore, any of the output [1,0,2] or [1,2,0] or [0,1,2] or [0,2,1] or [2,0,1] or [2,1,0] will be accepted.","`1 <= number of prdoucers <= 8` `1 <= number of consumers <= 8` `1 <= size <= 30` `0 <= element <= 20` the number of calls to `enqueue` is greater than or equal to the number of calls to `dequeue`. at most `40` calls will be made to `enque`, `deque`, and `size`.",
1189,Maximum Number of Balloons,"Given a string `text`, you want to use the characters of `text` to form as many instances of the word ""balloon"" as possible.

You can use each character in `text` at most once. Return the maximum number of instances that can be formed.


Example 1:
Input: text = ""nlaebolko""
Output: 1

Example 2:
Input: text = ""loonbalxballpoon""
Output: 2

Example 3:
Input: text = ""leetcode""
Output: 0

Constraints:
`1 <= text.length <= 10^4`
`text` consists of lower case English letters only.",Easy,https://leetcode.com/problems/maximum-number-of-balloons,"Tesla,Microsoft","Hash Table,String",514,,"given a string `text`, you want to use the characters of `text` to form as many instances of the word ""balloon"" as possible. you can use each character in `text` at most once. return the maximum number of instances that can be formed.","input: text = ""nlaebolko"" output: 1 example 2: input: text = ""loonbalxballpoon"" output: 2 example 3: input: text = ""leetcode"" output: 0",`1 <= text.length <= 10^4` `text` consists of lower case english letters only.,
1190,Reverse Substrings Between Each Pair of Parentheses,"You are given a string `s` that consists of lower case English letters and brackets. 
Reverse the strings in each pair of matching parentheses, starting from the innermost one.

Your result should not contain any brackets.


Example 1:
Input: s = ""(abcd)""
Output: ""dcba""

Example 2:
Input: s = ""(u(love)i)""
Output: ""iloveu""
Explanation: The substring ""love"" is reversed first, then the whole string is reversed.


Example 3:
Input: s = ""(ed(et(oc))el)""
Output: ""leetcode""
Explanation: First, we reverse the substring ""oc"", then ""etco"", and finally, the whole string.


Example 4:
Input: s = ""a(bcdefghijkl(mno)p)q""
Output: ""apmnolkjihgfedcbq""

Constraints:
`0 <= s.length <= 2000`
`s` only contains lower case English characters and parentheses.

It's guaranteed that all parentheses are balanced.",Medium,https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses,"Amazon,Oracle,Postmates",Stack,698,,"you are given a string `s` that consists of lower case english letters and brackets. reverse the strings in each pair of matching parentheses, starting from the innermost one. your result should not contain any brackets.","input: s = ""(abcd)"" output: ""dcba"" example 2: input: s = ""(u(love)i)"" output: ""iloveu"" explanation: the substring ""love"" is reversed first, then the whole string is reversed. example 3: input: s = ""(ed(et(oc))el)"" output: ""leetcode"" explanation: first, we reverse the substring ""oc"", then ""etco"", and finally, the whole string. example 4: input: s = ""a(bcdefghijkl(mno)p)q"" output: ""apmnolkjihgfedcbq""",`0 <= s.length <= 2000` `s` only contains lower case english characters and parentheses. it's guaranteed that all parentheses are balanced.,
1191,K-Concatenation Maximum Sum,"Given an integer array `arr` and an integer `k`, modify the array by repeating it `k` times.

For example, if `arr = [1, 2]` and `k = 3 `then the modified array will be `[1, 2, 1, 2, 1, 2]`.

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be `0` and its sum in that case is `0`.

As the answer can be very large, return the answer modulo `109 + 7`.


Example 1:
Input: arr = [1,2], k = 3
Output: 9

Example 2:
Input: arr = [1,-2,1], k = 5
Output: 2

Example 3:
Input: arr = [-1,-2], k = 7
Output: 0

Constraints:
`1 <= arr.length <= 105`
`1 <= k <= 105`
`-104 <= arr[i] <= 104`",Medium,https://leetcode.com/problems/k-concatenation-maximum-sum,American Express,Dynamic Programming,499,,"given an integer array `arr` and an integer `k`, modify the array by repeating it `k` times. for example, if `arr = [1, 2]` and `k = 3 `then the modified array will be `[1, 2, 1, 2, 1, 2]`. return the maximum sub-array sum in the modified array. note that the length of the sub-array can be `0` and its sum in that case is `0`. as the answer can be very large, return the answer modulo `109 + 7`.","input: arr = [1,2], k = 3 output: 9 example 2: input: arr = [1,-2,1], k = 5 output: 2 example 3: input: arr = [-1,-2], k = 7 output: 0",`1 <= arr.length <= 10^5` `1 <= k <= 10^5` `-10^4 <= arr[i] <= 10^4`,
1192,Critical Connections in a Network,"There are `n` servers numbered from `0` to `n-1` connected by undirected server-to-server `connections` forming a network where `connections[i] = [a, b]` represents a connection between servers `a` and `b`. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.


Example 1:
Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.


Constraints:
`1 <= n <= 10^5`
`n-1 <= connections.length <= 10^5`
`connections[i][0] != connections[i][1]`
There are no repeated connections.",Hard,https://leetcode.com/problems/critical-connections-in-a-network,"Amazon,Adobe",Depth-first Search,2165,,"there are `n` servers numbered from `0` to `n-1` connected by undirected server-to-server `connections` forming a network where `connections[i] = [a, b]` represents a connection between servers `a` and `b`. any server can reach any other server directly or indirectly through the network. a critical connection is a connection that, if removed, will make some server unable to reach some other server. return all critical connections in the network in any order.","input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]] output: [[1,3]] explanation: [[3,1]] is also accepted.",`1 <= n <= 10^5` `n-1 <= connections.length <= 10^5` `connections[i][0] != connections[i][1]` there are no repeated connections.,
1193,Monthly Transactions I,SQL Schema,Medium,https://leetcode.com/problems/monthly-transactions-i,"Wayfair,Wish",,60,,sql schema,,,
1194,Tournament Winners,SQL Schema,Hard,https://leetcode.com/problems/tournament-winners,Wayfair,,63,,sql schema,,,
1195,Fizz Buzz Multithreaded,"Write a program that outputs the string representation of numbers from 1 to n, however:
If the number is divisible by 3, output ""fizz"".

If the number is divisible by 5, output ""buzz"".

If the number is divisible by both 3 and 5, output ""fizzbuzz"".

For example, for `n = 15`, we output: `1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz`.

Suppose you are given the following code:
class FizzBuzz {
  public FizzBuzz(int n) { ... }               // constructor
  public void fizz(printFizz) { ... }          // only output ""fizz""
  public void buzz(printBuzz) { ... }          // only output ""buzz""
  public void fizzbuzz(printFizzBuzz) { ... }  // only output ""fizzbuzz""
  public void number(printNumber) { ... }      // only output the numbers
}
Implement a multithreaded version of `FizzBuzz` with four threads. The same instance of `FizzBuzz` will be passed to four different threads:
Thread A will call `fizz()` to check for divisibility of 3 and outputs `fizz`.

Thread B will call `buzz()` to check for divisibility of 5 and outputs `buzz`.

Thread C will call `fizzbuzz()` to check for divisibility of 3 and 5 and outputs `fizzbuzz`.

Thread D will call `number()` which should only output the numbers.",Medium,https://leetcode.com/problems/fizz-buzz-multithreaded,Microsoft,,241,,"write a program that outputs the string representation of numbers from 1 to n, however: if the number is divisible by 3, output ""fizz"". if the number is divisible by 5, output ""buzz"". if the number is divisible by both 3 and 5, output ""fizzbuzz"". for example, for `n = 15`, we output: `1, 2, fizz, 4, buzz, fizz, 7, 8, fizz, buzz, 11, fizz, 13, 14, fizzbuzz`. suppose you are given the following code: class fizzbuzz { public fizzbuzz(int n) { ... } // constructor public void fizz(printfizz) { ... } // only output ""fizz"" public void buzz(printbuzz) { ... } // only output ""buzz"" public void fizzbuzz(printfizzbuzz) { ... } // only output ""fizzbuzz"" public void number(printnumber) { ... } // only output the numbers } implement a multithreaded version of `fizzbuzz` with four threads. the same instance of `fizzbuzz` will be passed to four different threads: thread a will call `fizz()` to check for divisibility of 3 and outputs `fizz`. thread b will call `buzz()` to check for divisibility of 5 and outputs `buzz`. thread c will call `fizzbuzz()` to check for divisibility of 3 and 5 and outputs `fizzbuzz`. thread d will call `number()` which should only output the numbers.",,,
1196,How Many Apples Can You Put into the Basket,"You have some apples, where `arr[i]` is the weight of the `i`-th apple.  You also have a basket that can carry up to `5000` units of weight.

Return the maximum number of apples you can put in the basket.


Example 1:
Input: arr = [100,200,150,1000]
Output: 4
Explanation: All 4 apples can be carried by the basket since their sum of weights is 1450.


Example 2:
Input: arr = [900,950,800,1000,700,800]
Output: 5
Explanation: The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them.


Constraints:
`1 <= arr.length <= 10^3`
`1 <= arr[i] <= 10^3`",Easy,https://leetcode.com/problems/how-many-apples-can-you-put-into-the-basket,Virtu Financial,Greedy,100,,"you have some apples, where `arr[i]` is the weight of the `i`-th apple. you also have a basket that can carry up to `5000` units of weight. return the maximum number of apples you can put in the basket.","input: arr = [100,200,150,1000] output: 4 explanation: all 4 apples can be carried by the basket since their sum of weights is 1450. example 2: input: arr = [900,950,800,1000,700,800] output: 5 explanation: the sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them.",`1 <= arr.length <= 10^3` `1 <= arr[i] <= 10^3`,
1197,Minimum Knight Moves,"In an infinite chess board with coordinates from `-infinity` to `+infinity`, you have a knight at square `[0, 0]`.

A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.

Return the minimum number of steps needed to move the knight to the square `[x, y]`.  It is guaranteed the answer exists.


Example 1:
Input: x = 2, y = 1
Output: 1
Explanation: [0, 0] → [2, 1]

Example 2:
Input: x = 5, y = 5
Output: 4
Explanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]

Constraints:
`|x| + |y| <= 300`",Medium,https://leetcode.com/problems/minimum-knight-moves,"Expedia,DoorDash,Facebook,Amazon,Microsoft,Mathworks,Google,Indeed,ByteDance,Cisco,Twitter",Breadth-first Search,608,,"in an infinite chess board with coordinates from `-infinity` to `+infinity`, you have a knight at square `[0, 0]`. a knight has 8 possible moves it can make, as illustrated below. each move is two squares in a cardinal direction, then one square in an orthogonal direction. return the minimum number of steps needed to move the knight to the square `[x, y]`. it is guaranteed the answer exists.","input: x = 2, y = 1 output: 1 explanation: [0, 0] → [2, 1] example 2: input: x = 5, y = 5 output: 4 explanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]",`|x| + |y| <= 300`,
1198,Find Smallest Common Element in All Rows,"Given an `m x n` matrix `mat` where every row is sorted in strictly increasing order, return the smallest common element in all rows.

If there is no common element, return `-1`.


Example 1:
Input: mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]
Output: 5

Example 2:
Input: mat = [[1,2,3],[2,3,4],[2,3,5]]
Output: 2

Constraints:
`m == mat.length`
`n == mat[i].length`
`1 <= m, n <= 500`
`1 <= mat[i][j] <= 104`
`mat[i]` is sorted in strictly increasing order.",Medium,https://leetcode.com/problems/find-smallest-common-element-in-all-rows,Qualtrics,"Hash Table,Binary Search",255,,"given an `m x n` matrix `mat` where every row is sorted in strictly increasing order, return the smallest common element in all rows. if there is no common element, return `-1`.","input: mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]] output: 5 example 2: input: mat = [[1,2,3],[2,3,4],[2,3,5]] output: 2","`m == mat.length` `n == mat[i].length` `1 <= m, n <= 500` `1 <= mat[i][j] <= 10^4` `mat[i]` is sorted in strictly increasing order.",
1199,Minimum Time to Build Blocks,"You are given a list of blocks, where `blocks[i] = t` means that the `i`-th block needs `t` units of time to be built. A block can only be built by exactly one worker.

A worker can either split into two workers (number of workers increases by one) or build a block then go home. Both decisions cost some time.

The time cost of spliting one worker into two workers is given as an integer `split`. Note that if two workers split at the same time, they split in parallel so the cost would be `split`.

Output the minimum time needed to build all blocks.
Initially, there is only one worker.


Example 1:
Input: blocks = [1], split = 1
Output: 1
Explanation: We use 1 worker to build 1 block in 1 time unit.


Example 2:
Input: blocks = [1,2], split = 5
Output: 7
Explanation: We split the worker into 2 workers in 5 time units then assign each of them to a block so the cost is 5 + max(1, 2) = 7.


Example 3:
Input: blocks = [1,2,3], split = 1
Output: 4
Explanation: Split 1 worker into 2, then assign the first worker to the last block and split the second worker into 2.

Then, use the two unassigned workers to build the first two blocks.

The cost is 1 + max(3, 1 + max(1, 2)) = 4.


Constraints:
`1 <= blocks.length <= 1000`
`1 <= blocks[i] <= 10^5`
`1 <= split <= 100`",Hard,https://leetcode.com/problems/minimum-time-to-build-blocks,Google,"Math,Dynamic Programming",115,,"you are given a list of blocks, where `blocks[i] = t` means that the `i`-th block needs `t` units of time to be built. a block can only be built by exactly one worker. a worker can either split into two workers (number of workers increases by one) or build a block then go home. both decisions cost some time. the time cost of spliting one worker into two workers is given as an integer `split`. note that if two workers split at the same time, they split in parallel so the cost would be `split`. output the minimum time needed to build all blocks. initially, there is only one worker.","input: blocks = [1], split = 1 output: 1 explanation: we use 1 worker to build 1 block in 1 time unit. example 2: input: blocks = [1,2], split = 5 output: 7 explanation: we split the worker into 2 workers in 5 time units then assign each of them to a block so the cost is 5 + max(1, 2) = 7. example 3: input: blocks = [1,2,3], split = 1 output: 4 explanation: split 1 worker into 2, then assign the first worker to the last block and split the second worker into 2. then, use the two unassigned workers to build the first two blocks. the cost is 1 + max(3, 1 + max(1, 2)) = 4.",`1 <= blocks.length <= 1000` `1 <= blocks[i] <= 10^5` `1 <= split <= 10^0`,
1200,Minimum Absolute Difference,"Given an array of distinct integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements. 
Return a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows
`a, b` are from `arr`
`a < b`
`b - a` equals to the minimum absolute difference of any two elements in `arr`

Example 1:
Input: arr = [4,2,1,3]
Output: [[1,2],[2,3],[3,4]]
Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.


Example 2:
Input: arr = [1,3,6,10,15]
Output: [[1,3]]

Example 3:
Input: arr = [3,8,-10,23,19,-4,-14,27]
Output: [[-14,-10],[19,23],[23,27]]

Constraints:
`2 <= arr.length <= 10^5`
`-10^6 <= arr[i] <= 10^6`",Easy,https://leetcode.com/problems/minimum-absolute-difference,"Microsoft,Uber",Array,585,,"given an array of distinct integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements. return a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows `a, b` are from `arr` `a < b` `b - a` equals to the minimum absolute difference of any two elements in `arr`","input: arr = [4,2,1,3] output: [[1,2],[2,3],[3,4]] explanation: the minimum absolute difference is 1. list all pairs with difference equal to 1 in ascending order. example 2: input: arr = [1,3,6,10,15] output: [[1,3]] example 3: input: arr = [3,8,-10,23,19,-4,-14,27] output: [[-14,-10],[19,23],[23,27]]",`2 <= arr.length <= 10^5` `-10^6 <= arr[i] <= 10^6`,
1201,Ugly Number III,"Given four integers `n`, `a`, `b`, and `c`, return the `nth` ugly number.

Ugly numbers are positive integers that are divisible by `a`, `b`, or `c`.


Example 1:
Input: n = 3, a = 2, b = 3, c = 5
Output: 4
Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.


Example 2:
Input: n = 4, a = 2, b = 3, c = 4
Output: 6
Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.


Example 3:
Input: n = 5, a = 2, b = 11, c = 13
Output: 10
Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.


Example 4:
Input: n = 1000000000, a = 2, b = 217983653, c = 336916467
Output: 1999999984

Constraints:
`1 <= n, a, b, c <= 109`
`1 <= a * b * c <= 1018`
It is guaranteed that the result will be in range `[1, 2 * 109]`.",Medium,https://leetcode.com/problems/ugly-number-iii,American Express,"Math,Binary Search",409,"[Ugly Number II, /problems/ugly-number-ii/, Medium]","given four integers `n`, `a`, `b`, and `c`, return the `nth` ugly number. ugly numbers are positive integers that are divisible by `a`, `b`, or `c`.","input: n = 3, a = 2, b = 3, c = 5 output: 4 explanation: the ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... the 3rd is 4. example 2: input: n = 4, a = 2, b = 3, c = 4 output: 6 explanation: the ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... the 4th is 6. example 3: input: n = 5, a = 2, b = 11, c = 13 output: 10 explanation: the ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... the 5th is 10. example 4: input: n = 1000000000, a = 2, b = 217983653, c = 336916467 output: 1999999984","`1 <= n, a, b, c <= 10^9` `1 <= a * b * c <= 1018` it is guaranteed that the result will be in range `[1, 2 * 10^9]`.",
1202,Smallest String With Swaps,"You are given a string `s`, and an array of pairs of indices in the string `pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the string.

You can swap the characters at any pair of indices in the given `pairs` any number of times.

Return the lexicographically smallest string that `s` can be changed to after using the swaps.


Example 1:
Input: s = ""dcab"", pairs = [[0,3],[1,2]]
Output: ""bacd""
Explaination: 
Swap s[0] and s[3], s = ""bcad""
Swap s[1] and s[2], s = ""bacd""

Example 2:
Input: s = ""dcab"", pairs = [[0,3],[1,2],[0,2]]
Output: ""abcd""
Explaination: 
Swap s[0] and s[3], s = ""bcad""
Swap s[0] and s[2], s = ""acbd""
Swap s[1] and s[2], s = ""abcd""

Example 3:
Input: s = ""cba"", pairs = [[0,1],[1,2]]
Output: ""abc""
Explaination: 
Swap s[0] and s[1], s = ""bca""
Swap s[1] and s[2], s = ""bac""
Swap s[0] and s[1], s = ""abc""

Constraints:
`1 <= s.length <= 10^5`
`0 <= pairs.length <= 10^5`
`0 <= pairs[i][0], pairs[i][1] < s.length`
`s` only contains lower case English letters.",Medium,https://leetcode.com/problems/smallest-string-with-swaps,Citrix,"Array,Union Find",847,"[Minimize Hamming Distance After Swap Operations, /problems/minimize-hamming-distance-after-swap-operations/, Medium]","you are given a string `s`, and an array of pairs of indices in the string `pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the string. you can swap the characters at any pair of indices in the given `pairs` any number of times. return the lexicographically smallest string that `s` can be changed to after using the swaps.","input: s = ""dcab"", pairs = [[0,3],[1,2]] output: ""bacd"" explaination: swap s[0] and s[3], s = ""bcad"" swap s[1] and s[2], s = ""bacd"" example 2: input: s = ""dcab"", pairs = [[0,3],[1,2],[0,2]] output: ""abcd"" explaination: swap s[0] and s[3], s = ""bcad"" swap s[0] and s[2], s = ""acbd"" swap s[1] and s[2], s = ""abcd"" example 3: input: s = ""cba"", pairs = [[0,1],[1,2]] output: ""abc"" explaination: swap s[0] and s[1], s = ""bca"" swap s[1] and s[2], s = ""bac"" swap s[0] and s[1], s = ""abc""","`1 <= s.length <= 10^5` `0 <= pairs.length <= 10^5` `0 <= pairs[i][0], pairs[i][1] < s.length` `s` only contains lower case english letters.",
1203,Sort Items by Groups Respecting Dependencies,"There are `n` items each belonging to zero or one of `m` groups where `group[i]` is the group that the `i`-th item belongs to and it's equal to `-1` if the `i`-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.

Return a sorted list of the items such that:
The items that belong to the same group are next to each other in the sorted list.

There are some relations between these items where `beforeItems[i]` is a list containing all the items that should come before the `i`-th item in the sorted array (to the left of the `i`-th item).

Return any solution if there is more than one solution and return an empty list if there is no solution.


Example 1:
Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]
Output: [6,3,4,1,5,2,0,7]

Example 2:
Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]
Output: []
Explanation: This is the same as example 1 except that 4 needs to be before 6 in the sorted list.


Constraints:
`1 <= m <= n <= 3 * 104`
`group.length == beforeItems.length == n`
`-1 <= group[i] <= m - 1`
`0 <= beforeItems[i].length <= n - 1`
`0 <= beforeItems[i][j] <= n - 1`
`i != beforeItems[i][j]`
`beforeItems[i] `does not contain duplicates elements.",Hard,https://leetcode.com/problems/sort-items-by-groups-respecting-dependencies,Google,"Depth-first Search,Graph,Topological Sort",387,,there are `n` items each belonging to zero or one of `m` groups where `group[i]` is the group that the `i`-th item belongs to and it's equal to `-1` if the `i`-th item belongs to no group. the items and the groups are zero indexed. a group can have no item belonging to it. return a sorted list of the items such that: the items that belong to the same group are next to each other in the sorted list. there are some relations between these items where `beforeitems[i]` is a list containing all the items that should come before the `i`-th item in the sorted array (to the left of the `i`-th item). return any solution if there is more than one solution and return an empty list if there is no solution.,"input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeitems = [[],[6],[5],[6],[3,6],[],[],[]] output: [6,3,4,1,5,2,0,7] example 2: input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeitems = [[],[6],[5],[6],[3],[],[4],[]] output: [] explanation: this is the same as example 1 except that 4 needs to be before 6 in the sorted list.",`1 <= m <= n <= 3 * 10^4` `group.length == beforeitems.length == n` `-1 <= group[i] <= m - 1` `0 <= beforeitems[i].length <= n - 1` `0 <= beforeitems[i][j] <= n - 1` `i != beforeitems[i][j]` `beforeitems[i] `does not contain duplicates elements.,
1204,Last Person to Fit in the Elevator,SQL Schema,Medium,https://leetcode.com/problems/last-person-to-fit-in-the-elevator,Wayfair,,126,,sql schema,,,
1205,Monthly Transactions II,SQL Schema,Medium,https://leetcode.com/problems/monthly-transactions-ii,Wish,,74,,sql schema,,,
1206,Design Skiplist,"Design a Skiplist without using any built-in libraries.

A Skiplist is a data structure that takes O(log(n)) time to `add`, `erase` and `search`. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists are just simple linked lists.

For example: we have a Skiplist containing `[30,40,50,60,70,90]` and we want to add `80` and `45` into it. The Skiplist works this way:
Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons
You can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, `add` , `erase` and `search `can be faster than O(n). It can be proven that the average time complexity for each operation is O(log(n)) and space complexity is O(n).

To be specific, your design should include these functions:
`bool search(int target)` : Return whether the `target` exists in the Skiplist or not.

`void add(int num)`: Insert a value into the SkipList. 
`bool erase(int num)`: Remove a value in the Skiplist. If `num` does not exist in the Skiplist, do nothing and return false. If there exists multiple `num` values, removing any one of them is fine.

See more about Skiplist : https://en.wikipedia.org/wiki/Skip_list
Note that duplicates may exist in the Skiplist, your code needs to handle this situation.


Example:
Skiplist skiplist = new Skiplist();
skiplist.add(1);
skiplist.add(2);
skiplist.add(3);
skiplist.search(0);   // return false.

skiplist.add(4);
skiplist.search(1);   // return true.

skiplist.erase(0);    // return false, 0 is not in skiplist.

skiplist.erase(1);    // return true.

skiplist.search(1);   // return false, 1 has already been erased.


Constraints:
`0 <= num, target <= 20000`
At most `50000` calls will be made to `search`, `add`, and `erase`.",Hard,https://leetcode.com/problems/design-skiplist,Microsoft,Design,239,"[Design HashSet, /problems/design-hashset/, Easy], [Design HashMap, /problems/design-hashmap/, Easy], [Design Linked List, /problems/design-linked-list/, Medium]","design a skiplist without using any built-in libraries. a skiplist is a data structure that takes o(log(n)) time to `add`, `erase` and `search`. comparing with treap and red-black tree which has the same function and performance, the code length of skiplist can be comparatively short and the idea behind skiplists are just simple linked lists. for","we have a skiplist containing `[30,40,50,60,70,90]` and we want to add `80` and `45` into it. the skiplist works this way: artyom kalinin [cc by-sa 3.0], via wikimedia commons you can see there are many layers in the skiplist. each layer is a sorted linked list. with the help of the top layers, `add` , `erase` and `search `can be faster than o(n). it can be proven that the average time complexity for each operation is o(log(n)) and space complexity is o(n). to be specific, your design should include these functions: `bool search(int target)` : return whether the `target` exists in the skiplist or not. `void add(int num)`: insert a value into the skiplist. `bool erase(int num)`: remove a value in the skiplist. if `num` does not exist in the skiplist, do nothing and return false. if there exists multiple `num` values, removing any one of them is fine. see more about skiplist : https://en.wikipedia.org/wiki/skip_list note that duplicates may exist in the skiplist, your code needs to handle this situation. example: skiplist skiplist = new skiplist(); skiplist.add(1); skiplist.add(2); skiplist.add(3); skiplist.search(0); // return false. skiplist.add(4); skiplist.search(1); // return true. skiplist.erase(0); // return false, 0 is not in skiplist. skiplist.erase(1); // return true. skiplist.search(1); // return false, 1 has already been erased.","`0 <= num, target <= 20000` at most `50000` calls will be made to `search`, `add`, and `erase`.",
1207,Unique Number of Occurrences,"Given an array of integers `arr`, write a function that returns `true` if and only if the number of occurrences of each value in the array is unique.


Example 1:
Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.


Example 2:
Input: arr = [1,2]
Output: false

Example 3:
Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true

Constraints:
`1 <= arr.length <= 1000`
`-1000 <= arr[i] <= 1000`",Easy,https://leetcode.com/problems/unique-number-of-occurrences,Apple,Hash Table,662,,"given an array of integers `arr`, write a function that returns `true` if and only if the number of occurrences of each value in the array is unique.","input: arr = [1,2,2,1,1,3] output: true explanation: the value 1 has 3 occurrences, 2 has 2 and 3 has 1. no two values have the same number of occurrences. example 2: input: arr = [1,2] output: false example 3: input: arr = [-3,0,1,-3,1,1,1,-3,10,0] output: true",`1 <= arr.length <= 1000` `-1000 <= arr[i] <= 1000`,
1208,Get Equal Substrings Within Budget,"You are given two strings `s` and `t` of the same length. You want to change `s` to `t`. Changing the `i`-th character of `s` to `i`-th character of `t` costs `|s[i] - t[i]|` that is, the absolute difference between the ASCII values of the characters.

You are also given an integer `maxCost`.

Return the maximum length of a substring of `s` that can be changed to be the same as the corresponding substring of `t`with a cost less than or equal to `maxCost`.

If there is no substring from `s` that can be changed to its corresponding substring from `t`, return `0`.


Example 1:
Input: s = ""abcd"", t = ""bcdf"", maxCost = 3
Output: 3
Explanation: ""abc"" of s can change to ""bcd"". That costs 3, so the maximum length is 3.


Example 2:
Input: s = ""abcd"", t = ""cdef"", maxCost = 3
Output: 1
Explanation: Each character in s costs 2 to change to charactor in `t, so the maximum length is 1.`

Example 3:
Input: s = ""abcd"", t = ""acde"", maxCost = 0
Output: 1
Explanation: You can't make any change, so the maximum length is 1.


Constraints:
`1 <= s.length, t.length <= 10^5`
`0 <= maxCost <= 10^6`
`s` and `t` only contain lower case English letters.",Medium,https://leetcode.com/problems/get-equal-substrings-within-budget,Traveloka,"Array,Sliding Window",400,,"you are given two strings `s` and `t` of the same length. you want to change `s` to `t`. changing the `i`-th character of `s` to `i`-th character of `t` costs `|s[i] - t[i]|` that is, the absolute difference between the ascii values of the characters. you are also given an integer `maxcost`. return the maximum length of a substring of `s` that can be changed to be the same as the corresponding substring of `t`with a cost less than or equal to `maxcost`. if there is no substring from `s` that can be changed to its corresponding substring from `t`, return `0`.","input: s = ""abcd"", t = ""bcdf"", maxcost = 3 output: 3 explanation: ""abc"" of s can change to ""bcd"". that costs 3, so the maximum length is 3. example 2: input: s = ""abcd"", t = ""cdef"", maxcost = 3 output: 1 explanation: each character in s costs 2 to change to charactor in `t, so the maximum length is 1.` example 3: input: s = ""abcd"", t = ""acde"", maxcost = 0 output: 1 explanation: you can't make any change, so the maximum length is 1.","`1 <= s.length, t.length <= 10^5` `0 <= maxcost <= 10^6` `s` and `t` only contain lower case english letters.",
1209,Remove All Adjacent Duplicates in String II,"Given a string `s`, a k duplicate removal consists of choosing `k` adjacent and equal letters from `s` and removing them causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make `k` duplicate removals on `s` until we no longer can.

Return the final string after all such duplicate removals have been made.

It is guaranteed that the answer is unique.


Example 1:
Input: s = ""abcd"", k = 2
Output: ""abcd""
Explanation: There's nothing to delete.


Example 2:
Input: s = ""deeedbbcccbdaa"", k = 3
Output: ""aa""
Explanation: 
First delete ""eee"" and ""ccc"", get ""ddbbbdaa""
Then delete ""bbb"", get ""dddaa""
Finally delete ""ddd"", get ""aa""

Example 3:
Input: s = ""pbbcggttciiippooaais"", k = 2
Output: ""ps""

Constraints:
`1 <= s.length <= 10^5`
`2 <= k <= 10^4`
`s` only contains lower case English letters.",Medium,https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string-ii,"Bloomberg,Facebook,Amazon,Roblox,Google,Microsoft",Stack,1217,"[Remove All Adjacent Duplicates In String, /problems/remove-all-adjacent-duplicates-in-string/, Easy]","given a string `s`, a k duplicate removal consists of choosing `k` adjacent and equal letters from `s` and removing them causing the left and the right side of the deleted substring to concatenate together. we repeatedly make `k` duplicate removals on `s` until we no longer can. return the final string after all such duplicate removals have been made. it is guaranteed that the answer is unique.","input: s = ""abcd"", k = 2 output: ""abcd"" explanation: there's nothing to delete. example 2: input: s = ""deeedbbcccbdaa"", k = 3 output: ""aa"" explanation: first delete ""eee"" and ""ccc"", get ""ddbbbdaa"" then delete ""bbb"", get ""dddaa"" finally delete ""ddd"", get ""aa"" example 3: input: s = ""pbbcggttciiippooaais"", k = 2 output: ""ps""",`1 <= s.length <= 10^5` `2 <= k <= 10^4` `s` only contains lower case english letters.,
1210,Minimum Moves to Reach Target with Rotations,"In an `n*n` grid, there is a snake that spans 2 cells and starts moving from the top left corner at `(0, 0)` and `(0, 1)`. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at `(n-1, n-2)` and `(n-1, n-1)`.

In one move the snake can:
Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.

Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.

Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from `(r, c)` and `(r, c+1)` to `(r, c)` and `(r+1, c)`.

Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from `(r, c)` and `(r+1, c)` to `(r, c)` and `(r, c+1)`.

Return the minimum number of moves to reach the target.

If there is no way to reach the target, return `-1`.


Example 1:
Input: grid = [[0,0,0,0,0,1],
               [1,1,0,0,1,0],
               [0,0,0,0,1,1],
               [0,0,1,0,1,0],
               [0,1,1,0,0,0],
               [0,1,1,0,0,0]]
Output: 11
Explanation:
One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].


Example 2:
Input: grid = [[0,0,1,1,1,1],
               [0,0,0,0,1,1],
               [1,1,0,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,0]]
Output: 9

Constraints:
`2 <= n <= 100`
`0 <= grid[i][j] <= 1`
It is guaranteed that the snake starts at empty cells.",Hard,https://leetcode.com/problems/minimum-moves-to-reach-target-with-rotations,Kakao,Breadth-first Search,155,,"in an `n*n` grid, there is a snake that spans 2 cells and starts moving from the top left corner at `(0, 0)` and `(0, 1)`. the grid has empty cells represented by zeros and blocked cells represented by ones. the snake wants to reach the lower right corner at `(n-1, n-2)` and `(n-1, n-1)`. in one move the snake can: move one cell to the right if there are no blocked cells there. this move keeps the horizontal/vertical position of the snake as it is. move down one cell if there are no blocked cells there. this move keeps the horizontal/vertical position of the snake as it is. rotate clockwise if it's in a horizontal position and the two cells under it are both empty. in that case the snake moves from `(r, c)` and `(r, c+1)` to `(r, c)` and `(r+1, c)`. rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. in that case the snake moves from `(r, c)` and `(r+1, c)` to `(r, c)` and `(r, c+1)`. return the minimum number of moves to reach the target. if there is no way to reach the target, return `-1`.","input: grid = [[0,0,0,0,0,1], [1,1,0,0,1,0], [0,0,0,0,1,1], [0,0,1,0,1,0], [0,1,1,0,0,0], [0,1,1,0,0,0]] output: 11 explanation: one possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down]. example 2: input: grid = [[0,0,1,1,1,1], [0,0,0,0,1,1], [1,1,0,0,0,1], [1,1,1,0,0,1], [1,1,1,0,0,1], [1,1,1,0,0,0]] output: 9",`2 <= n <= 10^0` `0 <= grid[i][j] <= 1` it is guaranteed that the snake starts at empty cells.,
1211,Queries Quality and Percentage,SQL Schema,Easy,https://leetcode.com/problems/queries-quality-and-percentage,Facebook,,55,,sql schema,,,
1212,Team Scores in Football Tournament,SQL Schema,Medium,https://leetcode.com/problems/team-scores-in-football-tournament,"Oracle,Wayfair",,149,,sql schema,,,
1213,Intersection of Three Sorted Arrays,"Given three integer arrays `arr1`, `arr2` and `arr3` sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.


Example 1:
Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]
Output: [1,5]
Explanation: Only 1 and 5 appeared in the three arrays.


Example 2:
Input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]
Output: []

Constraints:
`1 <= arr1.length, arr2.length, arr3.length <= 1000`
`1 <= arr1[i], arr2[i], arr3[i] <= 2000`",Easy,https://leetcode.com/problems/intersection-of-three-sorted-arrays,Facebook,"Hash Table,Two Pointers",262,"[Intersection of Two Arrays, /problems/intersection-of-two-arrays/, Easy]","given three integer arrays `arr1`, `arr2` and `arr3` sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.","input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8] output: [1,5] explanation: only 1 and 5 appeared in the three arrays. example 2: input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764] output: []","`1 <= arr1.length, arr2.length, arr3.length <= 1000` `1 <= arr1[i], arr2[i], arr3[i] <= 2000`",
1214,Two Sum BSTs,"Given the roots of two binary search trees, `root1` and `root2`, return `true` if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer `target`.


Example 1:
Input: root1 = [2,1,4], root2 = [1,0,3], target = 5
Output: true
Explanation: 2 and 3 sum up to 5.


Example 2:
Input: root1 = [0,-10,10], root2 = [5,1,7,0,2], target = 18
Output: false

Constraints:
The number of nodes in each tree is in the range `[1, 5000]`.

`-109 <= Node.val, target <= 109`",Medium,https://leetcode.com/problems/two-sum-bsts,Amazon,Binary Search Tree,255,"[Two Sum IV - Input is a BST, /problems/two-sum-iv-input-is-a-bst/, Easy]","given the roots of two binary search trees, `root1` and `root2`, return `true` if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer `target`.","input: root1 = [2,1,4], root2 = [1,0,3], target = 5 output: true explanation: 2 and 3 sum up to 5. example 2: input: root1 = [0,-10,10], root2 = [5,1,7,0,2], target = 18 output: false","the number of nodes in each tree is in the range `[1, 5000]`. `-10^9 <= node.val, target <= 10^9`",
1215,Stepping Numbers,"A Stepping Number is an integer such that all of its adjacent digits have an absolute difference of exactly `1`. For example, `321` is a Stepping Number while `421` is not.

Given two integers `low` and `high`, find and return a sorted list of all the Stepping Numbers in the range `[low, high]` inclusive.


Example 1:
Input: low = 0, high = 21
Output: [0,1,2,3,4,5,6,7,8,9,10,12,21]

Constraints:
`0 <= low <= high <= 2 * 10^9`",Medium,https://leetcode.com/problems/stepping-numbers,"Amazon,Epic Systems",Backtracking,139,,"a stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly `1`. for example, `321` is a stepping number while `421` is not. given two integers `low` and `high`, find and return a sorted list of all the stepping numbers in the range `[low, high]` inclusive.","input: low = 0, high = 21 output: [0,1,2,3,4,5,6,7,8,9,10,12,21]",`0 <= low <= high <= 2 * 10^9`,
1216,Valid Palindrome III,"Given a string `s` and an integer `k`, return `true` if `s` is a `k`-palindrome.

A string is `k`-palindrome if it can be transformed into a palindrome by removing at most `k` characters from it.


Example 1:
Input: s = ""abcdeca"", k = 2
Output: true
Explanation: Remove 'b' and 'e' characters.


Example 2:
Input: s = ""abbababa"", k = 1
Output: true

Constraints:
`1 <= s.length <= 1000`
`s` consists of only lowercase English letters.

`1 <= k <= s.length`",Hard,https://leetcode.com/problems/valid-palindrome-iii,Facebook,"String,Dynamic Programming",234,,"given a string `s` and an integer `k`, return `true` if `s` is a `k`-palindrome. a string is `k`-palindrome if it can be transformed into a palindrome by removing at most `k` characters from it.","input: s = ""abcdeca"", k = 2 output: true explanation: remove 'b' and 'e' characters. example 2: input: s = ""abbababa"", k = 1 output: true",`1 <= s.length <= 1000` `s` consists of only lowercase english letters. `1 <= k <= s.length`,
1217,Minimum Cost to Move Chips to The Same Position,"We have `n` chips, where the position of the `ith` chip is `position[i]`.

We need to move all the chips to the same position. In one step, we can change the position of the `ith` chip from `position[i]` to:
`position[i] + 2` or `position[i] - 2` with `cost = 0`.

`position[i] + 1` or `position[i] - 1` with `cost = 1`.

Return the minimum cost needed to move all the chips to the same position.


Example 1:
Input: position = [1,2,3]
Output: 1
Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.

Second step: Move the chip at position 2 to position 1 with cost = 1.

Total cost is 1.


Example 2:
Input: position = [2,2,2,3,3]
Output: 2
Explanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.


Example 3:
Input: position = [1,1000000000]
Output: 1

Constraints:
`1 <= position.length <= 100`
`1 <= position[i] <= 10^9`",Easy,https://leetcode.com/problems/minimum-cost-to-move-chips-to-the-same-position,Morgan Stanley,"Array,Math,Greedy",285,"[Minimum Number of Operations to Move All Balls to Each Box, /problems/minimum-number-of-operations-to-move-all-balls-to-each-box/, Medium]","we have `n` chips, where the position of the `ith` chip is `position[i]`. we need to move all the chips to the same position. in one step, we can change the position of the `ith` chip from `position[i]` to: `position[i] + 2` or `position[i] - 2` with `cost = 0`. `position[i] + 1` or `position[i] - 1` with `cost = 1`. return the minimum cost needed to move all the chips to the same position.","input: position = [1,2,3] output: 1 explanation: first step: move the chip at position 3 to position 1 with cost = 0. second step: move the chip at position 2 to position 1 with cost = 1. total cost is 1. example 2: input: position = [2,2,2,3,3] output: 2 explanation: we can move the two chips at position 3 to position 2. each move has cost = 1. the total cost = 2. example 3: input: position = [1,1000000000] output: 1",`1 <= position.length <= 10^0` `1 <= position[i] <= 10^9`,
1218,Longest Arithmetic Subsequence of Given Difference,"Given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.

A subsequence is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.


Example 1:
Input: arr = [1,2,3,4], difference = 1
Output: 4
Explanation: The longest arithmetic subsequence is [1,2,3,4].


Example 2:
Input: arr = [1,3,5,7], difference = 1
Output: 1
Explanation: The longest arithmetic subsequence is any single element.


Example 3:
Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
Output: 4
Explanation: The longest arithmetic subsequence is [7,5,3,1].


Constraints:
`1 <= arr.length <= 105`
`-104 <= arr[i], difference <= 104`",Medium,https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference,Google,"Hash Table,Math,Dynamic Programming",508,,"given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`. a subsequence is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.","input: arr = [1,2,3,4], difference = 1 output: 4 explanation: the longest arithmetic subsequence is [1,2,3,4]. example 2: input: arr = [1,3,5,7], difference = 1 output: 1 explanation: the longest arithmetic subsequence is any single element. example 3: input: arr = [1,5,7,8,5,3,4,2,1], difference = -2 output: 4 explanation: the longest arithmetic subsequence is [7,5,3,1].","`1 <= arr.length <= 10^5` `-10^4 <= arr[i], difference <= 10^4`",
1219,Path with Maximum Gold,"In a gold mine `grid` of size `m x n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.

Return the maximum amount of gold you can collect under the conditions:
Every time you are located in a cell you will collect all the gold in that cell.

From your position, you can walk one step to the left, right, up, or down.

You can't visit the same cell more than once.

Never visit a cell with `0` gold.

You can start and stop collecting gold from any position in the grid that has some gold.


Example 1:
Input: grid = [[0,6,0],[5,8,7],[0,9,0]]
Output: 24
Explanation:
[[0,6,0],
 [5,8,7],
 [0,9,0]]
Path to get the maximum gold, 9 -> 8 -> 7.


Example 2:
Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
Output: 28
Explanation:
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.


Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 15`
`0 <= grid[i][j] <= 100`
There are at most 25 cells containing gold.",Medium,https://leetcode.com/problems/path-with-maximum-gold,Google,Backtracking,959,,"in a gold mine `grid` of size `m x n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty. return the maximum amount of gold you can collect under the conditions: every time you are located in a cell you will collect all the gold in that cell. from your position, you can walk one step to the left, right, up, or down. you can't visit the same cell more than once. never visit a cell with `0` gold. you can start and stop collecting gold from any position in the grid that has some gold.","input: grid = [[0,6,0],[5,8,7],[0,9,0]] output: 24 explanation: [[0,6,0], [5,8,7], [0,9,0]] path to get the maximum gold, 9 -> 8 -> 7. example 2: input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]] output: 28 explanation: [[1,0,7], [2,0,6], [3,4,5], [0,3,0], [9,0,20]] path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 15` `0 <= grid[i][j] <= 10^0` there are at most 25 cells containing gold.",
1220,Count Vowels Permutation,"Given an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:
Each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)
Each vowel `'a'` may only be followed by an `'e'`.

Each vowel `'e'` may only be followed by an `'a'` or an `'i'`.

Each vowel `'i'` may not be followed by another `'i'`.

Each vowel `'o'` may only be followed by an `'i'` or a `'u'`.

Each vowel `'u'` may only be followed by an `'a'.`
Since the answer may be too large, return it modulo `10^9 + 7.`

Example 1:
Input: n = 1
Output: 5
Explanation: All possible strings are: ""a"", ""e"", ""i"" , ""o"" and ""u"".


Example 2:
Input: n = 2
Output: 10
Explanation: All possible strings are: ""ae"", ""ea"", ""ei"", ""ia"", ""ie"", ""io"", ""iu"", ""oi"", ""ou"" and ""ua"".


Example 3: 
Input: n = 5
Output: 68

Constraints:
`1 <= n <= 2 * 10^4`",Hard,https://leetcode.com/problems/count-vowels-permutation,Swiggy,Dynamic Programming,309,,"given an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules: each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`) each vowel `'a'` may only be followed by an `'e'`. each vowel `'e'` may only be followed by an `'a'` or an `'i'`. each vowel `'i'` may not be followed by another `'i'`. each vowel `'o'` may only be followed by an `'i'` or a `'u'`. each vowel `'u'` may only be followed by an `'a'.` since the answer may be too large, return it modulo `10^9 + 7.`","input: n = 1 output: 5 explanation: all possible strings are: ""a"", ""e"", ""i"" , ""o"" and ""u"". example 2: input: n = 2 output: 10 explanation: all possible strings are: ""ae"", ""ea"", ""ei"", ""ia"", ""ie"", ""io"", ""iu"", ""oi"", ""ou"" and ""ua"". example 3: input: n = 5 output: 68",`1 <= n <= 2 * 10^4`,
1221,Split a String in Balanced Strings,"Balanced strings are those that have an equal quantity of `'L'` and `'R'` characters.

Given a balanced string `s`, split it in the maximum amount of balanced strings.

Return the maximum amount of split balanced strings.


Example 1:
Input: s = ""RLRRLLRLRL""
Output: 4
Explanation: s can be split into ""RL"", ""RRLL"", ""RL"", ""RL"", each substring contains same number of 'L' and 'R'.


Example 2:
Input: s = ""RLLLLRRRLR""
Output: 3
Explanation: s can be split into ""RL"", ""LLLRRR"", ""LR"", each substring contains same number of 'L' and 'R'.


Example 3:
Input: s = ""LLLLRRRR""
Output: 1
Explanation: s can be split into ""LLLLRRRR"".


Example 4:
Input: s = ""RLRRRLLRLL""
Output: 2
Explanation: s can be split into ""RL"", ""RRRLLRLL"", since each substring contains an equal number of 'L' and 'R'

Constraints:
`1 <= s.length <= 1000`
`s[i]` is either `'L'` or `'R'`.

`s` is a balanced string.",Easy,https://leetcode.com/problems/split-a-string-in-balanced-strings,Walmart Labs,"String,Greedy",1018,,"balanced strings are those that have an equal quantity of `'l'` and `'r'` characters. given a balanced string `s`, split it in the maximum amount of balanced strings. return the maximum amount of split balanced strings.","input: s = ""rlrrllrlrl"" output: 4 explanation: s can be split into ""rl"", ""rrll"", ""rl"", ""rl"", each substring contains same number of 'l' and 'r'. example 2: input: s = ""rllllrrrlr"" output: 3 explanation: s can be split into ""rl"", ""lllrrr"", ""lr"", each substring contains same number of 'l' and 'r'. example 3: input: s = ""llllrrrr"" output: 1 explanation: s can be split into ""llllrrrr"". example 4: input: s = ""rlrrrllrll"" output: 2 explanation: s can be split into ""rl"", ""rrrllrll"", since each substring contains an equal number of 'l' and 'r'",`1 <= s.length <= 1000` `s[i]` is either `'l'` or `'r'`. `s` is a balanced string.,
1222,Queens That Can Attack the King,"On an 8x8 chessboard, there can be multiple Black Queens and one White King.

Given an array of integer coordinates `queens` that represents the positions of the Black Queens, and a pair of coordinates `king` that represent the position of the White King, return the coordinates of all the queens (in any order) that can attack the King.


Example 1:
Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
Output: [[0,1],[1,0],[3,3]]
Explanation:  
The queen at [0,1] can attack the king cause they're in the same row. 
The queen at [1,0] can attack the king cause they're in the same column. 
The queen at [3,3] can attack the king cause they're in the same diagnal. 
The queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1]. 
The queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0]. 
The queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king.


Example 2:
Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]
Output: [[2,2],[3,4],[4,4]]

Example 3:
Input: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]
Output: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]

Constraints:
`1 <= queens.length <= 63`
`queens[i].length == 2`
`0 <= queens[i][j] < 8`
`king.length == 2`
`0 <= king[0], king[1] < 8`
At most one piece is allowed in a cell.",Medium,https://leetcode.com/problems/queens-that-can-attack-the-king,Media.net,Array,421,,"on an 8x8 chessboard, there can be multiple black queens and one white king. given an array of integer coordinates `queens` that represents the positions of the black queens, and a pair of coordinates `king` that represent the position of the white king, return the coordinates of all the queens (in any order) that can attack the king.","input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0] output: [[0,1],[1,0],[3,3]] explanation: the queen at [0,1] can attack the king cause they're in the same row. the queen at [1,0] can attack the king cause they're in the same column. the queen at [3,3] can attack the king cause they're in the same diagnal. the queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1]. the queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0]. the queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king. example 2: input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3] output: [[2,2],[3,4],[4,4]] example 3: input: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4] output: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]","`1 <= queens.length <= 63` `queens[i].length == 2` `0 <= queens[i][j] < 8` `king.length == 2` `0 <= king[0], king[1] < 8` at most one piece is allowed in a cell.",
1223,Dice Roll Simulation,"A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (1-indexed) consecutive times. 
Given an array of integers `rollMax` and an integer `n`, return the number of distinct sequences that can be obtained with exact `n` rolls.

Two sequences are considered different if at least one element differs from each other. Since the answer may be too large, return it modulo `10^9 + 7`.


Example 1:
Input: n = 2, rollMax = [1,1,2,2,2,3]
Output: 34
Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.


Example 2:
Input: n = 2, rollMax = [1,1,1,1,1,1]
Output: 30

Example 3:
Input: n = 3, rollMax = [1,1,1,2,2,3]
Output: 181

Constraints:
`1 <= n <= 5000`
`rollMax.length == 6`
`1 <= rollMax[i] <= 15`",Hard,https://leetcode.com/problems/dice-roll-simulation,Codenation,Dynamic Programming,518,,"a die simulator generates a random number from 1 to 6 for each roll. you introduced a constraint to the generator such that it cannot roll the number `i` more than `rollmax[i]` (1-indexed) consecutive times. given an array of integers `rollmax` and an integer `n`, return the number of distinct sequences that can be obtained with exact `n` rolls. two sequences are considered different if at least one element differs from each other. since the answer may be too large, return it modulo `10^9 + 7`.","input: n = 2, rollmax = [1,1,2,2,2,3] output: 34 explanation: there will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. in this case, looking at rollmax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34. example 2: input: n = 2, rollmax = [1,1,1,1,1,1] output: 30 example 3: input: n = 3, rollmax = [1,1,1,2,2,3] output: 181",`1 <= n <= 5000` `rollmax.length == 6` `1 <= rollmax[i] <= 15`,
1224,Maximum Equal Frequency,"Given an array `nums` of positive integers, return the longest possible length of an array prefix of `nums`, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.

If after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).


Example 1:
Input: nums = [2,2,1,1,5,3,3,5]
Output: 7
Explanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4]=5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.


Example 2:
Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]
Output: 13

Example 3:
Input: nums = [1,1,1,2,2,2]
Output: 5

Example 4:
Input: nums = [10,2,8,9,3,8,1,5,2,3,7,6]
Output: 8

Constraints:
`2 <= nums.length <= 10^5`
`1 <= nums[i] <= 10^5`",Hard,https://leetcode.com/problems/maximum-equal-frequency,American Express,Hash Table,243,,"given an array `nums` of positive integers, return the longest possible length of an array prefix of `nums`, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences. if after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).","input: nums = [2,2,1,1,5,3,3,5] output: 7 explanation: for the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4]=5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice. example 2: input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5] output: 13 example 3: input: nums = [1,1,1,2,2,2] output: 5 example 4: input: nums = [10,2,8,9,3,8,1,5,2,3,7,6] output: 8",`2 <= nums.length <= 10^5` `1 <= nums[i] <= 10^5`,
1225,Report Contiguous Dates,SQL Schema,Hard,https://leetcode.com/problems/report-contiguous-dates,"Amazon,Facebook",,123,,sql schema,,,
1226,The Dining Philosophers,"Five silent philosophers sit at a round table with bowls of spaghetti. Forks are placed between each pair of adjacent philosophers.

Each philosopher must alternately think and eat. However, a philosopher can only eat spaghetti when they have both left and right forks. Each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. After an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. A philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks.

Eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed.

Design a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think.

The problem statement and the image above are taken from wikipedia.org
The philosophers' ids are numbered from 0 to 4 in a clockwise order. Implement the function `void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)` where:
`philosopher` is the id of the philosopher who wants to eat.

`pickLeftFork` and `pickRightFork` are functions you can call to pick the corresponding forks of that philosopher.

`eat` is a function you can call to let the philosopher eat once he has picked both forks.

`putLeftFork` and `putRightFork` are functions you can call to put down the corresponding forks of that philosopher.

The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).

Five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. The function may be called for the same philosopher more than once, even before the last call ends.


Example 1:
Input: n = 1
Output: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]
Explanation:
n is the number of times each philosopher will call the function.

The output array describes the calls you made to the functions controlling the forks and the eat function, its format is:
output[i] = [a, b, c] (three integers)
- a is the id of a philosopher.

- b specifies the fork: {1 : left, 2 : right}.

- c specifies the operation: {1 : pick, 2 : put, 3 : eat}.


Constraints:
`1 <= n <= 60`",Medium,https://leetcode.com/problems/the-dining-philosophers,Apple,,125,,"five silent philosophers sit at a round table with bowls of spaghetti. forks are placed between each pair of adjacent philosophers. each philosopher must alternately think and eat. however, a philosopher can only eat spaghetti when they have both left and right forks. each fork can be held by only one philosopher and so a philosopher can use the fork only if it is not being used by another philosopher. after an individual philosopher finishes eating, they need to put down both forks so that the forks become available to others. a philosopher can take the fork on their right or the one on their left as they become available, but cannot start eating before getting both forks. eating is not limited by the remaining amounts of spaghetti or stomach space; an infinite supply and an infinite demand are assumed. design a discipline of behaviour (a concurrent algorithm) such that no philosopher will starve; i.e., each can forever continue to alternate between eating and thinking, assuming that no philosopher can know when others may want to eat or think. the problem statement and the image above are taken from wikipedia.org the philosophers' ids are numbered from 0 to 4 in a clockwise order. implement the function `void wantstoeat(philosopher, pickleftfork, pickrightfork, eat, putleftfork, putrightfork)` where: `philosopher` is the id of the philosopher who wants to eat. `pickleftfork` and `pickrightfork` are functions you can call to pick the corresponding forks of that philosopher. `eat` is a function you can call to let the philosopher eat once he has picked both forks. `putleftfork` and `putrightfork` are functions you can call to put down the corresponding forks of that philosopher. the philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number). five threads, each representing a philosopher, will simultaneously use one object of your class to simulate the process. the function may be called for the same philosopher more than once, even before the last call ends.","input: n = 1 output: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]] explanation: n is the number of times each philosopher will call the function. the output array describes the calls you made to the functions controlling the forks and the eat function, its format is: output[i] = [a, b, c] (three integers) - a is the id of a philosopher. - b specifies the fork: {1 : left, 2 : right}. - c specifies the operation: {1 : pick, 2 : put, 3 : eat}.",`1 <= n <= 60`,
1227,Airplane Seat Assignment Probability,"n` passengers board an airplane with exactly n` seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:
Take their own seat if it is still available, 
Pick other seats randomly when they find their seat occupied 
What is the probability that the n-th person can get his own seat?

Example 1:
Input: n = 1
Output: 1.00000
Explanation: The first person can only get the first seat.


Example 2:
Input: n = 2
Output: 0.50000
Explanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).


Constraints:
`1 <= n <= 10^5`",Medium,https://leetcode.com/problems/airplane-seat-assignment-probability,"Uber,Microstrategy","Math,Dynamic Programming,Brainteaser",254,,"n` passengers board an airplane with exactly n` seats. the first passenger has lost the ticket and picks a seat randomly. but after that, the rest of passengers will: take their own seat if it is still available, pick other seats randomly when they find their seat occupied what is the probability that the n-th person can get his own seat?",input: n = 1 output: 1.00000 explanation: the first person can only get the first seat. example 2: input: n = 2 output: 0.50000 explanation: the second person has a probability of 0.5 to get the second seat (when first person gets the first seat).,`1 <= n <= 10^5`,
1228,Missing Number In Arithmetic Progression,"In some array `arr`, the values were in arithmetic progression: the values `arr[i+1] - arr[i]` are all equal for every `0 <= i < arr.length - 1`.

Then, a value from `arr` was removed that was not the first or last value in the array.

Return the removed value.


Example 1:
Input: arr = [5,7,11,13]
Output: 9
Explanation: The previous array was [5,7,9,11,13].


Example 2:
Input: arr = [15,13,12]
Output: 14
Explanation: The previous array was [15,14,13,12].


Constraints:
`3 <= arr.length <= 1000`
`0 <= arr[i] <= 10^5`",Easy,https://leetcode.com/problems/missing-number-in-arithmetic-progression,Audible,Math,120,,"in some array `arr`, the values were in arithmetic progression: the values `arr[i+1] - arr[i]` are all equal for every `0 <= i < arr.length - 1`. then, a value from `arr` was removed that was not the first or last value in the array. return the removed value.","input: arr = [5,7,11,13] output: 9 explanation: the previous array was [5,7,9,11,13]. example 2: input: arr = [15,13,12] output: 14 explanation: the previous array was [15,14,13,12].",`3 <= arr.length <= 1000` `0 <= arr[i] <= 10^5`,
1229,Meeting Scheduler,"Given the availability time slots arrays `slots1` and `slots2` of two people and a meeting duration `duration`, return the earliest time slot that works for both of them and is of duration `duration`.

If there is no common time slot that satisfies the requirements, return an empty array.

The format of a time slot is an array of two elements `[start, end]` representing an inclusive time range from `start` to `end`.

It is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots `[start1, end1]` and `[start2, end2]` of the same person, either `start1 > end2` or `start2 > end1`.


Example 1:
Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8
Output: [60,68]

Example 2:
Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12
Output: []

Constraints:
`1 <= slots1.length, slots2.length <= 104`
`slots1[i].length, slots2[i].length == 2`
`slots1[i][0] < slots1[i][1]`
`slots2[i][0] < slots2[i][1]`
`0 <= slots1[i][j], slots2[i][j] <= 109`
`1 <= duration <= 106`",Medium,https://leetcode.com/problems/meeting-scheduler,"Amazon,DoorDash","Two Pointers,Sort,Line Sweep",359,,"given the availability time slots arrays `slots1` and `slots2` of two people and a meeting duration `duration`, return the earliest time slot that works for both of them and is of duration `duration`. if there is no common time slot that satisfies the requirements, return an empty array. the format of a time slot is an array of two elements `[start, end]` representing an inclusive time range from `start` to `end`. it is guaranteed that no two availability slots of the same person intersect with each other. that is, for any two time slots `[start1, end1]` and `[start2, end2]` of the same person, either `start1 > end2` or `start2 > end1`.","input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8 output: [60,68] example 2: input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12 output: []","`1 <= slots1.length, slots2.length <= 10^4` `slots1[i].length, slots2[i].length == 2` `slots1[i][0] < slots1[i][1]` `slots2[i][0] < slots2[i][1]` `0 <= slots1[i][j], slots2[i][j] <= 10^9` `1 <= duration <= 10^6`",
1230,Toss Strange Coins,"You have some coins.  The `i`-th coin has a probability `prob[i]` of facing heads when tossed.

Return the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.


Example 1:
Input: prob = [0.4], target = 1
Output: 0.40000

Example 2:
Input: prob = [0.5,0.5,0.5,0.5,0.5], target = 0
Output: 0.03125

Constraints:
`1 <= prob.length <= 1000`
`0 <= prob[i] <= 1`
`0 <= target ``<= prob.length`
Answers will be accepted as correct if they are within `10^-5` of the correct answer.",Medium,https://leetcode.com/problems/toss-strange-coins,Twitch,"Math,Dynamic Programming",136,,you have some coins. the `i`-th coin has a probability `prob[i]` of facing heads when tossed. return the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.,"input: prob = [0.4], target = 1 output: 0.40000 example 2: input: prob = [0.5,0.5,0.5,0.5,0.5], target = 0 output: 0.03125",`1 <= prob.length <= 1000` `0 <= prob[i] <= 1` `0 <= target ``<= prob.length` answers will be accepted as correct if they are within `10^-5` of the correct answer.,
1231,Divide Chocolate,"You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array `sweetness`.

You want to share the chocolate with your `K` friends so you start cutting the chocolate bar into `K+1` pieces using `K` cuts, each piece consists of some consecutive chunks.

Being generous, you will eat the piece with the minimum total sweetness and give the other pieces to your friends.

Find the maximum total sweetness of the piece you can get by cutting the chocolate bar optimally.


Example 1:
Input: sweetness = [1,2,3,4,5,6,7,8,9], K = 5
Output: 6
Explanation: You can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9]

Example 2:
Input: sweetness = [5,6,7,8,9,1,2,3,4], K = 8
Output: 1
Explanation: There is only one way to cut the bar into 9 pieces.


Example 3:
Input: sweetness = [1,2,2,1,2,2,1,2,2], K = 2
Output: 5
Explanation: You can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]

Constraints:
`0 <= K < sweetness.length <= 10^4`
`1 <= sweetness[i] <= 10^5`",Hard,https://leetcode.com/problems/divide-chocolate,Google,"Binary Search,Greedy",455,,"you have one chocolate bar that consists of some chunks. each chunk has its own sweetness given by the array `sweetness`. you want to share the chocolate with your `k` friends so you start cutting the chocolate bar into `k+1` pieces using `k` cuts, each piece consists of some consecutive chunks. being generous, you will eat the piece with the minimum total sweetness and give the other pieces to your friends. find the maximum total sweetness of the piece you can get by cutting the chocolate bar optimally.","input: sweetness = [1,2,3,4,5,6,7,8,9], k = 5 output: 6 explanation: you can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9] example 2: input: sweetness = [5,6,7,8,9,1,2,3,4], k = 8 output: 1 explanation: there is only one way to cut the bar into 9 pieces. example 3: input: sweetness = [1,2,2,1,2,2,1,2,2], k = 2 output: 5 explanation: you can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]",`0 <= k < sweetness.length <= 10^4` `1 <= sweetness[i] <= 10^5`,
1232,Check If It Is a Straight Line,"You are given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinate of a point. Check if these points make a straight line in the XY plane.


Example 1:
Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
Output: true

Example 2:
Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
Output: false

Constraints:
`2 <= coordinates.length <= 1000`
`coordinates[i].length == 2`
`-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4`
`coordinates` contains no duplicate point.",Easy,https://leetcode.com/problems/check-if-it-is-a-straight-line,Palantir Technologies,"Array,Math,Geometry",547,,"you are given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinate of a point. check if these points make a straight line in the xy plane.","input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]] output: true example 2: input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]] output: false","`2 <= coordinates.length <= 1000` `coordinates[i].length == 2` `-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4` `coordinates` contains no duplicate point.",
1233,Remove Sub-Folders from the Filesystem,"Given a list of folders, remove all sub-folders in those folders and return in any order the folders after removing.

If a `folder[i]` is located within another `folder[j]`, it is called a sub-folder of it.

The format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, `/leetcode` and `/leetcode/problems` are valid paths while an empty string and `/` are not.


Example 1:
Input: folder = [""/a"",""/a/b"",""/c/d"",""/c/d/e"",""/c/f""]
Output: [""/a"",""/c/d"",""/c/f""]
Explanation: Folders ""/a/b/"" is a subfolder of ""/a"" and ""/c/d/e"" is inside of folder ""/c/d"" in our filesystem.


Example 2:
Input: folder = [""/a"",""/a/b/c"",""/a/b/d""]
Output: [""/a""]
Explanation: Folders ""/a/b/c"" and ""/a/b/d/"" will be removed because they are subfolders of ""/a"".


Example 3:
Input: folder = [""/a/b/c"",""/a/b/ca"",""/a/b/d""]
Output: [""/a/b/c"",""/a/b/ca"",""/a/b/d""]

Constraints:
`1 <= folder.length <= 4 * 10^4`
`2 <= folder[i].length <= 100`
`folder[i]` contains only lowercase letters and '/'
`folder[i]` always starts with character '/'
Each folder name is unique.",Medium,https://leetcode.com/problems/remove-sub-folders-from-the-filesystem,Facebook,"Array,String",364,,"given a list of folders, remove all sub-folders in those folders and return in any order the folders after removing. if a `folder[i]` is located within another `folder[j]`, it is called a sub-folder of it. the format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase english letters. for example, `/leetcode` and `/leetcode/problems` are valid paths while an empty string and `/` are not.","input: folder = [""/a"",""/a/b"",""/c/d"",""/c/d/e"",""/c/f""] output: [""/a"",""/c/d"",""/c/f""] explanation: folders ""/a/b/"" is a subfolder of ""/a"" and ""/c/d/e"" is inside of folder ""/c/d"" in our filesystem. example 2: input: folder = [""/a"",""/a/b/c"",""/a/b/d""] output: [""/a""] explanation: folders ""/a/b/c"" and ""/a/b/d/"" will be removed because they are subfolders of ""/a"". example 3: input: folder = [""/a/b/c"",""/a/b/ca"",""/a/b/d""] output: [""/a/b/c"",""/a/b/ca"",""/a/b/d""]",`1 <= folder.length <= 4 * 10^4` `2 <= folder[i].length <= 10^0` `folder[i]` contains only lowercase letters and '/' `folder[i]` always starts with character '/' each folder name is unique.,
1234,Replace the Substring for Balanced String,"You are given a string containing only 4 kinds of characters `'Q',` `'W', 'E'` and `'R'`.

A string is said to be balanced if each of its characters appears `n/4` times where `n` is the length of the string.

Return the minimum length of the substring that can be replaced with any other string of the same length to make the original string `s` balanced.

Return 0 if the string is already balanced.


Example 1:
Input: s = ""QWER""
Output: 0
Explanation: s is already balanced.


Example 2:
Input: s = ""QQWE""
Output: 1
Explanation: We need to replace a 'Q' to 'R', so that ""RQWE"" (or ""QRWE"") is balanced.


Example 3:
Input: s = ""QQQW""
Output: 2
Explanation: We can replace the first ""QQ"" to ""ER"". 

Example 4:
Input: s = ""QQQQ""
Output: 3
Explanation: We can replace the last 3 'Q' to make s = ""QWER"".


Constraints:
`1 <= s.length <= 10^5`
`s.length` is a multiple of `4`
`s `contains only `'Q'`, `'W'`, `'E'` and `'R'`.",Medium,https://leetcode.com/problems/replace-the-substring-for-balanced-string,Accolite,"Two Pointers,String",482,,"you are given a string containing only 4 kinds of characters `'q',` `'w', 'e'` and `'r'`. a string is said to be balanced if each of its characters appears `n/4` times where `n` is the length of the string. return the minimum length of the substring that can be replaced with any other string of the same length to make the original string `s` balanced. return 0 if the string is already balanced.","input: s = ""qwer"" output: 0 explanation: s is already balanced. example 2: input: s = ""qqwe"" output: 1 explanation: we need to replace a 'q' to 'r', so that ""rqwe"" (or ""qrwe"") is balanced. example 3: input: s = ""qqqw"" output: 2 explanation: we can replace the first ""qq"" to ""er"". example 4: input: s = ""qqqq"" output: 3 explanation: we can replace the last 3 'q' to make s = ""qwer"".","`1 <= s.length <= 10^5` `s.length` is a multiple of `4` `s `contains only `'q'`, `'w'`, `'e'` and `'r'`.",
1235,Maximum Profit in Job Scheduling,"We have `n` jobs, where every job is scheduled to be done from `startTime[i]` to `endTime[i]`, obtaining a profit of `profit[i]`.

You're given the `startTime`, `endTime` and `profit` arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time `X` you will be able to start another job that starts at time `X`.


Example 1:
Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.


Example 2:
Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.


Example 3:
Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
Output: 6

Constraints:
`1 <= startTime.length == endTime.length == profit.length <= 5 * 104`
`1 <= startTime[i] < endTime[i] <= 109`
`1 <= profit[i] <= 104`",Hard,https://leetcode.com/problems/maximum-profit-in-job-scheduling,"LinkedIn,DoorDash,ByteDance,Amazon,Cisco,Databricks,Bloomberg,Dunzo,Swiggy","Binary Search,Dynamic Programming,Sort",1183,,"we have `n` jobs, where every job is scheduled to be done from `starttime[i]` to `endtime[i]`, obtaining a profit of `profit[i]`. you're given the `starttime`, `endtime` and `profit` arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range. if you choose a job that ends at time `x` you will be able to start another job that starts at time `x`.","input: starttime = [1,2,3,3], endtime = [3,4,5,6], profit = [50,10,40,70] output: 120 explanation: the subset chosen is the first and fourth job. time range [1-3]+[3-6] , we get profit of 120 = 50 + 70. example 2: input: starttime = [1,2,3,4,6], endtime = [3,5,10,6,9], profit = [20,20,100,70,60] output: 150 explanation: the subset chosen is the first, fourth and fifth job. profit obtained 150 = 20 + 70 + 60. example 3: input: starttime = [1,1,1], endtime = [2,3,4], profit = [5,6,4] output: 6",`1 <= starttime.length == endtime.length == profit.length <= 5 * 10^4` `1 <= starttime[i] < endtime[i] <= 10^9` `1 <= profit[i] <= 10^4`,
1236,Web Crawler,"Given a url `startUrl` and an interface `HtmlParser`, implement a web crawler to crawl all links that are under the same hostname as `startUrl`. 
Return all urls obtained by your web crawler in any order.

Your crawler should:
Start from the page: `startUrl`
Call `HtmlParser.getUrls(url)` to get all urls from a webpage of given url.

Do not crawl the same link twice.

Explore only the links that are under the same hostname as `startUrl`.

As shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use http protocol without any port specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname.

The `HtmlParser` interface is defined as such: 
interface HtmlParser {
  // Return a list of all urls from a webpage of given url.

  public List<String> getUrls(String url);
}
Below are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls`, edges` and startUrl`. Notice that you will only have access to startUrl` in your code, while urls` and edges` are not directly accessible to you in code.


Example 1:
Input:
urls = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com"",
  ""http://news.yahoo.com/us""
]
edges = [[2,0],[2,1],[3,2],[3,1],[0,4]]
startUrl = ""http://news.yahoo.com/news/topics/""
Output: [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.yahoo.com/us""
]

Example 2:
Input: 
urls = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com""
]
edges = [[0,2],[2,1],[3,2],[3,1],[3,0]]
startUrl = ""http://news.google.com""
Output: [""http://news.google.com""]
Explanation: The startUrl links to all other pages that do not share the same hostname.


Constraints:
`1 <= urls.length <= 1000`
`1 <= urls[i].length <= 300`
`startUrl` is one of the `urls`.

Hostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits  from '0' to '9' and the hyphen-minus character ('-').

The hostname may not start or end with the hyphen-minus character ('-'). 
See:  https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames
You may assume there're no duplicates in url library.",Medium,https://leetcode.com/problems/web-crawler,Amazon,"Depth-first Search,Breadth-first Search",125,"[Web Crawler Multithreaded, /problems/web-crawler-multithreaded/, Medium]","given a url `starturl` and an interface `htmlparser`, implement a web crawler to crawl all links that are under the same hostname as `starturl`. return all urls obtained by your web crawler in any order. your crawler should: start from the page: `starturl` call `htmlparser.geturls(url)` to get all urls from a webpage of given url. do not crawl the same link twice. explore only the links that are under the same hostname as `starturl`. as shown in the example url above, the hostname is `example.org`. for simplicity sake, you may assume all urls use http protocol without any port specified. for example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname. the `htmlparser` interface is defined as such: interface htmlparser { // return a list of all urls from a webpage of given url. public list<string> geturls(string url); } below are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls`, edges` and starturl`. notice that you will only have access to starturl` in your code, while urls` and edges` are not directly accessible to you in code.","input: urls = [ ""http://news.yahoo.com"", ""http://news.yahoo.com/news"", ""http://news.yahoo.com/news/topics/"", ""http://news.google.com"", ""http://news.yahoo.com/us"" ] edges = [[2,0],[2,1],[3,2],[3,1],[0,4]] starturl = ""http://news.yahoo.com/news/topics/"" output: [ ""http://news.yahoo.com"", ""http://news.yahoo.com/news"", ""http://news.yahoo.com/news/topics/"", ""http://news.yahoo.com/us"" ] example 2: input: urls = [ ""http://news.yahoo.com"", ""http://news.yahoo.com/news"", ""http://news.yahoo.com/news/topics/"", ""http://news.google.com"" ] edges = [[0,2],[2,1],[3,2],[3,1],[3,0]] starturl = ""http://news.google.com"" output: [""http://news.google.com""] explanation: the starturl links to all other pages that do not share the same hostname.","`1 <= urls.length <= 1000` `1 <= urls[i].length <= 300` `starturl` is one of the `urls`. hostname label must be from 1 to 63 characters long, including the dots, may contain only the ascii letters from 'a' to 'z', digits from '0' to '9' and the hyphen-minus character ('-'). the hostname may not start or end with the hyphen-minus character ('-'). see: https://en.wikipedia.org/wiki/hostname#restrictions_on_valid_hostnames you may assume there're no duplicates in url library.",
1237,Find Positive Integer Solution for a Given Equation,"Given a callable function `f(x, y)` with a hidden formula and a value `z`, reverse engineer the formula and return all positive integer pairs `x` and `y` where `f(x,y) == z`. You may return the pairs in any order.

While the exact formula is hidden, the function is monotonically increasing, i.e.:
`f(x, y) < f(x + 1, y)`
`f(x, y) < f(x, y + 1)`
The function interface is defined like this:
interface CustomFunction {
public:
  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.

  int f(int x, int y);
};
We will judge your solution as follows:
The judge has a list of `9` hidden implementations of `CustomFunction`, along with a way to generate an answer key of all valid pairs for a specific `z`.

The judge will receive two inputs: a `function_id` (to determine which implementation to test your code with), and the target `z`.

The judge will call your `findSolution` and compare your results with the answer key.

If your results match the answer key, your solution will be `Accepted`.


Example 1:
Input: function_id = 1, z = 5
Output: [[1,4],[2,3],[3,2],[4,1]]
Explanation: The hidden formula for function_id = 1 is f(x, y) = x + y.

The following positive integer values of x and y make f(x, y) equal to 5:
x=1, y=4 -> f(1, 4) = 1 + 4 = 5.

x=2, y=3 -> f(2, 3) = 2 + 3 = 5.

x=3, y=2 -> f(3, 2) = 3 + 2 = 5.

x=4, y=1 -> f(4, 1) = 4 + 1 = 5.


Example 2:
Input: function_id = 2, z = 5
Output: [[1,5],[5,1]]
Explanation: The hidden formula for function_id = 2 is f(x, y) = x * y.

The following positive integer values of x and y make f(x, y) equal to 5:
x=1, y=5 -> f(1, 5) = 1 * 5 = 5.

x=5, y=1 -> f(5, 1) = 5 * 1 = 5.


Constraints:
`1 <= function_id <= 9`
`1 <= z <= 100`
It is guaranteed that the solutions of `f(x, y) == z` will be in the range `1 <= x, y <= 1000`.

It is also guaranteed that `f(x, y)` will fit in 32 bit signed integer if `1 <= x, y <= 1000`.",Medium,https://leetcode.com/problems/find-positive-integer-solution-for-a-given-equation,Google,"Math,Binary Search",230,,"given a callable function `f(x, y)` with a hidden formula and a value `z`, reverse engineer the formula and return all positive integer pairs `x` and `y` where `f(x,y) == z`. you may return the pairs in any order. while the exact formula is hidden, the function is monotonically increasing, i.e.: `f(x, y) < f(x + 1, y)` `f(x, y) < f(x, y + 1)` the function interface is defined like this: interface customfunction { public: // returns some positive integer f(x, y) for two positive integers x and y based on a formula. int f(int x, int y); }; we will judge your solution as follows: the judge has a list of `9` hidden implementations of `customfunction`, along with a way to generate an answer key of all valid pairs for a specific `z`. the judge will receive two inputs: a `function_id` (to determine which implementation to test your code with), and the target `z`. the judge will call your `findsolution` and compare your results with the answer key. if your results match the answer key, your solution will be `accepted`.","input: function_id = 1, z = 5 output: [[1,4],[2,3],[3,2],[4,1]] explanation: the hidden formula for function_id = 1 is f(x, y) = x + y. the following positive integer values of x and y make f(x, y) equal to 5: x=1, y=4 -> f(1, 4) = 1 + 4 = 5. x=2, y=3 -> f(2, 3) = 2 + 3 = 5. x=3, y=2 -> f(3, 2) = 3 + 2 = 5. x=4, y=1 -> f(4, 1) = 4 + 1 = 5. example 2: input: function_id = 2, z = 5 output: [[1,5],[5,1]] explanation: the hidden formula for function_id = 2 is f(x, y) = x * y. the following positive integer values of x and y make f(x, y) equal to 5: x=1, y=5 -> f(1, 5) = 1 * 5 = 5. x=5, y=1 -> f(5, 1) = 5 * 1 = 5.","`1 <= function_id <= 9` `1 <= z <= 10^0` it is guaranteed that the solutions of `f(x, y) == z` will be in the range `1 <= x, y <= 1000`. it is also guaranteed that `f(x, y)` will fit in 32 bit signed integer if `1 <= x, y <= 1000`.",
1238,Circular Permutation in Binary Representation,"Given 2 integers `n` and `start`. Your task is return any permutation `p` of `(0,1,2.....,2^n -1) `such that :
`p[0] = start`
`p[i]` and `p[i+1]` differ by only one bit in their binary representation.

`p[0]` and `p[2^n -1]` must also differ by only one bit in their binary representation.


Example 1:
Input: n = 2, start = 3
Output: [3,2,0,1]
Explanation: The binary representation of the permutation is (11,10,00,01). 
All the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]

Example 2:
Input: n = 3, start = 2
Output: [2,6,7,5,4,0,1,3]
Explanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).


Constraints:
`1 <= n <= 16`
`0 <= start < 2 ^ n`",Medium,https://leetcode.com/problems/circular-permutation-in-binary-representation,"Walmart,Walmart Labs",Math,139,,"given 2 integers `n` and `start`. your task is return any permutation `p` of `(0,1,2.....,2^n -1) `such that : `p[0] = start` `p[i]` and `p[i+1]` differ by only one bit in their binary representation. `p[0]` and `p[2^n -1]` must also differ by only one bit in their binary representation.","input: n = 2, start = 3 output: [3,2,0,1] explanation: the binary representation of the permutation is (11,10,00,01). all the adjacent element differ by one bit. another valid permutation is [3,1,0,2] example 2: input: n = 3, start = 2 output: [2,6,7,5,4,0,1,3] explanation: the binary representation of the permutation is (010,110,111,101,100,000,001,011).",`1 <= n <= 16` `0 <= start < 2 ^ n`,
1239,Maximum Length of a Concatenated String with Unique Characters,"Given an array of strings `arr`. String `s` is a concatenation of a sub-sequence of `arr` which have unique characters.

Return the maximum possible length of `s`.


Example 1:
Input: arr = [""un"",""iq"",""ue""]
Output: 4
Explanation: All possible concatenations are """",""un"",""iq"",""ue"",""uniq"" and ""ique"".

Maximum length is 4.


Example 2:
Input: arr = [""cha"",""r"",""act"",""ers""]
Output: 6
Explanation: Possible solutions are ""chaers"" and ""acters"".


Example 3:
Input: arr = [""abcdefghijklmnopqrstuvwxyz""]
Output: 26

Constraints:
`1 <= arr.length <= 16`
`1 <= arr[i].length <= 26`
`arr[i]` contains only lower case English letters.",Medium,https://leetcode.com/problems/maximum-length-of-a-concatenated-string-with-unique-characters,"Tesla,Microsoft,Oracle,DiDi","Backtracking,Bit Manipulation",855,,given an array of strings `arr`. string `s` is a concatenation of a sub-sequence of `arr` which have unique characters. return the maximum possible length of `s`.,"input: arr = [""un"",""iq"",""ue""] output: 4 explanation: all possible concatenations are """",""un"",""iq"",""ue"",""uniq"" and ""ique"". maximum length is 4. example 2: input: arr = [""cha"",""r"",""act"",""ers""] output: 6 explanation: possible solutions are ""chaers"" and ""acters"". example 3: input: arr = [""abcdefghijklmnopqrstuvwxyz""] output: 26",`1 <= arr.length <= 16` `1 <= arr[i].length <= 26` `arr[i]` contains only lower case english letters.,
1240,Tiling a Rectangle with the Fewest Squares,"Given a rectangle of size `n` x `m`, find the minimum number of integer-sided squares that tile the rectangle.


Example 1:
Input: n = 2, m = 3
Output: 3
Explanation: `3` squares are necessary to cover the rectangle.

`2` (squares of `1x1`)
`1` (square of `2x2`)

Example 2:
Input: n = 5, m = 8
Output: 5

Example 3:
Input: n = 11, m = 13
Output: 6

Constraints:
`1 <= n <= 13`
`1 <= m <= 13`",Hard,https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares,Google,"Dynamic Programming,Backtracking",293,,"given a rectangle of size `n` x `m`, find the minimum number of integer-sided squares that tile the rectangle.","input: n = 2, m = 3 output: 3 explanation: `3` squares are necessary to cover the rectangle. `2` (squares of `1x1`) `1` (square of `2x2`) example 2: input: n = 5, m = 8 output: 5 example 3: input: n = 11, m = 13 output: 6",`1 <= n <= 13` `1 <= m <= 13`,
1241,Number of Comments per Post,SQL Schema,Easy,https://leetcode.com/problems/number-of-comments-per-post,Facebook,,96,,sql schema,,,
1242,Web Crawler Multithreaded,"Given a url `startUrl` and an interface `HtmlParser`, implement a Multi-threaded web crawler to crawl all links that are under the same hostname as `startUrl`. 
Return all urls obtained by your web crawler in any order.

Your crawler should:
Start from the page: `startUrl`
Call `HtmlParser.getUrls(url)` to get all urls from a webpage of given url.

Do not crawl the same link twice.

Explore only the links that are under the same hostname as `startUrl`.

As shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use http protocol without any port specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname.

The `HtmlParser` interface is defined as such: 
interface HtmlParser {
  // Return a list of all urls from a webpage of given url.

  // This is a blocking call, that means it will do HTTP request and return when this request is finished.

  public List<String> getUrls(String url);
}
Note that `getUrls(String url)` simulates performing a HTTP request. You can treat it as a blocking function call which waits for a HTTP request to finish. It is guaranteed that `getUrls(String url)` will return the urls within 15ms.  Single-threaded solutions will exceed the time limit so, can your multi-threaded web crawler do better?
Below are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls`, edges` and startUrl`. Notice that you will only have access to startUrl` in your code, while urls` and edges` are not directly accessible to you in code.

Follow up:
Assume we have 10,000 nodes and 1 billion URLs to crawl. We will deploy the same software onto each node. The software can know about all the nodes. We have to minimize communication between machines and make sure each node does equal amount of work. How would your web crawler design change?
What if one node fails or does not work?
How do you know when the crawler is done?

Example 1:
Input:
urls = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com"",
  ""http://news.yahoo.com/us""
]
edges = [[2,0],[2,1],[3,2],[3,1],[0,4]]
startUrl = ""http://news.yahoo.com/news/topics/""
Output: [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.yahoo.com/us""
]

Example 2:
Input: 
urls = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com""
]
edges = [[0,2],[2,1],[3,2],[3,1],[3,0]]
startUrl = ""http://news.google.com""
Output: [""http://news.google.com""]
Explanation: The startUrl links to all other pages that do not share the same hostname.


Constraints:
`1 <= urls.length <= 1000`
`1 <= urls[i].length <= 300`
`startUrl` is one of the `urls`.

Hostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits from '0' to '9' and the hyphen-minus character ('-').

The hostname may not start or end with the hyphen-minus character ('-'). 
See:  https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames
You may assume there're no duplicates in url library.",Medium,https://leetcode.com/problems/web-crawler-multithreaded,"Databricks,Dropbox","Depth-first Search,Breadth-first Search",262,"[Web Crawler, /problems/web-crawler/, Medium]","given a url `starturl` and an interface `htmlparser`, implement a multi-threaded web crawler to crawl all links that are under the same hostname as `starturl`. return all urls obtained by your web crawler in any order. your crawler should: start from the page: `starturl` call `htmlparser.geturls(url)` to get all urls from a webpage of given url. do not crawl the same link twice. explore only the links that are under the same hostname as `starturl`. as shown in the example url above, the hostname is `example.org`. for simplicity sake, you may assume all urls use http protocol without any port specified. for example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname. the `htmlparser` interface is defined as such: interface htmlparser { // return a list of all urls from a webpage of given url. // this is a blocking call, that means it will do http request and return when this request is finished. public list<string> geturls(string url); } note that `geturls(string url)` simulates performing a http request. you can treat it as a blocking function call which waits for a http request to finish. it is guaranteed that `geturls(string url)` will return the urls within 15ms. single-threaded solutions will exceed the time limit so, can your multi-threaded web crawler do better? below are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls`, edges` and starturl`. notice that you will only have access to starturl` in your code, while urls` and edges` are not directly accessible to you in code.","input: urls = [ ""http://news.yahoo.com"", ""http://news.yahoo.com/news"", ""http://news.yahoo.com/news/topics/"", ""http://news.google.com"", ""http://news.yahoo.com/us"" ] edges = [[2,0],[2,1],[3,2],[3,1],[0,4]] starturl = ""http://news.yahoo.com/news/topics/"" output: [ ""http://news.yahoo.com"", ""http://news.yahoo.com/news"", ""http://news.yahoo.com/news/topics/"", ""http://news.yahoo.com/us"" ] example 2: input: urls = [ ""http://news.yahoo.com"", ""http://news.yahoo.com/news"", ""http://news.yahoo.com/news/topics/"", ""http://news.google.com"" ] edges = [[0,2],[2,1],[3,2],[3,1],[3,0]] starturl = ""http://news.google.com"" output: [""http://news.google.com""] explanation: the starturl links to all other pages that do not share the same hostname.","`1 <= urls.length <= 1000` `1 <= urls[i].length <= 300` `starturl` is one of the `urls`. hostname label must be from 1 to 63 characters long, including the dots, may contain only the ascii letters from 'a' to 'z', digits from '0' to '9' and the hyphen-minus character ('-'). the hostname may not start or end with the hyphen-minus character ('-'). see: https://en.wikipedia.org/wiki/hostname#restrictions_on_valid_hostnames you may assume there're no duplicates in url library.","assume we have 10,000 nodes and 1 billion urls to crawl. we will deploy the same software onto each node. the software can know about all the nodes. we have to minimize communication between machines and make sure each node does equal amount of work. how would your web crawler design change? what if one node fails or does not work? how do you know when the crawler is done? example 1: input: urls = [ ""http://news.yahoo.com"", ""http://news.yahoo.com/news"", ""http://news.yahoo.com/news/topics/"", ""http://news.google.com"", ""http://news.yahoo.com/us"" ] edges = [[2,0],[2,1],[3,2],[3,1],[0,4]] starturl = ""http://news.yahoo.com/news/topics/"" output: [ ""http://news.yahoo.com"", ""http://news.yahoo.com/news"", ""http://news.yahoo.com/news/topics/"", ""http://news.yahoo.com/us"" ] example 2: input: urls = [ ""http://news.yahoo.com"", ""http://news.yahoo.com/news"", ""http://news.yahoo.com/news/topics/"", ""http://news.google.com"" ] edges = [[0,2],[2,1],[3,2],[3,1],[3,0]] starturl = ""http://news.google.com"" output: [""http://news.google.com""] explanation: the starturl links to all other pages that do not share the same hostname. constraints: `1 <= urls.length <= 1000` `1 <= urls[i].length <= 300` `starturl` is one of the `urls`. hostname label must be from 1 to 63 characters long, including the dots, may contain only the ascii letters from 'a' to 'z', digits from '0' to '9' and the hyphen-minus character ('-'). the hostname may not start or end with the hyphen-minus character ('-'). see: https://en.wikipedia.org/wiki/hostname#restrictions_on_valid_hostnames you may assume there're no duplicates in url library."
1243,Array Transformation,"Given an initial array `arr`, every day you produce a new array using the array of the previous day.

On the `i`-th day, you do the following operations on the array of day `i-1` to produce the array of day `i`:
If an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.

If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.

The first and last elements never change.

After some days, the array does not change. Return that final array.


Example 1:
Input: arr = [6,2,3,4]
Output: [6,3,3,4]
Explanation: 
On the first day, the array is changed from [6,2,3,4] to [6,3,3,4].

No more operations can be done to this array.


Example 2:
Input: arr = [1,6,3,4,3,5]
Output: [1,4,4,4,4,5]
Explanation: 
On the first day, the array is changed from [1,6,3,4,3,5] to [1,5,4,3,4,5].

On the second day, the array is changed from [1,5,4,3,4,5] to [1,4,4,4,4,5].

No more operations can be done to this array.


Constraints:
`3 <= arr.length <= 100`
`1 <= arr[i] <= 100`",Easy,https://leetcode.com/problems/array-transformation,Virtu Financial,Array,80,,"given an initial array `arr`, every day you produce a new array using the array of the previous day. on the `i`-th day, you do the following operations on the array of day `i-1` to produce the array of day `i`: if an element is smaller than both its left neighbor and its right neighbor, then this element is incremented. if an element is bigger than both its left neighbor and its right neighbor, then this element is decremented. the first and last elements never change. after some days, the array does not change. return that final array.","input: arr = [6,2,3,4] output: [6,3,3,4] explanation: on the first day, the array is changed from [6,2,3,4] to [6,3,3,4]. no more operations can be done to this array. example 2: input: arr = [1,6,3,4,3,5] output: [1,4,4,4,4,5] explanation: on the first day, the array is changed from [1,6,3,4,3,5] to [1,5,4,3,4,5]. on the second day, the array is changed from [1,5,4,3,4,5] to [1,4,4,4,4,5]. no more operations can be done to this array.",`3 <= arr.length <= 10^0` `1 <= arr[i] <= 10^0`,
1244,Design A Leaderboard,"Design a Leaderboard class, which has 3 functions:
`addScore(playerId, score)`: Update the leaderboard by adding `score` to the given player's score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given `score`.

`top(K)`: Return the score sum of the top `K` players.

`reset(playerId)`: Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function.

Initially, the leaderboard is empty.


Example 1:
Input: 
[""Leaderboard"",""addScore"",""addScore"",""addScore"",""addScore"",""addScore"",""top"",""reset"",""reset"",""addScore"",""top""]
[[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]
Output: 
[null,null,null,null,null,null,73,null,null,null,141]
Explanation: 
Leaderboard leaderboard = new Leaderboard ();
leaderboard.addScore(1,73);   // leaderboard = [[1,73]];
leaderboard.addScore(2,56);   // leaderboard = [[1,73],[2,56]];
leaderboard.addScore(3,39);   // leaderboard = [[1,73],[2,56],[3,39]];
leaderboard.addScore(4,51);   // leaderboard = [[1,73],[2,56],[3,39],[4,51]];
leaderboard.addScore(5,4);    // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];
leaderboard.top(1);           // returns 73;
leaderboard.reset(1);         // leaderboard = [[2,56],[3,39],[4,51],[5,4]];
leaderboard.reset(2);         // leaderboard = [[3,39],[4,51],[5,4]];
leaderboard.addScore(2,51);   // leaderboard = [[2,51],[3,39],[4,51],[5,4]];
leaderboard.top(3);           // returns 141 = 51 + 51 + 39;

Constraints:
`1 <= playerId, K <= 10000`
It's guaranteed that `K` is less than or equal to the current number of players.

`1 <= score <= 100`
There will be at most `1000` function calls.",Medium,https://leetcode.com/problems/design-a-leaderboard,"Bloomberg,Google","Hash Table,Sort,Design",246,,"design a leaderboard class, which has 3 functions: `addscore(playerid, score)`: update the leaderboard by adding `score` to the given player's score. if there is no player with such id in the leaderboard, add him to the leaderboard with the given `score`. `top(k)`: return the score sum of the top `k` players. `reset(playerid)`: reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). it is guaranteed that the player was added to the leaderboard before calling this function. initially, the leaderboard is empty.","input: [""leaderboard"",""addscore"",""addscore"",""addscore"",""addscore"",""addscore"",""top"",""reset"",""reset"",""addscore"",""top""] [[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]] output: [null,null,null,null,null,null,73,null,null,null,141] explanation: leaderboard leaderboard = new leaderboard (); leaderboard.addscore(1,73); // leaderboard = [[1,73]]; leaderboard.addscore(2,56); // leaderboard = [[1,73],[2,56]]; leaderboard.addscore(3,39); // leaderboard = [[1,73],[2,56],[3,39]]; leaderboard.addscore(4,51); // leaderboard = [[1,73],[2,56],[3,39],[4,51]]; leaderboard.addscore(5,4); // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]]; leaderboard.top(1); // returns 73; leaderboard.reset(1); // leaderboard = [[2,56],[3,39],[4,51],[5,4]]; leaderboard.reset(2); // leaderboard = [[3,39],[4,51],[5,4]]; leaderboard.addscore(2,51); // leaderboard = [[2,51],[3,39],[4,51],[5,4]]; leaderboard.top(3); // returns 141 = 51 + 51 + 39;","`1 <= playerid, k <= 10000` it's guaranteed that `k` is less than or equal to the current number of players. `1 <= score <= 10^0` there will be at most `1000` function calls.",
1245,Tree Diameter,"Given an undirected tree, return its diameter: the number of edges in a longest path in that tree.

The tree is given as an array of `edges` where `edges[i] = [u, v]` is a bidirectional edge between nodes `u` and `v`.  Each node has labels in the set `{0, 1, ..., edges.length}`.


Example 1:
Input: edges = [[0,1],[0,2]]
Output: 2
Explanation: 
A longest path of the tree is the path 1 - 0 - 2.


Example 2:
Input: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]
Output: 4
Explanation: 
A longest path of the tree is the path 3 - 2 - 1 - 4 - 5.


Constraints:
`0 <= edges.length < 10^4`
`edges[i][0] != edges[i][1]`
`0 <= edges[i][j] <= edges.length`
The given edges form an undirected tree.",Medium,https://leetcode.com/problems/tree-diameter,Google,"Tree,Depth-first Search,Breadth-first Search",454,"[Count Subtrees With Max Distance Between Cities, /problems/count-subtrees-with-max-distance-between-cities/, Hard]","given an undirected tree, return its diameter: the number of edges in a longest path in that tree. the tree is given as an array of `edges` where `edges[i] = [u, v]` is a bidirectional edge between nodes `u` and `v`. each node has labels in the set `{0, 1, ..., edges.length}`.","input: edges = [[0,1],[0,2]] output: 2 explanation: a longest path of the tree is the path 1 - 0 - 2. example 2: input: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]] output: 4 explanation: a longest path of the tree is the path 3 - 2 - 1 - 4 - 5.",`0 <= edges.length < 10^4` `edges[i][0] != edges[i][1]` `0 <= edges[i][j] <= edges.length` the given edges form an undirected tree.,
1246,Palindrome Removal,"Given an integer array `arr`, in one move you can select a palindromic subarray `arr[i], arr[i+1], ..., arr[j]` where `i <= j`, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.

Return the minimum number of moves needed to remove all numbers from the array.


Example 1:
Input: arr = [1,2]
Output: 2

Example 2:
Input: arr = [1,3,4,1,5]
Output: 3
Explanation: Remove [4] then remove [1,3,1] then remove [5].


Constraints:
`1 <= arr.length <= 100`
`1 <= arr[i] <= 20`",Hard,https://leetcode.com/problems/palindrome-removal,Microsoft,Dynamic Programming,222,,"given an integer array `arr`, in one move you can select a palindromic subarray `arr[i], arr[i+1], ..., arr[j]` where `i <= j`, and remove that subarray from the given array. note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal. return the minimum number of moves needed to remove all numbers from the array.","input: arr = [1,2] output: 2 example 2: input: arr = [1,3,4,1,5] output: 3 explanation: remove [4] then remove [1,3,1] then remove [5].",`1 <= arr.length <= 10^0` `1 <= arr[i] <= 20`,
1247,Minimum Swaps to Make Strings Equal,"You are given two strings `s1` and `s2` of equal length consisting of letters `""x""` and `""y""` only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap `s1[i]` and `s2[j]`.

Return the minimum number of swaps required to make `s1` and `s2` equal, or return `-1` if it is impossible to do so.


Example 1:
Input: s1 = ""xx"", s2 = ""yy""
Output: 1
Explanation: 
Swap s1[0] and s2[1], s1 = ""yx"", s2 = ""yx"".


Example 2: 
Input: s1 = ""xy"", s2 = ""yx""
Output: 2
Explanation: 
Swap s1[0] and s2[0], s1 = ""yy"", s2 = ""xx"".

Swap s1[0] and s2[1], s1 = ""xy"", s2 = ""xy"".

Note that you can't swap s1[0] and s1[1] to make s1 equal to ""yx"", cause we can only swap chars in different strings.


Example 3:
Input: s1 = ""xx"", s2 = ""xy""
Output: -1

Example 4:
Input: s1 = ""xxyyxyxyxx"", s2 = ""xyyxyxxxyx""
Output: 4

Constraints:
`1 <= s1.length, s2.length <= 1000`
`s1, s2` only contain `'x'` or `'y'`.",Medium,https://leetcode.com/problems/minimum-swaps-to-make-strings-equal,Bloomberg,"String,Greedy",496,"[Determine if Two Strings Are Close, /problems/determine-if-two-strings-are-close/, Medium]","you are given two strings `s1` and `s2` of equal length consisting of letters `""x""` and `""y""` only. your task is to make these two strings equal to each other. you can swap any two characters that belong to different strings, which means: swap `s1[i]` and `s2[j]`. return the minimum number of swaps required to make `s1` and `s2` equal, or return `-1` if it is impossible to do so.","input: s1 = ""xx"", s2 = ""yy"" output: 1 explanation: swap s1[0] and s2[1], s1 = ""yx"", s2 = ""yx"". example 2: input: s1 = ""xy"", s2 = ""yx"" output: 2 explanation: swap s1[0] and s2[0], s1 = ""yy"", s2 = ""xx"". swap s1[0] and s2[1], s1 = ""xy"", s2 = ""xy"". note that you can't swap s1[0] and s1[1] to make s1 equal to ""yx"", cause we can only swap chars in different strings. example 3: input: s1 = ""xx"", s2 = ""xy"" output: -1 example 4: input: s1 = ""xxyyxyxyxx"", s2 = ""xyyxyxxxyx"" output: 4","`1 <= s1.length, s2.length <= 1000` `s1, s2` only contain `'x'` or `'y'`.",
1248,Count Number of Nice Subarrays,"Given an array of integers `nums` and an integer `k`. A continuous subarray is called nice if there are `k` odd numbers on it.

Return the number of nice sub-arrays.


Example 1:
Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].


Example 2:
Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.


Example 3:
Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16

Constraints:
`1 <= nums.length <= 50000`
`1 <= nums[i] <= 10^5`
`1 <= k <= nums.length`",Medium,https://leetcode.com/problems/count-number-of-nice-subarrays,Citadel,Two Pointers,810,,given an array of integers `nums` and an integer `k`. a continuous subarray is called nice if there are `k` odd numbers on it. return the number of nice sub-arrays.,"input: nums = [1,1,2,1,1], k = 3 output: 2 explanation: the only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1]. example 2: input: nums = [2,4,6], k = 1 output: 0 explanation: there is no odd numbers in the array. example 3: input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2 output: 16",`1 <= nums.length <= 50000` `1 <= nums[i] <= 10^5` `1 <= k <= nums.length`,
1249,Minimum Remove to Make Valid Parentheses,"Given a string s of `'('` , `')'` and lowercase English characters. 
Your task is to remove the minimum number of parentheses ( `'('` or `')'`, in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:
It is the empty string, contains only lowercase characters, or
It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or
It can be written as `(A)`, where `A` is a valid string.


Example 1:
Input: s = ""lee(t(c)o)de)""
Output: ""lee(t(c)o)de""
Explanation: ""lee(t(co)de)"" , ""lee(t(c)ode)"" would also be accepted.


Example 2:
Input: s = ""a)b(c)d""
Output: ""ab(c)d""

Example 3:
Input: s = ""))((""
Output: """"
Explanation: An empty string is also valid.


Example 4:
Input: s = ""(a(b(c)d)""
Output: ""a(b(c)d)""

Constraints:
`1 <= s.length <= 10^5`
`s[i]` is one of  `'('` , `')'` and lowercase English letters`.`",Medium,https://leetcode.com/problems/minimum-remove-to-make-valid-parentheses,"Facebook,ByteDance,Bloomberg,Amazon,Goldman Sachs,LinkedIn,Apple","String,Stack",1968,,"given a string s of `'('` , `')'` and lowercase english characters. your task is to remove the minimum number of parentheses ( `'('` or `')'`, in any positions ) so that the resulting parentheses string is valid and return any valid string. formally, a parentheses string is valid if and only if: it is the empty string, contains only lowercase characters, or it can be written as `ab` (`a` concatenated with `b`), where `a` and `b` are valid strings, or it can be written as `(a)`, where `a` is a valid string.","input: s = ""lee(t(c)o)de)"" output: ""lee(t(c)o)de"" explanation: ""lee(t(co)de)"" , ""lee(t(c)ode)"" would also be accepted. example 2: input: s = ""a)b(c)d"" output: ""ab(c)d"" example 3: input: s = ""))(("" output: """" explanation: an empty string is also valid. example 4: input: s = ""(a(b(c)d)"" output: ""a(b(c)d)""","`1 <= s.length <= 10^5` `s[i]` is one of `'('` , `')'` and lowercase english letters`.`",
1250,Check If It Is a Good Array,"Given an array `nums` of positive integers. Your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers. The array is said to be good if you can obtain a sum of `1` from the array by any possible subset and multiplicand.

Return `True` if the array is good otherwise return `False`.


Example 1:
Input: nums = [12,5,7,23]
Output: true
Explanation: Pick numbers 5 and 7.

5*3 + 7*(-2) = 1

Example 2:
Input: nums = [29,6,10]
Output: true
Explanation: Pick numbers 29, 6 and 10.

29*1 + 6*(-3) + 10*(-1) = 1

Example 3:
Input: nums = [3,6]
Output: false

Constraints:
`1 <= nums.length <= 10^5`
`1 <= nums[i] <= 10^9`",Hard,https://leetcode.com/problems/check-if-it-is-a-good-array,Dropbox,Math,134,,"given an array `nums` of positive integers. your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers. the array is said to be good if you can obtain a sum of `1` from the array by any possible subset and multiplicand. return `true` if the array is good otherwise return `false`.","input: nums = [12,5,7,23] output: true explanation: pick numbers 5 and 7. 5*3 + 7*(-2) = 1 example 2: input: nums = [29,6,10] output: true explanation: pick numbers 29, 6 and 10. 29*1 + 6*(-3) + 10*(-1) = 1 example 3: input: nums = [3,6] output: false",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 10^9`,
1251,Average Selling Price,SQL Schema,Easy,https://leetcode.com/problems/average-selling-price,Amazon,,146,,sql schema,,,
1252,Cells with Odd Values in a Matrix,"There is an `m x n` matrix that is initialized to all `0`'s. There is also a 2D array `indices` where each `indices[i] = [ri, ci]` represents a 0-indexed location to perform some increment operations on the matrix.

For each location `indices[i]`, do both of the following:
Increment all the cells on row `ri`.

Increment all the cells on column `ci`.

Given `m`, `n`, and `indices`, return the number of odd-valued cells in the matrix after applying the increment to all locations in `indices`.


Example 1:
Input: m = 2, n = 3, indices = [[0,1],[1,1]]
Output: 6
Explanation: Initial matrix = [[0,0,0],[0,0,0]].

After applying first increment it becomes [[1,2,1],[0,1,0]].

The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.


Example 2:
Input: m = 2, n = 2, indices = [[1,1],[0,0]]
Output: 0
Explanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.


Constraints:
`1 <= m, n <= 50`
`1 <= indices.length <= 100`
`0 <= ri < m`
`0 <= ci < n`
Follow up: Could you solve this in `O(n + m + indices.length)` time with only `O(n + m)` extra space?",Easy,https://leetcode.com/problems/cells-with-odd-values-in-a-matrix,,,448,,"there is an `m x n` matrix that is initialized to all `0`'s. there is also a 2d array `indices` where each `indices[i] = [ri, ci]` represents a 0-indexed location to perform some increment operations on the matrix. for each location `indices[i]`, do both of the following: increment all the cells on row `ri`. increment all the cells on column `ci`. given `m`, `n`, and `indices`, return the number of odd-valued cells in the matrix after applying the increment to all locations in `indices`.","input: m = 2, n = 3, indices = [[0,1],[1,1]] output: 6 explanation: initial matrix = [[0,0,0],[0,0,0]]. after applying first increment it becomes [[1,2,1],[0,1,0]]. the final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers. example 2: input: m = 2, n = 2, indices = [[1,1],[0,0]] output: 0 explanation: final matrix = [[2,2],[2,2]]. there are no odd numbers in the final matrix.","`1 <= m, n <= 50` `1 <= indices.length <= 10^0` `0 <= ri < m` `0 <= ci < n`",could you solve this in `o(n + m + indices.length)` time with only `o(n + m)` extra space?
1253,Reconstruct a 2-Row Binary Matrix,"Given the following details of a matrix with `n` columns and `2` rows :
The matrix is a binary matrix, which means each element in the matrix can be `0` or `1`.

The sum of elements of the 0-th(upper) row is given as `upper`.

The sum of elements of the 1-st(lower) row is given as `lower`.

The sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`.

Your task is to reconstruct the matrix with `upper`, `lower` and `colsum`.

Return it as a 2-D integer array.

If there are more than one valid solution, any of them will be accepted.

If no valid solution exists, return an empty 2-D array.


Example 1:
Input: upper = 2, lower = 1, colsum = [1,1,1]
Output: [[1,1,0],[0,0,1]]
Explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.


Example 2:
Input: upper = 2, lower = 3, colsum = [2,2,1,1]
Output: []

Example 3:
Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]
Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]

Constraints:
`1 <= colsum.length <= 10^5`
`0 <= upper, lower <= colsum.length`
`0 <= colsum[i] <= 2`",Medium,https://leetcode.com/problems/reconstruct-a-2-row-binary-matrix,Grab,"Math,Greedy",202,"[Find Valid Matrix Given Row and Column Sums, /problems/find-valid-matrix-given-row-and-column-sums/, Medium]","given the following details of a matrix with `n` columns and `2` rows : the matrix is a binary matrix, which means each element in the matrix can be `0` or `1`. the sum of elements of the 0-th(upper) row is given as `upper`. the sum of elements of the 1-st(lower) row is given as `lower`. the sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`. your task is to reconstruct the matrix with `upper`, `lower` and `colsum`. return it as a 2-d integer array. if there are more than one valid solution, any of them will be accepted. if no valid solution exists, return an empty 2-d array.","input: upper = 2, lower = 1, colsum = [1,1,1] output: [[1,1,0],[0,0,1]] explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers. example 2: input: upper = 2, lower = 3, colsum = [2,2,1,1] output: [] example 3: input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1] output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]","`1 <= colsum.length <= 10^5` `0 <= upper, lower <= colsum.length` `0 <= colsum[i] <= 2`",
1254,Number of Closed Islands,"Given a 2D `grid` consists of `0s` (land) and `1s` (water).  An island is a maximal 4-directionally connected group of `0s` and a closed island is an island totally (all left, top, right, bottom) surrounded by `1s.`
Return the number of closed islands.


Example 1:
Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).


Example 2:
Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1

Example 3:
Input: grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2

Constraints:
`1 <= grid.length, grid[0].length <= 100`
`0 <= grid[i][j] <=1`",Medium,https://leetcode.com/problems/number-of-closed-islands,"Google,Amazon,Oracle,Uber",Depth-first Search,788,,"given a 2d `grid` consists of `0s` (land) and `1s` (water). an island is a maximal 4-directionally connected group of `0s` and a closed island is an island totally (all left, top, right, bottom) surrounded by `1s.` return the number of closed islands.","input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]] output: 2 explanation: islands in gray are closed because they are completely surrounded by water (group of 1s). example 2: input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]] output: 1 example 3: input: grid = [[1,1,1,1,1,1,1], [1,0,0,0,0,0,1], [1,0,1,1,1,0,1], [1,0,1,0,1,0,1], [1,0,1,1,1,0,1], [1,0,0,0,0,0,1], [1,1,1,1,1,1,1]] output: 2","`1 <= grid.length, grid[0].length <= 10^0` `0 <= grid[i][j] <=1`",
1255,Maximum Score Words Formed by Letters,"Given a list of `words`, list of  single `letters` (might be repeating) and `score` of every character.

Return the maximum score of any valid set of words formed by using the given letters (`words[i]` cannot be used two or more times).

It is not necessary to use all characters in `letters` and each letter can only be used once. Score of letters `'a'`, `'b'`, `'c'`, ... ,`'z'` is given by `score[0]`, `score[1]`, ... , `score[25]` respectively.


Example 1:
Input: words = [""dog"",""cat"",""dad"",""good""], letters = [""a"",""a"",""c"",""d"",""d"",""d"",""g"",""o"",""o""], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
Output: 23
Explanation:
Score  a=1, c=9, d=5, g=3, o=2
Given letters, we can form the words ""dad"" (5+1+5) and ""good"" (3+2+2+5) with a score of 23.

Words ""dad"" and ""dog"" only get a score of 21.


Example 2:
Input: words = [""xxxz"",""ax"",""bx"",""cx""], letters = [""z"",""a"",""b"",""c"",""x"",""x"",""x""], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
Output: 27
Explanation:
Score  a=4, b=4, c=4, x=5, z=10
Given letters, we can form the words ""ax"" (4+5), ""bx"" (4+5) and ""cx"" (4+5) with a score of 27.

Word ""xxxz"" only get a score of 25.


Example 3:
Input: words = [""leetcode""], letters = [""l"",""e"",""t"",""c"",""o"",""d""], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
Output: 0
Explanation:
Letter ""e"" can only be used once.


Constraints:
`1 <= words.length <= 14`
`1 <= words[i].length <= 15`
`1 <= letters.length <= 100`
`letters[i].length == 1`
`score.length == 26`
`0 <= score[i] <= 10`
`words[i]`, `letters[i]` contains only lower case English letters.",Hard,https://leetcode.com/problems/maximum-score-words-formed-by-letters,Google,Bit Manipulation,274,,"given a list of `words`, list of single `letters` (might be repeating) and `score` of every character. return the maximum score of any valid set of words formed by using the given letters (`words[i]` cannot be used two or more times). it is not necessary to use all characters in `letters` and each letter can only be used once. score of letters `'a'`, `'b'`, `'c'`, ... ,`'z'` is given by `score[0]`, `score[1]`, ... , `score[25]` respectively.","input: words = [""dog"",""cat"",""dad"",""good""], letters = [""a"",""a"",""c"",""d"",""d"",""d"",""g"",""o"",""o""], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0] output: 23 explanation: score a=1, c=9, d=5, g=3, o=2 given letters, we can form the words ""dad"" (5+1+5) and ""good"" (3+2+2+5) with a score of 23. words ""dad"" and ""dog"" only get a score of 21. example 2: input: words = [""xxxz"",""ax"",""bx"",""cx""], letters = [""z"",""a"",""b"",""c"",""x"",""x"",""x""], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10] output: 27 explanation: score a=4, b=4, c=4, x=5, z=10 given letters, we can form the words ""ax"" (4+5), ""bx"" (4+5) and ""cx"" (4+5) with a score of 27. word ""xxxz"" only get a score of 25. example 3: input: words = [""leetcode""], letters = [""l"",""e"",""t"",""c"",""o"",""d""], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0] output: 0 explanation: letter ""e"" can only be used once.","`1 <= words.length <= 14` `1 <= words[i].length <= 15` `1 <= letters.length <= 10^0` `letters[i].length == 1` `score.length == 26` `0 <= score[i] <= 10` `words[i]`, `letters[i]` contains only lower case english letters.",
1256,Encode Number,"Given a non-negative integer `num`, Return its encoding string.

The encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:

Example 1:
Input: num = 23
Output: ""1000""

Example 2:
Input: num = 107
Output: ""101100""

Constraints:
`0 <= num <= 10^9`",Medium,https://leetcode.com/problems/encode-number,Quora,"Math,Bit Manipulation",42,"[Convert to Base -2, /problems/convert-to-base-2/, Medium]","given a non-negative integer `num`, return its encoding string. the encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:","input: num = 23 output: ""1000"" example 2: input: num = 107 output: ""101100""",`0 <= num <= 10^9`,
1257,Smallest Common Region,"You are given some lists of `regions` where the first region of each list includes all other regions in that list.

Naturally, if a region `X` contains another region `Y` then `X` is bigger than `Y`. Also by definition a region X contains itself.

Given two regions `region1`, `region2`, find out the smallest region that contains both of them.

If you are given regions `r1`, `r2` and `r3` such that `r1` includes `r3`, it is guaranteed there is no `r2` such that `r2` includes `r3`.

It's guaranteed the smallest region exists.


Example 1:
Input:
regions = [[""Earth"",""North America"",""South America""],
[""North America"",""United States"",""Canada""],
[""United States"",""New York"",""Boston""],
[""Canada"",""Ontario"",""Quebec""],
[""South America"",""Brazil""]],
region1 = ""Quebec"",
region2 = ""New York""
Output: ""North America""

Constraints:
`2 <= regions.length <= 10^4`
`region1 != region2`
All strings consist of English letters and spaces with at most 20 letters.",Medium,https://leetcode.com/problems/smallest-common-region,Airbnb,Tree,205,"[Lowest Common Ancestor of a Binary Search Tree, /problems/lowest-common-ancestor-of-a-binary-search-tree/, Easy], [Lowest Common Ancestor of a Binary Tree, /problems/lowest-common-ancestor-of-a-binary-tree/, Medium]","you are given some lists of `regions` where the first region of each list includes all other regions in that list. naturally, if a region `x` contains another region `y` then `x` is bigger than `y`. also by definition a region x contains itself. given two regions `region1`, `region2`, find out the smallest region that contains both of them. if you are given regions `r1`, `r2` and `r3` such that `r1` includes `r3`, it is guaranteed there is no `r2` such that `r2` includes `r3`. it's guaranteed the smallest region exists.","input: regions = [[""earth"",""north america"",""south america""], [""north america"",""united states"",""canada""], [""united states"",""new york"",""boston""], [""canada"",""ontario"",""quebec""], [""south america"",""brazil""]], region1 = ""quebec"", region2 = ""new york"" output: ""north america""",`2 <= regions.length <= 10^4` `region1 != region2` all strings consist of english letters and spaces with at most 20 letters.,
1258,Synonymous Sentences,"Given a list of pairs of equivalent words `synonyms` and a sentence `text`, Return all possible synonymous sentences sorted lexicographically.


Example 1:
Input:
synonyms = [[""happy"",""joy""],[""sad"",""sorrow""],[""joy"",""cheerful""]],
text = ""I am happy today but was sad yesterday""
Output:
[""I am cheerful today but was sad yesterday"",
""I am cheerful today but was sorrow yesterday"",
""I am happy today but was sad yesterday"",
""I am happy today but was sorrow yesterday"",
""I am joy today but was sad yesterday"",
""I am joy today but was sorrow yesterday""]

Example 2:
Input: synonyms = [[""happy"",""joy""],[""cheerful"",""glad""]], text = ""I am happy today but was sad yesterday""
Output: [""I am happy today but was sad yesterday"",""I am joy today but was sad yesterday""]

Example 3:
Input: synonyms = [[""a"",""b""],[""c"",""d""],[""e"",""f""]], text = ""a c e""
Output: [""a c e"",""a c f"",""a d e"",""a d f"",""b c e"",""b c f"",""b d e"",""b d f""]

Example 4:
Input: synonyms = [[""a"",""QrbCl""]], text = ""d QrbCl ya ya NjZQ""
Output: [""d QrbCl ya ya NjZQ"",""d a ya ya NjZQ""]

Constraints:
`0 <= synonyms.length <= 10`
`synonyms[i].length == 2`
`synonyms[i][0] != synonyms[i][1]`
All words consist of at most `10` English letters only.

`text` is a single space separated sentence of at most `10` words.",Medium,https://leetcode.com/problems/synonymous-sentences,Amazon,Backtracking,129,,"given a list of pairs of equivalent words `synonyms` and a sentence `text`, return all possible synonymous sentences sorted lexicographically.","input: synonyms = [[""happy"",""joy""],[""sad"",""sorrow""],[""joy"",""cheerful""]], text = ""i am happy today but was sad yesterday"" output: [""i am cheerful today but was sad yesterday"", ""i am cheerful today but was sorrow yesterday"", ""i am happy today but was sad yesterday"", ""i am happy today but was sorrow yesterday"", ""i am joy today but was sad yesterday"", ""i am joy today but was sorrow yesterday""] example 2: input: synonyms = [[""happy"",""joy""],[""cheerful"",""glad""]], text = ""i am happy today but was sad yesterday"" output: [""i am happy today but was sad yesterday"",""i am joy today but was sad yesterday""] example 3: input: synonyms = [[""a"",""b""],[""c"",""d""],[""e"",""f""]], text = ""a c e"" output: [""a c e"",""a c f"",""a d e"",""a d f"",""b c e"",""b c f"",""b d e"",""b d f""] example 4: input: synonyms = [[""a"",""qrbcl""]], text = ""d qrbcl ya ya njzq"" output: [""d qrbcl ya ya njzq"",""d a ya ya njzq""]",`0 <= synonyms.length <= 10` `synonyms[i].length == 2` `synonyms[i][0] != synonyms[i][1]` all words consist of at most `10` english letters only. `text` is a single space separated sentence of at most `10` words.,
1259,Handshakes That Don't Cross,"You are given an even number of people `num_people` that stand around a circle and each person shakes hands with someone else, so that there are `num_people / 2` handshakes total.

Return the number of ways these handshakes could occur such that none of the handshakes cross.

Since this number could be very big, return the answer mod `10^9 + 7`

Example 1:
Input: num_people = 2
Output: 1

Example 2:
Input: num_people = 4
Output: 2
Explanation: There are two ways to do it, the first way is [(1,2),(3,4)] and the second one is [(2,3),(4,1)].


Example 3:
Input: num_people = 6
Output: 5

Example 4:
Input: num_people = 8
Output: 14

Constraints:
`2 <= num_people <= 1000`
`num_people % 2 == 0`",Hard,https://leetcode.com/problems/handshakes-that-dont-cross,Amazon,"Math,Dynamic Programming",83,,"you are given an even number of people `num_people` that stand around a circle and each person shakes hands with someone else, so that there are `num_people / 2` handshakes total. return the number of ways these handshakes could occur such that none of the handshakes cross. since this number could be very big, return the answer mod `10^9 + 7`","input: num_people = 2 output: 1 example 2: input: num_people = 4 output: 2 explanation: there are two ways to do it, the first way is [(1,2),(3,4)] and the second one is [(2,3),(4,1)]. example 3: input: num_people = 6 output: 5 example 4: input: num_people = 8 output: 14",`2 <= num_people <= 1000` `num_people % 2 == 0`,
1260,Shift 2D Grid,"Given a 2D `grid` of size `m x n` and an integer `k`. You need to shift the `grid` `k` times.

In one shift operation:
Element at `grid[i][j]` moves to `grid[i][j + 1]`.

Element at `grid[i][n - 1]` moves to `grid[i + 1][0]`.

Element at `grid[m - 1][n - 1]` moves to `grid[0][0]`.

Return the 2D grid after applying shift operation `k` times.


Example 1:
Input: `grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[9,1,2],[3,4,5],[6,7,8]]

Example 2:
Input: `grid` = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]

Example 3:
Input: `grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 9
Output: [[1,2,3],[4,5,6],[7,8,9]]

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m <= 50`
`1 <= n <= 50`
`-1000 <= grid[i][j] <= 1000`
`0 <= k <= 100`",Easy,https://leetcode.com/problems/shift-2d-grid,Amazon,Array,315,,given a 2d `grid` of size `m x n` and an integer `k`. you need to shift the `grid` `k` times. in one shift operation: element at `grid[i][j]` moves to `grid[i][j + 1]`. element at `grid[i][n - 1]` moves to `grid[i + 1][0]`. element at `grid[m - 1][n - 1]` moves to `grid[0][0]`. return the 2d grid after applying shift operation `k` times.,"input: `grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 1 output: [[9,1,2],[3,4,5],[6,7,8]] example 2: input: `grid` = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4 output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]] example 3: input: `grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 9 output: [[1,2,3],[4,5,6],[7,8,9]]",`m == grid.length` `n == grid[i].length` `1 <= m <= 50` `1 <= n <= 50` `-1000 <= grid[i][j] <= 1000` `0 <= k <= 10^0`,
1261,Find Elements in a Contaminated Binary Tree,"Given a binary tree with the following rules:
`root.val == 0`
If `treeNode.val == x` and `treeNode.left != null`, then `treeNode.left.val == 2 * x + 1`
If `treeNode.val == x` and `treeNode.right != null`, then `treeNode.right.val == 2 * x + 2`
Now the binary tree is contaminated, which means all `treeNode.val` have been changed to `-1`.

You need to first recover the binary tree and then implement the `FindElements` class:
`FindElements(TreeNode* root)` Initializes the object with a contamined binary tree, you need to recover it first.

`bool find(int target)` Return if the `target` value exists in the recovered binary tree.


Example 1:
Input
[""FindElements"",""find"",""find""]
[[[-1,null,-1]],[1],[2]]
Output
[null,false,true]
Explanation
FindElements findElements = new FindElements([-1,null,-1]); 
findElements.find(1); // return False 
findElements.find(2); // return True 

Example 2:
Input
[""FindElements"",""find"",""find"",""find""]
[[[-1,-1,-1,-1,-1]],[1],[3],[5]]
Output
[null,true,true,false]
Explanation
FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);
findElements.find(1); // return True
findElements.find(3); // return True
findElements.find(5); // return False

Example 3:
Input
[""FindElements"",""find"",""find"",""find"",""find""]
[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
Output
[null,true,false,false,true]
Explanation
FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);
findElements.find(2); // return True
findElements.find(3); // return False
findElements.find(4); // return False
findElements.find(5); // return True

Constraints:
`TreeNode.val == -1`
The height of the binary tree is less than or equal to `20`
The total number of nodes is between `[1, 10^4]`
Total calls of `find()` is between `[1, 10^4]`
`0 <= target <= 10^6`",Medium,https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree,Google,"Hash Table,Tree",343,,"given a binary tree with the following rules: `root.val == 0` if `treenode.val == x` and `treenode.left != null`, then `treenode.left.val == 2 * x + 1` if `treenode.val == x` and `treenode.right != null`, then `treenode.right.val == 2 * x + 2` now the binary tree is contaminated, which means all `treenode.val` have been changed to `-1`. you need to first recover the binary tree and then implement the `findelements` class: `findelements(treenode* root)` initializes the object with a contamined binary tree, you need to recover it first. `bool find(int target)` return if the `target` value exists in the recovered binary tree.","input [""findelements"",""find"",""find""] [[[-1,null,-1]],[1],[2]] output [null,false,true] explanation findelements findelements = new findelements([-1,null,-1]); findelements.find(1); // return false findelements.find(2); // return true example 2: input [""findelements"",""find"",""find"",""find""] [[[-1,-1,-1,-1,-1]],[1],[3],[5]] output [null,true,true,false] explanation findelements findelements = new findelements([-1,-1,-1,-1,-1]); findelements.find(1); // return true findelements.find(3); // return true findelements.find(5); // return false example 3: input [""findelements"",""find"",""find"",""find"",""find""] [[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]] output [null,true,false,false,true] explanation findelements findelements = new findelements([-1,null,-1,-1,null,-1]); findelements.find(2); // return true findelements.find(3); // return false findelements.find(4); // return false findelements.find(5); // return true","`treenode.val == -1` the height of the binary tree is less than or equal to `20` the total number of nodes is between `[1, 10^4]` total calls of `find()` is between `[1, 10^4]` `0 <= target <= 10^6`",
1262,Greatest Sum Divisible by Three,"Given an array `nums` of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.


Example 1:
Input: nums = [3,6,5,1,8]
Output: 18
Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).


Example 2:
Input: nums = [4]
Output: 0
Explanation: Since 4 is not divisible by 3, do not pick any number.


Example 3:
Input: nums = [1,2,3,4,4]
Output: 12
Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).


Constraints:
`1 <= nums.length <= 4 * 10^4`
`1 <= nums[i] <= 10^4`",Medium,https://leetcode.com/problems/greatest-sum-divisible-by-three,Facebook,Dynamic Programming,727,,"given an array `nums` of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.","input: nums = [3,6,5,1,8] output: 18 explanation: pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3). example 2: input: nums = [4] output: 0 explanation: since 4 is not divisible by 3, do not pick any number. example 3: input: nums = [1,2,3,4,4] output: 12 explanation: pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).",`1 <= nums.length <= 4 * 10^4` `1 <= nums[i] <= 10^4`,
1263,Minimum Moves to Move a Box to Their Target Location,"Storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations.

The game is represented by a `grid` of size `m x n`, where each element is a wall, floor, or a box.

Your task is move the box `'B'` to the target position `'T'` under the following rules:
Player is represented by character `'S'` and can move up, down, left, right in the `grid` if it is a floor (empy cell).

Floor is represented by character `'.'` that means free cell to walk.

Wall is represented by character `'#'` that means obstacle  (impossible to walk there). 
There is only one box `'B'` and one target cell `'T'` in the `grid`.

The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a push.

The player cannot walk through the box.

Return the minimum number of pushes to move the box to the target. If there is no way to reach the target, return `-1`.


Example 1:
Input: grid = [[""#"",""#"",""#"",""#"",""#"",""#""],
               [""#"",""T"",""#"",""#"",""#"",""#""],
               [""#"",""."",""."",""B"",""."",""#""],
               [""#"",""."",""#"",""#"",""."",""#""],
               [""#"",""."",""."",""."",""S"",""#""],
               [""#"",""#"",""#"",""#"",""#"",""#""]]
Output: 3
Explanation: We return only the number of times the box is pushed.


Example 2:
Input: grid = [[""#"",""#"",""#"",""#"",""#"",""#""],
               [""#"",""T"",""#"",""#"",""#"",""#""],
               [""#"",""."",""."",""B"",""."",""#""],
               [""#"",""#"",""#"",""#"",""."",""#""],
               [""#"",""."",""."",""."",""S"",""#""],
               [""#"",""#"",""#"",""#"",""#"",""#""]]
Output: -1

Example 3:
Input: grid = [[""#"",""#"",""#"",""#"",""#"",""#""],
               [""#"",""T"",""."",""."",""#"",""#""],
               [""#"",""."",""#"",""B"",""."",""#""],
               [""#"",""."",""."",""."",""."",""#""],
               [""#"",""."",""."",""."",""S"",""#""],
               [""#"",""#"",""#"",""#"",""#"",""#""]]
Output: 5
Explanation:  push the box down, left, left, up and up.


Example 4:
Input: grid = [[""#"",""#"",""#"",""#"",""#"",""#"",""#""],
               [""#"",""S"",""#"",""."",""B"",""T"",""#""],
               [""#"",""#"",""#"",""#"",""#"",""#"",""#""]]
Output: -1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m <= 20`
`1 <= n <= 20`
`grid` contains only characters `'.'`, `'#'`,  `'S'` , `'T'`, or `'B'`.

There is only one character `'S'`, `'B'` and `'T'` in the `grid`.",Hard,https://leetcode.com/problems/minimum-moves-to-move-a-box-to-their-target-location,,,288,,"storekeeper is a game in which the player pushes boxes around in a warehouse trying to get them to target locations. the game is represented by a `grid` of size `m x n`, where each element is a wall, floor, or a box. your task is move the box `'b'` to the target position `'t'` under the following rules: player is represented by character `'s'` and can move up, down, left, right in the `grid` if it is a floor (empy cell). floor is represented by character `'.'` that means free cell to walk. wall is represented by character `'#'` that means obstacle (impossible to walk there). there is only one box `'b'` and one target cell `'t'` in the `grid`. the box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. this is a push. the player cannot walk through the box. return the minimum number of pushes to move the box to the target. if there is no way to reach the target, return `-1`.","input: grid = [[""#"",""#"",""#"",""#"",""#"",""#""], [""#"",""t"",""#"",""#"",""#"",""#""], [""#"",""."",""."",""b"",""."",""#""], [""#"",""."",""#"",""#"",""."",""#""], [""#"",""."",""."",""."",""s"",""#""], [""#"",""#"",""#"",""#"",""#"",""#""]] output: 3 explanation: we return only the number of times the box is pushed. example 2: input: grid = [[""#"",""#"",""#"",""#"",""#"",""#""], [""#"",""t"",""#"",""#"",""#"",""#""], [""#"",""."",""."",""b"",""."",""#""], [""#"",""#"",""#"",""#"",""."",""#""], [""#"",""."",""."",""."",""s"",""#""], [""#"",""#"",""#"",""#"",""#"",""#""]] output: -1 example 3: input: grid = [[""#"",""#"",""#"",""#"",""#"",""#""], [""#"",""t"",""."",""."",""#"",""#""], [""#"",""."",""#"",""b"",""."",""#""], [""#"",""."",""."",""."",""."",""#""], [""#"",""."",""."",""."",""s"",""#""], [""#"",""#"",""#"",""#"",""#"",""#""]] output: 5 explanation: push the box down, left, left, up and up. example 4: input: grid = [[""#"",""#"",""#"",""#"",""#"",""#"",""#""], [""#"",""s"",""#"",""."",""b"",""t"",""#""], [""#"",""#"",""#"",""#"",""#"",""#"",""#""]] output: -1","`m == grid.length` `n == grid[i].length` `1 <= m <= 20` `1 <= n <= 20` `grid` contains only characters `'.'`, `'#'`, `'s'` , `'t'`, or `'b'`. there is only one character `'s'`, `'b'` and `'t'` in the `grid`.",
1264,Page Recommendations,SQL Schema,Medium,https://leetcode.com/problems/page-recommendations,Facebook,,80,,sql schema,,,
1265,Print Immutable Linked List in Reverse,"You are given an immutable linked list, print out all values of each node in reverse with the help of the following interface:
`ImmutableListNode`: An interface of immutable linked list, you are given the head of the list.

You need to use the following functions to access the linked list (you can't access the `ImmutableListNode` directly):
`ImmutableListNode.printValue()`: Print value of the current node.

`ImmutableListNode.getNext()`: Return the next node.

The input is only given to initialize the linked list internally. You must solve this problem without modifying the linked list. In other words, you must operate the linked list using only the mentioned APIs.


Example 1:
Input: head = [1,2,3,4]
Output: [4,3,2,1]

Example 2:
Input: head = [0,-4,-1,3,-5]
Output: [-5,3,-1,-4,0]

Example 3:
Input: head = [-2,0,6,4,4,-6]
Output: [-6,4,4,6,0,-2]

Constraints:
The length of the linked list is between `[1, 1000]`.

The value of each node in the linked list is between `[-1000, 1000]`.

Follow up:
Could you solve this problem in:
Constant space complexity?
Linear time complexity and less than linear space complexity?",Medium,https://leetcode.com/problems/print-immutable-linked-list-in-reverse,"Google,Facebook",,266,,"you are given an immutable linked list, print out all values of each node in reverse with the help of the following interface: `immutablelistnode`: an interface of immutable linked list, you are given the head of the list. you need to use the following functions to access the linked list (you can't access the `immutablelistnode` directly): `immutablelistnode.printvalue()`: print value of the current node. `immutablelistnode.getnext()`: return the next node. the input is only given to initialize the linked list internally. you must solve this problem without modifying the linked list. in other words, you must operate the linked list using only the mentioned apis.","input: head = [1,2,3,4] output: [4,3,2,1] example 2: input: head = [0,-4,-1,3,-5] output: [-5,3,-1,-4,0] example 3: input: head = [-2,0,6,4,4,-6] output: [-6,4,4,6,0,-2]","the length of the linked list is between `[1, 1000]`. the value of each node in the linked list is between `[-1000, 1000]`.",could you solve this problem in: constant space complexity? linear time complexity and less than linear space complexity?
1266,Minimum Time Visiting All Points,"On a 2D plane, there are `n` points with integer coordinates `points[i] = [xi, yi]`. Return the minimum time in seconds to visit all the points in the order given by `points`.

You can move according to these rules:
In `1` second, you can either:
	
move vertically by one unit,
move horizontally by one unit, or
move diagonally `sqrt(2)` units (in other words, move one unit vertically then one unit horizontally in `1` second).

You have to visit the points in the same order as they appear in the array.

You are allowed to pass through points that appear later in the order, but these do not count as visits.


Example 1:
Input: points = [[1,1],[3,4],[-1,0]]
Output: 7
Explanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   
Time from [1,1] to [3,4] = 3 seconds 
Time from [3,4] to [-1,0] = 4 seconds
Total time = 7 seconds

Example 2:
Input: points = [[3,2],[-2,2]]
Output: 5

Constraints:
`points.length == n`
`1 <= n <= 100`
`points[i].length == 2`
`-1000 <= points[i][0], points[i][1] <= 1000`",Easy,https://leetcode.com/problems/minimum-time-visiting-all-points,"Bloomberg,Amazon,Facebook","Array,Geometry",779,,"on a 2d plane, there are `n` points with integer coordinates `points[i] = [xi, yi]`. return the minimum time in seconds to visit all the points in the order given by `points`. you can move according to these rules: in `1` second, you can either: move vertically by one unit, move horizontally by one unit, or move diagonally `sqrt(2)` units (in other words, move one unit vertically then one unit horizontally in `1` second). you have to visit the points in the same order as they appear in the array. you are allowed to pass through points that appear later in the order, but these do not count as visits.","input: points = [[1,1],[3,4],[-1,0]] output: 7 explanation: one optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0] time from [1,1] to [3,4] = 3 seconds time from [3,4] to [-1,0] = 4 seconds total time = 7 seconds example 2: input: points = [[3,2],[-2,2]] output: 5","`points.length == n` `1 <= n <= 10^0` `points[i].length == 2` `-1000 <= points[i][0], points[i][1] <= 1000`",
1267,Count Servers that Communicate,"You are given a map of a server center, represented as a `m * n` integer matrix `grid`, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.

Return the number of servers that communicate with any other server.


Example 1:
Input: grid = [[1,0],[0,1]]
Output: 0
Explanation: No servers can communicate with others.


Example 2:
Input: grid = [[1,0],[1,1]]
Output: 3
Explanation: All three servers can communicate with at least one other server.


Example 3:
Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
Output: 4
Explanation: The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.


Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m <= 250`
`1 <= n <= 250`
`grid[i][j] == 0 or 1`",Medium,https://leetcode.com/problems/count-servers-that-communicate,"Google,Amazon","Array,Graph",545,,"you are given a map of a server center, represented as a `m * n` integer matrix `grid`, where 1 means that on that cell there is a server and 0 means that it is no server. two servers are said to communicate if they are on the same row or on the same column. return the number of servers that communicate with any other server.","input: grid = [[1,0],[0,1]] output: 0 explanation: no servers can communicate with others. example 2: input: grid = [[1,0],[1,1]] output: 3 explanation: all three servers can communicate with at least one other server. example 3: input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]] output: 4 explanation: the two servers in the first row can communicate with each other. the two servers in the third column can communicate with each other. the server at right bottom corner can't communicate with any other server.",`m == grid.length` `n == grid[i].length` `1 <= m <= 250` `1 <= n <= 250` `grid[i][j] == 0 or 1`,
1268,Search Suggestions System,"Given an array of strings `products` and a string `searchWord`. We want to design a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products should have common prefix with the searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.

Return list of lists of the suggested `products` after each character of `searchWord` is typed. 

Example 1:
Input: products = [""mobile"",""mouse"",""moneypot"",""monitor"",""mousepad""], searchWord = ""mouse""
Output: [
[""mobile"",""moneypot"",""monitor""],
[""mobile"",""moneypot"",""monitor""],
[""mouse"",""mousepad""],
[""mouse"",""mousepad""],
[""mouse"",""mousepad""]
]
Explanation: products sorted lexicographically = [""mobile"",""moneypot"",""monitor"",""mouse"",""mousepad""]
After typing m and mo all products match and we show user [""mobile"",""moneypot"",""monitor""]
After typing mou, mous and mouse the system suggests [""mouse"",""mousepad""]

Example 2:
Input: products = [""havana""], searchWord = ""havana""
Output: [[""havana""],[""havana""],[""havana""],[""havana""],[""havana""],[""havana""]]

Example 3:
Input: products = [""bags"",""baggage"",""banner"",""box"",""cloths""], searchWord = ""bags""
Output: [[""baggage"",""bags"",""banner""],[""baggage"",""bags"",""banner""],[""baggage"",""bags""],[""bags""]]

Example 4:
Input: products = [""havana""], searchWord = ""tatiana""
Output: [[],[],[],[],[],[],[]]

Constraints:
`1 <= products.length <= 1000`
There are no repeated elements in `products`.

`1 <= Σ products[i].length <= 2 * 10^4`
All characters of `products[i]` are lower-case English letters.

`1 <= searchWord.length <= 1000`
All characters of `searchWord` are lower-case English letters.",Medium,https://leetcode.com/problems/search-suggestions-system,"Amazon,Bloomberg",String,968,,given an array of strings `products` and a string `searchword`. we want to design a system that suggests at most three product names from `products` after each character of `searchword` is typed. suggested products should have common prefix with the searchword. if there are more than three products with a common prefix return the three lexicographically minimums products. return list of lists of the suggested `products` after each character of `searchword` is typed.,"input: products = [""mobile"",""mouse"",""moneypot"",""monitor"",""mousepad""], searchword = ""mouse"" output: [ [""mobile"",""moneypot"",""monitor""], [""mobile"",""moneypot"",""monitor""], [""mouse"",""mousepad""], [""mouse"",""mousepad""], [""mouse"",""mousepad""] ] explanation: products sorted lexicographically = [""mobile"",""moneypot"",""monitor"",""mouse"",""mousepad""] after typing m and mo all products match and we show user [""mobile"",""moneypot"",""monitor""] after typing mou, mous and mouse the system suggests [""mouse"",""mousepad""] example 2: input: products = [""havana""], searchword = ""havana"" output: [[""havana""],[""havana""],[""havana""],[""havana""],[""havana""],[""havana""]] example 3: input: products = [""bags"",""baggage"",""banner"",""box"",""cloths""], searchword = ""bags"" output: [[""baggage"",""bags"",""banner""],[""baggage"",""bags"",""banner""],[""baggage"",""bags""],[""bags""]] example 4: input: products = [""havana""], searchword = ""tatiana"" output: [[],[],[],[],[],[],[]]",`1 <= products.length <= 1000` there are no repeated elements in `products`. `1 <= σ products[i].length <= 2 * 10^4` all characters of `products[i]` are lower-case english letters. `1 <= searchword.length <= 1000` all characters of `searchword` are lower-case english letters.,
1269,Number of Ways to Stay in the Same Place After Some Steps,"You have a pointer at index `0` in an array of size `arrLen`. At each step, you can move 1 position to the left, 1 position to the right in the array or stay in the same place  (The pointer should not be placed outside the array at any time).

Given two integers `steps` and `arrLen`, return the number of ways such that your pointer still at index `0` after exactly `steps` steps.

Since the answer may be too large, return it modulo `10^9 + 7`.


Example 1:
Input: steps = 3, arrLen = 2
Output: 4
Explanation: There are 4 differents ways to stay at index 0 after 3 steps.

Right, Left, Stay
Stay, Right, Left
Right, Stay, Left
Stay, Stay, Stay

Example 2:
Input: steps = 2, arrLen = 4
Output: 2
Explanation: There are 2 differents ways to stay at index 0 after 2 steps
Right, Left
Stay, Stay

Example 3:
Input: steps = 4, arrLen = 2
Output: 8

Constraints:
`1 <= steps <= 500`
`1 <= arrLen <= 10^6`",Hard,https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps,Facebook,Dynamic Programming,361,,"you have a pointer at index `0` in an array of size `arrlen`. at each step, you can move 1 position to the left, 1 position to the right in the array or stay in the same place (the pointer should not be placed outside the array at any time). given two integers `steps` and `arrlen`, return the number of ways such that your pointer still at index `0` after exactly `steps` steps. since the answer may be too large, return it modulo `10^9 + 7`.","input: steps = 3, arrlen = 2 output: 4 explanation: there are 4 differents ways to stay at index 0 after 3 steps. right, left, stay stay, right, left right, stay, left stay, stay, stay example 2: input: steps = 2, arrlen = 4 output: 2 explanation: there are 2 differents ways to stay at index 0 after 2 steps right, left stay, stay example 3: input: steps = 4, arrlen = 2 output: 8",`1 <= steps <= 500` `1 <= arrlen <= 10^6`,
1270,All People Report to the Given Manager,SQL Schema,Medium,https://leetcode.com/problems/all-people-report-to-the-given-manager,Amazon,,185,,sql schema,,,
1271,Hexspeak,"A decimal number can be converted to its Hexspeak representation by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit `0` with the letter `O`, and the digit `1` with the letter `I`.  Such a representation is valid if and only if it consists only of the letters in the set `{""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""I"", ""O""}`.

Given a string `num` representing a decimal integer `N`, return the Hexspeak representation of `N` if it is valid, otherwise return `""ERROR""`.


Example 1:
Input: num = ""257""
Output: ""IOI""
Explanation:  257 is 101 in hexadecimal.


Example 2:
Input: num = ""3""
Output: ""ERROR""

Constraints:
`1 <= N <= 10^12`
There are no leading zeros in the given string.

All answers must be in uppercase letters.",Easy,https://leetcode.com/problems/hexspeak,Virtu Financial,"Math,String",46,,"a decimal number can be converted to its hexspeak representation by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit `0` with the letter `o`, and the digit `1` with the letter `i`. such a representation is valid if and only if it consists only of the letters in the set `{""a"", ""b"", ""c"", ""d"", ""e"", ""f"", ""i"", ""o""}`. given a string `num` representing a decimal integer `n`, return the hexspeak representation of `n` if it is valid, otherwise return `""error""`.","input: num = ""257"" output: ""ioi"" explanation: 257 is 101 in hexadecimal. example 2: input: num = ""3"" output: ""error""",`1 <= n <= 10^12` there are no leading zeros in the given string. all answers must be in uppercase letters.,
1272,Remove Interval,"A set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form `[a, b)`. A real number `x` is in the set if one of its intervals `[a, b)` contains `x` (i.e. `a <= x < b`).

You are given a sorted list of disjoint intervals `intervals` representing a set of real numbers as described above, where `intervals[i] = [ai, bi]` represents the interval `[ai, bi)`. You are also given another interval `toBeRemoved`.

Return the set of real numbers with the interval `toBeRemoved` removed from `intervals`. In other words, return the set of real numbers such that every `x` in the set is in `intervals` but not in `toBeRemoved`. Your answer should be a sorted list of disjoint intervals as described above.


Example 1:
Input: intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]
Output: [[0,1],[6,7]]

Example 2:
Input: intervals = [[0,5]], toBeRemoved = [2,3]
Output: [[0,2],[3,5]]

Example 3:
Input: intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]
Output: [[-5,-4],[-3,-2],[4,5],[8,9]]

Constraints:
`1 <= intervals.length <= 104`
`-109 <= ai < bi <= 109`",Medium,https://leetcode.com/problems/remove-interval,Google,"Math,Line Sweep",189,,"a set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form `[a, b)`. a real number `x` is in the set if one of its intervals `[a, b)` contains `x` (i.e. `a <= x < b`). you are given a sorted list of disjoint intervals `intervals` representing a set of real numbers as described above, where `intervals[i] = [ai, bi]` represents the interval `[ai, bi)`. you are also given another interval `toberemoved`. return the set of real numbers with the interval `toberemoved` removed from `intervals`. in other words, return the set of real numbers such that every `x` in the set is in `intervals` but not in `toberemoved`. your answer should be a sorted list of disjoint intervals as described above.","input: intervals = [[0,2],[3,4],[5,7]], toberemoved = [1,6] output: [[0,1],[6,7]] example 2: input: intervals = [[0,5]], toberemoved = [2,3] output: [[0,2],[3,5]] example 3: input: intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toberemoved = [-1,4] output: [[-5,-4],[-3,-2],[4,5],[8,9]]",`1 <= intervals.length <= 10^4` `-10^9 <= ai < bi <= 10^9`,
1273,Delete Tree Nodes,"A tree rooted at node 0 is given as follows:
The number of nodes is `nodes`;
The value of the `i`-th node is `value[i]`;
The parent of the `i`-th node is `parent[i]`.

Remove every subtree whose sum of values of nodes is zero.

After doing so, return the number of nodes remaining in the tree.


Example 1:
Input: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1]
Output: 2

Example 2:
Input: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-2]
Output: 6

Example 3:
Input: nodes = 5, parent = [-1,0,1,0,0], value = [-672,441,18,728,378]
Output: 5

Example 4:
Input: nodes = 5, parent = [-1,0,0,1,1], value = [-686,-842,616,-739,-746]
Output: 5

Constraints:
`1 <= nodes <= 10^4`
`parent.length == nodes`
`0 <= parent[i] <= nodes - 1`
`parent[0] == -1` which indicates that `0` is the root.

`value.length == nodes`
`-10^5 <= value[i] <= 10^5`
The given input is guaranteed to represent a valid tree.",Medium,https://leetcode.com/problems/delete-tree-nodes,Microsoft,"Dynamic Programming,Depth-first Search",154,,"a tree rooted at node 0 is given as follows: the number of nodes is `nodes`; the value of the `i`-th node is `value[i]`; the parent of the `i`-th node is `parent[i]`. remove every subtree whose sum of values of nodes is zero. after doing so, return the number of nodes remaining in the tree.","input: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1] output: 2 example 2: input: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-2] output: 6 example 3: input: nodes = 5, parent = [-1,0,1,0,0], value = [-672,441,18,728,378] output: 5 example 4: input: nodes = 5, parent = [-1,0,0,1,1], value = [-686,-842,616,-739,-746] output: 5",`1 <= nodes <= 10^4` `parent.length == nodes` `0 <= parent[i] <= nodes - 1` `parent[0] == -1` which indicates that `0` is the root. `value.length == nodes` `-10^5 <= value[i] <= 10^5` the given input is guaranteed to represent a valid tree.,
1274,Number of Ships in a Rectangle,"(This problem is an interactive problem.)
Each ship is located at an integer point on the sea represented by a cartesian plane, and each integer point may contain at most 1 ship.

You have a function `Sea.hasShips(topRight, bottomLeft)` which takes two points as arguments and returns `true` If there is at least one ship in the rectangle represented by the two points, including on the boundary.

Given two points: the top right and bottom left corners of a rectangle, return the number of ships present in that rectangle. It is guaranteed that there are at most 10 ships in that rectangle.

Submissions making more than 400 calls to `hasShips` will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.


Example :
Input: 
ships = [[1,1],[2,2],[3,3],[5,5]], topRight = [4,4], bottomLeft = [0,0]
Output: 3
Explanation: From [0,0] to [4,4] we can count 3 ships within the range.


Constraints:
On the input `ships` is only given to initialize the map internally. You must solve this problem ""blindfolded"". In other words, you must find the answer using the given `hasShips` API, without knowing the `ships` position.

`0 <= bottomLeft[0] <= topRight[0] <= 1000`
`0 <= bottomLeft[1] <= topRight[1] <= 1000`
`topRight != bottomLeft`",Hard,https://leetcode.com/problems/number-of-ships-in-a-rectangle,Bloomberg,Divide and Conquer,178,,"(this problem is an interactive problem.) each ship is located at an integer point on the sea represented by a cartesian plane, and each integer point may contain at most 1 ship. you have a function `sea.hasships(topright, bottomleft)` which takes two points as arguments and returns `true` if there is at least one ship in the rectangle represented by the two points, including on the boundary. given two points: the top right and bottom left corners of a rectangle, return the number of ships present in that rectangle. it is guaranteed that there are at most 10 ships in that rectangle. submissions making more than 400 calls to `hasships` will be judged wrong answer. also, any solutions that attempt to circumvent the judge will result in disqualification.","input: ships = [[1,1],[2,2],[3,3],[5,5]], topright = [4,4], bottomleft = [0,0] output: 3 explanation: from [0,0] to [4,4] we can count 3 ships within the range.","on the input `ships` is only given to initialize the map internally. you must solve this problem ""blindfolded"". in other words, you must find the answer using the given `hasships` api, without knowing the `ships` position. `0 <= bottomleft[0] <= topright[0] <= 1000` `0 <= bottomleft[1] <= topright[1] <= 1000` `topright != bottomleft`",
1275,Find Winner on a Tic Tac Toe Game,"Tic-tac-toe is played by two players A and B on a 3 x 3 grid.

Here are the rules of Tic-Tac-Toe:
Players take turns placing characters into empty squares ("" "").

The first player A always places ""X"" characters, while the second player B always places ""O"" characters.

""X"" and ""O"" characters are always placed into empty squares, never on filled ones.

The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.

The game also ends if all squares are non-empty.

No more moves can be played if the game is over.

Given an array `moves` where each element is another array of size 2 corresponding to the row and column of the grid where they mark their respective character in the order in which A and B play.

Return the winner of the game if it exists (A or B), in case the game ends in a draw return ""Draw"", if there are still movements to play return ""Pending"".

You can assume that `moves` is valid (It follows the rules of Tic-Tac-Toe), the grid is initially empty and A will play first.


Example 1:
Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: ""A""
Explanation: ""A"" wins, he always plays first.

""X  ""    ""X  ""    ""X  ""    ""X  ""    ""X  ""
""   "" -> ""   "" -> "" X "" -> "" X "" -> "" X ""
""   ""    ""O  ""    ""O  ""    ""OO ""    ""OOX""

Example 2:
Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: ""B""
Explanation: ""B"" wins.

""X  ""    ""X  ""    ""XX ""    ""XXO""    ""XXO""    ""XXO""
""   "" -> "" O "" -> "" O "" -> "" O "" -> ""XO "" -> ""XO "" 
""   ""    ""   ""    ""   ""    ""   ""    ""   ""    ""O  ""

Example 3:
Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: ""Draw""
Explanation: The game ends in a draw since there are no moves to make.

""XXO""
""OOX""
""XOX""

Example 4:
Input: moves = [[0,0],[1,1]]
Output: ""Pending""
Explanation: The game has not finished yet.

""X  ""
"" O ""
""   ""

Constraints:
`1 <= moves.length <= 9`
`moves[i].length == 2`
`0 <= moves[i][j] <= 2`
There are no repeated elements on `moves`.

`moves` follow the rules of tic tac toe.",Easy,https://leetcode.com/problems/find-winner-on-a-tic-tac-toe-game,Facebook,Array,326,,"tic-tac-toe is played by two players a and b on a 3 x 3 grid. here are the rules of tic-tac-toe: players take turns placing characters into empty squares ("" ""). the first player a always places ""x"" characters, while the second player b always places ""o"" characters. ""x"" and ""o"" characters are always placed into empty squares, never on filled ones. the game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal. the game also ends if all squares are non-empty. no more moves can be played if the game is over. given an array `moves` where each element is another array of size 2 corresponding to the row and column of the grid where they mark their respective character in the order in which a and b play. return the winner of the game if it exists (a or b), in case the game ends in a draw return ""draw"", if there are still movements to play return ""pending"". you can assume that `moves` is valid (it follows the rules of tic-tac-toe), the grid is initially empty and a will play first.","input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]] output: ""a"" explanation: ""a"" wins, he always plays first. ""x "" ""x "" ""x "" ""x "" ""x "" "" "" -> "" "" -> "" x "" -> "" x "" -> "" x "" "" "" ""o "" ""o "" ""oo "" ""oox"" example 2: input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]] output: ""b"" explanation: ""b"" wins. ""x "" ""x "" ""xx "" ""xxo"" ""xxo"" ""xxo"" "" "" -> "" o "" -> "" o "" -> "" o "" -> ""xo "" -> ""xo "" "" "" "" "" "" "" "" "" "" "" ""o "" example 3: input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]] output: ""draw"" explanation: the game ends in a draw since there are no moves to make. ""xxo"" ""oox"" ""xox"" example 4: input: moves = [[0,0],[1,1]] output: ""pending"" explanation: the game has not finished yet. ""x "" "" o "" "" """,`1 <= moves.length <= 9` `moves[i].length == 2` `0 <= moves[i][j] <= 2` there are no repeated elements on `moves`. `moves` follow the rules of tic tac toe.,
1276,Number of Burgers with No Waste of Ingredients,"Given two integers `tomatoSlices` and `cheeseSlices`. The ingredients of different burgers are as follows:
Jumbo Burger: 4 tomato slices and 1 cheese slice.

Small Burger: 2 Tomato slices and 1 cheese slice.

Return `[total_jumbo, total_small]` so that the number of remaining `tomatoSlices` equal to 0 and the number of remaining `cheeseSlices` equal to 0. If it is not possible to make the remaining `tomatoSlices` and `cheeseSlices` equal to 0 return `[]`.


Example 1:
Input: tomatoSlices = 16, cheeseSlices = 7
Output: [1,6]
Explantion: To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese. There will be no remaining ingredients.


Example 2:
Input: tomatoSlices = 17, cheeseSlices = 4
Output: []
Explantion: There will be no way to use all ingredients to make small and jumbo burgers.


Example 3:
Input: tomatoSlices = 4, cheeseSlices = 17
Output: []
Explantion: Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.


Example 4:
Input: tomatoSlices = 0, cheeseSlices = 0
Output: [0,0]

Example 5:
Input: tomatoSlices = 2, cheeseSlices = 1
Output: [0,1]

Constraints:
`0 <= tomatoSlices <= 10^7`
`0 <= cheeseSlices <= 10^7`",Medium,https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients,Delivery Hero,"Math,Greedy",141,,"given two integers `tomatoslices` and `cheeseslices`. the ingredients of different burgers are as follows: jumbo burger: 4 tomato slices and 1 cheese slice. small burger: 2 tomato slices and 1 cheese slice. return `[total_jumbo, total_small]` so that the number of remaining `tomatoslices` equal to 0 and the number of remaining `cheeseslices` equal to 0. if it is not possible to make the remaining `tomatoslices` and `cheeseslices` equal to 0 return `[]`.","input: tomatoslices = 16, cheeseslices = 7 output: [1,6] explantion: to make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese. there will be no remaining ingredients. example 2: input: tomatoslices = 17, cheeseslices = 4 output: [] explantion: there will be no way to use all ingredients to make small and jumbo burgers. example 3: input: tomatoslices = 4, cheeseslices = 17 output: [] explantion: making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining. example 4: input: tomatoslices = 0, cheeseslices = 0 output: [0,0] example 5: input: tomatoslices = 2, cheeseslices = 1 output: [0,1]",`0 <= tomatoslices <= 10^7` `0 <= cheeseslices <= 10^7`,
1277,Count Square Submatrices with All Ones,"Given a `m * n` matrix of ones and zeros, return how many square submatrices have all ones.


Example 1:
Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.

There are 4 squares of side 2.

There is  1 square of side 3.

Total number of squares = 10 + 4 + 1 = 15.


Example 2:
Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.


Constraints:
`1 <= arr.length <= 300`
`1 <= arr[0].length <= 300`
`0 <= arr[i][j] <= 1`",Medium,https://leetcode.com/problems/count-square-submatrices-with-all-ones,"Google,Amazon","Array,Dynamic Programming",1777,,"given a `m * n` matrix of ones and zeros, return how many square submatrices have all ones.","input: matrix = [ [0,1,1,1], [1,1,1,1], [0,1,1,1] ] output: 15 explanation: there are 10 squares of side 1. there are 4 squares of side 2. there is 1 square of side 3. total number of squares = 10 + 4 + 1 = 15. example 2: input: matrix = [ [1,0,1], [1,1,0], [1,1,0] ] output: 7 explanation: there are 6 squares of side 1. there is 1 square of side 2. total number of squares = 6 + 1 = 7.",`1 <= arr.length <= 300` `1 <= arr[0].length <= 300` `0 <= arr[i][j] <= 1`,
1278,Palindrome Partitioning III,"You are given a string `s` containing lowercase letters and an integer `k`. You need to :
First, change some characters of `s` to other lowercase English letters.

Then divide `s` into `k` non-empty disjoint substrings such that each substring is palindrome.

Return the minimal number of characters that you need to change to divide the string.


Example 1:
Input: s = ""abc"", k = 2
Output: 1
Explanation: You can split the string into ""ab"" and ""c"", and change 1 character in ""ab"" to make it palindrome.


Example 2:
Input: s = ""aabbc"", k = 3
Output: 0
Explanation: You can split the string into ""aa"", ""bb"" and ""c"", all of them are palindrome.


Example 3:
Input: s = ""leetcode"", k = 8
Output: 0

Constraints:
`1 <= k <= s.length <= 100`.

`s` only contains lowercase English letters.",Hard,https://leetcode.com/problems/palindrome-partitioning-iii,"Uber,Apple",Dynamic Programming,426,"[Palindrome Partitioning IV, /problems/palindrome-partitioning-iv/, Hard]","you are given a string `s` containing lowercase letters and an integer `k`. you need to : first, change some characters of `s` to other lowercase english letters. then divide `s` into `k` non-empty disjoint substrings such that each substring is palindrome. return the minimal number of characters that you need to change to divide the string.","input: s = ""abc"", k = 2 output: 1 explanation: you can split the string into ""ab"" and ""c"", and change 1 character in ""ab"" to make it palindrome. example 2: input: s = ""aabbc"", k = 3 output: 0 explanation: you can split the string into ""aa"", ""bb"" and ""c"", all of them are palindrome. example 3: input: s = ""leetcode"", k = 8 output: 0",`1 <= k <= s.length <= 10^0`. `s` only contains lowercase english letters.,
1279,Traffic Light Controlled Intersection,"There is an intersection of two roads. First road is road A where cars travel from North to South in direction 1 and from South to North in direction 2. Second road is road B where cars travel from West to East in direction 3 and from East to West in direction 4.

There is a traffic light located on each road before the intersection. A traffic light can either be green or red.

Green means cars can cross the intersection in both directions of the road.

Red means cars in both directions cannot cross the intersection and must wait until the light turns green.

The traffic lights cannot be green on both roads at the same time. That means when the light is green on road A, it is red on road B and when the light is green on road B, it is red on road A.

Initially, the traffic light is green on road A and red on road B. When the light is green on one road, all cars can cross the intersection in both directions until the light becomes green on the other road. No two cars traveling on different roads should cross at the same time.

Design a deadlock-free traffic light controlled system at this intersection.

Implement the function `void carArrived(carId, roadId, direction, turnGreen, crossCar)` where:
`carId` is the id of the car that arrived.

`roadId` is the id of the road that the car travels on.

`direction` is the direction of the car.

`turnGreen` is a function you can call to turn the traffic light to green on the current road.

`crossCar` is a function you can call to let the current car cross the intersection.

Your answer is considered correct if it avoids cars deadlock in the intersection. Turning the light green on a road when it was already green is considered a wrong answer.


Example 1:
Input: cars = [1,3,5,2,4], directions = [2,1,2,4,3], arrivalTimes = [10,20,30,40,50]
Output: [
""Car 1 Has Passed Road A In Direction 2"",    // Traffic light on road A is green, car 1 can cross the intersection.

""Car 3 Has Passed Road A In Direction 1"",    // Car 3 crosses the intersection as the light is still green.

""Car 5 Has Passed Road A In Direction 2"",    // Car 5 crosses the intersection as the light is still green.

""Traffic Light On Road B Is Green"",          // Car 2 requests green light for road B.

""Car 2 Has Passed Road B In Direction 4"",    // Car 2 crosses as the light is green on road B now.

""Car 4 Has Passed Road B In Direction 3""     // Car 4 crosses the intersection as the light is still green.

]

Example 2:
Input: cars = [1,2,3,4,5], directions = [2,4,3,3,1], arrivalTimes = [10,20,30,40,40]
Output: [
""Car 1 Has Passed Road A In Direction 2"",    // Traffic light on road A is green, car 1 can cross the intersection.

""Traffic Light On Road B Is Green"",          // Car 2 requests green light for road B.

""Car 2 Has Passed Road B In Direction 4"",    // Car 2 crosses as the light is green on road B now.

""Car 3 Has Passed Road B In Direction 3"",    // Car 3 crosses as the light is green on road B now.

""Traffic Light On Road A Is Green"",          // Car 5 requests green light for road A.

""Car 5 Has Passed Road A In Direction 1"",    // Car 5 crosses as the light is green on road A now.

""Traffic Light On Road B Is Green"",          // Car 4 requests green light for road B. Car 4 blocked until car 5 crosses and then traffic light is green on road B.

""Car 4 Has Passed Road B In Direction 3""     // Car 4 crosses as the light is green on road B now.

]
Explanation: This is a dead-lock free scenario. Note that the scenario when car 4 crosses before turning light into green on road A and allowing car 5 to pass is also correct and Accepted scenario.


Constraints:
`1 <= cars.length <= 20`
`cars.length = directions.length`
`cars.length = arrivalTimes.length`
All values of `cars` are unique
`1 <= directions[i] <= 4`
`arrivalTimes` is non-decreasing",Easy,https://leetcode.com/problems/traffic-light-controlled-intersection,Amazon,,36,,"there is an intersection of two roads. first road is road a where cars travel from north to south in direction 1 and from south to north in direction 2. second road is road b where cars travel from west to east in direction 3 and from east to west in direction 4. there is a traffic light located on each road before the intersection. a traffic light can either be green or red. green means cars can cross the intersection in both directions of the road. red means cars in both directions cannot cross the intersection and must wait until the light turns green. the traffic lights cannot be green on both roads at the same time. that means when the light is green on road a, it is red on road b and when the light is green on road b, it is red on road a. initially, the traffic light is green on road a and red on road b. when the light is green on one road, all cars can cross the intersection in both directions until the light becomes green on the other road. no two cars traveling on different roads should cross at the same time. design a deadlock-free traffic light controlled system at this intersection. implement the function `void cararrived(carid, roadid, direction, turngreen, crosscar)` where: `carid` is the id of the car that arrived. `roadid` is the id of the road that the car travels on. `direction` is the direction of the car. `turngreen` is a function you can call to turn the traffic light to green on the current road. `crosscar` is a function you can call to let the current car cross the intersection. your answer is considered correct if it avoids cars deadlock in the intersection. turning the light green on a road when it was already green is considered a wrong answer.","input: cars = [1,3,5,2,4], directions = [2,1,2,4,3], arrivaltimes = [10,20,30,40,50] output: [ ""car 1 has passed road a in direction 2"", // traffic light on road a is green, car 1 can cross the intersection. ""car 3 has passed road a in direction 1"", // car 3 crosses the intersection as the light is still green. ""car 5 has passed road a in direction 2"", // car 5 crosses the intersection as the light is still green. ""traffic light on road b is green"", // car 2 requests green light for road b. ""car 2 has passed road b in direction 4"", // car 2 crosses as the light is green on road b now. ""car 4 has passed road b in direction 3"" // car 4 crosses the intersection as the light is still green. ] example 2: input: cars = [1,2,3,4,5], directions = [2,4,3,3,1], arrivaltimes = [10,20,30,40,40] output: [ ""car 1 has passed road a in direction 2"", // traffic light on road a is green, car 1 can cross the intersection. ""traffic light on road b is green"", // car 2 requests green light for road b. ""car 2 has passed road b in direction 4"", // car 2 crosses as the light is green on road b now. ""car 3 has passed road b in direction 3"", // car 3 crosses as the light is green on road b now. ""traffic light on road a is green"", // car 5 requests green light for road a. ""car 5 has passed road a in direction 1"", // car 5 crosses as the light is green on road a now. ""traffic light on road b is green"", // car 4 requests green light for road b. car 4 blocked until car 5 crosses and then traffic light is green on road b. ""car 4 has passed road b in direction 3"" // car 4 crosses as the light is green on road b now. ] explanation: this is a dead-lock free scenario. note that the scenario when car 4 crosses before turning light into green on road a and allowing car 5 to pass is also correct and accepted scenario.",`1 <= cars.length <= 20` `cars.length = directions.length` `cars.length = arrivaltimes.length` all values of `cars` are unique `1 <= directions[i] <= 4` `arrivaltimes` is non-decreasing,
1280,Students and Examinations,SQL Schema,Easy,https://leetcode.com/problems/students-and-examinations,Roblox,,155,,sql schema,,,
1281,Subtract the Product and Sum of Digits of an Integer,"Given an integer number `n`, return the difference between the product of its digits and the sum of its digits.


Example 1:
Input: n = 234
Output: 15 
Explanation: 
Product of digits = 2 * 3 * 4 = 24 
Sum of digits = 2 + 3 + 4 = 9 
Result = 24 - 9 = 15

Example 2:
Input: n = 4421
Output: 21
Explanation: 
Product of digits = 4 * 4 * 2 * 1 = 32 
Sum of digits = 4 + 4 + 2 + 1 = 11 
Result = 32 - 11 = 21

Constraints:
`1 <= n <= 10^5`",Easy,https://leetcode.com/problems/subtract-the-product-and-sum-of-digits-of-an-integer,"Quora,Uber",Math,509,,"given an integer number `n`, return the difference between the product of its digits and the sum of its digits.",input: n = 234 output: 15 explanation: product of digits = 2 * 3 * 4 = 24 sum of digits = 2 + 3 + 4 = 9 result = 24 - 9 = 15 example 2: input: n = 4421 output: 21 explanation: product of digits = 4 * 4 * 2 * 1 = 32 sum of digits = 4 + 4 + 2 + 1 = 11 result = 32 - 11 = 21,`1 <= n <= 10^5`,
1282,Group the People Given the Group Size They Belong To,"There are `n` people that are split into some unknown number of groups. Each person is labeled with a unique ID from `0` to `n - 1`.

You are given an integer array `groupSizes`, where `groupSizes[i]` is the size of the group that person `i` is in. For example, if `groupSizes[1] = 3`, then person `1` must be in a group of size `3`.

Return a list of groups such that each person `i` is in a group of size `groupSizes[i]`.

Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.


Example 1:
Input: groupSizes = [3,3,3,3,3,1,3]
Output: [[5],[0,1,2],[3,4,6]]
Explanation: 
The first group is [5]. The size is 1, and groupSizes[5] = 1.

The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.

The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.

Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].


Example 2:
Input: groupSizes = [2,1,3,3,3,2]
Output: [[1],[0,5],[2,3,4]]

Constraints:
`groupSizes.length == n`
`1 <= n <= 500`
`1 <= groupSizes[i] <= n`",Medium,https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to,Roblox,Greedy,531,,"there are `n` people that are split into some unknown number of groups. each person is labeled with a unique id from `0` to `n - 1`. you are given an integer array `groupsizes`, where `groupsizes[i]` is the size of the group that person `i` is in. for example, if `groupsizes[1] = 3`, then person `1` must be in a group of size `3`. return a list of groups such that each person `i` is in a group of size `groupsizes[i]`. each person should appear in exactly one group, and every person must be in a group. if there are multiple answers, return any of them. it is guaranteed that there will be at least one valid solution for the given input.","input: groupsizes = [3,3,3,3,3,1,3] output: [[5],[0,1,2],[3,4,6]] explanation: the first group is [5]. the size is 1, and groupsizes[5] = 1. the second group is [0,1,2]. the size is 3, and groupsizes[0] = groupsizes[1] = groupsizes[2] = 3. the third group is [3,4,6]. the size is 3, and groupsizes[3] = groupsizes[4] = groupsizes[6] = 3. other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]]. example 2: input: groupsizes = [2,1,3,3,3,2] output: [[1],[0,5],[2,3,4]]",`groupsizes.length == n` `1 <= n <= 500` `1 <= groupsizes[i] <= n`,
1283,Find the Smallest Divisor Given a Threshold,"Given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. Find the smallest `divisor` such that the result mentioned above is less than or equal to `threshold`.

Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: `7/3 = 3` and `10/2 = 5`).

It is guaranteed that there will be an answer.


Example 1:
Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 

Example 2:
Input: nums = [44,22,33,11,1], threshold = 5
Output: 44

Example 3:
Input: nums = [21212,10101,12121], threshold = 1000000
Output: 1

Example 4:
Input: nums = [2,3,5,7,11], threshold = 11
Output: 3

Constraints:
`1 <= nums.length <= 5 * 104`
`1 <= nums[i] <= 106`
`nums.length <= threshold <= 106`",Medium,https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold,"Salesforce,Google",Binary Search,716,,"given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. find the smallest `divisor` such that the result mentioned above is less than or equal to `threshold`. each result of the division is rounded to the nearest integer greater than or equal to that element. (for","`7/3 = 3` and `10/2 = 5`). it is guaranteed that there will be an answer. example 1: input: nums = [1,2,5,9], threshold = 6 output: 5 explanation: we can get a sum to 17 (1+2+5+9) if the divisor is 1. if the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). example 2: input: nums = [44,22,33,11,1], threshold = 5 output: 44 example 3: input: nums = [21212,10101,12121], threshold = 1000000 output: 1 example 4: input: nums = [2,3,5,7,11], threshold = 11 output: 3",`1 <= nums.length <= 5 * 10^4` `1 <= nums[i] <= 10^6` `nums.length <= threshold <= 10^6`,
1284,Minimum Number of Flips to Convert Binary Matrix to Zero Matrix,"Given a `m x n` binary matrix `mat`. In one step, you can choose one cell and flip it and all the four neighbours of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighboors if they share one edge.

Return the minimum number of steps required to convert `mat` to a zero matrix or -1 if you cannot.

Binary matrix is a matrix with all cells equal to 0 or 1 only.

Zero matrix is a matrix with all cells equal to 0.


Example 1:
Input: mat = [[0,0],[0,1]]
Output: 3
Explanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.


Example 2:
Input: mat = [[0]]
Output: 0
Explanation: Given matrix is a zero matrix. We don't need to change it.


Example 3:
Input: mat = [[1,1,1],[1,0,1],[0,0,0]]
Output: 6

Example 4:
Input: mat = [[1,0,0],[1,0,0]]
Output: -1
Explanation: Given matrix can't be a zero matrix

Constraints:
`m == mat.length`
`n == mat[0].length`
`1 <= m <= 3`
`1 <= n <= 3`
`mat[i][j]` is 0 or 1.",Hard,https://leetcode.com/problems/minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix,"Google,Airbnb",Breadth-first Search,291,,"given a `m x n` binary matrix `mat`. in one step, you can choose one cell and flip it and all the four neighbours of it if they exist (flip is changing 1 to 0 and 0 to 1). a pair of cells are called neighboors if they share one edge. return the minimum number of steps required to convert `mat` to a zero matrix or -1 if you cannot. binary matrix is a matrix with all cells equal to 0 or 1 only. zero matrix is a matrix with all cells equal to 0.","input: mat = [[0,0],[0,1]] output: 3 explanation: one possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown. example 2: input: mat = [[0]] output: 0 explanation: given matrix is a zero matrix. we don't need to change it. example 3: input: mat = [[1,1,1],[1,0,1],[0,0,0]] output: 6 example 4: input: mat = [[1,0,0],[1,0,0]] output: -1 explanation: given matrix can't be a zero matrix",`m == mat.length` `n == mat[0].length` `1 <= m <= 3` `1 <= n <= 3` `mat[i][j]` is 0 or 1.,
1285,Find the Start and End Number of Continuous Ranges,SQL Schema,Medium,https://leetcode.com/problems/find-the-start-and-end-number-of-continuous-ranges,"Amazon,Microsoft",,200,,sql schema,,,
1286,Iterator for Combination,"Design the `CombinationIterator` class:
`CombinationIterator(string characters, int combinationLength)` Initializes the object with a string `characters` of sorted distinct lowercase English letters and a number `combinationLength` as arguments.

`next()` Returns the next combination of length `combinationLength` in lexicographical order.

`hasNext()` Returns `true` if and only if there exists a next combination.


Example 1:
Input
[""CombinationIterator"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext""]
[[""abc"", 2], [], [], [], [], [], []]
Output
[null, ""ab"", true, ""ac"", true, ""bc"", false]
Explanation
CombinationIterator itr = new CombinationIterator(""abc"", 2);
itr.next();    // return ""ab""
itr.hasNext(); // return True
itr.next();    // return ""ac""
itr.hasNext(); // return True
itr.next();    // return ""bc""
itr.hasNext(); // return False

Constraints:
`1 <= combinationLength <= characters.length <= 15`
All the characters of `characters` are unique.

At most `104` calls will be made to `next` and `hasNext`.

It's guaranteed that all calls of the function `next` are valid.",Medium,https://leetcode.com/problems/iterator-for-combination,"Amazon,Google","Backtracking,Design",581,,"design the `combinationiterator` class: `combinationiterator(string characters, int combinationlength)` initializes the object with a string `characters` of sorted distinct lowercase english letters and a number `combinationlength` as arguments. `next()` returns the next combination of length `combinationlength` in lexicographical order. `hasnext()` returns `true` if and only if there exists a next combination.","input [""combinationiterator"", ""next"", ""hasnext"", ""next"", ""hasnext"", ""next"", ""hasnext""] [[""abc"", 2], [], [], [], [], [], []] output [null, ""ab"", true, ""ac"", true, ""bc"", false] explanation combinationiterator itr = new combinationiterator(""abc"", 2); itr.next(); // return ""ab"" itr.hasnext(); // return true itr.next(); // return ""ac"" itr.hasnext(); // return true itr.next(); // return ""bc"" itr.hasnext(); // return false",`1 <= combinationlength <= characters.length <= 15` all the characters of `characters` are unique. at most `10^4` calls will be made to `next` and `hasnext`. it's guaranteed that all calls of the function `next` are valid.,
1287,Element Appearing More Than 25% In Sorted Array,"Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time.

Return that integer.


Example 1:
Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6

Constraints:
`1 <= arr.length <= 10^4`
`0 <= arr[i] <= 10^5`",Easy,https://leetcode.com/problems/element-appearing-more-than-25-in-sorted-array,Facebook,Array,438,,"given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time. return that integer.","input: arr = [1,2,2,6,6,6,6,7,10] output: 6",`1 <= arr.length <= 10^4` `0 <= arr[i] <= 10^5`,
1288,Remove Covered Intervals,"Given a list of `intervals`, remove all intervals that are covered by another interval in the list.

Interval `[a,b)` is covered by interval `[c,d)` if and only if `c <= a` and `b <= d`.

After doing so, return the number of remaining intervals.


Example 1:
Input: intervals = [[1,4],[3,6],[2,8]]
Output: 2
Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.


Example 2:
Input: intervals = [[1,4],[2,3]]
Output: 1

Example 3:
Input: intervals = [[0,10],[5,12]]
Output: 2

Example 4:
Input: intervals = [[3,10],[4,10],[5,11]]
Output: 2

Example 5:
Input: intervals = [[1,2],[1,4],[3,4]]
Output: 1

Constraints:
`1 <= intervals.length <= 1000`
`intervals[i].length == 2`
`0 <= intervals[i][0] < intervals[i][1] <= 10^5`
All the intervals are unique.",Medium,https://leetcode.com/problems/remove-covered-intervals,Amazon,"Greedy,Sort,Line Sweep",632,,"given a list of `intervals`, remove all intervals that are covered by another interval in the list. interval `[a,b)` is covered by interval `[c,d)` if and only if `c <= a` and `b <= d`. after doing so, return the number of remaining intervals.","input: intervals = [[1,4],[3,6],[2,8]] output: 2 explanation: interval [3,6] is covered by [2,8], therefore it is removed. example 2: input: intervals = [[1,4],[2,3]] output: 1 example 3: input: intervals = [[0,10],[5,12]] output: 2 example 4: input: intervals = [[3,10],[4,10],[5,11]] output: 2 example 5: input: intervals = [[1,2],[1,4],[3,4]] output: 1",`1 <= intervals.length <= 1000` `intervals[i].length == 2` `0 <= intervals[i][0] < intervals[i][1] <= 10^5` all the intervals are unique.,
1289,Minimum Falling Path Sum II,"Given a square grid of integers `arr`, a falling path with non-zero shifts is a choice of exactly one element from each row of `arr`, such that no two elements chosen in adjacent rows are in the same column.

Return the minimum sum of a falling path with non-zero shifts.


Example 1:
Input: arr = [[1,2,3],[4,5,6],[7,8,9]]
Output: 13
Explanation: 
The possible falling paths are:
[1,5,9], [1,5,7], [1,6,7], [1,6,8],
[2,4,8], [2,4,9], [2,6,7], [2,6,8],
[3,4,8], [3,4,9], [3,5,7], [3,5,9]
The falling path with the smallest sum is [1,5,7], so the answer is 13.


Constraints:
`1 <= arr.length == arr[i].length <= 200`
`-99 <= arr[i][j] <= 99`",Hard,https://leetcode.com/problems/minimum-falling-path-sum-ii,Roblox,Dynamic Programming,370,"[Minimum Falling Path Sum, /problems/minimum-falling-path-sum/, Medium]","given a square grid of integers `arr`, a falling path with non-zero shifts is a choice of exactly one element from each row of `arr`, such that no two elements chosen in adjacent rows are in the same column. return the minimum sum of a falling path with non-zero shifts.","input: arr = [[1,2,3],[4,5,6],[7,8,9]] output: 13 explanation: the possible falling paths are: [1,5,9], [1,5,7], [1,6,7], [1,6,8], [2,4,8], [2,4,9], [2,6,7], [2,6,8], [3,4,8], [3,4,9], [3,5,7], [3,5,9] the falling path with the smallest sum is [1,5,7], so the answer is 13.",`1 <= arr.length == arr[i].length <= 200` `-99 <= arr[i][j] <= 99`,
1290,Convert Binary Number in a Linked List to Integer,"Given `head` which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.

Return the decimal value of the number in the linked list.


Example 1:
Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10

Example 2:
Input: head = [0]
Output: 0

Example 3:
Input: head = [1]
Output: 1

Example 4:
Input: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]
Output: 18880

Example 5:
Input: head = [0,0]
Output: 0

Constraints:
The Linked List is not empty.

Number of nodes will not exceed `30`.

Each node's value is either `0` or `1`.",Easy,https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer,"JPMorgan,Bloomberg,Citrix,Microsoft","Linked List,Bit Manipulation",1141,,given `head` which is a reference node to a singly-linked list. the value of each node in the linked list is either 0 or 1. the linked list holds the binary representation of a number. return the decimal value of the number in the linked list.,"input: head = [1,0,1] output: 5 explanation: (101) in base 2 = (5) in base 10 example 2: input: head = [0] output: 0 example 3: input: head = [1] output: 1 example 4: input: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0] output: 18880 example 5: input: head = [0,0] output: 0",the linked list is not empty. number of nodes will not exceed `30`. each node's value is either `0` or `1`.,
1291,Sequential Digits,"An integer has sequential digits if and only if each digit in the number is one more than the previous digit.

Return a sorted list of all the integers in the range `[low, high]` inclusive that have sequential digits.


Example 1:
Input: low = 100, high = 300
Output: [123,234]

Example 2:
Input: low = 1000, high = 13000
Output: [1234,2345,3456,4567,5678,6789,12345]

Constraints:
`10 <= low <= high <= 10^9`",Medium,https://leetcode.com/problems/sequential-digits,Amazon,Backtracking,528,,"an integer has sequential digits if and only if each digit in the number is one more than the previous digit. return a sorted list of all the integers in the range `[low, high]` inclusive that have sequential digits.","input: low = 100, high = 300 output: [123,234] example 2: input: low = 1000, high = 13000 output: [1234,2345,3456,4567,5678,6789,12345]",`10 <= low <= high <= 10^9`,
1292,Maximum Side Length of a Square with Sum Less than or Equal to Threshold,"Given a `m x n` matrix `mat` and an integer `threshold`. Return the maximum side-length of a square with a sum less than or equal to `threshold` or return 0 if there is no such square.


Example 1:
Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4
Output: 2
Explanation: The maximum side length of square with sum less than 4 is 2 as shown.


Example 2:
Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1
Output: 0

Example 3:
Input: mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6
Output: 3

Example 4:
Input: mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184
Output: 2

Constraints:
`1 <= m, n <= 300`
`m == mat.length`
`n == mat[i].length`
`0 <= mat[i][j] <= 10000`
`0 <= threshold <= 10^5`",Medium,https://leetcode.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold,"Google,Roblox","Array,Binary Search",504,,given a `m x n` matrix `mat` and an integer `threshold`. return the maximum side-length of a square with a sum less than or equal to `threshold` or return 0 if there is no such square.,"input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4 output: 2 explanation: the maximum side length of square with sum less than 4 is 2 as shown. example 2: input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1 output: 0 example 3: input: mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6 output: 3 example 4: input: mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184 output: 2","`1 <= m, n <= 300` `m == mat.length` `n == mat[i].length` `0 <= mat[i][j] <= 10000` `0 <= threshold <= 10^5`",
1293,Shortest Path in a Grid with Obstacles Elimination,"Given a `m * n` grid, where each cell is either `0` (empty) or `1` (obstacle). In one step, you can move up, down, left or right from and to an empty cell.

Return the minimum number of steps to walk from the upper left corner `(0, 0)` to the lower right corner `(m-1, n-1)` given that you can eliminate at most `k` obstacles. If it is not possible to find such walk return -1.


Example 1:
Input: 
grid = 
[[0,0,0],
 [1,1,0],
 [0,0,0],
 [0,1,1],
 [0,0,0]], 
k = 1
Output: 6
Explanation: 
The shortest path without eliminating any obstacle is 10. 
The shortest path with one obstacle elimination at position (3,2) is 6. Such path is `(0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2)`.


Example 2:
Input: 
grid = 
[[0,1,1],
 [1,1,1],
 [1,0,0]], 
k = 1
Output: -1
Explanation: 
We need to eliminate at least two obstacles to find such a walk.


Constraints:
`grid.length == m`
`grid[0].length == n`
`1 <= m, n <= 40`
`1 <= k <= m*n`
`grid[i][j] == 0 or 1`
`grid[0][0] == grid[m-1][n-1] == 0`",Hard,https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination,"Google,ByteDance,Amazon",Breadth-first Search,724,"[Shortest Path to Get Food, /problems/shortest-path-to-get-food/, Medium]","given a `m * n` grid, where each cell is either `0` (empty) or `1` (obstacle). in one step, you can move up, down, left or right from and to an empty cell. return the minimum number of steps to walk from the upper left corner `(0, 0)` to the lower right corner `(m-1, n-1)` given that you can eliminate at most `k` obstacles. if it is not possible to find such walk return -1.","input: grid = [[0,0,0], [1,1,0], [0,0,0], [0,1,1], [0,0,0]], k = 1 output: 6 explanation: the shortest path without eliminating any obstacle is 10. the shortest path with one obstacle elimination at position (3,2) is 6. such path is `(0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2)`. example 2: input: grid = [[0,1,1], [1,1,1], [1,0,0]], k = 1 output: -1 explanation: we need to eliminate at least two obstacles to find such a walk.","`grid.length == m` `grid[0].length == n` `1 <= m, n <= 40` `1 <= k <= m*n` `grid[i][j] == 0 or 1` `grid[0][0] == grid[m-1][n-1] == 0`",
1294,Weather Type in Each Country,SQL Schema,Easy,https://leetcode.com/problems/weather-type-in-each-country,Point72,,48,,sql schema,,,
1295,Find Numbers with Even Number of Digits,"Given an array `nums` of integers, return how many of them contain an even number of digits.


Example 1:
Input: nums = [12,345,2,6,7896]
Output: 2
Explanation: 
12 contains 2 digits (even number of digits). 
345 contains 3 digits (odd number of digits). 
2 contains 1 digit (odd number of digits). 
6 contains 1 digit (odd number of digits). 
7896 contains 4 digits (even number of digits). 
Therefore only 12 and 7896 contain an even number of digits.


Example 2:
Input: nums = [555,901,482,1771]
Output: 1 
Explanation: 
Only 1771 contains an even number of digits.


Constraints:
`1 <= nums.length <= 500`
`1 <= nums[i] <= 10^5`",Easy,https://leetcode.com/problems/find-numbers-with-even-number-of-digits,eBay,Array,637,,"given an array `nums` of integers, return how many of them contain an even number of digits.","input: nums = [12,345,2,6,7896] output: 2 explanation: 12 contains 2 digits (even number of digits). 345 contains 3 digits (odd number of digits). 2 contains 1 digit (odd number of digits). 6 contains 1 digit (odd number of digits). 7896 contains 4 digits (even number of digits). therefore only 12 and 7896 contain an even number of digits. example 2: input: nums = [555,901,482,1771] output: 1 explanation: only 1771 contains an even number of digits.",`1 <= nums.length <= 500` `1 <= nums[i] <= 10^5`,
1296,Divide Array in Sets of K Consecutive Numbers,"Given an array of integers `nums` and a positive integer `k`, find whether it's possible to divide this array into sets of `k` consecutive numbers
Return `True` if it is possible. Otherwise, return `False`.


Example 1:
Input: nums = [1,2,3,3,4,4,5,6], k = 4
Output: true
Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].


Example 2:
Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
Output: true
Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].


Example 3:
Input: nums = [3,3,2,2,1,1], k = 3
Output: true

Example 4:
Input: nums = [1,2,3,4], k = 3
Output: false
Explanation: Each array should be divided in subarrays of size 3.


Constraints:
`1 <= k <= nums.length <= 105`
`1 <= nums[i] <= 109`
Note: This question is the same as 846: https://leetcode.com/problems/hand-of-straights/",Medium,https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers,"Goldman Sachs,ByteDance","Array,Greedy",678,"[Split Array into Consecutive Subsequences, /problems/split-array-into-consecutive-subsequences/, Medium]","given an array of integers `nums` and a positive integer `k`, find whether it's possible to divide this array into sets of `k` consecutive numbers return `true` if it is possible. otherwise, return `false`.","input: nums = [1,2,3,3,4,4,5,6], k = 4 output: true explanation: array can be divided into [1,2,3,4] and [3,4,5,6]. example 2: input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3 output: true explanation: array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11]. example 3: input: nums = [3,3,2,2,1,1], k = 3 output: true example 4: input: nums = [1,2,3,4], k = 3 output: false explanation: each array should be divided in subarrays of size 3.",`1 <= k <= nums.length <= 10^5` `1 <= nums[i] <= 10^9` note: this question is the same as 846: https://leetcode.com/problems/hand-of-straights/,
1297,Maximum Number of Occurrences of a Substring,"Given a string `s`, return the maximum number of ocurrences of any substring under the following rules:
The number of unique characters in the substring must be less than or equal to `maxLetters`.

The substring size must be between `minSize` and `maxSize` inclusive.


Example 1:
Input: s = ""aababcaab"", maxLetters = 2, minSize = 3, maxSize = 4
Output: 2
Explanation: Substring ""aab"" has 2 ocurrences in the original string.

It satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).


Example 2:
Input: s = ""aaaa"", maxLetters = 1, minSize = 3, maxSize = 3
Output: 2
Explanation: Substring ""aaa"" occur 2 times in the string. It can overlap.


Example 3:
Input: s = ""aabcabcab"", maxLetters = 2, minSize = 2, maxSize = 3
Output: 3

Example 4:
Input: s = ""abcde"", maxLetters = 2, minSize = 3, maxSize = 3
Output: 0

Constraints:
`1 <= s.length <= 10^5`
`1 <= maxLetters <= 26`
`1 <= minSize <= maxSize <= min(26, s.length)`
`s` only contains lowercase English letters.",Medium,https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring,"Twitter,Facebook","String,Bit Manipulation",331,,"given a string `s`, return the maximum number of ocurrences of any substring under the following rules: the number of unique characters in the substring must be less than or equal to `maxletters`. the substring size must be between `minsize` and `maxsize` inclusive.","input: s = ""aababcaab"", maxletters = 2, minsize = 3, maxsize = 4 output: 2 explanation: substring ""aab"" has 2 ocurrences in the original string. it satisfies the conditions, 2 unique letters and size 3 (between minsize and maxsize). example 2: input: s = ""aaaa"", maxletters = 1, minsize = 3, maxsize = 3 output: 2 explanation: substring ""aaa"" occur 2 times in the string. it can overlap. example 3: input: s = ""aabcabcab"", maxletters = 2, minsize = 2, maxsize = 3 output: 3 example 4: input: s = ""abcde"", maxletters = 2, minsize = 3, maxsize = 3 output: 0","`1 <= s.length <= 10^5` `1 <= maxletters <= 26` `1 <= minsize <= maxsize <= min(26, s.length)` `s` only contains lowercase english letters.",
1298,Maximum Candies You Can Get from Boxes,"Given `n` boxes, each box is given in the format `[status, candies, keys, containedBoxes]` where:
`status[i]`: an integer which is 1 if `box[i]` is open and 0 if `box[i]` is closed.

`candies[i]`: an integer representing the number of candies in `box[i]`.

`keys[i]`: an array contains the indices of the boxes you can open with the key in `box[i]`.

`containedBoxes[i]`: an array contains the indices of the boxes found in `box[i]`.

You will start with some boxes given in `initialBoxes` array. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.

Return the maximum number of candies you can get following the rules above.


Example 1:
Input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]
Output: 16
Explanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2. Box 1 is closed and you don't have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.

In box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.

Total number of candies collected = 7 + 4 + 5 = 16 candy.


Example 2:
Input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]
Output: 6
Explanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys. The total number of candies will be 6.


Example 3:
Input: status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]
Output: 1

Example 4:
Input: status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []
Output: 0

Example 5:
Input: status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]
Output: 7

Constraints:
`1 <= status.length <= 1000`
`status.length == candies.length == keys.length == containedBoxes.length == n`
`status[i]` is `0` or `1`.

`1 <= candies[i] <= 1000`
`0 <= keys[i].length <= status.length`
`0 <= keys[i][j] < status.length`
All values in `keys[i]` are unique.

`0 <= containedBoxes[i].length <= status.length`
`0 <= containedBoxes[i][j] < status.length`
All values in `containedBoxes[i]` are unique.

Each box is contained in one box at most.

`0 <= initialBoxes.length <= status.length`
`0 <= initialBoxes[i] < status.length`",Hard,https://leetcode.com/problems/maximum-candies-you-can-get-from-boxes,Airbnb,Breadth-first Search,118,,"given `n` boxes, each box is given in the format `[status, candies, keys, containedboxes]` where: `status[i]`: an integer which is 1 if `box[i]` is open and 0 if `box[i]` is closed. `candies[i]`: an integer representing the number of candies in `box[i]`. `keys[i]`: an array contains the indices of the boxes you can open with the key in `box[i]`. `containedboxes[i]`: an array contains the indices of the boxes found in `box[i]`. you will start with some boxes given in `initialboxes` array. you can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it. return the maximum number of candies you can get following the rules above.","input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedboxes = [[1,2],[3],[],[]], initialboxes = [0] output: 16 explanation: you will be initially given box 0. you will find 7 candies in it and boxes 1 and 2. box 1 is closed and you don't have a key for it so you will open box 2. you will find 4 candies and a key to box 1 in box 2. in box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed. total number of candies collected = 7 + 4 + 5 = 16 candy. example 2: input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedboxes = [[1,2,3,4,5],[],[],[],[],[]], initialboxes = [0] output: 6 explanation: you have initially box 0. opening it you can find boxes 1,2,3,4 and 5 and their keys. the total number of candies will be 6. example 3: input: status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedboxes = [[],[],[]], initialboxes = [1] output: 1 example 4: input: status = [1], candies = [100], keys = [[]], containedboxes = [[]], initialboxes = [] output: 0 example 5: input: status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedboxes = [[],[],[]], initialboxes = [2,1,0] output: 7",`1 <= status.length <= 1000` `status.length == candies.length == keys.length == containedboxes.length == n` `status[i]` is `0` or `1`. `1 <= candies[i] <= 1000` `0 <= keys[i].length <= status.length` `0 <= keys[i][j] < status.length` all values in `keys[i]` are unique. `0 <= containedboxes[i].length <= status.length` `0 <= containedboxes[i][j] < status.length` all values in `containedboxes[i]` are unique. each box is contained in one box at most. `0 <= initialboxes.length <= status.length` `0 <= initialboxes[i] < status.length`,
1299,Replace Elements with Greatest Element on Right Side,"Given an array `arr`, replace every element in that array with the greatest element among the elements to its right, and replace the last element with `-1`.

After doing so, return the array.


Example 1:
Input: arr = [17,18,5,4,6,1]
Output: [18,6,6,6,1,-1]
Explanation: 
- index 0 --> the greatest element to the right of index 0 is index 1 (18).

- index 1 --> the greatest element to the right of index 1 is index 4 (6).

- index 2 --> the greatest element to the right of index 2 is index 4 (6).

- index 3 --> the greatest element to the right of index 3 is index 4 (6).

- index 4 --> the greatest element to the right of index 4 is index 5 (1).

- index 5 --> there are no elements to the right of index 5, so we put -1.


Example 2:
Input: arr = [400]
Output: [-1]
Explanation: There are no elements to the right of index 0.


Constraints:
`1 <= arr.length <= 104`
`1 <= arr[i] <= 105`",Easy,https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side,"Amazon,Adobe",Array,722,,"given an array `arr`, replace every element in that array with the greatest element among the elements to its right, and replace the last element with `-1`. after doing so, return the array.","input: arr = [17,18,5,4,6,1] output: [18,6,6,6,1,-1] explanation: - index 0 --> the greatest element to the right of index 0 is index 1 (18). - index 1 --> the greatest element to the right of index 1 is index 4 (6). - index 2 --> the greatest element to the right of index 2 is index 4 (6). - index 3 --> the greatest element to the right of index 3 is index 4 (6). - index 4 --> the greatest element to the right of index 4 is index 5 (1). - index 5 --> there are no elements to the right of index 5, so we put -1. example 2: input: arr = [400] output: [-1] explanation: there are no elements to the right of index 0.",`1 <= arr.length <= 10^4` `1 <= arr[i] <= 10^5`,
1300,Sum of Mutated Array Closest to Target,"Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`.

In case of a tie, return the minimum such integer.

Notice that the answer is not neccesarilly a number from `arr`.


Example 1:
Input: arr = [4,9,3], target = 10
Output: 3
Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.


Example 2:
Input: arr = [2,3,5], target = 10
Output: 5

Example 3:
Input: arr = [60864,25176,27249,21296,20204], target = 56803
Output: 11361

Constraints:
`1 <= arr.length <= 10^4`
`1 <= arr[i], target <= 10^5`",Medium,https://leetcode.com/problems/sum-of-mutated-array-closest-to-target,Bloomberg,"Array,Binary Search",458,,"given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`. in case of a tie, return the minimum such integer. notice that the answer is not neccesarilly a number from `arr`.","input: arr = [4,9,3], target = 10 output: 3 explanation: when using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer. example 2: input: arr = [2,3,5], target = 10 output: 5 example 3: input: arr = [60864,25176,27249,21296,20204], target = 56803 output: 11361","`1 <= arr.length <= 10^4` `1 <= arr[i], target <= 10^5`",
1301,Number of Paths with Max Score,"You are given a square `board` of characters. You can move on the board starting at the bottom right square marked with the character `'S'`.

You need to reach the top left square marked with the character `'E'`. The rest of the squares are labeled either with a numeric character `1, 2, ..., 9` or with an obstacle `'X'`. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.

Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo `10^9 + 7`.

In case there is no path, return `[0, 0]`.


Example 1:
Input: board = [""E23"",""2X2"",""12S""]
Output: [7,1]

Example 2:
Input: board = [""E12"",""1X1"",""21S""]
Output: [4,2]

Example 3:
Input: board = [""E11"",""XXX"",""11S""]
Output: [0,0]

Constraints:
`2 <= board.length == board[i].length <= 100`",Hard,https://leetcode.com/problems/number-of-paths-with-max-score,Samsung,Dynamic Programming,199,,"you are given a square `board` of characters. you can move on the board starting at the bottom right square marked with the character `'s'`. you need to reach the top left square marked with the character `'e'`. the rest of the squares are labeled either with a numeric character `1, 2, ..., 9` or with an obstacle `'x'`. in one move you can go up, left or up-left (diagonally) only if there is no obstacle there. return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo `10^9 + 7`. in case there is no path, return `[0, 0]`.","input: board = [""e23"",""2x2"",""12s""] output: [7,1] example 2: input: board = [""e12"",""1x1"",""21s""] output: [4,2] example 3: input: board = [""e11"",""xxx"",""11s""] output: [0,0]",`2 <= board.length == board[i].length <= 10^0`,
1302,Deepest Leaves Sum,"Given the `root` of a binary tree, return the sum of values of its deepest leaves.


Example 1:
Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15

Example 2:
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`1 <= Node.val <= 100`",Medium,https://leetcode.com/problems/deepest-leaves-sum,Google,"Tree,Depth-first Search",1073,,"given the `root` of a binary tree, return the sum of values of its deepest leaves.","input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8] output: 15 example 2: input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] output: 19","the number of nodes in the tree is in the range `[1, 10^4]`. `1 <= node.val <= 10^0`",
1303,Find the Team Size,SQL Schema,Easy,https://leetcode.com/problems/find-the-team-size,Amazon,,137,,sql schema,,,
1304,Find N Unique Integers Sum up to Zero,"Given an integer `n`, return any array containing `n` unique integers such that they add up to `0`.


Example 1:
Input: n = 5
Output: [-7,-1,1,3,4]
Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].


Example 2:
Input: n = 3
Output: [-1,0,1]

Example 3:
Input: n = 1
Output: [0]

Constraints:
`1 <= n <= 1000`",Easy,https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero,"Microsoft,Tesla",Array,540,,"given an integer `n`, return any array containing `n` unique integers such that they add up to `0`.","input: n = 5 output: [-7,-1,1,3,4] explanation: these arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4]. example 2: input: n = 3 output: [-1,0,1] example 3: input: n = 1 output: [0]",`1 <= n <= 1000`,
1305,All Elements in Two Binary Search Trees,"Given two binary search trees `root1` and `root2`.

Return a list containing all the integers from both trees sorted in ascending order.


Example 1:
Input: root1 = [2,1,4], root2 = [1,0,3]
Output: [0,1,1,2,3,4]

Example 2:
Input: root1 = [0,-10,10], root2 = [5,1,7,0,2]
Output: [-10,0,0,1,2,5,7,10]

Example 3:
Input: root1 = [], root2 = [5,1,7,0,2]
Output: [0,1,2,5,7]

Example 4:
Input: root1 = [0,-10,10], root2 = []
Output: [-10,0,10]

Example 5:
Input: root1 = [1,null,8], root2 = [8,1]
Output: [1,1,8,8]

Constraints:
Each tree has at most `5000` nodes.

Each node's value is between `[-10^5, 10^5]`.",Medium,https://leetcode.com/problems/all-elements-in-two-binary-search-trees,"Facebook,Amazon","Sort,Tree",887,,given two binary search trees `root1` and `root2`. return a list containing all the integers from both trees sorted in ascending order.,"input: root1 = [2,1,4], root2 = [1,0,3] output: [0,1,1,2,3,4] example 2: input: root1 = [0,-10,10], root2 = [5,1,7,0,2] output: [-10,0,0,1,2,5,7,10] example 3: input: root1 = [], root2 = [5,1,7,0,2] output: [0,1,2,5,7] example 4: input: root1 = [0,-10,10], root2 = [] output: [-10,0,10] example 5: input: root1 = [1,null,8], root2 = [8,1] output: [1,1,8,8]","each tree has at most `5000` nodes. each node's value is between `[-10^5, 10^5]`.",
1306,Jump Game III,"Given an array of non-negative integers `arr`, you are initially positioned at `start` index of the array. When you are at index `i`, you can jump to `i + arr[i]` or `i - arr[i]`, check if you can reach to any index with value 0.

Notice that you can not jump outside of the array at any time.


Example 1:
Input: arr = [4,2,3,0,3,1,2], start = 5
Output: true
Explanation: 
All possible ways to reach at index 3 with value 0 are: 
index 5 -> index 4 -> index 1 -> index 3 
index 5 -> index 6 -> index 4 -> index 1 -> index 3 

Example 2:
Input: arr = [4,2,3,0,3,1,2], start = 0
Output: true 
Explanation: 
One possible way to reach at index 3 with value 0 is: 
index 0 -> index 4 -> index 1 -> index 3

Example 3:
Input: arr = [3,0,2,1,2], start = 2
Output: false
Explanation: There is no way to reach at index 1 with value 0.


Constraints:
`1 <= arr.length <= 5 * 104`
`0 <= arr[i] < arr.length`
`0 <= start < arr.length`",Medium,https://leetcode.com/problems/jump-game-iii,Microsoft,"Depth-first Search,Breadth-first Search,Recursion",1111,"[Jump Game II, /problems/jump-game-ii/, Medium], [Jump Game, /problems/jump-game/, Medium]","given an array of non-negative integers `arr`, you are initially positioned at `start` index of the array. when you are at index `i`, you can jump to `i + arr[i]` or `i - arr[i]`, check if you can reach to any index with value 0. notice that you can not jump outside of the array at any time.","input: arr = [4,2,3,0,3,1,2], start = 5 output: true explanation: all possible ways to reach at index 3 with value 0 are: index 5 -> index 4 -> index 1 -> index 3 index 5 -> index 6 -> index 4 -> index 1 -> index 3 example 2: input: arr = [4,2,3,0,3,1,2], start = 0 output: true explanation: one possible way to reach at index 3 with value 0 is: index 0 -> index 4 -> index 1 -> index 3 example 3: input: arr = [3,0,2,1,2], start = 2 output: false explanation: there is no way to reach at index 1 with value 0.",`1 <= arr.length <= 5 * 10^4` `0 <= arr[i] < arr.length` `0 <= start < arr.length`,
1307,Verbal Arithmetic Puzzle,"Given an equation, represented by `words` on left side and the `result` on right side.

You need to check if the equation is solvable under the following rules:
Each character is decoded as one digit (0 - 9).

Every pair of different characters they must map to different digits.

Each `words[i]` and `result` are decoded as one number without leading zeros.

Sum of numbers on left side (`words`) will equal to the number on right side (`result`). 
Return `True` if the equation is solvable otherwise return `False`.


Example 1:
Input: words = [""SEND"",""MORE""], result = ""MONEY""
Output: true
Explanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'
Such that: ""SEND"" + ""MORE"" = ""MONEY"" ,  9567 + 1085 = 10652

Example 2:
Input: words = [""SIX"",""SEVEN"",""SEVEN""], result = ""TWENTY""
Output: true
Explanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4
Such that: ""SIX"" + ""SEVEN"" + ""SEVEN"" = ""TWENTY"" ,  650 + 68782 + 68782 = 138214

Example 3:
Input: words = [""THIS"",""IS"",""TOO""], result = ""FUNNY""
Output: true

Example 4:
Input: words = [""LEET"",""CODE""], result = ""POINT""
Output: false

Constraints:
`2 <= words.length <= 5`
`1 <= words[i].length, result.length <= 7`
`words[i], result` contain only uppercase English letters.

The number of different characters used in the expression is at most `10`.",Hard,https://leetcode.com/problems/verbal-arithmetic-puzzle,Atlassian,"Math,Backtracking",205,,"given an equation, represented by `words` on left side and the `result` on right side. you need to check if the equation is solvable under the following rules: each character is decoded as one digit (0 - 9). every pair of different characters they must map to different digits. each `words[i]` and `result` are decoded as one number without leading zeros. sum of numbers on left side (`words`) will equal to the number on right side (`result`). return `true` if the equation is solvable otherwise return `false`.","input: words = [""send"",""more""], result = ""money"" output: true explanation: map 's'-> 9, 'e'->5, 'n'->6, 'd'->7, 'm'->1, 'o'->0, 'r'->8, 'y'->'2' such that: ""send"" + ""more"" = ""money"" , 9567 + 1085 = 10652 example 2: input: words = [""six"",""seven"",""seven""], result = ""twenty"" output: true explanation: map 's'-> 6, 'i'->5, 'x'->0, 'e'->8, 'v'->7, 'n'->2, 't'->1, 'w'->'3', 'y'->4 such that: ""six"" + ""seven"" + ""seven"" = ""twenty"" , 650 + 68782 + 68782 = 138214 example 3: input: words = [""this"",""is"",""too""], result = ""funny"" output: true example 4: input: words = [""leet"",""code""], result = ""point"" output: false","`2 <= words.length <= 5` `1 <= words[i].length, result.length <= 7` `words[i], result` contain only uppercase english letters. the number of different characters used in the expression is at most `10`.",
1308,Running Total for Different Genders,SQL Schema,Medium,https://leetcode.com/problems/running-total-for-different-genders,,,92,,sql schema,,,
1309,Decrypt String from Alphabet to Integer Mapping,"Given a string `s` formed by digits (`'0'` - `'9'`) and `'#'` . We want to map `s` to English lowercase characters as follows:
Characters (`'a'` to `'i')` are represented by (`'1'` to `'9'`) respectively.

Characters (`'j'` to `'z')` are represented by (`'10#'` to `'26#'`) respectively. 
Return the string formed after mapping.

It's guaranteed that a unique mapping will always exist.


Example 1:
Input: s = ""10#11#12""
Output: ""jkab""
Explanation: ""j"" -> ""10#"" , ""k"" -> ""11#"" , ""a"" -> ""1"" , ""b"" -> ""2"".


Example 2:
Input: s = ""1326#""
Output: ""acz""

Example 3:
Input: s = ""25#""
Output: ""y""

Example 4:
Input: s = ""12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#""
Output: ""abcdefghijklmnopqrstuvwxyz""

Constraints:
`1 <= s.length <= 1000`
`s[i]` only contains digits letters (`'0'`-`'9'`) and `'#'` letter.

`s` will be valid string such that mapping is always possible.",Easy,https://leetcode.com/problems/decrypt-string-from-alphabet-to-integer-mapping,Amazon,String,538,,given a string `s` formed by digits (`'0'` - `'9'`) and `'#'` . we want to map `s` to english lowercase characters as follows: characters (`'a'` to `'i')` are represented by (`'1'` to `'9'`) respectively. characters (`'j'` to `'z')` are represented by (`'10#'` to `'26#'`) respectively. return the string formed after mapping. it's guaranteed that a unique mapping will always exist.,"input: s = ""10#11#12"" output: ""jkab"" explanation: ""j"" -> ""10#"" , ""k"" -> ""11#"" , ""a"" -> ""1"" , ""b"" -> ""2"". example 2: input: s = ""1326#"" output: ""acz"" example 3: input: s = ""25#"" output: ""y"" example 4: input: s = ""12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#"" output: ""abcdefghijklmnopqrstuvwxyz""",`1 <= s.length <= 1000` `s[i]` only contains digits letters (`'0'`-`'9'`) and `'#'` letter. `s` will be valid string such that mapping is always possible.,
1310,XOR Queries of a Subarray,"Given the array `arr` of positive integers and the array `queries` where `queries[i] = [Li, Ri]`, for each query `i` compute the XOR of elements from `Li` to `Ri` (that is, `arr[Li] xor arr[Li+1] xor ... xor arr[Ri]` ). Return an array containing the result for the given `queries`.


Example 1:
Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
Output: [2,7,14,8] 
Explanation: 
The binary representation of the elements in the array are:
1 = 0001 
3 = 0011 
4 = 0100 
8 = 1000 
The XOR values for queries are:
[0,1] = 1 xor 3 = 2 
[1,2] = 3 xor 4 = 7 
[0,3] = 1 xor 3 xor 4 xor 8 = 14 
[3,3] = 8

Example 2:
Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]
Output: [8,0,4,4]

Constraints:
`1 <= arr.length <= 3 * 10^4`
`1 <= arr[i] <= 10^9`
`1 <= queries.length <= 3 * 10^4`
`queries[i].length == 2`
`0 <= queries[i][0] <= queries[i][1] < arr.length`",Medium,https://leetcode.com/problems/xor-queries-of-a-subarray,"Codenation,Amazon",Bit Manipulation,482,,"given the array `arr` of positive integers and the array `queries` where `queries[i] = [li, ri]`, for each query `i` compute the xor of elements from `li` to `ri` (that is, `arr[li] xor arr[li+1] xor ... xor arr[ri]` ). return an array containing the result for the given `queries`.","input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]] output: [2,7,14,8] explanation: the binary representation of the elements in the array are: 1 = 0001 3 = 0011 4 = 0100 8 = 1000 the xor values for queries are: [0,1] = 1 xor 3 = 2 [1,2] = 3 xor 4 = 7 [0,3] = 1 xor 3 xor 4 xor 8 = 14 [3,3] = 8 example 2: input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]] output: [8,0,4,4]",`1 <= arr.length <= 3 * 10^4` `1 <= arr[i] <= 10^9` `1 <= queries.length <= 3 * 10^4` `queries[i].length == 2` `0 <= queries[i][0] <= queries[i][1] < arr.length`,
1311,Get Watched Videos by Your Friends,"There are `n` people, each person has a unique id between `0` and `n-1`. Given the arrays `watchedVideos` and `friends`, where `watchedVideos[i]` and `friends[i]` contain the list of watched videos and the list of friends respectively for the person with `id = i`.

Level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. In general, the level `k` of videos are all watched videos by people with the shortest path exactly equal to `k` with you. Given your `id` and the `level` of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest. 

Example 1:
Input: watchedVideos = [[""A"",""B""],[""C""],[""B"",""C""],[""D""]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1
Output: [""B"",""C""] 
Explanation: 
You have id = 0 (green color in the figure) and your friends are (yellow color in the figure):
Person with id = 1 -> watchedVideos = [""C""] 
Person with id = 2 -> watchedVideos = [""B"",""C""] 
The frequencies of watchedVideos by your friends are: 
B -> 1 
C -> 2

Example 2:
Input: watchedVideos = [[""A"",""B""],[""C""],[""B"",""C""],[""D""]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2
Output: [""D""]
Explanation: 
You have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).


Constraints:
`n == watchedVideos.length == friends.length`
`2 <= n <= 100`
`1 <= watchedVideos[i].length <= 100`
`1 <= watchedVideos[i][j].length <= 8`
`0 <= friends[i].length < n`
`0 <= friends[i][j] < n`
`0 <= id < n`
`1 <= level < n`
if `friends[i]` contains `j`, then `friends[j]` contains `i`",Medium,https://leetcode.com/problems/get-watched-videos-by-your-friends,Amazon,"Hash Table,String,Breadth-first Search",147,,"there are `n` people, each person has a unique id between `0` and `n-1`. given the arrays `watchedvideos` and `friends`, where `watchedvideos[i]` and `friends[i]` contain the list of watched videos and the list of friends respectively for the person with `id = i`. level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. in general, the level `k` of videos are all watched videos by people with the shortest path exactly equal to `k` with you. given your `id` and the `level` of videos, return the list of videos ordered by their frequencies (increasing). for videos with the same frequency order them alphabetically from least to greatest.","input: watchedvideos = [[""a"",""b""],[""c""],[""b"",""c""],[""d""]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1 output: [""b"",""c""] explanation: you have id = 0 (green color in the figure) and your friends are (yellow color in the figure): person with id = 1 -> watchedvideos = [""c""] person with id = 2 -> watchedvideos = [""b"",""c""] the frequencies of watchedvideos by your friends are: b -> 1 c -> 2 example 2: input: watchedvideos = [[""a"",""b""],[""c""],[""b"",""c""],[""d""]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2 output: [""d""] explanation: you have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).","`n == watchedvideos.length == friends.length` `2 <= n <= 10^0` `1 <= watchedvideos[i].length <= 10^0` `1 <= watchedvideos[i][j].length <= 8` `0 <= friends[i].length < n` `0 <= friends[i][j] < n` `0 <= id < n` `1 <= level < n` if `friends[i]` contains `j`, then `friends[j]` contains `i`",
1312,Minimum Insertion Steps to Make a String Palindrome,"Given a string `s`. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make `s` palindrome.

A Palindrome String is one that reads the same backward as well as forward.


Example 1:
Input: s = ""zzazz""
Output: 0
Explanation: The string ""zzazz"" is already palindrome we don't need any insertions.


Example 2:
Input: s = ""mbadm""
Output: 2
Explanation: String can be ""mbdadbm"" or ""mdbabdm"".


Example 3:
Input: s = ""leetcode""
Output: 5
Explanation: Inserting 5 characters the string becomes ""leetcodocteel"".


Example 4:
Input: s = ""g""
Output: 0

Example 5:
Input: s = ""no""
Output: 1

Constraints:
`1 <= s.length <= 500`
All characters of `s` are lower case English letters.",Hard,https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome,"Amazon,LinkedIn",Dynamic Programming,715,,given a string `s`. in one step you can insert any character at any index of the string. return the minimum number of steps to make `s` palindrome. a palindrome string is one that reads the same backward as well as forward.,"input: s = ""zzazz"" output: 0 explanation: the string ""zzazz"" is already palindrome we don't need any insertions. example 2: input: s = ""mbadm"" output: 2 explanation: string can be ""mbdadbm"" or ""mdbabdm"". example 3: input: s = ""leetcode"" output: 5 explanation: inserting 5 characters the string becomes ""leetcodocteel"". example 4: input: s = ""g"" output: 0 example 5: input: s = ""no"" output: 1",`1 <= s.length <= 500` all characters of `s` are lower case english letters.,
1313,Decompress Run-Length Encoded List,"We are given a list `nums` of integers representing a list compressed with run-length encoding.

Consider each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`).  For each such pair, there are `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.

Return the decompressed list.


Example 1:
Input: nums = [1,2,3,4]
Output: [2,4,4,4]
Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].

The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].

At the end the concatenation [2] + [4,4,4] is [2,4,4,4].


Example 2:
Input: nums = [1,1,2,3]
Output: [1,3,3]

Constraints:
`2 <= nums.length <= 100`
`nums.length % 2 == 0`
`1 <= nums[i] <= 100`",Easy,https://leetcode.com/problems/decompress-run-length-encoded-list,"Amazon,Google,Apple",Array,439,"[String Compression, /problems/string-compression/, Medium]","we are given a list `nums` of integers representing a list compressed with run-length encoding. consider each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`). for each such pair, there are `freq` elements with value `val` concatenated in a sublist. concatenate all the sublists from left to right to generate the decompressed list. return the decompressed list.","input: nums = [1,2,3,4] output: [2,4,4,4] explanation: the first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2]. the second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4]. at the end the concatenation [2] + [4,4,4] is [2,4,4,4]. example 2: input: nums = [1,1,2,3] output: [1,3,3]",`2 <= nums.length <= 10^0` `nums.length % 2 == 0` `1 <= nums[i] <= 10^0`,
1314,Matrix Block Sum,"Given a `m x n` matrix `mat` and an integer `k`, return a matrix `answer` where each `answer[i][j]` is the sum of all elements `mat[r][c]` for:
`i - k <= r <= i + k,`
`j - k <= c <= j + k`, and
`(r, c)` is a valid position in the matrix.


Example 1:
Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[12,21,16],[27,45,33],[24,39,28]]

Example 2:
Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2
Output: [[45,45,45],[45,45,45],[45,45,45]]

Constraints:
`m == mat.length`
`n == mat[i].length`
`1 <= m, n, k <= 100`
`1 <= mat[i][j] <= 100`",Medium,https://leetcode.com/problems/matrix-block-sum,Google,Dynamic Programming,877,,"given a `m x n` matrix `mat` and an integer `k`, return a matrix `answer` where each `answer[i][j]` is the sum of all elements `mat[r][c]` for: `i - k <= r <= i + k,` `j - k <= c <= j + k`, and `(r, c)` is a valid position in the matrix.","input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1 output: [[12,21,16],[27,45,33],[24,39,28]] example 2: input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2 output: [[45,45,45],[45,45,45],[45,45,45]]","`m == mat.length` `n == mat[i].length` `1 <= m, n, k <= 10^0` `1 <= mat[i][j] <= 10^0`",
1315,Sum of Nodes with Even-Valued Grandparent,"Given a binary tree, return the sum of values of nodes with even-valued grandparent.  (A grandparent of a node is the parent of its parent, if it exists.)
If there are no nodes with an even-valued grandparent, return `0`.


Example 1:
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 18
Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.


Constraints:
The number of nodes in the tree is between `1` and `10^4`.

The value of nodes is between `1` and `100`.",Medium,https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent,"Amazon,Bloomberg","Tree,Depth-first Search",903,,"given a binary tree, return the sum of values of nodes with even-valued grandparent. (a grandparent of a node is the parent of its parent, if it exists.) if there are no nodes with an even-valued grandparent, return `0`.","input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5] output: 18 explanation: the red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.",the number of nodes in the tree is between `1` and `10^4`. the value of nodes is between `1` and `10^0`.,
1316,Distinct Echo Substrings,"Return the number of distinct non-empty substrings of `text` that can be written as the concatenation of some string with itself (i.e. it can be written as `a + a` where `a` is some string).


Example 1:
Input: text = ""abcabcabc""
Output: 3
Explanation: The 3 substrings are ""abcabc"", ""bcabca"" and ""cabcab"".


Example 2:
Input: text = ""leetcodeleetcode""
Output: 2
Explanation: The 2 substrings are ""ee"" and ""leetcodeleetcode"".


Constraints:
`1 <= text.length <= 2000`
`text` has only lowercase English letters.",Hard,https://leetcode.com/problems/distinct-echo-substrings,Google,"String,Rolling Hash",110,,return the number of distinct non-empty substrings of `text` that can be written as the concatenation of some string with itself (i.e. it can be written as `a + a` where `a` is some string).,"input: text = ""abcabcabc"" output: 3 explanation: the 3 substrings are ""abcabc"", ""bcabca"" and ""cabcab"". example 2: input: text = ""leetcodeleetcode"" output: 2 explanation: the 2 substrings are ""ee"" and ""leetcodeleetcode"".",`1 <= text.length <= 2000` `text` has only lowercase english letters.,
1317,Convert Integer to the Sum of Two No-Zero Integers,"Given an integer `n`. No-Zero integer is a positive integer which doesn't contain any 0 in its decimal representation.

Return a list of two integers `[A, B]` where:
`A` and `B` are No-Zero integers.

`A + B = n`
It's guarateed that there is at least one valid solution. If there are many valid solutions you can return any of them.


Example 1:
Input: n = 2
Output: [1,1]
Explanation: A = 1, B = 1. A + B = n and both A and B don't contain any 0 in their decimal representation.


Example 2:
Input: n = 11
Output: [2,9]

Example 3:
Input: n = 10000
Output: [1,9999]

Example 4:
Input: n = 69
Output: [1,68]

Example 5:
Input: n = 1010
Output: [11,999]

Constraints:
`2 <= n <= 10^4`",Easy,https://leetcode.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers,HRT,Math,159,,"given an integer `n`. no-zero integer is a positive integer which doesn't contain any 0 in its decimal representation. return a list of two integers `[a, b]` where: `a` and `b` are no-zero integers. `a + b = n` it's guarateed that there is at least one valid solution. if there are many valid solutions you can return any of them.","input: n = 2 output: [1,1] explanation: a = 1, b = 1. a + b = n and both a and b don't contain any 0 in their decimal representation. example 2: input: n = 11 output: [2,9] example 3: input: n = 10000 output: [1,9999] example 4: input: n = 69 output: [1,68] example 5: input: n = 1010 output: [11,999]",`2 <= n <= 10^4`,
1318,Minimum Flips to Make a OR b Equal to c,"Given 3 positives numbers `a`, `b` and `c`. Return the minimum flips required in some bits of `a` and `b` to make ( `a` OR `b` == `c` ). (bitwise OR operation).

Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.


Example 1:
Input: a = 2, b = 6, c = 5
Output: 3
Explanation: After flips a = 1 , b = 4 , c = 5 such that (`a` OR `b` == `c`)

Example 2:
Input: a = 4, b = 2, c = 7
Output: 1

Example 3:
Input: a = 1, b = 2, c = 3
Output: 0

Constraints:
`1 <= a <= 10^9`
`1 <= b <= 10^9`
`1 <= c <= 10^9`",Medium,https://leetcode.com/problems/minimum-flips-to-make-a-or-b-equal-to-c,Microsoft,Bit Manipulation,233,,"given 3 positives numbers `a`, `b` and `c`. return the minimum flips required in some bits of `a` and `b` to make ( `a` or `b` == `c` ). (bitwise or operation). flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.","input: a = 2, b = 6, c = 5 output: 3 explanation: after flips a = 1 , b = 4 , c = 5 such that (`a` or `b` == `c`) example 2: input: a = 4, b = 2, c = 7 output: 1 example 3: input: a = 1, b = 2, c = 3 output: 0",`1 <= a <= 10^9` `1 <= b <= 10^9` `1 <= c <= 10^9`,
1319,Number of Operations to Make Network Connected,"There are `n` computers numbered from `0` to `n-1` connected by ethernet cables `connections` forming a network where `connections[i] = [a, b]` represents a connection between computers `a` and `b`. Any computer can reach any other computer directly or indirectly through the network.

Given an initial computer network `connections`. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return the minimum number of times you need to do this in order to make all the computers connected. If it's not possible, return -1. 

Example 1:
Input: n = 4, connections = [[0,1],[0,2],[1,2]]
Output: 1
Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.


Example 2:
Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
Output: 2

Example 3:
Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]
Output: -1
Explanation: There are not enough cables.


Example 4:
Input: n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]
Output: 0

Constraints:
`1 <= n <= 10^5`
`1 <= connections.length <= min(n*(n-1)/2, 10^5)`
`connections[i].length == 2`
`0 <= connections[i][0], connections[i][1] < n`
`connections[i][0] != connections[i][1]`
There are no repeated connections.

No two computers are connected by more than one cable.",Medium,https://leetcode.com/problems/number-of-operations-to-make-network-connected,"Amazon,Apple","Depth-first Search,Breadth-first Search,Union Find",826,,"there are `n` computers numbered from `0` to `n-1` connected by ethernet cables `connections` forming a network where `connections[i] = [a, b]` represents a connection between computers `a` and `b`. any computer can reach any other computer directly or indirectly through the network. given an initial computer network `connections`. you can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. return the minimum number of times you need to do this in order to make all the computers connected. if it's not possible, return -1.","input: n = 4, connections = [[0,1],[0,2],[1,2]] output: 1 explanation: remove cable between computer 1 and 2 and place between computers 1 and 3. example 2: input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]] output: 2 example 3: input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]] output: -1 explanation: there are not enough cables. example 4: input: n = 5, connections = [[0,1],[0,2],[3,4],[2,3]] output: 0","`1 <= n <= 10^5` `1 <= connections.length <= min(n*(n-1)/2, 10^5)` `connections[i].length == 2` `0 <= connections[i][0], connections[i][1] < n` `connections[i][0] != connections[i][1]` there are no repeated connections. no two computers are connected by more than one cable.",
1320,Minimum Distance to Type a Word Using Two Fingers,"You have a keyboard layout as shown above in the XY plane, where each English uppercase letter is located at some coordinate, for example, the letter A is located at coordinate (0,0), the letter B is located at coordinate (0,1), the letter P is located at coordinate (2,3) and the letter Z is located at coordinate (4,1).

Given the string `word`, return the minimum total distance to type such string using only two fingers. The distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. 
Note that the initial positions of your two fingers are considered free so don't count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.


Example 1:
Input: word = ""CAKE""
Output: 3
Explanation: 
Using two fingers, one optimal way to type ""CAKE"" is: 
Finger 1 on letter 'C' -> cost = 0 
Finger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 
Finger 2 on letter 'K' -> cost = 0 
Finger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 
Total distance = 3

Example 2:
Input: word = ""HAPPY""
Output: 6
Explanation: 
Using two fingers, one optimal way to type ""HAPPY"" is:
Finger 1 on letter 'H' -> cost = 0
Finger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2
Finger 2 on letter 'P' -> cost = 0
Finger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0
Finger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4
Total distance = 6

Example 3:
Input: word = ""NEW""
Output: 3

Example 4:
Input: word = ""YEAR""
Output: 7

Constraints:
`2 <= word.length <= 300`
Each word[i]` is an English uppercase letter.",Hard,https://leetcode.com/problems/minimum-distance-to-type-a-word-using-two-fingers,Google,Dynamic Programming,541,,"you have a keyboard layout as shown above in the xy plane, where each english uppercase letter is located at some coordinate, for example, the letter a is located at coordinate (0,0), the letter b is located at coordinate (0,1), the letter p is located at coordinate (2,3) and the letter z is located at coordinate (4,1). given the string `word`, return the minimum total distance to type such string using only two fingers. the distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. note that the initial positions of your two fingers are considered free so don't count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.","input: word = ""cake"" output: 3 explanation: using two fingers, one optimal way to type ""cake"" is: finger 1 on letter 'c' -> cost = 0 finger 1 on letter 'a' -> cost = distance from letter 'c' to letter 'a' = 2 finger 2 on letter 'k' -> cost = 0 finger 2 on letter 'e' -> cost = distance from letter 'k' to letter 'e' = 1 total distance = 3 example 2: input: word = ""happy"" output: 6 explanation: using two fingers, one optimal way to type ""happy"" is: finger 1 on letter 'h' -> cost = 0 finger 1 on letter 'a' -> cost = distance from letter 'h' to letter 'a' = 2 finger 2 on letter 'p' -> cost = 0 finger 2 on letter 'p' -> cost = distance from letter 'p' to letter 'p' = 0 finger 1 on letter 'y' -> cost = distance from letter 'a' to letter 'y' = 4 total distance = 6 example 3: input: word = ""new"" output: 3 example 4: input: word = ""year"" output: 7",`2 <= word.length <= 300` each word[i]` is an english uppercase letter.,
1321,Restaurant Growth,SQL Schema,Medium,https://leetcode.com/problems/restaurant-growth,Amazon,,142,,sql schema,,,
1322,Ads Performance,SQL Schema,Easy,https://leetcode.com/problems/ads-performance,Facebook,,116,,sql schema,,,
1323,Maximum 69 Number,"Given a positive integer `num` consisting only of digits 6 and 9.

Return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).


Example 1:
Input: num = 9669
Output: 9969
Explanation: 
Changing the first digit results in 6669.

Changing the second digit results in 9969.

Changing the third digit results in 9699.

Changing the fourth digit results in 9666. 
The maximum number is 9969.


Example 2:
Input: num = 9996
Output: 9999
Explanation: Changing the last digit 6 to 9 results in the maximum number.


Example 3:
Input: num = 9999
Output: 9999
Explanation: It is better not to apply any change.


Constraints:
`1 <= num <= 10^4`
`num`'s digits are 6 or 9.",Easy,https://leetcode.com/problems/maximum-69-number,HRT,Math,551,,"given a positive integer `num` consisting only of digits 6 and 9. return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).",input: num = 9669 output: 9969 explanation: changing the first digit results in 6669. changing the second digit results in 9969. changing the third digit results in 9699. changing the fourth digit results in 9666. the maximum number is 9969. example 2: input: num = 9996 output: 9999 explanation: changing the last digit 6 to 9 results in the maximum number. example 3: input: num = 9999 output: 9999 explanation: it is better not to apply any change.,`1 <= num <= 10^4` `num`'s digits are 6 or 9.,
1324,Print Words Vertically,"Given a string `s`. Return all the words vertically in the same order in which they appear in `s`.

Words are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).

Each word would be put on only one column and that in one column there will be only one word.


Example 1:
Input: s = ""HOW ARE YOU""
Output: [""HAY"",""ORO"",""WEU""]
Explanation: Each word is printed vertically. 
 ""HAY""
 ""ORO""
 ""WEU""

Example 2:
Input: s = ""TO BE OR NOT TO BE""
Output: [""TBONTB"",""OEROOE"",""   T""]
Explanation: Trailing spaces is not allowed. 
""TBONTB""
""OEROOE""
""   T""

Example 3:
Input: s = ""CONTEST IS COMING""
Output: [""CIC"",""OSO"",""N M"",""T I"",""E N"",""S G"",""T""]

Constraints:
`1 <= s.length <= 200`
`s` contains only upper case English letters.

It's guaranteed that there is only one space between 2 words.",Medium,https://leetcode.com/problems/print-words-vertically,Postmates,String,235,,"given a string `s`. return all the words vertically in the same order in which they appear in `s`. words are returned as a list of strings, complete with spaces when is necessary. (trailing spaces are not allowed). each word would be put on only one column and that in one column there will be only one word.","input: s = ""how are you"" output: [""hay"",""oro"",""weu""] explanation: each word is printed vertically. ""hay"" ""oro"" ""weu"" example 2: input: s = ""to be or not to be"" output: [""tbontb"",""oerooe"","" t""] explanation: trailing spaces is not allowed. ""tbontb"" ""oerooe"" "" t"" example 3: input: s = ""contest is coming"" output: [""cic"",""oso"",""n m"",""t i"",""e n"",""s g"",""t""]",`1 <= s.length <= 200` `s` contains only upper case english letters. it's guaranteed that there is only one space between 2 words.,
1325,Delete Leaves With a Given Value,"Given a binary tree `root` and an integer `target`, delete all the leaf nodes with value `target`.

Note that once you delete a leaf node with value `target`, if it's parent node becomes a leaf node and has the value `target`, it should also be deleted (you need to continue doing that until you can't).


Example 1:
Input: root = [1,2,3,2,null,2,4], target = 2
Output: [1,null,3,null,4]
Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left). 
After removing, new nodes become leaf nodes with value (target = 2) (Picture in center).


Example 2:
Input: root = [1,3,3,3,2], target = 3
Output: [1,3,null,null,2]

Example 3:
Input: root = [1,2,null,2,null,2], target = 2
Output: [1]
Explanation: Leaf nodes in green with value (target = 2) are removed at each step.


Example 4:
Input: root = [1,1,1], target = 1
Output: []

Example 5:
Input: root = [1,2,3], target = 1
Output: [1,2,3]

Constraints:
`1 <= target <= 1000`
The given binary tree will have between `1` and `3000` nodes.

Each node's value is between `[1, 1000]`.",Medium,https://leetcode.com/problems/delete-leaves-with-a-given-value,Amazon,Tree,685,,"given a binary tree `root` and an integer `target`, delete all the leaf nodes with value `target`. note that once you delete a leaf node with value `target`, if it's parent node becomes a leaf node and has the value `target`, it should also be deleted (you need to continue doing that until you can't).","input: root = [1,2,3,2,null,2,4], target = 2 output: [1,null,3,null,4] explanation: leaf nodes in green with value (target = 2) are removed (picture in left). after removing, new nodes become leaf nodes with value (target = 2) (picture in center). example 2: input: root = [1,3,3,3,2], target = 3 output: [1,3,null,null,2] example 3: input: root = [1,2,null,2,null,2], target = 2 output: [1] explanation: leaf nodes in green with value (target = 2) are removed at each step. example 4: input: root = [1,1,1], target = 1 output: [] example 5: input: root = [1,2,3], target = 1 output: [1,2,3]","`1 <= target <= 1000` the given binary tree will have between `1` and `3000` nodes. each node's value is between `[1, 1000]`.",
1326,Minimum Number of Taps to Open to Water a Garden,"There is a one-dimensional garden on the x-axis. The garden starts at the point `0` and ends at the point `n`. (i.e The length of the garden is `n`).

There are `n + 1` taps located at points `[0, 1, ..., n]` in the garden.

Given an integer `n` and an integer array `ranges` of length `n + 1` where `ranges[i]` (0-indexed) means the `i-th` tap can water the area `[i - ranges[i], i + ranges[i]]` if it was open.

Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.


Example 1:
Input: n = 5, ranges = [3,4,1,1,0,0]
Output: 1
Explanation: The tap at point 0 can cover the interval [-3,3]
The tap at point 1 can cover the interval [-3,5]
The tap at point 2 can cover the interval [1,3]
The tap at point 3 can cover the interval [2,4]
The tap at point 4 can cover the interval [4,4]
The tap at point 5 can cover the interval [5,5]
Opening Only the second tap will water the whole garden [0,5]

Example 2:
Input: n = 3, ranges = [0,0,0,0]
Output: -1
Explanation: Even if you activate all the four taps you cannot water the whole garden.


Example 3:
Input: n = 7, ranges = [1,2,1,0,2,1,0,1]
Output: 3

Example 4:
Input: n = 8, ranges = [4,0,0,0,0,0,0,0,4]
Output: 2

Example 5:
Input: n = 8, ranges = [4,0,0,0,4,0,0,0,4]
Output: 1

Constraints:
`1 <= n <= 10^4`
`ranges.length == n + 1`
`0 <= ranges[i] <= 100`",Hard,https://leetcode.com/problems/minimum-number-of-taps-to-open-to-water-a-garden,"Apple,Docusign,Twitter,Morgan Stanley","Dynamic Programming,Greedy",572,,"there is a one-dimensional garden on the x-axis. the garden starts at the point `0` and ends at the point `n`. (i.e the length of the garden is `n`). there are `n + 1` taps located at points `[0, 1, ..., n]` in the garden. given an integer `n` and an integer array `ranges` of length `n + 1` where `ranges[i]` (0-indexed) means the `i-th` tap can water the area `[i - ranges[i], i + ranges[i]]` if it was open. return the minimum number of taps that should be open to water the whole garden, if the garden cannot be watered return -1.","input: n = 5, ranges = [3,4,1,1,0,0] output: 1 explanation: the tap at point 0 can cover the interval [-3,3] the tap at point 1 can cover the interval [-3,5] the tap at point 2 can cover the interval [1,3] the tap at point 3 can cover the interval [2,4] the tap at point 4 can cover the interval [4,4] the tap at point 5 can cover the interval [5,5] opening only the second tap will water the whole garden [0,5] example 2: input: n = 3, ranges = [0,0,0,0] output: -1 explanation: even if you activate all the four taps you cannot water the whole garden. example 3: input: n = 7, ranges = [1,2,1,0,2,1,0,1] output: 3 example 4: input: n = 8, ranges = [4,0,0,0,0,0,0,0,4] output: 2 example 5: input: n = 8, ranges = [4,0,0,0,4,0,0,0,4] output: 1",`1 <= n <= 10^4` `ranges.length == n + 1` `0 <= ranges[i] <= 10^0`,
1327,List the Products Ordered in a Period,SQL Schema,Easy,https://leetcode.com/problems/list-the-products-ordered-in-a-period,Amazon,,45,,sql schema,,,
1328,Break a Palindrome,"Given a palindromic string of lowercase English letters `palindrome`, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.

Return the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.

A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`. For example, `""abcc""` is lexicographically smaller than `""abcd""` because the first position they differ is at the fourth character, and `'c'` is smaller than `'d'`.


Example 1:
Input: palindrome = ""abccba""
Output: ""aaccba""
Explanation: There are many ways to make ""abccba"" not a palindrome, such as ""zbccba"", ""aaccba"", and ""abacba"".

Of all the ways, ""aaccba"" is the lexicographically smallest.


Example 2:
Input: palindrome = ""a""
Output: """"
Explanation: There is no way to replace a single character to make ""a"" not a palindrome, so return an empty string.


Example 3:
Input: palindrome = ""aa""
Output: ""ab""

Example 4:
Input: palindrome = ""aba""
Output: ""abb""

Constraints:
`1 <= palindrome.length <= 1000`
`palindrome` consists of only lowercase English letters.",Medium,https://leetcode.com/problems/break-a-palindrome,Amazon,String,307,,"given a palindromic string of lowercase english letters `palindrome`, replace exactly one character with any lowercase english letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible. return the resulting string. if there is no way to replace a character to make it not a palindrome, return an empty string. a string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`. for example, `""abcc""` is lexicographically smaller than `""abcd""` because the first position they differ is at the fourth character, and `'c'` is smaller than `'d'`.","input: palindrome = ""abccba"" output: ""aaccba"" explanation: there are many ways to make ""abccba"" not a palindrome, such as ""zbccba"", ""aaccba"", and ""abacba"". of all the ways, ""aaccba"" is the lexicographically smallest. example 2: input: palindrome = ""a"" output: """" explanation: there is no way to replace a single character to make ""a"" not a palindrome, so return an empty string. example 3: input: palindrome = ""aa"" output: ""ab"" example 4: input: palindrome = ""aba"" output: ""abb""",`1 <= palindrome.length <= 1000` `palindrome` consists of only lowercase english letters.,
1329,Sort the Matrix Diagonally,"A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.

Given an `m x n` matrix `mat` of integers, sort each matrix diagonal in ascending order and return the resulting matrix.


Example 1:
Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]

Example 2:
Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]

Constraints:
`m == mat.length`
`n == mat[i].length`
`1 <= m, n <= 100`
`1 <= mat[i][j] <= 100`",Medium,https://leetcode.com/problems/sort-the-matrix-diagonally,Facebook,"Array,Sort",910,,"a matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. for example, the matrix diagonal starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`. given an `m x n` matrix `mat` of integers, sort each matrix diagonal in ascending order and return the resulting matrix.","input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]] output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]] example 2: input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]] output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]","`m == mat.length` `n == mat[i].length` `1 <= m, n <= 10^0` `1 <= mat[i][j] <= 10^0`",
1330,Reverse Subarray To Maximize Array Value,"You are given an integer array `nums`. The value of this array is defined as the sum of `|nums[i]-nums[i+1]|` for all `0 <= i < nums.length-1`.

You are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.

Find maximum possible value of the final array.


Example 1:
Input: nums = [2,3,1,5,4]
Output: 10
Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.


Example 2:
Input: nums = [2,4,9,24,2,1,10]
Output: 68

Constraints:
`1 <= nums.length <= 3*10^4`
`-10^5 <= nums[i] <= 10^5`",Hard,https://leetcode.com/problems/reverse-subarray-to-maximize-array-value,Codenation,"Array,Math",221,,you are given an integer array `nums`. the value of this array is defined as the sum of `|nums[i]-nums[i+1]|` for all `0 <= i < nums.length-1`. you are allowed to select any subarray of the given array and reverse it. you can perform this operation only once. find maximum possible value of the final array.,"input: nums = [2,3,1,5,4] output: 10 explanation: by reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10. example 2: input: nums = [2,4,9,24,2,1,10] output: 68",`1 <= nums.length <= 3*10^4` `-10^5 <= nums[i] <= 10^5`,
1331,Rank Transform of an Array,"Given an array of integers `arr`, replace each element with its rank.

The rank represents how large the element is. The rank has the following rules:
Rank is an integer starting from 1.

The larger the element, the larger the rank. If two elements are equal, their rank must be the same.

Rank should be as small as possible.


Example 1:
Input: arr = [40,10,20,30]
Output: [4,1,2,3]
Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.


Example 2:
Input: arr = [100,100,100]
Output: [1,1,1]
Explanation: Same elements share the same rank.


Example 3:
Input: arr = [37,12,28,9,100,56,80,5,12]
Output: [5,3,4,2,8,6,7,1,3]

Constraints:
`0 <= arr.length <= 105`
`-109 <= arr[i] <= 109`",Easy,https://leetcode.com/problems/rank-transform-of-an-array,"Amazon,Facebook",Array,425,"[Rank Transform of a Matrix, /problems/rank-transform-of-a-matrix/, Hard]","given an array of integers `arr`, replace each element with its rank. the rank represents how large the element is. the rank has the following rules: rank is an integer starting from 1. the larger the element, the larger the rank. if two elements are equal, their rank must be the same. rank should be as small as possible.","input: arr = [40,10,20,30] output: [4,1,2,3] explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest. example 2: input: arr = [100,100,100] output: [1,1,1] explanation: same elements share the same rank. example 3: input: arr = [37,12,28,9,100,56,80,5,12] output: [5,3,4,2,8,6,7,1,3]",`0 <= arr.length <= 10^5` `-10^9 <= arr[i] <= 10^9`,
1332,Remove Palindromic Subsequences,"You are given a string `s` consisting only of letters `'a'` and `'b'`. In a single step you can remove one palindromic subsequence from `s`.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.


Example 1:
Input: s = ""ababa""
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.


Example 2:
Input: s = ""abb""
Output: 2
Explanation: ""abb"" -> ""bb"" -> """". 
Remove palindromic subsequence ""a"" then ""bb"".


Example 3:
Input: s = ""baabb""
Output: 2
Explanation: ""baabb"" -> ""b"" -> """". 
Remove palindromic subsequence ""baab"" then ""b"".


Constraints:
`1 <= s.length <= 1000`
`s[i]` is either `'a'` or `'b'`.",Easy,https://leetcode.com/problems/remove-palindromic-subsequences,Amazon,String,21,,you are given a string `s` consisting only of letters `'a'` and `'b'`. in a single step you can remove one palindromic subsequence from `s`. return the minimum number of steps to make the given string empty. a string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. note that a subsequence does not necessarily need to be contiguous. a string is called palindrome if is one that reads the same backward as well as forward.,"input: s = ""ababa"" output: 1 explanation: s is already a palindrome, so its entirety can be removed in a single step. example 2: input: s = ""abb"" output: 2 explanation: ""abb"" -> ""bb"" -> """". remove palindromic subsequence ""a"" then ""bb"". example 3: input: s = ""baabb"" output: 2 explanation: ""baabb"" -> ""b"" -> """". remove palindromic subsequence ""baab"" then ""b"".",`1 <= s.length <= 1000` `s[i]` is either `'a'` or `'b'`.,
1333,"Filter Restaurants by Vegan-Friendly, Price and Distance","Given the array `restaurants` where  `restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]`. You have to filter the restaurants using three filters.

The `veganFriendly` filter will be either true (meaning you should only include restaurants with `veganFriendlyi` set to true) or false (meaning you can include any restaurant). In addition, you have the filters `maxPrice` and `maxDistance` which are the maximum value for price and distance of restaurants you should consider respectively.

Return the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity `veganFriendlyi` and `veganFriendly` take value 1 when it is true, and 0 when it is false.


Example 1:
Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10
Output: [3,1,5] 
Explanation: 
The restaurants are:
Restaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]
Restaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]
Restaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]
Restaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]
Restaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] 
After filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). 

Example 2:
Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10
Output: [4,3,2,1,5]
Explanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.


Example 3:
Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3
Output: [4,5]

Constraints:
`1 <= restaurants.length <= 10^4`
`restaurants[i].length == 5`
`1 <= idi, ratingi, pricei, distancei <= 10^5`
`1 <= maxPrice, maxDistance <= 10^5`
`veganFriendlyi` and `veganFriendly` are 0 or 1.

All `idi` are distinct.",Medium,https://leetcode.com/problems/filter-restaurants-by-vegan-friendly-price-and-distance,"Yelp,Amazon","Array,Sort",133,,"given the array `restaurants` where `restaurants[i] = [idi, ratingi, veganfriendlyi, pricei, distancei]`. you have to filter the restaurants using three filters. the `veganfriendly` filter will be either true (meaning you should only include restaurants with `veganfriendlyi` set to true) or false (meaning you can include any restaurant). in addition, you have the filters `maxprice` and `maxdistance` which are the maximum value for price and distance of restaurants you should consider respectively. return the array of restaurant ids after filtering, ordered by rating from highest to lowest. for restaurants with the same rating, order them by id from highest to lowest. for simplicity `veganfriendlyi` and `veganfriendly` take value 1 when it is true, and 0 when it is false.","input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganfriendly = 1, maxprice = 50, maxdistance = 10 output: [3,1,5] explanation: the restaurants are: restaurant 1 [id=1, rating=4, veganfriendly=1, price=40, distance=10] restaurant 2 [id=2, rating=8, veganfriendly=0, price=50, distance=5] restaurant 3 [id=3, rating=8, veganfriendly=1, price=30, distance=4] restaurant 4 [id=4, rating=10, veganfriendly=0, price=10, distance=3] restaurant 5 [id=5, rating=1, veganfriendly=1, price=15, distance=1] after filter restaurants with veganfriendly = 1, maxprice = 50 and maxdistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). example 2: input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganfriendly = 0, maxprice = 50, maxdistance = 10 output: [4,3,2,1,5] explanation: the restaurants are the same as in example 1, but in this case the filter veganfriendly = 0, therefore all restaurants are considered. example 3: input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganfriendly = 0, maxprice = 30, maxdistance = 3 output: [4,5]","`1 <= restaurants.length <= 10^4` `restaurants[i].length == 5` `1 <= idi, ratingi, pricei, distancei <= 10^5` `1 <= maxprice, maxdistance <= 10^5` `veganfriendlyi` and `veganfriendly` are 0 or 1. all `idi` are distinct.",
1334,Find the City With the Smallest Number of Neighbors at a Threshold Distance,"There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where `edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted edge between cities `fromi` and `toi`, and given the integer `distanceThreshold`.

Return the city with the smallest number of cities that are reachable through some path and whose distance is at most `distanceThreshold`, If there are multiple such cities, return the city with the greatest number.

Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.


Example 1:
Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
Output: 3
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -> [City 1, City 2] 
City 1 -> [City 0, City 2, City 3] 
City 2 -> [City 0, City 1, City 3] 
City 3 -> [City 1, City 2] 
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.


Example 2:
Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
Output: 0
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 2 for each city are:
City 0 -> [City 1] 
City 1 -> [City 0, City 4] 
City 2 -> [City 3, City 4] 
City 3 -> [City 2, City 4]
City 4 -> [City 1, City 2, City 3] 
The city 0 has 1 neighboring city at a distanceThreshold = 2.


Constraints:
`2 <= n <= 100`
`1 <= edges.length <= n * (n - 1) / 2`
`edges[i].length == 3`
`0 <= fromi < toi < n`
`1 <= weighti, distanceThreshold <= 10^4`
All pairs `(fromi, toi)` are distinct.",Medium,https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance,Citrix,Graph,530,,"there are `n` cities numbered from `0` to `n-1`. given the array `edges` where `edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted edge between cities `fromi` and `toi`, and given the integer `distancethreshold`. return the city with the smallest number of cities that are reachable through some path and whose distance is at most `distancethreshold`, if there are multiple such cities, return the city with the greatest number. notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.","input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distancethreshold = 4 output: 3 explanation: the figure above describes the graph. the neighboring cities at a distancethreshold = 4 for each city are: city 0 -> [city 1, city 2] city 1 -> [city 0, city 2, city 3] city 2 -> [city 0, city 1, city 3] city 3 -> [city 1, city 2] cities 0 and 3 have 2 neighboring cities at a distancethreshold = 4, but we have to return city 3 since it has the greatest number. example 2: input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distancethreshold = 2 output: 0 explanation: the figure above describes the graph. the neighboring cities at a distancethreshold = 2 for each city are: city 0 -> [city 1] city 1 -> [city 0, city 4] city 2 -> [city 3, city 4] city 3 -> [city 2, city 4] city 4 -> [city 1, city 2, city 3] the city 0 has 1 neighboring city at a distancethreshold = 2.","`2 <= n <= 10^0` `1 <= edges.length <= n * (n - 1) / 2` `edges[i].length == 3` `0 <= fromi < toi < n` `1 <= weighti, distancethreshold <= 10^4` all pairs `(fromi, toi)` are distinct.",
1335,Minimum Difficulty of a Job Schedule,"You want to schedule a list of jobs in `d` days. Jobs are dependent (i.e To work on the `i-th` job, you have to finish all the jobs `j` where `0 <= j < i`).

You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the `d` days. The difficulty of a day is the maximum difficulty of a job done in that day.

Given an array of integers `jobDifficulty` and an integer `d`. The difficulty of the `i-th` job is `jobDifficulty[i]`.

Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.


Example 1:
Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: First day you can finish the first 5 jobs, total difficulty = 6.

Second day you can finish the last job, total difficulty = 1.

The difficulty of the schedule = 6 + 1 = 7 

Example 2:
Input: jobDifficulty = [9,9,9], d = 4
Output: -1
Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.


Example 3:
Input: jobDifficulty = [1,1,1], d = 3
Output: 3
Explanation: The schedule is one job per day. total difficulty will be 3.


Example 4:
Input: jobDifficulty = [7,1,7,1,7,1], d = 3
Output: 15

Example 5:
Input: jobDifficulty = [11,111,22,222,33,333,44,444], d = 6
Output: 843

Constraints:
`1 <= jobDifficulty.length <= 300`
`0 <= jobDifficulty[i] <= 1000`
`1 <= d <= 10`",Hard,https://leetcode.com/problems/minimum-difficulty-of-a-job-schedule,"Amazon,Swiggy",Dynamic Programming,617,,"you want to schedule a list of jobs in `d` days. jobs are dependent (i.e to work on the `i-th` job, you have to finish all the jobs `j` where `0 <= j < i`). you have to finish at least one task every day. the difficulty of a job schedule is the sum of difficulties of each day of the `d` days. the difficulty of a day is the maximum difficulty of a job done in that day. given an array of integers `jobdifficulty` and an integer `d`. the difficulty of the `i-th` job is `jobdifficulty[i]`. return the minimum difficulty of a job schedule. if you cannot find a schedule for the jobs return -1.","input: jobdifficulty = [6,5,4,3,2,1], d = 2 output: 7 explanation: first day you can finish the first 5 jobs, total difficulty = 6. second day you can finish the last job, total difficulty = 1. the difficulty of the schedule = 6 + 1 = 7 example 2: input: jobdifficulty = [9,9,9], d = 4 output: -1 explanation: if you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs. example 3: input: jobdifficulty = [1,1,1], d = 3 output: 3 explanation: the schedule is one job per day. total difficulty will be 3. example 4: input: jobdifficulty = [7,1,7,1,7,1], d = 3 output: 15 example 5: input: jobdifficulty = [11,111,22,222,33,333,44,444], d = 6 output: 843",`1 <= jobdifficulty.length <= 300` `0 <= jobdifficulty[i] <= 1000` `1 <= d <= 10`,
1336,Number of Transactions per Visit,SQL Schema,Hard,https://leetcode.com/problems/number-of-transactions-per-visit,"Square,Machine Zone,MachineZone",,34,,sql schema,,,
1337,The K Weakest Rows in a Matrix,"You are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). The soldiers are positioned in front of the civilians. That is, all the `1`'s will appear to the left of all the `0`'s in each row.

A row `i` is weaker than a row `j` if one of the following is true:
The number of soldiers in row `i` is less than the number of soldiers in row `j`.

Both rows have the same number of soldiers and `i < j`.

Return the indices of the `k` weakest rows in the matrix ordered from weakest to strongest.


Example 1:
Input: mat = 
[[1,1,0,0,0],
 [1,1,1,1,0],
 [1,0,0,0,0],
 [1,1,0,0,0],
 [1,1,1,1,1]], 
k = 3
Output: [2,0,3]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 2 
- Row 1: 4 
- Row 2: 1 
- Row 3: 2 
- Row 4: 5 
The rows ordered from weakest to strongest are [2,0,3,1,4].


Example 2:
Input: mat = 
[[1,0,0,0],
 [1,1,1,1],
 [1,0,0,0],
 [1,0,0,0]], 
k = 2
Output: [0,2]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 1 
- Row 1: 4 
- Row 2: 1 
- Row 3: 1 
The rows ordered from weakest to strongest are [0,2,3,1].


Constraints:
`m == mat.length`
`n == mat[i].length`
`2 <= n, m <= 100`
`1 <= k <= m`
`matrix[i][j]` is either 0 or 1.",Easy,https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix,Amazon,"Array,Binary Search",796,,"you are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). the soldiers are positioned in front of the civilians. that is, all the `1`'s will appear to the left of all the `0`'s in each row. a row `i` is weaker than a row `j` if one of the following is true: the number of soldiers in row `i` is less than the number of soldiers in row `j`. both rows have the same number of soldiers and `i < j`. return the indices of the `k` weakest rows in the matrix ordered from weakest to strongest.","input: mat = [[1,1,0,0,0], [1,1,1,1,0], [1,0,0,0,0], [1,1,0,0,0], [1,1,1,1,1]], k = 3 output: [2,0,3] explanation: the number of soldiers in each row is: - row 0: 2 - row 1: 4 - row 2: 1 - row 3: 2 - row 4: 5 the rows ordered from weakest to strongest are [2,0,3,1,4]. example 2: input: mat = [[1,0,0,0], [1,1,1,1], [1,0,0,0], [1,0,0,0]], k = 2 output: [0,2] explanation: the number of soldiers in each row is: - row 0: 1 - row 1: 4 - row 2: 1 - row 3: 1 the rows ordered from weakest to strongest are [0,2,3,1].","`m == mat.length` `n == mat[i].length` `2 <= n, m <= 10^0` `1 <= k <= m` `matrix[i][j]` is either 0 or 1.",
1338,Reduce Array Size to The Half,"Given an array `arr`.  You can choose a set of integers and remove all the occurrences of these integers in the array.

Return the minimum size of the set so that at least half of the integers of the array are removed.


Example 1:
Input: arr = [3,3,3,3,5,5,5,2,2,7]
Output: 2
Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).

Possible sets of size 2 are {3,5},{3,2},{5,2}.

Choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has size greater than half of the size of the old array.


Example 2:
Input: arr = [7,7,7,7,7,7]
Output: 1
Explanation: The only possible set you can choose is {7}. This will make the new array empty.


Example 3:
Input: arr = [1,9]
Output: 1

Example 4:
Input: arr = [1000,1000,3,7]
Output: 1

Example 5:
Input: arr = [1,2,3,4,5,6,7,8,9,10]
Output: 5

Constraints:
`1 <= arr.length <= 10^5`
`arr.length` is even.

`1 <= arr[i] <= 10^5`",Medium,https://leetcode.com/problems/reduce-array-size-to-the-half,Akuna Capital,"Array,Greedy",424,,given an array `arr`. you can choose a set of integers and remove all the occurrences of these integers in the array. return the minimum size of the set so that at least half of the integers of the array are removed.,"input: arr = [3,3,3,3,5,5,5,2,2,7] output: 2 explanation: choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array). possible sets of size 2 are {3,5},{3,2},{5,2}. choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has size greater than half of the size of the old array. example 2: input: arr = [7,7,7,7,7,7] output: 1 explanation: the only possible set you can choose is {7}. this will make the new array empty. example 3: input: arr = [1,9] output: 1 example 4: input: arr = [1000,1000,3,7] output: 1 example 5: input: arr = [1,2,3,4,5,6,7,8,9,10] output: 5",`1 <= arr.length <= 10^5` `arr.length` is even. `1 <= arr[i] <= 10^5`,
1339,Maximum Product of Splitted Binary Tree,"Given a binary tree `root`. Split the binary tree into two subtrees by removing 1 edge such that the product of the sums of the subtrees are maximized.

Since the answer may be too large, return it modulo 10^9 + 7.


Example 1:
Input: root = [1,2,3,4,5,6]
Output: 110
Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)

Example 2:
Input: root = [1,null,2,3,4,null,null,5,6]
Output: 90
Explanation:  Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)

Example 3:
Input: root = [2,3,9,10,7,8,6,5,4,11,1]
Output: 1025

Example 4:
Input: root = [1,1]
Output: 1

Constraints:
Each tree has at most `50000` nodes and at least `2` nodes.

Each node's value is between `[1, 10000]`.",Medium,https://leetcode.com/problems/maximum-product-of-splitted-binary-tree,Amazon,"Dynamic Programming,Tree,Depth-first Search",516,,"given a binary tree `root`. split the binary tree into two subtrees by removing 1 edge such that the product of the sums of the subtrees are maximized. since the answer may be too large, return it modulo 10^9 + 7.","input: root = [1,2,3,4,5,6] output: 110 explanation: remove the red edge and get 2 binary trees with sum 11 and 10. their product is 110 (11*10) example 2: input: root = [1,null,2,3,4,null,null,5,6] output: 90 explanation: remove the red edge and get 2 binary trees with sum 15 and 6.their product is 90 (15*6) example 3: input: root = [2,3,9,10,7,8,6,5,4,11,1] output: 1025 example 4: input: root = [1,1] output: 1","each tree has at most `50000` nodes and at least `2` nodes. each node's value is between `[1, 10000]`.",
1340,Jump Game V,"Given an array of integers `arr` and an integer `d`. In one step you can jump from index `i` to index:
`i + x` where: `i + x < arr.length` and ` 0 < x <= d`.

`i - x` where: `i - x >= 0` and ` 0 < x <= d`.

In addition, you can only jump from index `i` to index `j` if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (More formally `min(i, j) < k < max(i, j)`).

You can choose any index of the array and start jumping. Return the maximum number of indices you can visit.

Notice that you can not jump outside of the array at any time.


Example 1:
Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2
Output: 4
Explanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.

Note that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.

Similarly You cannot jump from index 3 to index 2 or index 1.


Example 2:
Input: arr = [3,3,3,3,3], d = 3
Output: 1
Explanation: You can start at any index. You always cannot jump to any index.


Example 3:
Input: arr = [7,6,5,4,3,2,1], d = 1
Output: 7
Explanation: Start at index 0. You can visit all the indicies. 

Example 4:
Input: arr = [7,1,7,1,7,1], d = 2
Output: 2

Example 5:
Input: arr = [66], d = 1
Output: 1

Constraints:
`1 <= arr.length <= 1000`
`1 <= arr[i] <= 10^5`
`1 <= d <= arr.length`",Hard,https://leetcode.com/problems/jump-game-v,Microsoft,Dynamic Programming,334,,"given an array of integers `arr` and an integer `d`. in one step you can jump from index `i` to index: `i + x` where: `i + x < arr.length` and ` 0 < x <= d`. `i - x` where: `i - x >= 0` and ` 0 < x <= d`. in addition, you can only jump from index `i` to index `j` if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (more formally `min(i, j) < k < max(i, j)`). you can choose any index of the array and start jumping. return the maximum number of indices you can visit. notice that you can not jump outside of the array at any time.","input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2 output: 4 explanation: you can start at index 10. you can jump 10 --> 8 --> 6 --> 7 as shown. note that if you start at index 6 you can only jump to index 7. you cannot jump to index 5 because 13 > 9. you cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9. similarly you cannot jump from index 3 to index 2 or index 1. example 2: input: arr = [3,3,3,3,3], d = 3 output: 1 explanation: you can start at any index. you always cannot jump to any index. example 3: input: arr = [7,6,5,4,3,2,1], d = 1 output: 7 explanation: start at index 0. you can visit all the indicies. example 4: input: arr = [7,1,7,1,7,1], d = 2 output: 2 example 5: input: arr = [66], d = 1 output: 1",`1 <= arr.length <= 1000` `1 <= arr[i] <= 10^5` `1 <= d <= arr.length`,
1341,Movie Rating,SQL Schema,Medium,https://leetcode.com/problems/movie-rating,SAP,,60,,sql schema,,,
1342,Number of Steps to Reduce a Number to Zero,"Given a non-negative integer `num`, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.


Example 1:
Input: num = 14
Output: 6
Explanation: 
Step 1) 14 is even; divide by 2 and obtain 7. 
Step 2) 7 is odd; subtract 1 and obtain 6.

Step 3) 6 is even; divide by 2 and obtain 3. 
Step 4) 3 is odd; subtract 1 and obtain 2. 
Step 5) 2 is even; divide by 2 and obtain 1. 
Step 6) 1 is odd; subtract 1 and obtain 0.


Example 2:
Input: num = 8
Output: 4
Explanation: 
Step 1) 8 is even; divide by 2 and obtain 4. 
Step 2) 4 is even; divide by 2 and obtain 2. 
Step 3) 2 is even; divide by 2 and obtain 1. 
Step 4) 1 is odd; subtract 1 and obtain 0.


Example 3:
Input: num = 123
Output: 12

Constraints:
`0 <= num <= 10^6`",Easy,https://leetcode.com/problems/number-of-steps-to-reduce-a-number-to-zero,"Amazon,Microsoft",Bit Manipulation,863,,"given a non-negative integer `num`, return the number of steps to reduce it to zero. if the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.",input: num = 14 output: 6 explanation: step 1) 14 is even; divide by 2 and obtain 7. step 2) 7 is odd; subtract 1 and obtain 6. step 3) 6 is even; divide by 2 and obtain 3. step 4) 3 is odd; subtract 1 and obtain 2. step 5) 2 is even; divide by 2 and obtain 1. step 6) 1 is odd; subtract 1 and obtain 0. example 2: input: num = 8 output: 4 explanation: step 1) 8 is even; divide by 2 and obtain 4. step 2) 4 is even; divide by 2 and obtain 2. step 3) 2 is even; divide by 2 and obtain 1. step 4) 1 is odd; subtract 1 and obtain 0. example 3: input: num = 123 output: 12,`0 <= num <= 10^6`,
1343,Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold,"Given an array of integers `arr` and two integers `k` and `threshold`.

Return the number of sub-arrays of size `k` and average greater than or equal to `threshold`.


Example 1:
Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4
Output: 3
Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).


Example 2:
Input: arr = [1,1,1,1,1], k = 1, threshold = 0
Output: 5

Example 3:
Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5
Output: 6
Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.


Example 4:
Input: arr = [7,7,7,7,7,7,7], k = 7, threshold = 7
Output: 1

Example 5:
Input: arr = [4,4,4,4], k = 4, threshold = 1
Output: 1

Constraints:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 10^4`
`1 <= k <= arr.length`
`0 <= threshold <= 10^4`",Medium,https://leetcode.com/problems/number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold,LinkedIn,Array,215,,given an array of integers `arr` and two integers `k` and `threshold`. return the number of sub-arrays of size `k` and average greater than or equal to `threshold`.,"input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4 output: 3 explanation: sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. all other sub-arrays of size 3 have averages less than 4 (the threshold). example 2: input: arr = [1,1,1,1,1], k = 1, threshold = 0 output: 5 example 3: input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5 output: 6 explanation: the first 6 sub-arrays of size 3 have averages greater than 5. note that averages are not integers. example 4: input: arr = [7,7,7,7,7,7,7], k = 7, threshold = 7 output: 1 example 5: input: arr = [4,4,4,4], k = 4, threshold = 1 output: 1",`1 <= arr.length <= 10^5` `1 <= arr[i] <= 10^4` `1 <= k <= arr.length` `0 <= threshold <= 10^4`,
1344,Angle Between Hands of a Clock,"Given two numbers, `hour` and `minutes`. Return the smaller angle (in degrees) formed between the `hour` and the `minute` hand.


Example 1:
Input: hour = 12, minutes = 30
Output: 165

Example 2:
Input: hour = 3, minutes = 30
Output: 75

Example 3:
Input: hour = 3, minutes = 15
Output: 7.5

Example 4:
Input: hour = 4, minutes = 50
Output: 155

Example 5:
Input: hour = 12, minutes = 0
Output: 0

Constraints:
`1 <= hour <= 12`
`0 <= minutes <= 59`
Answers within `10^-5` of the actual value will be accepted as correct.",Medium,https://leetcode.com/problems/angle-between-hands-of-a-clock,"Microsoft,Amazon",Math,499,,"given two numbers, `hour` and `minutes`. return the smaller angle (in degrees) formed between the `hour` and the `minute` hand.","input: hour = 12, minutes = 30 output: 165 example 2: input: hour = 3, minutes = 30 output: 75 example 3: input: hour = 3, minutes = 15 output: 7.5 example 4: input: hour = 4, minutes = 50 output: 155 example 5: input: hour = 12, minutes = 0 output: 0",`1 <= hour <= 12` `0 <= minutes <= 59` answers within `10^-5` of the actual value will be accepted as correct.,
1345,Jump Game IV,"Given an array of integers `arr`, you are initially positioned at the first index of the array.

In one step you can jump from index `i` to index:
`i + 1` where: `i + 1 < arr.length`.

`i - 1` where: `i - 1 >= 0`.

`j` where: `arr[i] == arr[j]` and `i != j`.

Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.


Example 1:
Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.


Example 2:
Input: arr = [7]
Output: 0
Explanation: Start index is the last index. You don't need to jump.


Example 3:
Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7 which is last index of the array.


Example 4:
Input: arr = [6,1,9]
Output: 2

Example 5:
Input: arr = [11,22,7,7,7,7,7,7,7,22,13]
Output: 3

Constraints:
`1 <= arr.length <= 5 * 104`
`-108 <= arr[i] <= 108`",Hard,https://leetcode.com/problems/jump-game-iv,"Amazon,Google",Breadth-first Search,588,,"given an array of integers `arr`, you are initially positioned at the first index of the array. in one step you can jump from index `i` to index: `i + 1` where: `i + 1 < arr.length`. `i - 1` where: `i - 1 >= 0`. `j` where: `arr[i] == arr[j]` and `i != j`. return the minimum number of steps to reach the last index of the array. notice that you can not jump outside of the array at any time.","input: arr = [100,-23,-23,404,100,23,23,23,3,404] output: 3 explanation: you need three jumps from index 0 --> 4 --> 3 --> 9. note that index 9 is the last index of the array. example 2: input: arr = [7] output: 0 explanation: start index is the last index. you don't need to jump. example 3: input: arr = [7,6,9,6,9,6,9,7] output: 1 explanation: you can jump directly from index 0 to index 7 which is last index of the array. example 4: input: arr = [6,1,9] output: 2 example 5: input: arr = [11,22,7,7,7,7,7,7,7,22,13] output: 3",`1 <= arr.length <= 5 * 10^4` `-10^8 <= arr[i] <= 10^8`,
1346,Check If N and Its Double Exist,"Given an array `arr` of integers, check if there exists two integers `N` and `M` such that `N` is the double of `M` ( i.e. `N = 2 * M`).

More formally check if there exists two indices `i` and `j` such that :
`i != j`
`0 <= i, j < arr.length`
`arr[i] == 2 * arr[j]`

Example 1:
Input: arr = [10,2,5,3]
Output: true
Explanation: N` = 10` is the double of M` = 5`,that is, `10 = 2 * 5`.


Example 2:
Input: arr = [7,1,14,11]
Output: true
Explanation: N` = 14` is the double of M` = 7`,that is, `14 = 2 * 7`.


Example 3:
Input: arr = [3,1,7,11]
Output: false
Explanation: In this case does not exist N and M, such that N = 2 * M.


Constraints:
`2 <= arr.length <= 500`
`-10^3 <= arr[i] <= 10^3`",Easy,https://leetcode.com/problems/check-if-n-and-its-double-exist,Google,Array,317,,"given an array `arr` of integers, check if there exists two integers `n` and `m` such that `n` is the double of `m` ( i.e. `n = 2 * m`). more formally check if there exists two indices `i` and `j` such that : `i != j` `0 <= i, j < arr.length` `arr[i] == 2 * arr[j]`","input: arr = [10,2,5,3] output: true explanation: n` = 10` is the double of m` = 5`,that is, `10 = 2 * 5`. example 2: input: arr = [7,1,14,11] output: true explanation: n` = 14` is the double of m` = 7`,that is, `14 = 2 * 7`. example 3: input: arr = [3,1,7,11] output: false explanation: in this case does not exist n and m, such that n = 2 * m.",`2 <= arr.length <= 500` `-10^3 <= arr[i] <= 10^3`,
1347,Minimum Number of Steps to Make Two Strings Anagram,"Given two equal-size strings `s` and `t`. In one step you can choose any character of `t` and replace it with another character.

Return the minimum number of steps to make `t` an anagram of `s`.

An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.


Example 1:
Input: s = ""bab"", t = ""aba""
Output: 1
Explanation: Replace the first 'a' in t with b, t = ""bba"" which is anagram of s.


Example 2:
Input: s = ""leetcode"", t = ""practice""
Output: 5
Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.


Example 3:
Input: s = ""anagram"", t = ""mangaar""
Output: 0
Explanation: ""anagram"" and ""mangaar"" are anagrams. 

Example 4:
Input: s = ""xxyyzz"", t = ""xxyyzz""
Output: 0

Example 5:
Input: s = ""friend"", t = ""family""
Output: 4

Constraints:
`1 <= s.length <= 50000`
`s.length == t.length`
`s` and `t` contain lower-case English letters only.",Medium,https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram,"Bloomberg,Microsoft",String,559,"[Determine if Two Strings Are Close, /problems/determine-if-two-strings-are-close/, Medium]",given two equal-size strings `s` and `t`. in one step you can choose any character of `t` and replace it with another character. return the minimum number of steps to make `t` an anagram of `s`. an anagram of a string is a string that contains the same characters with a different (or the same) ordering.,"input: s = ""bab"", t = ""aba"" output: 1 explanation: replace the first 'a' in t with b, t = ""bba"" which is anagram of s. example 2: input: s = ""leetcode"", t = ""practice"" output: 5 explanation: replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s. example 3: input: s = ""anagram"", t = ""mangaar"" output: 0 explanation: ""anagram"" and ""mangaar"" are anagrams. example 4: input: s = ""xxyyzz"", t = ""xxyyzz"" output: 0 example 5: input: s = ""friend"", t = ""family"" output: 4",`1 <= s.length <= 50000` `s.length == t.length` `s` and `t` contain lower-case english letters only.,
1348,Tweet Counts Per Frequency,"A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).

For example, the period `[10, 10000]` (in seconds) would be partitioned into the following time chunks with these frequencies:
Every minute (60-second chunks): `[10,69]`, `[70,129]`, `[130,189]`, `...`, `[9970,10000]`
Every hour (3600-second chunks): `[10,3609]`, `[3610,7209]`, `[7210,10000]`
Every day (86400-second chunks): `[10,10000]`
Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (`10000` in the above example).

Design and implement an API to help the company with their analysis.

Implement the `TweetCounts` class:
`TweetCounts()` Initializes the `TweetCounts` object.

`void recordTweet(String tweetName, int time)` Stores the `tweetName` at the recorded `time` (in seconds).

`List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)` Returns a list of integers representing the number of tweets with `tweetName` in each time chunk for the given period of time `[startTime, endTime]` (in seconds) and frequency `freq`.

	
`freq` is one of `""minute""`, `""hour""`, or `""day""` representing a frequency of every minute, hour, or day respectively.


Example:
Input
[""TweetCounts"",""recordTweet"",""recordTweet"",""recordTweet"",""getTweetCountsPerFrequency"",""getTweetCountsPerFrequency"",""recordTweet"",""getTweetCountsPerFrequency""]
[[],[""tweet3"",0],[""tweet3"",60],[""tweet3"",10],[""minute"",""tweet3"",0,59],[""minute"",""tweet3"",0,60],[""tweet3"",120],[""hour"",""tweet3"",0,210]]
Output
[null,null,null,null,[2],[2,1],null,[4]]
Explanation
TweetCounts tweetCounts = new TweetCounts();
tweetCounts.recordTweet(""tweet3"", 0);                              // New tweet ""tweet3"" at time 0
tweetCounts.recordTweet(""tweet3"", 60);                             // New tweet ""tweet3"" at time 60
tweetCounts.recordTweet(""tweet3"", 10);                             // New tweet ""tweet3"" at time 10
tweetCounts.getTweetCountsPerFrequency(""minute"", ""tweet3"", 0, 59); // return [2]; chunk [0,59] had 2 tweets
tweetCounts.getTweetCountsPerFrequency(""minute"", ""tweet3"", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet
tweetCounts.recordTweet(""tweet3"", 120);                            // New tweet ""tweet3"" at time 120
tweetCounts.getTweetCountsPerFrequency(""hour"", ""tweet3"", 0, 210);  // return [4]; chunk [0,210] had 4 tweets

Constraints:
`0 <= time, startTime, endTime <= 109`
`0 <= endTime - startTime <= 104`
There will be at most `104` calls in total to `recordTweet` and `getTweetCountsPerFrequency`.",Medium,https://leetcode.com/problems/tweet-counts-per-frequency,Twitter,Design,8,,"a social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. these periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day). for example, the period `[10, 10000]` (in seconds) would be partitioned into the following time chunks with these frequencies: every minute (60-second chunks): `[10,69]`, `[70,129]`, `[130,189]`, `...`, `[9970,10000]` every hour (3600-second chunks): `[10,3609]`, `[3610,7209]`, `[7210,10000]` every day (86400-second chunks): `[10,10000]` notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (`10000` in the above example). design and implement an api to help the company with their analysis. implement the `tweetcounts` class: `tweetcounts()` initializes the `tweetcounts` object. `void recordtweet(string tweetname, int time)` stores the `tweetname` at the recorded `time` (in seconds). `list<integer> gettweetcountsperfrequency(string freq, string tweetname, int starttime, int endtime)` returns a list of integers representing the number of tweets with `tweetname` in each time chunk for the given period of time `[starttime, endtime]` (in seconds) and frequency `freq`. `freq` is one of `""minute""`, `""hour""`, or `""day""` representing a frequency of every minute, hour, or day respectively.","input [""tweetcounts"",""recordtweet"",""recordtweet"",""recordtweet"",""gettweetcountsperfrequency"",""gettweetcountsperfrequency"",""recordtweet"",""gettweetcountsperfrequency""] [[],[""tweet3"",0],[""tweet3"",60],[""tweet3"",10],[""minute"",""tweet3"",0,59],[""minute"",""tweet3"",0,60],[""tweet3"",120],[""hour"",""tweet3"",0,210]] output [null,null,null,null,[2],[2,1],null,[4]] explanation tweetcounts tweetcounts = new tweetcounts(); tweetcounts.recordtweet(""tweet3"", 0); // new tweet ""tweet3"" at time 0 tweetcounts.recordtweet(""tweet3"", 60); // new tweet ""tweet3"" at time 60 tweetcounts.recordtweet(""tweet3"", 10); // new tweet ""tweet3"" at time 10 tweetcounts.gettweetcountsperfrequency(""minute"", ""tweet3"", 0, 59); // return [2]; chunk [0,59] had 2 tweets tweetcounts.gettweetcountsperfrequency(""minute"", ""tweet3"", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet tweetcounts.recordtweet(""tweet3"", 120); // new tweet ""tweet3"" at time 120 tweetcounts.gettweetcountsperfrequency(""hour"", ""tweet3"", 0, 210); // return [4]; chunk [0,210] had 4 tweets","`0 <= time, starttime, endtime <= 10^9` `0 <= endtime - starttime <= 10^4` there will be at most `10^4` calls in total to `recordtweet` and `gettweetcountsperfrequency`.",
1349,Maximum Students Taking Exam,"Given a `m * n` matrix `seats`  that represent seats distributions in a classroom. If a seat is broken, it is denoted by `'#'` character otherwise it is denoted by a `'.'` character.

Students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. Return the maximum number of students that can take the exam together without any cheating being possible..

Students must be placed in seats in good condition.


Example 1:
Input: seats = [[""#"",""."",""#"",""#"",""."",""#""],
                [""."",""#"",""#"",""#"",""#"","".""],
                [""#"",""."",""#"",""#"",""."",""#""]]
Output: 4
Explanation: Teacher can place 4 students in available seats so they don't cheat on the exam. 

Example 2:
Input: seats = [[""."",""#""],
                [""#"",""#""],
                [""#"","".""],
                [""#"",""#""],
                [""."",""#""]]
Output: 3
Explanation: Place all students in available seats. 

Example 3:
Input: seats = [[""#"",""."",""."",""."",""#""],
                [""."",""#"",""."",""#"","".""],
                [""."",""."",""#"",""."","".""],
                [""."",""#"",""."",""#"","".""],
                [""#"",""."",""."",""."",""#""]]
Output: 10
Explanation: Place students in available seats in column 1, 3 and 5.


Constraints:
`seats` contains only characters `'.' and``'#'.`
`m == seats.length`
`n == seats[i].length`
`1 <= m <= 8`
`1 <= n <= 8`",Hard,https://leetcode.com/problems/maximum-students-taking-exam,SAP,Dynamic Programming,388,,"given a `m * n` matrix `seats` that represent seats distributions in a classroom. if a seat is broken, it is denoted by `'#'` character otherwise it is denoted by a `'.'` character. students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. return the maximum number of students that can take the exam together without any cheating being possible.. students must be placed in seats in good condition.","input: seats = [[""#"",""."",""#"",""#"",""."",""#""], [""."",""#"",""#"",""#"",""#"","".""], [""#"",""."",""#"",""#"",""."",""#""]] output: 4 explanation: teacher can place 4 students in available seats so they don't cheat on the exam. example 2: input: seats = [[""."",""#""], [""#"",""#""], [""#"","".""], [""#"",""#""], [""."",""#""]] output: 3 explanation: place all students in available seats. example 3: input: seats = [[""#"",""."",""."",""."",""#""], [""."",""#"",""."",""#"","".""], [""."",""."",""#"",""."","".""], [""."",""#"",""."",""#"","".""], [""#"",""."",""."",""."",""#""]] output: 10 explanation: place students in available seats in column 1, 3 and 5.",`seats` contains only characters `'.' and``'#'.` `m == seats.length` `n == seats[i].length` `1 <= m <= 8` `1 <= n <= 8`,
1350,Students With Invalid Departments,SQL Schema,Easy,https://leetcode.com/problems/students-with-invalid-departments,Amazon,,76,,sql schema,,,
1351,Count Negative Numbers in a Sorted Matrix,"Given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in `grid`.


Example 1:
Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.


Example 2:
Input: grid = [[3,2],[1,0]]
Output: 0

Example 3:
Input: grid = [[1,-1],[-1,-1]]
Output: 3

Example 4:
Input: grid = [[-1]]
Output: 1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 100`
`-100 <= grid[i][j] <= 100`
Follow up: Could you find an `O(n + m)` solution?",Easy,https://leetcode.com/problems/count-negative-numbers-in-a-sorted-matrix,"Amazon,Microsoft,Apple","Array,Binary Search",921,,"given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in `grid`.","input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]] output: 8 explanation: there are 8 negatives number in the matrix. example 2: input: grid = [[3,2],[1,0]] output: 0 example 3: input: grid = [[1,-1],[-1,-1]] output: 3 example 4: input: grid = [[-1]] output: 1","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 10^0` `-10^0 <= grid[i][j] <= 10^0`",could you find an `o(n + m)` solution?
1352,Product of the Last K Numbers,"Implement the class `ProductOfNumbers` that supports two methods:
1.` add(int num)`
Adds the number `num` to the back of the current list of numbers.

2.` getProduct(int k)`
Returns the product of the last `k` numbers in the current list.

You can assume that always the current list has at least `k` numbers.

At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.


Example:
Input
[""ProductOfNumbers"",""add"",""add"",""add"",""add"",""add"",""getProduct"",""getProduct"",""getProduct"",""add"",""getProduct""]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]
Output
[null,null,null,null,null,null,20,40,0,null,32]
Explanation
ProductOfNumbers productOfNumbers = new ProductOfNumbers();
productOfNumbers.add(3);        // [3]
productOfNumbers.add(0);        // [3,0]
productOfNumbers.add(2);        // [3,0,2]
productOfNumbers.add(5);        // [3,0,2,5]
productOfNumbers.add(4);        // [3,0,2,5,4]
productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20
productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
productOfNumbers.add(8);        // [3,0,2,5,4,8]
productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 

Constraints:
There will be at most `40000` operations considering both `add` and `getProduct`.

`0 <= num <= 100`
`1 <= k <= 40000`",Medium,https://leetcode.com/problems/product-of-the-last-k-numbers,"ByteDance,Google,Uber","Array,Design",522,,"implement the class `productofnumbers` that supports two methods: 1.` add(int num)` adds the number `num` to the back of the current list of numbers. 2.` getproduct(int k)` returns the product of the last `k` numbers in the current list. you can assume that always the current list has at least `k` numbers. at any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.","input [""productofnumbers"",""add"",""add"",""add"",""add"",""add"",""getproduct"",""getproduct"",""getproduct"",""add"",""getproduct""] [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]] output [null,null,null,null,null,null,20,40,0,null,32] explanation productofnumbers productofnumbers = new productofnumbers(); productofnumbers.add(3); // [3] productofnumbers.add(0); // [3,0] productofnumbers.add(2); // [3,0,2] productofnumbers.add(5); // [3,0,2,5] productofnumbers.add(4); // [3,0,2,5,4] productofnumbers.getproduct(2); // return 20. the product of the last 2 numbers is 5 * 4 = 20 productofnumbers.getproduct(3); // return 40. the product of the last 3 numbers is 2 * 5 * 4 = 40 productofnumbers.getproduct(4); // return 0. the product of the last 4 numbers is 0 * 2 * 5 * 4 = 0 productofnumbers.add(8); // [3,0,2,5,4,8] productofnumbers.getproduct(2); // return 32. the product of the last 2 numbers is 4 * 8 = 32",there will be at most `40000` operations considering both `add` and `getproduct`. `0 <= num <= 10^0` `1 <= k <= 40000`,
1353,Maximum Number of Events That Can Be Attended,"Given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi` and ends at `endDayi`.

You can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. Notice that you can only attend one event at any time `d`.

Return the maximum number of events you can attend.


Example 1:
Input: events = [[1,2],[2,3],[3,4]]
Output: 3
Explanation: You can attend all the three events.

One way to attend them all is as shown.

Attend the first event on day 1.

Attend the second event on day 2.

Attend the third event on day 3.


Example 2:
Input: events= [[1,2],[2,3],[3,4],[1,2]]
Output: 4

Example 3:
Input: events = [[1,4],[4,4],[2,2],[3,4],[1,1]]
Output: 4

Example 4:
Input: events = [[1,100000]]
Output: 1

Example 5:
Input: events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]
Output: 7

Constraints:
`1 <= events.length <= 105`
`events[i].length == 2`
`1 <= startDayi <= endDayi <= 105`",Medium,https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended,Infosys,"Greedy,Sort,Segment Tree",814,"[Maximum Number of Events That Can Be Attended II, /problems/maximum-number-of-events-that-can-be-attended-ii/, Hard]","given an array of `events` where `events[i] = [startdayi, enddayi]`. every event `i` starts at `startdayi` and ends at `enddayi`. you can attend an event `i` at any day `d` where `starttimei <= d <= endtimei`. notice that you can only attend one event at any time `d`. return the maximum number of events you can attend.","input: events = [[1,2],[2,3],[3,4]] output: 3 explanation: you can attend all the three events. one way to attend them all is as shown. attend the first event on day 1. attend the second event on day 2. attend the third event on day 3. example 2: input: events= [[1,2],[2,3],[3,4],[1,2]] output: 4 example 3: input: events = [[1,4],[4,4],[2,2],[3,4],[1,1]] output: 4 example 4: input: events = [[1,100000]] output: 1 example 5: input: events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]] output: 7",`1 <= events.length <= 10^5` `events[i].length == 2` `1 <= startdayi <= enddayi <= 10^5`,
1354,Construct Target Array With Multiple Sums,"Given an array of integers `target`. From a starting array, `A` consisting of all 1's, you may perform the following procedure :
let `x` be the sum of all elements currently in your array.

choose index `i`, such that `0 <= i < target.size` and set the value of `A` at index `i` to `x`.

You may repeat this procedure as many times as needed.

Return True if it is possible to construct the `target` array from `A` otherwise return False.


Example 1:
Input: target = [9,3,5]
Output: true
Explanation: Start with [1, 1, 1] 
[1, 1, 1], sum = 3 choose index 1
[1, 3, 1], sum = 5 choose index 2
[1, 3, 5], sum = 9 choose index 0
[9, 3, 5] Done

Example 2:
Input: target = [1,1,1,2]
Output: false
Explanation: Impossible to create target array from [1,1,1,1].


Example 3:
Input: target = [8,5]
Output: true

Constraints:
`N == target.length`
`1 <= target.length <= 5 * 10^4`
`1 <= target[i] <= 10^9`",Hard,https://leetcode.com/problems/construct-target-array-with-multiple-sums,Quora,Greedy,263,,"given an array of integers `target`. from a starting array, `a` consisting of all 1's, you may perform the following procedure : let `x` be the sum of all elements currently in your array. choose index `i`, such that `0 <= i < target.size` and set the value of `a` at index `i` to `x`. you may repeat this procedure as many times as needed. return true if it is possible to construct the `target` array from `a` otherwise return false.","input: target = [9,3,5] output: true explanation: start with [1, 1, 1] [1, 1, 1], sum = 3 choose index 1 [1, 3, 1], sum = 5 choose index 2 [1, 3, 5], sum = 9 choose index 0 [9, 3, 5] done example 2: input: target = [1,1,1,2] output: false explanation: impossible to create target array from [1,1,1,1]. example 3: input: target = [8,5] output: true",`n == target.length` `1 <= target.length <= 5 * 10^4` `1 <= target[i] <= 10^9`,
1355,Activity Participants,SQL Schema,Medium,https://leetcode.com/problems/activity-participants,IBM,,66,,sql schema,,,
1356,Sort Integers by The Number of 1 Bits,"Given an integer array `arr`. You have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.

Return the sorted array.


Example 1:
Input: arr = [0,1,2,3,4,5,6,7,8]
Output: [0,1,2,4,8,3,5,6,7]
Explantion: [0] is the only integer with 0 bits.

[1,2,4,8] all have 1 bit.

[3,5,6] have 2 bits.

[7] has 3 bits.

The sorted array by bits is [0,1,2,4,8,3,5,6,7]

Example 2:
Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]
Output: [1,2,4,8,16,32,64,128,256,512,1024]
Explantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.


Example 3:
Input: arr = [10000,10000]
Output: [10000,10000]

Example 4:
Input: arr = [2,3,5,7,11,13,17,19]
Output: [2,3,5,17,7,11,13,19]

Example 5:
Input: arr = [10,100,1000,10000]
Output: [10,100,10000,1000]

Constraints:
`1 <= arr.length <= 500`
`0 <= arr[i] <= 10^4`",Easy,https://leetcode.com/problems/sort-integers-by-the-number-of-1-bits,Adobe,"Sort,Bit Manipulation",473,,given an integer array `arr`. you have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order. return the sorted array.,"input: arr = [0,1,2,3,4,5,6,7,8] output: [0,1,2,4,8,3,5,6,7] explantion: [0] is the only integer with 0 bits. [1,2,4,8] all have 1 bit. [3,5,6] have 2 bits. [7] has 3 bits. the sorted array by bits is [0,1,2,4,8,3,5,6,7] example 2: input: arr = [1024,512,256,128,64,32,16,8,4,2,1] output: [1,2,4,8,16,32,64,128,256,512,1024] explantion: all integers have 1 bit in the binary representation, you should just sort them in ascending order. example 3: input: arr = [10000,10000] output: [10000,10000] example 4: input: arr = [2,3,5,7,11,13,17,19] output: [2,3,5,17,7,11,13,19] example 5: input: arr = [10,100,1000,10000] output: [10,100,10000,1000]",`1 <= arr.length <= 500` `0 <= arr[i] <= 10^4`,
1357,Apply Discount Every n Orders,"There is a sale in a supermarket, there will be a `discount` every `n` customer.

There are some products in the supermarket where the id of the `i-th` product is `products[i]` and the price per unit of this product is `prices[i]`.

The system will count the number of customers and when the `n-th` customer arrive he/she will have a `discount` on the bill. (i.e if the cost is `x` the new cost is `x - (discount * x) / 100`). Then the system will start counting customers again.

The customer orders a certain amount of each product where `product[i]` is the id of the `i-th` product the customer ordered and `amount[i]` is the number of units the customer ordered of that product.

Implement the `Cashier` class:
`Cashier(int n, int discount, int[] products, int[] prices)` Initializes the object with `n`, the `discount`, the `products` and their `prices`.

`double getBill(int[] product, int[] amount)` returns the value of the bill and apply the discount if needed. Answers within `10^-5` of the actual value will be accepted as correct.


Example 1:
Input
[""Cashier"",""getBill"",""getBill"",""getBill"",""getBill"",""getBill"",""getBill"",""getBill""]
[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]
Output
[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]
Explanation
Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);
cashier.getBill([1,2],[1,2]);                        // return 500.0, bill = 1 * 100 + 2 * 200 = 500.

cashier.getBill([3,7],[10,10]);                      // return 4000.0
cashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0, The bill was 1600.0 but as this is the third customer, he has a discount of 50% which means his bill is only 1600 - 1600 * (50 / 100) = 800.

cashier.getBill([4],[10]);                           // return 4000.0
cashier.getBill([7,3],[10,10]);                      // return 4000.0
cashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0, Bill was 14700.0 but as the system counted three more customers, he will have a 50% discount and the bill becomes 7350.0
cashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0

Constraints:
`1 <= n <= 10^4`
`0 <= discount <= 100`
`1 <= products.length <= 200`
`1 <= products[i] <= 200`
There are not repeated elements in the array `products`.

`prices.length == products.length`
`1 <= prices[i] <= 1000`
`1 <= product.length <= products.length`
`product[i]` exists in `products`.

`amount.length == product.length`
`1 <= amount[i] <= 1000`
At most `1000` calls will be made to `getBill`.

Answers within `10^-5` of the actual value will be accepted as correct.",Medium,https://leetcode.com/problems/apply-discount-every-n-orders,Facebook,Design,76,,"there is a sale in a supermarket, there will be a `discount` every `n` customer. there are some products in the supermarket where the id of the `i-th` product is `products[i]` and the price per unit of this product is `prices[i]`. the system will count the number of customers and when the `n-th` customer arrive he/she will have a `discount` on the bill. (i.e if the cost is `x` the new cost is `x - (discount * x) / 100`). then the system will start counting customers again. the customer orders a certain amount of each product where `product[i]` is the id of the `i-th` product the customer ordered and `amount[i]` is the number of units the customer ordered of that product. implement the `cashier` class: `cashier(int n, int discount, int[] products, int[] prices)` initializes the object with `n`, the `discount`, the `products` and their `prices`. `double getbill(int[] product, int[] amount)` returns the value of the bill and apply the discount if needed. answers within `10^-5` of the actual value will be accepted as correct.","input [""cashier"",""getbill"",""getbill"",""getbill"",""getbill"",""getbill"",""getbill"",""getbill""] [[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]] output [null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0] explanation cashier cashier = new cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]); cashier.getbill([1,2],[1,2]); // return 500.0, bill = 1 * 100 + 2 * 200 = 500. cashier.getbill([3,7],[10,10]); // return 4000.0 cashier.getbill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]); // return 800.0, the bill was 1600.0 but as this is the third customer, he has a discount of 50% which means his bill is only 1600 - 1600 * (50 / 100) = 800. cashier.getbill([4],[10]); // return 4000.0 cashier.getbill([7,3],[10,10]); // return 4000.0 cashier.getbill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0, bill was 14700.0 but as the system counted three more customers, he will have a 50% discount and the bill becomes 7350.0 cashier.getbill([2,3,5],[5,3,2]); // return 2500.0",`1 <= n <= 10^4` `0 <= discount <= 10^0` `1 <= products.length <= 200` `1 <= products[i] <= 200` there are not repeated elements in the array `products`. `prices.length == products.length` `1 <= prices[i] <= 1000` `1 <= product.length <= products.length` `product[i]` exists in `products`. `amount.length == product.length` `1 <= amount[i] <= 1000` at most `1000` calls will be made to `getbill`. answers within `10^-5` of the actual value will be accepted as correct.,
1358,Number of Substrings Containing All Three Characters,"Given a string `s` consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these characters a, b and c.


Example 1:
Input: s = ""abcabc""
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are ""abc"", ""abca"", ""abcab"", ""abcabc"", ""bca"", ""bcab"", ""bcabc"", ""cab"", ""cabc"" and ""abc"" (again). 

Example 2:
Input: s = ""aaacb""
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are ""aaacb"", ""aacb"" and ""acb"". 

Example 3:
Input: s = ""abc""
Output: 1

Constraints:
`3 <= s.length <= 5 x 10^4`
`s` only consists of a, b or c characters.",Medium,https://leetcode.com/problems/number-of-substrings-containing-all-three-characters,"DE Shaw,Microsoft",String,660,,"given a string `s` consisting only of characters a, b and c. return the number of substrings containing at least one occurrence of all these characters a, b and c.","input: s = ""abcabc"" output: 10 explanation: the substrings containing at least one occurrence of the characters a, b and c are ""abc"", ""abca"", ""abcab"", ""abcabc"", ""bca"", ""bcab"", ""bcabc"", ""cab"", ""cabc"" and ""abc"" (again). example 2: input: s = ""aaacb"" output: 3 explanation: the substrings containing at least one occurrence of the characters a, b and c are ""aaacb"", ""aacb"" and ""acb"". example 3: input: s = ""abc"" output: 1","`3 <= s.length <= 5 x 10^4` `s` only consists of a, b or c characters.",
1359,Count All Valid Pickup and Delivery Options,"Given `n` orders, each order consist in pickup and delivery services. 
Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). 
Since the answer may be too large, return it modulo 10^9 + 7.


Example 1:
Input: n = 1
Output: 1
Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.


Example 2:
Input: n = 2
Output: 6
Explanation: All possible orders: 
(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).

This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.


Example 3:
Input: n = 3
Output: 90

Constraints:
`1 <= n <= 500`",Hard,https://leetcode.com/problems/count-all-valid-pickup-and-delivery-options,DoorDash,"Math,Dynamic Programming",287,,"given `n` orders, each order consist in pickup and delivery services. count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). since the answer may be too large, return it modulo 10^9 + 7.","input: n = 1 output: 1 explanation: unique order (p1, d1), delivery 1 always is after of pickup 1. example 2: input: n = 2 output: 6 explanation: all possible orders: (p1,p2,d1,d2), (p1,p2,d2,d1), (p1,d1,p2,d2), (p2,p1,d1,d2), (p2,p1,d2,d1) and (p2,d2,p1,d1). this is an invalid order (p1,d2,p2,d1) because pickup 2 is after of delivery 2. example 3: input: n = 3 output: 90",`1 <= n <= 500`,
1360,Number of Days Between Two Dates,"Write a program to count the number of days between two dates.

The two dates are given as strings, their format is `YYYY-MM-DD` as shown in the examples.


Example 1:
Input: date1 = ""2019-06-29"", date2 = ""2019-06-30""
Output: 1

Example 2:
Input: date1 = ""2020-01-15"", date2 = ""2019-12-31""
Output: 15

Constraints:
The given dates are valid dates between the years `1971` and `2100`.",Easy,https://leetcode.com/problems/number-of-days-between-two-dates,Amazon,,97,,"write a program to count the number of days between two dates. the two dates are given as strings, their format is `yyyy-mm-dd` as shown in the examples.","input: date1 = ""2019-06-29"", date2 = ""2019-06-30"" output: 1 example 2: input: date1 = ""2020-01-15"", date2 = ""2019-12-31"" output: 15",the given dates are valid dates between the years `1971` and `2100`.,
1361,Validate Binary Tree Nodes,"You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`, return `true` if and only if all the given nodes form exactly one valid binary tree.

If node `i` has no left child then `leftChild[i]` will equal `-1`, similarly for the right child.

Note that the nodes have no values and that we only use the node numbers in this problem.


Example 1:
Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]
Output: true

Example 2:
Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]
Output: false

Example 3:
Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]
Output: false

Example 4:
Input: n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]
Output: false

Constraints:
`1 <= n <= 104`
`leftChild.length == rightChild.length == n`
`-1 <= leftChild[i], rightChild[i] <= n - 1`",Medium,https://leetcode.com/problems/validate-binary-tree-nodes,Facebook,Graph,349,,"you have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftchild[i]` and `rightchild[i]`, return `true` if and only if all the given nodes form exactly one valid binary tree. if node `i` has no left child then `leftchild[i]` will equal `-1`, similarly for the right child. note that the nodes have no values and that we only use the node numbers in this problem.","input: n = 4, leftchild = [1,-1,3,-1], rightchild = [2,-1,-1,-1] output: true example 2: input: n = 4, leftchild = [1,-1,3,-1], rightchild = [2,3,-1,-1] output: false example 3: input: n = 2, leftchild = [1,0], rightchild = [-1,-1] output: false example 4: input: n = 6, leftchild = [1,-1,-1,4,-1,-1], rightchild = [2,-1,-1,5,-1,-1] output: false","`1 <= n <= 10^4` `leftchild.length == rightchild.length == n` `-1 <= leftchild[i], rightchild[i] <= n - 1`",
1362,Closest Divisors,"Given an integer `num`, find the closest two integers in absolute difference whose product equals `num + 1` or `num + 2`.

Return the two integers in any order.


Example 1:
Input: num = 8
Output: [3,3]
Explanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.


Example 2:
Input: num = 123
Output: [5,25]

Example 3:
Input: num = 999
Output: [40,25]

Constraints:
`1 <= num <= 10^9`",Medium,https://leetcode.com/problems/closest-divisors,Amazon,Math,106,,"given an integer `num`, find the closest two integers in absolute difference whose product equals `num + 1` or `num + 2`. return the two integers in any order.","input: num = 8 output: [3,3] explanation: for num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen. example 2: input: num = 123 output: [5,25] example 3: input: num = 999 output: [40,25]",`1 <= num <= 10^9`,
1363,Largest Multiple of Three,"Given an integer array of `digits`, return the largest multiple of three that can be formed by concatenating some of the given digits in any order.

Since the answer may not fit in an integer data type, return the answer as a string.

If there is no answer return an empty string.


Example 1:
Input: digits = [8,1,9]
Output: ""981""

Example 2:
Input: digits = [8,6,7,1,0]
Output: ""8760""

Example 3:
Input: digits = [1]
Output: """"

Example 4:
Input: digits = [0,0,0,0,0,0]
Output: ""0""

Constraints:
`1 <= digits.length <= 10^4`
`0 <= digits[i] <= 9`
The returning answer must not contain unnecessary leading zeros.",Hard,https://leetcode.com/problems/largest-multiple-of-three,Amazon,"Math,Dynamic Programming",244,,"given an integer array of `digits`, return the largest multiple of three that can be formed by concatenating some of the given digits in any order. since the answer may not fit in an integer data type, return the answer as a string. if there is no answer return an empty string.","input: digits = [8,1,9] output: ""981"" example 2: input: digits = [8,6,7,1,0] output: ""8760"" example 3: input: digits = [1] output: """" example 4: input: digits = [0,0,0,0,0,0] output: ""0""",`1 <= digits.length <= 10^4` `0 <= digits[i] <= 9` the returning answer must not contain unnecessary leading zeros.,
1364,Number of Trusted Contacts of a Customer,SQL Schema,Medium,https://leetcode.com/problems/number-of-trusted-contacts-of-a-customer,Roblox,,30,,sql schema,,,
1365,How Many Numbers Are Smaller Than the Current Number,"Given the array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's` such that `j != i` and `nums[j] < nums[i]`.

Return the answer in an array.


Example 1:
Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.

For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).


Example 2:
Input: nums = [6,5,4,8]
Output: [2,1,0,3]

Example 3:
Input: nums = [7,7,7,7]
Output: [0,0,0,0]

Constraints:
`2 <= nums.length <= 500`
`0 <= nums[i] <= 100`",Easy,https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number,"Amazon,Bloomberg","Array,Hash Table",1549,"[Count of Smaller Numbers After Self, /problems/count-of-smaller-numbers-after-self/, Hard]","given the array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. that is, for each `nums[i]` you have to count the number of valid `j's` such that `j != i` and `nums[j] < nums[i]`. return the answer in an array.","input: nums = [8,1,2,2,3] output: [4,0,1,1,3] explanation: for nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). for nums[1]=1 does not exist any smaller number than it. for nums[2]=2 there exist one smaller number than it (1). for nums[3]=2 there exist one smaller number than it (1). for nums[4]=3 there exist three smaller numbers than it (1, 2 and 2). example 2: input: nums = [6,5,4,8] output: [2,1,0,3] example 3: input: nums = [7,7,7,7] output: [0,0,0,0]",`2 <= nums.length <= 500` `0 <= nums[i] <= 10^0`,
1366,Rank Teams by Votes,"In a special ranking system, each voter gives a rank from highest to lowest to all teams participated in the competition.

The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.

Given an array of strings `votes` which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.

Return a string of all teams sorted by the ranking system.


Example 1:
Input: votes = [""ABC"",""ACB"",""ABC"",""ACB"",""ACB""]
Output: ""ACB""
Explanation: Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team.

Team B was ranked second by 2 voters and was ranked third by 3 voters.

Team C was ranked second by 3 voters and was ranked third by 2 voters.

As most of the voters ranked C second, team C is the second team and team B is the third.


Example 2:
Input: votes = [""WXYZ"",""XYZW""]
Output: ""XWYZ""
Explanation: X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position. 

Example 3:
Input: votes = [""ZMNAGUEDSJYLBOPHRQICWFXTVK""]
Output: ""ZMNAGUEDSJYLBOPHRQICWFXTVK""
Explanation: Only one voter so his votes are used for the ranking.


Example 4:
Input: votes = [""BCA"",""CAB"",""CBA"",""ABC"",""ACB"",""BAC""]
Output: ""ABC""
Explanation: 
Team A was ranked first by 2 voters, second by 2 voters and third by 2 voters.

Team B was ranked first by 2 voters, second by 2 voters and third by 2 voters.

Team C was ranked first by 2 voters, second by 2 voters and third by 2 voters.

There is a tie and we rank teams ascending by their IDs.


Example 5:
Input: votes = [""M"",""M"",""M"",""M""]
Output: ""M""
Explanation: Only team M in the competition so it has the first rank.


Constraints:
`1 <= votes.length <= 1000`
`1 <= votes[i].length <= 26`
`votes[i].length == votes[j].length` for `0 <= i, j < votes.length`.

`votes[i][j]` is an English upper-case letter.

All characters of `votes[i]` are unique.

All the characters that occur in `votes[0]` also occur in `votes[j]` where `1 <= j < votes.length`.",Medium,https://leetcode.com/problems/rank-teams-by-votes,"Atlassian,Zoom","Array,Sort",420,"[Online Election, /problems/online-election/, Medium]","in a special ranking system, each voter gives a rank from highest to lowest to all teams participated in the competition. the ordering of teams is decided by who received the most position-one votes. if two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. if two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter. given an array of strings `votes` which is the votes of all voters in the ranking systems. sort all teams according to the ranking system described above. return a string of all teams sorted by the ranking system.","input: votes = [""abc"",""acb"",""abc"",""acb"",""acb""] output: ""acb"" explanation: team a was ranked first place by 5 voters. no other team was voted as first place so team a is the first team. team b was ranked second by 2 voters and was ranked third by 3 voters. team c was ranked second by 3 voters and was ranked third by 2 voters. as most of the voters ranked c second, team c is the second team and team b is the third. example 2: input: votes = [""wxyz"",""xyzw""] output: ""xwyz"" explanation: x is the winner due to tie-breaking rule. x has same votes as w for the first position but x has one vote as second position while w doesn't have any votes as second position. example 3: input: votes = [""zmnaguedsjylbophrqicwfxtvk""] output: ""zmnaguedsjylbophrqicwfxtvk"" explanation: only one voter so his votes are used for the ranking. example 4: input: votes = [""bca"",""cab"",""cba"",""abc"",""acb"",""bac""] output: ""abc"" explanation: team a was ranked first by 2 voters, second by 2 voters and third by 2 voters. team b was ranked first by 2 voters, second by 2 voters and third by 2 voters. team c was ranked first by 2 voters, second by 2 voters and third by 2 voters. there is a tie and we rank teams ascending by their ids. example 5: input: votes = [""m"",""m"",""m"",""m""] output: ""m"" explanation: only team m in the competition so it has the first rank.","`1 <= votes.length <= 1000` `1 <= votes[i].length <= 26` `votes[i].length == votes[j].length` for `0 <= i, j < votes.length`. `votes[i][j]` is an english upper-case letter. all characters of `votes[i]` are unique. all the characters that occur in `votes[0]` also occur in `votes[j]` where `1 <= j < votes.length`.",
1367,Linked List in Binary Tree,"Given a binary tree `root` and a linked list with `head` as the first node. 
Return True if all the elements in the linked list starting from the `head` correspond to some downward path connected in the binary tree otherwise return False.

In this context downward path means a path that starts at some node and goes downwards.


Example 1:
Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
Output: true
Explanation: Nodes in blue form a subpath in the binary Tree.  

Example 2:
Input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
Output: true

Example 3:
Input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
Output: false
Explanation: There is no path in the binary tree that contains all the elements of the linked list from `head`.


Constraints:
The number of nodes in the tree will be in the range `[1, 2500]`.

The number of nodes in the list will be in the range `[1, 100]`.

`1 <= Node.val <= 100` for each node in the linked list and binary tree.",Medium,https://leetcode.com/problems/linked-list-in-binary-tree,Amazon,"Linked List,Dynamic Programming,Tree",776,,given a binary tree `root` and a linked list with `head` as the first node. return true if all the elements in the linked list starting from the `head` correspond to some downward path connected in the binary tree otherwise return false. in this context downward path means a path that starts at some node and goes downwards.,"input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] output: true explanation: nodes in blue form a subpath in the binary tree. example 2: input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] output: true example 3: input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3] output: false explanation: there is no path in the binary tree that contains all the elements of the linked list from `head`.","the number of nodes in the tree will be in the range `[1, 2500]`. the number of nodes in the list will be in the range `[1, 10^0]`. `1 <= node.val <= 10^0` for each node in the linked list and binary tree.",
1368,Minimum Cost to Make at Least One Valid Path in a Grid,"Given a m x n `grid`. Each cell of the `grid` has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of `grid[i][j]` can be:
1 which means go to the cell to the right. (i.e go from `grid[i][j]` to `grid[i][j + 1]`)
2 which means go to the cell to the left. (i.e go from `grid[i][j]` to `grid[i][j - 1]`)
3 which means go to the lower cell. (i.e go from `grid[i][j]` to `grid[i + 1][j]`)
4 which means go to the upper cell. (i.e go from `grid[i][j]` to `grid[i - 1][j]`)
Notice that there could be some invalid signs on the cells of the `grid` which points outside the `grid`.

You will initially start at the upper left cell `(0,0)`. A valid path in the grid is a path which starts from the upper left cell `(0,0)` and ends at the bottom-right cell `(m - 1, n - 1)` following the signs on the grid. The valid path doesn't have to be the shortest.

You can modify the sign on a cell with `cost = 1`. You can modify the sign on a cell one time only.

Return the minimum cost to make the grid have at least one valid path.


Example 1:
Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
Output: 3
Explanation: You will start at point (0, 0).

The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)
The total cost = 3.


Example 2:
Input: grid = [[1,1,3],[3,2,2],[1,1,4]]
Output: 0
Explanation: You can follow the path from (0, 0) to (2, 2).


Example 3:
Input: grid = [[1,2],[4,3]]
Output: 1

Example 4:
Input: grid = [[2,2,2],[2,2,2]]
Output: 3

Example 5:
Input: grid = [[4]]
Output: 0

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 100`",Hard,https://leetcode.com/problems/minimum-cost-to-make-at-least-one-valid-path-in-a-grid,Google,Breadth-first Search,513,,"given a m x n `grid`. each cell of the `grid` has a sign pointing to the next cell you should visit if you are currently in this cell. the sign of `grid[i][j]` can be: 1 which means go to the cell to the right. (i.e go from `grid[i][j]` to `grid[i][j + 1]`) 2 which means go to the cell to the left. (i.e go from `grid[i][j]` to `grid[i][j - 1]`) 3 which means go to the lower cell. (i.e go from `grid[i][j]` to `grid[i + 1][j]`) 4 which means go to the upper cell. (i.e go from `grid[i][j]` to `grid[i - 1][j]`) notice that there could be some invalid signs on the cells of the `grid` which points outside the `grid`. you will initially start at the upper left cell `(0,0)`. a valid path in the grid is a path which starts from the upper left cell `(0,0)` and ends at the bottom-right cell `(m - 1, n - 1)` following the signs on the grid. the valid path doesn't have to be the shortest. you can modify the sign on a cell with `cost = 1`. you can modify the sign on a cell one time only. return the minimum cost to make the grid have at least one valid path.","input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]] output: 3 explanation: you will start at point (0, 0). the path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3) the total cost = 3. example 2: input: grid = [[1,1,3],[3,2,2],[1,1,4]] output: 0 explanation: you can follow the path from (0, 0) to (2, 2). example 3: input: grid = [[1,2],[4,3]] output: 1 example 4: input: grid = [[2,2,2],[2,2,2]] output: 3 example 5: input: grid = [[4]] output: 0","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 10^0`",
1369,Get the Second Most Recent Activity,SQL Schema,Hard,https://leetcode.com/problems/get-the-second-most-recent-activity,Microsoft,,58,,sql schema,,,
1370,Increasing Decreasing String,"Given a string `s`. You should re-order the string using the following algorithm:
Pick the smallest character from `s` and append it to the result.

Pick the smallest character from `s` which is greater than the last appended character to the result and append it.

Repeat step 2 until you cannot pick more characters.

Pick the largest character from `s` and append it to the result.

Pick the largest character from `s` which is smaller than the last appended character to the result and append it.

Repeat step 5 until you cannot pick more characters.

Repeat the steps from 1 to 6 until you pick all characters from `s`.

In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.

Return the result string after sorting `s` with this algorithm.


Example 1:
Input: s = ""aaaabbbbcccc""
Output: ""abccbaabccba""
Explanation: After steps 1, 2 and 3 of the first iteration, result = ""abc""
After steps 4, 5 and 6 of the first iteration, result = ""abccba""
First iteration is done. Now s = ""aabbcc"" and we go back to step 1
After steps 1, 2 and 3 of the second iteration, result = ""abccbaabc""
After steps 4, 5 and 6 of the second iteration, result = ""abccbaabccba""

Example 2:
Input: s = ""rat""
Output: ""art""
Explanation: The word ""rat"" becomes ""art"" after re-ordering it with the mentioned algorithm.


Example 3:
Input: s = ""leetcode""
Output: ""cdelotee""

Example 4:
Input: s = ""ggggggg""
Output: ""ggggggg""

Example 5:
Input: s = ""spo""
Output: ""ops""

Constraints:
`1 <= s.length <= 500`
`s` contains only lower-case English letters.",Easy,https://leetcode.com/problems/increasing-decreasing-string,Akuna Capital,"String,Sort",345,,"given a string `s`. you should re-order the string using the following algorithm: pick the smallest character from `s` and append it to the result. pick the smallest character from `s` which is greater than the last appended character to the result and append it. repeat step 2 until you cannot pick more characters. pick the largest character from `s` and append it to the result. pick the largest character from `s` which is smaller than the last appended character to the result and append it. repeat step 5 until you cannot pick more characters. repeat the steps from 1 to 6 until you pick all characters from `s`. in each step, if the smallest or the largest character appears more than once you can choose any occurrence and append it to the result. return the result string after sorting `s` with this algorithm.","input: s = ""aaaabbbbcccc"" output: ""abccbaabccba"" explanation: after steps 1, 2 and 3 of the first iteration, result = ""abc"" after steps 4, 5 and 6 of the first iteration, result = ""abccba"" first iteration is done. now s = ""aabbcc"" and we go back to step 1 after steps 1, 2 and 3 of the second iteration, result = ""abccbaabc"" after steps 4, 5 and 6 of the second iteration, result = ""abccbaabccba"" example 2: input: s = ""rat"" output: ""art"" explanation: the word ""rat"" becomes ""art"" after re-ordering it with the mentioned algorithm. example 3: input: s = ""leetcode"" output: ""cdelotee"" example 4: input: s = ""ggggggg"" output: ""ggggggg"" example 5: input: s = ""spo"" output: ""ops""",`1 <= s.length <= 500` `s` contains only lower-case english letters.,
1371,Find the Longest Substring Containing Vowels in Even Counts,"Given the string `s`, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.


Example 1:
Input: s = ""eleetminicoworoep""
Output: 13
Explanation: The longest substring is ""leetminicowor"" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.


Example 2:
Input: s = ""leetcodeisgreat""
Output: 5
Explanation: The longest substring is ""leetc"" which contains two e's.


Example 3:
Input: s = ""bcbcbc""
Output: 6
Explanation: In this case, the given string ""bcbcbc"" is the longest because all vowels: a, e, i, o and u appear zero times.


Constraints:
`1 <= s.length <= 5 x 10^5`
`s` contains only lowercase English letters.",Medium,https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts,Microsoft,String,597,,"given the string `s`, return the size of the longest substring containing each vowel an even number of times. that is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.","input: s = ""eleetminicoworoep"" output: 13 explanation: the longest substring is ""leetminicowor"" which contains two each of the vowels: e, i and o and zero of the vowels: a and u. example 2: input: s = ""leetcodeisgreat"" output: 5 explanation: the longest substring is ""leetc"" which contains two e's. example 3: input: s = ""bcbcbc"" output: 6 explanation: in this case, the given string ""bcbcbc"" is the longest because all vowels: a, e, i, o and u appear zero times.",`1 <= s.length <= 5 x 10^5` `s` contains only lowercase english letters.,
1372,Longest ZigZag Path in a Binary Tree,"You are given the `root` of a binary tree.

A ZigZag path for a binary tree is defined as follow:
Choose any node in the binary tree and a direction (right or left).

If the current direction is right, move to the right child of the current node; otherwise, move to the left child.

Change the direction from right to left or from left to right.

Repeat the second and third steps until you can't move in the tree.

Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).

Return the longest ZigZag path contained in that tree.


Example 1:
Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]
Output: 3
Explanation: Longest ZigZag path in blue nodes (right -> left -> right).


Example 2:
Input: root = [1,1,1,null,1,null,null,1,1,null,1]
Output: 4
Explanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).


Example 3:
Input: root = [1]
Output: 0

Constraints:
The number of nodes in the tree is in the range `[1, 5 * 104]`.

`1 <= Node.val <= 100`",Medium,https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree,Sumerge,"Dynamic Programming,Tree",541,,"you are given the `root` of a binary tree. a zigzag path for a binary tree is defined as follow: choose any node in the binary tree and a direction (right or left). if the current direction is right, move to the right child of the current node; otherwise, move to the left child. change the direction from right to left or from left to right. repeat the second and third steps until you can't move in the tree. zigzag length is defined as the number of nodes visited - 1. (a single node has a length of 0). return the longest zigzag path contained in that tree.","input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1] output: 3 explanation: longest zigzag path in blue nodes (right -> left -> right). example 2: input: root = [1,1,1,null,1,null,null,1,1,null,1] output: 4 explanation: longest zigzag path in blue nodes (left -> right -> left -> right). example 3: input: root = [1] output: 0","the number of nodes in the tree is in the range `[1, 5 * 10^4]`. `1 <= node.val <= 10^0`",
1373,Maximum Sum BST in Binary Tree,"Given a binary tree `root`, the task is to return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.

The right subtree of a node contains only nodes with keys greater than the node's key.

Both the left and right subtrees must also be binary search trees.


Example 1:
Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
Output: 20
Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.


Example 2:
Input: root = [4,3,null,1,2]
Output: 2
Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.


Example 3:
Input: root = [-4,-2,-5]
Output: 0
Explanation: All values are negatives. Return an empty BST.


Example 4:
Input: root = [2,1,3]
Output: 6

Example 5:
Input: root = [5,4,8,3,null,6,3]
Output: 7

Constraints:
The given binary tree will have between `1` and `40000` nodes.

Each node's value is between `[-4 * 10^4 , 4 * 10^4]`.",Hard,https://leetcode.com/problems/maximum-sum-bst-in-binary-tree,Amazon,"Dynamic Programming,Binary Search Tree",407,,"given a binary tree `root`, the task is to return the maximum sum of all keys of any sub-tree which is also a binary search tree (bst). assume a bst is defined as follows: the left subtree of a node contains only nodes with keys less than the node's key. the right subtree of a node contains only nodes with keys greater than the node's key. both the left and right subtrees must also be binary search trees.","input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6] output: 20 explanation: maximum sum in a valid binary search tree is obtained in root node with key equal to 3. example 2: input: root = [4,3,null,1,2] output: 2 explanation: maximum sum in a valid binary search tree is obtained in a single root node with key equal to 2. example 3: input: root = [-4,-2,-5] output: 0 explanation: all values are negatives. return an empty bst. example 4: input: root = [2,1,3] output: 6 example 5: input: root = [5,4,8,3,null,6,3] output: 7","the given binary tree will have between `1` and `40000` nodes. each node's value is between `[-4 * 10^4 , 4 * 10^4]`.",
1374,Generate a String With Characters That Have Odd Counts,"Given an integer `n`, return a string with `n` characters such that each character in such string occurs an odd number of times.

The returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.  

Example 1:
Input: n = 4
Output: ""pppz""
Explanation: ""pppz"" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as ""ohhh"" and ""love"".


Example 2:
Input: n = 2
Output: ""xy""
Explanation: ""xy"" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as ""ag"" and ""ur"".


Example 3:
Input: n = 7
Output: ""holasss""

Constraints:
`1 <= n <= 500`",Easy,https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts,Microsoft,String,182,,"given an integer `n`, return a string with `n` characters such that each character in such string occurs an odd number of times. the returned string must contain only lowercase english letters. if there are multiples valid strings, return any of them.","input: n = 4 output: ""pppz"" explanation: ""pppz"" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. note that there are many other valid strings such as ""ohhh"" and ""love"". example 2: input: n = 2 output: ""xy"" explanation: ""xy"" is a valid string since the characters 'x' and 'y' occur once. note that there are many other valid strings such as ""ag"" and ""ur"". example 3: input: n = 7 output: ""holasss""",`1 <= n <= 500`,
1375,Bulb Switcher III,"There is a room with `n` bulbs, numbered from `1` to `n`, arranged in a row from left to right. Initially, all the bulbs are turned off.

At moment k (for k from `0` to `n - 1`), we turn on the `light[k]` bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.

Return the number of moments in which all turned on bulbs are blue.


Example 1:
Input: light = [2,1,3,5,4]
Output: 3
Explanation: All bulbs turned on, are blue at the moment 1, 2 and 4.


Example 2:
Input: light = [3,2,4,1,5]
Output: 2
Explanation: All bulbs turned on, are blue at the moment 3, and 4 (index-0).


Example 3:
Input: light = [4,1,2,3]
Output: 1
Explanation: All bulbs turned on, are blue at the moment 3 (index-0).

Bulb 4th changes to blue at the moment 3.


Example 4:
Input: light = [2,1,4,3,6,5]
Output: 3

Example 5:
Input: light = [1,2,3,4,5,6]
Output: 6

Constraints:
`n == light.length`
`1 <= n <= 5 * 10^4`
`light` is a permutation of  `[1, 2, ..., n]`",Medium,https://leetcode.com/problems/bulb-switcher-iii,Amazon,Array,466,"[Bulb Switcher, /problems/bulb-switcher/, Medium], [Bulb Switcher II, /problems/bulb-switcher-ii/, Medium]","there is a room with `n` bulbs, numbered from `1` to `n`, arranged in a row from left to right. initially, all the bulbs are turned off. at moment k (for k from `0` to `n - 1`), we turn on the `light[k]` bulb. a bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too. return the number of moments in which all turned on bulbs are blue.","input: light = [2,1,3,5,4] output: 3 explanation: all bulbs turned on, are blue at the moment 1, 2 and 4. example 2: input: light = [3,2,4,1,5] output: 2 explanation: all bulbs turned on, are blue at the moment 3, and 4 (index-0). example 3: input: light = [4,1,2,3] output: 1 explanation: all bulbs turned on, are blue at the moment 3 (index-0). bulb 4th changes to blue at the moment 3. example 4: input: light = [2,1,4,3,6,5] output: 3 example 5: input: light = [1,2,3,4,5,6] output: 6","`n == light.length` `1 <= n <= 5 * 10^4` `light` is a permutation of `[1, 2, ..., n]`",
1376,Time Needed to Inform All Employees,"A company has `n` employees with a unique ID for each employee from `0` to `n - 1`. The head of the company is the one with `headID`.

Each employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headID] = -1`. Also, it is guaranteed that the subordination relationships have a tree structure.

The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.

The `i-th` employee needs `informTime[i]` minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).

Return the number of minutes needed to inform all the employees about the urgent news.


Example 1:
Input: n = 1, headID = 0, manager = [-1], informTime = [0]
Output: 0
Explanation: The head of the company is the only employee in the company.


Example 2:
Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]
Output: 1
Explanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.

The tree structure of the employees in the company is shown.


Example 3:
Input: n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]
Output: 21
Explanation: The head has id = 6. He will inform employee with id = 5 in 1 minute.

The employee with id = 5 will inform the employee with id = 4 in 2 minutes.

The employee with id = 4 will inform the employee with id = 3 in 3 minutes.

The employee with id = 3 will inform the employee with id = 2 in 4 minutes.

The employee with id = 2 will inform the employee with id = 1 in 5 minutes.

The employee with id = 1 will inform the employee with id = 0 in 6 minutes.

Needed time = 1 + 2 + 3 + 4 + 5 + 6 = 21.


Example 4:
Input: n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]
Output: 3
Explanation: The first minute the head will inform employees 1 and 2.

The second minute they will inform employees 3, 4, 5 and 6.

The third minute they will inform the rest of employees.


Example 5:
Input: n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]
Output: 1076

Constraints:
`1 <= n <= 105`
`0 <= headID < n`
`manager.length == n`
`0 <= manager[i] < n`
`manager[headID] == -1`
`informTime.length == n`
`0 <= informTime[i] <= 1000`
`informTime[i] == 0` if employee `i` has no subordinates.

It is guaranteed that all the employees can be informed.",Medium,https://leetcode.com/problems/time-needed-to-inform-all-employees,Google,Depth-first Search,765,"[Maximum Depth of Binary Tree, /problems/maximum-depth-of-binary-tree/, Easy], [Binary Tree Maximum Path Sum, /problems/binary-tree-maximum-path-sum/, Hard]","a company has `n` employees with a unique id for each employee from `0` to `n - 1`. the head of the company is the one with `headid`. each employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headid] = -1`. also, it is guaranteed that the subordination relationships have a tree structure. the head of the company wants to inform all the company employees of an urgent piece of news. he will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news. the `i-th` employee needs `informtime[i]` minutes to inform all of his direct subordinates (i.e., after informtime[i] minutes, all his direct subordinates can start spreading the news). return the number of minutes needed to inform all the employees about the urgent news.","input: n = 1, headid = 0, manager = [-1], informtime = [0] output: 0 explanation: the head of the company is the only employee in the company. example 2: input: n = 6, headid = 2, manager = [2,2,-1,2,2,2], informtime = [0,0,1,0,0,0] output: 1 explanation: the head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all. the tree structure of the employees in the company is shown. example 3: input: n = 7, headid = 6, manager = [1,2,3,4,5,6,-1], informtime = [0,6,5,4,3,2,1] output: 21 explanation: the head has id = 6. he will inform employee with id = 5 in 1 minute. the employee with id = 5 will inform the employee with id = 4 in 2 minutes. the employee with id = 4 will inform the employee with id = 3 in 3 minutes. the employee with id = 3 will inform the employee with id = 2 in 4 minutes. the employee with id = 2 will inform the employee with id = 1 in 5 minutes. the employee with id = 1 will inform the employee with id = 0 in 6 minutes. needed time = 1 + 2 + 3 + 4 + 5 + 6 = 21. example 4: input: n = 15, headid = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informtime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0] output: 3 explanation: the first minute the head will inform employees 1 and 2. the second minute they will inform employees 3, 4, 5 and 6. the third minute they will inform the rest of employees. example 5: input: n = 4, headid = 2, manager = [3,3,-1,2], informtime = [0,0,162,914] output: 1076",`1 <= n <= 10^5` `0 <= headid < n` `manager.length == n` `0 <= manager[i] < n` `manager[headid] == -1` `informtime.length == n` `0 <= informtime[i] <= 1000` `informtime[i] == 0` if employee `i` has no subordinates. it is guaranteed that all the employees can be informed.,
1377,Frog Position After T Seconds,"Given an undirected tree consisting of `n` vertices numbered from `1` to `n`. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.

The edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`.

Return the probability that after `t` seconds the frog is on the vertex `target`.


Example 1:
Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4
Output: 0.16666666666666666 
Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. 

Example 2:
Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7
Output: 0.3333333333333333
Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1. 

Example 3:
Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 20, target = 6
Output: 0.16666666666666666

Constraints:
`1 <= n <= 100`
`edges.length == n - 1`
`edges[i].length == 2`
`1 <= ai, bi <= n`
`1 <= t <= 50`
`1 <= target <= n`
Answers within `10-5` of the actual value will be accepted as correct.",Hard,https://leetcode.com/problems/frog-position-after-t-seconds,Google,Depth-first Search,188,,"given an undirected tree consisting of `n` vertices numbered from `1` to `n`. a frog starts jumping from vertex 1. in one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. the frog can not jump back to a visited vertex. in case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex. the edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. return the probability that after `t` seconds the frog is on the vertex `target`.","input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4 output: 0.16666666666666666 explanation: the figure above shows the given graph. the frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. example 2: input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7 output: 0.3333333333333333 explanation: the figure above shows the given graph. the frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1. example 3: input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 20, target = 6 output: 0.16666666666666666","`1 <= n <= 10^0` `edges.length == n - 1` `edges[i].length == 2` `1 <= ai, bi <= n` `1 <= t <= 50` `1 <= target <= n` answers within `10-5` of the actual value will be accepted as correct.",
1378,Replace Employee ID With The Unique Identifier,SQL Schema,Easy,https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier,Point72,,38,,sql schema,,,
1379,Find a Corresponding Node of a Binary Tree in a Clone of That Tree,"Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree.

The `cloned` tree is a copy of the `original` tree.

Return a reference to the same node in the `cloned` tree.

Note that you are not allowed to change any of the two trees or the `target` node and the answer must be a reference to a node in the `cloned` tree.

Follow up: Solve the problem if repeated values on the tree are allowed.


Example 1:
Input: tree = [7,4,3,null,null,6,19], target = 3
Output: 3
Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.


Example 2:
Input: tree = [7], target =  7
Output: 7

Example 3:
Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4
Output: 4

Example 4:
Input: tree = [1,2,3,4,5,6,7,8,9,10], target = 5
Output: 5

Example 5:
Input: tree = [1,2,null,3], target = 2
Output: 2

Constraints:
The number of nodes in the `tree` is in the range `[1, 10^4]`.

The values of the nodes of the `tree` are unique.

`target` node is a node from the `original` tree and is not `null`.",Medium,https://leetcode.com/problems/find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree,Facebook,"Tree,Depth-first Search,Breadth-first Search,Recursion",445,,given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree. the `cloned` tree is a copy of the `original` tree. return a reference to the same node in the `cloned` tree. note that you are not allowed to change any of the two trees or the `target` node and the answer must be a reference to a node in the `cloned` tree.,"input: tree = [7,4,3,null,null,6,19], target = 3 output: 3 explanation: in all examples the original and cloned trees are shown. the target node is a green node from the original tree. the answer is the yellow node from the cloned tree. example 2: input: tree = [7], target = 7 output: 7 example 3: input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4 output: 4 example 4: input: tree = [1,2,3,4,5,6,7,8,9,10], target = 5 output: 5 example 5: input: tree = [1,2,null,3], target = 2 output: 2","the number of nodes in the `tree` is in the range `[1, 10^4]`. the values of the nodes of the `tree` are unique. `target` node is a node from the `original` tree and is not `null`.","solve the problem if repeated values on the tree are allowed. example 1: input: tree = [7,4,3,null,null,6,19], target = 3 output: 3 explanation: in all examples the original and cloned trees are shown. the target node is a green node from the original tree. the answer is the yellow node from the cloned tree. example 2: input: tree = [7], target = 7 output: 7 example 3: input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4 output: 4 example 4: input: tree = [1,2,3,4,5,6,7,8,9,10], target = 5 output: 5 example 5: input: tree = [1,2,null,3], target = 2 output: 2 constraints: the number of nodes in the `tree` is in the range `[1, 10^4]`. the values of the nodes of the `tree` are unique. `target` node is a node from the `original` tree and is not `null`."
1380,Lucky Numbers in a Matrix,"Given a `m * n` matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.


Example 1:
Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column

Example 2:
Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.


Example 3:
Input: matrix = [[7,8],[1,2]]
Output: [7]

Constraints:
`m == mat.length`
`n == mat[i].length`
`1 <= n, m <= 50`
`1 <= matrix[i][j] <= 10^5`.

All elements in the matrix are distinct.",Easy,https://leetcode.com/problems/lucky-numbers-in-a-matrix,Oracle,Array,470,,"given a `m * n` matrix of distinct numbers, return all lucky numbers in the matrix in any order. a lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.","input: matrix = [[3,7,8],[9,11,13],[15,16,17]] output: [15] explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column example 2: input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]] output: [12] explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column. example 3: input: matrix = [[7,8],[1,2]] output: [7]","`m == mat.length` `n == mat[i].length` `1 <= n, m <= 50` `1 <= matrix[i][j] <= 10^5`. all elements in the matrix are distinct.",
1381,Design a Stack With Increment Operation,"Design a stack which supports the following operations.

Implement the `CustomStack` class:
`CustomStack(int maxSize)` Initializes the object with `maxSize` which is the maximum number of elements in the stack or do nothing if the stack reached the `maxSize`.

`void push(int x)` Adds `x` to the top of the stack if the stack hasn't reached the `maxSize`.

`int pop()` Pops and returns the top of stack or -1 if the stack is empty.

`void inc(int k, int val)` Increments the bottom `k` elements of the stack by `val`. If there are less than `k` elements in the stack, just increment all the elements in the stack.


Example 1:
Input
[""CustomStack"",""push"",""push"",""pop"",""push"",""push"",""push"",""increment"",""increment"",""pop"",""pop"",""pop"",""pop""]
[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]
Output
[null,null,null,2,null,null,null,null,null,103,202,201,-1]
Explanation
CustomStack customStack = new CustomStack(3); // Stack is Empty []
customStack.push(1);                          // stack becomes [1]
customStack.push(2);                          // stack becomes [1, 2]
customStack.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]
customStack.push(2);                          // stack becomes [1, 2]
customStack.push(3);                          // stack becomes [1, 2, 3]
customStack.push(4);                          // stack still [1, 2, 3], Don't add another elements as size is 4
customStack.increment(5, 100);                // stack becomes [101, 102, 103]
customStack.increment(2, 100);                // stack becomes [201, 202, 103]
customStack.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]
customStack.pop();                            // return 202 --> Return top of the stack 102, stack becomes [201]
customStack.pop();                            // return 201 --> Return top of the stack 101, stack becomes []
customStack.pop();                            // return -1 --> Stack is empty return -1.


Constraints:
`1 <= maxSize <= 1000`
`1 <= x <= 1000`
`1 <= k <= 1000`
`0 <= val <= 100`
At most `1000` calls will be made to each method of `increment`, `push` and `pop` each separately.",Medium,https://leetcode.com/problems/design-a-stack-with-increment-operation,Amazon,"Stack,Design",551,,"design a stack which supports the following operations. implement the `customstack` class: `customstack(int maxsize)` initializes the object with `maxsize` which is the maximum number of elements in the stack or do nothing if the stack reached the `maxsize`. `void push(int x)` adds `x` to the top of the stack if the stack hasn't reached the `maxsize`. `int pop()` pops and returns the top of stack or -1 if the stack is empty. `void inc(int k, int val)` increments the bottom `k` elements of the stack by `val`. if there are less than `k` elements in the stack, just increment all the elements in the stack.","input [""customstack"",""push"",""push"",""pop"",""push"",""push"",""push"",""increment"",""increment"",""pop"",""pop"",""pop"",""pop""] [[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]] output [null,null,null,2,null,null,null,null,null,103,202,201,-1] explanation customstack customstack = new customstack(3); // stack is empty [] customstack.push(1); // stack becomes [1] customstack.push(2); // stack becomes [1, 2] customstack.pop(); // return 2 --> return top of the stack 2, stack becomes [1] customstack.push(2); // stack becomes [1, 2] customstack.push(3); // stack becomes [1, 2, 3] customstack.push(4); // stack still [1, 2, 3], don't add another elements as size is 4 customstack.increment(5, 100); // stack becomes [101, 102, 103] customstack.increment(2, 100); // stack becomes [201, 202, 103] customstack.pop(); // return 103 --> return top of the stack 103, stack becomes [201, 202] customstack.pop(); // return 202 --> return top of the stack 102, stack becomes [201] customstack.pop(); // return 201 --> return top of the stack 101, stack becomes [] customstack.pop(); // return -1 --> stack is empty return -1.","`1 <= maxsize <= 1000` `1 <= x <= 1000` `1 <= k <= 1000` `0 <= val <= 10^0` at most `1000` calls will be made to each method of `increment`, `push` and `pop` each separately.",
1382,Balance a Binary Search Tree,"Given a binary search tree, return a balanced binary search tree with the same node values.

A binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1.

If there is more than one answer, return any of them.


Example 1:
Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2,null,null] is also correct.


Constraints:
The number of nodes in the tree is between `1` and `10^4`.

The tree nodes will have distinct values between `1` and `10^5`.",Medium,https://leetcode.com/problems/balance-a-binary-search-tree,"Facebook,Adobe",Binary Search Tree,626,,"given a binary search tree, return a balanced binary search tree with the same node values. a binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1. if there is more than one answer, return any of them.","input: root = [1,null,2,null,3,null,4,null,null] output: [2,1,3,null,null,null,4] explanation: this is not the only correct answer, [3,1,4,null,2,null,null] is also correct.",the number of nodes in the tree is between `1` and `10^4`. the tree nodes will have distinct values between `1` and `10^5`.,
1383,Maximum Performance of a Team,"There are `n` engineers numbered from 1 to `n` and two arrays: `speed` and `efficiency`, where `speed[i]` and `efficiency[i]` represent the speed and efficiency for the i-th engineer respectively. Return the maximum performance of a team composed of at most `k` engineers, since the answer can be a huge number, return this modulo 10^9 + 7.

The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers. 

Example 1:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2
Output: 60
Explanation: 
We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.


Example 2:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3
Output: 68
Explanation:
This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.


Example 3:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4
Output: 72

Constraints:
`1 <= n <= 10^5`
`speed.length == n`
`efficiency.length == n`
`1 <= speed[i] <= 10^5`
`1 <= efficiency[i] <= 10^8`
`1 <= k <= n`",Hard,https://leetcode.com/problems/maximum-performance-of-a-team,"DoorDash,Amazon","Greedy,Sort",407,,"there are `n` engineers numbered from 1 to `n` and two arrays: `speed` and `efficiency`, where `speed[i]` and `efficiency[i]` represent the speed and efficiency for the i-th engineer respectively. return the maximum performance of a team composed of at most `k` engineers, since the answer can be a huge number, return this modulo 10^9 + 7. the performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers.","input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2 output: 60 explanation: we have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). that is, performance = (10 + 5) * min(4, 7) = 60. example 2: input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3 output: 68 explanation: this is the same example as the first but k = 3. we can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. that is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68. example 3: input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4 output: 72",`1 <= n <= 10^5` `speed.length == n` `efficiency.length == n` `1 <= speed[i] <= 10^5` `1 <= efficiency[i] <= 10^8` `1 <= k <= n`,
1384,Total Sales Amount by Year,SQL Schema,Hard,https://leetcode.com/problems/total-sales-amount-by-year,,,85,,sql schema,,,
1385,Find the Distance Value Between Two Arrays,"Given two integer arrays `arr1` and `arr2`, and the integer `d`, return the distance value between the two arrays.

The distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.


Example 1:
Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2
Output: 2
Explanation: 
For arr1[0]=4 we have: 
|4-10|=6 > d=2 
|4-9|=5 > d=2 
|4-1|=3 > d=2 
|4-8|=4 > d=2 
For arr1[1]=5 we have: 
|5-10|=5 > d=2 
|5-9|=4 > d=2 
|5-1|=4 > d=2 
|5-8|=3 > d=2
For arr1[2]=8 we have:
|8-10|=2 <= d=2
|8-9|=1 <= d=2
|8-1|=7 > d=2
|8-8|=0 <= d=2

Example 2:
Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3
Output: 2

Example 3:
Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6
Output: 1

Constraints:
`1 <= arr1.length, arr2.length <= 500`
`-10^3 <= arr1[i], arr2[j] <= 10^3`
`0 <= d <= 100`",Easy,https://leetcode.com/problems/find-the-distance-value-between-two-arrays,Uber,,170,,"given two integer arrays `arr1` and `arr2`, and the integer `d`, return the distance value between the two arrays. the distance value is defined as the number of elements `arr1[i]` such that there is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.","input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2 output: 2 explanation: for arr1[0]=4 we have: |4-10|=6 > d=2 |4-9|=5 > d=2 |4-1|=3 > d=2 |4-8|=4 > d=2 for arr1[1]=5 we have: |5-10|=5 > d=2 |5-9|=4 > d=2 |5-1|=4 > d=2 |5-8|=3 > d=2 for arr1[2]=8 we have: |8-10|=2 <= d=2 |8-9|=1 <= d=2 |8-1|=7 > d=2 |8-8|=0 <= d=2 example 2: input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3 output: 2 example 3: input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6 output: 1","`1 <= arr1.length, arr2.length <= 500` `-10^3 <= arr1[i], arr2[j] <= 10^3` `0 <= d <= 10^0`",
1386,Cinema Seat Allocation,"A cinema has `n` rows of seats, numbered from 1 to `n` and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.

Given the array `reservedSeats` containing the numbers of seats already reserved, for example, `reservedSeats[i] = [3,8]` means the seat located in row 3 and labelled with 8 is already reserved.

Return the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.


Example 1:
Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
Output: 4
Explanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.


Example 2:
Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]
Output: 2

Example 3:
Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]
Output: 4

Constraints:
`1 <= n <= 10^9`
`1 <= reservedSeats.length <= min(10*n, 10^4)`
`reservedSeats[i].length == 2`
`1 <= reservedSeats[i][0] <= n`
`1 <= reservedSeats[i][1] <= 10`
All `reservedSeats[i]` are distinct.",Medium,https://leetcode.com/problems/cinema-seat-allocation,Amazon,"Array,Greedy",233,,"a cinema has `n` rows of seats, numbered from 1 to `n` and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above. given the array `reservedseats` containing the numbers of seats already reserved, for example, `reservedseats[i] = [3,8]` means the seat located in row 3 and labelled with 8 is already reserved. return the maximum number of four-person groups you can assign on the cinema seats. a four-person group occupies four adjacent seats in one single row. seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.","input: n = 3, reservedseats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]] output: 4 explanation: the figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group. example 2: input: n = 2, reservedseats = [[2,1],[1,8],[2,6]] output: 2 example 3: input: n = 4, reservedseats = [[4,3],[1,4],[4,6],[1,7]] output: 4","`1 <= n <= 10^9` `1 <= reservedseats.length <= min(10*n, 10^4)` `reservedseats[i].length == 2` `1 <= reservedseats[i][0] <= n` `1 <= reservedseats[i][1] <= 10` all `reservedseats[i]` are distinct.",
1387,Sort Integers by The Power Value,"The power of an integer `x` is defined as the number of steps needed to transform `x` into `1` using the following steps:
if `x` is even then `x = x / 2`
if `x` is odd then `x = 3 * x + 1`
For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).

Given three integers `lo`, `hi` and `k`. The task is to sort all integers in the interval `[lo, hi]` by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.

Return the `k-th` integer in the range `[lo, hi]` sorted by the power value.

Notice that for any integer `x` `(lo <= x <= hi)` it is guaranteed that `x` will transform into `1` using these steps and that the power of `x` is will fit in 32 bit signed integer.


Example 1:
Input: lo = 12, hi = 15, k = 2
Output: 13
Explanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)
The power of 13 is 9
The power of 14 is 17
The power of 15 is 17
The interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.

Notice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.


Example 2:
Input: lo = 1, hi = 1, k = 1
Output: 1

Example 3:
Input: lo = 7, hi = 11, k = 4
Output: 7
Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].

The interval sorted by power is [8, 10, 11, 7, 9].

The fourth number in the sorted array is 7.


Example 4:
Input: lo = 10, hi = 20, k = 5
Output: 13

Example 5:
Input: lo = 1, hi = 1000, k = 777
Output: 570

Constraints:
`1 <= lo <= hi <= 1000`
`1 <= k <= hi - lo + 1`",Medium,https://leetcode.com/problems/sort-integers-by-the-power-value,Google,"Sort,Graph",398,,"the power of an integer `x` is defined as the number of steps needed to transform `x` into `1` using the following steps: if `x` is even then `x = x / 2` if `x` is odd then `x = 3 * x + 1` for example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1). given three integers `lo`, `hi` and `k`. the task is to sort all integers in the interval `[lo, hi]` by the power value in ascending order, if two or more integers have the same power value sort them by ascending order. return the `k-th` integer in the range `[lo, hi]` sorted by the power value. notice that for any integer `x` `(lo <= x <= hi)` it is guaranteed that `x` will transform into `1` using these steps and that the power of `x` is will fit in 32 bit signed integer.","input: lo = 12, hi = 15, k = 2 output: 13 explanation: the power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1) the power of 13 is 9 the power of 14 is 17 the power of 15 is 17 the interval sorted by the power value [12,13,14,15]. for k = 2 answer is the second element which is 13. notice that 12 and 13 have the same power value and we sorted them in ascending order. same for 14 and 15. example 2: input: lo = 1, hi = 1, k = 1 output: 1 example 3: input: lo = 7, hi = 11, k = 4 output: 7 explanation: the power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14]. the interval sorted by power is [8, 10, 11, 7, 9]. the fourth number in the sorted array is 7. example 4: input: lo = 10, hi = 20, k = 5 output: 13 example 5: input: lo = 1, hi = 1000, k = 777 output: 570",`1 <= lo <= hi <= 1000` `1 <= k <= hi - lo + 1`,
1388,Pizza With 3n Slices,"There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:
You will pick any pizza slice.

Your friend Alice will pick next slice in anti clockwise direction of your pick. 
Your friend Bob will pick next slice in clockwise direction of your pick.

Repeat until there are no more slices of pizzas.

Sizes of Pizza slices is represented by circular array `slices` in clockwise direction.

Return the maximum possible sum of slice sizes which you can have.


Example 1:
Input: slices = [1,2,3,4,5,6]
Output: 10
Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.


Example 2:
Input: slices = [8,9,8,6,1,1]
Output: 16
Output: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.

Example 3:
Input: slices = [4,1,2,5,8,3,1,9,7]
Output: 21

Example 4:
Input: slices = [3,1,2]
Output: 3

Constraints:
`1 <= slices.length <= 500`
`slices.length % 3 == 0`
`1 <= slices[i] <= 1000`",Hard,https://leetcode.com/problems/pizza-with-3n-slices,Google,Dynamic Programming,343,,"there is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows: you will pick any pizza slice. your friend alice will pick next slice in anti clockwise direction of your pick. your friend bob will pick next slice in clockwise direction of your pick. repeat until there are no more slices of pizzas. sizes of pizza slices is represented by circular array `slices` in clockwise direction. return the maximum possible sum of slice sizes which you can have.","input: slices = [1,2,3,4,5,6] output: 10 explanation: pick pizza slice of size 4, alice and bob will pick slices with size 3 and 5 respectively. then pick slices with size 6, finally alice and bob will pick slice of size 2 and 1 respectively. total = 4 + 6. example 2: input: slices = [8,9,8,6,1,1] output: 16 output: pick pizza slice of size 8 in each turn. if you pick slice with size 9 your partners will pick slices of size 8. example 3: input: slices = [4,1,2,5,8,3,1,9,7] output: 21 example 4: input: slices = [3,1,2] output: 3",`1 <= slices.length <= 500` `slices.length % 3 == 0` `1 <= slices[i] <= 1000`,
1389,Create Target Array in the Given Order,"Given two arrays of integers `nums` and `index`. Your task is to create target array under the following rules:
Initially target array is empty.

From left to right read nums[i] and index[i], insert at index `index[i]` the value `nums[i]` in target array.

Repeat the previous step until there are no elements to read in `nums` and `index.`
Return the target array.

It is guaranteed that the insertion operations will be valid.


Example 1:
Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]
Output: [0,4,1,3,2]
Explanation:
nums       index     target
0            0        [0]
1            1        [0,1]
2            2        [0,1,2]
3            2        [0,1,3,2]
4            1        [0,4,1,3,2]

Example 2:
Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]
Output: [0,1,2,3,4]
Explanation:
nums       index     target
1            0        [1]
2            1        [1,2]
3            2        [1,2,3]
4            3        [1,2,3,4]
0            0        [0,1,2,3,4]

Example 3:
Input: nums = [1], index = [0]
Output: [1]

Constraints:
`1 <= nums.length, index.length <= 100`
`nums.length == index.length`
`0 <= nums[i] <= 100`
`0 <= index[i] <= i`",Easy,https://leetcode.com/problems/create-target-array-in-the-given-order,Visa,Array,473,,"given two arrays of integers `nums` and `index`. your task is to create target array under the following rules: initially target array is empty. from left to right read nums[i] and index[i], insert at index `index[i]` the value `nums[i]` in target array. repeat the previous step until there are no elements to read in `nums` and `index.` return the target array. it is guaranteed that the insertion operations will be valid.","input: nums = [0,1,2,3,4], index = [0,1,2,2,1] output: [0,4,1,3,2] explanation: nums index target 0 0 [0] 1 1 [0,1] 2 2 [0,1,2] 3 2 [0,1,3,2] 4 1 [0,4,1,3,2] example 2: input: nums = [1,2,3,4,0], index = [0,1,2,3,0] output: [0,1,2,3,4] explanation: nums index target 1 0 [1] 2 1 [1,2] 3 2 [1,2,3] 4 3 [1,2,3,4] 0 0 [0,1,2,3,4] example 3: input: nums = [1], index = [0] output: [1]","`1 <= nums.length, index.length <= 10^0` `nums.length == index.length` `0 <= nums[i] <= 10^0` `0 <= index[i] <= i`",
1390,Four Divisors,"Given an integer array `nums`, return the sum of divisors of the integers in that array that have exactly four divisors.

If there is no such integer in the array, return `0`.


Example 1:
Input: nums = [21,4,7]
Output: 32
Explanation:
21 has 4 divisors: 1, 3, 7, 21
4 has 3 divisors: 1, 2, 4
7 has 2 divisors: 1, 7
The answer is the sum of divisors of 21 only.


Constraints:
`1 <= nums.length <= 10^4`
`1 <= nums[i] <= 10^5`",Medium,https://leetcode.com/problems/four-divisors,Capital One,Math,99,,"given an integer array `nums`, return the sum of divisors of the integers in that array that have exactly four divisors. if there is no such integer in the array, return `0`.","input: nums = [21,4,7] output: 32 explanation: 21 has 4 divisors: 1, 3, 7, 21 4 has 3 divisors: 1, 2, 4 7 has 2 divisors: 1, 7 the answer is the sum of divisors of 21 only.",`1 <= nums.length <= 10^4` `1 <= nums[i] <= 10^5`,
1391,Check if There is a Valid Path in a Grid,"Given a m x n `grid`. Each cell of the `grid` represents a street. The street of `grid[i][j]` can be:
1 which means a street connecting the left cell and the right cell.

2 which means a street connecting the upper cell and the lower cell.

3 which means a street connecting the left cell and the lower cell.

4 which means a street connecting the right cell and the lower cell.

5 which means a street connecting the left cell and the upper cell.

6 which means a street connecting the right cell and the upper cell.

You will initially start at the street of the upper-left cell `(0,0)`. A valid path in the grid is a path which starts from the upper left cell `(0,0)` and ends at the bottom-right cell `(m - 1, n - 1)`. The path should only follow the streets.

Notice that you are not allowed to change any street.

Return true if there is a valid path in the grid or false otherwise.


Example 1:
Input: grid = [[2,4,3],[6,5,2]]
Output: true
Explanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).


Example 2:
Input: grid = [[1,2,1],[1,2,1]]
Output: false
Explanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)

Example 3:
Input: grid = [[1,1,2]]
Output: false
Explanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).


Example 4:
Input: grid = [[1,1,1,1,1,1,3]]
Output: true

Example 5:
Input: grid = [[2],[2],[2],[2],[2],[2],[6]]
Output: true

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 300`
`1 <= grid[i][j] <= 6`",Medium,https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid,Robinhood,"Depth-first Search,Breadth-first Search",318,,"given a m x n `grid`. each cell of the `grid` represents a street. the street of `grid[i][j]` can be: 1 which means a street connecting the left cell and the right cell. 2 which means a street connecting the upper cell and the lower cell. 3 which means a street connecting the left cell and the lower cell. 4 which means a street connecting the right cell and the lower cell. 5 which means a street connecting the left cell and the upper cell. 6 which means a street connecting the right cell and the upper cell. you will initially start at the street of the upper-left cell `(0,0)`. a valid path in the grid is a path which starts from the upper left cell `(0,0)` and ends at the bottom-right cell `(m - 1, n - 1)`. the path should only follow the streets. notice that you are not allowed to change any street. return true if there is a valid path in the grid or false otherwise.","input: grid = [[2,4,3],[6,5,2]] output: true explanation: as shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1). example 2: input: grid = [[1,2,1],[1,2,1]] output: false explanation: as shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0) example 3: input: grid = [[1,1,2]] output: false explanation: you will get stuck at cell (0, 1) and you cannot reach cell (0, 2). example 4: input: grid = [[1,1,1,1,1,1,3]] output: true example 5: input: grid = [[2],[2],[2],[2],[2],[2],[6]] output: true","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 300` `1 <= grid[i][j] <= 6`",
1392,Longest Happy Prefix,"A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).

Given a string `s`. Return the longest happy prefix of `s` .

Return an empty string if no such prefix exists.


Example 1:
Input: s = ""level""
Output: ""l""
Explanation: s contains 4 prefix excluding itself (""l"", ""le"", ""lev"", ""leve""), and suffix (""l"", ""el"", ""vel"", ""evel""). The largest prefix which is also suffix is given by ""l"".


Example 2:
Input: s = ""ababab""
Output: ""abab""
Explanation: ""abab"" is the largest prefix which is also suffix. They can overlap in the original string.


Example 3:
Input: s = ""leetcodeleet""
Output: ""leet""

Example 4:
Input: s = ""a""
Output: """"

Constraints:
`1 <= s.length <= 10^5`
`s` contains only lowercase English letters.",Hard,https://leetcode.com/problems/longest-happy-prefix,Google,String,330,,a string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself). given a string `s`. return the longest happy prefix of `s` . return an empty string if no such prefix exists.,"input: s = ""level"" output: ""l"" explanation: s contains 4 prefix excluding itself (""l"", ""le"", ""lev"", ""leve""), and suffix (""l"", ""el"", ""vel"", ""evel""). the largest prefix which is also suffix is given by ""l"". example 2: input: s = ""ababab"" output: ""abab"" explanation: ""abab"" is the largest prefix which is also suffix. they can overlap in the original string. example 3: input: s = ""leetcodeleet"" output: ""leet"" example 4: input: s = ""a"" output: """"",`1 <= s.length <= 10^5` `s` contains only lowercase english letters.,
1393,Capital Gain/Loss,SQL Schema,Medium,https://leetcode.com/problems/capital-gainloss,Robinhood,,84,,sql schema,,,
1394,Find Lucky Integer in an Array,"Given an array of integers `arr`, a lucky integer is an integer which has a frequency in the array equal to its value.

Return a lucky integer in the array. If there are multiple lucky integers return the largest of them. If there is no lucky integer return -1.


Example 1:
Input: arr = [2,2,3,4]
Output: 2
Explanation: The only lucky number in the array is 2 because frequency[2] == 2.


Example 2:
Input: arr = [1,2,2,3,3,3]
Output: 3
Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.


Example 3:
Input: arr = [2,2,2,3,3]
Output: -1
Explanation: There are no lucky numbers in the array.


Example 4:
Input: arr = [5]
Output: -1

Example 5:
Input: arr = [7,7,7,7,7,7,7]
Output: 7

Constraints:
`1 <= arr.length <= 500`
`1 <= arr[i] <= 500`",Easy,https://leetcode.com/problems/find-lucky-integer-in-an-array,Microsoft,Array,363,,"given an array of integers `arr`, a lucky integer is an integer which has a frequency in the array equal to its value. return a lucky integer in the array. if there are multiple lucky integers return the largest of them. if there is no lucky integer return -1.","input: arr = [2,2,3,4] output: 2 explanation: the only lucky number in the array is 2 because frequency[2] == 2. example 2: input: arr = [1,2,2,3,3,3] output: 3 explanation: 1, 2 and 3 are all lucky numbers, return the largest of them. example 3: input: arr = [2,2,2,3,3] output: -1 explanation: there are no lucky numbers in the array. example 4: input: arr = [5] output: -1 example 5: input: arr = [7,7,7,7,7,7,7] output: 7",`1 <= arr.length <= 500` `1 <= arr[i] <= 500`,
1395,Count Number of Teams,"There are `n` soldiers standing in a line. Each soldier is assigned a unique `rating` value.

You have to form a team of 3 soldiers amongst them under the following rules:
Choose 3 soldiers with index (`i`, `j`, `k`) with rating (`rating[i]`, `rating[j]`, `rating[k]`).

A team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`).

Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).


Example 1:
Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 

Example 2:
Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.


Example 3:
Input: rating = [1,2,3,4]
Output: 4

Constraints:
`n == rating.length`
`3 <= n <= 1000`
`1 <= rating[i] <= 105`
All the integers in `rating` are unique.",Medium,https://leetcode.com/problems/count-number-of-teams,"Goldman Sachs,Amazon,Citadel",Array,897,,"there are `n` soldiers standing in a line. each soldier is assigned a unique `rating` value. you have to form a team of 3 soldiers amongst them under the following rules: choose 3 soldiers with index (`i`, `j`, `k`) with rating (`rating[i]`, `rating[j]`, `rating[k]`). a team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`). return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).","input: rating = [2,5,3,4,1] output: 3 explanation: we can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). example 2: input: rating = [2,1,3] output: 0 explanation: we can't form any team given the conditions. example 3: input: rating = [1,2,3,4] output: 4",`n == rating.length` `3 <= n <= 1000` `1 <= rating[i] <= 10^5` all the integers in `rating` are unique.,
1396,Design Underground System,"An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.

Implement the `UndergroundSystem` class:
`void checkIn(int id, string stationName, int t)`
	
A customer with a card ID equal to `id`, checks in at the station `stationName` at time `t`.

A customer can only be checked into one place at a time.

`void checkOut(int id, string stationName, int t)`
	
A customer with a card ID equal to `id`, checks out from the station `stationName` at time `t`.

`double getAverageTime(string startStation, string endStation)`
	
Returns the average time it takes to travel from `startStation` to `endStation`.

The average time is computed from all the previous traveling times from `startStation` to `endStation` that happened directly, meaning a check in at `startStation` followed by a check out from `endStation`.

The time it takes to travel from `startStation` to `endStation` may be different from the time it takes to travel from `endStation` to `startStation`.

There will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called.

You may assume all calls to the `checkIn` and `checkOut` methods are consistent. If a customer checks in at time `t1` then checks out at time `t2`, then `t1 < t2`. All events happen in chronological order.


Example 1:
Input
[""UndergroundSystem"",""checkIn"",""checkIn"",""checkIn"",""checkOut"",""checkOut"",""checkOut"",""getAverageTime"",""getAverageTime"",""checkIn"",""getAverageTime"",""checkOut"",""getAverageTime""]
[[],[45,""Leyton"",3],[32,""Paradise"",8],[27,""Leyton"",10],[45,""Waterloo"",15],[27,""Waterloo"",20],[32,""Cambridge"",22],[""Paradise"",""Cambridge""],[""Leyton"",""Waterloo""],[10,""Leyton"",24],[""Leyton"",""Waterloo""],[10,""Waterloo"",38],[""Leyton"",""Waterloo""]]
Output
[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]
Explanation
UndergroundSystem undergroundSystem = new UndergroundSystem();
undergroundSystem.checkIn(45, ""Leyton"", 3);
undergroundSystem.checkIn(32, ""Paradise"", 8);
undergroundSystem.checkIn(27, ""Leyton"", 10);
undergroundSystem.checkOut(45, ""Waterloo"", 15);  // Customer 45 ""Leyton"" -> ""Waterloo"" in 15-3 = 12
undergroundSystem.checkOut(27, ""Waterloo"", 20);  // Customer 27 ""Leyton"" -> ""Waterloo"" in 20-10 = 10
undergroundSystem.checkOut(32, ""Cambridge"", 22); // Customer 32 ""Paradise"" -> ""Cambridge"" in 22-8 = 14
undergroundSystem.getAverageTime(""Paradise"", ""Cambridge""); // return 14.00000. One trip ""Paradise"" -> ""Cambridge"", (14) / 1 = 14
undergroundSystem.getAverageTime(""Leyton"", ""Waterloo"");    // return 11.00000. Two trips ""Leyton"" -> ""Waterloo"", (10 + 12) / 2 = 11
undergroundSystem.checkIn(10, ""Leyton"", 24);
undergroundSystem.getAverageTime(""Leyton"", ""Waterloo"");    // return 11.00000
undergroundSystem.checkOut(10, ""Waterloo"", 38);  // Customer 10 ""Leyton"" -> ""Waterloo"" in 38-24 = 14
undergroundSystem.getAverageTime(""Leyton"", ""Waterloo"");    // return 12.00000. Three trips ""Leyton"" -> ""Waterloo"", (10 + 12 + 14) / 3 = 12

Example 2:
Input
[""UndergroundSystem"",""checkIn"",""checkOut"",""getAverageTime"",""checkIn"",""checkOut"",""getAverageTime"",""checkIn"",""checkOut"",""getAverageTime""]
[[],[10,""Leyton"",3],[10,""Paradise"",8],[""Leyton"",""Paradise""],[5,""Leyton"",10],[5,""Paradise"",16],[""Leyton"",""Paradise""],[2,""Leyton"",21],[2,""Paradise"",30],[""Leyton"",""Paradise""]]
Output
[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]
Explanation
UndergroundSystem undergroundSystem = new UndergroundSystem();
undergroundSystem.checkIn(10, ""Leyton"", 3);
undergroundSystem.checkOut(10, ""Paradise"", 8); // Customer 10 ""Leyton"" -> ""Paradise"" in 8-3 = 5
undergroundSystem.getAverageTime(""Leyton"", ""Paradise""); // return 5.00000, (5) / 1 = 5
undergroundSystem.checkIn(5, ""Leyton"", 10);
undergroundSystem.checkOut(5, ""Paradise"", 16); // Customer 5 ""Leyton"" -> ""Paradise"" in 16-10 = 6
undergroundSystem.getAverageTime(""Leyton"", ""Paradise""); // return 5.50000, (5 + 6) / 2 = 5.5
undergroundSystem.checkIn(2, ""Leyton"", 21);
undergroundSystem.checkOut(2, ""Paradise"", 30); // Customer 2 ""Leyton"" -> ""Paradise"" in 30-21 = 9
undergroundSystem.getAverageTime(""Leyton"", ""Paradise""); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667

Constraints:
`1 <= id, t <= 106`
`1 <= stationName.length, startStation.length, endStation.length <= 10`
All strings consist of uppercase and lowercase English letters and digits.

There will be at most `2 * 104` calls in total to `checkIn`, `checkOut`, and `getAverageTime`.

Answers within `10-5` of the actual value will be accepted.",Medium,https://leetcode.com/problems/design-underground-system,Bloomberg,Design,713,,"an underground railway system is keeping track of customer travel times between different stations. they are using this data to calculate the average time it takes to travel from one station to another. implement the `undergroundsystem` class: `void checkin(int id, string stationname, int t)` a customer with a card id equal to `id`, checks in at the station `stationname` at time `t`. a customer can only be checked into one place at a time. `void checkout(int id, string stationname, int t)` a customer with a card id equal to `id`, checks out from the station `stationname` at time `t`. `double getaveragetime(string startstation, string endstation)` returns the average time it takes to travel from `startstation` to `endstation`. the average time is computed from all the previous traveling times from `startstation` to `endstation` that happened directly, meaning a check in at `startstation` followed by a check out from `endstation`. the time it takes to travel from `startstation` to `endstation` may be different from the time it takes to travel from `endstation` to `startstation`. there will be at least one customer that has traveled from `startstation` to `endstation` before `getaveragetime` is called. you may assume all calls to the `checkin` and `checkout` methods are consistent. if a customer checks in at time `t1` then checks out at time `t2`, then `t1 < t2`. all events happen in chronological order.","input [""undergroundsystem"",""checkin"",""checkin"",""checkin"",""checkout"",""checkout"",""checkout"",""getaveragetime"",""getaveragetime"",""checkin"",""getaveragetime"",""checkout"",""getaveragetime""] [[],[45,""leyton"",3],[32,""paradise"",8],[27,""leyton"",10],[45,""waterloo"",15],[27,""waterloo"",20],[32,""cambridge"",22],[""paradise"",""cambridge""],[""leyton"",""waterloo""],[10,""leyton"",24],[""leyton"",""waterloo""],[10,""waterloo"",38],[""leyton"",""waterloo""]] output [null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000] explanation undergroundsystem undergroundsystem = new undergroundsystem(); undergroundsystem.checkin(45, ""leyton"", 3); undergroundsystem.checkin(32, ""paradise"", 8); undergroundsystem.checkin(27, ""leyton"", 10); undergroundsystem.checkout(45, ""waterloo"", 15); // customer 45 ""leyton"" -> ""waterloo"" in 15-3 = 12 undergroundsystem.checkout(27, ""waterloo"", 20); // customer 27 ""leyton"" -> ""waterloo"" in 20-10 = 10 undergroundsystem.checkout(32, ""cambridge"", 22); // customer 32 ""paradise"" -> ""cambridge"" in 22-8 = 14 undergroundsystem.getaveragetime(""paradise"", ""cambridge""); // return 14.00000. one trip ""paradise"" -> ""cambridge"", (14) / 1 = 14 undergroundsystem.getaveragetime(""leyton"", ""waterloo""); // return 11.00000. two trips ""leyton"" -> ""waterloo"", (10 + 12) / 2 = 11 undergroundsystem.checkin(10, ""leyton"", 24); undergroundsystem.getaveragetime(""leyton"", ""waterloo""); // return 11.00000 undergroundsystem.checkout(10, ""waterloo"", 38); // customer 10 ""leyton"" -> ""waterloo"" in 38-24 = 14 undergroundsystem.getaveragetime(""leyton"", ""waterloo""); // return 12.00000. three trips ""leyton"" -> ""waterloo"", (10 + 12 + 14) / 3 = 12 example 2: input [""undergroundsystem"",""checkin"",""checkout"",""getaveragetime"",""checkin"",""checkout"",""getaveragetime"",""checkin"",""checkout"",""getaveragetime""] [[],[10,""leyton"",3],[10,""paradise"",8],[""leyton"",""paradise""],[5,""leyton"",10],[5,""paradise"",16],[""leyton"",""paradise""],[2,""leyton"",21],[2,""paradise"",30],[""leyton"",""paradise""]] output [null,null,null,5.00000,null,null,5.50000,null,null,6.66667] explanation undergroundsystem undergroundsystem = new undergroundsystem(); undergroundsystem.checkin(10, ""leyton"", 3); undergroundsystem.checkout(10, ""paradise"", 8); // customer 10 ""leyton"" -> ""paradise"" in 8-3 = 5 undergroundsystem.getaveragetime(""leyton"", ""paradise""); // return 5.00000, (5) / 1 = 5 undergroundsystem.checkin(5, ""leyton"", 10); undergroundsystem.checkout(5, ""paradise"", 16); // customer 5 ""leyton"" -> ""paradise"" in 16-10 = 6 undergroundsystem.getaveragetime(""leyton"", ""paradise""); // return 5.50000, (5 + 6) / 2 = 5.5 undergroundsystem.checkin(2, ""leyton"", 21); undergroundsystem.checkout(2, ""paradise"", 30); // customer 2 ""leyton"" -> ""paradise"" in 30-21 = 9 undergroundsystem.getaveragetime(""leyton"", ""paradise""); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667","`1 <= id, t <= 10^6` `1 <= stationname.length, startstation.length, endstation.length <= 10` all strings consist of uppercase and lowercase english letters and digits. there will be at most `2 * 10^4` calls in total to `checkin`, `checkout`, and `getaveragetime`. answers within `10-5` of the actual value will be accepted.",
1397,Find All Good Strings,"Given the strings `s1` and `s2` of size `n`, and the string `evil`. Return the number of good strings.

A good string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. Since the answer can be a huge number, return this modulo 10^9 + 7.


Example 1:
Input: n = 2, s1 = ""aa"", s2 = ""da"", evil = ""b""
Output: 51 
Explanation: There are 25 good strings starting with 'a': ""aa"",""ac"",""ad"",...,""az"". Then there are 25 good strings starting with 'c': ""ca"",""cc"",""cd"",...,""cz"" and finally there is one good string starting with 'd': ""da"". 

Example 2:
Input: n = 8, s1 = ""leetcode"", s2 = ""leetgoes"", evil = ""leet""
Output: 0 
Explanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix ""leet"", therefore, there is not any good string.


Example 3:
Input: n = 2, s1 = ""gx"", s2 = ""gz"", evil = ""x""
Output: 2

Constraints:
`s1.length == n`
`s2.length == n`
`s1 <= s2`
`1 <= n <= 500`
`1 <= evil.length <= 50`
All strings consist of lowercase English letters.",Hard,https://leetcode.com/problems/find-all-good-strings,Dunzo,Dynamic Programming,179,,"given the strings `s1` and `s2` of size `n`, and the string `evil`. return the number of good strings. a good string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. since the answer can be a huge number, return this modulo 10^9 + 7.","input: n = 2, s1 = ""aa"", s2 = ""da"", evil = ""b"" output: 51 explanation: there are 25 good strings starting with 'a': ""aa"",""ac"",""ad"",...,""az"". then there are 25 good strings starting with 'c': ""ca"",""cc"",""cd"",...,""cz"" and finally there is one good string starting with 'd': ""da"". example 2: input: n = 8, s1 = ""leetcode"", s2 = ""leetgoes"", evil = ""leet"" output: 0 explanation: all strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix ""leet"", therefore, there is not any good string. example 3: input: n = 2, s1 = ""gx"", s2 = ""gz"", evil = ""x"" output: 2",`s1.length == n` `s2.length == n` `s1 <= s2` `1 <= n <= 500` `1 <= evil.length <= 50` all strings consist of lowercase english letters.,
1398,Customers Who Bought Products A and B but Not C,SQL Schema,Medium,https://leetcode.com/problems/customers-who-bought-products-a-and-b-but-not-c,Amazon,,85,,sql schema,,,
1399,Count Largest Group,"Given an integer `n`. Each number from `1` to `n` is grouped according to the sum of its digits. 
Return how many groups have the largest size.


Example 1:
Input: n = 13
Output: 4
Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 groups with largest size.


Example 2:
Input: n = 2
Output: 2
Explanation: There are 2 groups [1], [2] of size 1.


Example 3:
Input: n = 15
Output: 6

Example 4:
Input: n = 24
Output: 5

Constraints:
`1 <= n <= 10^4`",Easy,https://leetcode.com/problems/count-largest-group,Mercari,Array,172,,given an integer `n`. each number from `1` to `n` is grouped according to the sum of its digits. return how many groups have the largest size.,"input: n = 13 output: 4 explanation: there are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13: [1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. there are 4 groups with largest size. example 2: input: n = 2 output: 2 explanation: there are 2 groups [1], [2] of size 1. example 3: input: n = 15 output: 6 example 4: input: n = 24 output: 5",`1 <= n <= 10^4`,
1400,Construct K Palindrome Strings,"Given a string `s` and an integer `k`. You should construct `k` non-empty palindrome strings using all the characters in `s`.

Return True if you can use all the characters in `s` to construct `k` palindrome strings or False otherwise.


Example 1:
Input: s = ""annabelle"", k = 2
Output: true
Explanation: You can construct two palindromes using all characters in s.

Some possible constructions ""anna"" + ""elble"", ""anbna"" + ""elle"", ""anellena"" + ""b""

Example 2:
Input: s = ""leetcode"", k = 3
Output: false
Explanation: It is impossible to construct 3 palindromes using all the characters of s.


Example 3:
Input: s = ""true"", k = 4
Output: true
Explanation: The only possible solution is to put each character in a separate string.


Example 4:
Input: s = ""yzyzyzyzyzyzyzy"", k = 2
Output: true
Explanation: Simply you can put all z's in one string and all y's in the other string. Both strings will be palindrome.


Example 5:
Input: s = ""cr"", k = 7
Output: false
Explanation: We don't have enough characters in s to construct 7 palindromes.


Constraints:
`1 <= s.length <= 10^5`
All characters in `s` are lower-case English letters.

`1 <= k <= 10^5`",Medium,https://leetcode.com/problems/construct-k-palindrome-strings,Uber,Greedy,333,,given a string `s` and an integer `k`. you should construct `k` non-empty palindrome strings using all the characters in `s`. return true if you can use all the characters in `s` to construct `k` palindrome strings or false otherwise.,"input: s = ""annabelle"", k = 2 output: true explanation: you can construct two palindromes using all characters in s. some possible constructions ""anna"" + ""elble"", ""anbna"" + ""elle"", ""anellena"" + ""b"" example 2: input: s = ""leetcode"", k = 3 output: false explanation: it is impossible to construct 3 palindromes using all the characters of s. example 3: input: s = ""true"", k = 4 output: true explanation: the only possible solution is to put each character in a separate string. example 4: input: s = ""yzyzyzyzyzyzyzy"", k = 2 output: true explanation: simply you can put all z's in one string and all y's in the other string. both strings will be palindrome. example 5: input: s = ""cr"", k = 7 output: false explanation: we don't have enough characters in s to construct 7 palindromes.",`1 <= s.length <= 10^5` all characters in `s` are lower-case english letters. `1 <= k <= 10^5`,
1401,Circle and Rectangle Overlapping,"Given a circle represented as (`radius`, `x_center`, `y_center`) and an axis-aligned rectangle represented as (`x1`, `y1`, `x2`, `y2`), where (`x1`, `y1`) are the coordinates of the bottom-left corner, and (`x2`, `y2`) are the coordinates of the top-right corner of the rectangle.

Return True if the circle and rectangle are overlapped otherwise return False.

In other words, check if there are any point (xi, yi) such that belongs to the circle and the rectangle at the same time.


Example 1:
Input: radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1
Output: true
Explanation: Circle and rectangle share the point (1,0) 

Example 2:
Input: radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1
Output: true

Example 3:
Input: radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3
Output: true

Example 4:
Input: radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1
Output: false

Constraints:
`1 <= radius <= 2000`
`-10^4 <= x_center, y_center, x1, y1, x2, y2 <= 10^4`
`x1 < x2`
`y1 < y2`",Medium,https://leetcode.com/problems/circle-and-rectangle-overlapping,Google,Geometry,158,,"given a circle represented as (`radius`, `x_center`, `y_center`) and an axis-aligned rectangle represented as (`x1`, `y1`, `x2`, `y2`), where (`x1`, `y1`) are the coordinates of the bottom-left corner, and (`x2`, `y2`) are the coordinates of the top-right corner of the rectangle. return true if the circle and rectangle are overlapped otherwise return false. in other words, check if there are any point (xi, yi) such that belongs to the circle and the rectangle at the same time.","input: radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1 output: true explanation: circle and rectangle share the point (1,0) example 2: input: radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1 output: true example 3: input: radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3 output: true example 4: input: radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1 output: false","`1 <= radius <= 2000` `-10^4 <= x_center, y_center, x1, y1, x2, y2 <= 10^4` `x1 < x2` `y1 < y2`",
1402,Reducing Dishes,"A chef has collected data on the `satisfaction` level of his `n` dishes. Chef can cook any dish in 1 unit of time.

Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level  i.e.  `time[i]`*`satisfaction[i]`
Return the maximum sum of Like-time coefficient that the chef can obtain after dishes preparation.

Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.


Example 1:
Input: satisfaction = [-1,-8,0,5,-9]
Output: 14
Explanation: After Removing the second and last dish, the maximum total Like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time.


Example 2:
Input: satisfaction = [4,3,2]
Output: 20
Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)

Example 3:
Input: satisfaction = [-1,-4,-5]
Output: 0
Explanation: People don't like the dishes. No dish is prepared.


Example 4:
Input: satisfaction = [-2,5,-1,0,3,-3]
Output: 35

Constraints:
`n == satisfaction.length`
`1 <= n <= 500`
`-10^3 <= satisfaction[i] <= 10^3`",Hard,https://leetcode.com/problems/reducing-dishes,OT,Dynamic Programming,414,,a chef has collected data on the `satisfaction` level of his `n` dishes. chef can cook any dish in 1 unit of time. like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level i.e. `time[i]`*`satisfaction[i]` return the maximum sum of like-time coefficient that the chef can obtain after dishes preparation. dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.,"input: satisfaction = [-1,-8,0,5,-9] output: 14 explanation: after removing the second and last dish, the maximum total like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). each dish is prepared in one unit of time. example 2: input: satisfaction = [4,3,2] output: 20 explanation: dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20) example 3: input: satisfaction = [-1,-4,-5] output: 0 explanation: people don't like the dishes. no dish is prepared. example 4: input: satisfaction = [-2,5,-1,0,3,-3] output: 35",`n == satisfaction.length` `1 <= n <= 500` `-10^3 <= satisfaction[i] <= 10^3`,
1403,Minimum Subsequence in Non-Increasing Order,"Given the array `nums`, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. 
If there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. 
Note that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.


Example 1:
Input: nums = [4,3,10,9,8]
Output: [10,9] 
Explanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements. 

Example 2:
Input: nums = [4,4,7,6,7]
Output: [7,7,6] 
Explanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order.  

Example 3:
Input: nums = [6]
Output: [6]

Constraints:
`1 <= nums.length <= 500`
`1 <= nums[i] <= 100`",Easy,https://leetcode.com/problems/minimum-subsequence-in-non-increasing-order,Mercari,"Greedy,Sort",208,,"given the array `nums`, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. if there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. a subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. note that the solution with the given constraints is guaranteed to be unique. also return the answer sorted in non-increasing order.","input: nums = [4,3,10,9,8] output: [10,9] explanation: the subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements. example 2: input: nums = [4,4,7,6,7] output: [7,7,6] explanation: the subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. note the subsequence has to returned in non-decreasing order. example 3: input: nums = [6] output: [6]",`1 <= nums.length <= 500` `1 <= nums[i] <= 10^0`,
1404,Number of Steps to Reduce a Number in Binary Representation to One,"Given a number `s` in their binary representation. Return the number of steps to reduce it to 1 under the following rules:
If the current number is even, you have to divide it by 2.

If the current number is odd, you have to add 1 to it.

It's guaranteed that you can always reach to one for all testcases.


Example 1:
Input: s = ""1101""
Output: 6
Explanation: ""1101"" corressponds to number 13 in their decimal representation.

Step 1) 13 is odd, add 1 and obtain 14. 
Step 2) 14 is even, divide by 2 and obtain 7.

Step 3) 7 is odd, add 1 and obtain 8.

Step 4) 8 is even, divide by 2 and obtain 4.  
Step 5) 4 is even, divide by 2 and obtain 2. 
Step 6) 2 is even, divide by 2 and obtain 1.  

Example 2:
Input: s = ""10""
Output: 1
Explanation: ""10"" corressponds to number 2 in their decimal representation.

Step 1) 2 is even, divide by 2 and obtain 1.  

Example 3:
Input: s = ""1""
Output: 0

Constraints:
`1 <= s.length <= 500`
`s` consists of characters '0' or '1'
`s[0] == '1'`",Medium,https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one,TripAdvisor,"String,Bit Manipulation",292,,"given a number `s` in their binary representation. return the number of steps to reduce it to 1 under the following rules: if the current number is even, you have to divide it by 2. if the current number is odd, you have to add 1 to it. it's guaranteed that you can always reach to one for all testcases.","input: s = ""1101"" output: 6 explanation: ""1101"" corressponds to number 13 in their decimal representation. step 1) 13 is odd, add 1 and obtain 14. step 2) 14 is even, divide by 2 and obtain 7. step 3) 7 is odd, add 1 and obtain 8. step 4) 8 is even, divide by 2 and obtain 4. step 5) 4 is even, divide by 2 and obtain 2. step 6) 2 is even, divide by 2 and obtain 1. example 2: input: s = ""10"" output: 1 explanation: ""10"" corressponds to number 2 in their decimal representation. step 1) 2 is even, divide by 2 and obtain 1. example 3: input: s = ""1"" output: 0",`1 <= s.length <= 500` `s` consists of characters '0' or '1' `s[0] == '1'`,
1405,Longest Happy String,"A string is called happy if it does not have any of the strings `'aaa'`, `'bbb'` or `'ccc'` as a substring.

Given three integers `a`, `b` and `c`, return any string `s`, which satisfies following conditions:
`s` is happy and longest possible.

`s` contains at most `a` occurrences of the letter `'a'`, at most `b` occurrences of the letter `'b'` and at most `c` occurrences of the letter `'c'`.

`s `will only contain `'a'`, `'b'` and `'c'` letters.

If there is no such string `s` return the empty string `""""`.


Example 1:
Input: a = 1, b = 1, c = 7
Output: ""ccaccbcc""
Explanation: ""ccbccacc"" would also be a correct answer.


Example 2:
Input: a = 2, b = 2, c = 1
Output: ""aabbc""

Example 3:
Input: a = 7, b = 1, c = 0
Output: ""aabaa""
Explanation: It's the only correct answer in this case.


Constraints:
`0 <= a, b, c <= 100`
`a + b + c > 0`",Medium,https://leetcode.com/problems/longest-happy-string,"Grab,Amazon,Adobe","Dynamic Programming,Greedy",522,,"a string is called happy if it does not have any of the strings `'aaa'`, `'bbb'` or `'ccc'` as a substring. given three integers `a`, `b` and `c`, return any string `s`, which satisfies following conditions: `s` is happy and longest possible. `s` contains at most `a` occurrences of the letter `'a'`, at most `b` occurrences of the letter `'b'` and at most `c` occurrences of the letter `'c'`. `s `will only contain `'a'`, `'b'` and `'c'` letters. if there is no such string `s` return the empty string `""""`.","input: a = 1, b = 1, c = 7 output: ""ccaccbcc"" explanation: ""ccbccacc"" would also be a correct answer. example 2: input: a = 2, b = 2, c = 1 output: ""aabbc"" example 3: input: a = 7, b = 1, c = 0 output: ""aabaa"" explanation: it's the only correct answer in this case.","`0 <= a, b, c <= 10^0` `a + b + c > 0`",
1406,Stone Game III,"Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array `stoneValue`.

Alice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2 or 3 stones from the first remaining stones in the row.

The score of each player is the sum of values of the stones taken. The score of each player is 0 initially.

The objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.

Assume Alice and Bob play optimally.

Return ""Alice"" if Alice will win, ""Bob"" if Bob will win or ""Tie"" if they end the game with the same score.


Example 1:
Input: values = [1,2,3,7]
Output: ""Bob""
Explanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.


Example 2:
Input: values = [1,2,3,-9]
Output: ""Alice""
Explanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.

If Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. The next move Alice will take the pile with value = -9 and lose.

If Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. The next move Alice will take the pile with value = -9 and also lose.

Remember that both play optimally so here Alice will choose the scenario that makes her win.


Example 3:
Input: values = [1,2,3,6]
Output: ""Tie""
Explanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.


Example 4:
Input: values = [1,2,3,-1,-2,-3,7]
Output: ""Alice""

Example 5:
Input: values = [-1,-2,-3]
Output: ""Tie""

Constraints:
`1 <= values.length <= 50000`
`-1000 <= values[i] <= 1000`",Hard,https://leetcode.com/problems/stone-game-iii,Google,Dynamic Programming,521,"[Stone Game V, /problems/stone-game-v/, Hard], [Stone Game VI, /problems/stone-game-vi/, Medium], [Stone Game VII, /problems/stone-game-vii/, Medium]","alice and bob continue their games with piles of stones. there are several stones arranged in a row, and each stone has an associated value which is an integer given in the array `stonevalue`. alice and bob take turns, with alice starting first. on each player's turn, that player can take 1, 2 or 3 stones from the first remaining stones in the row. the score of each player is the sum of values of the stones taken. the score of each player is 0 initially. the objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. the game continues until all the stones have been taken. assume alice and bob play optimally. return ""alice"" if alice will win, ""bob"" if bob will win or ""tie"" if they end the game with the same score.","input: values = [1,2,3,7] output: ""bob"" explanation: alice will always lose. her best move will be to take three piles and the score become 6. now the score of bob is 7 and bob wins. example 2: input: values = [1,2,3,-9] output: ""alice"" explanation: alice must choose all the three piles at the first move to win and leave bob with negative score. if alice chooses one pile her score will be 1 and the next move bob's score becomes 5. the next move alice will take the pile with value = -9 and lose. if alice chooses two piles her score will be 3 and the next move bob's score becomes 3. the next move alice will take the pile with value = -9 and also lose. remember that both play optimally so here alice will choose the scenario that makes her win. example 3: input: values = [1,2,3,6] output: ""tie"" explanation: alice cannot win this game. she can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose. example 4: input: values = [1,2,3,-1,-2,-3,7] output: ""alice"" example 5: input: values = [-1,-2,-3] output: ""tie""",`1 <= values.length <= 50000` `-1000 <= values[i] <= 1000`,
1407,Top Travellers,SQL Schema,Easy,https://leetcode.com/problems/top-travellers,Point72,,53,,sql schema,,,
1408,String Matching in an Array,"Given an array of string `words`. Return all strings in `words` which is substring of another word in any order. 
String `words[i]` is substring of `words[j]`, if can be obtained removing some characters to left and/or right side of `words[j]`.


Example 1:
Input: words = [""mass"",""as"",""hero"",""superhero""]
Output: [""as"",""hero""]
Explanation: ""as"" is substring of ""mass"" and ""hero"" is substring of ""superhero"".

[""hero"",""as""] is also a valid answer.


Example 2:
Input: words = [""leetcode"",""et"",""code""]
Output: [""et"",""code""]
Explanation: ""et"", ""code"" are substring of ""leetcode"".


Example 3:
Input: words = [""blue"",""green"",""bu""]
Output: []

Constraints:
`1 <= words.length <= 100`
`1 <= words[i].length <= 30`
`words[i]` contains only lowercase English letters.

It's guaranteed that `words[i]` will be unique.",Easy,https://leetcode.com/problems/string-matching-in-an-array,Amazon,String,308,,"given an array of string `words`. return all strings in `words` which is substring of another word in any order. string `words[i]` is substring of `words[j]`, if can be obtained removing some characters to left and/or right side of `words[j]`.","input: words = [""mass"",""as"",""hero"",""superhero""] output: [""as"",""hero""] explanation: ""as"" is substring of ""mass"" and ""hero"" is substring of ""superhero"". [""hero"",""as""] is also a valid answer. example 2: input: words = [""leetcode"",""et"",""code""] output: [""et"",""code""] explanation: ""et"", ""code"" are substring of ""leetcode"". example 3: input: words = [""blue"",""green"",""bu""] output: []",`1 <= words.length <= 10^0` `1 <= words[i].length <= 30` `words[i]` contains only lowercase english letters. it's guaranteed that `words[i]` will be unique.,
1409,Queries on a Permutation With Key,"Given the array `queries` of positive integers between `1` and `m`, you have to process all `queries[i]` (from `i=0` to `i=queries.length-1`) according to the following rules:
In the beginning, you have the permutation `P=[1,2,3,...,m]`.

For the current `i`, find the position of `queries[i]` in the permutation `P` (indexing from 0) and then move this at the beginning of the permutation `P.` Notice that the position of `queries[i]` in `P` is the result for `queries[i]`.

Return an array containing the result for the given `queries`.


Example 1:
Input: queries = [3,1,2,1], m = 5
Output: [2,1,2,1] 
Explanation: The queries are processed as follow: 
For i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. 
For i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. 
For i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. 
For i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. 
Therefore, the array containing the result is [2,1,2,1].  

Example 2:
Input: queries = [4,1,2,2], m = 4
Output: [3,1,2,0]

Example 3:
Input: queries = [7,5,5,8,3], m = 8
Output: [6,5,0,7,5]

Constraints:
`1 <= m <= 10^3`
`1 <= queries.length <= m`
`1 <= queries[i] <= m`",Medium,https://leetcode.com/problems/queries-on-a-permutation-with-key,Amazon,Array,198,,"given the array `queries` of positive integers between `1` and `m`, you have to process all `queries[i]` (from `i=0` to `i=queries.length-1`) according to the following rules: in the beginning, you have the permutation `p=[1,2,3,...,m]`. for the current `i`, find the position of `queries[i]` in the permutation `p` (indexing from 0) and then move this at the beginning of the permutation `p.` notice that the position of `queries[i]` in `p` is the result for `queries[i]`. return an array containing the result for the given `queries`.","input: queries = [3,1,2,1], m = 5 output: [2,1,2,1] explanation: the queries are processed as follow: for i=0: queries[i]=3, p=[1,2,3,4,5], position of 3 in p is 2, then we move 3 to the beginning of p resulting in p=[3,1,2,4,5]. for i=1: queries[i]=1, p=[3,1,2,4,5], position of 1 in p is 1, then we move 1 to the beginning of p resulting in p=[1,3,2,4,5]. for i=2: queries[i]=2, p=[1,3,2,4,5], position of 2 in p is 2, then we move 2 to the beginning of p resulting in p=[2,1,3,4,5]. for i=3: queries[i]=1, p=[2,1,3,4,5], position of 1 in p is 1, then we move 1 to the beginning of p resulting in p=[1,2,3,4,5]. therefore, the array containing the result is [2,1,2,1]. example 2: input: queries = [4,1,2,2], m = 4 output: [3,1,2,0] example 3: input: queries = [7,5,5,8,3], m = 8 output: [6,5,0,7,5]",`1 <= m <= 10^3` `1 <= queries.length <= m` `1 <= queries[i] <= m`,
1410,HTML Entity Parser,"HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.

The special characters and their entities for HTML are:
Quotation Mark: the entity is `&quot;` and symbol character is `""`.

Single Quote Mark: the entity is `&apos;` and symbol character is `'`.

Ampersand: the entity is `&amp;` and symbol character is `&`.

Greater Than Sign: the entity is `&gt;` and symbol character is `>`.

Less Than Sign: the entity is `&lt;` and symbol character is `<`.

Slash: the entity is `&frasl;` and symbol character is `/`.

Given the input `text` string to the HTML parser, you have to implement the entity parser.

Return the text after replacing the entities by the special characters.


Example 1:
Input: text = ""&amp; is an HTML entity but &ambassador; is not.""
Output: ""& is an HTML entity but &ambassador; is not.""
Explanation: The parser will replace the &amp; entity by &

Example 2:
Input: text = ""and I quote: &quot;...&quot;""
Output: ""and I quote: \""...\""""

Example 3:
Input: text = ""Stay home! Practice on Leetcode :)""
Output: ""Stay home! Practice on Leetcode :)""

Example 4:
Input: text = ""x &gt; y &amp;&amp; x &lt; y is always false""
Output: ""x > y && x < y is always false""

Example 5:
Input: text = ""leetcode.com&frasl;problemset&frasl;all""
Output: ""leetcode.com/problemset/all""

Constraints:
`1 <= text.length <= 10^5`
The string may contain any possible characters out of all the 256 ASCII characters.",Medium,https://leetcode.com/problems/html-entity-parser,Oracle,"String,Stack",90,,"html entity parser is the parser that takes html code as input and replace all the entities of the special characters by the characters itself. the special characters and their entities for html are: quotation mark: the entity is `&quot;` and symbol character is `""`. single quote mark: the entity is `&apos;` and symbol character is `'`. ampersand: the entity is `&amp;` and symbol character is `&`. greater than sign: the entity is `&gt;` and symbol character is `>`. less than sign: the entity is `&lt;` and symbol character is `<`. slash: the entity is `&frasl;` and symbol character is `/`. given the input `text` string to the html parser, you have to implement the entity parser. return the text after replacing the entities by the special characters.","input: text = ""&amp; is an html entity but &ambassador; is not."" output: ""& is an html entity but &ambassador; is not."" explanation: the parser will replace the &amp; entity by & example 2: input: text = ""and i quote: &quot;...&quot;"" output: ""and i quote: \""...\"""" example 3: input: text = ""stay home! practice on leetcode :)"" output: ""stay home! practice on leetcode :)"" example 4: input: text = ""x &gt; y &amp;&amp; x &lt; y is always false"" output: ""x > y && x < y is always false"" example 5: input: text = ""leetcode.com&frasl;problemset&frasl;all"" output: ""leetcode.com/problemset/all""",`1 <= text.length <= 10^5` the string may contain any possible characters out of all the 256 ascii characters.,
1411,Number of Ways to Paint N × 3 Grid,"You have a `grid` of size `n x 3` and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).

Given `n` the number of rows of the grid, return the number of ways you can paint this `grid`. As the answer may grow large, the answer must be computed modulo `109 + 7`.


Example 1:
Input: n = 1
Output: 12
Explanation: There are 12 possible way to paint the grid as shown.


Example 2:
Input: n = 2
Output: 54

Example 3:
Input: n = 3
Output: 246

Example 4:
Input: n = 7
Output: 106494

Example 5:
Input: n = 5000
Output: 30228214

Constraints:
`n == grid.length`
`grid[i].length == 3`
`1 <= n <= 5000`",Hard,https://leetcode.com/problems/number-of-ways-to-paint-n-3-grid,"Akuna Capital,Facebook,Paypal",Dynamic Programming,438,,"you have a `grid` of size `n x 3` and you want to paint each cell of the grid with exactly one of the three colors: red, yellow, or green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color). given `n` the number of rows of the grid, return the number of ways you can paint this `grid`. as the answer may grow large, the answer must be computed modulo `109 + 7`.",input: n = 1 output: 12 explanation: there are 12 possible way to paint the grid as shown. example 2: input: n = 2 output: 54 example 3: input: n = 3 output: 246 example 4: input: n = 7 output: 106494 example 5: input: n = 5000 output: 30228214,`n == grid.length` `grid[i].length == 3` `1 <= n <= 5000`,
1412,Find the Quiet Students in All Exams,SQL Schema,Hard,https://leetcode.com/problems/find-the-quiet-students-in-all-exams,,,80,,sql schema,,,
1413,Minimum Value to Get Positive Step by Step Sum,"Given an array of integers `nums`, you start with an initial positive value startValue.

In each iteration, you calculate the step by step sum of startValue plus elements in `nums` (from left to right).

Return the minimum positive value of startValue such that the step by step sum is never less than 1.


Example 1:
Input: nums = [-3,2,-3,4,2]
Output: 5
Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.

                step by step sum
                startValue = 4 | startValue = 5 | nums
                  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3
                  (1 +2 ) = 3  | (2 +2 ) = 4    |   2
                  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3
                  (0 +4 ) = 4  | (1 +4 ) = 5    |   4
                  (4 +2 ) = 6  | (5 +2 ) = 7    |   2

Example 2:
Input: nums = [1,2]
Output: 1
Explanation: Minimum start value should be positive. 

Example 3:
Input: nums = [1,-2,-3]
Output: 5

Constraints:
`1 <= nums.length <= 100`
`-100 <= nums[i] <= 100`",Easy,https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum,Swiggy,Array,345,,"given an array of integers `nums`, you start with an initial positive value startvalue. in each iteration, you calculate the step by step sum of startvalue plus elements in `nums` (from left to right). return the minimum positive value of startvalue such that the step by step sum is never less than 1.","input: nums = [-3,2,-3,4,2] output: 5 explanation: if you choose startvalue = 4, in the third iteration your step by step sum is less than 1. step by step sum startvalue = 4 | startvalue = 5 | nums (4 -3 ) = 1 | (5 -3 ) = 2 | -3 (1 +2 ) = 3 | (2 +2 ) = 4 | 2 (3 -3 ) = 0 | (4 -3 ) = 1 | -3 (0 +4 ) = 4 | (1 +4 ) = 5 | 4 (4 +2 ) = 6 | (5 +2 ) = 7 | 2 example 2: input: nums = [1,2] output: 1 explanation: minimum start value should be positive. example 3: input: nums = [1,-2,-3] output: 5",`1 <= nums.length <= 10^0` `-10^0 <= nums[i] <= 10^0`,
1414,Find the Minimum Number of Fibonacci Numbers Whose Sum Is K,"Given an integer `k`, return the minimum number of Fibonacci numbers whose sum is equal to `k`. The same Fibonacci number can be used multiple times.

The Fibonacci numbers are defined as:
`F1 = 1`
`F2 = 1`
`Fn = Fn-1 + Fn-2` for `n > 2.`
It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to `k`.


Example 1:
Input: k = 7
Output: 2 
Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... 
For k = 7 we can use 2 + 5 = 7.


Example 2:
Input: k = 10
Output: 2 
Explanation: For k = 10 we can use 2 + 8 = 10.


Example 3:
Input: k = 19
Output: 3 
Explanation: For k = 19 we can use 1 + 5 + 13 = 19.


Constraints:
`1 <= k <= 10^9`",Medium,https://leetcode.com/problems/find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k,Google,"Array,Greedy",412,,"given an integer `k`, return the minimum number of fibonacci numbers whose sum is equal to `k`. the same fibonacci number can be used multiple times. the fibonacci numbers are defined as: `f1 = 1` `f2 = 1` `fn = fn-1 + fn-2` for `n > 2.` it is guaranteed that for the given constraints we can always find such fibonacci numbers that sum up to `k`.","input: k = 7 output: 2 explanation: the fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... for k = 7 we can use 2 + 5 = 7. example 2: input: k = 10 output: 2 explanation: for k = 10 we can use 2 + 8 = 10. example 3: input: k = 19 output: 3 explanation: for k = 19 we can use 1 + 5 + 13 = 19.",`1 <= k <= 10^9`,
1415,The k-th Lexicographical String of All Happy Strings of Length n,"A happy string is a string that:
consists only of letters of the set `['a', 'b', 'c']`.

`s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed).

For example, strings ""abc"", ""ac"", ""b"" and ""abcbabcbcb"" are all happy strings and strings ""aa"", ""baa"" and ""ababbc"" are not happy strings.

Given two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order.

Return the kth string of this list or return an empty string if there are less than `k` happy strings of length `n`.


Example 1:
Input: n = 1, k = 3
Output: ""c""
Explanation: The list [""a"", ""b"", ""c""] contains all happy strings of length 1. The third string is ""c"".


Example 2:
Input: n = 1, k = 4
Output: """"
Explanation: There are only 3 happy strings of length 1.


Example 3:
Input: n = 3, k = 9
Output: ""cab""
Explanation: There are 12 different happy string of length 3 [""aba"", ""abc"", ""aca"", ""acb"", ""bab"", ""bac"", ""bca"", ""bcb"", ""cab"", ""cac"", ""cba"", ""cbc""]. You will find the 9th string = ""cab""

Example 4:
Input: n = 2, k = 7
Output: """"

Example 5:
Input: n = 10, k = 100
Output: ""abacbabacb""

Constraints:
`1 <= n <= 10`
`1 <= k <= 100`",Medium,https://leetcode.com/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n,Microsoft,Backtracking,383,,"a happy string is a string that: consists only of letters of the set `['a', 'b', 'c']`. `s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed). for example, strings ""abc"", ""ac"", ""b"" and ""abcbabcbcb"" are all happy strings and strings ""aa"", ""baa"" and ""ababbc"" are not happy strings. given two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order. return the kth string of this list or return an empty string if there are less than `k` happy strings of length `n`.","input: n = 1, k = 3 output: ""c"" explanation: the list [""a"", ""b"", ""c""] contains all happy strings of length 1. the third string is ""c"". example 2: input: n = 1, k = 4 output: """" explanation: there are only 3 happy strings of length 1. example 3: input: n = 3, k = 9 output: ""cab"" explanation: there are 12 different happy string of length 3 [""aba"", ""abc"", ""aca"", ""acb"", ""bab"", ""bac"", ""bca"", ""bcb"", ""cab"", ""cac"", ""cba"", ""cbc""]. you will find the 9th string = ""cab"" example 4: input: n = 2, k = 7 output: """" example 5: input: n = 10, k = 100 output: ""abacbabacb""",`1 <= n <= 10` `1 <= k <= 10^0`,
1416,Restore The Array,"A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits and all we know is that all integers in the array were in the range `[1, k]` and there are no leading zeros in the array.

Given the string `s` and the integer `k`. There can be multiple ways to restore the array.

Return the number of possible array that can be printed as a string `s` using the mentioned program.

The number of ways could be very large so return it modulo `10^9 + 7`

Example 1:
Input: s = ""1000"", k = 10000
Output: 1
Explanation: The only possible array is [1000]

Example 2:
Input: s = ""1000"", k = 10
Output: 0
Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.


Example 3:
Input: s = ""1317"", k = 2000
Output: 8
Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]

Example 4:
Input: s = ""2020"", k = 30
Output: 1
Explanation: The only possible array is [20,20]. [2020] is invalid because 2020 > 30. [2,020] is ivalid because 020 contains leading zeros.


Example 5:
Input: s = ""1234567890"", k = 90
Output: 34

Constraints:
`1 <= s.length <= 10^5`.

`s` consists of only digits and doesn't contain leading zeros.

`1 <= k <= 10^9`.",Hard,https://leetcode.com/problems/restore-the-array,ByteDance,Dynamic Programming,226,,"a program was supposed to print an array of integers. the program forgot to print whitespaces and the array is printed as a string of digits and all we know is that all integers in the array were in the range `[1, k]` and there are no leading zeros in the array. given the string `s` and the integer `k`. there can be multiple ways to restore the array. return the number of possible array that can be printed as a string `s` using the mentioned program. the number of ways could be very large so return it modulo `10^9 + 7`","input: s = ""1000"", k = 10000 output: 1 explanation: the only possible array is [1000] example 2: input: s = ""1000"", k = 10 output: 0 explanation: there cannot be an array that was printed this way and has all integer >= 1 and <= 10. example 3: input: s = ""1317"", k = 2000 output: 8 explanation: possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7] example 4: input: s = ""2020"", k = 30 output: 1 explanation: the only possible array is [20,20]. [2020] is invalid because 2020 > 30. [2,020] is ivalid because 020 contains leading zeros. example 5: input: s = ""1234567890"", k = 90 output: 34",`1 <= s.length <= 10^5`. `s` consists of only digits and doesn't contain leading zeros. `1 <= k <= 10^9`.,
1417,Reformat The String,"Given alphanumeric string `s`. (Alphanumeric string is a string consisting of lowercase English letters and digits).

You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.

Return the reformatted string or return an empty string if it is impossible to reformat the string.


Example 1:
Input: s = ""a0b1c2""
Output: ""0a1b2c""
Explanation: No two adjacent characters have the same type in ""0a1b2c"". ""a0b1c2"", ""0a1b2c"", ""0c2a1b"" are also valid permutations.


Example 2:
Input: s = ""leetcode""
Output: """"
Explanation: ""leetcode"" has only characters so we cannot separate them by digits.


Example 3:
Input: s = ""1229857369""
Output: """"
Explanation: ""1229857369"" has only digits so we cannot separate them by characters.


Example 4:
Input: s = ""covid2019""
Output: ""c2o0v1i9d""

Example 5:
Input: s = ""ab123""
Output: ""1a2b3""

Constraints:
`1 <= s.length <= 500`
`s` consists of only lowercase English letters and/or digits.",Easy,https://leetcode.com/problems/reformat-the-string,Google,String,246,,"given alphanumeric string `s`. (alphanumeric string is a string consisting of lowercase english letters and digits). you have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. that is, no two adjacent characters have the same type. return the reformatted string or return an empty string if it is impossible to reformat the string.","input: s = ""a0b1c2"" output: ""0a1b2c"" explanation: no two adjacent characters have the same type in ""0a1b2c"". ""a0b1c2"", ""0a1b2c"", ""0c2a1b"" are also valid permutations. example 2: input: s = ""leetcode"" output: """" explanation: ""leetcode"" has only characters so we cannot separate them by digits. example 3: input: s = ""1229857369"" output: """" explanation: ""1229857369"" has only digits so we cannot separate them by characters. example 4: input: s = ""covid2019"" output: ""c2o0v1i9d"" example 5: input: s = ""ab123"" output: ""1a2b3""",`1 <= s.length <= 500` `s` consists of only lowercase english letters and/or digits.,
1418,Display Table of Food Orders in a Restaurant,"Given the array `orders`, which represents the orders that customers have done in a restaurant. More specifically `orders[i]=[customerNamei,tableNumberi,foodItemi]` where `customerNamei` is the name of the customer, `tableNumberi` is the table customer sit at, and `foodItemi` is the item customer orders.

Return the restaurant's “display table”. The “display table” is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is “Table”, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.


Example 1:
Input: orders = [[""David"",""3"",""Ceviche""],[""Corina"",""10"",""Beef Burrito""],[""David"",""3"",""Fried Chicken""],[""Carla"",""5"",""Water""],[""Carla"",""5"",""Ceviche""],[""Rous"",""3"",""Ceviche""]]
Output: [[""Table"",""Beef Burrito"",""Ceviche"",""Fried Chicken"",""Water""],[""3"",""0"",""2"",""1"",""0""],[""5"",""0"",""1"",""0"",""1""],[""10"",""1"",""0"",""0"",""0""]] 
Explanation:
The displaying table looks like:
Table,Beef Burrito,Ceviche,Fried Chicken,Water
3    ,0           ,2      ,1            ,0
5    ,0           ,1      ,0            ,1
10   ,1           ,0      ,0            ,0
For the table 3: David orders ""Ceviche"" and ""Fried Chicken"", and Rous orders ""Ceviche"".

For the table 5: Carla orders ""Water"" and ""Ceviche"".

For the table 10: Corina orders ""Beef Burrito"". 

Example 2:
Input: orders = [[""James"",""12"",""Fried Chicken""],[""Ratesh"",""12"",""Fried Chicken""],[""Amadeus"",""12"",""Fried Chicken""],[""Adam"",""1"",""Canadian Waffles""],[""Brianna"",""1"",""Canadian Waffles""]]
Output: [[""Table"",""Canadian Waffles"",""Fried Chicken""],[""1"",""2"",""0""],[""12"",""0"",""3""]] 
Explanation: 
For the table 1: Adam and Brianna order ""Canadian Waffles"".

For the table 12: James, Ratesh and Amadeus order ""Fried Chicken"".


Example 3:
Input: orders = [[""Laura"",""2"",""Bean Burrito""],[""Jhon"",""2"",""Beef Burrito""],[""Melissa"",""2"",""Soda""]]
Output: [[""Table"",""Bean Burrito"",""Beef Burrito"",""Soda""],[""2"",""1"",""1"",""1""]]

Constraints:
`1 <= orders.length <= 5 * 10^4`
`orders[i].length == 3`
`1 <= customerNamei.length, foodItemi.length <= 20`
`customerNamei` and `foodItemi` consist of lowercase and uppercase English letters and the space character.

`tableNumberi `is a valid integer between `1` and `500`.",Medium,https://leetcode.com/problems/display-table-of-food-orders-in-a-restaurant,"JP Morgan,JPMorgan",Hash Table,118,,"given the array `orders`, which represents the orders that customers have done in a restaurant. more specifically `orders[i]=[customernamei,tablenumberi,fooditemi]` where `customernamei` is the name of the customer, `tablenumberi` is the table customer sit at, and `fooditemi` is the item customer orders. return the restaurant's “display table”. the “display table” is a table whose row entries denote how many of each food item each table ordered. the first column is the table number and the remaining columns correspond to each food item in alphabetical order. the first row should be a header whose first column is “table”, followed by the names of the food items. note that the customer names are not part of the table. additionally, the rows should be sorted in numerically increasing order.","input: orders = [[""david"",""3"",""ceviche""],[""corina"",""10"",""beef burrito""],[""david"",""3"",""fried chicken""],[""carla"",""5"",""water""],[""carla"",""5"",""ceviche""],[""rous"",""3"",""ceviche""]] output: [[""table"",""beef burrito"",""ceviche"",""fried chicken"",""water""],[""3"",""0"",""2"",""1"",""0""],[""5"",""0"",""1"",""0"",""1""],[""10"",""1"",""0"",""0"",""0""]] explanation: the displaying table looks like: table,beef burrito,ceviche,fried chicken,water 3 ,0 ,2 ,1 ,0 5 ,0 ,1 ,0 ,1 10 ,1 ,0 ,0 ,0 for the table 3: david orders ""ceviche"" and ""fried chicken"", and rous orders ""ceviche"". for the table 5: carla orders ""water"" and ""ceviche"". for the table 10: corina orders ""beef burrito"". example 2: input: orders = [[""james"",""12"",""fried chicken""],[""ratesh"",""12"",""fried chicken""],[""amadeus"",""12"",""fried chicken""],[""adam"",""1"",""canadian waffles""],[""brianna"",""1"",""canadian waffles""]] output: [[""table"",""canadian waffles"",""fried chicken""],[""1"",""2"",""0""],[""12"",""0"",""3""]] explanation: for the table 1: adam and brianna order ""canadian waffles"". for the table 12: james, ratesh and amadeus order ""fried chicken"". example 3: input: orders = [[""laura"",""2"",""bean burrito""],[""jhon"",""2"",""beef burrito""],[""melissa"",""2"",""soda""]] output: [[""table"",""bean burrito"",""beef burrito"",""soda""],[""2"",""1"",""1"",""1""]]","`1 <= orders.length <= 5 * 10^4` `orders[i].length == 3` `1 <= customernamei.length, fooditemi.length <= 20` `customernamei` and `fooditemi` consist of lowercase and uppercase english letters and the space character. `tablenumberi `is a valid integer between `1` and `500`.",
1419,Minimum Number of Frogs Croaking,"Given the string `croakOfFrogs`, which represents a combination of the string ""croak"" from different frogs, that is, multiple frogs can croak at the same time, so multiple “croak” are mixed. Return the minimum number of different frogs to finish all the croak in the given string.

A valid ""croak"" means a frog is printing 5 letters ‘c’, ’r’, ’o’, ’a’, ’k’ sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of valid ""croak"" return -1.


Example 1:
Input: croakOfFrogs = ""croakcroak""
Output: 1 
Explanation: One frog yelling ""croak"" twice.


Example 2:
Input: croakOfFrogs = ""crcoakroak""
Output: 2 
Explanation: The minimum number of frogs is two. 
The first frog could yell ""crcoakroak"".

The second frog could yell later ""crcoakroak"".


Example 3:
Input: croakOfFrogs = ""croakcrook""
Output: -1
Explanation: The given string is an invalid combination of ""croak"" from different frogs.


Example 4:
Input: croakOfFrogs = ""croakcroa""
Output: -1

Constraints:
`1 <= croakOfFrogs.length <= 10^5`
All characters in the string are: `'c'`, `'r'`, `'o'`, `'a'` or `'k'`.",Medium,https://leetcode.com/problems/minimum-number-of-frogs-croaking,C3.ai,String,430,,"given the string `croakoffrogs`, which represents a combination of the string ""croak"" from different frogs, that is, multiple frogs can croak at the same time, so multiple “croak” are mixed. return the minimum number of different frogs to finish all the croak in the given string. a valid ""croak"" means a frog is printing 5 letters ‘c’, ’r’, ’o’, ’a’, ’k’ sequentially. the frogs have to print all five letters to finish a croak. if the given string is not a combination of valid ""croak"" return -1.","input: croakoffrogs = ""croakcroak"" output: 1 explanation: one frog yelling ""croak"" twice. example 2: input: croakoffrogs = ""crcoakroak"" output: 2 explanation: the minimum number of frogs is two. the first frog could yell ""crcoakroak"". the second frog could yell later ""crcoakroak"". example 3: input: croakoffrogs = ""croakcrook"" output: -1 explanation: the given string is an invalid combination of ""croak"" from different frogs. example 4: input: croakoffrogs = ""croakcroa"" output: -1","`1 <= croakoffrogs.length <= 10^5` all characters in the string are: `'c'`, `'r'`, `'o'`, `'a'` or `'k'`.",
1420,Build Array Where You Can Find The Maximum Exactly K Comparisons,"Given three integers `n`, `m` and `k`. Consider the following algorithm to find the maximum element of an array of positive integers:
You should build the array arr which has the following properties:
`arr` has exactly `n` integers.

`1 <= arr[i] <= m` where `(0 <= i < n)`.

After applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`.

Return the number of ways to build the array `arr` under the mentioned conditions. As the answer may grow large, the answer must be computed modulo `10^9 + 7`.


Example 1:
Input: n = 2, m = 3, k = 1
Output: 6
Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]

Example 2:
Input: n = 5, m = 2, k = 3
Output: 0
Explanation: There are no possible arrays that satisify the mentioned conditions.


Example 3:
Input: n = 9, m = 1, k = 1
Output: 1
Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]

Example 4:
Input: n = 50, m = 100, k = 25
Output: 34549172
Explanation: Don't forget to compute the answer modulo 1000000007

Example 5:
Input: n = 37, m = 17, k = 7
Output: 418930126

Constraints:
`1 <= n <= 50`
`1 <= m <= 100`
`0 <= k <= n`",Hard,https://leetcode.com/problems/build-array-where-you-can-find-the-maximum-exactly-k-comparisons,Dunzo,Dynamic Programming,276,,"given three integers `n`, `m` and `k`. consider the following algorithm to find the maximum element of an array of positive integers: you should build the array arr which has the following properties: `arr` has exactly `n` integers. `1 <= arr[i] <= m` where `(0 <= i < n)`. after applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`. return the number of ways to build the array `arr` under the mentioned conditions. as the answer may grow large, the answer must be computed modulo `10^9 + 7`.","input: n = 2, m = 3, k = 1 output: 6 explanation: the possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3] example 2: input: n = 5, m = 2, k = 3 output: 0 explanation: there are no possible arrays that satisify the mentioned conditions. example 3: input: n = 9, m = 1, k = 1 output: 1 explanation: the only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1] example 4: input: n = 50, m = 100, k = 25 output: 34549172 explanation: don't forget to compute the answer modulo 1000000007 example 5: input: n = 37, m = 17, k = 7 output: 418930126",`1 <= n <= 50` `1 <= m <= 10^0` `0 <= k <= n`,
1421,NPV Queries,SQL Schema,Medium,https://leetcode.com/problems/npv-queries,Amazon,,11,,sql schema,,,
1422,Maximum Score After Splitting a String,"Given a string `s` of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).

The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.


Example 1:
Input: s = ""011101""
Output: 5 
Explanation: 
All possible ways of splitting s into two non-empty substrings are:
left = ""0"" and right = ""11101"", score = 1 + 4 = 5 
left = ""01"" and right = ""1101"", score = 1 + 3 = 4 
left = ""011"" and right = ""101"", score = 1 + 2 = 3 
left = ""0111"" and right = ""01"", score = 1 + 1 = 2 
left = ""01110"" and right = ""1"", score = 2 + 1 = 3

Example 2:
Input: s = ""00111""
Output: 5
Explanation: When left = ""00"" and right = ""111"", we get the maximum score = 2 + 3 = 5

Example 3:
Input: s = ""1111""
Output: 3

Constraints:
`2 <= s.length <= 500`
The string `s` consists of characters '0' and '1' only.",Easy,https://leetcode.com/problems/maximum-score-after-splitting-a-string,Google,String,322,,"given a string `s` of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring). the score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.","input: s = ""011101"" output: 5 explanation: all possible ways of splitting s into two non-empty substrings are: left = ""0"" and right = ""11101"", score = 1 + 4 = 5 left = ""01"" and right = ""1101"", score = 1 + 3 = 4 left = ""011"" and right = ""101"", score = 1 + 2 = 3 left = ""0111"" and right = ""01"", score = 1 + 1 = 2 left = ""01110"" and right = ""1"", score = 2 + 1 = 3 example 2: input: s = ""00111"" output: 5 explanation: when left = ""00"" and right = ""111"", we get the maximum score = 2 + 3 = 5 example 3: input: s = ""1111"" output: 3",`2 <= s.length <= 500` the string `s` consists of characters '0' and '1' only.,
1423,Maximum Points You Can Obtain from Cards,"There are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array `cardPoints`.

In one step, you can take one card from the beginning or from the end of the row. You have to take exactly `k` cards.

Your score is the sum of the points of the cards you have taken.

Given the integer array `cardPoints` and the integer `k`, return the maximum score you can obtain.


Example 1:
Input: cardPoints = [1,2,3,4,5,6,1], k = 3
Output: 12
Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.


Example 2:
Input: cardPoints = [2,2,2], k = 2
Output: 4
Explanation: Regardless of which two cards you take, your score will always be 4.


Example 3:
Input: cardPoints = [9,7,7,9,7,7,9], k = 7
Output: 55
Explanation: You have to take all the cards. Your score is the sum of points of all cards.


Example 4:
Input: cardPoints = [1,1000,1], k = 1
Output: 1
Explanation: You cannot take the card in the middle. Your best score is 1. 

Example 5:
Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3
Output: 202

Constraints:
`1 <= cardPoints.length <= 10^5`
`1 <= cardPoints[i] <= 10^4`
`1 <= k <= cardPoints.length`",Medium,https://leetcode.com/problems/maximum-points-you-can-obtain-from-cards,Google,"Array,Dynamic Programming,Sliding Window",1236,,"there are several cards arranged in a row, and each card has an associated number of points the points are given in the integer array `cardpoints`. in one step, you can take one card from the beginning or from the end of the row. you have to take exactly `k` cards. your score is the sum of the points of the cards you have taken. given the integer array `cardpoints` and the integer `k`, return the maximum score you can obtain.","input: cardpoints = [1,2,3,4,5,6,1], k = 3 output: 12 explanation: after the first step, your score will always be 1. however, choosing the rightmost card first will maximize your total score. the optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12. example 2: input: cardpoints = [2,2,2], k = 2 output: 4 explanation: regardless of which two cards you take, your score will always be 4. example 3: input: cardpoints = [9,7,7,9,7,7,9], k = 7 output: 55 explanation: you have to take all the cards. your score is the sum of points of all cards. example 4: input: cardpoints = [1,1000,1], k = 1 output: 1 explanation: you cannot take the card in the middle. your best score is 1. example 5: input: cardpoints = [1,79,80,1,1,1,200,1], k = 3 output: 202",`1 <= cardpoints.length <= 10^5` `1 <= cardpoints[i] <= 10^4` `1 <= k <= cardpoints.length`,
1424,Diagonal Traverse II,"Given a list of lists of integers, `nums`, return all elements of `nums` in diagonal order as shown in the below images.


Example 1:
Input: nums = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,4,2,7,5,3,8,6,9]

Example 2:
Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]

Example 3:
Input: nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]
Output: [1,4,2,5,3,8,6,9,7,10,11]

Example 4:
Input: nums = [[1,2,3,4,5,6]]
Output: [1,2,3,4,5,6]

Constraints:
`1 <= nums.length <= 10^5`
`1 <= nums[i].length <= 10^5`
`1 <= nums[i][j] <= 10^9`
There at most `10^5` elements in `nums`.",Medium,https://leetcode.com/problems/diagonal-traverse-ii,eBay,"Array,Sort",494,,"given a list of lists of integers, `nums`, return all elements of `nums` in diagonal order as shown in the below images.","input: nums = [[1,2,3],[4,5,6],[7,8,9]] output: [1,4,2,7,5,3,8,6,9] example 2: input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]] output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16] example 3: input: nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]] output: [1,4,2,5,3,8,6,9,7,10,11] example 4: input: nums = [[1,2,3,4,5,6]] output: [1,2,3,4,5,6]",`1 <= nums.length <= 10^5` `1 <= nums[i].length <= 10^5` `1 <= nums[i][j] <= 10^9` there at most `10^5` elements in `nums`.,
1425,Constrained Subsequence Sum,"Given an integer array `nums` and an integer `k`, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied.

A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.


Example 1:
Input: nums = [10,2,-10,5,20], k = 2
Output: 37
Explanation: The subsequence is [10, 2, 5, 20].


Example 2:
Input: nums = [-1,-2,-3], k = 1
Output: -1
Explanation: The subsequence must be non-empty, so we choose the largest number.


Example 3:
Input: nums = [10,-2,-10,-5,20], k = 2
Output: 23
Explanation: The subsequence is [10, -2, -5, 20].


Constraints:
`1 <= k <= nums.length <= 105`
`-104 <= nums[i] <= 104`",Hard,https://leetcode.com/problems/constrained-subsequence-sum,Akuna Capital,Dynamic Programming,487,,"given an integer array `nums` and an integer `k`, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied. a subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.","input: nums = [10,2,-10,5,20], k = 2 output: 37 explanation: the subsequence is [10, 2, 5, 20]. example 2: input: nums = [-1,-2,-3], k = 1 output: -1 explanation: the subsequence must be non-empty, so we choose the largest number. example 3: input: nums = [10,-2,-10,-5,20], k = 2 output: 23 explanation: the subsequence is [10, -2, -5, 20].",`1 <= k <= nums.length <= 10^5` `-10^4 <= nums[i] <= 10^4`,
1426,Counting Elements,"Given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. If there are duplicates in `arr`, count them separately.


Example 1:
Input: arr = [1,2,3]
Output: 2
Explanation: 1 and 2 are counted cause 2 and 3 are in arr.


Example 2:
Input: arr = [1,1,3,3,5,5,7,7]
Output: 0
Explanation: No numbers are counted, cause there's no 2, 4, 6, or 8 in arr.


Example 3:
Input: arr = [1,3,2,3,5,0]
Output: 3
Explanation: 0, 1 and 2 are counted cause 1, 2 and 3 are in arr.


Example 4:
Input: arr = [1,1,2,2]
Output: 2
Explanation: Two 1s are counted cause 2 is in arr.


Example 5:
Input: arr = [1,1,2]
Output: 2
Explanation: Both 1s are counted because 2 is in the array.


Constraints:
`1 <= arr.length <= 1000`
`0 <= arr[i] <= 1000`",Easy,https://leetcode.com/problems/counting-elements,DRW,Array,59,,"given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. if there are duplicates in `arr`, count them separately.","input: arr = [1,2,3] output: 2 explanation: 1 and 2 are counted cause 2 and 3 are in arr. example 2: input: arr = [1,1,3,3,5,5,7,7] output: 0 explanation: no numbers are counted, cause there's no 2, 4, 6, or 8 in arr. example 3: input: arr = [1,3,2,3,5,0] output: 3 explanation: 0, 1 and 2 are counted cause 1, 2 and 3 are in arr. example 4: input: arr = [1,1,2,2] output: 2 explanation: two 1s are counted cause 2 is in arr. example 5: input: arr = [1,1,2] output: 2 explanation: both 1s are counted because 2 is in the array.",`1 <= arr.length <= 1000` `0 <= arr[i] <= 1000`,
1427,Perform String Shifts,"You are given a string `s` containing lowercase English letters, and a matrix `shift`, where `shift[i] = [direction, amount]`:
`direction` can be `0` (for left shift) or `1` (for right shift). 
`amount` is the amount by which string `s` is to be shifted.

A left shift by 1 means remove the first character of `s` and append it to the end.

Similarly, a right shift by 1 means remove the last character of `s` and add it to the beginning.

Return the final string after all operations.


Example 1:
Input: s = ""abc"", shift = [[0,1],[1,2]]
Output: ""cab""
Explanation: 
[0,1] means shift to left by 1. ""abc"" -> ""bca""
[1,2] means shift to right by 2. ""bca"" -> ""cab""

Example 2:
Input: s = ""abcdefg"", shift = [[1,1],[1,1],[0,2],[1,3]]
Output: ""efgabcd""
Explanation:  
[1,1] means shift to right by 1. ""abcdefg"" -> ""gabcdef""
[1,1] means shift to right by 1. ""gabcdef"" -> ""fgabcde""
[0,2] means shift to left by 2. ""fgabcde"" -> ""abcdefg""
[1,3] means shift to right by 3. ""abcdefg"" -> ""efgabcd""

Constraints:
`1 <= s.length <= 100`
`s` only contains lower case English letters.

`1 <= shift.length <= 100`
`shift[i].length == 2`
`0 <= shift[i][0] <= 1`
`0 <= shift[i][1] <= 100`",Easy,https://leetcode.com/problems/perform-string-shifts,Goldman Sachs,"Array,Math",79,,"you are given a string `s` containing lowercase english letters, and a matrix `shift`, where `shift[i] = [direction, amount]`: `direction` can be `0` (for left shift) or `1` (for right shift). `amount` is the amount by which string `s` is to be shifted. a left shift by 1 means remove the first character of `s` and append it to the end. similarly, a right shift by 1 means remove the last character of `s` and add it to the beginning. return the final string after all operations.","input: s = ""abc"", shift = [[0,1],[1,2]] output: ""cab"" explanation: [0,1] means shift to left by 1. ""abc"" -> ""bca"" [1,2] means shift to right by 2. ""bca"" -> ""cab"" example 2: input: s = ""abcdefg"", shift = [[1,1],[1,1],[0,2],[1,3]] output: ""efgabcd"" explanation: [1,1] means shift to right by 1. ""abcdefg"" -> ""gabcdef"" [1,1] means shift to right by 1. ""gabcdef"" -> ""fgabcde"" [0,2] means shift to left by 2. ""fgabcde"" -> ""abcdefg"" [1,3] means shift to right by 3. ""abcdefg"" -> ""efgabcd""",`1 <= s.length <= 10^0` `s` only contains lower case english letters. `1 <= shift.length <= 10^0` `shift[i].length == 2` `0 <= shift[i][0] <= 1` `0 <= shift[i][1] <= 10^0`,
1428,Leftmost Column with at Least a One,"(This problem is an interactive problem.)
A row-sorted binary matrix means that all elements are `0` or `1` and each row of the matrix is sorted in non-decreasing order.

Given a row-sorted binary matrix `binaryMatrix`, return the index (0-indexed) of the leftmost column with a 1 in it. If such an index does not exist, return `-1`.

You can't access the Binary Matrix directly. You may only access the matrix using a `BinaryMatrix` interface:
`BinaryMatrix.get(row, col)` returns the element of the matrix at index `(row, col)` (0-indexed).

`BinaryMatrix.dimensions()` returns the dimensions of the matrix as a list of 2 elements `[rows, cols]`, which means the matrix is `rows x cols`.

Submissions making more than `1000` calls to `BinaryMatrix.get` will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

For custom testing purposes, the input will be the entire binary matrix `mat`. You will not have access to the binary matrix directly.


Example 1:
Input: mat = [[0,0],[1,1]]
Output: 0

Example 2:
Input: mat = [[0,0],[0,1]]
Output: 1

Example 3:
Input: mat = [[0,0],[0,0]]
Output: -1

Example 4:
Input: mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]]
Output: 1

Constraints:
`rows == mat.length`
`cols == mat[i].length`
`1 <= rows, cols <= 100`
`mat[i][j]` is either `0` or `1`.

`mat[i]` is sorted in non-decreasing order.",Medium,https://leetcode.com/problems/leftmost-column-with-at-least-a-one,Facebook,Array,489,,"(this problem is an interactive problem.) a row-sorted binary matrix means that all elements are `0` or `1` and each row of the matrix is sorted in non-decreasing order. given a row-sorted binary matrix `binarymatrix`, return the index (0-indexed) of the leftmost column with a 1 in it. if such an index does not exist, return `-1`. you can't access the binary matrix directly. you may only access the matrix using a `binarymatrix` interface: `binarymatrix.get(row, col)` returns the element of the matrix at index `(row, col)` (0-indexed). `binarymatrix.dimensions()` returns the dimensions of the matrix as a list of 2 elements `[rows, cols]`, which means the matrix is `rows x cols`. submissions making more than `1000` calls to `binarymatrix.get` will be judged wrong answer. also, any solutions that attempt to circumvent the judge will result in disqualification. for custom testing purposes, the input will be the entire binary matrix `mat`. you will not have access to the binary matrix directly.","input: mat = [[0,0],[1,1]] output: 0 example 2: input: mat = [[0,0],[0,1]] output: 1 example 3: input: mat = [[0,0],[0,0]] output: -1 example 4: input: mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]] output: 1","`rows == mat.length` `cols == mat[i].length` `1 <= rows, cols <= 10^0` `mat[i][j]` is either `0` or `1`. `mat[i]` is sorted in non-decreasing order.",
1429,First Unique Number,"You have a queue of integers, you need to retrieve the first unique integer in the queue.

Implement the `FirstUnique` class:
`FirstUnique(int[] nums)` Initializes the object with the numbers in the queue.

`int showFirstUnique()` returns the value of the first unique integer of the queue, and returns -1 if there is no such integer.

`void add(int value)` insert value to the queue.


Example 1:
Input: 
[""FirstUnique"",""showFirstUnique"",""add"",""showFirstUnique"",""add"",""showFirstUnique"",""add"",""showFirstUnique""]
[[[2,3,5]],[],[5],[],[2],[],[3],[]]
Output: 
[null,2,null,2,null,3,null,-1]
Explanation: 
FirstUnique firstUnique = new FirstUnique([2,3,5]);
firstUnique.showFirstUnique(); // return 2
firstUnique.add(5);            // the queue is now [2,3,5,5]
firstUnique.showFirstUnique(); // return 2
firstUnique.add(2);            // the queue is now [2,3,5,5,2]
firstUnique.showFirstUnique(); // return 3
firstUnique.add(3);            // the queue is now [2,3,5,5,2,3]
firstUnique.showFirstUnique(); // return -1

Example 2:
Input: 
[""FirstUnique"",""showFirstUnique"",""add"",""add"",""add"",""add"",""add"",""showFirstUnique""]
[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]
Output: 
[null,-1,null,null,null,null,null,17]
Explanation: 
FirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);
firstUnique.showFirstUnique(); // return -1
firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]
firstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3]
firstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3,3]
firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7,3,3,7]
firstUnique.add(17);           // the queue is now [7,7,7,7,7,7,7,3,3,7,17]
firstUnique.showFirstUnique(); // return 17

Example 3:
Input: 
[""FirstUnique"",""showFirstUnique"",""add"",""showFirstUnique""]
[[[809]],[],[809],[]]
Output: 
[null,809,null,-1]
Explanation: 
FirstUnique firstUnique = new FirstUnique([809]);
firstUnique.showFirstUnique(); // return 809
firstUnique.add(809);          // the queue is now [809,809]
firstUnique.showFirstUnique(); // return -1

Constraints:
`1 <= nums.length <= 10^5`
`1 <= nums[i] <= 10^8`
`1 <= value <= 10^8`
At most `50000` calls will be made to `showFirstUnique` and `add`.",Medium,https://leetcode.com/problems/first-unique-number,"Amazon,Bloomberg,Microsoft","Hash Table,Design",225,,"you have a queue of integers, you need to retrieve the first unique integer in the queue. implement the `firstunique` class: `firstunique(int[] nums)` initializes the object with the numbers in the queue. `int showfirstunique()` returns the value of the first unique integer of the queue, and returns -1 if there is no such integer. `void add(int value)` insert value to the queue.","input: [""firstunique"",""showfirstunique"",""add"",""showfirstunique"",""add"",""showfirstunique"",""add"",""showfirstunique""] [[[2,3,5]],[],[5],[],[2],[],[3],[]] output: [null,2,null,2,null,3,null,-1] explanation: firstunique firstunique = new firstunique([2,3,5]); firstunique.showfirstunique(); // return 2 firstunique.add(5); // the queue is now [2,3,5,5] firstunique.showfirstunique(); // return 2 firstunique.add(2); // the queue is now [2,3,5,5,2] firstunique.showfirstunique(); // return 3 firstunique.add(3); // the queue is now [2,3,5,5,2,3] firstunique.showfirstunique(); // return -1 example 2: input: [""firstunique"",""showfirstunique"",""add"",""add"",""add"",""add"",""add"",""showfirstunique""] [[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]] output: [null,-1,null,null,null,null,null,17] explanation: firstunique firstunique = new firstunique([7,7,7,7,7,7]); firstunique.showfirstunique(); // return -1 firstunique.add(7); // the queue is now [7,7,7,7,7,7,7] firstunique.add(3); // the queue is now [7,7,7,7,7,7,7,3] firstunique.add(3); // the queue is now [7,7,7,7,7,7,7,3,3] firstunique.add(7); // the queue is now [7,7,7,7,7,7,7,3,3,7] firstunique.add(17); // the queue is now [7,7,7,7,7,7,7,3,3,7,17] firstunique.showfirstunique(); // return 17 example 3: input: [""firstunique"",""showfirstunique"",""add"",""showfirstunique""] [[[809]],[],[809],[]] output: [null,809,null,-1] explanation: firstunique firstunique = new firstunique([809]); firstunique.showfirstunique(); // return 809 firstunique.add(809); // the queue is now [809,809] firstunique.showfirstunique(); // return -1",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 10^8` `1 <= value <= 10^8` at most `50000` calls will be made to `showfirstunique` and `add`.,
1430,Check If a String Is a Valid Sequence from Root to Leaves Path in a Binary Tree,"Given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree. 
We get the given string from the concatenation of an array of integers `arr` and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.


Example 1:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]
Output: true
Explanation: 
The path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure). 
Other valid sequences are: 
0 -> 1 -> 1 -> 0 
0 -> 0 -> 0

Example 2:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1]
Output: false 
Explanation: The path 0 -> 0 -> 1 does not exist, therefore it is not even a sequence.


Example 3:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1]
Output: false
Explanation: The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence.


Constraints:
`1 <= arr.length <= 5000`
`0 <= arr[i] <= 9`
Each node's value is between [0 - 9].",Medium,https://leetcode.com/problems/check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree,Amazon,Tree,94,,"given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree. we get the given string from the concatenation of an array of integers `arr` and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.","input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1] output: true explanation: the path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure). other valid sequences are: 0 -> 1 -> 1 -> 0 0 -> 0 -> 0 example 2: input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1] output: false explanation: the path 0 -> 0 -> 1 does not exist, therefore it is not even a sequence. example 3: input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1] output: false explanation: the path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence.",`1 <= arr.length <= 5000` `0 <= arr[i] <= 9` each node's value is between [0 - 9].,
1431,Kids With the Greatest Number of Candies,"Given the array `candies` and the integer `extraCandies`, where `candies[i]` represents the number of candies that the ith kid has.

For each kid check if there is a way to distribute `extraCandies` among the kids such that he or she can have the greatest number of candies among them. Notice that multiple kids can have the greatest number of candies.


Example 1:
Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true] 
Explanation: 
Kid 1 has 2 candies and if he or she receives all extra candies (3) will have 5 candies --- the greatest number of candies among the kids. 
Kid 2 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. 
Kid 3 has 5 candies and this is already the greatest number of candies among the kids. 
Kid 4 has 1 candy and even if he or she receives all extra candies will only have 4 candies. 
Kid 5 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. 

Example 2:
Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false] 
Explanation: There is only 1 extra candy, therefore only kid 1 will have the greatest number of candies among the kids regardless of who takes the extra candy.


Example 3:
Input: candies = [12,1,12], extraCandies = 10
Output: [true,false,true]

Constraints:
`2 <= candies.length <= 100`
`1 <= candies[i] <= 100`
`1 <= extraCandies <= 50`",Easy,https://leetcode.com/problems/kids-with-the-greatest-number-of-candies,Adobe,Array,732,,"given the array `candies` and the integer `extracandies`, where `candies[i]` represents the number of candies that the ith kid has. for each kid check if there is a way to distribute `extracandies` among the kids such that he or she can have the greatest number of candies among them. notice that multiple kids can have the greatest number of candies.","input: candies = [2,3,5,1,3], extracandies = 3 output: [true,true,true,false,true] explanation: kid 1 has 2 candies and if he or she receives all extra candies (3) will have 5 candies --- the greatest number of candies among the kids. kid 2 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. kid 3 has 5 candies and this is already the greatest number of candies among the kids. kid 4 has 1 candy and even if he or she receives all extra candies will only have 4 candies. kid 5 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. example 2: input: candies = [4,2,1,1,2], extracandies = 1 output: [true,false,false,false,false] explanation: there is only 1 extra candy, therefore only kid 1 will have the greatest number of candies among the kids regardless of who takes the extra candy. example 3: input: candies = [12,1,12], extracandies = 10 output: [true,false,true]",`2 <= candies.length <= 10^0` `1 <= candies[i] <= 10^0` `1 <= extracandies <= 50`,
1432,Max Difference You Can Get From Changing an Integer,"You are given an integer `num`. You will apply the following steps exactly two times:
Pick a digit `x (0 <= x <= 9)`.

Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.

Replace all the occurrences of `x` in the decimal representation of `num` by `y`.

The new integer cannot have any leading zeros, also the new integer cannot be 0.

Let `a` and `b` be the results of applying the operations to `num` the first and second times, respectively.

Return the max difference between `a` and `b`.


Example 1:
Input: num = 555
Output: 888
Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.

The second time pick x = 5 and y = 1 and store the new integer in b.

We have now a = 999 and b = 111 and max difference = 888

Example 2:
Input: num = 9
Output: 8
Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.

The second time pick x = 9 and y = 1 and store the new integer in b.

We have now a = 9 and b = 1 and max difference = 8

Example 3:
Input: num = 123456
Output: 820000

Example 4:
Input: num = 10000
Output: 80000

Example 5:
Input: num = 9288
Output: 8700

Constraints:
`1 <= num <= 10^8`",Medium,https://leetcode.com/problems/max-difference-you-can-get-from-changing-an-integer,Mercari,String,103,,"you are given an integer `num`. you will apply the following steps exactly two times: pick a digit `x (0 <= x <= 9)`. pick another digit `y (0 <= y <= 9)`. the digit `y` can be equal to `x`. replace all the occurrences of `x` in the decimal representation of `num` by `y`. the new integer cannot have any leading zeros, also the new integer cannot be 0. let `a` and `b` be the results of applying the operations to `num` the first and second times, respectively. return the max difference between `a` and `b`.",input: num = 555 output: 888 explanation: the first time pick x = 5 and y = 9 and store the new integer in a. the second time pick x = 5 and y = 1 and store the new integer in b. we have now a = 999 and b = 111 and max difference = 888 example 2: input: num = 9 output: 8 explanation: the first time pick x = 9 and y = 9 and store the new integer in a. the second time pick x = 9 and y = 1 and store the new integer in b. we have now a = 9 and b = 1 and max difference = 8 example 3: input: num = 123456 output: 820000 example 4: input: num = 10000 output: 80000 example 5: input: num = 9288 output: 8700,`1 <= num <= 10^8`,
1433,Check If a String Can Break Another String,"Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words `s2` can break `s1` or vice-versa.

A string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.


Example 1:
Input: s1 = ""abc"", s2 = ""xya""
Output: true
Explanation: ""ayx"" is a permutation of s2=""xya"" which can break to string ""abc"" which is a permutation of s1=""abc"".


Example 2:
Input: s1 = ""abe"", s2 = ""acd""
Output: false 
Explanation: All permutations for s1=""abe"" are: ""abe"", ""aeb"", ""bae"", ""bea"", ""eab"" and ""eba"" and all permutation for s2=""acd"" are: ""acd"", ""adc"", ""cad"", ""cda"", ""dac"" and ""dca"". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.


Example 3:
Input: s1 = ""leetcodee"", s2 = ""interview""
Output: true

Constraints:
`s1.length == n`
`s2.length == n`
`1 <= n <= 10^5`
All strings consist of lowercase English letters.",Medium,https://leetcode.com/problems/check-if-a-string-can-break-another-string,endurance,"String,Greedy",282,,"given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. in other words `s2` can break `s1` or vice-versa. a string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.","input: s1 = ""abc"", s2 = ""xya"" output: true explanation: ""ayx"" is a permutation of s2=""xya"" which can break to string ""abc"" which is a permutation of s1=""abc"". example 2: input: s1 = ""abe"", s2 = ""acd"" output: false explanation: all permutations for s1=""abe"" are: ""abe"", ""aeb"", ""bae"", ""bea"", ""eab"" and ""eba"" and all permutation for s2=""acd"" are: ""acd"", ""adc"", ""cad"", ""cda"", ""dac"" and ""dca"". however, there is not any permutation from s1 which can break some permutation from s2 and vice-versa. example 3: input: s1 = ""leetcodee"", s2 = ""interview"" output: true",`s1.length == n` `s2.length == n` `1 <= n <= 10^5` all strings consist of lowercase english letters.,
1434,Number of Ways to Wear Different Hats to Each Other,"There are `n` people and 40 types of hats labeled from 1 to 40.

Given a list of list of integers `hats`, where `hats[i]` is a list of all hats preferred by the i-th` person.

Return the number of ways that the n people wear different hats to each other.

Since the answer may be too large, return it modulo `10^9 + 7`.


Example 1:
Input: hats = [[3,4],[4,5],[5]]
Output: 1
Explanation: There is only one way to choose hats given the conditions. 
First person choose hat 3, Second person choose hat 4 and last one hat 5.


Example 2:
Input: hats = [[3,5,1],[3,5]]
Output: 4
Explanation: There are 4 ways to choose hats
(3,5), (5,3), (1,3) and (1,5)

Example 3:
Input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
Output: 24
Explanation: Each person can choose hats labeled from 1 to 4.

Number of Permutations of (1,2,3,4) = 24.


Example 4:
Input: hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]
Output: 111

Constraints:
`n == hats.length`
`1 <= n <= 10`
`1 <= hats[i].length <= 40`
`1 <= hats[i][j] <= 40`
`hats[i]` contains a list of unique integers.",Hard,https://leetcode.com/problems/number-of-ways-to-wear-different-hats-to-each-other,MindTickle,"Dynamic Programming,Bit Manipulation",384,,"there are `n` people and 40 types of hats labeled from 1 to 40. given a list of list of integers `hats`, where `hats[i]` is a list of all hats preferred by the i-th` person. return the number of ways that the n people wear different hats to each other. since the answer may be too large, return it modulo `10^9 + 7`.","input: hats = [[3,4],[4,5],[5]] output: 1 explanation: there is only one way to choose hats given the conditions. first person choose hat 3, second person choose hat 4 and last one hat 5. example 2: input: hats = [[3,5,1],[3,5]] output: 4 explanation: there are 4 ways to choose hats (3,5), (5,3), (1,3) and (1,5) example 3: input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]] output: 24 explanation: each person can choose hats labeled from 1 to 4. number of permutations of (1,2,3,4) = 24. example 4: input: hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]] output: 111",`n == hats.length` `1 <= n <= 10` `1 <= hats[i].length <= 40` `1 <= hats[i][j] <= 40` `hats[i]` contains a list of unique integers.,
1435,Create a Session Bar Chart,SQL Schema,Easy,https://leetcode.com/problems/create-a-session-bar-chart,Twitch,,63,,sql schema,,,
1436,Destination City,"You are given the array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. Return the destination city, that is, the city without any path outgoing to another city.

It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.


Example 1:
Input: paths = [[""London"",""New York""],[""New York"",""Lima""],[""Lima"",""Sao Paulo""]]
Output: ""Sao Paulo"" 
Explanation: Starting at ""London"" city you will reach ""Sao Paulo"" city which is the destination city. Your trip consist of: ""London"" -> ""New York"" -> ""Lima"" -> ""Sao Paulo"".


Example 2:
Input: paths = [[""B"",""C""],[""D"",""B""],[""C"",""A""]]
Output: ""A""
Explanation: All possible trips are: 
""D"" -> ""B"" -> ""C"" -> ""A"". 
""B"" -> ""C"" -> ""A"". 
""C"" -> ""A"". 
""A"". 
Clearly the destination city is ""A"".


Example 3:
Input: paths = [[""A"",""Z""]]
Output: ""Z""

Constraints:
`1 <= paths.length <= 100`
`paths[i].length == 2`
`1 <= cityAi.length, cityBi.length <= 10`
`cityAi != cityBi`
All strings consist of lowercase and uppercase English letters and the space character.",Easy,https://leetcode.com/problems/destination-city,Yelp,String,563,,"you are given the array `paths`, where `paths[i] = [cityai, citybi]` means there exists a direct path going from `cityai` to `citybi`. return the destination city, that is, the city without any path outgoing to another city. it is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.","input: paths = [[""london"",""new york""],[""new york"",""lima""],[""lima"",""sao paulo""]] output: ""sao paulo"" explanation: starting at ""london"" city you will reach ""sao paulo"" city which is the destination city. your trip consist of: ""london"" -> ""new york"" -> ""lima"" -> ""sao paulo"". example 2: input: paths = [[""b"",""c""],[""d"",""b""],[""c"",""a""]] output: ""a"" explanation: all possible trips are: ""d"" -> ""b"" -> ""c"" -> ""a"". ""b"" -> ""c"" -> ""a"". ""c"" -> ""a"". ""a"". clearly the destination city is ""a"". example 3: input: paths = [[""a"",""z""]] output: ""z""","`1 <= paths.length <= 10^0` `paths[i].length == 2` `1 <= cityai.length, citybi.length <= 10` `cityai != citybi` all strings consist of lowercase and uppercase english letters and the space character.",
1437,Check If All 1's Are at Least Length K Places Away,"Given an array `nums` of 0s and 1s and an integer `k`, return `True` if all 1's are at least `k` places away from each other, otherwise return `False`.


Example 1:
Input: nums = [1,0,0,0,1,0,0,1], k = 2
Output: true
Explanation: Each of the 1s are at least 2 places away from each other.


Example 2:
Input: nums = [1,0,0,1,0,1], k = 2
Output: false
Explanation: The second 1 and third 1 are only one apart from each other.


Example 3:
Input: nums = [1,1,1,1,1], k = 0
Output: true

Example 4:
Input: nums = [0,1,0,1], k = 1
Output: true

Constraints:
`1 <= nums.length <= 105`
`0 <= k <= nums.length`
`nums[i]` is `0` or `1`",Easy,https://leetcode.com/problems/check-if-all-1s-are-at-least-length-k-places-away,United Health Group,Array,263,,"given an array `nums` of 0s and 1s and an integer `k`, return `true` if all 1's are at least `k` places away from each other, otherwise return `false`.","input: nums = [1,0,0,0,1,0,0,1], k = 2 output: true explanation: each of the 1s are at least 2 places away from each other. example 2: input: nums = [1,0,0,1,0,1], k = 2 output: false explanation: the second 1 and third 1 are only one apart from each other. example 3: input: nums = [1,1,1,1,1], k = 0 output: true example 4: input: nums = [0,1,0,1], k = 1 output: true",`1 <= nums.length <= 10^5` `0 <= k <= nums.length` `nums[i]` is `0` or `1`,
1438,Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit,"Given an array of integers `nums` and an integer `limit`, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to `limit`.


Example 1:
Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.

[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.

[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.

[2] with maximum absolute diff |2-2| = 0 <= 4.

[2,4] with maximum absolute diff |2-4| = 2 <= 4.

[2,4,7] with maximum absolute diff |2-7| = 5 > 4.

[4] with maximum absolute diff |4-4| = 0 <= 4.

[4,7] with maximum absolute diff |4-7| = 3 <= 4.

[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.


Example 2:
Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.


Example 3:
Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3

Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 109`
`0 <= limit <= 109`",Medium,https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit,Google,"Array,Sliding Window",1258,,"given an array of integers `nums` and an integer `limit`, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to `limit`.","input: nums = [8,2,4,7], limit = 4 output: 2 explanation: all subarrays are: [8] with maximum absolute diff |8-8| = 0 <= 4. [8,2] with maximum absolute diff |8-2| = 6 > 4. [8,2,4] with maximum absolute diff |8-2| = 6 > 4. [8,2,4,7] with maximum absolute diff |8-2| = 6 > 4. [2] with maximum absolute diff |2-2| = 0 <= 4. [2,4] with maximum absolute diff |2-4| = 2 <= 4. [2,4,7] with maximum absolute diff |2-7| = 5 > 4. [4] with maximum absolute diff |4-4| = 0 <= 4. [4,7] with maximum absolute diff |4-7| = 3 <= 4. [7] with maximum absolute diff |7-7| = 0 <= 4. therefore, the size of the longest subarray is 2. example 2: input: nums = [10,1,2,4,7,2], limit = 5 output: 4 explanation: the subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5. example 3: input: nums = [4,2,2,2,4,4,2,2], limit = 0 output: 3",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 10^9` `0 <= limit <= 10^9`,
1439,Find the Kth Smallest Sum of a Matrix With Sorted Rows,"You are given an `m * n` matrix, `mat`, and an integer `k`, which has its rows sorted in non-decreasing order.

You are allowed to choose exactly 1 element from each row to form an array. Return the Kth smallest array sum among all possible arrays.


Example 1:
Input: mat = [[1,3,11],[2,4,6]], k = 5
Output: 7
Explanation: Choosing one element from each row, the first k smallest sum are:
[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.  

Example 2:
Input: mat = [[1,3,11],[2,4,6]], k = 9
Output: 17

Example 3:
Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7
Output: 9
Explanation: Choosing one element from each row, the first k smallest sum are:
[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.  

Example 4:
Input: mat = [[1,1,10],[2,2,9]], k = 7
Output: 12

Constraints:
`m == mat.length`
`n == mat.length[i]`
`1 <= m, n <= 40`
`1 <= k <= min(200, n ^ m)`
`1 <= mat[i][j] <= 5000`
`mat[i]` is a non decreasing array.",Hard,https://leetcode.com/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows,Facebook,Heap,485,,"you are given an `m * n` matrix, `mat`, and an integer `k`, which has its rows sorted in non-decreasing order. you are allowed to choose exactly 1 element from each row to form an array. return the kth smallest array sum among all possible arrays.","input: mat = [[1,3,11],[2,4,6]], k = 5 output: 7 explanation: choosing one element from each row, the first k smallest sum are: [1,2], [1,4], [3,2], [3,4], [1,6]. where the 5th sum is 7. example 2: input: mat = [[1,3,11],[2,4,6]], k = 9 output: 17 example 3: input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7 output: 9 explanation: choosing one element from each row, the first k smallest sum are: [1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. where the 7th sum is 9. example 4: input: mat = [[1,1,10],[2,2,9]], k = 7 output: 12","`m == mat.length` `n == mat.length[i]` `1 <= m, n <= 40` `1 <= k <= min(200, n ^ m)` `1 <= mat[i][j] <= 5000` `mat[i]` is a non decreasing array.",
1440,Evaluate Boolean Expression,SQL Schema,Medium,https://leetcode.com/problems/evaluate-boolean-expression,Point72,,70,,sql schema,,,
1441,Build an Array With Stack Operations,"Given an array `target` and an integer `n`. In each iteration, you will read a number from  `list = {1,2,3..., n}`.

Build the `target` array using the following operations:
Push: Read a new element from the beginning `list`, and push it in the array.

Pop: delete the last element of the array.

If the target array is already built, stop reading more elements.

Return the operations to build the target array. You are guaranteed that the answer is unique.


Example 1:
Input: target = [1,3], n = 3
Output: [""Push"",""Push"",""Pop"",""Push""]
Explanation: 
Read number 1 and automatically push in the array -> [1]
Read number 2 and automatically push in the array then Pop it -> [1]
Read number 3 and automatically push in the array -> [1,3]

Example 2:
Input: target = [1,2,3], n = 3
Output: [""Push"",""Push"",""Push""]

Example 3:
Input: target = [1,2], n = 4
Output: [""Push"",""Push""]
Explanation: You only need to read the first 2 numbers and stop.


Example 4:
Input: target = [2,3,4], n = 4
Output: [""Push"",""Pop"",""Push"",""Push"",""Push""]

Constraints:
`1 <= target.length <= 100`
`1 <= target[i] <= n`
`1 <= n <= 100`
`target` is strictly increasing.",Easy,https://leetcode.com/problems/build-an-array-with-stack-operations,Google,Stack,260,,"given an array `target` and an integer `n`. in each iteration, you will read a number from `list = {1,2,3..., n}`. build the `target` array using the following operations: push: read a new element from the beginning `list`, and push it in the array. pop: delete the last element of the array. if the target array is already built, stop reading more elements. return the operations to build the target array. you are guaranteed that the answer is unique.","input: target = [1,3], n = 3 output: [""push"",""push"",""pop"",""push""] explanation: read number 1 and automatically push in the array -> [1] read number 2 and automatically push in the array then pop it -> [1] read number 3 and automatically push in the array -> [1,3] example 2: input: target = [1,2,3], n = 3 output: [""push"",""push"",""push""] example 3: input: target = [1,2], n = 4 output: [""push"",""push""] explanation: you only need to read the first 2 numbers and stop. example 4: input: target = [2,3,4], n = 4 output: [""push"",""pop"",""push"",""push"",""push""]",`1 <= target.length <= 10^0` `1 <= target[i] <= n` `1 <= n <= 10^0` `target` is strictly increasing.,
1442,Count Triplets That Can Form Two Arrays of Equal XOR,"Given an array of integers `arr`.

We want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`.

Let's define `a` and `b` as follows:
`a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]`
`b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`
Note that ^ denotes the bitwise-xor operation.

Return the number of triplets (`i`, `j` and `k`) Where `a == b`.


Example 1:
Input: arr = [2,3,1,6,7]
Output: 4
Explanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)

Example 2:
Input: arr = [1,1,1,1,1]
Output: 10

Example 3:
Input: arr = [2,3]
Output: 0

Example 4:
Input: arr = [1,3,5,7,9]
Output: 3

Example 5:
Input: arr = [7,11,12,9,5,2,7,17,22]
Output: 8

Constraints:
`1 <= arr.length <= 300`
`1 <= arr[i] <= 10^8`",Medium,https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor,,,508,,"given an array of integers `arr`. we want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k < arr.length)`. let's define `a` and `b` as follows: `a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]` `b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]` note that ^ denotes the bitwise-xor operation. return the number of triplets (`i`, `j` and `k`) where `a == b`.","input: arr = [2,3,1,6,7] output: 4 explanation: the triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4) example 2: input: arr = [1,1,1,1,1] output: 10 example 3: input: arr = [2,3] output: 0 example 4: input: arr = [1,3,5,7,9] output: 3 example 5: input: arr = [7,11,12,9,5,2,7,17,22] output: 8",`1 <= arr.length <= 300` `1 <= arr[i] <= 10^8`,
1443,Minimum Time to Collect All Apples in a Tree,"Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.


Example 1:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]
Output: 8 
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  

Example 2:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]
Output: 6
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  

Example 3:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]
Output: 0

Constraints:
`1 <= n <= 10^5`
`edges.length == n - 1`
`edges[i].length == 2`
`0 <= ai < bi <= n - 1`
`fromi < toi`
`hasApple.length == n`",Medium,https://leetcode.com/problems/minimum-time-to-collect-all-apples-in-a-tree,Facebook,"Tree,Depth-first Search",553,,"given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. you spend 1 second to walk over one edge of the tree. return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex. the edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. additionally, there is a boolean array `hasapple`, where `hasapple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.","input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasapple = [false,false,true,false,true,true,false] output: 8 explanation: the figure above represents the given tree where red vertices have an apple. one optimal path to collect all apples is shown by the green arrows. example 2: input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasapple = [false,false,true,false,false,true,false] output: 6 explanation: the figure above represents the given tree where red vertices have an apple. one optimal path to collect all apples is shown by the green arrows. example 3: input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasapple = [false,false,false,false,false,false,false] output: 0",`1 <= n <= 10^5` `edges.length == n - 1` `edges[i].length == 2` `0 <= ai < bi <= n - 1` `fromi < toi` `hasapple.length == n`,
1444,Number of Ways of Cutting a Pizza,"Given a rectangular pizza represented as a `rows x cols` matrix containing the following characters: `'A'` (an apple) and `'.'` (empty cell) and given the integer `k`. You have to cut the pizza into `k` pieces using `k-1` cuts. 
For each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.

Return the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.


Example 1:
Input: pizza = [""A.."",""AAA"",""...""], k = 3
Output: 3 
Explanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.


Example 2:
Input: pizza = [""A.."",""AA."",""...""], k = 3
Output: 1

Example 3:
Input: pizza = [""A.."",""A.."",""...""], k = 1
Output: 1

Constraints:
`1 <= rows, cols <= 50`
`rows == pizza.length`
`cols == pizza[i].length`
`1 <= k <= 10`
`pizza` consists of characters `'A'` and `'.'` only.",Hard,https://leetcode.com/problems/number-of-ways-of-cutting-a-pizza,Google,Dynamic Programming,302,,"given a rectangular pizza represented as a `rows x cols` matrix containing the following characters: `'a'` (an apple) and `'.'` (empty cell) and given the integer `k`. you have to cut the pizza into `k` pieces using `k-1` cuts. for each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. if you cut the pizza vertically, give the left part of the pizza to a person. if you cut the pizza horizontally, give the upper part of the pizza to a person. give the last piece of pizza to the last person. return the number of ways of cutting the pizza such that each piece contains at least one apple. since the answer can be a huge number, return this modulo 10^9 + 7.","input: pizza = [""a.."",""aaa"",""...""], k = 3 output: 3 explanation: the figure above shows the three ways to cut the pizza. note that pieces must contain at least one apple. example 2: input: pizza = [""a.."",""aa."",""...""], k = 3 output: 1 example 3: input: pizza = [""a.."",""a.."",""...""], k = 1 output: 1","`1 <= rows, cols <= 50` `rows == pizza.length` `cols == pizza[i].length` `1 <= k <= 10` `pizza` consists of characters `'a'` and `'.'` only.",
1445,Apples & Oranges,SQL Schema,Medium,https://leetcode.com/problems/apples-oranges,Facebook,,64,,sql schema,,,
1446,Consecutive Characters,"Given a string `s`, the power of the string is the maximum length of a non-empty substring that contains only one unique character.

Return the power of the string.


Example 1:
Input: s = ""leetcode""
Output: 2
Explanation: The substring ""ee"" is of length 2 with the character 'e' only.


Example 2:
Input: s = ""abbcccddddeeeeedcba""
Output: 5
Explanation: The substring ""eeeee"" is of length 5 with the character 'e' only.


Example 3:
Input: s = ""triplepillooooow""
Output: 5

Example 4:
Input: s = ""hooraaaaaaaaaaay""
Output: 11

Example 5:
Input: s = ""tourist""
Output: 1

Constraints:
`1 <= s.length <= 500`
`s` contains only lowercase English letters.",Easy,https://leetcode.com/problems/consecutive-characters,Microsoft,String,509,"[Max Consecutive Ones, /problems/max-consecutive-ones/, Easy], [Count Number of Homogenous Substrings, /problems/count-number-of-homogenous-substrings/, Medium]","given a string `s`, the power of the string is the maximum length of a non-empty substring that contains only one unique character. return the power of the string.","input: s = ""leetcode"" output: 2 explanation: the substring ""ee"" is of length 2 with the character 'e' only. example 2: input: s = ""abbcccddddeeeeedcba"" output: 5 explanation: the substring ""eeeee"" is of length 5 with the character 'e' only. example 3: input: s = ""triplepillooooow"" output: 5 example 4: input: s = ""hooraaaaaaaaaaay"" output: 11 example 5: input: s = ""tourist"" output: 1",`1 <= s.length <= 500` `s` contains only lowercase english letters.,
1447,Simplified Fractions,"Given an integer `n`, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to `n`. The fractions can be in any order.


Example 1:
Input: n = 2
Output: [""1/2""]
Explanation: ""1/2"" is the only unique fraction with a denominator less-than-or-equal-to 2.


Example 2:
Input: n = 3
Output: [""1/2"",""1/3"",""2/3""]

Example 3:
Input: n = 4
Output: [""1/2"",""1/3"",""1/4"",""2/3"",""3/4""]
Explanation: ""2/4"" is not a simplified fraction because it can be simplified to ""1/2"".


Example 4:
Input: n = 1
Output: []

Constraints:
`1 <= n <= 100`",Medium,https://leetcode.com/problems/simplified-fractions,Google,Math,143,,"given an integer `n`, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to `n`. the fractions can be in any order.","input: n = 2 output: [""1/2""] explanation: ""1/2"" is the only unique fraction with a denominator less-than-or-equal-to 2. example 2: input: n = 3 output: [""1/2"",""1/3"",""2/3""] example 3: input: n = 4 output: [""1/2"",""1/3"",""1/4"",""2/3"",""3/4""] explanation: ""2/4"" is not a simplified fraction because it can be simplified to ""1/2"". example 4: input: n = 1 output: []",`1 <= n <= 10^0`,
1448,Count Good Nodes in Binary Tree,"Given a binary tree `root`, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.


Example 1:
Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.

Root Node (3) is always a good node.

Node 4 -> (3,4) is the maximum value in the path starting from the root.

Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.


Example 2:
Input: root = [3,3,null,4,2]
Output: 3
Explanation: Node 2 -> (3, 3, 2) is not good, because ""3"" is higher than it.


Example 3:
Input: root = [1]
Output: 1
Explanation: Root is considered as good.


Constraints:
The number of nodes in the binary tree is in the range `[1, 10^5]`.

Each node's value is between `[-10^4, 10^4]`.",Medium,https://leetcode.com/problems/count-good-nodes-in-binary-tree,"Microsoft,Amazon","Tree,Depth-first Search",639,,"given a binary tree `root`, a node x in the tree is named good if in the path from root to x there are no nodes with a value greater than x. return the number of good nodes in the binary tree.","input: root = [3,1,4,3,null,1,5] output: 4 explanation: nodes in blue are good. root node (3) is always a good node. node 4 -> (3,4) is the maximum value in the path starting from the root. node 5 -> (3,4,5) is the maximum value in the path node 3 -> (3,1,3) is the maximum value in the path. example 2: input: root = [3,3,null,4,2] output: 3 explanation: node 2 -> (3, 3, 2) is not good, because ""3"" is higher than it. example 3: input: root = [1] output: 1 explanation: root is considered as good.","the number of nodes in the binary tree is in the range `[1, 10^5]`. each node's value is between `[-10^4, 10^4]`.",
1449,Form Largest Integer With Digits That Add up to Target,"Given an array of integers `cost` and an integer `target`. Return the maximum integer you can paint under the following rules:
The cost of painting a digit (i+1) is given by `cost[i]` (0 indexed).

The total cost used must be equal to `target`.

Integer does not have digits 0.

Since the answer may be too large, return it as string.

If there is no way to paint any integer given the condition, return ""0"".


Example 1:
Input: cost = [4,3,2,5,6,7,2,5,5], target = 9
Output: ""7772""
Explanation:  The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(""7772"") = 2*3+ 3*1 = 9. You could also paint ""977"", but ""7772"" is the largest number.

Digit    cost
  1  ->   4
  2  ->   3
  3  ->   2
  4  ->   5
  5  ->   6
  6  ->   7
  7  ->   2
  8  ->   5
  9  ->   5

Example 2:
Input: cost = [7,6,5,5,5,6,8,7,8], target = 12
Output: ""85""
Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(""85"") = 7 + 5 = 12.


Example 3:
Input: cost = [2,4,6,2,4,6,4,4,4], target = 5
Output: ""0""
Explanation: It's not possible to paint any integer with total cost equal to target.


Example 4:
Input: cost = [6,10,15,40,40,40,40,40,40], target = 47
Output: ""32211""

Constraints:
`cost.length == 9`
`1 <= cost[i] <= 5000`
`1 <= target <= 5000`",Hard,https://leetcode.com/problems/form-largest-integer-with-digits-that-add-up-to-target,Google,"String,Dynamic Programming",332,,"given an array of integers `cost` and an integer `target`. return the maximum integer you can paint under the following rules: the cost of painting a digit (i+1) is given by `cost[i]` (0 indexed). the total cost used must be equal to `target`. integer does not have digits 0. since the answer may be too large, return it as string. if there is no way to paint any integer given the condition, return ""0"".","input: cost = [4,3,2,5,6,7,2,5,5], target = 9 output: ""7772"" explanation: the cost to paint the digit '7' is 2, and the digit '2' is 3. then cost(""7772"") = 2*3+ 3*1 = 9. you could also paint ""977"", but ""7772"" is the largest number. digit cost 1 -> 4 2 -> 3 3 -> 2 4 -> 5 5 -> 6 6 -> 7 7 -> 2 8 -> 5 9 -> 5 example 2: input: cost = [7,6,5,5,5,6,8,7,8], target = 12 output: ""85"" explanation: the cost to paint the digit '8' is 7, and the digit '5' is 5. then cost(""85"") = 7 + 5 = 12. example 3: input: cost = [2,4,6,2,4,6,4,4,4], target = 5 output: ""0"" explanation: it's not possible to paint any integer with total cost equal to target. example 4: input: cost = [6,10,15,40,40,40,40,40,40], target = 47 output: ""32211""",`cost.length == 9` `1 <= cost[i] <= 5000` `1 <= target <= 5000`,
1450,Number of Students Doing Homework at a Given Time,"Given two integer arrays `startTime` and `endTime` and given an integer `queryTime`.

The `ith` student started doing their homework at the time `startTime[i]` and finished it at time `endTime[i]`.

Return the number of students doing their homework at time `queryTime`. More formally, return the number of students where `queryTime` lays in the interval `[startTime[i], endTime[i]]` inclusive.


Example 1:
Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4
Output: 1
Explanation: We have 3 students where:
The first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.

The second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.

The third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.


Example 2:
Input: startTime = [4], endTime = [4], queryTime = 4
Output: 1
Explanation: The only student was doing their homework at the queryTime.


Example 3:
Input: startTime = [4], endTime = [4], queryTime = 5
Output: 0

Example 4:
Input: startTime = [1,1,1,1], endTime = [1,3,2,4], queryTime = 7
Output: 0

Example 5:
Input: startTime = [9,8,7,6,5,4,3,2,1], endTime = [10,10,10,10,10,10,10,10,10], queryTime = 5
Output: 5

Constraints:
`startTime.length == endTime.length`
`1 <= startTime.length <= 100`
`1 <= startTime[i] <= endTime[i] <= 1000`
`1 <= queryTime <= 1000`",Easy,https://leetcode.com/problems/number-of-students-doing-homework-at-a-given-time,,,356,,"given two integer arrays `starttime` and `endtime` and given an integer `querytime`. the `ith` student started doing their homework at the time `starttime[i]` and finished it at time `endtime[i]`. return the number of students doing their homework at time `querytime`. more formally, return the number of students where `querytime` lays in the interval `[starttime[i], endtime[i]]` inclusive.","input: starttime = [1,2,3], endtime = [3,2,7], querytime = 4 output: 1 explanation: we have 3 students where: the first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4. the second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4. the third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4. example 2: input: starttime = [4], endtime = [4], querytime = 4 output: 1 explanation: the only student was doing their homework at the querytime. example 3: input: starttime = [4], endtime = [4], querytime = 5 output: 0 example 4: input: starttime = [1,1,1,1], endtime = [1,3,2,4], querytime = 7 output: 0 example 5: input: starttime = [9,8,7,6,5,4,3,2,1], endtime = [10,10,10,10,10,10,10,10,10], querytime = 5 output: 5",`starttime.length == endtime.length` `1 <= starttime.length <= 10^0` `1 <= starttime[i] <= endtime[i] <= 1000` `1 <= querytime <= 1000`,
1451,Rearrange Words in a Sentence,"Given a sentence `text` (A sentence is a string of space-separated words) in the following format:
First letter is in upper case.

Each word in `text` are separated by a single space.

Your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.

Return the new text following the format shown above.


Example 1:
Input: text = ""Leetcode is cool""
Output: ""Is cool leetcode""
Explanation: There are 3 words, ""Leetcode"" of length 8, ""is"" of length 2 and ""cool"" of length 4.

Output is ordered by length and the new first word starts with capital letter.

Example 2:
Input: text = ""Keep calm and code on""
Output: ""On and keep calm code""
Explanation: Output is ordered as follows:
""On"" 2 letters.

""and"" 3 letters.

""keep"" 4 letters in case of tie order by position in original text.

""calm"" 4 letters.

""code"" 4 letters.


Example 3:
Input: text = ""To be or not to be""
Output: ""To be or to be not""

Constraints:
`text` begins with a capital letter and then contains lowercase letters and single space between words.

`1 <= text.length <= 10^5`",Medium,https://leetcode.com/problems/rearrange-words-in-a-sentence,"Amazon,VMware","String,Sort",274,,"given a sentence `text` (a sentence is a string of space-separated words) in the following format: first letter is in upper case. each word in `text` are separated by a single space. your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. if two words have the same length, arrange them in their original order. return the new text following the format shown above.","input: text = ""leetcode is cool"" output: ""is cool leetcode"" explanation: there are 3 words, ""leetcode"" of length 8, ""is"" of length 2 and ""cool"" of length 4. output is ordered by length and the new first word starts with capital letter. example 2: input: text = ""keep calm and code on"" output: ""on and keep calm code"" explanation: output is ordered as follows: ""on"" 2 letters. ""and"" 3 letters. ""keep"" 4 letters in case of tie order by position in original text. ""calm"" 4 letters. ""code"" 4 letters. example 3: input: text = ""to be or not to be"" output: ""to be or to be not""",`text` begins with a capital letter and then contains lowercase letters and single space between words. `1 <= text.length <= 10^5`,
1452,People Whose List of Favorite Companies Is Not a Subset of Another List,"Given the array `favoriteCompanies` where `favoriteCompanies[i]` is the list of favorites companies for the `ith` person (indexed from 0).

Return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.


Example 1:
Input: favoriteCompanies = [[""leetcode"",""google"",""facebook""],[""google"",""microsoft""],[""google"",""facebook""],[""google""],[""amazon""]]
Output: [0,1,4] 
Explanation: 
Person with index=2 has favoriteCompanies[2]=[""google"",""facebook""] which is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""] corresponding to the person with index 0. 
Person with index=3 has favoriteCompanies[3]=[""google""] which is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""] and favoriteCompanies[1]=[""google"",""microsoft""]. 
Other lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].


Example 2:
Input: favoriteCompanies = [[""leetcode"",""google"",""facebook""],[""leetcode"",""amazon""],[""facebook"",""google""]]
Output: [0,1] 
Explanation: In this case favoriteCompanies[2]=[""facebook"",""google""] is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""], therefore, the answer is [0,1].


Example 3:
Input: favoriteCompanies = [[""leetcode""],[""google""],[""facebook""],[""amazon""]]
Output: [0,1,2,3]

Constraints:
`1 <= favoriteCompanies.length <= 100`
`1 <= favoriteCompanies[i].length <= 500`
`1 <= favoriteCompanies[i][j].length <= 20`
All strings in `favoriteCompanies[i]` are distinct.

All lists of favorite companies are distinct, that is, If we sort alphabetically each list then `favoriteCompanies[i] != favoriteCompanies[j].`
All strings consist of lowercase English letters only.",Medium,https://leetcode.com/problems/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list,Google,"String,Sort",163,,given the array `favoritecompanies` where `favoritecompanies[i]` is the list of favorites companies for the `ith` person (indexed from 0). return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. you must return the indices in increasing order.,"input: favoritecompanies = [[""leetcode"",""google"",""facebook""],[""google"",""microsoft""],[""google"",""facebook""],[""google""],[""amazon""]] output: [0,1,4] explanation: person with index=2 has favoritecompanies[2]=[""google"",""facebook""] which is a subset of favoritecompanies[0]=[""leetcode"",""google"",""facebook""] corresponding to the person with index 0. person with index=3 has favoritecompanies[3]=[""google""] which is a subset of favoritecompanies[0]=[""leetcode"",""google"",""facebook""] and favoritecompanies[1]=[""google"",""microsoft""]. other lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4]. example 2: input: favoritecompanies = [[""leetcode"",""google"",""facebook""],[""leetcode"",""amazon""],[""facebook"",""google""]] output: [0,1] explanation: in this case favoritecompanies[2]=[""facebook"",""google""] is a subset of favoritecompanies[0]=[""leetcode"",""google"",""facebook""], therefore, the answer is [0,1]. example 3: input: favoritecompanies = [[""leetcode""],[""google""],[""facebook""],[""amazon""]] output: [0,1,2,3]","`1 <= favoritecompanies.length <= 10^0` `1 <= favoritecompanies[i].length <= 500` `1 <= favoritecompanies[i][j].length <= 20` all strings in `favoritecompanies[i]` are distinct. all lists of favorite companies are distinct, that is, if we sort alphabetically each list then `favoritecompanies[i] != favoritecompanies[j].` all strings consist of lowercase english letters only.",
1453,Maximum Number of Darts Inside of a Circular Dartboard,"You have a very large square wall and a circular dartboard placed on the wall. You have been challenged to throw darts into the board blindfolded. Darts thrown at the wall are represented as an array of `points` on a 2D plane. 
Return the maximum number of points that are within or lie on any circular dartboard of radius `r`.


Example 1:
Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2
Output: 4
Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.


Example 2:
Input: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5
Output: 5
Explanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).


Example 3:
Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1
Output: 1

Example 4:
Input: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2
Output: 4

Constraints:
`1 <= points.length <= 100`
`points[i].length == 2`
`-10^4 <= points[i][0], points[i][1] <= 10^4`
`1 <= r <= 5000`",Hard,https://leetcode.com/problems/maximum-number-of-darts-inside-of-a-circular-dartboard,Facebook,Geometry,86,,you have a very large square wall and a circular dartboard placed on the wall. you have been challenged to throw darts into the board blindfolded. darts thrown at the wall are represented as an array of `points` on a 2d plane. return the maximum number of points that are within or lie on any circular dartboard of radius `r`.,"input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2 output: 4 explanation: circle dartboard with center in (0,0) and radius = 2 contain all points. example 2: input: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5 output: 5 explanation: circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8). example 3: input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1 output: 1 example 4: input: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2 output: 4","`1 <= points.length <= 10^0` `points[i].length == 2` `-10^4 <= points[i][0], points[i][1] <= 10^4` `1 <= r <= 5000`",
1454,Active Users,SQL Schema,Medium,https://leetcode.com/problems/active-users,Amazon,,162,,sql schema,,,
1455,Check If a Word Occurs As a Prefix of Any Word in a Sentence,"Given a `sentence` that consists of some words separated by a single space, and a `searchWord`.

You have to check if `searchWord` is a prefix of any word in `sentence`.

Return the index of the word in `sentence` where `searchWord` is a prefix of this word (1-indexed).

If `searchWord` is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.

A prefix of a string `S` is any leading contiguous substring of `S`.


Example 1:
Input: sentence = ""i love eating burger"", searchWord = ""burg""
Output: 4
Explanation: ""burg"" is prefix of ""burger"" which is the 4th word in the sentence.


Example 2:
Input: sentence = ""this problem is an easy problem"", searchWord = ""pro""
Output: 2
Explanation: ""pro"" is prefix of ""problem"" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.


Example 3:
Input: sentence = ""i am tired"", searchWord = ""you""
Output: -1
Explanation: ""you"" is not a prefix of any word in the sentence.


Example 4:
Input: sentence = ""i use triple pillow"", searchWord = ""pill""
Output: 4

Example 5:
Input: sentence = ""hello from the other side"", searchWord = ""they""
Output: -1

Constraints:
`1 <= sentence.length <= 100`
`1 <= searchWord.length <= 10`
`sentence` consists of lowercase English letters and spaces.

`searchWord` consists of lowercase English letters.",Easy,https://leetcode.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence,Yelp,String,289,,"given a `sentence` that consists of some words separated by a single space, and a `searchword`. you have to check if `searchword` is a prefix of any word in `sentence`. return the index of the word in `sentence` where `searchword` is a prefix of this word (1-indexed). if `searchword` is a prefix of more than one word, return the index of the first word (minimum index). if there is no such word return -1. a prefix of a string `s` is any leading contiguous substring of `s`.","input: sentence = ""i love eating burger"", searchword = ""burg"" output: 4 explanation: ""burg"" is prefix of ""burger"" which is the 4th word in the sentence. example 2: input: sentence = ""this problem is an easy problem"", searchword = ""pro"" output: 2 explanation: ""pro"" is prefix of ""problem"" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index. example 3: input: sentence = ""i am tired"", searchword = ""you"" output: -1 explanation: ""you"" is not a prefix of any word in the sentence. example 4: input: sentence = ""i use triple pillow"", searchword = ""pill"" output: 4 example 5: input: sentence = ""hello from the other side"", searchword = ""they"" output: -1",`1 <= sentence.length <= 10^0` `1 <= searchword.length <= 10` `sentence` consists of lowercase english letters and spaces. `searchword` consists of lowercase english letters.,
1456,Maximum Number of Vowels in a Substring of Given Length,"Given a string `s` and an integer `k`.

Return the maximum number of vowel letters in any substring of `s` with length `k`.

Vowel letters in English are (a, e, i, o, u).


Example 1:
Input: s = ""abciiidef"", k = 3
Output: 3
Explanation: The substring ""iii"" contains 3 vowel letters.


Example 2:
Input: s = ""aeiou"", k = 2
Output: 2
Explanation: Any substring of length 2 contains 2 vowels.


Example 3:
Input: s = ""leetcode"", k = 3
Output: 2
Explanation: ""lee"", ""eet"" and ""ode"" contain 2 vowels.


Example 4:
Input: s = ""rhythms"", k = 4
Output: 0
Explanation: We can see that s doesn't have any vowel letters.


Example 5:
Input: s = ""tryhard"", k = 4
Output: 1

Constraints:
`1 <= s.length <= 10^5`
`s` consists of lowercase English letters.

`1 <= k <= s.length`",Medium,https://leetcode.com/problems/maximum-number-of-vowels-in-a-substring-of-given-length,Amazon,"String,Sliding Window",386,,"given a string `s` and an integer `k`. return the maximum number of vowel letters in any substring of `s` with length `k`. vowel letters in english are (a, e, i, o, u).","input: s = ""abciiidef"", k = 3 output: 3 explanation: the substring ""iii"" contains 3 vowel letters. example 2: input: s = ""aeiou"", k = 2 output: 2 explanation: any substring of length 2 contains 2 vowels. example 3: input: s = ""leetcode"", k = 3 output: 2 explanation: ""lee"", ""eet"" and ""ode"" contain 2 vowels. example 4: input: s = ""rhythms"", k = 4 output: 0 explanation: we can see that s doesn't have any vowel letters. example 5: input: s = ""tryhard"", k = 4 output: 1",`1 <= s.length <= 10^5` `s` consists of lowercase english letters. `1 <= k <= s.length`,
1457,Pseudo-Palindromic Paths in a Binary Tree,"Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.


Example 1:
Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).


Example 2:
Input: root = [2,1,1,1,3,null,null,null,null,null,1]
Output: 1 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).


Example 3:
Input: root = [9]
Output: 1

Constraints:
The number of nodes in the tree is in the range `[1, 105]`.

`1 <= Node.val <= 9`",Medium,https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree,Amazon,"Bit Manipulation,Tree,Depth-first Search",644,,given a binary tree where node values are digits from 1 to 9. a path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome. return the number of pseudo-palindromic paths going from the root node to leaf nodes.,"input: root = [2,3,1,3,1,null,1] output: 2 explanation: the figure above represents the given binary tree. there are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome). example 2: input: root = [2,1,1,1,3,null,null,null,null,null,1] output: 1 explanation: the figure above represents the given binary tree. there are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome). example 3: input: root = [9] output: 1","the number of nodes in the tree is in the range `[1, 10^5]`. `1 <= node.val <= 9`",
1458,Max Dot Product of Two Subsequences,"Given two arrays `nums1` and `nums2`.

Return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.

A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, `[2,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,5,3]` is not).


Example 1:
Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]
Output: 18
Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.

Their dot product is (2*3 + (-2)*(-6)) = 18.


Example 2:
Input: nums1 = [3,-2], nums2 = [2,-6,7]
Output: 21
Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.

Their dot product is (3*7) = 21.


Example 3:
Input: nums1 = [-1,-1], nums2 = [1,1]
Output: -1
Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.

Their dot product is -1.


Constraints:
`1 <= nums1.length, nums2.length <= 500`
`-1000 <= nums1[i], nums2[i] <= 1000`",Hard,https://leetcode.com/problems/max-dot-product-of-two-subsequences,Microsoft,Dynamic Programming,410,,"given two arrays `nums1` and `nums2`. return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length. a subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, `[2,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,5,3]` is not).","input: nums1 = [2,1,-2,5], nums2 = [3,0,-6] output: 18 explanation: take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2. their dot product is (2*3 + (-2)*(-6)) = 18. example 2: input: nums1 = [3,-2], nums2 = [2,-6,7] output: 21 explanation: take subsequence [3] from nums1 and subsequence [7] from nums2. their dot product is (3*7) = 21. example 3: input: nums1 = [-1,-1], nums2 = [1,1] output: -1 explanation: take subsequence [-1] from nums1 and subsequence [1] from nums2. their dot product is -1.","`1 <= nums1.length, nums2.length <= 500` `-1000 <= nums1[i], nums2[i] <= 1000`",
1459,Rectangles Area,SQL Schema,Medium,https://leetcode.com/problems/rectangles-area,Twitter,,31,,sql schema,,,
1460,Make Two Arrays Equal by Reversing Sub-arrays,"Given two integer arrays of equal length `target` and `arr`.

In one step, you can select any non-empty sub-array of `arr` and reverse it. You are allowed to make any number of steps.

Return True if you can make `arr` equal to `target`, or False otherwise.


Example 1:
Input: target = [1,2,3,4], arr = [2,4,1,3]
Output: true
Explanation: You can follow the next steps to convert arr to target:
1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]
2- Reverse sub-array [4,2], arr becomes [1,2,4,3]
3- Reverse sub-array [4,3], arr becomes [1,2,3,4]
There are multiple ways to convert arr to target, this is not the only way to do so.


Example 2:
Input: target = [7], arr = [7]
Output: true
Explanation: arr is equal to target without any reverses.


Example 3:
Input: target = [1,12], arr = [12,1]
Output: true

Example 4:
Input: target = [3,7,9], arr = [3,7,11]
Output: false
Explanation: arr doesn't have value 9 and it can never be converted to target.


Example 5:
Input: target = [1,1,1,1,1], arr = [1,1,1,1,1]
Output: true

Constraints:
`target.length == arr.length`
`1 <= target.length <= 1000`
`1 <= target[i] <= 1000`
`1 <= arr[i] <= 1000`",Easy,https://leetcode.com/problems/make-two-arrays-equal-by-reversing-sub-arrays,Facebook,Array,359,,"given two integer arrays of equal length `target` and `arr`. in one step, you can select any non-empty sub-array of `arr` and reverse it. you are allowed to make any number of steps. return true if you can make `arr` equal to `target`, or false otherwise.","input: target = [1,2,3,4], arr = [2,4,1,3] output: true explanation: you can follow the next steps to convert arr to target: 1- reverse sub-array [2,4,1], arr becomes [1,4,2,3] 2- reverse sub-array [4,2], arr becomes [1,2,4,3] 3- reverse sub-array [4,3], arr becomes [1,2,3,4] there are multiple ways to convert arr to target, this is not the only way to do so. example 2: input: target = [7], arr = [7] output: true explanation: arr is equal to target without any reverses. example 3: input: target = [1,12], arr = [12,1] output: true example 4: input: target = [3,7,9], arr = [3,7,11] output: false explanation: arr doesn't have value 9 and it can never be converted to target. example 5: input: target = [1,1,1,1,1], arr = [1,1,1,1,1] output: true",`target.length == arr.length` `1 <= target.length <= 1000` `1 <= target[i] <= 1000` `1 <= arr[i] <= 1000`,
1461,Check If a String Contains All Binary Codes of Size K,"Given a binary string `s` and an integer `k`.

Return `true` if every binary code of length `k` is a substring of `s`. Otherwise, return `false`.


Example 1:
Input: s = ""00110110"", k = 2
Output: true
Explanation: The binary codes of length 2 are ""00"", ""01"", ""10"" and ""11"". They can be all found as substrings at indicies 0, 1, 3 and 2 respectively.


Example 2:
Input: s = ""00110"", k = 2
Output: true

Example 3:
Input: s = ""0110"", k = 1
Output: true
Explanation: The binary codes of length 1 are ""0"" and ""1"", it is clear that both exist as a substring. 

Example 4:
Input: s = ""0110"", k = 2
Output: false
Explanation: The binary code ""00"" is of length 2 and doesn't exist in the array.


Example 5:
Input: s = ""0000000001011100"", k = 4
Output: false

Constraints:
`1 <= s.length <= 5 * 105`
`s[i]` is either `'0'` or `'1'`.

`1 <= k <= 20`",Medium,https://leetcode.com/problems/check-if-a-string-contains-all-binary-codes-of-size-k,Google,"String,Bit Manipulation",518,,"given a binary string `s` and an integer `k`. return `true` if every binary code of length `k` is a substring of `s`. otherwise, return `false`.","input: s = ""00110110"", k = 2 output: true explanation: the binary codes of length 2 are ""00"", ""01"", ""10"" and ""11"". they can be all found as substrings at indicies 0, 1, 3 and 2 respectively. example 2: input: s = ""00110"", k = 2 output: true example 3: input: s = ""0110"", k = 1 output: true explanation: the binary codes of length 1 are ""0"" and ""1"", it is clear that both exist as a substring. example 4: input: s = ""0110"", k = 2 output: false explanation: the binary code ""00"" is of length 2 and doesn't exist in the array. example 5: input: s = ""0000000001011100"", k = 4 output: false",`1 <= s.length <= 5 * 10^5` `s[i]` is either `'0'` or `'1'`. `1 <= k <= 20`,
1462,Course Schedule IV,"There are a total of `n` courses you have to take, labeled from `0` to `n-1`.

Some courses may have direct prerequisites, for example, to take course 0 you have first to take course 1, which is expressed as a pair: `[1,0]`
Given the total number of courses `n`, a list of direct `prerequisite` pairs and a list of `queries` pairs.

You should answer for each `queries[i]` whether the course `queries[i][0]` is a prerequisite of the course `queries[i][1]` or not.

Return a list of boolean, the answers to the given `queries`.

Please note that if course a is a prerequisite of course b and course b is a prerequisite of course c, then, course a is a prerequisite of course c.


Example 1:
Input: n = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]
Output: [false,true]
Explanation: course 0 is not a prerequisite of course 1 but the opposite is true.


Example 2:
Input: n = 2, prerequisites = [], queries = [[1,0],[0,1]]
Output: [false,false]
Explanation: There are no prerequisites and each course is independent.


Example 3:
Input: n = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]
Output: [true,true]

Example 4:
Input: n = 3, prerequisites = [[1,0],[2,0]], queries = [[0,1],[2,0]]
Output: [false,true]

Example 5:
Input: n = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[3,0]]
Output: [true,false,true,false]

Constraints:
`2 <= n <= 100`
`0 <= prerequisite.length <= (n * (n - 1) / 2)`
`0 <= prerequisite[i][0], prerequisite[i][1] < n`
`prerequisite[i][0] != prerequisite[i][1]`
The prerequisites graph has no cycles.

The prerequisites graph has no repeated edges.

`1 <= queries.length <= 10^4`
`queries[i][0] != queries[i][1]`",Medium,https://leetcode.com/problems/course-schedule-iv,Amazon,Graph,360,,"there are a total of `n` courses you have to take, labeled from `0` to `n-1`. some courses may have direct prerequisites, for example, to take course 0 you have first to take course 1, which is expressed as a pair: `[1,0]` given the total number of courses `n`, a list of direct `prerequisite` pairs and a list of `queries` pairs. you should answer for each `queries[i]` whether the course `queries[i][0]` is a prerequisite of the course `queries[i][1]` or not. return a list of boolean, the answers to the given `queries`. please note that if course a is a prerequisite of course b and course b is a prerequisite of course c, then, course a is a prerequisite of course c.","input: n = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]] output: [false,true] explanation: course 0 is not a prerequisite of course 1 but the opposite is true. example 2: input: n = 2, prerequisites = [], queries = [[1,0],[0,1]] output: [false,false] explanation: there are no prerequisites and each course is independent. example 3: input: n = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]] output: [true,true] example 4: input: n = 3, prerequisites = [[1,0],[2,0]], queries = [[0,1],[2,0]] output: [false,true] example 5: input: n = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[3,0]] output: [true,false,true,false]","`2 <= n <= 10^0` `0 <= prerequisite.length <= (n * (n - 1) / 2)` `0 <= prerequisite[i][0], prerequisite[i][1] < n` `prerequisite[i][0] != prerequisite[i][1]` the prerequisites graph has no cycles. the prerequisites graph has no repeated edges. `1 <= queries.length <= 10^4` `queries[i][0] != queries[i][1]`",
1463,Cherry Pickup II,"Given a `rows x cols` matrix `grid` representing a field of cherries. Each cell in `grid` represents the number of cherries that you can collect.

You have two robots that can collect cherries for you, Robot #1 is located at the top-left corner (0,0) , and Robot #2 is located at the top-right corner (0, cols-1) of the grid.

Return the maximum number of cherries collection using both robots  by following the rules below:
From a cell (i,j), robots can move to cell (i+1, j-1) , (i+1, j) or (i+1, j+1).

When any robot is passing through a cell, It picks it up all cherries, and the cell becomes an empty cell (0).

When both robots stay on the same cell, only one of them takes the cherries.

Both robots cannot move outside of the grid at any moment.

Both robots should reach the bottom row in the `grid`.


Example 1:
Input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]
Output: 24
Explanation: Path of robot #1 and #2 are described in color green and blue respectively.

Cherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.

Cherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.

Total of cherries: 12 + 12 = 24.


Example 2:
Input: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]
Output: 28
Explanation: Path of robot #1 and #2 are described in color green and blue respectively.

Cherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.

Cherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.

Total of cherries: 17 + 11 = 28.


Example 3:
Input: grid = [[1,0,0,3],[0,0,0,3],[0,0,3,3],[9,0,3,3]]
Output: 22

Example 4:
Input: grid = [[1,1],[1,1]]
Output: 4

Constraints:
`rows == grid.length`
`cols == grid[i].length`
`2 <= rows, cols <= 70`
`0 <= grid[i][j] <= 100 `",Hard,https://leetcode.com/problems/cherry-pickup-ii,Google,Dynamic Programming,742,,"given a `rows x cols` matrix `grid` representing a field of cherries. each cell in `grid` represents the number of cherries that you can collect. you have two robots that can collect cherries for you, robot #1 is located at the top-left corner (0,0) , and robot #2 is located at the top-right corner (0, cols-1) of the grid. return the maximum number of cherries collection using both robots by following the rules below: from a cell (i,j), robots can move to cell (i+1, j-1) , (i+1, j) or (i+1, j+1). when any robot is passing through a cell, it picks it up all cherries, and the cell becomes an empty cell (0). when both robots stay on the same cell, only one of them takes the cherries. both robots cannot move outside of the grid at any moment. both robots should reach the bottom row in the `grid`.","input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]] output: 24 explanation: path of robot #1 and #2 are described in color green and blue respectively. cherries taken by robot #1, (3 + 2 + 5 + 2) = 12. cherries taken by robot #2, (1 + 5 + 5 + 1) = 12. total of cherries: 12 + 12 = 24. example 2: input: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]] output: 28 explanation: path of robot #1 and #2 are described in color green and blue respectively. cherries taken by robot #1, (1 + 9 + 5 + 2) = 17. cherries taken by robot #2, (1 + 3 + 4 + 3) = 11. total of cherries: 17 + 11 = 28. example 3: input: grid = [[1,0,0,3],[0,0,0,3],[0,0,3,3],[9,0,3,3]] output: 22 example 4: input: grid = [[1,1],[1,1]] output: 4","`rows == grid.length` `cols == grid[i].length` `2 <= rows, cols <= 70` `0 <= grid[i][j] <= 10^0 `",
1464,Maximum Product of Two Elements in an Array,"Given the array of integers `nums`, you will choose two different indices `i` and `j` of that array. Return the maximum value of `(nums[i]-1)*(nums[j]-1)`.


Example 1:
Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 

Example 2:
Input: nums = [1,5,4,5]
Output: 16
Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.


Example 3:
Input: nums = [3,7]
Output: 12

Constraints:
`2 <= nums.length <= 500`
`1 <= nums[i] <= 10^3`",Easy,https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array,Samsung,Array,403,,"given the array of integers `nums`, you will choose two different indices `i` and `j` of that array. return the maximum value of `(nums[i]-1)*(nums[j]-1)`.","input: nums = [3,4,5,2] output: 12 explanation: if you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. example 2: input: nums = [1,5,4,5] output: 16 explanation: choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16. example 3: input: nums = [3,7] output: 12",`2 <= nums.length <= 500` `1 <= nums[i] <= 10^3`,
1465,Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts,"Given a rectangular cake with height `h` and width `w`, and two arrays of integers `horizontalCuts` and `verticalCuts` where `horizontalCuts[i]` is the distance from the top of the rectangular cake to the `ith` horizontal cut and similarly, `verticalCuts[j]` is the distance from the left of the rectangular cake to the `jth` vertical cut.

Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays `horizontalCuts` and `verticalCuts`. Since the answer can be a huge number, return this modulo 10^9 + 7.


Example 1:
Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
Output: 4 
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.


Example 2:
Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
Output: 6
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.


Example 3:
Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
Output: 9

Constraints:
`2 <= h, w <= 10^9`
`1 <= horizontalCuts.length < min(h, 10^5)`
`1 <= verticalCuts.length < min(w, 10^5)`
`1 <= horizontalCuts[i] < h`
`1 <= verticalCuts[i] < w`
It is guaranteed that all elements in `horizontalCuts` are distinct.

It is guaranteed that all elements in `verticalCuts` are distinct.",Medium,https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts,"Amazon,Expedia,Roblox",Array,284,,"given a rectangular cake with height `h` and width `w`, and two arrays of integers `horizontalcuts` and `verticalcuts` where `horizontalcuts[i]` is the distance from the top of the rectangular cake to the `ith` horizontal cut and similarly, `verticalcuts[j]` is the distance from the left of the rectangular cake to the `jth` vertical cut. return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays `horizontalcuts` and `verticalcuts`. since the answer can be a huge number, return this modulo 10^9 + 7.","input: h = 5, w = 4, horizontalcuts = [1,2,4], verticalcuts = [1,3] output: 4 explanation: the figure above represents the given rectangular cake. red lines are the horizontal and vertical cuts. after you cut the cake, the green piece of cake has the maximum area. example 2: input: h = 5, w = 4, horizontalcuts = [3,1], verticalcuts = [1] output: 6 explanation: the figure above represents the given rectangular cake. red lines are the horizontal and vertical cuts. after you cut the cake, the green and yellow pieces of cake have the maximum area. example 3: input: h = 5, w = 4, horizontalcuts = [3], verticalcuts = [3] output: 9","`2 <= h, w <= 10^9` `1 <= horizontalcuts.length < min(h, 10^5)` `1 <= verticalcuts.length < min(w, 10^5)` `1 <= horizontalcuts[i] < h` `1 <= verticalcuts[i] < w` it is guaranteed that all elements in `horizontalcuts` are distinct. it is guaranteed that all elements in `verticalcuts` are distinct.",
1466,Reorder Routes to Make All Paths Lead to the City Zero,"There are `n` cities numbered from `0` to `n-1` and `n-1` roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.

Roads are represented by `connections` where `connections[i] = [a, b]` represents a road from city `a` to `b`.

This year, there will be a big event in the capital (city 0), and many people want to travel to this city.

Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.

It's guaranteed that each city can reach the city 0 after reorder.


Example 1:
Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
Output: 3
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).


Example 2:
Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]
Output: 2
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).


Example 3:
Input: n = 3, connections = [[1,0],[2,0]]
Output: 0

Constraints:
`2 <= n <= 5 * 10^4`
`connections.length == n-1`
`connections[i].length == 2`
`0 <= connections[i][0], connections[i][1] <= n-1`
`connections[i][0] != connections[i][1]`",Medium,https://leetcode.com/problems/reorder-routes-to-make-all-paths-lead-to-the-city-zero,Microsoft,"Tree,Depth-first Search",621,,"there are `n` cities numbered from `0` to `n-1` and `n-1` roads such that there is only one way to travel between two different cities (this network form a tree). last year, the ministry of transport decided to orient the roads in one direction because they are too narrow. roads are represented by `connections` where `connections[i] = [a, b]` represents a road from city `a` to `b`. this year, there will be a big event in the capital (city 0), and many people want to travel to this city. your task consists of reorienting some roads such that each city can visit the city 0. return the minimum number of edges changed. it's guaranteed that each city can reach the city 0 after reorder.","input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]] output: 3 explanation: change the direction of edges show in red such that each node can reach the node 0 (capital). example 2: input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]] output: 2 explanation: change the direction of edges show in red such that each node can reach the node 0 (capital). example 3: input: n = 3, connections = [[1,0],[2,0]] output: 0","`2 <= n <= 5 * 10^4` `connections.length == n-1` `connections[i].length == 2` `0 <= connections[i][0], connections[i][1] <= n-1` `connections[i][0] != connections[i][1]`",
1467,Probability of a Two Boxes Having The Same Number of Distinct Balls,"Given `2n` balls of `k` distinct colors. You will be given an integer array `balls` of size `k` where `balls[i]` is the number of balls of color `i`. 
All the balls will be shuffled uniformly at random, then we will distribute the first `n` balls to the first box and the remaining `n` balls to the other box (Please read the explanation of the second example carefully).

Please note that the two boxes are considered different. For example, if we have two balls of colors `a` and `b`, and two boxes `[]` and `()`, then the distribution `[a] (b)` is considered different than the distribution `[b] (a) `(Please read the explanation of the first example carefully).

We want to calculate the probability that the two boxes have the same number of distinct balls.


Example 1:
Input: balls = [1,1]
Output: 1.00000
Explanation: Only 2 ways to divide the balls equally:
- A ball of color 1 to box 1 and a ball of color 2 to box 2
- A ball of color 2 to box 1 and a ball of color 1 to box 2
In both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1

Example 2:
Input: balls = [2,1,1]
Output: 0.66667
Explanation: We have the set of balls [1, 1, 2, 3]
This set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equale probability (i.e. 1/12):
[1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]
After that we add the first two balls to the first box and the second two balls to the second box.

We can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.

Probability is 8/12 = 0.66667

Example 3:
Input: balls = [1,2,1,2]
Output: 0.60000
Explanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.

Probability = 108 / 180 = 0.6

Example 4:
Input: balls = [3,2,1]
Output: 0.30000
Explanation: The set of balls is [1, 1, 1, 2, 2, 3]. It is hard to display all the 60 possible random shuffles of this set but it is easy to check that 18 of them will have the same number of distinct colors in each box.

Probability = 18 / 60 = 0.3

Example 5:
Input: balls = [6,6,6,6,6,6]
Output: 0.90327

Constraints:
`1 <= balls.length <= 8`
`1 <= balls[i] <= 6`
`sum(balls)` is even.

Answers within `10^-5` of the actual value will be accepted as correct.",Hard,https://leetcode.com/problems/probability-of-a-two-boxes-having-the-same-number-of-distinct-balls,,,156,,"given `2n` balls of `k` distinct colors. you will be given an integer array `balls` of size `k` where `balls[i]` is the number of balls of color `i`. all the balls will be shuffled uniformly at random, then we will distribute the first `n` balls to the first box and the remaining `n` balls to the other box (please read the explanation of the second example carefully). please note that the two boxes are considered different. for example, if we have two balls of colors `a` and `b`, and two boxes `[]` and `()`, then the distribution `[a] (b)` is considered different than the distribution `[b] (a) `(please read the explanation of the first example carefully). we want to calculate the probability that the two boxes have the same number of distinct balls.","input: balls = [1,1] output: 1.00000 explanation: only 2 ways to divide the balls equally: - a ball of color 1 to box 1 and a ball of color 2 to box 2 - a ball of color 2 to box 1 and a ball of color 1 to box 2 in both ways, the number of distinct colors in each box is equal. the probability is 2/2 = 1 example 2: input: balls = [2,1,1] output: 0.66667 explanation: we have the set of balls [1, 1, 2, 3] this set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equale probability (i.e. 1/12): [1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1] after that we add the first two balls to the first box and the second two balls to the second box. we can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box. probability is 8/12 = 0.66667 example 3: input: balls = [1,2,1,2] output: 0.60000 explanation: the set of balls is [1, 2, 2, 3, 4, 4]. it is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box. probability = 108 / 180 = 0.6 example 4: input: balls = [3,2,1] output: 0.30000 explanation: the set of balls is [1, 1, 1, 2, 2, 3]. it is hard to display all the 60 possible random shuffles of this set but it is easy to check that 18 of them will have the same number of distinct colors in each box. probability = 18 / 60 = 0.3 example 5: input: balls = [6,6,6,6,6,6] output: 0.90327",`1 <= balls.length <= 8` `1 <= balls[i] <= 6` `sum(balls)` is even. answers within `10^-5` of the actual value will be accepted as correct.,
1468,Calculate Salaries,SQL Schema,Medium,https://leetcode.com/problems/calculate-salaries,Startup,,44,,sql schema,,,
1469,Find All The Lonely Nodes,"In a binary tree, a lonely node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node.

Given the `root` of a binary tree, return an array containing the values of all lonely nodes in the tree. Return the list in any order.


Example 1:
Input: root = [1,2,3,null,4]
Output: [4]
Explanation: Light blue node is the only lonely node.

Node 1 is the root and is not lonely.

Nodes 2 and 3 have the same parent and are not lonely.


Example 2:
Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2]
Output: [6,2]
Explanation: Light blue nodes are lonely nodes.

Please remember that order doesn't matter, [2,6] is also an acceptable answer.


Example 3:
Input: root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]
Output: [77,55,33,66,44,22]
Explanation: Nodes 99 and 88 share the same parent. Node 11 is the root.

All other nodes are lonely.


Example 4:
Input: root = [197]
Output: []

Example 5:
Input: root = [31,null,78,null,28]
Output: [78,28]

Constraints:
The number of nodes in the `tree` is in the range `[1, 1000].`
Each node's value is between `[1, 10^6]`.",Easy,https://leetcode.com/problems/find-all-the-lonely-nodes,Microsoft,"Tree,Depth-first Search",223,"[Binary Tree Tilt, /problems/binary-tree-tilt/, Easy], [Univalued Binary Tree, /problems/univalued-binary-tree/, Easy]","in a binary tree, a lonely node is a node that is the only child of its parent node. the root of the tree is not lonely because it does not have a parent node. given the `root` of a binary tree, return an array containing the values of all lonely nodes in the tree. return the list in any order.","input: root = [1,2,3,null,4] output: [4] explanation: light blue node is the only lonely node. node 1 is the root and is not lonely. nodes 2 and 3 have the same parent and are not lonely. example 2: input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2] output: [6,2] explanation: light blue nodes are lonely nodes. please remember that order doesn't matter, [2,6] is also an acceptable answer. example 3: input: root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22] output: [77,55,33,66,44,22] explanation: nodes 99 and 88 share the same parent. node 11 is the root. all other nodes are lonely. example 4: input: root = [197] output: [] example 5: input: root = [31,null,78,null,28] output: [78,28]","the number of nodes in the `tree` is in the range `[1, 1000].` each node's value is between `[1, 10^6]`.",
1470,Shuffle the Array,"Given the array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`.

Return the array in the form `[x1,y1,x2,y2,...,xn,yn]`.


Example 1:
Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].


Example 2:
Input: nums = [1,2,3,4,4,3,2,1], n = 4
Output: [1,4,2,3,3,2,4,1]

Example 3:
Input: nums = [1,1,2,2], n = 2
Output: [1,2,1,2]

Constraints:
`1 <= n <= 500`
`nums.length == 2n`
`1 <= nums[i] <= 10^3`",Easy,https://leetcode.com/problems/shuffle-the-array,"Apple,Bloomberg",Array,1080,,"given the array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`. return the array in the form `[x1,y1,x2,y2,...,xn,yn]`.","input: nums = [2,5,1,3,4,7], n = 3 output: [2,3,5,4,1,7] explanation: since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7]. example 2: input: nums = [1,2,3,4,4,3,2,1], n = 4 output: [1,4,2,3,3,2,4,1] example 3: input: nums = [1,1,2,2], n = 2 output: [1,2,1,2]",`1 <= n <= 500` `nums.length == 2n` `1 <= nums[i] <= 10^3`,
1471,The k Strongest Values in an Array,"Given an array of integers `arr` and an integer `k`.

A value `arr[i]` is said to be stronger than a value `arr[j]` if `|arr[i] - m| > |arr[j] - m|` where `m` is the median of the array.

If `|arr[i] - m| == |arr[j] - m|`, then `arr[i]` is said to be stronger than `arr[j]` if `arr[i] > arr[j]`.

Return a list of the strongest `k` values in the array. return the answer in any arbitrary order.

Median is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position `((n - 1) / 2)` in the sorted list (0-indexed).

For `arr = [6, -3, 7, 2, 11]`, `n = 5` and the median is obtained by sorting the array `arr = [-3, 2, 6, 7, 11]` and the median is `arr[m]` where `m = ((5 - 1) / 2) = 2`. The median is `6`.

For `arr = [-7, 22, 17, 3]`, `n = 4` and the median is obtained by sorting the array `arr = [-7, 3, 17, 22]` and the median is `arr[m]` where `m = ((4 - 1) / 2) = 1`. The median is `3`.


Example 1:
Input: arr = [1,2,3,4,5], k = 2
Output: [5,1]
Explanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.

Please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.


Example 2:
Input: arr = [1,1,3,5,5], k = 2
Output: [5,5]
Explanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].


Example 3:
Input: arr = [6,7,11,7,6,8], k = 5
Output: [11,8,6,6,7]
Explanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].

Any permutation of [11,8,6,6,7] is accepted.


Example 4:
Input: arr = [6,-3,7,2,11], k = 3
Output: [-3,11,2]

Example 5:
Input: arr = [-7,22,17,3], k = 2
Output: [22,17]

Constraints:
`1 <= arr.length <= 10^5`
`-10^5 <= arr[i] <= 10^5`
`1 <= k <= arr.length`",Medium,https://leetcode.com/problems/the-k-strongest-values-in-an-array,Google,"Array,Sort",240,,"given an array of integers `arr` and an integer `k`. a value `arr[i]` is said to be stronger than a value `arr[j]` if `|arr[i] - m| > |arr[j] - m|` where `m` is the median of the array. if `|arr[i] - m| == |arr[j] - m|`, then `arr[i]` is said to be stronger than `arr[j]` if `arr[i] > arr[j]`. return a list of the strongest `k` values in the array. return the answer in any arbitrary order. median is the middle value in an ordered integer list. more formally, if the length of the list is n, the median is the element in position `((n - 1) / 2)` in the sorted list (0-indexed). for `arr = [6, -3, 7, 2, 11]`, `n = 5` and the median is obtained by sorting the array `arr = [-3, 2, 6, 7, 11]` and the median is `arr[m]` where `m = ((5 - 1) / 2) = 2`. the median is `6`. for `arr = [-7, 22, 17, 3]`, `n = 4` and the median is obtained by sorting the array `arr = [-7, 3, 17, 22]` and the median is `arr[m]` where `m = ((4 - 1) / 2) = 1`. the median is `3`.","input: arr = [1,2,3,4,5], k = 2 output: [5,1] explanation: median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. the strongest 2 elements are [5, 1]. [1, 5] is also accepted answer. please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1. example 2: input: arr = [1,1,3,5,5], k = 2 output: [5,5] explanation: median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. the strongest 2 elements are [5, 5]. example 3: input: arr = [6,7,11,7,6,8], k = 5 output: [11,8,6,6,7] explanation: median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7]. any permutation of [11,8,6,6,7] is accepted. example 4: input: arr = [6,-3,7,2,11], k = 3 output: [-3,11,2] example 5: input: arr = [-7,22,17,3], k = 2 output: [22,17]",`1 <= arr.length <= 10^5` `-10^5 <= arr[i] <= 10^5` `1 <= k <= arr.length`,
1472,Design Browser History,"You have a browser of one tab where you start on the `homepage` and you can visit another `url`, get back in the history number of `steps` or move forward in the history number of `steps`.

Implement the `BrowserHistory` class:
`BrowserHistory(string homepage)` Initializes the object with the `homepage` of the browser.

`void visit(string url)` Visits `url` from the current page. It clears up all the forward history.

`string back(int steps)` Move `steps` back in history. If you can only return `x` steps in the history and `steps > x`, you will return only `x` steps. Return the current `url` after moving back in history at most `steps`.

`string forward(int steps)` Move `steps` forward in history. If you can only forward `x` steps in the history and `steps > x`, you will forward only `x` steps. Return the current `url` after forwarding in history at most `steps`.


Example:
Input:
[""BrowserHistory"",""visit"",""visit"",""visit"",""back"",""back"",""forward"",""visit"",""forward"",""back"",""back""]
[[""leetcode.com""],[""google.com""],[""facebook.com""],[""youtube.com""],[1],[1],[1],[""linkedin.com""],[2],[2],[7]]
Output:
[null,null,null,null,""facebook.com"",""google.com"",""facebook.com"",null,""linkedin.com"",""google.com"",""leetcode.com""]
Explanation:
BrowserHistory browserHistory = new BrowserHistory(""leetcode.com"");
browserHistory.visit(""google.com"");       // You are in ""leetcode.com"". Visit ""google.com""
browserHistory.visit(""facebook.com"");     // You are in ""google.com"". Visit ""facebook.com""
browserHistory.visit(""youtube.com"");      // You are in ""facebook.com"". Visit ""youtube.com""
browserHistory.back(1);                   // You are in ""youtube.com"", move back to ""facebook.com"" return ""facebook.com""
browserHistory.back(1);                   // You are in ""facebook.com"", move back to ""google.com"" return ""google.com""
browserHistory.forward(1);                // You are in ""google.com"", move forward to ""facebook.com"" return ""facebook.com""
browserHistory.visit(""linkedin.com"");     // You are in ""facebook.com"". Visit ""linkedin.com""
browserHistory.forward(2);                // You are in ""linkedin.com"", you cannot move forward any steps.

browserHistory.back(2);                   // You are in ""linkedin.com"", move back two steps to ""facebook.com"" then to ""google.com"". return ""google.com""
browserHistory.back(7);                   // You are in ""google.com"", you can move back only one step to ""leetcode.com"". return ""leetcode.com""

Constraints:
`1 <= homepage.length <= 20`
`1 <= url.length <= 20`
`1 <= steps <= 100`
`homepage` and `url` consist of  '.' or lower case English letters.

At most `5000` calls will be made to `visit`, `back`, and `forward`.",Medium,https://leetcode.com/problems/design-browser-history,"Bloomberg,DoorDash,Roblox",Design,454,,"you have a browser of one tab where you start on the `homepage` and you can visit another `url`, get back in the history number of `steps` or move forward in the history number of `steps`. implement the `browserhistory` class: `browserhistory(string homepage)` initializes the object with the `homepage` of the browser. `void visit(string url)` visits `url` from the current page. it clears up all the forward history. `string back(int steps)` move `steps` back in history. if you can only return `x` steps in the history and `steps > x`, you will return only `x` steps. return the current `url` after moving back in history at most `steps`. `string forward(int steps)` move `steps` forward in history. if you can only forward `x` steps in the history and `steps > x`, you will forward only `x` steps. return the current `url` after forwarding in history at most `steps`.","input: [""browserhistory"",""visit"",""visit"",""visit"",""back"",""back"",""forward"",""visit"",""forward"",""back"",""back""] [[""leetcode.com""],[""google.com""],[""facebook.com""],[""youtube.com""],[1],[1],[1],[""linkedin.com""],[2],[2],[7]] output: [null,null,null,null,""facebook.com"",""google.com"",""facebook.com"",null,""linkedin.com"",""google.com"",""leetcode.com""] explanation: browserhistory browserhistory = new browserhistory(""leetcode.com""); browserhistory.visit(""google.com""); // you are in ""leetcode.com"". visit ""google.com"" browserhistory.visit(""facebook.com""); // you are in ""google.com"". visit ""facebook.com"" browserhistory.visit(""youtube.com""); // you are in ""facebook.com"". visit ""youtube.com"" browserhistory.back(1); // you are in ""youtube.com"", move back to ""facebook.com"" return ""facebook.com"" browserhistory.back(1); // you are in ""facebook.com"", move back to ""google.com"" return ""google.com"" browserhistory.forward(1); // you are in ""google.com"", move forward to ""facebook.com"" return ""facebook.com"" browserhistory.visit(""linkedin.com""); // you are in ""facebook.com"". visit ""linkedin.com"" browserhistory.forward(2); // you are in ""linkedin.com"", you cannot move forward any steps. browserhistory.back(2); // you are in ""linkedin.com"", move back two steps to ""facebook.com"" then to ""google.com"". return ""google.com"" browserhistory.back(7); // you are in ""google.com"", you can move back only one step to ""leetcode.com"". return ""leetcode.com""","`1 <= homepage.length <= 20` `1 <= url.length <= 20` `1 <= steps <= 10^0` `homepage` and `url` consist of '.' or lower case english letters. at most `5000` calls will be made to `visit`, `back`, and `forward`.",
1473,Paint House III,"There is a row of `m` houses in a small city, each house must be painted with one of the `n` colors (labeled from `1` to `n`), some houses that have been painted last summer should not be painted again.

A neighborhood is a maximal group of continuous houses that are painted with the same color.

For example: `houses = [1,2,2,3,3,2,1,1]` contains `5` neighborhoods `[{1}, {2,2}, {3,3}, {2}, {1,1}]`.

Given an array `houses`, an `m x n` matrix `cost` and an integer `target` where:
`houses[i]`: is the color of the house `i`, and `0` if the house is not painted yet.

`cost[i][j]`: is the cost of paint the house `i` with the color `j + 1`.

Return the minimum cost of painting all the remaining houses in such a way that there are exactly `target` neighborhoods. If it is not possible, return `-1`.


Example 1:
Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 9
Explanation: Paint houses of this way [1,2,2,1,1]
This array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].

Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.


Example 2:
Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 11
Explanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]
This array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. 
Cost of paint the first and last house (10 + 1) = 11.


Example 3:
Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5
Output: 5

Example 4:
Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3
Output: -1
Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.


Constraints:
`m == houses.length == cost.length`
`n == cost[i].length`
`1 <= m <= 100`
`1 <= n <= 20`
`1 <= target <= m`
`0 <= houses[i] <= n`
`1 <= cost[i][j] <= 10^4`",Hard,https://leetcode.com/problems/paint-house-iii,Paypal,Dynamic Programming,335,,"there is a row of `m` houses in a small city, each house must be painted with one of the `n` colors (labeled from `1` to `n`), some houses that have been painted last summer should not be painted again. a neighborhood is a maximal group of continuous houses that are painted with the same color. for","`houses = [1,2,2,3,3,2,1,1]` contains `5` neighborhoods `[{1}, {2,2}, {3,3}, {2}, {1,1}]`. given an array `houses`, an `m x n` matrix `cost` and an integer `target` where: `houses[i]`: is the color of the house `i`, and `0` if the house is not painted yet. `cost[i][j]`: is the cost of paint the house `i` with the color `j + 1`. return the minimum cost of painting all the remaining houses in such a way that there are exactly `target` neighborhoods. if it is not possible, return `-1`. example 1: input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3 output: 9 explanation: paint houses of this way [1,2,2,1,1] this array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}]. cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9. example 2: input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3 output: 11 explanation: some houses are already painted, paint the houses of this way [2,2,1,2,2] this array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. cost of paint the first and last house (10 + 1) = 11. example 3: input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5 output: 5 example 4: input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3 output: -1 explanation: houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.",`m == houses.length == cost.length` `n == cost[i].length` `1 <= m <= 10^0` `1 <= n <= 20` `1 <= target <= m` `0 <= houses[i] <= n` `1 <= cost[i][j] <= 10^4`,
1474,Delete N Nodes After M Nodes of a Linked List,"Given the `head` of a linked list and two integers `m` and `n`. Traverse the linked list and remove some nodes in the following way:
Start with the head as the current node.

Keep the first `m` nodes starting with the current node.

Remove the next `n` nodes
Keep repeating steps 2 and 3 until you reach the end of the list.

Return the head of the modified list after removing the mentioned nodes.

Follow up question: How can you solve this problem by modifying the list in-place?

Example 1:
Input: head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n = 3
Output: [1,2,6,7,11,12]
Explanation: Keep the first (m = 2) nodes starting from the head of the linked List  (1 ->2) show in black nodes.

Delete the next (n = 3) nodes (3 -> 4 -> 5) show in read nodes.

Continue with the same procedure until reaching the tail of the Linked List.

Head of linked list after removing nodes is returned.


Example 2:
Input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3
Output: [1,5,9]
Explanation: Head of linked list after removing nodes is returned.


Example 3:
Input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 3, n = 1
Output: [1,2,3,5,6,7,9,10,11]

Example 4:
Input: head = [9,3,7,7,9,10,8,2], m = 1, n = 2
Output: [9,7,8]

Constraints:
The given linked list will contain between `1` and `10^4` nodes.

The value of each node in the linked list will be in the range` [1, 10^6]`.

`1 <= m,n <= 1000`",Easy,https://leetcode.com/problems/delete-n-nodes-after-m-nodes-of-a-linked-list,Microsoft,Linked List,175,"[Remove Nth Node From End of List, /problems/remove-nth-node-from-end-of-list/, Medium], [Remove Zero Sum Consecutive Nodes from Linked List, /problems/remove-zero-sum-consecutive-nodes-from-linked-list/, Medium]",given the `head` of a linked list and two integers `m` and `n`. traverse the linked list and remove some nodes in the following way: start with the head as the current node. keep the first `m` nodes starting with the current node. remove the next `n` nodes keep repeating steps 2 and 3 until you reach the end of the list. return the head of the modified list after removing the mentioned nodes. follow up question: how can you solve this problem by modifying the list in-place?,"input: head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n = 3 output: [1,2,6,7,11,12] explanation: keep the first (m = 2) nodes starting from the head of the linked list (1 ->2) show in black nodes. delete the next (n = 3) nodes (3 -> 4 -> 5) show in read nodes. continue with the same procedure until reaching the tail of the linked list. head of linked list after removing nodes is returned. example 2: input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3 output: [1,5,9] explanation: head of linked list after removing nodes is returned. example 3: input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 3, n = 1 output: [1,2,3,5,6,7,9,10,11] example 4: input: head = [9,3,7,7,9,10,8,2], m = 1, n = 2 output: [9,7,8]","the given linked list will contain between `1` and `10^4` nodes. the value of each node in the linked list will be in the range` [1, 10^6]`. `1 <= m,n <= 1000`",
1475,Final Prices With a Special Discount in a Shop,"Given the array `prices` where `prices[i]` is the price of the `ith` item in a shop. There is a special discount for items in the shop, if you buy the `ith` item, then you will receive a discount equivalent to `prices[j]` where `j` is the minimum index such that `j > i` and `prices[j] <= prices[i]`, otherwise, you will not receive any discount at all.

Return an array where the `ith` element is the final price you will pay for the `ith` item of the shop considering the special discount.


Example 1:
Input: prices = [8,4,6,2,3]
Output: [4,2,4,2,3]
Explanation: 
For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4. 
For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2. 
For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4. 
For items 3 and 4 you will not receive any discount at all.


Example 2:
Input: prices = [1,2,3,4,5]
Output: [1,2,3,4,5]
Explanation: In this case, for all items, you will not receive any discount at all.


Example 3:
Input: prices = [10,1,1,6]
Output: [9,0,1,6]

Constraints:
`1 <= prices.length <= 500`
`1 <= prices[i] <= 10^3`",Easy,https://leetcode.com/problems/final-prices-with-a-special-discount-in-a-shop,Dream11,Array,437,,"given the array `prices` where `prices[i]` is the price of the `ith` item in a shop. there is a special discount for items in the shop, if you buy the `ith` item, then you will receive a discount equivalent to `prices[j]` where `j` is the minimum index such that `j > i` and `prices[j] <= prices[i]`, otherwise, you will not receive any discount at all. return an array where the `ith` element is the final price you will pay for the `ith` item of the shop considering the special discount.","input: prices = [8,4,6,2,3] output: [4,2,4,2,3] explanation: for item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4. for item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2. for item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4. for items 3 and 4 you will not receive any discount at all. example 2: input: prices = [1,2,3,4,5] output: [1,2,3,4,5] explanation: in this case, for all items, you will not receive any discount at all. example 3: input: prices = [10,1,1,6] output: [9,0,1,6]",`1 <= prices.length <= 500` `1 <= prices[i] <= 10^3`,
1476,Subrectangle Queries,"Implement the class `SubrectangleQueries` which receives a `rows x cols` rectangle as a matrix of integers in the constructor and supports two methods:
1.` updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`
Updates all values with `newValue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`.

2.` getValue(int row, int col)`
Returns the current value of the coordinate `(row,col)` from the rectangle.


Example 1:
Input
[""SubrectangleQueries"",""getValue"",""updateSubrectangle"",""getValue"",""getValue"",""updateSubrectangle"",""getValue"",""getValue""]
[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]
Output
[null,1,null,5,5,null,10,5]
Explanation
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  
// The initial rectangle (4x3) looks like:
// 1 2 1
// 4 3 4
// 3 2 1
// 1 1 1
subrectangleQueries.getValue(0, 2); // return 1
subrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);
// After this update the rectangle looks like:
// 5 5 5
// 5 5 5
// 5 5 5
// 5 5 5 
subrectangleQueries.getValue(0, 2); // return 5
subrectangleQueries.getValue(3, 1); // return 5
subrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);
// After this update the rectangle looks like:
// 5   5   5
// 5   5   5
// 5   5   5
// 10  10  10 
subrectangleQueries.getValue(3, 1); // return 10
subrectangleQueries.getValue(0, 2); // return 5

Example 2:
Input
[""SubrectangleQueries"",""getValue"",""updateSubrectangle"",""getValue"",""getValue"",""updateSubrectangle"",""getValue""]
[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]
Output
[null,1,null,100,100,null,20]
Explanation
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);
subrectangleQueries.getValue(0, 0); // return 1
subrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);
subrectangleQueries.getValue(0, 0); // return 100
subrectangleQueries.getValue(2, 2); // return 100
subrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);
subrectangleQueries.getValue(2, 2); // return 20

Constraints:
There will be at most `500` operations considering both methods: `updateSubrectangle` and `getValue`.

`1 <= rows, cols <= 100`
`rows == rectangle.length`
`cols == rectangle[i].length`
`0 <= row1 <= row2 < rows`
`0 <= col1 <= col2 < cols`
`1 <= newValue, rectangle[i][j] <= 10^9`
`0 <= row < rows`
`0 <= col < cols`",Medium,https://leetcode.com/problems/subrectangle-queries,Nuro,Array,184,,"implement the class `subrectanglequeries` which receives a `rows x cols` rectangle as a matrix of integers in the constructor and supports two methods: 1.` updatesubrectangle(int row1, int col1, int row2, int col2, int newvalue)` updates all values with `newvalue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`. 2.` getvalue(int row, int col)` returns the current value of the coordinate `(row,col)` from the rectangle.","input [""subrectanglequeries"",""getvalue"",""updatesubrectangle"",""getvalue"",""getvalue"",""updatesubrectangle"",""getvalue"",""getvalue""] [[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]] output [null,1,null,5,5,null,10,5] explanation subrectanglequeries subrectanglequeries = new subrectanglequeries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]); // the initial rectangle (4x3) looks like: // 1 2 1 // 4 3 4 // 3 2 1 // 1 1 1 subrectanglequeries.getvalue(0, 2); // return 1 subrectanglequeries.updatesubrectangle(0, 0, 3, 2, 5); // after this update the rectangle looks like: // 5 5 5 // 5 5 5 // 5 5 5 // 5 5 5 subrectanglequeries.getvalue(0, 2); // return 5 subrectanglequeries.getvalue(3, 1); // return 5 subrectanglequeries.updatesubrectangle(3, 0, 3, 2, 10); // after this update the rectangle looks like: // 5 5 5 // 5 5 5 // 5 5 5 // 10 10 10 subrectanglequeries.getvalue(3, 1); // return 10 subrectanglequeries.getvalue(0, 2); // return 5 example 2: input [""subrectanglequeries"",""getvalue"",""updatesubrectangle"",""getvalue"",""getvalue"",""updatesubrectangle"",""getvalue""] [[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]] output [null,1,null,100,100,null,20] explanation subrectanglequeries subrectanglequeries = new subrectanglequeries([[1,1,1],[2,2,2],[3,3,3]]); subrectanglequeries.getvalue(0, 0); // return 1 subrectanglequeries.updatesubrectangle(0, 0, 2, 2, 100); subrectanglequeries.getvalue(0, 0); // return 100 subrectanglequeries.getvalue(2, 2); // return 100 subrectanglequeries.updatesubrectangle(1, 1, 2, 2, 20); subrectanglequeries.getvalue(2, 2); // return 20","there will be at most `500` operations considering both methods: `updatesubrectangle` and `getvalue`. `1 <= rows, cols <= 10^0` `rows == rectangle.length` `cols == rectangle[i].length` `0 <= row1 <= row2 < rows` `0 <= col1 <= col2 < cols` `1 <= newvalue, rectangle[i][j] <= 10^9` `0 <= row < rows` `0 <= col < cols`",
1477,Find Two Non-overlapping Sub-arrays Each With Target Sum,"Given an array of integers `arr` and an integer `target`.

You have to find two non-overlapping sub-arrays of `arr` each with sum equal `target`. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.

Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.


Example 1:
Input: arr = [3,2,2,4,3], target = 3
Output: 2
Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.


Example 2:
Input: arr = [7,3,4,7], target = 7
Output: 2
Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.


Example 3:
Input: arr = [4,3,2,6,2,3,4], target = 6
Output: -1
Explanation: We have only one sub-array of sum = 6.


Example 4:
Input: arr = [5,5,4,4,5], target = 3
Output: -1
Explanation: We cannot find a sub-array of sum = 3.


Example 5:
Input: arr = [3,1,1,1,5,1,2,1], target = 3
Output: 3
Explanation: Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap.


Constraints:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 1000`
`1 <= target <= 10^8`",Medium,https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum,"Google,ByteDance",Dynamic Programming,722,,"given an array of integers `arr` and an integer `target`. you have to find two non-overlapping sub-arrays of `arr` each with sum equal `target`. there can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum. return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.","input: arr = [3,2,2,4,3], target = 3 output: 2 explanation: only two sub-arrays have sum = 3 ([3] and [3]). the sum of their lengths is 2. example 2: input: arr = [7,3,4,7], target = 7 output: 2 explanation: although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2. example 3: input: arr = [4,3,2,6,2,3,4], target = 6 output: -1 explanation: we have only one sub-array of sum = 6. example 4: input: arr = [5,5,4,4,5], target = 3 output: -1 explanation: we cannot find a sub-array of sum = 3. example 5: input: arr = [3,1,1,1,5,1,2,1], target = 3 output: 3 explanation: note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap.",`1 <= arr.length <= 10^5` `1 <= arr[i] <= 1000` `1 <= target <= 10^8`,
1478,Allocate Mailboxes,"Given the array `houses` and an integer `k`. where `houses[i]` is the location of the ith house along a street, your task is to allocate `k` mailboxes in the street.

Return the minimum total distance between each house and its nearest mailbox.

The answer is guaranteed to fit in a 32-bit signed integer.


Example 1:
Input: houses = [1,4,8,10,20], k = 3
Output: 5
Explanation: Allocate mailboxes in position 3, 9 and 20.

Minimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 

Example 2:
Input: houses = [2,3,5,12,18], k = 2
Output: 9
Explanation: Allocate mailboxes in position 3 and 14.

Minimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.


Example 3:
Input: houses = [7,4,6,1], k = 1
Output: 8

Example 4:
Input: houses = [3,6,14,10], k = 4
Output: 0

Constraints:
`n == houses.length`
`1 <= n <= 100`
`1 <= houses[i] <= 10^4`
`1 <= k <= n`
Array `houses` contain unique integers.",Hard,https://leetcode.com/problems/allocate-mailboxes,Bloomberg,"Math,Dynamic Programming",428,,"given the array `houses` and an integer `k`. where `houses[i]` is the location of the ith house along a street, your task is to allocate `k` mailboxes in the street. return the minimum total distance between each house and its nearest mailbox. the answer is guaranteed to fit in a 32-bit signed integer.","input: houses = [1,4,8,10,20], k = 3 output: 5 explanation: allocate mailboxes in position 3, 9 and 20. minimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 example 2: input: houses = [2,3,5,12,18], k = 2 output: 9 explanation: allocate mailboxes in position 3 and 14. minimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9. example 3: input: houses = [7,4,6,1], k = 1 output: 8 example 4: input: houses = [3,6,14,10], k = 4 output: 0",`n == houses.length` `1 <= n <= 10^0` `1 <= houses[i] <= 10^4` `1 <= k <= n` array `houses` contain unique integers.,
1479,Sales by Day of the Week,SQL Schema,Hard,https://leetcode.com/problems/sales-by-day-of-the-week,Amazon,,56,,sql schema,,,
1480,Running Sum of 1d Array,"Given an array `nums`. We define a running sum of an array as `runningSum[i] = sum(nums[0]...nums[i])`.

Return the running sum of `nums`.


Example 1:
Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].


Example 2:
Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].


Example 3:
Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]

Constraints:
`1 <= nums.length <= 1000`
`-10^6 <= nums[i] <= 10^6`",Easy,https://leetcode.com/problems/running-sum-of-1d-array,"Apple,Amazon,Adobe,Bloomberg",Array,1168,,given an array `nums`. we define a running sum of an array as `runningsum[i] = sum(nums[0]...nums[i])`. return the running sum of `nums`.,"input: nums = [1,2,3,4] output: [1,3,6,10] explanation: running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4]. example 2: input: nums = [1,1,1,1,1] output: [1,2,3,4,5] explanation: running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1]. example 3: input: nums = [3,1,2,10,1] output: [3,4,6,16,17]",`1 <= nums.length <= 1000` `-10^6 <= nums[i] <= 10^6`,
1481,Least Number of Unique Integers after K Removals,"Given an array of integers `arr` and an integer `k`. Find the least number of unique integers after removing exactly `k` elements.


Example 1:
Input: arr = [5,5,4], k = 1
Output: 1
Explanation: Remove the single 4, only 5 is left.


Example 2:
Input: arr = [4,3,1,1,3,3,2], k = 3
Output: 2
Explanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.


Constraints:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 10^9`
`0 <= k <= arr.length`",Medium,https://leetcode.com/problems/least-number-of-unique-integers-after-k-removals,"Amazon,Roblox,Oracle,Expedia","Array,Sort",343,,given an array of integers `arr` and an integer `k`. find the least number of unique integers after removing exactly `k` elements.,"input: arr = [5,5,4], k = 1 output: 1 explanation: remove the single 4, only 5 is left. example 2: input: arr = [4,3,1,1,3,3,2], k = 3 output: 2 explanation: remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.",`1 <= arr.length <= 10^5` `1 <= arr[i] <= 10^9` `0 <= k <= arr.length`,
1482,Minimum Number of Days to Make m Bouquets,"Given an integer array `bloomDay`, an integer `m` and an integer `k`.

We need to make `m` bouquets. To make a bouquet, you need to use `k` adjacent flowers from the garden.

The garden consists of `n` flowers, the `ith` flower will bloom in the `bloomDay[i]` and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make `m` bouquets from the garden. If it is impossible to make `m` bouquets return -1.


Example 1:
Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden.

We need 3 bouquets each should contain 1 flower.

After day 1: [x, _, _, _, _]   // we can only make one bouquet.

After day 2: [x, _, _, _, x]   // we can only make two bouquets.

After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.


Example 2:
Input: bloomDay = [1,10,3,10,2], m = 3, k = 2
Output: -1
Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.


Example 3:
Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3
Output: 12
Explanation: We need 2 bouquets each should have 3 flowers.

Here's the garden after the 7 and 12 days:
After day 7: [x, x, x, x, _, x, x]
We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.

After day 12: [x, x, x, x, x, x, x]
It is obvious that we can make two bouquets in different ways.


Example 4:
Input: bloomDay = [1000000000,1000000000], m = 1, k = 1
Output: 1000000000
Explanation: You need to wait 1000000000 days to have a flower ready for a bouquet.


Example 5:
Input: bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2
Output: 9

Constraints:
`bloomDay.length == n`
`1 <= n <= 10^5`
`1 <= bloomDay[i] <= 10^9`
`1 <= m <= 10^6`
`1 <= k <= n`",Medium,https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets,Google,"Array,Binary Search",809,,"given an integer array `bloomday`, an integer `m` and an integer `k`. we need to make `m` bouquets. to make a bouquet, you need to use `k` adjacent flowers from the garden. the garden consists of `n` flowers, the `ith` flower will bloom in the `bloomday[i]` and then can be used in exactly one bouquet. return the minimum number of days you need to wait to be able to make `m` bouquets from the garden. if it is impossible to make `m` bouquets return -1.","input: bloomday = [1,10,3,10,2], m = 3, k = 1 output: 3 explanation: let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden. we need 3 bouquets each should contain 1 flower. after day 1: [x, _, _, _, _] // we can only make one bouquet. after day 2: [x, _, _, _, x] // we can only make two bouquets. after day 3: [x, _, x, _, x] // we can make 3 bouquets. the answer is 3. example 2: input: bloomday = [1,10,3,10,2], m = 3, k = 2 output: -1 explanation: we need 3 bouquets each has 2 flowers, that means we need 6 flowers. we only have 5 flowers so it is impossible to get the needed bouquets and we return -1. example 3: input: bloomday = [7,7,7,7,12,7,7], m = 2, k = 3 output: 12 explanation: we need 2 bouquets each should have 3 flowers. here's the garden after the 7 and 12 days: after day 7: [x, x, x, x, _, x, x] we can make one bouquet of the first three flowers that bloomed. we cannot make another bouquet from the last three flowers that bloomed because they are not adjacent. after day 12: [x, x, x, x, x, x, x] it is obvious that we can make two bouquets in different ways. example 4: input: bloomday = [1000000000,1000000000], m = 1, k = 1 output: 1000000000 explanation: you need to wait 1000000000 days to have a flower ready for a bouquet. example 5: input: bloomday = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2 output: 9",`bloomday.length == n` `1 <= n <= 10^5` `1 <= bloomday[i] <= 10^9` `1 <= m <= 10^6` `1 <= k <= n`,
1483,Kth Ancestor of a Tree Node,"You are given a tree with `n` nodes numbered from `0` to `n-1` in the form of a parent array where `parent[i]` is the parent of node `i`. The root of the tree is node `0`.

Implement the function `getKthAncestor``(int node, int k)` to return the `k`-th ancestor of the given `node`. If there is no such ancestor, return `-1`.

The k-th ancestor of a tree node is the `k`-th node in the path from that node to the root.


Example:
Input:
[""TreeAncestor"",""getKthAncestor"",""getKthAncestor"",""getKthAncestor""]
[[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]
Output:
[null,1,0,-1]
Explanation:
TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);
treeAncestor.getKthAncestor(3, 1);  // returns 1 which is the parent of 3
treeAncestor.getKthAncestor(5, 2);  // returns 0 which is the grandparent of 5
treeAncestor.getKthAncestor(6, 3);  // returns -1 because there is no such ancestor

Constraints:
`1 <= k <= n <= 5*10^4`
`parent[0] == -1` indicating that `0` is the root node.

`0 <= parent[i] < n` for all `0 < i < n`
`0 <= node < n`
There will be at most `5*10^4` queries.",Hard,https://leetcode.com/problems/kth-ancestor-of-a-tree-node,Google,Dynamic Programming,425,,"you are given a tree with `n` nodes numbered from `0` to `n-1` in the form of a parent array where `parent[i]` is the parent of node `i`. the root of the tree is node `0`. implement the function `getkthancestor``(int node, int k)` to return the `k`-th ancestor of the given `node`. if there is no such ancestor, return `-1`. the k-th ancestor of a tree node is the `k`-th node in the path from that node to the root.","input: [""treeancestor"",""getkthancestor"",""getkthancestor"",""getkthancestor""] [[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]] output: [null,1,0,-1] explanation: treeancestor treeancestor = new treeancestor(7, [-1, 0, 0, 1, 1, 2, 2]); treeancestor.getkthancestor(3, 1); // returns 1 which is the parent of 3 treeancestor.getkthancestor(5, 2); // returns 0 which is the grandparent of 5 treeancestor.getkthancestor(6, 3); // returns -1 because there is no such ancestor",`1 <= k <= n <= 5*10^4` `parent[0] == -1` indicating that `0` is the root node. `0 <= parent[i] < n` for all `0 < i < n` `0 <= node < n` there will be at most `5*10^4` queries.,
1484,Group Sold Products By The Date,SQL Schema,Easy,https://leetcode.com/problems/group-sold-products-by-the-date,Startup,,115,,sql schema,,,
1485,Clone Binary Tree With Random Pointer,"A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.

Return a deep copy of the tree.

The tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of `[val, random_index]` where:
`val`: an integer representing `Node.val`
`random_index`: the index of the node (in the input) where the random pointer points to, or `null` if it does not point to any node.

You will be given the tree in class `Node` and you should return the cloned tree in class `NodeCopy`. `NodeCopy` class is just a clone of `Node` class with the same attributes and constructors.


Example 1:
Input: root = [[1,null],null,[4,3],[7,0]]
Output: [[1,null],null,[4,3],[7,0]]
Explanation: The original binary tree is [1,null,4,7].

The random pointer of node one is null, so it is represented as [1, null].

The random pointer of node 4 is node 7, so it is represented as [4, 3] where 3 is the index of node 7 in the array representing the tree.

The random pointer of node 7 is node 1, so it is represented as [7, 0] where 0 is the index of node 1 in the array representing the tree.


Example 2:
Input: root = [[1,4],null,[1,0],null,[1,5],[1,5]]
Output: [[1,4],null,[1,0],null,[1,5],[1,5]]
Explanation: The random pointer of a node can be the node itself.


Example 3:
Input: root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]
Output: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]

Example 4:
Input: root = []
Output: []

Example 5:
Input: root = [[1,null],null,[2,null],null,[1,null]]
Output: [[1,null],null,[2,null],null,[1,null]]

Constraints:
The number of nodes in the `tree` is in the range `[0, 1000].`
Each node's value is between `[1, 10^6]`.",Medium,https://leetcode.com/problems/clone-binary-tree-with-random-pointer,Bloomberg,"Hash Table,Tree,Depth-first Search,Breadth-first Search",151,"[Clone Graph, /problems/clone-graph/, Medium], [Copy List with Random Pointer, /problems/copy-list-with-random-pointer/, Medium], [Clone N-ary Tree, /problems/clone-n-ary-tree/, Medium]","a binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null. return a deep copy of the tree. the tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of `[val, random_index]` where: `val`: an integer representing `node.val` `random_index`: the index of the node (in the input) where the random pointer points to, or `null` if it does not point to any node. you will be given the tree in class `node` and you should return the cloned tree in class `nodecopy`. `nodecopy` class is just a clone of `node` class with the same attributes and constructors.","input: root = [[1,null],null,[4,3],[7,0]] output: [[1,null],null,[4,3],[7,0]] explanation: the original binary tree is [1,null,4,7]. the random pointer of node one is null, so it is represented as [1, null]. the random pointer of node 4 is node 7, so it is represented as [4, 3] where 3 is the index of node 7 in the array representing the tree. the random pointer of node 7 is node 1, so it is represented as [7, 0] where 0 is the index of node 1 in the array representing the tree. example 2: input: root = [[1,4],null,[1,0],null,[1,5],[1,5]] output: [[1,4],null,[1,0],null,[1,5],[1,5]] explanation: the random pointer of a node can be the node itself. example 3: input: root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]] output: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]] example 4: input: root = [] output: [] example 5: input: root = [[1,null],null,[2,null],null,[1,null]] output: [[1,null],null,[2,null],null,[1,null]]","the number of nodes in the `tree` is in the range `[0, 1000].` each node's value is between `[1, 10^6]`.",
1486,XOR Operation in an Array,"Given an integer `n` and an integer `start`.

Define an array `nums` where `nums[i] = start + 2*i` (0-indexed) and `n == nums.length`.

Return the bitwise XOR of all elements of `nums`.


Example 1:
Input: n = 5, start = 0
Output: 8
Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.

Where ""^"" corresponds to bitwise XOR operator.


Example 2:
Input: n = 4, start = 3
Output: 8
Explanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.


Example 3:
Input: n = 1, start = 7
Output: 7

Example 4:
Input: n = 10, start = 5
Output: 2

Constraints:
`1 <= n <= 1000`
`0 <= start <= 1000`
`n == nums.length`",Easy,https://leetcode.com/problems/xor-operation-in-an-array,Walmart Labs,"Array,Bit Manipulation",450,,given an integer `n` and an integer `start`. define an array `nums` where `nums[i] = start + 2*i` (0-indexed) and `n == nums.length`. return the bitwise xor of all elements of `nums`.,"input: n = 5, start = 0 output: 8 explanation: array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8. where ""^"" corresponds to bitwise xor operator. example 2: input: n = 4, start = 3 output: 8 explanation: array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8. example 3: input: n = 1, start = 7 output: 7 example 4: input: n = 10, start = 5 output: 2",`1 <= n <= 1000` `0 <= start <= 1000` `n == nums.length`,
1487,Making File Names Unique,"Given an array of strings `names` of size `n`. You will create `n` folders in your file system such that, at the `ith` minute, you will create a folder with the name `names[i]`.

Since two files cannot have the same name, if you enter a folder name which is previously used, the system will have a suffix addition to its name in the form of `(k)`, where, `k` is the smallest positive integer such that the obtained name remains unique.

Return an array of strings of length `n` where `ans[i]` is the actual name the system will assign to the `ith` folder when you create it.


Example 1:
Input: names = [""pes"",""fifa"",""gta"",""pes(2019)""]
Output: [""pes"",""fifa"",""gta"",""pes(2019)""]
Explanation: Let's see how the file system creates folder names:
""pes"" --> not assigned before, remains ""pes""
""fifa"" --> not assigned before, remains ""fifa""
""gta"" --> not assigned before, remains ""gta""
""pes(2019)"" --> not assigned before, remains ""pes(2019)""

Example 2:
Input: names = [""gta"",""gta(1)"",""gta"",""avalon""]
Output: [""gta"",""gta(1)"",""gta(2)"",""avalon""]
Explanation: Let's see how the file system creates folder names:
""gta"" --> not assigned before, remains ""gta""
""gta(1)"" --> not assigned before, remains ""gta(1)""
""gta"" --> the name is reserved, system adds (k), since ""gta(1)"" is also reserved, systems put k = 2. it becomes ""gta(2)""
""avalon"" --> not assigned before, remains ""avalon""

Example 3:
Input: names = [""onepiece"",""onepiece(1)"",""onepiece(2)"",""onepiece(3)"",""onepiece""]
Output: [""onepiece"",""onepiece(1)"",""onepiece(2)"",""onepiece(3)"",""onepiece(4)""]
Explanation: When the last folder is created, the smallest positive valid k is 4, and it becomes ""onepiece(4)"".


Example 4:
Input: names = [""wano"",""wano"",""wano"",""wano""]
Output: [""wano"",""wano(1)"",""wano(2)"",""wano(3)""]
Explanation: Just increase the value of k each time you create folder ""wano"".


Example 5:
Input: names = [""kaido"",""kaido(1)"",""kaido"",""kaido(1)""]
Output: [""kaido"",""kaido(1)"",""kaido(2)"",""kaido(1)(1)""]
Explanation: Please note that system adds the suffix (k) to current name even it contained the same suffix before.


Constraints:
`1 <= names.length <= 5 * 10^4`
`1 <= names[i].length <= 20`
`names[i]` consists of lower case English letters, digits and/or round brackets.",Medium,https://leetcode.com/problems/making-file-names-unique,Microsoft,"Hash Table,String",220,,"given an array of strings `names` of size `n`. you will create `n` folders in your file system such that, at the `ith` minute, you will create a folder with the name `names[i]`. since two files cannot have the same name, if you enter a folder name which is previously used, the system will have a suffix addition to its name in the form of `(k)`, where, `k` is the smallest positive integer such that the obtained name remains unique. return an array of strings of length `n` where `ans[i]` is the actual name the system will assign to the `ith` folder when you create it.","input: names = [""pes"",""fifa"",""gta"",""pes(2019)""] output: [""pes"",""fifa"",""gta"",""pes(2019)""] explanation: let's see how the file system creates folder names: ""pes"" --> not assigned before, remains ""pes"" ""fifa"" --> not assigned before, remains ""fifa"" ""gta"" --> not assigned before, remains ""gta"" ""pes(2019)"" --> not assigned before, remains ""pes(2019)"" example 2: input: names = [""gta"",""gta(1)"",""gta"",""avalon""] output: [""gta"",""gta(1)"",""gta(2)"",""avalon""] explanation: let's see how the file system creates folder names: ""gta"" --> not assigned before, remains ""gta"" ""gta(1)"" --> not assigned before, remains ""gta(1)"" ""gta"" --> the name is reserved, system adds (k), since ""gta(1)"" is also reserved, systems put k = 2. it becomes ""gta(2)"" ""avalon"" --> not assigned before, remains ""avalon"" example 3: input: names = [""onepiece"",""onepiece(1)"",""onepiece(2)"",""onepiece(3)"",""onepiece""] output: [""onepiece"",""onepiece(1)"",""onepiece(2)"",""onepiece(3)"",""onepiece(4)""] explanation: when the last folder is created, the smallest positive valid k is 4, and it becomes ""onepiece(4)"". example 4: input: names = [""wano"",""wano"",""wano"",""wano""] output: [""wano"",""wano(1)"",""wano(2)"",""wano(3)""] explanation: just increase the value of k each time you create folder ""wano"". example 5: input: names = [""kaido"",""kaido(1)"",""kaido"",""kaido(1)""] output: [""kaido"",""kaido(1)"",""kaido(2)"",""kaido(1)(1)""] explanation: please note that system adds the suffix (k) to current name even it contained the same suffix before.","`1 <= names.length <= 5 * 10^4` `1 <= names[i].length <= 20` `names[i]` consists of lower case english letters, digits and/or round brackets.",
1488,Avoid Flood in The City,"Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the `nth` lake, the `nth` lake becomes full of water. If it rains over a lake which is full of water, there will be a flood. Your goal is to avoid the flood in any lake.

Given an integer array `rains` where:
`rains[i] > 0` means there will be rains over the `rains[i]` lake.

`rains[i] == 0` means there are no rains this day and you can choose one lake this day and dry it.

Return an array `ans` where:
`ans.length == rains.length`
`ans[i] == -1` if `rains[i] > 0`.

`ans[i]` is the lake you choose to dry in the `ith` day if `rains[i] == 0`.

If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.

Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes. (see example 4)

Example 1:
Input: rains = [1,2,3,4]
Output: [-1,-1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day full lakes are [1,2,3]
After the fourth day full lakes are [1,2,3,4]
There's no day to dry any lake and there is no flood in any lake.


Example 2:
Input: rains = [1,2,0,0,2,1]
Output: [-1,-1,2,1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day, we dry lake 2. Full lakes are [1]
After the fourth day, we dry lake 1. There is no full lakes.

After the fifth day, full lakes are [2].

After the sixth day, full lakes are [1,2].

It is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.


Example 3:
Input: rains = [1,2,0,1,2]
Output: []
Explanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.

After that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.


Example 4:
Input: rains = [69,0,0,0,69]
Output: [-1,69,1,1,-1]
Explanation: Any solution on one of the forms [-1,69,x,y,-1], [-1,x,69,y,-1] or [-1,x,y,69,-1] is acceptable where 1 <= x,y <= 10^9

Example 5:
Input: rains = [10,20,20]
Output: []
Explanation: It will rain over lake 20 two consecutive days. There is no chance to dry any lake.


Constraints:
`1 <= rains.length <= 105`
`0 <= rains[i] <= 109`",Medium,https://leetcode.com/problems/avoid-flood-in-the-city,Google,"Array,Hash Table",550,,"your country has an infinite number of lakes. initially, all the lakes are empty, but when it rains over the `nth` lake, the `nth` lake becomes full of water. if it rains over a lake which is full of water, there will be a flood. your goal is to avoid the flood in any lake. given an integer array `rains` where: `rains[i] > 0` means there will be rains over the `rains[i]` lake. `rains[i] == 0` means there are no rains this day and you can choose one lake this day and dry it. return an array `ans` where: `ans.length == rains.length` `ans[i] == -1` if `rains[i] > 0`. `ans[i]` is the lake you choose to dry in the `ith` day if `rains[i] == 0`. if there are multiple valid answers return any of them. if it is impossible to avoid flood return an empty array. notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes. (see example 4)","input: rains = [1,2,3,4] output: [-1,-1,-1,-1] explanation: after the first day full lakes are [1] after the second day full lakes are [1,2] after the third day full lakes are [1,2,3] after the fourth day full lakes are [1,2,3,4] there's no day to dry any lake and there is no flood in any lake. example 2: input: rains = [1,2,0,0,2,1] output: [-1,-1,2,1,-1,-1] explanation: after the first day full lakes are [1] after the second day full lakes are [1,2] after the third day, we dry lake 2. full lakes are [1] after the fourth day, we dry lake 1. there is no full lakes. after the fifth day, full lakes are [2]. after the sixth day, full lakes are [1,2]. it is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario. example 3: input: rains = [1,2,0,1,2] output: [] explanation: after the second day, full lakes are [1,2]. we have to dry one lake in the third day. after that, it will rain over lakes [1,2]. it's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood. example 4: input: rains = [69,0,0,0,69] output: [-1,69,1,1,-1] explanation: any solution on one of the forms [-1,69,x,y,-1], [-1,x,69,y,-1] or [-1,x,y,69,-1] is acceptable where 1 <= x,y <= 10^9 example 5: input: rains = [10,20,20] output: [] explanation: it will rain over lake 20 two consecutive days. there is no chance to dry any lake.",`1 <= rains.length <= 10^5` `0 <= rains[i] <= 10^9`,
1489,Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree,"Given a weighted undirected connected graph with `n` vertices numbered from `0` to `n - 1`, and an array `edges` where `edges[i] = [ai, bi, weighti]` represents a bidirectional and weighted edge between nodes `ai` and `bi`. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.

Find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.

Note that you can return the indices of the edges in any order.


Example 1:
Input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]
Output: [[0,1],[2,3,4,5]]
Explanation: The figure above describes the graph.

The following figure shows all the possible MSTs:
Notice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.

The edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.


Example 2:
Input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]
Output: [[],[0,1,2,3]]
Explanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.


Constraints:
`2 <= n <= 100`
`1 <= edges.length <= min(200, n * (n - 1) / 2)`
`edges[i].length == 3`
`0 <= ai < bi < n`
`1 <= weighti <= 1000`
All pairs `(ai, bi)` are distinct.",Hard,https://leetcode.com/problems/find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree,Amazon,"Depth-first Search,Union Find",222,,"given a weighted undirected connected graph with `n` vertices numbered from `0` to `n - 1`, and an array `edges` where `edges[i] = [ai, bi, weighti]` represents a bidirectional and weighted edge between nodes `ai` and `bi`. a minimum spanning tree (mst) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight. find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (mst). an mst edge whose deletion from the graph would cause the mst weight to increase is called a critical edge. on the other hand, a pseudo-critical edge is that which can appear in some msts but not all. note that you can return the indices of the edges in any order.","input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]] output: [[0,1],[2,3,4,5]] explanation: the figure above describes the graph. the following figure shows all the possible msts: notice that the two edges 0 and 1 appear in all msts, therefore they are critical edges, so we return them in the first list of the output. the edges 2, 3, 4, and 5 are only part of some msts, therefore they are considered pseudo-critical edges. we add them to the second list of the output. example 2: input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]] output: [[],[0,1,2,3]] explanation: we can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an mst. therefore all 4 edges are pseudo-critical.","`2 <= n <= 10^0` `1 <= edges.length <= min(200, n * (n - 1) / 2)` `edges[i].length == 3` `0 <= ai < bi < n` `1 <= weighti <= 1000` all pairs `(ai, bi)` are distinct.",
1490,Clone N-ary Tree,"Given a `root` of an N-ary tree, return a deep copy (clone) of the tree.

Each node in the n-ary tree contains a val (`int`) and a list (`List[Node]`) of its children.

class Node {
    public int val;
    public List<Node> children;
}
Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

Follow up: Can your solution work for the graph problem?

Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: [1,null,3,2,4,null,5,6]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]

Constraints:
The depth of the n-ary tree is less than or equal to `1000`.

The total number of nodes is between `[0, 10^4]`.",Medium,https://leetcode.com/problems/clone-n-ary-tree,Amazon,"Hash Table,Tree,Depth-first Search,Breadth-first Search",146,"[Clone Graph, /problems/clone-graph/, Medium], [Copy List with Random Pointer, /problems/copy-list-with-random-pointer/, Medium], [Clone Binary Tree With Random Pointer, /problems/clone-binary-tree-with-random-pointer/, Medium]","given a `root` of an n-ary tree, return a deep copy (clone) of the tree. each node in the n-ary tree contains a val (`int`) and a list (`list[node]`) of its children. class node { public int val; public list<node> children; } nary-tree input serialization is represented in their level order traversal, each group of children is separated by the null value (see examples).","input: root = [1,null,3,2,4,null,5,6] output: [1,null,3,2,4,null,5,6] example 2: input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]","the depth of the n-ary tree is less than or equal to `1000`. the total number of nodes is between `[0, 10^4]`.","can your solution work for the graph problem? example 1: input: root = [1,null,3,2,4,null,5,6] output: [1,null,3,2,4,null,5,6] example 2: input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] constraints: the depth of the n-ary tree is less than or equal to `1000`. the total number of nodes is between `[0, 10^4]`."
1491,Average Salary Excluding the Minimum and Maximum Salary,"Given an array of unique integers `salary` where `salary[i]` is the salary of the employee `i`.

Return the average salary of employees excluding the minimum and maximum salary.


Example 1:
Input: salary = [4000,3000,1000,2000]
Output: 2500.00000
Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.

Average salary excluding minimum and maximum salary is (2000+3000)/2= 2500

Example 2:
Input: salary = [1000,2000,3000]
Output: 2000.00000
Explanation: Minimum salary and maximum salary are 1000 and 3000 respectively.

Average salary excluding minimum and maximum salary is (2000)/1= 2000

Example 3:
Input: salary = [6000,5000,4000,3000,2000,1000]
Output: 3500.00000

Example 4:
Input: salary = [8000,9000,2000,3000,6000,1000]
Output: 4750.00000

Constraints:
`3 <= salary.length <= 100`
`10^3 <= salary[i] <= 10^6`
`salary[i]` is unique.

Answers within `10^-5` of the actual value will be accepted as correct.",Easy,https://leetcode.com/problems/average-salary-excluding-the-minimum-and-maximum-salary,Amazon,"Array,Sort",272,,given an array of unique integers `salary` where `salary[i]` is the salary of the employee `i`. return the average salary of employees excluding the minimum and maximum salary.,"input: salary = [4000,3000,1000,2000] output: 2500.00000 explanation: minimum salary and maximum salary are 1000 and 4000 respectively. average salary excluding minimum and maximum salary is (2000+3000)/2= 2500 example 2: input: salary = [1000,2000,3000] output: 2000.00000 explanation: minimum salary and maximum salary are 1000 and 3000 respectively. average salary excluding minimum and maximum salary is (2000)/1= 2000 example 3: input: salary = [6000,5000,4000,3000,2000,1000] output: 3500.00000 example 4: input: salary = [8000,9000,2000,3000,6000,1000] output: 4750.00000",`3 <= salary.length <= 10^0` `10^3 <= salary[i] <= 10^6` `salary[i]` is unique. answers within `10^-5` of the actual value will be accepted as correct.,
1492,The kth Factor of n,"Given two positive integers `n` and `k`.

A factor of an integer `n` is defined as an integer `i` where `n % i == 0`.

Consider a list of all factors of `n` sorted in ascending order, return the `kth` factor in this list or return -1 if `n` has less than `k` factors.


Example 1:
Input: n = 12, k = 3
Output: 3
Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.


Example 2:
Input: n = 7, k = 2
Output: 7
Explanation: Factors list is [1, 7], the 2nd factor is 7.


Example 3:
Input: n = 4, k = 4
Output: -1
Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.


Example 4:
Input: n = 1, k = 1
Output: 1
Explanation: Factors list is [1], the 1st factor is 1.


Example 5:
Input: n = 1000, k = 3
Output: 4
Explanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].


Constraints:
`1 <= k <= n <= 1000`",Medium,https://leetcode.com/problems/the-kth-factor-of-n,"Expedia,Twitter",Math,305,,"given two positive integers `n` and `k`. a factor of an integer `n` is defined as an integer `i` where `n % i == 0`. consider a list of all factors of `n` sorted in ascending order, return the `kth` factor in this list or return -1 if `n` has less than `k` factors.","input: n = 12, k = 3 output: 3 explanation: factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3. example 2: input: n = 7, k = 2 output: 7 explanation: factors list is [1, 7], the 2nd factor is 7. example 3: input: n = 4, k = 4 output: -1 explanation: factors list is [1, 2, 4], there is only 3 factors. we should return -1. example 4: input: n = 1, k = 1 output: 1 explanation: factors list is [1], the 1st factor is 1. example 5: input: n = 1000, k = 3 output: 4 explanation: factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].",`1 <= k <= n <= 1000`,
1493,Longest Subarray of 1's After Deleting One Element,"Given a binary array `nums`, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array.

Return 0 if there is no such subarray.


Example 1:
Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.


Example 2:
Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].


Example 3:
Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.


Example 4:
Input: nums = [1,1,0,0,1,1,1,0,1]
Output: 4

Example 5:
Input: nums = [0,0,0]
Output: 0

Constraints:
`1 <= nums.length <= 10^5`
`nums[i]` is either `0` or `1`.",Medium,https://leetcode.com/problems/longest-subarray-of-1s-after-deleting-one-element,Yandex,Array,371,,"given a binary array `nums`, you should delete one element from it. return the size of the longest non-empty subarray containing only 1's in the resulting array. return 0 if there is no such subarray.","input: nums = [1,1,0,1] output: 3 explanation: after deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's. example 2: input: nums = [0,1,1,1,0,1,1,0,1] output: 5 explanation: after deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1]. example 3: input: nums = [1,1,1] output: 2 explanation: you must delete one element. example 4: input: nums = [1,1,0,0,1,1,1,0,1] output: 4 example 5: input: nums = [0,0,0] output: 0",`1 <= nums.length <= 10^5` `nums[i]` is either `0` or `1`.,
1494,Parallel Courses II,"Given the integer `n` representing the number of courses at some university labeled from `1` to `n`, and the array `dependencies` where `dependencies[i] = [xi, yi]` represents a prerequisite relationship, that is, the course `xi` must be taken before the course `yi`. Also, you are given the integer `k`.

In one semester you can take at most `k` courses as long as you have taken all the prerequisites for the courses you are taking.

Return the minimum number of semesters to take all courses. It is guaranteed that you can take all courses in some way.


Example 1:
Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2
Output: 3 
Explanation: The figure above represents the given graph. In this case we can take courses 2 and 3 in the first semester, then take course 1 in the second semester and finally take course 4 in the third semester.


Example 2:
Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2
Output: 4 
Explanation: The figure above represents the given graph. In this case one optimal way to take all courses is: take courses 2 and 3 in the first semester and take course 4 in the second semester, then take course 1 in the third semester and finally take course 5 in the fourth semester.


Example 3:
Input: n = 11, dependencies = [], k = 2
Output: 6

Constraints:
`1 <= n <= 15`
`1 <= k <= n`
`0 <= dependencies.length <= n * (n-1) / 2`
`dependencies[i].length == 2`
`1 <= xi, yi <= n`
`xi != yi`
All prerequisite relationships are distinct, that is, `dependencies[i] != dependencies[j]`.

The given graph is a directed acyclic graph.",Hard,https://leetcode.com/problems/parallel-courses-ii,Microsoft,Graph,353,"[Parallel Courses, /problems/parallel-courses/, Medium]","given the integer `n` representing the number of courses at some university labeled from `1` to `n`, and the array `dependencies` where `dependencies[i] = [xi, yi]` represents a prerequisite relationship, that is, the course `xi` must be taken before the course `yi`. also, you are given the integer `k`. in one semester you can take at most `k` courses as long as you have taken all the prerequisites for the courses you are taking. return the minimum number of semesters to take all courses. it is guaranteed that you can take all courses in some way.","input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2 output: 3 explanation: the figure above represents the given graph. in this case we can take courses 2 and 3 in the first semester, then take course 1 in the second semester and finally take course 4 in the third semester. example 2: input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2 output: 4 explanation: the figure above represents the given graph. in this case one optimal way to take all courses is: take courses 2 and 3 in the first semester and take course 4 in the second semester, then take course 1 in the third semester and finally take course 5 in the fourth semester. example 3: input: n = 11, dependencies = [], k = 2 output: 6","`1 <= n <= 15` `1 <= k <= n` `0 <= dependencies.length <= n * (n-1) / 2` `dependencies[i].length == 2` `1 <= xi, yi <= n` `xi != yi` all prerequisite relationships are distinct, that is, `dependencies[i] != dependencies[j]`. the given graph is a directed acyclic graph.",
1495,Friendly Movies Streamed Last Month,SQL Schema,Easy,https://leetcode.com/problems/friendly-movies-streamed-last-month,Amazon,,30,,sql schema,,,
1496,Path Crossing,"Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each representing moving one unit north, south, east, or west, respectively. You start at the origin `(0, 0)` on a 2D plane and walk on the path specified by `path`.

Return `True` if the path crosses itself at any point, that is, if at any time you are on a location you've previously visited. Return `False` otherwise.


Example 1:
Input: path = ""NES""
Output: false 
Explanation: Notice that the path doesn't cross any point more than once.


Example 2:
Input: path = ""NESWW""
Output: true
Explanation: Notice that the path visits the origin twice.


Constraints:
`1 <= path.length <= 10^4`
`path` will only consist of characters in `{'N', 'S', 'E', 'W}`",Easy,https://leetcode.com/problems/path-crossing,Amazon,String,286,,"given a string `path`, where `path[i] = 'n'`, `'s'`, `'e'` or `'w'`, each representing moving one unit north, south, east, or west, respectively. you start at the origin `(0, 0)` on a 2d plane and walk on the path specified by `path`. return `true` if the path crosses itself at any point, that is, if at any time you are on a location you've previously visited. return `false` otherwise.","input: path = ""nes"" output: false explanation: notice that the path doesn't cross any point more than once. example 2: input: path = ""nesww"" output: true explanation: notice that the path visits the origin twice.","`1 <= path.length <= 10^4` `path` will only consist of characters in `{'n', 's', 'e', 'w}`",
1497,Check If Array Pairs Are Divisible by k,"Given an array of integers `arr` of even length `n` and an integer `k`.

We want to divide the array into exactly `n / 2` pairs such that the sum of each pair is divisible by `k`.

Return True If you can find a way to do that or False otherwise.


Example 1:
Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5
Output: true
Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).


Example 2:
Input: arr = [1,2,3,4,5,6], k = 7
Output: true
Explanation: Pairs are (1,6),(2,5) and(3,4).


Example 3:
Input: arr = [1,2,3,4,5,6], k = 10
Output: false
Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.


Example 4:
Input: arr = [-10,10], k = 2
Output: true

Example 5:
Input: arr = [-1,1,-2,2,-3,3,-4,4], k = 3
Output: true

Constraints:
`arr.length == n`
`1 <= n <= 105`
`n` is even.

`-109 <= arr[i] <= 109`
`1 <= k <= 105`",Medium,https://leetcode.com/problems/check-if-array-pairs-are-divisible-by-k,Paypal,"Array,Math,Greedy",444,,given an array of integers `arr` of even length `n` and an integer `k`. we want to divide the array into exactly `n / 2` pairs such that the sum of each pair is divisible by `k`. return true if you can find a way to do that or false otherwise.,"input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5 output: true explanation: pairs are (1,9),(2,8),(3,7),(4,6) and (5,10). example 2: input: arr = [1,2,3,4,5,6], k = 7 output: true explanation: pairs are (1,6),(2,5) and(3,4). example 3: input: arr = [1,2,3,4,5,6], k = 10 output: false explanation: you can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10. example 4: input: arr = [-10,10], k = 2 output: true example 5: input: arr = [-1,1,-2,2,-3,3,-4,4], k = 3 output: true",`arr.length == n` `1 <= n <= 10^5` `n` is even. `-10^9 <= arr[i] <= 10^9` `1 <= k <= 10^5`,
1498,Number of Subsequences That Satisfy the Given Sum Condition,"Given an array of integers `nums` and an integer `target`.

Return the number of non-empty subsequences of `nums` such that the sum of the minimum and maximum element on it is less or equal to `target`. Since the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: nums = [3,5,6,7], target = 9
Output: 4
Explanation: There are 4 subsequences that satisfy the condition.

[3] -> Min value + max value <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)

Example 2:
Input: nums = [3,3,6,8], target = 10
Output: 6
Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).

[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]

Example 3:
Input: nums = [2,3,3,4,6,7], target = 12
Output: 61
Explanation: There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]).

Number of valid subsequences (63 - 2 = 61).


Example 4:
Input: nums = [5,2,4,1,7,6,8], target = 16
Output: 127
Explanation: All non-empty subset satisfy the condition (2^7 - 1) = 127

Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 106`
`1 <= target <= 106`",Medium,https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition,Facebook,"Sort,Sliding Window",544,,"given an array of integers `nums` and an integer `target`. return the number of non-empty subsequences of `nums` such that the sum of the minimum and maximum element on it is less or equal to `target`. since the answer may be too large, return it modulo `109 + 7`.","input: nums = [3,5,6,7], target = 9 output: 4 explanation: there are 4 subsequences that satisfy the condition. [3] -> min value + max value <= target (3 + 3 <= 9) [3,5] -> (3 + 5 <= 9) [3,5,6] -> (3 + 6 <= 9) [3,6] -> (3 + 6 <= 9) example 2: input: nums = [3,3,6,8], target = 10 output: 6 explanation: there are 6 subsequences that satisfy the condition. (nums can have repeated numbers). [3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6] example 3: input: nums = [2,3,3,4,6,7], target = 12 output: 61 explanation: there are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]). number of valid subsequences (63 - 2 = 61). example 4: input: nums = [5,2,4,1,7,6,8], target = 16 output: 127 explanation: all non-empty subset satisfy the condition (2^7 - 1) = 127",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 10^6` `1 <= target <= 10^6`,
1499,Max Value of Equation,"Given an array `points` containing the coordinates of points on a 2D plane, sorted by the x-values, where `points[i] = [xi, yi]` such that `xi < xj` for all `1 <= i < j <= points.length`. You are also given an integer `k`.

Find the maximum value of the equation `yi + yj + |xi - xj|` where `|xi - xj| <= k` and `1 <= i < j <= points.length`. It is guaranteed that there exists at least one pair of points that satisfy the constraint `|xi - xj| <= k`.


Example 1:
Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1
Output: 4
Explanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.

No other pairs satisfy the condition, so we return the max of 4 and 1.


Example 2:
Input: points = [[0,0],[3,0],[9,2]], k = 3
Output: 3
Explanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.


Constraints:
`2 <= points.length <= 10^5`
`points[i].length == 2`
`-10^8 <= points[i][0], points[i][1] <= 10^8`
`0 <= k <= 2 * 10^8`
`points[i][0] < points[j][0]` for all `1 <= i < j <= points.length`
`xi` form a strictly increasing sequence.",Hard,https://leetcode.com/problems/max-value-of-equation,Google,"Array,Sliding Window",349,,"given an array `points` containing the coordinates of points on a 2d plane, sorted by the x-values, where `points[i] = [xi, yi]` such that `xi < xj` for all `1 <= i < j <= points.length`. you are also given an integer `k`. find the maximum value of the equation `yi + yj + |xi - xj|` where `|xi - xj| <= k` and `1 <= i < j <= points.length`. it is guaranteed that there exists at least one pair of points that satisfy the constraint `|xi - xj| <= k`.","input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1 output: 4 explanation: the first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1. no other pairs satisfy the condition, so we return the max of 4 and 1. example 2: input: points = [[0,0],[3,0],[9,2]], k = 3 output: 3 explanation: only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.","`2 <= points.length <= 10^5` `points[i].length == 2` `-10^8 <= points[i][0], points[i][1] <= 10^8` `0 <= k <= 2 * 10^8` `points[i][0] < points[j][0]` for all `1 <= i < j <= points.length` `xi` form a strictly increasing sequence.",
1500,Design a File Sharing System,"We will use a file-sharing system to share a very large file which consists of `m` small chunks with IDs from `1` to `m`.

When users join the system, the system should assign a unique ID to them. The unique ID should be used once for each user, but when a user leaves the system, the ID can be reused again.

Users can request a certain chunk of the file, the system should return a list of IDs of all the users who own this chunk. If the user receive a non-empty list of IDs, they receive the requested chunk successfully.

Implement the `FileSharing` class:
`FileSharing(int m)` Initializes the object with a file of `m` chunks.

`int join(int[] ownedChunks)`: A new user joined the system owning some chunks of the file, the system should assign an id to the user which is the smallest positive integer not taken by any other user. Return the assigned id.

`void leave(int userID)`: The user with `userID` will leave the system, you cannot take file chunks from them anymore.

`int[] request(int userID, int chunkID)`: The user `userID` requested the file chunk with `chunkID`. Return a list of the IDs of all users that own this chunk sorted in ascending order.

Follow-ups:
What happens if the system identifies the user by their IP address instead of their unique ID and users disconnect and connect from the system with the same IP?
If the users in the system join and leave the system frequently without requesting any chunks, will your solution still be efficient?
If all each user join the system one time, request all files and then leave, will your solution still be efficient?
If the system will be used to share `n` files where the `ith` file consists of `m[i]`, what are the changes you have to do?

Example:
Input:
[""FileSharing"",""join"",""join"",""join"",""request"",""request"",""leave"",""request"",""leave"",""join""]
[[4],[[1,2]],[[2,3]],[[4]],[1,3],[2,2],[1],[2,1],[2],[[]]]
Output:
[null,1,2,3,[2],[1,2],null,[],null,1]
Explanation:
FileSharing fileSharing = new FileSharing(4); // We use the system to share a file of 4 chunks.

fileSharing.join([1, 2]);    // A user who has chunks [1,2] joined the system, assign id = 1 to them and return 1.

fileSharing.join([2, 3]);    // A user who has chunks [2,3] joined the system, assign id = 2 to them and return 2.

fileSharing.join([4]);       // A user who has chunk [4] joined the system, assign id = 3 to them and return 3.

fileSharing.request(1, 3);   // The user with id = 1 requested the third file chunk, as only the user with id = 2 has the file, return [2] . Notice that user 1 now has chunks [1,2,3].

fileSharing.request(2, 2);   // The user with id = 2 requested the second file chunk, users with ids [1,2] have this chunk, thus we return [1,2].

fileSharing.leave(1);        // The user with id = 1 left the system, all the file chunks with them are no longer available for other users.

fileSharing.request(2, 1);   // The user with id = 2 requested the first file chunk, no one in the system has this chunk, we return empty list [].

fileSharing.leave(2);        // The user with id = 2 left the system.

fileSharing.join([]);        // A user who doesn't have any chunks joined the system, assign id = 1 to them and return 1. Notice that ids 1 and 2 are free and we can reuse them.


Constraints:
`1 <= m <= 10^5`
`0 <= ownedChunks.length <= min(100, m)`
`1 <= ownedChunks[i] <= m`
Values of `ownedChunks` are unique.

`1 <= chunkID <= m`
`userID` is guaranteed to be a user in the system if you assign the IDs correctly. 
At most `10^4` calls will be made to `join`, `leave` and `request`.

Each call to `leave` will have a matching call for `join`.",Medium,https://leetcode.com/problems/design-a-file-sharing-system,Twitch,"Array,Design",26,"[Design Twitter, /problems/design-twitter/, Medium]","we will use a file-sharing system to share a very large file which consists of `m` small chunks with ids from `1` to `m`. when users join the system, the system should assign a unique id to them. the unique id should be used once for each user, but when a user leaves the system, the id can be reused again. users can request a certain chunk of the file, the system should return a list of ids of all the users who own this chunk. if the user receive a non-empty list of ids, they receive the requested chunk successfully. implement the `filesharing` class: `filesharing(int m)` initializes the object with a file of `m` chunks. `int join(int[] ownedchunks)`: a new user joined the system owning some chunks of the file, the system should assign an id to the user which is the smallest positive integer not taken by any other user. return the assigned id. `void leave(int userid)`: the user with `userid` will leave the system, you cannot take file chunks from them anymore. `int[] request(int userid, int chunkid)`: the user `userid` requested the file chunk with `chunkid`. return a list of the ids of all users that own this chunk sorted in ascending order. follow-ups: what happens if the system identifies the user by their ip address instead of their unique id and users disconnect and connect from the system with the same ip? if the users in the system join and leave the system frequently without requesting any chunks, will your solution still be efficient? if all each user join the system one time, request all files and then leave, will your solution still be efficient? if the system will be used to share `n` files where the `ith` file consists of `m[i]`, what are the changes you have to do?","input: [""filesharing"",""join"",""join"",""join"",""request"",""request"",""leave"",""request"",""leave"",""join""] [[4],[[1,2]],[[2,3]],[[4]],[1,3],[2,2],[1],[2,1],[2],[[]]] output: [null,1,2,3,[2],[1,2],null,[],null,1] explanation: filesharing filesharing = new filesharing(4); // we use the system to share a file of 4 chunks. filesharing.join([1, 2]); // a user who has chunks [1,2] joined the system, assign id = 1 to them and return 1. filesharing.join([2, 3]); // a user who has chunks [2,3] joined the system, assign id = 2 to them and return 2. filesharing.join([4]); // a user who has chunk [4] joined the system, assign id = 3 to them and return 3. filesharing.request(1, 3); // the user with id = 1 requested the third file chunk, as only the user with id = 2 has the file, return [2] . notice that user 1 now has chunks [1,2,3]. filesharing.request(2, 2); // the user with id = 2 requested the second file chunk, users with ids [1,2] have this chunk, thus we return [1,2]. filesharing.leave(1); // the user with id = 1 left the system, all the file chunks with them are no longer available for other users. filesharing.request(2, 1); // the user with id = 2 requested the first file chunk, no one in the system has this chunk, we return empty list []. filesharing.leave(2); // the user with id = 2 left the system. filesharing.join([]); // a user who doesn't have any chunks joined the system, assign id = 1 to them and return 1. notice that ids 1 and 2 are free and we can reuse them.","`1 <= m <= 10^5` `0 <= ownedchunks.length <= min(10^0, m)` `1 <= ownedchunks[i] <= m` values of `ownedchunks` are unique. `1 <= chunkid <= m` `userid` is guaranteed to be a user in the system if you assign the ids correctly. at most `10^4` calls will be made to `join`, `leave` and `request`. each call to `leave` will have a matching call for `join`.",
1501,Countries You Can Safely Invest In,SQL Schema,Medium,https://leetcode.com/problems/countries-you-can-safely-invest-in,,,76,,sql schema,,,
1502,Can Make Arithmetic Progression From Sequence,"Given an array of numbers `arr`. A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.

Return `true` if the array can be rearranged to form an arithmetic progression, otherwise, return `false`.


Example 1:
Input: arr = [3,5,1]
Output: true
Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.


Example 2:
Input: arr = [1,2,4]
Output: false
Explanation: There is no way to reorder the elements to obtain an arithmetic progression.


Constraints:
`2 <= arr.length <= 1000`
`-10^6 <= arr[i] <= 10^6`",Easy,https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence,Amazon,"Array,Sort",321,"[Arithmetic Subarrays, /problems/arithmetic-subarrays/, Medium]","given an array of numbers `arr`. a sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same. return `true` if the array can be rearranged to form an arithmetic progression, otherwise, return `false`.","input: arr = [3,5,1] output: true explanation: we can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements. example 2: input: arr = [1,2,4] output: false explanation: there is no way to reorder the elements to obtain an arithmetic progression.",`2 <= arr.length <= 1000` `-10^6 <= arr[i] <= 10^6`,
1503,Last Moment Before All Ants Fall Out of a Plank,"We have a wooden plank of the length `n` units. Some ants are walking on the plank, each ant moves with speed 1 unit per second. Some of the ants move to the left, the other move to the right.

When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions doesn't take any additional time.

When an ant reaches one end of the plank at a time `t`, it falls out of the plank imediately.

Given an integer `n` and two integer arrays `left` and `right`, the positions of the ants moving to the left and the right. Return the moment when the last ant(s) fall out of the plank.


Example 1:
Input: n = 4, left = [4,3], right = [0,1]
Output: 4
Explanation: In the image above:
-The ant at index 0 is named A and going to the right.

-The ant at index 1 is named B and going to the right.

-The ant at index 3 is named C and going to the left.

-The ant at index 4 is named D and going to the left.

Note that the last moment when an ant was on the plank is t = 4 second, after that it falls imediately out of the plank. (i.e. We can say that at t = 4.0000000001, there is no ants on the plank).


Example 2:
Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7]
Output: 7
Explanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall.


Example 3:
Input: n = 7, left = [0,1,2,3,4,5,6,7], right = []
Output: 7
Explanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall.


Example 4:
Input: n = 9, left = [5], right = [4]
Output: 5
Explanation: At t = 1 second, both ants will be at the same intial position but with different direction.


Example 5:
Input: n = 6, left = [6], right = [0]
Output: 6

Constraints:
`1 <= n <= 10^4`
`0 <= left.length <= n + 1`
`0 <= left[i] <= n`
`0 <= right.length <= n + 1`
`0 <= right[i] <= n`
`1 <= left.length + right.length <= n + 1`
All values of `left` and `right` are unique, and each value can appear only in one of the two arrays.",Medium,https://leetcode.com/problems/last-moment-before-all-ants-fall-out-of-a-plank,Google,"Array,Brainteaser",221,,"we have a wooden plank of the length `n` units. some ants are walking on the plank, each ant moves with speed 1 unit per second. some of the ants move to the left, the other move to the right. when two ants moving in two different directions meet at some point, they change their directions and continue moving again. assume changing directions doesn't take any additional time. when an ant reaches one end of the plank at a time `t`, it falls out of the plank imediately. given an integer `n` and two integer arrays `left` and `right`, the positions of the ants moving to the left and the right. return the moment when the last ant(s) fall out of the plank.","input: n = 4, left = [4,3], right = [0,1] output: 4 explanation: in the image above: -the ant at index 0 is named a and going to the right. -the ant at index 1 is named b and going to the right. -the ant at index 3 is named c and going to the left. -the ant at index 4 is named d and going to the left. note that the last moment when an ant was on the plank is t = 4 second, after that it falls imediately out of the plank. (i.e. we can say that at t = 4.0000000001, there is no ants on the plank). example 2: input: n = 7, left = [], right = [0,1,2,3,4,5,6,7] output: 7 explanation: all ants are going to the right, the ant at index 0 needs 7 seconds to fall. example 3: input: n = 7, left = [0,1,2,3,4,5,6,7], right = [] output: 7 explanation: all ants are going to the left, the ant at index 7 needs 7 seconds to fall. example 4: input: n = 9, left = [5], right = [4] output: 5 explanation: at t = 1 second, both ants will be at the same intial position but with different direction. example 5: input: n = 6, left = [6], right = [0] output: 6","`1 <= n <= 10^4` `0 <= left.length <= n + 1` `0 <= left[i] <= n` `0 <= right.length <= n + 1` `0 <= right[i] <= n` `1 <= left.length + right.length <= n + 1` all values of `left` and `right` are unique, and each value can appear only in one of the two arrays.",
1504,Count Submatrices With All Ones,"Given a `rows * columns` matrix `mat` of ones and zeros, return how many submatrices have all ones.


Example 1:
Input: mat = [[1,0,1],
              [1,1,0],
              [1,1,0]]
Output: 13
Explanation:
There are 6 rectangles of side 1x1.

There are 2 rectangles of side 1x2.

There are 3 rectangles of side 2x1.

There is 1 rectangle of side 2x2. 
There is 1 rectangle of side 3x1.

Total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.


Example 2:
Input: mat = [[0,1,1,0],
              [0,1,1,1],
              [1,1,1,0]]
Output: 24
Explanation:
There are 8 rectangles of side 1x1.

There are 5 rectangles of side 1x2.

There are 2 rectangles of side 1x3. 
There are 4 rectangles of side 2x1.

There are 2 rectangles of side 2x2. 
There are 2 rectangles of side 3x1. 
There is 1 rectangle of side 3x2. 
Total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.


Example 3:
Input: mat = [[1,1,1,1,1,1]]
Output: 21

Example 4:
Input: mat = [[1,0,1],[0,1,0],[1,0,1]]
Output: 5

Constraints:
`1 <= rows <= 150`
`1 <= columns <= 150`
`0 <= mat[i][j] <= 1`",Medium,https://leetcode.com/problems/count-submatrices-with-all-ones,Google,Dynamic Programming,833,,"given a `rows * columns` matrix `mat` of ones and zeros, return how many submatrices have all ones.","input: mat = [[1,0,1], [1,1,0], [1,1,0]] output: 13 explanation: there are 6 rectangles of side 1x1. there are 2 rectangles of side 1x2. there are 3 rectangles of side 2x1. there is 1 rectangle of side 2x2. there is 1 rectangle of side 3x1. total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13. example 2: input: mat = [[0,1,1,0], [0,1,1,1], [1,1,1,0]] output: 24 explanation: there are 8 rectangles of side 1x1. there are 5 rectangles of side 1x2. there are 2 rectangles of side 1x3. there are 4 rectangles of side 2x1. there are 2 rectangles of side 2x2. there are 2 rectangles of side 3x1. there is 1 rectangle of side 3x2. total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24. example 3: input: mat = [[1,1,1,1,1,1]] output: 21 example 4: input: mat = [[1,0,1],[0,1,0],[1,0,1]] output: 5",`1 <= rows <= 150` `1 <= columns <= 150` `0 <= mat[i][j] <= 1`,
1505,Minimum Possible Integer After at Most K Adjacent Swaps On Digits,"Given a string `num` representing the digits of a very large integer and an integer `k`.

You are allowed to swap any two adjacent digits of the integer at most `k` times.

Return the minimum integer you can obtain also as a string.


Example 1:
Input: num = ""4321"", k = 4
Output: ""1342""
Explanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.


Example 2:
Input: num = ""100"", k = 1
Output: ""010""
Explanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.


Example 3:
Input: num = ""36789"", k = 1000
Output: ""36789""
Explanation: We can keep the number without any swaps.


Example 4:
Input: num = ""22"", k = 22
Output: ""22""

Example 5:
Input: num = ""9438957234785635408"", k = 23
Output: ""0345989723478563548""

Constraints:
`1 <= num.length <= 30000`
`num` contains digits only and doesn't have leading zeros.

`1 <= k <= 10^9`",Hard,https://leetcode.com/problems/minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits,Amazon,Greedy,212,,given a string `num` representing the digits of a very large integer and an integer `k`. you are allowed to swap any two adjacent digits of the integer at most `k` times. return the minimum integer you can obtain also as a string.,"input: num = ""4321"", k = 4 output: ""1342"" explanation: the steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown. example 2: input: num = ""100"", k = 1 output: ""010"" explanation: it's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros. example 3: input: num = ""36789"", k = 1000 output: ""36789"" explanation: we can keep the number without any swaps. example 4: input: num = ""22"", k = 22 output: ""22"" example 5: input: num = ""9438957234785635408"", k = 23 output: ""0345989723478563548""",`1 <= num.length <= 30000` `num` contains digits only and doesn't have leading zeros. `1 <= k <= 10^9`,
1506,Find Root of N-Ary Tree,"You are given all the nodes of an N-ary tree as an array of `Node` objects, where each node has a unique value.

Return the root of the N-ary tree.

Custom testing:
An N-ary tree can be serialized as represented in its level order traversal where each group of children is separated by the `null` value (see examples).

For example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.

The testing will be done in the following way:
The input data should be provided as a serialization of the tree.

The driver code will construct the tree from the serialized input data and put each `Node` object into an array in an arbitrary order.

The driver code will pass the array to `findRoot`, and your function should find and return the root `Node` object in the array.

The driver code will take the returned `Node` object and serialize it. If the serialized value and the input data are the same, the test passes.


Example 1:
Input: tree = [1,null,3,2,4,null,5,6]
Output: [1,null,3,2,4,null,5,6]
Explanation: The tree from the input data is shown above.

The driver code creates the tree and gives findRoot the Node objects in an arbitrary order.

For example, the passed array could be [Node(5),Node(4),Node(3),Node(6),Node(2),Node(1)] or [Node(2),Node(6),Node(1),Node(3),Node(5),Node(4)].

The findRoot function should return the root Node(1), and the driver code will serialize it and compare with the input data.

The input data and serialized Node(1) are the same, so the test passes.


Example 2:
Input: tree = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]

Constraints:
The total number of nodes is between `[1, 5 * 104]`.

Each node has a unique value.

Follow up:
Could you solve this problem in constant space complexity with a linear time algorithm?",Medium,https://leetcode.com/problems/find-root-of-n-ary-tree,Google,,224,,"you are given all the nodes of an n-ary tree as an array of `node` objects, where each node has a unique value. return the root of the n-ary tree. custom testing: an n-ary tree can be serialized as represented in its level order traversal where each group of children is separated by the `null` value (see examples). for example, the above tree is serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`. the testing will be done in the following way: the input data should be provided as a serialization of the tree. the driver code will construct the tree from the serialized input data and put each `node` object into an array in an arbitrary order. the driver code will pass the array to `findroot`, and your function should find and return the root `node` object in the array. the driver code will take the returned `node` object and serialize it. if the serialized value and the input data are the same, the test passes.","input: tree = [1,null,3,2,4,null,5,6] output: [1,null,3,2,4,null,5,6] explanation: the tree from the input data is shown above. the driver code creates the tree and gives findroot the node objects in an arbitrary order. for example, the passed array could be [node(5),node(4),node(3),node(6),node(2),node(1)] or [node(2),node(6),node(1),node(3),node(5),node(4)]. the findroot function should return the root node(1), and the driver code will serialize it and compare with the input data. the input data and serialized node(1) are the same, so the test passes. example 2: input: tree = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]","the total number of nodes is between `[1, 5 * 10^4]`. each node has a unique value.",could you solve this problem in constant space complexity with a linear time algorithm?
1507,Reformat Date,"Given a `date` string in the form `Day Month Year`, where:
`Day` is in the set `{""1st"", ""2nd"", ""3rd"", ""4th"", ..., ""30th"", ""31st""}`.

`Month` is in the set `{""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec""}`.

`Year` is in the range `[1900, 2100]`.

Convert the date string to the format `YYYY-MM-DD`, where:
`YYYY` denotes the 4 digit year.

`MM` denotes the 2 digit month.

`DD` denotes the 2 digit day.


Example 1:
Input: date = ""20th Oct 2052""
Output: ""2052-10-20""

Example 2:
Input: date = ""6th Jun 1933""
Output: ""1933-06-06""

Example 3:
Input: date = ""26th May 1960""
Output: ""1960-05-26""

Constraints:
The given dates are guaranteed to be valid, so no error handling is necessary.",Easy,https://leetcode.com/problems/reformat-date,Expedia,String,118,,"given a `date` string in the form `day month year`, where: `day` is in the set `{""1st"", ""2nd"", ""3rd"", ""4th"", ..., ""30th"", ""31st""}`. `month` is in the set `{""jan"", ""feb"", ""mar"", ""apr"", ""may"", ""jun"", ""jul"", ""aug"", ""sep"", ""oct"", ""nov"", ""dec""}`. `year` is in the range `[1900, 2100]`. convert the date string to the format `yyyy-mm-dd`, where: `yyyy` denotes the 4 digit year. `mm` denotes the 2 digit month. `dd` denotes the 2 digit day.","input: date = ""20th oct 2052"" output: ""2052-10-20"" example 2: input: date = ""6th jun 1933"" output: ""1933-06-06"" example 3: input: date = ""26th may 1960"" output: ""1960-05-26""","the given dates are guaranteed to be valid, so no error handling is necessary.",
1508,Range Sum of Sorted Subarray Sums,"Given the array `nums` consisting of `n` positive integers. You computed the sum of all non-empty continous subarrays from the array and then sort them in non-decreasing order, creating a new array of `n * (n + 1) / 2` numbers.

Return the sum of the numbers from index `left` to index `right` (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 10^9 + 7.


Example 1:
Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
Output: 13 
Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. 

Example 2:
Input: nums = [1,2,3,4], n = 4, left = 3, right = 4
Output: 6
Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.


Example 3:
Input: nums = [1,2,3,4], n = 4, left = 1, right = 10
Output: 50

Constraints:
`1 <= nums.length <= 10^3`
`nums.length == n`
`1 <= nums[i] <= 100`
`1 <= left <= right <= n * (n + 1) / 2`",Medium,https://leetcode.com/problems/range-sum-of-sorted-subarray-sums,Google,"Array,Sort",294,,"given the array `nums` consisting of `n` positive integers. you computed the sum of all non-empty continous subarrays from the array and then sort them in non-decreasing order, creating a new array of `n * (n + 1) / 2` numbers. return the sum of the numbers from index `left` to index `right` (indexed from 1), inclusive, in the new array. since the answer can be a huge number return it modulo 10^9 + 7.","input: nums = [1,2,3,4], n = 4, left = 1, right = 5 output: 13 explanation: all subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. after sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. the sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. example 2: input: nums = [1,2,3,4], n = 4, left = 3, right = 4 output: 6 explanation: the given array is the same as example 1. we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. the sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6. example 3: input: nums = [1,2,3,4], n = 4, left = 1, right = 10 output: 50",`1 <= nums.length <= 10^3` `nums.length == n` `1 <= nums[i] <= 10^0` `1 <= left <= right <= n * (n + 1) / 2`,
1509,Minimum Difference Between Largest and Smallest Value in Three Moves,"Given an array `nums`, you are allowed to choose one element of `nums` and change it by any value in one move.

Return the minimum difference between the largest and smallest value of `nums` after perfoming at most 3 moves.


Example 1:
Input: nums = [5,3,2,4]
Output: 0
Explanation: Change the array [5,3,2,4] to [2,2,2,2].

The difference between the maximum and minimum is 2-2 = 0.


Example 2:
Input: nums = [1,5,0,10,14]
Output: 1
Explanation: Change the array [1,5,0,10,14] to [1,1,0,1,1]. 
The difference between the maximum and minimum is 1-0 = 1.


Example 3:
Input: nums = [6,6,0,1,1,4,6]
Output: 2

Example 4:
Input: nums = [1,5,6,14,15]
Output: 1

Constraints:
`1 <= nums.length <= 10^5`
`-10^9 <= nums[i] <= 10^9`",Medium,https://leetcode.com/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves,Google,"Array,Sort",298,,"given an array `nums`, you are allowed to choose one element of `nums` and change it by any value in one move. return the minimum difference between the largest and smallest value of `nums` after perfoming at most 3 moves.","input: nums = [5,3,2,4] output: 0 explanation: change the array [5,3,2,4] to [2,2,2,2]. the difference between the maximum and minimum is 2-2 = 0. example 2: input: nums = [1,5,0,10,14] output: 1 explanation: change the array [1,5,0,10,14] to [1,1,0,1,1]. the difference between the maximum and minimum is 1-0 = 1. example 3: input: nums = [6,6,0,1,1,4,6] output: 2 example 4: input: nums = [1,5,6,14,15] output: 1",`1 <= nums.length <= 10^5` `-10^9 <= nums[i] <= 10^9`,
1510,Stone Game IV,"Alice and Bob take turns playing a game, with Alice starting first.

Initially, there are `n` stones in a pile.  On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.

Also, if a player cannot make a move, he/she loses the game.

Given a positive integer `n`. Return `True` if and only if Alice wins the game otherwise return `False`, assuming both players play optimally.


Example 1:
Input: n = 1
Output: true
Explanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.


Example 2:
Input: n = 2
Output: false
Explanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).


Example 3:
Input: n = 4
Output: true
Explanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).


Example 4:
Input: n = 7
Output: false
Explanation: Alice can't win the game if Bob plays optimally.

If Alice starts removing 4 stones, Bob will remove 1 stone then Alice should remove only 1 stone and finally Bob removes the last one (7 -> 3 -> 2 -> 1 -> 0). 
If Alice starts removing 1 stone, Bob will remove 4 stones then Alice only can remove 1 stone and finally Bob removes the last one (7 -> 6 -> 2 -> 1 -> 0).


Example 5:
Input: n = 17
Output: false
Explanation: Alice can't win the game if Bob plays optimally.


Constraints:
`1 <= n <= 10^5`",Hard,https://leetcode.com/problems/stone-game-iv,Microsoft,Dynamic Programming,403,"[Stone Game V, /problems/stone-game-v/, Hard], [Stone Game VI, /problems/stone-game-vi/, Medium], [Stone Game VII, /problems/stone-game-vii/, Medium]","alice and bob take turns playing a game, with alice starting first. initially, there are `n` stones in a pile. on each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile. also, if a player cannot make a move, he/she loses the game. given a positive integer `n`. return `true` if and only if alice wins the game otherwise return `false`, assuming both players play optimally.","input: n = 1 output: true explanation: alice can remove 1 stone winning the game because bob doesn't have any moves. example 2: input: n = 2 output: false explanation: alice can only remove 1 stone, after that bob removes the last one winning the game (2 -> 1 -> 0). example 3: input: n = 4 output: true explanation: n is already a perfect square, alice can win with one move, removing 4 stones (4 -> 0). example 4: input: n = 7 output: false explanation: alice can't win the game if bob plays optimally. if alice starts removing 4 stones, bob will remove 1 stone then alice should remove only 1 stone and finally bob removes the last one (7 -> 3 -> 2 -> 1 -> 0). if alice starts removing 1 stone, bob will remove 4 stones then alice only can remove 1 stone and finally bob removes the last one (7 -> 6 -> 2 -> 1 -> 0). example 5: input: n = 17 output: false explanation: alice can't win the game if bob plays optimally.",`1 <= n <= 10^5`,
1511,Customer Order Frequency,SQL Schema,Easy,https://leetcode.com/problems/customer-order-frequency,Amazon,,102,,sql schema,,,
1512,Number of Good Pairs,"Given an array of integers `nums`.

A pair `(i,j)` is called good if `nums[i]` == `nums[j]` and `i` < `j`.

Return the number of good pairs.


Example 1:
Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.


Example 2:
Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.


Example 3:
Input: nums = [1,2,3]
Output: 0

Constraints:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",Easy,https://leetcode.com/problems/number-of-good-pairs,"Microsoft,Bloomberg,Amazon,Adobe,Apple","Array,Hash Table,Math",1058,,"given an array of integers `nums`. a pair `(i,j)` is called good if `nums[i]` == `nums[j]` and `i` < `j`. return the number of good pairs.","input: nums = [1,2,3,1,1,3] output: 4 explanation: there are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed. example 2: input: nums = [1,1,1,1] output: 6 explanation: each pair in the array are good. example 3: input: nums = [1,2,3] output: 0",`1 <= nums.length <= 10^0` `1 <= nums[i] <= 10^0`,
1513,Number of Substrings With Only 1s,"Given a binary string `s` (a string consisting only of '0' and '1's).

Return the number of substrings with all characters 1's.

Since the answer may be too large, return it modulo 10^9 + 7.


Example 1:
Input: s = ""0110111""
Output: 9
Explanation: There are 9 substring in total with only 1's characters.

""1"" -> 5 times.

""11"" -> 3 times.

""111"" -> 1 time.


Example 2:
Input: s = ""101""
Output: 2
Explanation: Substring ""1"" is shown 2 times in s.


Example 3:
Input: s = ""111111""
Output: 21
Explanation: Each substring contains only 1's characters.


Example 4:
Input: s = ""000""
Output: 0

Constraints:
`s[i] == '0'` or `s[i] == '1'`
`1 <= s.length <= 10^5`",Medium,https://leetcode.com/problems/number-of-substrings-with-only-1s,Google,"Math,String",303,"[Count Number of Homogenous Substrings, /problems/count-number-of-homogenous-substrings/, Medium]","given a binary string `s` (a string consisting only of '0' and '1's). return the number of substrings with all characters 1's. since the answer may be too large, return it modulo 10^9 + 7.","input: s = ""0110111"" output: 9 explanation: there are 9 substring in total with only 1's characters. ""1"" -> 5 times. ""11"" -> 3 times. ""111"" -> 1 time. example 2: input: s = ""101"" output: 2 explanation: substring ""1"" is shown 2 times in s. example 3: input: s = ""111111"" output: 21 explanation: each substring contains only 1's characters. example 4: input: s = ""000"" output: 0",`s[i] == '0'` or `s[i] == '1'` `1 <= s.length <= 10^5`,
1514,Path with Maximum Probability,"You are given an undirected weighted graph of `n` nodes (0-indexed), represented by an edge list where `edges[i] = [a, b]` is an undirected edge connecting the nodes `a` and `b` with a probability of success of traversing that edge `succProb[i]`.

Given two nodes `start` and `end`, find the path with the maximum probability of success to go from `start` to `end` and return its success probability.

If there is no path from `start` to `end`, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.


Example 1:
Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2
Output: 0.25000
Explanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.


Example 2:
Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2
Output: 0.30000

Example 3:
Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2
Output: 0.00000
Explanation: There is no path between 0 and 2.


Constraints:
`2 <= n <= 10^4`
`0 <= start, end < n`
`start != end`
`0 <= a, b < n`
`a != b`
`0 <= succProb.length == edges.length <= 2*10^4`
`0 <= succProb[i] <= 1`
There is at most one edge between every two nodes.",Medium,https://leetcode.com/problems/path-with-maximum-probability,Google,Graph,554,,"you are given an undirected weighted graph of `n` nodes (0-indexed), represented by an edge list where `edges[i] = [a, b]` is an undirected edge connecting the nodes `a` and `b` with a probability of success of traversing that edge `succprob[i]`. given two nodes `start` and `end`, find the path with the maximum probability of success to go from `start` to `end` and return its success probability. if there is no path from `start` to `end`, return 0. your answer will be accepted if it differs from the correct answer by at most 1e-5.","input: n = 3, edges = [[0,1],[1,2],[0,2]], succprob = [0.5,0.5,0.2], start = 0, end = 2 output: 0.25000 explanation: there are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25. example 2: input: n = 3, edges = [[0,1],[1,2],[0,2]], succprob = [0.5,0.5,0.3], start = 0, end = 2 output: 0.30000 example 3: input: n = 3, edges = [[0,1]], succprob = [0.5], start = 0, end = 2 output: 0.00000 explanation: there is no path between 0 and 2.","`2 <= n <= 10^4` `0 <= start, end < n` `start != end` `0 <= a, b < n` `a != b` `0 <= succprob.length == edges.length <= 2*10^4` `0 <= succprob[i] <= 1` there is at most one edge between every two nodes.",
1515,Best Position for a Service Centre,"A delivery company wants to build a new service centre in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new centre in a position such that the sum of the euclidean distances to all customers is minimum.

Given an array `positions` where `positions[i] = [xi, yi]` is the position of the `ith` customer on the map, return the minimum sum of the euclidean distances to all customers.

In other words, you need to choose the position of the service centre `[xcentre, ycentre]` such that the following formula is minimized:
Answers within `10^-5` of the actual value will be accepted.


Example 1:
Input: positions = [[0,1],[1,0],[1,2],[2,1]]
Output: 4.00000
Explanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.


Example 2:
Input: positions = [[1,1],[3,3]]
Output: 2.82843
Explanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843

Example 3:
Input: positions = [[1,1]]
Output: 0.00000

Example 4:
Input: positions = [[1,1],[0,0],[2,0]]
Output: 2.73205
Explanation: At the first glance, you may think that locating the centre at [1, 0] will achieve the minimum sum, but locating it at [1, 0] will make the sum of distances = 3.

Try to locate the centre at [1.0, 0.5773502711] you will see that the sum of distances is 2.73205.

Be careful with the precision!

Example 5:
Input: positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]
Output: 32.94036
Explanation: You can use [4.3460852395, 4.9813795505] as the position of the centre.


Constraints:
`1 <= positions.length <= 50`
`positions[i].length == 2`
`0 <= positions[i][0], positions[i][1] <= 100`",Hard,https://leetcode.com/problems/best-position-for-a-service-centre,"Reddit,Uber",Geometry,109,,"a delivery company wants to build a new service centre in a new city. the company knows the positions of all the customers in this city on a 2d-map and wants to build the new centre in a position such that the sum of the euclidean distances to all customers is minimum. given an array `positions` where `positions[i] = [xi, yi]` is the position of the `ith` customer on the map, return the minimum sum of the euclidean distances to all customers. in other words, you need to choose the position of the service centre `[xcentre, ycentre]` such that the following formula is minimized: answers within `10^-5` of the actual value will be accepted.","input: positions = [[0,1],[1,0],[1,2],[2,1]] output: 4.00000 explanation: as shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve. example 2: input: positions = [[1,1],[3,3]] output: 2.82843 explanation: the minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843 example 3: input: positions = [[1,1]] output: 0.00000 example 4: input: positions = [[1,1],[0,0],[2,0]] output: 2.73205 explanation: at the first glance, you may think that locating the centre at [1, 0] will achieve the minimum sum, but locating it at [1, 0] will make the sum of distances = 3. try to locate the centre at [1.0, 0.5773502711] you will see that the sum of distances is 2.73205. be careful with the precision! example 5: input: positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]] output: 32.94036 explanation: you can use [4.3460852395, 4.9813795505] as the position of the centre.","`1 <= positions.length <= 50` `positions[i].length == 2` `0 <= positions[i][0], positions[i][1] <= 10^0`",
1516,Move Sub-Tree of N-Ary Tree,"Given the `root` of an N-ary tree of unique values, and two nodes of the tree `p` and `q`.

You should move the subtree of the node `p` to become a direct child of node `q`. If `p` is already a direct child of `q`, don't change anything. Node `p` must be the last child in the children list of node `q`.

Return the root of the tree after adjusting it.

There are 3 cases for nodes `p` and `q`:
Node `q` is in the sub-tree of node `p`.

Node `p` is in the sub-tree of node `q`.

Neither node `p` is in the sub-tree of node `q` nor node `q` is in the sub-tree of node `p`.

In cases 2 and 3, you just need to move `p` (with its sub-tree) to be a child of `q`, but in case 1 the tree may be disconnected, thus you need to reconnect the tree again. Please read the examples carefully before solving this problem.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

For example, the above tree is serialized as [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14].


Example 1:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 4, q = 1
Output: [1,null,2,3,4,null,5,null,6,null,7,8]
Explanation: This example follows the second case as node p is in the sub-tree of node q. We move node p with its sub-tree to be a direct child of node q.

Notice that node 4 is the last child of node 1.


Example 2:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 7, q = 4
Output: [1,null,2,3,null,4,5,null,6,null,7,8]
Explanation: Node 7 is already a direct child of node 4. We don't change anything.


Example 3:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 3, q = 8
Output: [1,null,2,null,4,5,null,7,8,null,null,null,3,null,6]
Explanation: This example follows case 3 because node p is not in the sub-tree of node q and vice-versa. We can move node 3 with its sub-tree and make it as node 8's child.


Example 4:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 2, q = 7
Output: [1,null,7,3,null,2,null,6,null,4,5,null,null,8]
Explanation: Node q is in the sub-tree of node p, so this is case 1.

The first step, we move node p (with all of its sub-tree except for node q) and add it as a child to node q.

Then we will see that the tree is disconnected, you need to reconnect node q to replace node p as shown.


Example 5:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 1, q = 2
Output: [2,null,4,5,1,null,7,8,null,null,3,null,null,null,6]
Explanation: Node q is in the sub-tree of node p, so this is case 1.

The first step, we move node p (with all of its sub-tree except for node q) and add it as a child to node q.

As node p was the root of the tree, node q replaces it and becomes the root of the tree.


Constraints:
The total number of nodes is between `[2, 1000]`.

Each node has a unique value.

`p != null`
`q != null`
`p` and `q` are two different nodes (i.e. `p != q`).",Hard,https://leetcode.com/problems/move-sub-tree-of-n-ary-tree,Google,Tree,13,"[Find Root of N-Ary Tree, /problems/find-root-of-n-ary-tree/, Medium]","given the `root` of an n-ary tree of unique values, and two nodes of the tree `p` and `q`. you should move the subtree of the node `p` to become a direct child of node `q`. if `p` is already a direct child of `q`, don't change anything. node `p` must be the last child in the children list of node `q`. return the root of the tree after adjusting it. there are 3 cases for nodes `p` and `q`: node `q` is in the sub-tree of node `p`. node `p` is in the sub-tree of node `q`. neither node `p` is in the sub-tree of node `q` nor node `q` is in the sub-tree of node `p`. in cases 2 and 3, you just need to move `p` (with its sub-tree) to be a child of `q`, but in case 1 the tree may be disconnected, thus you need to reconnect the tree again. please read the examples carefully before solving this problem. nary-tree input serialization is represented in their level order traversal, each group of children is separated by the null value (see examples). for example, the above tree is serialized as [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14].","input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 4, q = 1 output: [1,null,2,3,4,null,5,null,6,null,7,8] explanation: this example follows the second case as node p is in the sub-tree of node q. we move node p with its sub-tree to be a direct child of node q. notice that node 4 is the last child of node 1. example 2: input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 7, q = 4 output: [1,null,2,3,null,4,5,null,6,null,7,8] explanation: node 7 is already a direct child of node 4. we don't change anything. example 3: input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 3, q = 8 output: [1,null,2,null,4,5,null,7,8,null,null,null,3,null,6] explanation: this example follows case 3 because node p is not in the sub-tree of node q and vice-versa. we can move node 3 with its sub-tree and make it as node 8's child. example 4: input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 2, q = 7 output: [1,null,7,3,null,2,null,6,null,4,5,null,null,8] explanation: node q is in the sub-tree of node p, so this is case 1. the first step, we move node p (with all of its sub-tree except for node q) and add it as a child to node q. then we will see that the tree is disconnected, you need to reconnect node q to replace node p as shown. example 5: input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 1, q = 2 output: [2,null,4,5,1,null,7,8,null,null,3,null,null,null,6] explanation: node q is in the sub-tree of node p, so this is case 1. the first step, we move node p (with all of its sub-tree except for node q) and add it as a child to node q. as node p was the root of the tree, node q replaces it and becomes the root of the tree.","the total number of nodes is between `[2, 1000]`. each node has a unique value. `p != null` `q != null` `p` and `q` are two different nodes (i.e. `p != q`).",
1517,Find Users With Valid E-Mails,SQL Schema,Easy,https://leetcode.com/problems/find-users-with-valid-e-mails,Apple,,57,,sql schema,,,
1518,Water Bottles,"Given `numBottles` full water bottles, you can exchange `numExchange` empty water bottles for one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Return the maximum number of water bottles you can drink.


Example 1:
Input: numBottles = 9, numExchange = 3
Output: 13
Explanation: You can exchange 3 empty bottles to get 1 full water bottle.

Number of water bottles you can drink: 9 + 3 + 1 = 13.


Example 2:
Input: numBottles = 15, numExchange = 4
Output: 19
Explanation: You can exchange 4 empty bottles to get 1 full water bottle. 
Number of water bottles you can drink: 15 + 3 + 1 = 19.


Example 3:
Input: numBottles = 5, numExchange = 5
Output: 6

Example 4:
Input: numBottles = 2, numExchange = 3
Output: 2

Constraints:
`1 <= numBottles <= 100`
`2 <= numExchange <= 100`",Easy,https://leetcode.com/problems/water-bottles,IBM,Greedy,416,,"given `numbottles` full water bottles, you can exchange `numexchange` empty water bottles for one full water bottle. the operation of drinking a full water bottle turns it into an empty bottle. return the maximum number of water bottles you can drink.","input: numbottles = 9, numexchange = 3 output: 13 explanation: you can exchange 3 empty bottles to get 1 full water bottle. number of water bottles you can drink: 9 + 3 + 1 = 13. example 2: input: numbottles = 15, numexchange = 4 output: 19 explanation: you can exchange 4 empty bottles to get 1 full water bottle. number of water bottles you can drink: 15 + 3 + 1 = 19. example 3: input: numbottles = 5, numexchange = 5 output: 6 example 4: input: numbottles = 2, numexchange = 3 output: 2",`1 <= numbottles <= 10^0` `2 <= numexchange <= 10^0`,
1519,Number of Nodes in the Sub-Tree With the Same Label,"Given a tree (i.e. a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` `edges`. The root of the tree is the node `0`, and each node of the tree has a label which is a lower-case character given in the string `labels` (i.e. The node with the number `i` has the label `labels[i]`).

The `edges` array is given on the form `edges[i] = [ai, bi]`, which means there is an edge between nodes `ai` and `bi` in the tree.

Return an array of size `n` where `ans[i]` is the number of nodes in the subtree of the `ith` node which have the same label as node `i`.

A subtree of a tree `T` is the tree consisting of a node in `T` and all of its descendant nodes.


Example 1:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = ""abaedcd""
Output: [2,1,1,1,1,1,1]
Explanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.

Node 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).


Example 2:
Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = ""bbbb""
Output: [4,2,1,1]
Explanation: The sub-tree of node 2 contains only node 2, so the answer is 1.

The sub-tree of node 3 contains only node 3, so the answer is 1.

The sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.

The sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.


Example 3:
Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = ""aabab""
Output: [3,2,1,1,1]

Example 4:
Input: n = 6, edges = [[0,1],[0,2],[1,3],[3,4],[4,5]], labels = ""cbabaa""
Output: [1,2,1,1,2,1]

Example 5:
Input: n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], labels = ""aaabaaa""
Output: [6,5,4,1,3,2,1]

Constraints:
`1 <= n <= 10^5`
`edges.length == n - 1`
`edges[i].length == 2`
`0 <= ai, bi < n`
`ai != bi`
`labels.length == n`
`labels` is consisting of only of lower-case English letters.",Medium,https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label,"Samsung,Uber","Depth-first Search,Breadth-first Search",240,,"given a tree (i.e. a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` `edges`. the root of the tree is the node `0`, and each node of the tree has a label which is a lower-case character given in the string `labels` (i.e. the node with the number `i` has the label `labels[i]`). the `edges` array is given on the form `edges[i] = [ai, bi]`, which means there is an edge between nodes `ai` and `bi` in the tree. return an array of size `n` where `ans[i]` is the number of nodes in the subtree of the `ith` node which have the same label as node `i`. a subtree of a tree `t` is the tree consisting of a node in `t` and all of its descendant nodes.","input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = ""abaedcd"" output: [2,1,1,1,1,1,1] explanation: node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. notice that any node is part of its sub-tree. node 1 has a label 'b'. the sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself). example 2: input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = ""bbbb"" output: [4,2,1,1] explanation: the sub-tree of node 2 contains only node 2, so the answer is 1. the sub-tree of node 3 contains only node 3, so the answer is 1. the sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2. the sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4. example 3: input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = ""aabab"" output: [3,2,1,1,1] example 4: input: n = 6, edges = [[0,1],[0,2],[1,3],[3,4],[4,5]], labels = ""cbabaa"" output: [1,2,1,1,2,1] example 5: input: n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], labels = ""aaabaaa"" output: [6,5,4,1,3,2,1]","`1 <= n <= 10^5` `edges.length == n - 1` `edges[i].length == 2` `0 <= ai, bi < n` `ai != bi` `labels.length == n` `labels` is consisting of only of lower-case english letters.",
1520,Maximum Number of Non-Overlapping Substrings,"Given a string `s` of lowercase letters, you need to find the maximum number of non-empty substrings of `s` that meet the following conditions:
The substrings do not overlap, that is for any two substrings `s[i..j]` and `s[k..l]`, either `j < k` or `i > l` is true.

A substring that contains a certain character `c` must also contain all occurrences of `c`.

Find the maximum number of substrings that meet the above conditions. If there are multiple solutions with the same number of substrings, return the one with minimum total length. It can be shown that there exists a unique solution of minimum total length.

Notice that you can return the substrings in any order.


Example 1:
Input: s = ""adefaddaccc""
Output: [""e"",""f"",""ccc""]
Explanation: The following are all the possible substrings that meet the conditions:
[
  ""adefaddaccc""
  ""adefadda"",
  ""ef"",
  ""e"",
  ""f"",
  ""ccc"",
]
If we choose the first string, we cannot choose anything else and we'd get only 1. If we choose ""adefadda"", we are left with ""ccc"" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose ""ef"" since it can be split into two. Therefore, the optimal way is to choose [""e"",""f"",""ccc""] which gives us 3 substrings. No other solution of the same number of substrings exist.


Example 2:
Input: s = ""abbaccd""
Output: [""d"",""bb"",""cc""]
Explanation: Notice that while the set of substrings [""d"",""abba"",""cc""] also has length 3, it's considered incorrect since it has larger total length.


Constraints:
`1 <= s.length <= 10^5`
`s` contains only lowercase English letters.",Hard,https://leetcode.com/problems/maximum-number-of-non-overlapping-substrings,Amazon,Greedy,341,,"given a string `s` of lowercase letters, you need to find the maximum number of non-empty substrings of `s` that meet the following conditions: the substrings do not overlap, that is for any two substrings `s[i..j]` and `s[k..l]`, either `j < k` or `i > l` is true. a substring that contains a certain character `c` must also contain all occurrences of `c`. find the maximum number of substrings that meet the above conditions. if there are multiple solutions with the same number of substrings, return the one with minimum total length. it can be shown that there exists a unique solution of minimum total length. notice that you can return the substrings in any order.","input: s = ""adefaddaccc"" output: [""e"",""f"",""ccc""] explanation: the following are all the possible substrings that meet the conditions: [ ""adefaddaccc"" ""adefadda"", ""ef"", ""e"", ""f"", ""ccc"", ] if we choose the first string, we cannot choose anything else and we'd get only 1. if we choose ""adefadda"", we are left with ""ccc"" which is the only one that doesn't overlap, thus obtaining 2 substrings. notice also, that it's not optimal to choose ""ef"" since it can be split into two. therefore, the optimal way is to choose [""e"",""f"",""ccc""] which gives us 3 substrings. no other solution of the same number of substrings exist. example 2: input: s = ""abbaccd"" output: [""d"",""bb"",""cc""] explanation: notice that while the set of substrings [""d"",""abba"",""cc""] also has length 3, it's considered incorrect since it has larger total length.",`1 <= s.length <= 10^5` `s` contains only lowercase english letters.,
1521,Find a Value of a Mysterious Function Closest to Target,"Winston was given the above mysterious function `func`. He has an integer array `arr` and an integer `target` and he wants to find the values `l` and `r` that make the value `|func(arr, l, r) - target|` minimum possible.

Return the minimum possible value of `|func(arr, l, r) - target|`.

Notice that `func` should be called with the values `l` and `r` where `0 <= l, r < arr.length`.


Example 1:
Input: arr = [9,12,3,7,15], target = 5
Output: 2
Explanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.


Example 2:
Input: arr = [1000000,1000000,1000000], target = 1
Output: 999999
Explanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.


Example 3:
Input: arr = [1,2,4,8,16], target = 0
Output: 0

Constraints:
`1 <= arr.length <= 105`
`1 <= arr[i] <= 106`
`0 <= target <= 107`",Hard,https://leetcode.com/problems/find-a-value-of-a-mysterious-function-closest-to-target,American Express,"Binary Search,Bit Manipulation,Segment Tree",200,,"winston was given the above mysterious function `func`. he has an integer array `arr` and an integer `target` and he wants to find the values `l` and `r` that make the value `|func(arr, l, r) - target|` minimum possible. return the minimum possible value of `|func(arr, l, r) - target|`. notice that `func` should be called with the values `l` and `r` where `0 <= l, r < arr.length`.","input: arr = [9,12,3,7,15], target = 5 output: 2 explanation: calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. the value closest to 5 is 7 and 3, thus the minimum difference is 2. example 2: input: arr = [1000000,1000000,1000000], target = 1 output: 999999 explanation: winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999. example 3: input: arr = [1,2,4,8,16], target = 0 output: 0",`1 <= arr.length <= 10^5` `1 <= arr[i] <= 10^6` `0 <= target <= 10^7`,
1522,Diameter of N-Ary Tree,"Given a `root` of an N-ary tree, you need to compute the length of the diameter of the tree.

The diameter of an N-ary tree is the length of the longest path between any two nodes in the tree. This path may or may not pass through the root.

(Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value.)

Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: 3
Explanation: Diameter is shown in red color.


Example 2:
Input: root = [1,null,2,null,3,4,null,5,null,6]
Output: 4

Example 3:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: 7

Constraints:
The depth of the n-ary tree is less than or equal to `1000`.

The total number of nodes is between `[1, 104]`.",Medium,https://leetcode.com/problems/diameter-of-n-ary-tree,"Facebook,Microsoft",,131,,"given a `root` of an n-ary tree, you need to compute the length of the diameter of the tree. the diameter of an n-ary tree is the length of the longest path between any two nodes in the tree. this path may or may not pass through the root. (nary-tree input serialization is represented in their level order traversal, each group of children is separated by the null value.)","input: root = [1,null,3,2,4,null,5,6] output: 3 explanation: diameter is shown in red color. example 2: input: root = [1,null,2,null,3,4,null,5,null,6] output: 4 example 3: input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14] output: 7","the depth of the n-ary tree is less than or equal to `1000`. the total number of nodes is between `[1, 10^4]`.",
1523,Count Odd Numbers in an Interval Range,"Given two non-negative integers `low` and `high`. Return the count of odd numbers between `low` and `high` (inclusive).


Example 1:
Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].


Example 2:
Input: low = 8, high = 10
Output: 1
Explanation: The odd numbers between 8 and 10 are [9].


Constraints:
`0 <= low <= high <= 10^9`",Easy,https://leetcode.com/problems/count-odd-numbers-in-an-interval-range,Microsoft,Math,203,,given two non-negative integers `low` and `high`. return the count of odd numbers between `low` and `high` (inclusive).,"input: low = 3, high = 7 output: 3 explanation: the odd numbers between 3 and 7 are [3,5,7]. example 2: input: low = 8, high = 10 output: 1 explanation: the odd numbers between 8 and 10 are [9].",`0 <= low <= high <= 10^9`,
1524,Number of Sub-arrays With Odd Sum,"Given an array of integers `arr`. Return the number of sub-arrays with odd sum.

As the answer may grow large, the answer must be computed modulo `10^9 + 7`.


Example 1:
Input: arr = [1,3,5]
Output: 4
Explanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
All sub-arrays sum are [1,4,9,3,8,5].

Odd sums are [1,9,3,5] so the answer is 4.


Example 2:
Input: arr = [2,4,6]
Output: 0
Explanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]
All sub-arrays sum are [2,6,12,4,10,6].

All sub-arrays have even sum and the answer is 0.


Example 3:
Input: arr = [1,2,3,4,5,6,7]
Output: 16

Example 4:
Input: arr = [100,100,99,99]
Output: 4

Example 5:
Input: arr = [7]
Output: 1

Constraints:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 100`",Medium,https://leetcode.com/problems/number-of-sub-arrays-with-odd-sum,Directi,"Array,Math",357,,"given an array of integers `arr`. return the number of sub-arrays with odd sum. as the answer may grow large, the answer must be computed modulo `10^9 + 7`.","input: arr = [1,3,5] output: 4 explanation: all sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]] all sub-arrays sum are [1,4,9,3,8,5]. odd sums are [1,9,3,5] so the answer is 4. example 2: input: arr = [2,4,6] output: 0 explanation: all sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]] all sub-arrays sum are [2,6,12,4,10,6]. all sub-arrays have even sum and the answer is 0. example 3: input: arr = [1,2,3,4,5,6,7] output: 16 example 4: input: arr = [100,100,99,99] output: 4 example 5: input: arr = [7] output: 1",`1 <= arr.length <= 10^5` `1 <= arr[i] <= 10^0`,
1525,Number of Good Ways to Split a String,"You are given a string `s`, a split is called good if you can split `s` into 2 non-empty strings `p` and `q` where its concatenation is equal to `s` and the number of distinct letters in `p` and `q` are the same.

Return the number of good splits you can make in `s`.


Example 1:
Input: s = ""aacaba""
Output: 2
Explanation: There are 5 ways to split `""aacaba""` and 2 of them are good. 
(""a"", ""acaba"") Left string and right string contains 1 and 3 different letters respectively.

(""aa"", ""caba"") Left string and right string contains 1 and 3 different letters respectively.

(""aac"", ""aba"") Left string and right string contains 2 and 2 different letters respectively (good split).

(""aaca"", ""ba"") Left string and right string contains 2 and 2 different letters respectively (good split).

(""aacab"", ""a"") Left string and right string contains 3 and 1 different letters respectively.


Example 2:
Input: s = ""abcd""
Output: 1
Explanation: Split the string as follows (""ab"", ""cd"").


Example 3:
Input: s = ""aaaaa""
Output: 4
Explanation: All possible splits are good.


Example 4:
Input: s = ""acbadbaada""
Output: 2

Constraints:
`s` contains only lowercase English letters.

`1 <= s.length <= 10^5`",Medium,https://leetcode.com/problems/number-of-good-ways-to-split-a-string,Google,"String,Bit Manipulation",405,,"you are given a string `s`, a split is called good if you can split `s` into 2 non-empty strings `p` and `q` where its concatenation is equal to `s` and the number of distinct letters in `p` and `q` are the same. return the number of good splits you can make in `s`.","input: s = ""aacaba"" output: 2 explanation: there are 5 ways to split `""aacaba""` and 2 of them are good. (""a"", ""acaba"") left string and right string contains 1 and 3 different letters respectively. (""aa"", ""caba"") left string and right string contains 1 and 3 different letters respectively. (""aac"", ""aba"") left string and right string contains 2 and 2 different letters respectively (good split). (""aaca"", ""ba"") left string and right string contains 2 and 2 different letters respectively (good split). (""aacab"", ""a"") left string and right string contains 3 and 1 different letters respectively. example 2: input: s = ""abcd"" output: 1 explanation: split the string as follows (""ab"", ""cd""). example 3: input: s = ""aaaaa"" output: 4 explanation: all possible splits are good. example 4: input: s = ""acbadbaada"" output: 2",`s` contains only lowercase english letters. `1 <= s.length <= 10^5`,
1526,Minimum Number of Increments on Subarrays to Form a Target Array,"Given an array of positive integers `target` and an array `initial` of same size with all zeros.

Return the minimum number of operations to form a `target` array from `initial` if you are allowed to do the following operation:
Choose any subarray from `initial` and increment each value by one.

The answer is guaranteed to fit within the range of a 32-bit signed integer.


Example 1:
Input: target = [1,2,3,2,1]
Output: 3
Explanation: We need at least 3 operations to form the target array from the initial array.

[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).

[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).

[1,2,2,2,1] increment 1 at index 2.

[1,2,3,2,1] target array is formed.


Example 2:
Input: target = [3,1,1,2]
Output: 4
Explanation: (initial)[0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] (target).


Example 3:
Input: target = [3,1,5,4,2]
Output: 7
Explanation: (initial)[0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] 
                                  -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2] (target).


Example 4:
Input: target = [1,1,1,1]
Output: 1

Constraints:
`1 <= target.length <= 10^5`
`1 <= target[i] <= 10^5`",Hard,https://leetcode.com/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array,Google,Segment Tree,302,,given an array of positive integers `target` and an array `initial` of same size with all zeros. return the minimum number of operations to form a `target` array from `initial` if you are allowed to do the following operation: choose any subarray from `initial` and increment each value by one. the answer is guaranteed to fit within the range of a 32-bit signed integer.,"input: target = [1,2,3,2,1] output: 3 explanation: we need at least 3 operations to form the target array from the initial array. [0,0,0,0,0] increment 1 from index 0 to 4 (inclusive). [1,1,1,1,1] increment 1 from index 1 to 3 (inclusive). [1,2,2,2,1] increment 1 at index 2. [1,2,3,2,1] target array is formed. example 2: input: target = [3,1,1,2] output: 4 explanation: (initial)[0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] (target). example 3: input: target = [3,1,5,4,2] output: 7 explanation: (initial)[0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2] (target). example 4: input: target = [1,1,1,1] output: 1",`1 <= target.length <= 10^5` `1 <= target[i] <= 10^5`,
1527,Patients With a Condition,SQL Schema,Easy,https://leetcode.com/problems/patients-with-a-condition,,,22,,sql schema,,,
1528,Shuffle String,"Given a string `s` and an integer array `indices` of the same length.

The string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string.

Return the shuffled string.


Example 1:
Input: s = ""codeleet"", `indices` = [4,5,6,7,0,2,1,3]
Output: ""leetcode""
Explanation: As shown, ""codeleet"" becomes ""leetcode"" after shuffling.


Example 2:
Input: s = ""abc"", `indices` = [0,1,2]
Output: ""abc""
Explanation: After shuffling, each character remains in its position.


Example 3:
Input: s = ""aiohn"", `indices` = [3,1,4,2,0]
Output: ""nihao""

Example 4:
Input: s = ""aaiougrt"", `indices` = [4,0,2,6,7,3,1,5]
Output: ""arigatou""

Example 5:
Input: s = ""art"", `indices` = [1,0,2]
Output: ""rat""

Constraints:
`s.length == indices.length == n`
`1 <= n <= 100`
`s` contains only lower-case English letters.

`0 <= indices[i] < n`
All values of `indices` are unique (i.e. `indices` is a permutation of the integers from `0` to `n - 1`).",Easy,https://leetcode.com/problems/shuffle-string,Facebook,Sort,544,,given a string `s` and an integer array `indices` of the same length. the string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string. return the shuffled string.,"input: s = ""codeleet"", `indices` = [4,5,6,7,0,2,1,3] output: ""leetcode"" explanation: as shown, ""codeleet"" becomes ""leetcode"" after shuffling. example 2: input: s = ""abc"", `indices` = [0,1,2] output: ""abc"" explanation: after shuffling, each character remains in its position. example 3: input: s = ""aiohn"", `indices` = [3,1,4,2,0] output: ""nihao"" example 4: input: s = ""aaiougrt"", `indices` = [4,0,2,6,7,3,1,5] output: ""arigatou"" example 5: input: s = ""art"", `indices` = [1,0,2] output: ""rat""",`s.length == indices.length == n` `1 <= n <= 10^0` `s` contains only lower-case english letters. `0 <= indices[i] < n` all values of `indices` are unique (i.e. `indices` is a permutation of the integers from `0` to `n - 1`).,
1529,Bulb Switcher IV,"There is a room with `n` bulbs, numbered from `0` to `n-1`, arranged in a row from left to right. Initially all the bulbs are turned off.

Your task is to obtain the configuration represented by `target` where `target[i]` is '1' if the i-th bulb is turned on and is '0' if it is turned off.

You have a switch to flip the state of the bulb, a flip operation is defined as follows:
Choose any bulb (index `i`) of your current configuration.

Flip each bulb from index `i` to `n-1`.

When any bulb is flipped it means that if it is 0 it changes to 1 and if it is 1 it changes to 0.

Return the minimum number of flips required to form `target`.


Example 1:
Input: target = ""10111""
Output: 3
Explanation: Initial configuration ""00000"".

flip from the third bulb:  ""00000"" -> ""00111""
flip from the first bulb:  ""00111"" -> ""11000""
flip from the second bulb:  ""11000"" -> ""10111""
We need at least 3 flip operations to form target.


Example 2:
Input: target = ""101""
Output: 3
Explanation: ""000"" -> ""111"" -> ""100"" -> ""101"".


Example 3:
Input: target = ""00000""
Output: 0

Example 4:
Input: target = ""001011101""
Output: 5

Constraints:
`1 <= target.length <= 10^5`
`target[i] == '0'` or `target[i] == '1'`",Medium,https://leetcode.com/problems/bulb-switcher-iv,Citrix,String,364,,"there is a room with `n` bulbs, numbered from `0` to `n-1`, arranged in a row from left to right. initially all the bulbs are turned off. your task is to obtain the configuration represented by `target` where `target[i]` is '1' if the i-th bulb is turned on and is '0' if it is turned off. you have a switch to flip the state of the bulb, a flip operation is defined as follows: choose any bulb (index `i`) of your current configuration. flip each bulb from index `i` to `n-1`. when any bulb is flipped it means that if it is 0 it changes to 1 and if it is 1 it changes to 0. return the minimum number of flips required to form `target`.","input: target = ""10111"" output: 3 explanation: initial configuration ""00000"". flip from the third bulb: ""00000"" -> ""00111"" flip from the first bulb: ""00111"" -> ""11000"" flip from the second bulb: ""11000"" -> ""10111"" we need at least 3 flip operations to form target. example 2: input: target = ""101"" output: 3 explanation: ""000"" -> ""111"" -> ""100"" -> ""101"". example 3: input: target = ""00000"" output: 0 example 4: input: target = ""001011101"" output: 5",`1 <= target.length <= 10^5` `target[i] == '0'` or `target[i] == '1'`,
1530,Number of Good Leaf Nodes Pairs,"Given the `root` of a binary tree and an integer `distance`. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to `distance`.

Return the number of good leaf node pairs in the tree.


Example 1:
Input: root = [1,2,3,null,4], distance = 3
Output: 1
Explanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.


Example 2:
Input: root = [1,2,3,4,5,6,7], distance = 3
Output: 2
Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.


Example 3:
Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3
Output: 1
Explanation: The only good pair is [2,5].


Example 4:
Input: root = [100], distance = 1
Output: 0

Example 5:
Input: root = [1,1,1], distance = 2
Output: 1

Constraints:
The number of nodes in the `tree` is in the range `[1, 2^10].`
Each node's value is between `[1, 100]`.

`1 <= distance <= 10`",Medium,https://leetcode.com/problems/number-of-good-leaf-nodes-pairs,Google,"Tree,Depth-first Search",654,,given the `root` of a binary tree and an integer `distance`. a pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to `distance`. return the number of good leaf node pairs in the tree.,"input: root = [1,2,3,null,4], distance = 3 output: 1 explanation: the leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. this is the only good pair. example 2: input: root = [1,2,3,4,5,6,7], distance = 3 output: 2 explanation: the good pairs are [4,5] and [6,7] with shortest path = 2. the pair [4,6] is not good because the length of ther shortest path between them is 4. example 3: input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3 output: 1 explanation: the only good pair is [2,5]. example 4: input: root = [100], distance = 1 output: 0 example 5: input: root = [1,1,1], distance = 2 output: 1","the number of nodes in the `tree` is in the range `[1, 2^10].` each node's value is between `[1, 10^0]`. `1 <= distance <= 10`",
1531,String Compression II,"Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string `""aabccc""` we replace `""aa""` by `""a2""` and replace `""ccc""` by `""c3""`. Thus the compressed string becomes `""a2bc3""`.

Notice that in this problem, we are not adding `'1'` after single characters.

Given a string `s` and an integer `k`. You need to delete at most `k` characters from `s` such that the run-length encoded version of `s` has minimum length.

Find the minimum length of the run-length encoded version of `s` after deleting at most `k` characters.


Example 1:
Input: s = ""aaabcccd"", k = 2
Output: 4
Explanation: Compressing s without deleting anything will give us ""a3bc3d"" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = ""abcccd"" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be ""a3c3"" of length 4.


Example 2:
Input: s = ""aabbaa"", k = 2
Output: 2
Explanation: If we delete both 'b' characters, the resulting compressed string would be ""a4"" of length 2.


Example 3:
Input: s = ""aaaaaaaaaaa"", k = 0
Output: 3
Explanation: Since k is zero, we cannot delete anything. The compressed string is ""a11"" of length 3.


Constraints:
`1 <= s.length <= 100`
`0 <= k <= s.length`
`s` contains only lowercase English letters.",Hard,https://leetcode.com/problems/string-compression-ii,Toptal,"String,Dynamic Programming",286,,"run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). for example, to compress the string `""aabccc""` we replace `""aa""` by `""a2""` and replace `""ccc""` by `""c3""`. thus the compressed string becomes `""a2bc3""`. notice that in this problem, we are not adding `'1'` after single characters. given a string `s` and an integer `k`. you need to delete at most `k` characters from `s` such that the run-length encoded version of `s` has minimum length. find the minimum length of the run-length encoded version of `s` after deleting at most `k` characters.","input: s = ""aaabcccd"", k = 2 output: 4 explanation: compressing s without deleting anything will give us ""a3bc3d"" of length 6. deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = ""abcccd"" which compressed is abc3d. therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be ""a3c3"" of length 4. example 2: input: s = ""aabbaa"", k = 2 output: 2 explanation: if we delete both 'b' characters, the resulting compressed string would be ""a4"" of length 2. example 3: input: s = ""aaaaaaaaaaa"", k = 0 output: 3 explanation: since k is zero, we cannot delete anything. the compressed string is ""a11"" of length 3.",`1 <= s.length <= 10^0` `0 <= k <= s.length` `s` contains only lowercase english letters.,
1532,The Most Recent Three Orders,SQL Schema,Medium,https://leetcode.com/problems/the-most-recent-three-orders,,,54,,sql schema,,,
1533,Find the Index of the Large Integer,"We have an integer array `arr`, where all the integers in `arr` are equal except for one integer which is larger than the rest of the integers. You will not be given direct access to the array, instead, you will have an API `ArrayReader` which have the following functions:
`int compareSub(int l, int r, int x, int y)`: where `0 <= l, r, x, y < ArrayReader.length()`, `l <= r and` `x <= y`. The function compares the sum of sub-array `arr[l..r]` with the sum of the sub-array `arr[x..y]` and returns:
	
1 if `arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y]`.

0 if `arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]`.

-1 if `arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y]`.

`int length()`: Returns the size of the array.

You are allowed to call `compareSub()` 20 times at most. You can assume both functions work in `O(1)` time.

Return the index of the array `arr` which has the largest integer.

Follow-up:
What if there are two numbers in `arr` that are bigger than all other numbers?
What if there is one number that is bigger than other numbers and one number that is smaller than other numbers?

Example 1:
Input: arr = [7,7,7,7,10,7,7,7]
Output: 4
Explanation: The following calls to the API
reader.compareSub(0, 0, 1, 1) // returns 0 this is a query comparing the sub-array (0, 0) with the sub array (1, 1), (i.e. compares arr[0] with arr[1]).

Thus we know that arr[0] and arr[1] doesn't contain the largest element.

reader.compareSub(2, 2, 3, 3) // returns 0, we can exclude arr[2] and arr[3].

reader.compareSub(4, 4, 5, 5) // returns 1, thus for sure arr[4] is the largest element in the array.

Notice that we made only 3 calls, so the answer is valid.


Example 2:
Input: nums = [6,6,12]
Output: 2

Constraints:
`2 <= arr.length <= 5 * 10^5`
`1 <= arr[i] <= 100`
All elements of `arr` are equal except for one element which is larger than all other elements.",Medium,https://leetcode.com/problems/find-the-index-of-the-large-integer,Amazon,Binary Search,48,"[Search in a Sorted Array of Unknown Size, /problems/search-in-a-sorted-array-of-unknown-size/, Medium]","we have an integer array `arr`, where all the integers in `arr` are equal except for one integer which is larger than the rest of the integers. you will not be given direct access to the array, instead, you will have an api `arrayreader` which have the following functions: `int comparesub(int l, int r, int x, int y)`: where `0 <= l, r, x, y < arrayreader.length()`, `l <= r and` `x <= y`. the function compares the sum of sub-array `arr[l..r]` with the sum of the sub-array `arr[x..y]` and returns: 1 if `arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y]`. 0 if `arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]`. -1 if `arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y]`. `int length()`: returns the size of the array. you are allowed to call `comparesub()` 20 times at most. you can assume both functions work in `o(1)` time. return the index of the array `arr` which has the largest integer.","input: arr = [7,7,7,7,10,7,7,7] output: 4 explanation: the following calls to the api reader.comparesub(0, 0, 1, 1) // returns 0 this is a query comparing the sub-array (0, 0) with the sub array (1, 1), (i.e. compares arr[0] with arr[1]). thus we know that arr[0] and arr[1] doesn't contain the largest element. reader.comparesub(2, 2, 3, 3) // returns 0, we can exclude arr[2] and arr[3]. reader.comparesub(4, 4, 5, 5) // returns 1, thus for sure arr[4] is the largest element in the array. notice that we made only 3 calls, so the answer is valid. example 2: input: nums = [6,6,12] output: 2",`2 <= arr.length <= 5 * 10^5` `1 <= arr[i] <= 10^0` all elements of `arr` are equal except for one element which is larger than all other elements.,"what if there are two numbers in `arr` that are bigger than all other numbers? what if there is one number that is bigger than other numbers and one number that is smaller than other numbers? example 1: input: arr = [7,7,7,7,10,7,7,7] output: 4 explanation: the following calls to the api reader.comparesub(0, 0, 1, 1) // returns 0 this is a query comparing the sub-array (0, 0) with the sub array (1, 1), (i.e. compares arr[0] with arr[1]). thus we know that arr[0] and arr[1] doesn't contain the largest element. reader.comparesub(2, 2, 3, 3) // returns 0, we can exclude arr[2] and arr[3]. reader.comparesub(4, 4, 5, 5) // returns 1, thus for sure arr[4] is the largest element in the array. notice that we made only 3 calls, so the answer is valid. example 2: input: nums = [6,6,12] output: 2 constraints: `2 <= arr.length <= 5 * 10^5` `1 <= arr[i] <= 100` all elements of `arr` are equal except for one element which is larger than all other elements."
1534,Count Good Triplets,"Given an array of integers `arr`, and three integers `a`, `b` and `c`. You need to find the number of good triplets.

A triplet `(arr[i], arr[j], arr[k])` is good if the following conditions are true:
`0 <= i < j < k < arr.length`
`|arr[i] - arr[j]| <= a`
`|arr[j] - arr[k]| <= b`
`|arr[i] - arr[k]| <= c`
Where `|x|` denotes the absolute value of `x`.

Return the number of good triplets.


Example 1:
Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3
Output: 4
Explanation: There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].


Example 2:
Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1
Output: 0
Explanation: No triplet satisfies all conditions.


Constraints:
`3 <= arr.length <= 100`
`0 <= arr[i] <= 1000`
`0 <= a, b, c <= 1000`",Easy,https://leetcode.com/problems/count-good-triplets,Turvo,Array,209,,"given an array of integers `arr`, and three integers `a`, `b` and `c`. you need to find the number of good triplets. a triplet `(arr[i], arr[j], arr[k])` is good if the following conditions are true: `0 <= i < j < k < arr.length` `|arr[i] - arr[j]| <= a` `|arr[j] - arr[k]| <= b` `|arr[i] - arr[k]| <= c` where `|x|` denotes the absolute value of `x`. return the number of good triplets.","input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3 output: 4 explanation: there are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)]. example 2: input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1 output: 0 explanation: no triplet satisfies all conditions.","`3 <= arr.length <= 10^0` `0 <= arr[i] <= 1000` `0 <= a, b, c <= 1000`",
1535,Find the Winner of an Array Game,"Given an integer array `arr` of distinct integers and an integer `k`.

A game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0` and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds.

Return the integer which will win the game.

It is guaranteed that there will be a winner of the game.


Example 1:
Input: arr = [2,1,3,5,4,6,7], k = 2
Output: 5
Explanation: Let's see the rounds of the game:
Round |       arr       | winner | win_count
  1   | [2,1,3,5,4,6,7] | 2      | 1
  2   | [2,3,5,4,6,7,1] | 3      | 1
  3   | [3,5,4,6,7,1,2] | 5      | 1
  4   | [5,4,6,7,1,2,3] | 5      | 2
So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.


Example 2:
Input: arr = [3,2,1], k = 10
Output: 3
Explanation: 3 will win the first 10 rounds consecutively.


Example 3:
Input: arr = [1,9,8,2,3,7,6,4,5], k = 7
Output: 9

Example 4:
Input: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000
Output: 99

Constraints:
`2 <= arr.length <= 10^5`
`1 <= arr[i] <= 10^6`
`arr` contains distinct integers.

`1 <= k <= 10^9`",Medium,https://leetcode.com/problems/find-the-winner-of-an-array-game,Directi,Array,321,,"given an integer array `arr` of distinct integers and an integer `k`. a game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). in each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0` and the smaller integer moves to the end of the array. the game ends when an integer wins `k` consecutive rounds. return the integer which will win the game. it is guaranteed that there will be a winner of the game.","input: arr = [2,1,3,5,4,6,7], k = 2 output: 5 explanation: let's see the rounds of the game: round | arr | winner | win_count 1 | [2,1,3,5,4,6,7] | 2 | 1 2 | [2,3,5,4,6,7,1] | 3 | 1 3 | [3,5,4,6,7,1,2] | 5 | 1 4 | [5,4,6,7,1,2,3] | 5 | 2 so we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games. example 2: input: arr = [3,2,1], k = 10 output: 3 explanation: 3 will win the first 10 rounds consecutively. example 3: input: arr = [1,9,8,2,3,7,6,4,5], k = 7 output: 9 example 4: input: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000 output: 99",`2 <= arr.length <= 10^5` `1 <= arr[i] <= 10^6` `arr` contains distinct integers. `1 <= k <= 10^9`,
1536,Minimum Swaps to Arrange a Binary Grid,"Given an `n x n` binary `grid`, in one step you can choose two adjacent rows of the grid and swap them.

A grid is said to be valid if all the cells above the main diagonal are zeros.

Return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.

The main diagonal of a grid is the diagonal that starts at cell `(1, 1)` and ends at cell `(n, n)`.


Example 1:
Input: grid = [[0,0,1],[1,1,0],[1,0,0]]
Output: 3

Example 2:
Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
Output: -1
Explanation: All rows are similar, swaps have no effect on the grid.


Example 3:
Input: grid = [[1,0,0],[1,1,0],[1,1,1]]
Output: 0

Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 200`
`grid[i][j]` is `0` or `1`",Medium,https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid,Ajira,Greedy,279,,"given an `n x n` binary `grid`, in one step you can choose two adjacent rows of the grid and swap them. a grid is said to be valid if all the cells above the main diagonal are zeros. return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid. the main diagonal of a grid is the diagonal that starts at cell `(1, 1)` and ends at cell `(n, n)`.","input: grid = [[0,0,1],[1,1,0],[1,0,0]] output: 3 example 2: input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]] output: -1 explanation: all rows are similar, swaps have no effect on the grid. example 3: input: grid = [[1,0,0],[1,1,0],[1,1,1]] output: 0",`n == grid.length` `n == grid[i].length` `1 <= n <= 200` `grid[i][j]` is `0` or `1`,
1537,Get the Maximum Score,"You are given two sorted arrays of distinct integers `nums1` and `nums2.`
A valid path is defined as follows:
Choose array nums1 or nums2 to traverse (from index-0).

Traverse the current array from left to right.

If you are reading any value that is present in `nums1` and `nums2` you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).

Score is defined as the sum of uniques values in a valid path.

Return the maximum score you can obtain of all possible valid paths.

Since the answer may be too large, return it modulo 10^9 + 7.


Example 1:
Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]
Output: 30
Explanation: Valid paths:
[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)
[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)
The maximum is obtained with the path in green [2,4,6,8,10].


Example 2:
Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]
Output: 109
Explanation: Maximum sum is obtained with the path [1,3,5,100].


Example 3:
Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]
Output: 40
Explanation: There are no common elements between nums1 and nums2.

Maximum sum is obtained with the path [6,7,8,9,10].


Example 4:
Input: nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]
Output: 61

Constraints:
`1 <= nums1.length <= 10^5`
`1 <= nums2.length <= 10^5`
`1 <= nums1[i], nums2[i] <= 10^7`
`nums1` and `nums2` are strictly increasing.",Hard,https://leetcode.com/problems/get-the-maximum-score,MindTickle,Dynamic Programming,324,,"you are given two sorted arrays of distinct integers `nums1` and `nums2.` a valid path is defined as follows: choose array nums1 or nums2 to traverse (from index-0). traverse the current array from left to right. if you are reading any value that is present in `nums1` and `nums2` you are allowed to change your path to the other array. (only one repeated value is considered in the valid path). score is defined as the sum of uniques values in a valid path. return the maximum score you can obtain of all possible valid paths. since the answer may be too large, return it modulo 10^9 + 7.","input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9] output: 30 explanation: valid paths: [2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10], (starting from nums1) [4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10] (starting from nums2) the maximum is obtained with the path in green [2,4,6,8,10]. example 2: input: nums1 = [1,3,5,7,9], nums2 = [3,5,100] output: 109 explanation: maximum sum is obtained with the path [1,3,5,100]. example 3: input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10] output: 40 explanation: there are no common elements between nums1 and nums2. maximum sum is obtained with the path [6,7,8,9,10]. example 4: input: nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12] output: 61","`1 <= nums1.length <= 10^5` `1 <= nums2.length <= 10^5` `1 <= nums1[i], nums2[i] <= 10^7` `nums1` and `nums2` are strictly increasing.",
1538,Guess the Majority in a Hidden Array,"We have an integer array `nums`, where all the integers in `nums` are 0 or 1. You will not be given direct access to the array, instead, you will have an API `ArrayReader` which have the following functions:
`int query(int a, int b, int c, int d)`: where `0 <= a < b < c < d < ArrayReader.length()`. The function returns the distribution of the value of the 4 elements and returns:
	
4 : if the values of the 4 elements are the same (0 or 1).

2 : if three elements have a value equal to 0 and one element has value equal to 1 or vice versa.

0 : if two element have a value equal to 0 and two elements have a value equal to 1.

`int length()`: Returns the size of the array.

You are allowed to call `query()` 2 * n times at most where n is equal to `ArrayReader.length()`.

Return any index of the most frequent value in `nums`, in case of tie, return -1.

Follow up: What is the minimum number of calls needed to find the majority element?

Example 1:
Input: nums = [0,0,1,0,1,1,1,1]
Output: 5
Explanation: The following calls to the API
reader.length() // returns 8 because there are 8 elements in the hidden array.

reader.query(0,1,2,3) // returns 2 this is a query that compares the elements nums[0], nums[1], nums[2], nums[3]
// Three elements have a value equal to 0 and one element has value equal to 1 or viceversa.

reader.query(4,5,6,7) // returns 4 because nums[4], nums[5], nums[6], nums[7] have the same value.

we can infer that the most frequent value is found in the last 4 elements.

Index 2, 4, 6, 7 is also a correct answer.


Example 2:
Input: nums = [0,0,1,1,0]
Output: 0

Example 3:
Input: nums = [1,0,1,0,1,0,1,0]
Output: -1

Constraints:
`5 <= nums.length <= 10^5`
`0 <= nums[i] <= 1`",Medium,https://leetcode.com/problems/guess-the-majority-in-a-hidden-array,Google,,44,,"we have an integer array `nums`, where all the integers in `nums` are 0 or 1. you will not be given direct access to the array, instead, you will have an api `arrayreader` which have the following functions: `int query(int a, int b, int c, int d)`: where `0 <= a < b < c < d < arrayreader.length()`. the function returns the distribution of the value of the 4 elements and returns: 4 : if the values of the 4 elements are the same (0 or 1). 2 : if three elements have a value equal to 0 and one element has value equal to 1 or vice versa. 0 : if two element have a value equal to 0 and two elements have a value equal to 1. `int length()`: returns the size of the array. you are allowed to call `query()` 2 * n times at most where n is equal to `arrayreader.length()`. return any index of the most frequent value in `nums`, in case of tie, return -1.","input: nums = [0,0,1,0,1,1,1,1] output: 5 explanation: the following calls to the api reader.length() // returns 8 because there are 8 elements in the hidden array. reader.query(0,1,2,3) // returns 2 this is a query that compares the elements nums[0], nums[1], nums[2], nums[3] // three elements have a value equal to 0 and one element has value equal to 1 or viceversa. reader.query(4,5,6,7) // returns 4 because nums[4], nums[5], nums[6], nums[7] have the same value. we can infer that the most frequent value is found in the last 4 elements. index 2, 4, 6, 7 is also a correct answer. example 2: input: nums = [0,0,1,1,0] output: 0 example 3: input: nums = [1,0,1,0,1,0,1,0] output: -1",`5 <= nums.length <= 10^5` `0 <= nums[i] <= 1`,"what is the minimum number of calls needed to find the majority element? example 1: input: nums = [0,0,1,0,1,1,1,1] output: 5 explanation: the following calls to the api reader.length() // returns 8 because there are 8 elements in the hidden array. reader.query(0,1,2,3) // returns 2 this is a query that compares the elements nums[0], nums[1], nums[2], nums[3] // three elements have a value equal to 0 and one element has value equal to 1 or viceversa. reader.query(4,5,6,7) // returns 4 because nums[4], nums[5], nums[6], nums[7] have the same value. we can infer that the most frequent value is found in the last 4 elements. index 2, 4, 6, 7 is also a correct answer. example 2: input: nums = [0,0,1,1,0] output: 0 example 3: input: nums = [1,0,1,0,1,0,1,0] output: -1 constraints: `5 <= nums.length <= 10^5` `0 <= nums[i] <= 1`"
1539,Kth Missing Positive Number,"Given an array `arr` of positive integers sorted in a strictly increasing order, and an integer `k`.

Find the `kth` positive integer that is missing from this array.


Example 1:
Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.


Example 2:
Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.


Constraints:
`1 <= arr.length <= 1000`
`1 <= arr[i] <= 1000`
`1 <= k <= 1000`
`arr[i] < arr[j]` for `1 <= i < j <= arr.length`",Easy,https://leetcode.com/problems/kth-missing-positive-number,"Facebook,Amazon,Microsoft,Apple","Array,Hash Table",912,,"given an array `arr` of positive integers sorted in a strictly increasing order, and an integer `k`. find the `kth` positive integer that is missing from this array.","input: arr = [2,3,4,7,11], k = 5 output: 9 explanation: the missing positive integers are [1,5,6,8,9,10,12,13,...]. the 5th missing positive integer is 9. example 2: input: arr = [1,2,3,4], k = 2 output: 6 explanation: the missing positive integers are [5,6,7,...]. the 2nd missing positive integer is 6.",`1 <= arr.length <= 1000` `1 <= arr[i] <= 1000` `1 <= k <= 1000` `arr[i] < arr[j]` for `1 <= i < j <= arr.length`,
1540,Can Convert String in K Moves,"Given two strings `s` and `t`, your goal is to convert `s` into `t` in `k` moves or less.

During the `ith` (`1 <= i <= k`) move you can:
Choose any index `j` (1-indexed) from `s`, such that `1 <= j <= s.length` and `j` has not been chosen in any previous move, and shift the character at that index `i` times.

Do nothing.

Shifting a character means replacing it by the next letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). Shifting a character by `i` means applying the shift operations `i` times.

Remember that any index `j` can be picked at most once.

Return `true` if it's possible to convert `s` into `t` in no more than `k` moves, otherwise return `false`.


Example 1:
Input: s = ""input"", t = ""ouput"", k = 9
Output: true
Explanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.


Example 2:
Input: s = ""abc"", t = ""bcd"", k = 10
Output: false
Explanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.


Example 3:
Input: s = ""aab"", t = ""bbb"", k = 27
Output: true
Explanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.


Constraints:
`1 <= s.length, t.length <= 10^5`
`0 <= k <= 10^9`
`s`, `t` contain only lowercase English letters.",Medium,https://leetcode.com/problems/can-convert-string-in-k-moves,Infosys,"String,Greedy",203,,"given two strings `s` and `t`, your goal is to convert `s` into `t` in `k` moves or less. during the `ith` (`1 <= i <= k`) move you can: choose any index `j` (1-indexed) from `s`, such that `1 <= j <= s.length` and `j` has not been chosen in any previous move, and shift the character at that index `i` times. do nothing. shifting a character means replacing it by the next letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). shifting a character by `i` means applying the shift operations `i` times. remember that any index `j` can be picked at most once. return `true` if it's possible to convert `s` into `t` in no more than `k` moves, otherwise return `false`.","input: s = ""input"", t = ""ouput"", k = 9 output: true explanation: in the 6th move, we shift 'i' 6 times to get 'o'. and in the 7th move we shift 'n' to get 'u'. example 2: input: s = ""abc"", t = ""bcd"", k = 10 output: false explanation: we need to shift each character in s one time to convert it into t. we can shift 'a' to 'b' during the 1st move. however, there is no way to shift the other characters in the remaining moves to obtain t from s. example 3: input: s = ""aab"", t = ""bbb"", k = 27 output: true explanation: in the 1st move, we shift the first 'a' 1 time to get 'b'. in the 27th move, we shift the second 'a' 27 times to get 'b'.","`1 <= s.length, t.length <= 10^5` `0 <= k <= 10^9` `s`, `t` contain only lowercase english letters.",
1541,Minimum Insertions to Balance a Parentheses String,"Given a parentheses string `s` containing only the characters `'('` and `')'`. A parentheses string is balanced if:
Any left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`.

Left parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`.

In other words, we treat `'('` as openning parenthesis and `'))'` as closing parenthesis.

For example, `""())""`, `""())(())))""` and `""(())())))""` are balanced, `"")()""`, `""()))""` and `""(()))""` are not balanced.

You can insert the characters `'('` and `')'` at any position of the string to balance it if needed.

Return the minimum number of insertions needed to make `s` balanced.


Example 1:
Input: s = ""(()))""
Output: 1
Explanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to to add one more ')' at the end of the string to be ""(())))"" which is balanced.


Example 2:
Input: s = ""())""
Output: 0
Explanation: The string is already balanced.


Example 3:
Input: s = ""))())(""
Output: 3
Explanation: Add '(' to match the first '))', Add '))' to match the last '('.


Example 4:
Input: s = ""((((((""
Output: 12
Explanation: Add 12 ')' to balance the string.


Example 5:
Input: s = "")))))))""
Output: 5
Explanation: Add 4 '(' at the beginning of the string and one ')' at the end. The string becomes ""(((())))))))"".


Constraints:
`1 <= s.length <= 10^5`
`s` consists of `'('` and `')'` only.",Medium,https://leetcode.com/problems/minimum-insertions-to-balance-a-parentheses-string,Facebook,"String,Stack",292,,"given a parentheses string `s` containing only the characters `'('` and `')'`. a parentheses string is balanced if: any left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`. left parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`. in other words, we treat `'('` as openning parenthesis and `'))'` as closing parenthesis. for example, `""())""`, `""())(())))""` and `""(())())))""` are balanced, `"")()""`, `""()))""` and `""(()))""` are not balanced. you can insert the characters `'('` and `')'` at any position of the string to balance it if needed. return the minimum number of insertions needed to make `s` balanced.","input: s = ""(()))"" output: 1 explanation: the second '(' has two matching '))', but the first '(' has only ')' matching. we need to to add one more ')' at the end of the string to be ""(())))"" which is balanced. example 2: input: s = ""())"" output: 0 explanation: the string is already balanced. example 3: input: s = ""))())("" output: 3 explanation: add '(' to match the first '))', add '))' to match the last '('. example 4: input: s = ""(((((("" output: 12 explanation: add 12 ')' to balance the string. example 5: input: s = "")))))))"" output: 5 explanation: add 4 '(' at the beginning of the string and one ')' at the end. the string becomes ""(((())))))))"".",`1 <= s.length <= 10^5` `s` consists of `'('` and `')'` only.,
1542,Find Longest Awesome Substring,"Given a string `s`. An awesome substring is a non-empty substring of `s` such that we can make any number of swaps in order to make it palindrome.

Return the length of the maximum length awesome substring of `s`.


Example 1:
Input: s = ""3242415""
Output: 5
Explanation: ""24241"" is the longest awesome substring, we can form the palindrome ""24142"" with some swaps.


Example 2:
Input: s = ""12345678""
Output: 1

Example 3:
Input: s = ""213123""
Output: 6
Explanation: ""213123"" is the longest awesome substring, we can form the palindrome ""231132"" with some swaps.


Example 4:
Input: s = ""00""
Output: 2

Constraints:
`1 <= s.length <= 10^5`
`s` consists only of digits.",Hard,https://leetcode.com/problems/find-longest-awesome-substring,Directi,"String,Bit Manipulation",317,,given a string `s`. an awesome substring is a non-empty substring of `s` such that we can make any number of swaps in order to make it palindrome. return the length of the maximum length awesome substring of `s`.,"input: s = ""3242415"" output: 5 explanation: ""24241"" is the longest awesome substring, we can form the palindrome ""24142"" with some swaps. example 2: input: s = ""12345678"" output: 1 example 3: input: s = ""213123"" output: 6 explanation: ""213123"" is the longest awesome substring, we can form the palindrome ""231132"" with some swaps. example 4: input: s = ""00"" output: 2",`1 <= s.length <= 10^5` `s` consists only of digits.,
1543,Fix Product Name Format,SQL Schema,Easy,https://leetcode.com/problems/fix-product-name-format,,,30,,sql schema,,,
1544,Make The String Great,"Given a string `s` of lower and upper case English letters.

A good string is a string which doesn't have two adjacent characters `s[i]` and `s[i + 1]` where:
`0 <= i <= s.length - 2`
`s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or vice-versa.

To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.

Return the string after making it good. The answer is guaranteed to be unique under the given constraints.

Notice that an empty string is also good.


Example 1:
Input: s = ""leEeetcode""
Output: ""leetcode""
Explanation: In the first step, either you choose i = 1 or i = 2, both will result ""leEeetcode"" to be reduced to ""leetcode"".


Example 2:
Input: s = ""abBAcC""
Output: """"
Explanation: We have many possible scenarios, and all lead to the same answer. For example:
""abBAcC"" --> ""aAcC"" --> ""cC"" --> """"
""abBAcC"" --> ""abBA"" --> ""aA"" --> """"

Example 3:
Input: s = ""s""
Output: ""s""

Constraints:
`1 <= s.length <= 100`
`s` contains only lower and upper case English letters.",Easy,https://leetcode.com/problems/make-the-string-great,Google,"String,Stack",395,,"given a string `s` of lower and upper case english letters. a good string is a string which doesn't have two adjacent characters `s[i]` and `s[i + 1]` where: `0 <= i <= s.length - 2` `s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or vice-versa. to make the string good, you can choose two adjacent characters that make the string bad and remove them. you can keep doing this until the string becomes good. return the string after making it good. the answer is guaranteed to be unique under the given constraints. notice that an empty string is also good.","input: s = ""leeeetcode"" output: ""leetcode"" explanation: in the first step, either you choose i = 1 or i = 2, both will result ""leeeetcode"" to be reduced to ""leetcode"". example 2: input: s = ""abbacc"" output: """" explanation: we have many possible scenarios, and all lead to the same answer. for example: ""abbacc"" --> ""aacc"" --> ""cc"" --> """" ""abbacc"" --> ""abba"" --> ""aa"" --> """" example 3: input: s = ""s"" output: ""s""",`1 <= s.length <= 10^0` `s` contains only lower and upper case english letters.,
1545,Find Kth Bit in Nth Binary String,"Given two positive integers `n` and `k`, the binary string  `Sn` is formed as follows:
`S1 = ""0""`
`Si = Si-1 + ""1"" + reverse(invert(Si-1))` for `i > 1`
Where `+` denotes the concatenation operation, `reverse(x)` returns the reversed string x, and `invert(x)` inverts all the bits in x (0 changes to 1 and 1 changes to 0).

For example, the first 4 strings in the above sequence are:
`S1 = ""0""`
`S2 = ""011""`
`S3 = ""0111001""`
`S4 = ""011100110110001""`
Return the `kth` bit in `Sn`. It is guaranteed that `k` is valid for the given `n`.


Example 1:
Input: n = 3, k = 1
Output: ""0""
Explanation: S3 is ""0111001"". The first bit is ""0"".


Example 2:
Input: n = 4, k = 11
Output: ""1""
Explanation: S4 is ""011100110110001"". The 11th bit is ""1"".


Example 3:
Input: n = 1, k = 1
Output: ""0""

Example 4:
Input: n = 2, k = 3
Output: ""1""

Constraints:
`1 <= n <= 20`
`1 <= k <= 2n - 1`",Medium,https://leetcode.com/problems/find-kth-bit-in-nth-binary-string,Rupeek,String,210,,"given two positive integers `n` and `k`, the binary string `sn` is formed as follows: `s1 = ""0""` `si = si-1 + ""1"" + reverse(invert(si-1))` for `i > 1` where `+` denotes the concatenation operation, `reverse(x)` returns the reversed string x, and `invert(x)` inverts all the bits in x (0 changes to 1 and 1 changes to 0). for example, the first 4 strings in the above sequence are: `s1 = ""0""` `s2 = ""011""` `s3 = ""0111001""` `s4 = ""011100110110001""` return the `kth` bit in `sn`. it is guaranteed that `k` is valid for the given `n`.","input: n = 3, k = 1 output: ""0"" explanation: s3 is ""0111001"". the first bit is ""0"". example 2: input: n = 4, k = 11 output: ""1"" explanation: s4 is ""011100110110001"". the 11th bit is ""1"". example 3: input: n = 1, k = 1 output: ""0"" example 4: input: n = 2, k = 3 output: ""1""",`1 <= n <= 20` `1 <= k <= 2n - 1`,
1546,Maximum Number of Non-Overlapping Subarrays With Sum Equals Target,"Given an array `nums` and an integer `target`.

Return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to `target`.


Example 1:
Input: nums = [1,1,1,1,1], target = 2
Output: 2
Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).


Example 2:
Input: nums = [-1,3,5,1,4,2,-9], target = 6
Output: 2
Explanation: There are 3 subarrays with sum equal to 6.

([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.


Example 3:
Input: nums = [-2,6,6,3,5,4,1,2,8], target = 10
Output: 3

Example 4:
Input: nums = [0,0,0], target = 0
Output: 3

Constraints:
`1 <= nums.length <= 10^5`
`-10^4 <= nums[i] <= 10^4`
`0 <= target <= 10^6`",Medium,https://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target,Google,Dynamic Programming,467,,given an array `nums` and an integer `target`. return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to `target`.,"input: nums = [1,1,1,1,1], target = 2 output: 2 explanation: there are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2). example 2: input: nums = [-1,3,5,1,4,2,-9], target = 6 output: 2 explanation: there are 3 subarrays with sum equal to 6. ([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping. example 3: input: nums = [-2,6,6,3,5,4,1,2,8], target = 10 output: 3 example 4: input: nums = [0,0,0], target = 0 output: 3",`1 <= nums.length <= 10^5` `-10^4 <= nums[i] <= 10^4` `0 <= target <= 10^6`,
1547,Minimum Cost to Cut a Stick,"Given a wooden stick of length `n` units. The stick is labelled from `0` to `n`. For example, a stick of length 6 is labelled as follows:
Given an integer array `cuts` where `cuts[i]` denotes a position you should perform a cut at.

You should perform the cuts in order, you can change the order of the cuts as you wish.

The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.

Return the minimum total cost of the cuts.


Example 1:
Input: n = 7, cuts = [1,3,4,5]
Output: 16
Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:
The first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.

Rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).


Example 2:
Input: n = 9, cuts = [5,6,1,4,2]
Output: 22
Explanation: If you try the given cuts ordering the cost will be 25.

There are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.


Constraints:
`2 <= n <= 10^6`
`1 <= cuts.length <= min(n - 1, 100)`
`1 <= cuts[i] <= n - 1`
All the integers in `cuts` array are distinct.",Hard,https://leetcode.com/problems/minimum-cost-to-cut-a-stick,Google,Dynamic Programming,415,,"given a wooden stick of length `n` units. the stick is labelled from `0` to `n`. for example, a stick of length 6 is labelled as follows: given an integer array `cuts` where `cuts[i]` denotes a position you should perform a cut at. you should perform the cuts in order, you can change the order of the cuts as you wish. the cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. when you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). please refer to the first example for a better explanation. return the minimum total cost of the cuts.","input: n = 7, cuts = [1,3,4,5] output: 16 explanation: using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario: the first cut is done to a rod of length 7 so the cost is 7. the second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. the total cost is 7 + 6 + 4 + 3 = 20. rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16). example 2: input: n = 9, cuts = [5,6,1,4,2] output: 22 explanation: if you try the given cuts ordering the cost will be 25. there are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.","`2 <= n <= 10^6` `1 <= cuts.length <= min(n - 1, 10^0)` `1 <= cuts[i] <= n - 1` all the integers in `cuts` array are distinct.",
1548,The Most Similar Path in a Graph,"We have `n` cities and `m` bi-directional `roads` where `roads[i] = [ai, bi]` connects city `ai` with city `bi`. Each city has a name consisting of exactly 3 upper-case English letters given in the string array `names`. Starting at any city `x`, you can reach any city `y` where `y != x` (i.e. the cities and the roads are forming an undirected connected graph).

You will be given a string array `targetPath`. You should find a path in the graph of the same length and with the minimum edit distance to `targetPath`.

You need to return the order of the nodes in the path with the minimum edit distance, The path should be of the same length of `targetPath` and should be valid (i.e. there should be a direct road between `ans[i]` and `ans[i + 1]`). If there are multiple answers return any one of them.

The edit distance is defined as follows:
Follow-up: If each node can be visited only once in the path, What should you change in your solution?

Example 1:
Input: n = 5, roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]], names = [""ATL"",""PEK"",""LAX"",""DXB"",""HND""], targetPath = [""ATL"",""DXB"",""HND"",""LAX""]
Output: [0,2,4,2]
Explanation: [0,2,4,2], [0,3,0,2] and [0,3,1,2] are accepted answers.

[0,2,4,2] is equivalent to [""ATL"",""LAX"",""HND"",""LAX""] which has edit distance = 1 with targetPath.

[0,3,0,2] is equivalent to [""ATL"",""DXB"",""ATL"",""LAX""] which has edit distance = 1 with targetPath.

[0,3,1,2] is equivalent to [""ATL"",""DXB"",""PEK"",""LAX""] which has edit distance = 1 with targetPath.


Example 2:
Input: n = 4, roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]], names = [""ATL"",""PEK"",""LAX"",""DXB""], targetPath = [""ABC"",""DEF"",""GHI"",""JKL"",""MNO"",""PQR"",""STU"",""VWX""]
Output: [0,1,0,1,0,1,0,1]
Explanation: Any path in this graph has edit distance = 8 with targetPath.


Example 3:
Input: n = 6, roads = [[0,1],[1,2],[2,3],[3,4],[4,5]], names = [""ATL"",""PEK"",""LAX"",""ATL"",""DXB"",""HND""], targetPath = [""ATL"",""DXB"",""HND"",""DXB"",""ATL"",""LAX"",""PEK""]
Output: [3,4,5,4,3,2,1]
Explanation: [3,4,5,4,3,2,1] is the only path with edit distance = 0 with targetPath.

It's equivalent to [""ATL"",""DXB"",""HND"",""DXB"",""ATL"",""LAX"",""PEK""]

Constraints:
`2 <= n <= 100`
`m == roads.length`
`n - 1 <= m <= (n * (n - 1) / 2)`
`0 <= ai, bi <= n - 1`
`ai != bi `
The graph is guaranteed to be connected and each pair of nodes may have at most one direct road.

`names.length == n`
`names[i].length == 3`
`names[i]` consists of upper-case English letters.

There can be two cities with the same name.

`1 <= targetPath.length <= 100`
`targetPath[i].length == 3`
`targetPath[i]` consists of upper-case English letters.",Hard,https://leetcode.com/problems/the-most-similar-path-in-a-graph,Google,"Dynamic Programming,Graph",133,,"we have `n` cities and `m` bi-directional `roads` where `roads[i] = [ai, bi]` connects city `ai` with city `bi`. each city has a name consisting of exactly 3 upper-case english letters given in the string array `names`. starting at any city `x`, you can reach any city `y` where `y != x` (i.e. the cities and the roads are forming an undirected connected graph). you will be given a string array `targetpath`. you should find a path in the graph of the same length and with the minimum edit distance to `targetpath`. you need to return the order of the nodes in the path with the minimum edit distance, the path should be of the same length of `targetpath` and should be valid (i.e. there should be a direct road between `ans[i]` and `ans[i + 1]`). if there are multiple answers return any one of them. the edit distance is defined as follows:","input: n = 5, roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]], names = [""atl"",""pek"",""lax"",""dxb"",""hnd""], targetpath = [""atl"",""dxb"",""hnd"",""lax""] output: [0,2,4,2] explanation: [0,2,4,2], [0,3,0,2] and [0,3,1,2] are accepted answers. [0,2,4,2] is equivalent to [""atl"",""lax"",""hnd"",""lax""] which has edit distance = 1 with targetpath. [0,3,0,2] is equivalent to [""atl"",""dxb"",""atl"",""lax""] which has edit distance = 1 with targetpath. [0,3,1,2] is equivalent to [""atl"",""dxb"",""pek"",""lax""] which has edit distance = 1 with targetpath. example 2: input: n = 4, roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]], names = [""atl"",""pek"",""lax"",""dxb""], targetpath = [""abc"",""def"",""ghi"",""jkl"",""mno"",""pqr"",""stu"",""vwx""] output: [0,1,0,1,0,1,0,1] explanation: any path in this graph has edit distance = 8 with targetpath. example 3: input: n = 6, roads = [[0,1],[1,2],[2,3],[3,4],[4,5]], names = [""atl"",""pek"",""lax"",""atl"",""dxb"",""hnd""], targetpath = [""atl"",""dxb"",""hnd"",""dxb"",""atl"",""lax"",""pek""] output: [3,4,5,4,3,2,1] explanation: [3,4,5,4,3,2,1] is the only path with edit distance = 0 with targetpath. it's equivalent to [""atl"",""dxb"",""hnd"",""dxb"",""atl"",""lax"",""pek""]","`2 <= n <= 10^0` `m == roads.length` `n - 1 <= m <= (n * (n - 1) / 2)` `0 <= ai, bi <= n - 1` `ai != bi ` the graph is guaranteed to be connected and each pair of nodes may have at most one direct road. `names.length == n` `names[i].length == 3` `names[i]` consists of upper-case english letters. there can be two cities with the same name. `1 <= targetpath.length <= 10^0` `targetpath[i].length == 3` `targetpath[i]` consists of upper-case english letters.","if each node can be visited only once in the path, what should you change in your solution? example 1: input: n = 5, roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]], names = [""atl"",""pek"",""lax"",""dxb"",""hnd""], targetpath = [""atl"",""dxb"",""hnd"",""lax""] output: [0,2,4,2] explanation: [0,2,4,2], [0,3,0,2] and [0,3,1,2] are accepted answers. [0,2,4,2] is equivalent to [""atl"",""lax"",""hnd"",""lax""] which has edit distance = 1 with targetpath. [0,3,0,2] is equivalent to [""atl"",""dxb"",""atl"",""lax""] which has edit distance = 1 with targetpath. [0,3,1,2] is equivalent to [""atl"",""dxb"",""pek"",""lax""] which has edit distance = 1 with targetpath. example 2: input: n = 4, roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]], names = [""atl"",""pek"",""lax"",""dxb""], targetpath = [""abc"",""def"",""ghi"",""jkl"",""mno"",""pqr"",""stu"",""vwx""] output: [0,1,0,1,0,1,0,1] explanation: any path in this graph has edit distance = 8 with targetpath. example 3: input: n = 6, roads = [[0,1],[1,2],[2,3],[3,4],[4,5]], names = [""atl"",""pek"",""lax"",""atl"",""dxb"",""hnd""], targetpath = [""atl"",""dxb"",""hnd"",""dxb"",""atl"",""lax"",""pek""] output: [3,4,5,4,3,2,1] explanation: [3,4,5,4,3,2,1] is the only path with edit distance = 0 with targetpath. it's equivalent to [""atl"",""dxb"",""hnd"",""dxb"",""atl"",""lax"",""pek""] constraints: `2 <= n <= 100` `m == roads.length` `n - 1 <= m <= (n * (n - 1) / 2)` `0 <= ai, bi <= n - 1` `ai != bi ` the graph is guaranteed to be connected and each pair of nodes may have at most one direct road. `names.length == n` `names[i].length == 3` `names[i]` consists of upper-case english letters. there can be two cities with the same name. `1 <= targetpath.length <= 100` `targetpath[i].length == 3` `targetpath[i]` consists of upper-case english letters."
1549,The Most Recent Orders for Each Product,SQL Schema,Medium,https://leetcode.com/problems/the-most-recent-orders-for-each-product,,,30,,sql schema,,,
1550,Three Consecutive Odds,"Given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.


Example 1:
Input: arr = [2,6,4,1]
Output: false
Explanation: There are no three consecutive odds.


Example 2:
Input: arr = [1,2,34,3,4,5,7,23,12]
Output: true
Explanation: [5,7,23] are three consecutive odds.


Constraints:
`1 <= arr.length <= 1000`
`1 <= arr[i] <= 1000`",Easy,https://leetcode.com/problems/three-consecutive-odds,DJI,Array,193,,"given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. otherwise, return `false`.","input: arr = [2,6,4,1] output: false explanation: there are no three consecutive odds. example 2: input: arr = [1,2,34,3,4,5,7,23,12] output: true explanation: [5,7,23] are three consecutive odds.",`1 <= arr.length <= 1000` `1 <= arr[i] <= 1000`,
1551,Minimum Operations to Make Array Equal,"You have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e. `0 <= i < n`).

In one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e. perform `arr[x] -=1 `and `arr[y] += 1`). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.

Given an integer `n`, the length of the array. Return the minimum number of operations needed to make all the elements of arr equal.


Example 1:
Input: n = 3
Output: 2
Explanation: arr = [1, 3, 5]
First operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]
In the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].


Example 2:
Input: n = 6
Output: 9

Constraints:
`1 <= n <= 10^4`",Medium,https://leetcode.com/problems/minimum-operations-to-make-array-equal,Brillio,Math,433,,"you have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e. `0 <= i < n`). in one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e. perform `arr[x] -=1 `and `arr[y] += 1`). the goal is to make all the elements of the array equal. it is guaranteed that all the elements of the array can be made equal using some operations. given an integer `n`, the length of the array. return the minimum number of operations needed to make all the elements of arr equal.","input: n = 3 output: 2 explanation: arr = [1, 3, 5] first operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4] in the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3]. example 2: input: n = 6 output: 9",`1 <= n <= 10^4`,
1552,Magnetic Force Between Two Balls,"In universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has `n` empty baskets, the `ith` basket is at `position[i]`, Morty has `m` balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.

Rick stated that magnetic force between two different balls at positions `x` and `y` is `|x - y|`.

Given the integer array `position` and the integer `m`. Return the required force.


Example 1:
Input: position = [1,2,3,4,7], m = 3
Output: 3
Explanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.


Example 2:
Input: position = [5,4,3,2,1,1000000000], m = 2
Output: 999999999
Explanation: We can use baskets 1 and 1000000000.


Constraints:
`n == position.length`
`2 <= n <= 10^5`
`1 <= position[i] <= 10^9`
All integers in `position` are distinct.

`2 <= m <= position.length`",Medium,https://leetcode.com/problems/magnetic-force-between-two-balls,Roblox,"Array,Binary Search",500,,"in universe earth c-137, rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. rick has `n` empty baskets, the `ith` basket is at `position[i]`, morty has `m` balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum. rick stated that magnetic force between two different balls at positions `x` and `y` is `|x - y|`. given the integer array `position` and the integer `m`. return the required force.","input: position = [1,2,3,4,7], m = 3 output: 3 explanation: distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. the minimum magnetic force is 3. we cannot achieve a larger minimum magnetic force than 3. example 2: input: position = [5,4,3,2,1,1000000000], m = 2 output: 999999999 explanation: we can use baskets 1 and 1000000000.",`n == position.length` `2 <= n <= 10^5` `1 <= position[i] <= 10^9` all integers in `position` are distinct. `2 <= m <= position.length`,
1553,Minimum Number of Days to Eat N Oranges,"There are `n` oranges in the kitchen and you decided to eat some of these oranges every day as follows:
Eat one orange.

If the number of remaining oranges (`n`) is divisible by 2 then you can eat  n/2 oranges.

If the number of remaining oranges (`n`) is divisible by 3 then you can eat  2*(n/3) oranges.

You can only choose one of the actions per day.

Return the minimum number of days to eat `n` oranges.


Example 1:
Input: n = 10
Output: 4
Explanation: You have 10 oranges.

Day 1: Eat 1 orange,  10 - 1 = 9.  
Day 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)
Day 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. 
Day 4: Eat the last orange  1 - 1  = 0.

You need at least 4 days to eat the 10 oranges.


Example 2:
Input: n = 6
Output: 3
Explanation: You have 6 oranges.

Day 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).

Day 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)
Day 3: Eat the last orange  1 - 1  = 0.

You need at least 3 days to eat the 6 oranges.


Example 3:
Input: n = 1
Output: 1

Example 4:
Input: n = 56
Output: 6

Constraints:
`1 <= n <= 2*10^9`",Hard,https://leetcode.com/problems/minimum-number-of-days-to-eat-n-oranges,Google,Dynamic Programming,403,,there are `n` oranges in the kitchen and you decided to eat some of these oranges every day as follows: eat one orange. if the number of remaining oranges (`n`) is divisible by 2 then you can eat n/2 oranges. if the number of remaining oranges (`n`) is divisible by 3 then you can eat 2*(n/3) oranges. you can only choose one of the actions per day. return the minimum number of days to eat `n` oranges.,"input: n = 10 output: 4 explanation: you have 10 oranges. day 1: eat 1 orange, 10 - 1 = 9. day 2: eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (since 9 is divisible by 3) day 3: eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. day 4: eat the last orange 1 - 1 = 0. you need at least 4 days to eat the 10 oranges. example 2: input: n = 6 output: 3 explanation: you have 6 oranges. day 1: eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (since 6 is divisible by 2). day 2: eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (since 3 is divisible by 3) day 3: eat the last orange 1 - 1 = 0. you need at least 3 days to eat the 6 oranges. example 3: input: n = 1 output: 1 example 4: input: n = 56 output: 6",`1 <= n <= 2*10^9`,
1554,Strings Differ by One Character,"Given a list of strings `dict` where all the strings are of the same length.

Return `True` if there are 2 strings that only differ by 1 character in the same index, otherwise return `False`.

Follow up: Could you solve this problem in O(n*m) where n is the length of `dict` and m is the length of each string.


Example 1:
Input: dict = [""abcd"",""acbd"", ""aacd""]
Output: true
Explanation: Strings ""abcd"" and ""aacd"" differ only by one character in the index 1.


Example 2:
Input: dict = [""ab"",""cd"",""yz""]
Output: false

Example 3:
Input: dict = [""abcd"",""cccc"",""abyd"",""abab""]
Output: true

Constraints:
Number of characters in `dict <= 10^5`
`dict[i].length == dict[j].length`
`dict[i]` should be unique.

`dict[i]` contains only lowercase English letters.",Medium,https://leetcode.com/problems/strings-differ-by-one-character,Airbnb,,65,,"given a list of strings `dict` where all the strings are of the same length. return `true` if there are 2 strings that only differ by 1 character in the same index, otherwise return `false`.","input: dict = [""abcd"",""acbd"", ""aacd""] output: true explanation: strings ""abcd"" and ""aacd"" differ only by one character in the index 1. example 2: input: dict = [""ab"",""cd"",""yz""] output: false example 3: input: dict = [""abcd"",""cccc"",""abyd"",""abab""] output: true",number of characters in `dict <= 10^5` `dict[i].length == dict[j].length` `dict[i]` should be unique. `dict[i]` contains only lowercase english letters.,"could you solve this problem in o(n*m) where n is the length of `dict` and m is the length of each string. example 1: input: dict = [""abcd"",""acbd"", ""aacd""] output: true explanation: strings ""abcd"" and ""aacd"" differ only by one character in the index 1. example 2: input: dict = [""ab"",""cd"",""yz""] output: false example 3: input: dict = [""abcd"",""cccc"",""abyd"",""abab""] output: true constraints: number of characters in `dict <= 10^5` `dict[i].length == dict[j].length` `dict[i]` should be unique. `dict[i]` contains only lowercase english letters."
1555,Bank Account Summary,SQL Schema,Medium,https://leetcode.com/problems/bank-account-summary,Optum,,57,,sql schema,,,
1556,Thousand Separator,"Given an integer `n`, add a dot (""."") as the thousands separator and return it in string format.


Example 1:
Input: n = 987
Output: ""987""

Example 2:
Input: n = 1234
Output: ""1.234""

Example 3:
Input: n = 123456789
Output: ""123.456.789""

Example 4:
Input: n = 0
Output: ""0""

Constraints:
`0 <= n < 2^31`",Easy,https://leetcode.com/problems/thousand-separator,,,198,,"given an integer `n`, add a dot (""."") as the thousands separator and return it in string format.","input: n = 987 output: ""987"" example 2: input: n = 1234 output: ""1.234"" example 3: input: n = 123456789 output: ""123.456.789"" example 4: input: n = 0 output: ""0""",`0 <= n < 2^31`,
1557,Minimum Number of Vertices to Reach All Nodes,"Given a directed acyclic graph, with `n` vertices numbered from `0` to `n-1`, and an array `edges` where `edges[i] = [fromi, toi]` represents a directed edge from node `fromi` to node `toi`.

Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.

Notice that you can return the vertices in any order.


Example 1:
Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
Output: [0,3]
Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].


Example 2:
Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]
Output: [0,2,3]
Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.


Constraints:
`2 <= n <= 10^5`
`1 <= edges.length <= min(10^5, n * (n - 1) / 2)`
`edges[i].length == 2`
`0 <= fromi, toi < n`
All pairs `(fromi, toi)` are distinct.",Medium,https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes,"Google,Airbnb",Graph,519,,"given a directed acyclic graph, with `n` vertices numbered from `0` to `n-1`, and an array `edges` where `edges[i] = [fromi, toi]` represents a directed edge from node `fromi` to node `toi`. find the smallest set of vertices from which all nodes in the graph are reachable. it's guaranteed that a unique solution exists. notice that you can return the vertices in any order.","input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]] output: [0,3] explanation: it's not possible to reach all the nodes from a single vertex. from 0 we can reach [0,1,2,5]. from 3 we can reach [3,4,2,5]. so we output [0,3]. example 2: input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]] output: [0,2,3] explanation: notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. also any of these vertices can reach nodes 1 and 4.","`2 <= n <= 10^5` `1 <= edges.length <= min(10^5, n * (n - 1) / 2)` `edges[i].length == 2` `0 <= fromi, toi < n` all pairs `(fromi, toi)` are distinct.",
1558,Minimum Numbers of Function Calls to Make Target Array,"Your task is to form an integer array `nums` from an initial array of zeros `arr` that is the same size as `nums`.

Return the minimum number of function calls to make `nums` from `arr`.

The answer is guaranteed to fit in a 32-bit signed integer.


Example 1:
Input: nums = [1,5]
Output: 5
Explanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).

Double all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).

Increment by 1 (both elements)  [0, 4] -> [1, 4] -> [1, 5] (2 operations).

Total of operations: 1 + 2 + 2 = 5.


Example 2:
Input: nums = [2,2]
Output: 3
Explanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).

Double all the elements: [1, 1] -> [2, 2] (1 operation).

Total of operations: 2 + 1 = 3.


Example 3:
Input: nums = [4,2,5]
Output: 6
Explanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums).


Example 4:
Input: nums = [3,2,2,4]
Output: 7

Example 5:
Input: nums = [2,4,8,16]
Output: 8

Constraints:
`1 <= nums.length <= 10^5`
`0 <= nums[i] <= 10^9`",Medium,https://leetcode.com/problems/minimum-numbers-of-function-calls-to-make-target-array,Amazon,Greedy,247,,your task is to form an integer array `nums` from an initial array of zeros `arr` that is the same size as `nums`. return the minimum number of function calls to make `nums` from `arr`. the answer is guaranteed to fit in a 32-bit signed integer.,"input: nums = [1,5] output: 5 explanation: increment by 1 (second element): [0, 0] to get [0, 1] (1 operation). double all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations). increment by 1 (both elements) [0, 4] -> [1, 4] -> [1, 5] (2 operations). total of operations: 1 + 2 + 2 = 5. example 2: input: nums = [2,2] output: 3 explanation: increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations). double all the elements: [1, 1] -> [2, 2] (1 operation). total of operations: 2 + 1 = 3. example 3: input: nums = [4,2,5] output: 6 explanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums). example 4: input: nums = [3,2,2,4] output: 7 example 5: input: nums = [2,4,8,16] output: 8",`1 <= nums.length <= 10^5` `0 <= nums[i] <= 10^9`,
1559,Detect Cycles in 2D Grid,"Given a 2D array of characters `grid` of size `m x n`, you need to find if there exists any cycle consisting of the same value in `grid`.

A cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.

Also, you cannot move to the cell that you visited in your last move. For example, the cycle `(1, 1) -> (1, 2) -> (1, 1)` is invalid because from `(1, 2)` we visited `(1, 1)` which was the last visited cell.

Return `true` if any cycle of the same value exists in `grid`, otherwise, return `false`.


Example 1:
Input: grid = [[""a"",""a"",""a"",""a""],[""a"",""b"",""b"",""a""],[""a"",""b"",""b"",""a""],[""a"",""a"",""a"",""a""]]
Output: true
Explanation: There are two valid cycles shown in different colors in the image below:

Example 2:
Input: grid = [[""c"",""c"",""c"",""a""],[""c"",""d"",""c"",""c""],[""c"",""c"",""e"",""c""],[""f"",""c"",""c"",""c""]]
Output: true
Explanation: There is only one valid cycle highlighted in the image below:

Example 3:
Input: grid = [[""a"",""b"",""b""],[""b"",""z"",""b""],[""b"",""b"",""a""]]
Output: false

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m <= 500`
`1 <= n <= 500`
`grid` consists only of lowercase English letters.",Hard,https://leetcode.com/problems/detect-cycles-in-2d-grid,Amazon,Depth-first Search,266,,"given a 2d array of characters `grid` of size `m x n`, you need to find if there exists any cycle consisting of the same value in `grid`. a cycle is a path of length 4 or more in the grid that starts and ends at the same cell. from a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell. also, you cannot move to the cell that you visited in your last move. for example, the cycle `(1, 1) -> (1, 2) -> (1, 1)` is invalid because from `(1, 2)` we visited `(1, 1)` which was the last visited cell. return `true` if any cycle of the same value exists in `grid`, otherwise, return `false`.","input: grid = [[""a"",""a"",""a"",""a""],[""a"",""b"",""b"",""a""],[""a"",""b"",""b"",""a""],[""a"",""a"",""a"",""a""]] output: true explanation: there are two valid cycles shown in different colors in the image below: example 2: input: grid = [[""c"",""c"",""c"",""a""],[""c"",""d"",""c"",""c""],[""c"",""c"",""e"",""c""],[""f"",""c"",""c"",""c""]] output: true explanation: there is only one valid cycle highlighted in the image below: example 3: input: grid = [[""a"",""b"",""b""],[""b"",""z"",""b""],[""b"",""b"",""a""]] output: false",`m == grid.length` `n == grid[i].length` `1 <= m <= 500` `1 <= n <= 500` `grid` consists only of lowercase english letters.,
1560,Most Visited Sector in  a Circular Track,"Given an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`
Return an array of the most visited sectors sorted in ascending order.

Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).


Example 1:
Input: n = 4, rounds = [1,3,1,2]
Output: [1,2]
Explanation: The marathon starts at sector 1. The order of the visited sectors is as follows:
1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)
We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.


Example 2:
Input: n = 2, rounds = [2,1,2,1,2,1,2,1,2]
Output: [2]

Example 3:
Input: n = 7, rounds = [1,3,5,7]
Output: [1,2,3,4,5,6,7]

Constraints:
`2 <= n <= 100`
`1 <= m <= 100`
`rounds.length == m + 1`
`1 <= rounds[i] <= n`
`rounds[i] != rounds[i + 1]` for `0 <= i < m`",Easy,https://leetcode.com/problems/most-visited-sector-in-a-circular-track,Expedia,Array,126,,"given an integer `n` and an integer array `rounds`. we have a circular track which consists of `n` sectors labeled from `1` to `n`. a marathon will be held on this track, the marathon consists of `m` rounds. the `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. for example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]` return an array of the most visited sectors sorted in ascending order. notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (see the first example).","input: n = 4, rounds = [1,3,1,2] output: [1,2] explanation: the marathon starts at sector 1. the order of the visited sectors is as follows: 1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon) we can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. sectors 3 and 4 are visited only once. example 2: input: n = 2, rounds = [2,1,2,1,2,1,2,1,2] output: [2] example 3: input: n = 7, rounds = [1,3,5,7] output: [1,2,3,4,5,6,7]",`2 <= n <= 10^0` `1 <= m <= 10^0` `rounds.length == m + 1` `1 <= rounds[i] <= n` `rounds[i] != rounds[i + 1]` for `0 <= i < m`,
1561,Maximum Number of Coins You Can Get,"There are 3n piles of coins of varying size, you and your friends will take piles of coins as follows:
In each step, you will choose any 3 piles of coins (not necessarily consecutive).

Of your choice, Alice will pick the pile with the maximum number of coins.

You will pick the next pile with maximum number of coins.

Your friend Bob will pick the last pile.

Repeat until there are no more piles of coins.

Given an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile.

Return the maximum number of coins which you can have.


Example 1:
Input: piles = [2,4,1,2,7,8]
Output: 9
Explanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with 7 coins and Bob the last one.

Choose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with 2 coins and Bob the last one.

The maximum number of coins which you can have are: 7 + 2 = 9.

On the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal.


Example 2:
Input: piles = [2,4,5]
Output: 4

Example 3:
Input: piles = [9,8,7,6,5,1,2,3,4]
Output: 18

Constraints:
`3 <= piles.length <= 10^5`
`piles.length % 3 == 0`
`1 <= piles[i] <= 10^4`",Medium,https://leetcode.com/problems/maximum-number-of-coins-you-can-get,,,235,,"there are 3n piles of coins of varying size, you and your friends will take piles of coins as follows: in each step, you will choose any 3 piles of coins (not necessarily consecutive). of your choice, alice will pick the pile with the maximum number of coins. you will pick the next pile with maximum number of coins. your friend bob will pick the last pile. repeat until there are no more piles of coins. given an array of integers `piles` where `piles[i]` is the number of coins in the `ith` pile. return the maximum number of coins which you can have.","input: piles = [2,4,1,2,7,8] output: 9 explanation: choose the triplet (2, 7, 8), alice pick the pile with 8 coins, you the pile with 7 coins and bob the last one. choose the triplet (1, 2, 4), alice pick the pile with 4 coins, you the pile with 2 coins and bob the last one. the maximum number of coins which you can have are: 7 + 2 = 9. on the other hand if we choose this arrangement (1, 2, 8), (2, 4, 7) you only get 2 + 4 = 6 coins which is not optimal. example 2: input: piles = [2,4,5] output: 4 example 3: input: piles = [9,8,7,6,5,1,2,3,4] output: 18",`3 <= piles.length <= 10^5` `piles.length % 3 == 0` `1 <= piles[i] <= 10^4`,
1562,Find Latest Group of Size M,"Given an array `arr` that represents a permutation of numbers from `1` to `n`. You have a binary string of size `n` that initially has all its bits set to zero.

At each step `i` (assuming both the binary string and `arr` are 1-indexed) from `1` to `n`, the bit at position `arr[i]` is set to `1`. You are given an integer `m` and you need to find the latest step at which there exists a group of ones of length `m`. A group of ones is a contiguous substring of 1s such that it cannot be extended in either direction.

Return the latest step at which there exists a group of ones of length exactly `m`. If no such group exists, return `-1`.


Example 1:
Input: arr = [3,5,1,2,4], m = 1
Output: 4
Explanation:
Step 1: ""00100"", groups: [""1""]
Step 2: ""00101"", groups: [""1"", ""1""]
Step 3: ""10101"", groups: [""1"", ""1"", ""1""]
Step 4: ""11101"", groups: [""111"", ""1""]
Step 5: ""11111"", groups: [""11111""]
The latest step at which there exists a group of size 1 is step 4.


Example 2:
Input: arr = [3,1,5,4,2], m = 2
Output: -1
Explanation:
Step 1: ""00100"", groups: [""1""]
Step 2: ""10100"", groups: [""1"", ""1""]
Step 3: ""10101"", groups: [""1"", ""1"", ""1""]
Step 4: ""10111"", groups: [""1"", ""111""]
Step 5: ""11111"", groups: [""11111""]
No group of size 2 exists during any step.


Example 3:
Input: arr = [1], m = 1
Output: 1

Example 4:
Input: arr = [2,1], m = 2
Output: 2

Constraints:
`n == arr.length`
`1 <= n <= 10^5`
`1 <= arr[i] <= n`
All integers in `arr` are distinct.

`1 <= m <= arr.length`",Medium,https://leetcode.com/problems/find-latest-group-of-size-m,Google,Binary Search,322,,"given an array `arr` that represents a permutation of numbers from `1` to `n`. you have a binary string of size `n` that initially has all its bits set to zero. at each step `i` (assuming both the binary string and `arr` are 1-indexed) from `1` to `n`, the bit at position `arr[i]` is set to `1`. you are given an integer `m` and you need to find the latest step at which there exists a group of ones of length `m`. a group of ones is a contiguous substring of 1s such that it cannot be extended in either direction. return the latest step at which there exists a group of ones of length exactly `m`. if no such group exists, return `-1`.","input: arr = [3,5,1,2,4], m = 1 output: 4 explanation: step 1: ""00100"", groups: [""1""] step 2: ""00101"", groups: [""1"", ""1""] step 3: ""10101"", groups: [""1"", ""1"", ""1""] step 4: ""11101"", groups: [""111"", ""1""] step 5: ""11111"", groups: [""11111""] the latest step at which there exists a group of size 1 is step 4. example 2: input: arr = [3,1,5,4,2], m = 2 output: -1 explanation: step 1: ""00100"", groups: [""1""] step 2: ""10100"", groups: [""1"", ""1""] step 3: ""10101"", groups: [""1"", ""1"", ""1""] step 4: ""10111"", groups: [""1"", ""111""] step 5: ""11111"", groups: [""11111""] no group of size 2 exists during any step. example 3: input: arr = [1], m = 1 output: 1 example 4: input: arr = [2,1], m = 2 output: 2",`n == arr.length` `1 <= n <= 10^5` `1 <= arr[i] <= n` all integers in `arr` are distinct. `1 <= m <= arr.length`,
1563,Stone Game V,"There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array `stoneValue`.

In each round of the game, Alice divides the row into two non-empty rows (i.e. left row and right row), then Bob calculates the value of each row which is the sum of the values of all the stones in this row. Bob throws away the row which has the maximum value, and Alice's score increases by the value of the remaining row. If the value of the two rows are equal, Bob lets Alice decide which row will be thrown away. The next round starts with the remaining row.

The game ends when there is only one stone remaining. Alice's is initially zero.

Return the maximum score that Alice can obtain.


Example 1:
Input: stoneValue = [6,2,3,4,5,5]
Output: 18
Explanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.

In the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).

The last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.


Example 2:
Input: stoneValue = [7,7,7,7,7,7,7]
Output: 28

Example 3:
Input: stoneValue = [4]
Output: 0

Constraints:
`1 <= stoneValue.length <= 500`
`1 <= stoneValue[i] <= 10^6`",Hard,https://leetcode.com/problems/stone-game-v,,,203,,"there are several stones arranged in a row, and each stone has an associated value which is an integer given in the array `stonevalue`. in each round of the game, alice divides the row into two non-empty rows (i.e. left row and right row), then bob calculates the value of each row which is the sum of the values of all the stones in this row. bob throws away the row which has the maximum value, and alice's score increases by the value of the remaining row. if the value of the two rows are equal, bob lets alice decide which row will be thrown away. the next round starts with the remaining row. the game ends when there is only one stone remaining. alice's is initially zero. return the maximum score that alice can obtain.","input: stonevalue = [6,2,3,4,5,5] output: 18 explanation: in the first round, alice divides the row to [6,2,3], [4,5,5]. the left row has the value 11 and the right row has value 14. bob throws away the right row and alice's score is now 11. in the second round alice divides the row to [6], [2,3]. this time bob throws away the left row and alice's score becomes 16 (11 + 5). the last round alice has only one choice to divide the row which is [2], [3]. bob throws away the right row and alice's score is now 18 (16 + 2). the game ends because only one stone is remaining in the row. example 2: input: stonevalue = [7,7,7,7,7,7,7] output: 28 example 3: input: stonevalue = [4] output: 0",`1 <= stonevalue.length <= 500` `1 <= stonevalue[i] <= 10^6`,
1564,Put Boxes Into the Warehouse I,"You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labelled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.

Boxes are put into the warehouse by the following rules:
Boxes cannot be stacked.

You can rearrange the insertion order of the boxes.

Boxes can only be pushed into the warehouse from left to right only.

If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.

Return the maximum number of boxes you can put into the warehouse.


Example 1:
Input: boxes = [4,3,4,1], warehouse = [5,3,3,4,1]
Output: 3
Explanation: 
We can first put the box of height 1 in room 4. Then we can put the box of height 3 in either of the 3 rooms 1, 2, or 3. Lastly, we can put one box of height 4 in room 0.

There is no way we can fit all 4 boxes in the warehouse.


Example 2:
Input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]
Output: 3
Explanation: 
Notice that it's not possible to put the box of height 4 into the warehouse since it cannot pass the first room of height 3.

Also, for the last two rooms, 2 and 3, only boxes of height 1 can fit.

We can fit 3 boxes maximum as shown above. The yellow box can also be put in room 2 instead.

Swapping the orange and green boxes is also valid, or swapping one of them with the red box.


Example 3:
Input: boxes = [1,2,3], warehouse = [1,2,3,4]
Output: 1
Explanation: Since the first room in the warehouse is of height 1, we can only put boxes of height 1.


Example 4:
Input: boxes = [4,5,6], warehouse = [3,3,3,3,3]
Output: 0

Constraints:
`n == warehouse.length`
`1 <= boxes.length, warehouse.length <= 10^5`
`1 <= boxes[i], warehouse[i] <= 10^9`",Medium,https://leetcode.com/problems/put-boxes-into-the-warehouse-i,Google,Greedy,69,"[Put Boxes Into the Warehouse II, /problems/put-boxes-into-the-warehouse-ii/, Medium]","you are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. the warehouse's rooms are labelled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room. boxes are put into the warehouse by the following rules: boxes cannot be stacked. you can rearrange the insertion order of the boxes. boxes can only be pushed into the warehouse from left to right only. if the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room. return the maximum number of boxes you can put into the warehouse.","input: boxes = [4,3,4,1], warehouse = [5,3,3,4,1] output: 3 explanation: we can first put the box of height 1 in room 4. then we can put the box of height 3 in either of the 3 rooms 1, 2, or 3. lastly, we can put one box of height 4 in room 0. there is no way we can fit all 4 boxes in the warehouse. example 2: input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2] output: 3 explanation: notice that it's not possible to put the box of height 4 into the warehouse since it cannot pass the first room of height 3. also, for the last two rooms, 2 and 3, only boxes of height 1 can fit. we can fit 3 boxes maximum as shown above. the yellow box can also be put in room 2 instead. swapping the orange and green boxes is also valid, or swapping one of them with the red box. example 3: input: boxes = [1,2,3], warehouse = [1,2,3,4] output: 1 explanation: since the first room in the warehouse is of height 1, we can only put boxes of height 1. example 4: input: boxes = [4,5,6], warehouse = [3,3,3,3,3] output: 0","`n == warehouse.length` `1 <= boxes.length, warehouse.length <= 10^5` `1 <= boxes[i], warehouse[i] <= 10^9`",
1565,Unique Orders and Customers Per Month,SQL Schema,Easy,https://leetcode.com/problems/unique-orders-and-customers-per-month,Whole Foods Market,,30,,sql schema,,,
1566,Detect Pattern of Length M Repeated K or More Times,"Given an array of positive integers `arr`,  find a pattern of length `m` that is repeated `k` or more times.

A pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.

Return `true` if there exists a pattern of length `m` that is repeated `k` or more times, otherwise return `false`.


Example 1:
Input: arr = [1,2,4,4,4,4], m = 1, k = 3
Output: true
Explanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.


Example 2:
Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2
Output: true
Explanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.


Example 3:
Input: arr = [1,2,1,2,1,3], m = 2, k = 3
Output: false
Explanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.


Example 4:
Input: arr = [1,2,3,1,2], m = 2, k = 2
Output: false
Explanation: Notice that the pattern (1,2) exists twice but not consecutively, so it doesn't count.


Example 5:
Input: arr = [2,2,2,2], m = 2, k = 3
Output: false
Explanation: The only pattern of length 2 is (2,2) however it's repeated only twice. Notice that we do not count overlapping repetitions.


Constraints:
`2 <= arr.length <= 100`
`1 <= arr[i] <= 100`
`1 <= m <= 100`
`2 <= k <= 100`",Easy,https://leetcode.com/problems/detect-pattern-of-length-m-repeated-k-or-more-times,HRT,Array,297,"[Maximum Repeating Substring, /problems/maximum-repeating-substring/, Easy]","given an array of positive integers `arr`, find a pattern of length `m` that is repeated `k` or more times. a pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. a pattern is defined by its length and the number of repetitions. return `true` if there exists a pattern of length `m` that is repeated `k` or more times, otherwise return `false`.","input: arr = [1,2,4,4,4,4], m = 1, k = 3 output: true explanation: the pattern (4) of length 1 is repeated 4 consecutive times. notice that pattern can be repeated k or more times but not less. example 2: input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2 output: true explanation: the pattern (1,2) of length 2 is repeated 2 consecutive times. another valid pattern (2,1) is also repeated 2 times. example 3: input: arr = [1,2,1,2,1,3], m = 2, k = 3 output: false explanation: the pattern (1,2) is of length 2 but is repeated only 2 times. there is no pattern of length 2 that is repeated 3 or more times. example 4: input: arr = [1,2,3,1,2], m = 2, k = 2 output: false explanation: notice that the pattern (1,2) exists twice but not consecutively, so it doesn't count. example 5: input: arr = [2,2,2,2], m = 2, k = 3 output: false explanation: the only pattern of length 2 is (2,2) however it's repeated only twice. notice that we do not count overlapping repetitions.",`2 <= arr.length <= 10^0` `1 <= arr[i] <= 10^0` `1 <= m <= 10^0` `2 <= k <= 10^0`,
1567,Maximum Length of Subarray With Positive Product,"Given an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.


Example 1:
Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.


Example 2:
Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.

Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.


Example 3:
Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].


Example 4:
Input: nums = [-1,2]
Output: 1

Example 5:
Input: nums = [1,2,3,5,-6,4,0,10]
Output: 4

Constraints:
`1 <= nums.length <= 10^5`
`-10^9 <= nums[i] <= 10^9`",Medium,https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product,Arcesium,Greedy,379,,"given an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive. a subarray of an array is a consecutive sequence of zero or more values taken out of that array. return the maximum length of a subarray with positive product.","input: nums = [1,-2,-3,4] output: 4 explanation: the array nums already has a positive product of 24. example 2: input: nums = [0,1,-2,-3,-4] output: 3 explanation: the longest subarray with positive product is [1,-2,-3] which has a product of 6. notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive. example 3: input: nums = [-1,-2,-3,0,1] output: 2 explanation: the longest subarray with positive product is [-1,-2] or [-2,-3]. example 4: input: nums = [-1,2] output: 1 example 5: input: nums = [1,2,3,5,-6,4,0,10] output: 4",`1 <= nums.length <= 10^5` `-10^9 <= nums[i] <= 10^9`,
1568,Minimum Number of Days to Disconnect Island,"Given a 2D `grid` consisting of `1`s (land) and `0`s (water).  An island is a maximal 4-directionally (horizontal or vertical) connected group of `1`s.

The grid is said to be connected if we have exactly one island, otherwise is said disconnected.

In one day, we are allowed to change any single land cell `(1)` into a water cell `(0)`.

Return the minimum number of days to disconnect the grid.


Example 1:
Input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]
Output: 2
Explanation: We need at least 2 days to get a disconnected grid.

Change land grid[1][1] and grid[0][2] to water and get 2 disconnected island.


Example 2:
Input: grid = [[1,1]]
Output: 2
Explanation: Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands.


Example 3:
Input: grid = [[1,0,1,0]]
Output: 0

Example 4:
Input: grid = [[1,1,0,1,1],
               [1,1,1,1,1],
               [1,1,0,1,1],
               [1,1,0,1,1]]
Output: 1

Example 5:
Input: grid = [[1,1,0,1,1],
               [1,1,1,1,1],
               [1,1,0,1,1],
               [1,1,1,1,1]]
Output: 2

Constraints:
`1 <= grid.length, grid[i].length <= 30`
`grid[i][j]` is `0` or `1`.",Hard,https://leetcode.com/problems/minimum-number-of-days-to-disconnect-island,Unacademy,Greedy,180,,"given a 2d `grid` consisting of `1`s (land) and `0`s (water). an island is a maximal 4-directionally (horizontal or vertical) connected group of `1`s. the grid is said to be connected if we have exactly one island, otherwise is said disconnected. in one day, we are allowed to change any single land cell `(1)` into a water cell `(0)`. return the minimum number of days to disconnect the grid.","input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]] output: 2 explanation: we need at least 2 days to get a disconnected grid. change land grid[1][1] and grid[0][2] to water and get 2 disconnected island. example 2: input: grid = [[1,1]] output: 2 explanation: grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands. example 3: input: grid = [[1,0,1,0]] output: 0 example 4: input: grid = [[1,1,0,1,1], [1,1,1,1,1], [1,1,0,1,1], [1,1,0,1,1]] output: 1 example 5: input: grid = [[1,1,0,1,1], [1,1,1,1,1], [1,1,0,1,1], [1,1,1,1,1]] output: 2","`1 <= grid.length, grid[i].length <= 30` `grid[i][j]` is `0` or `1`.",
1569,Number of Ways to Reorder Array to Get Same BST,"Given an array `nums` that represents a permutation of integers from `1` to `n`. We are going to construct a binary search tree (BST) by inserting the elements of `nums` in order into an initially empty BST. Find the number of different ways to reorder `nums` so that the constructed BST is identical to that formed from the original array `nums`.

For example, given `nums = [2,1,3]`, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array `[2,3,1]` also yields the same BST but `[3,2,1]` yields a different BST.

Return the number of ways to reorder `nums` such that the BST formed is identical to the original BST formed from `nums`.

Since the answer may be very large, return it modulo `10^9 + 7`.


Example 1:
Input: nums = [2,1,3]
Output: 1
Explanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.


Example 2:
Input: nums = [3,4,5,1,2]
Output: 5
Explanation: The following 5 arrays will yield the same BST: 
[3,1,2,4,5]
[3,1,4,2,5]
[3,1,4,5,2]
[3,4,1,2,5]
[3,4,1,5,2]

Example 3:
Input: nums = [1,2,3]
Output: 0
Explanation: There are no other orderings of nums that will yield the same BST.


Example 4:
Input: nums = [3,1,2,5,4,6]
Output: 19

Example 5:
Input: nums = [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]
Output: 216212978
Explanation: The number of ways to reorder nums to get the same BST is 3216212999. Taking this number modulo 10^9 + 7 gives 216212978.


Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= nums.length`
All integers in `nums` are distinct.",Hard,https://leetcode.com/problems/number-of-ways-to-reorder-array-to-get-same-bst,Google,Dynamic Programming,179,,"given an array `nums` that represents a permutation of integers from `1` to `n`. we are going to construct a binary search tree (bst) by inserting the elements of `nums` in order into an initially empty bst. find the number of different ways to reorder `nums` so that the constructed bst is identical to that formed from the original array `nums`. for example, given `nums = [2,1,3]`, we will have 2 as the root, 1 as a left child, and 3 as a right child. the array `[2,3,1]` also yields the same bst but `[3,2,1]` yields a different bst. return the number of ways to reorder `nums` such that the bst formed is identical to the original bst formed from `nums`. since the answer may be very large, return it modulo `10^9 + 7`.","input: nums = [2,1,3] output: 1 explanation: we can reorder nums to be [2,3,1] which will yield the same bst. there are no other ways to reorder nums which will yield the same bst. example 2: input: nums = [3,4,5,1,2] output: 5 explanation: the following 5 arrays will yield the same bst: [3,1,2,4,5] [3,1,4,2,5] [3,1,4,5,2] [3,4,1,2,5] [3,4,1,5,2] example 3: input: nums = [1,2,3] output: 0 explanation: there are no other orderings of nums that will yield the same bst. example 4: input: nums = [3,1,2,5,4,6] output: 19 example 5: input: nums = [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18] output: 216212978 explanation: the number of ways to reorder nums to get the same bst is 3216212999. taking this number modulo 10^9 + 7 gives 216212978.",`1 <= nums.length <= 1000` `1 <= nums[i] <= nums.length` all integers in `nums` are distinct.,
1570,Dot Product of Two Sparse Vectors,"Given two sparse vectors, compute their dot product.

Implement class `SparseVector`:
`SparseVector(nums)` Initializes the object with the vector `nums`
`dotProduct(vec)` Compute the dot product between the instance of SparseVector and `vec`
A sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.

Follow up: What if only one of the vectors is sparse?

Example 1:
Input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]
Output: 8
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8

Example 2:
Input: nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2]
Output: 0
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0

Example 3:
Input: nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4]
Output: 6

Constraints:
`n == nums1.length == nums2.length`
`1 <= n <= 10^5`
`0 <= nums1[i], nums2[i] <= 100`",Medium,https://leetcode.com/problems/dot-product-of-two-sparse-vectors,"Facebook,Apple","Array,Hash Table,Two Pointers",239,,"given two sparse vectors, compute their dot product. implement class `sparsevector`: `sparsevector(nums)` initializes the object with the vector `nums` `dotproduct(vec)` compute the dot product between the instance of sparsevector and `vec` a sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two sparsevector.","input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0] output: 8 explanation: v1 = sparsevector(nums1) , v2 = sparsevector(nums2) v1.dotproduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8 example 2: input: nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2] output: 0 explanation: v1 = sparsevector(nums1) , v2 = sparsevector(nums2) v1.dotproduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0 example 3: input: nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4] output: 6","`n == nums1.length == nums2.length` `1 <= n <= 10^5` `0 <= nums1[i], nums2[i] <= 10^0`","what if only one of the vectors is sparse? example 1: input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0] output: 8 explanation: v1 = sparsevector(nums1) , v2 = sparsevector(nums2) v1.dotproduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8 example 2: input: nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2] output: 0 explanation: v1 = sparsevector(nums1) , v2 = sparsevector(nums2) v1.dotproduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0 example 3: input: nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4] output: 6 constraints: `n == nums1.length == nums2.length` `1 <= n <= 10^5` `0 <= nums1[i], nums2[i] <= 100`"
1571,Warehouse Manager,SQL Schema,Easy,https://leetcode.com/problems/warehouse-manager,Amazon,,43,,sql schema,,,
1572,Matrix Diagonal Sum,"Given a square matrix `mat`, return the sum of the matrix diagonals.

Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.


Example 1:
Input: mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]
Output: 25
Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25
Notice that element mat[1][1] = 5 is counted only once.


Example 2:
Input: mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]
Output: 8

Example 3:
Input: mat = [[5]]
Output: 5

Constraints:
`n == mat.length == mat[i].length`
`1 <= n <= 100`
`1 <= mat[i][j] <= 100`",Easy,https://leetcode.com/problems/matrix-diagonal-sum,Adobe,Array,415,,"given a square matrix `mat`, return the sum of the matrix diagonals. only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.","input: mat = [[1,2,3], [4,5,6], [7,8,9]] output: 25 explanation: diagonals sum: 1 + 5 + 9 + 3 + 7 = 25 notice that element mat[1][1] = 5 is counted only once. example 2: input: mat = [[1,1,1,1], [1,1,1,1], [1,1,1,1], [1,1,1,1]] output: 8 example 3: input: mat = [[5]] output: 5",`n == mat.length == mat[i].length` `1 <= n <= 10^0` `1 <= mat[i][j] <= 10^0`,
1573,Number of Ways to Split a String,"Given a binary string `s` (a string consisting only of '0's and '1's), we can split `s` into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s).

Return the number of ways `s` can be split such that the number of characters '1' is the same in s1, s2, and s3.

Since the answer may be too large, return it modulo 10^9 + 7.


Example 1:
Input: s = ""10101""
Output: 4
Explanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.

""1|010|1""
""1|01|01""
""10|10|1""
""10|1|01""

Example 2:
Input: s = ""1001""
Output: 0

Example 3:
Input: s = ""0000""
Output: 3
Explanation: There are three ways to split s in 3 parts.

""0|0|00""
""0|00|0""
""00|0|0""

Example 4:
Input: s = ""100100010100110""
Output: 12

Constraints:
`3 <= s.length <= 10^5`
`s[i]` is `'0'` or `'1'`.",Medium,https://leetcode.com/problems/number-of-ways-to-split-a-string,Microsoft,String,257,"[Split Array with Equal Sum, /problems/split-array-with-equal-sum/, Medium]","given a binary string `s` (a string consisting only of '0's and '1's), we can split `s` into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s). return the number of ways `s` can be split such that the number of characters '1' is the same in s1, s2, and s3. since the answer may be too large, return it modulo 10^9 + 7.","input: s = ""10101"" output: 4 explanation: there are four ways to split s in 3 parts where each part contain the same number of letters '1'. ""1|010|1"" ""1|01|01"" ""10|10|1"" ""10|1|01"" example 2: input: s = ""1001"" output: 0 example 3: input: s = ""0000"" output: 3 explanation: there are three ways to split s in 3 parts. ""0|0|00"" ""0|00|0"" ""00|0|0"" example 4: input: s = ""100100010100110"" output: 12",`3 <= s.length <= 10^5` `s[i]` is `'0'` or `'1'`.,
1574,Shortest Subarray to be Removed to Make Array Sorted,"Given an integer array `arr`, remove a subarray (can be empty) from `arr` such that the remaining elements in `arr` are non-decreasing.

A subarray is a contiguous subsequence of the array.

Return the length of the shortest subarray to remove.


Example 1:
Input: arr = [1,2,3,10,4,2,3,5]
Output: 3
Explanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.

Another correct solution is to remove the subarray [3,10,4].


Example 2:
Input: arr = [5,4,3,2,1]
Output: 4
Explanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].


Example 3:
Input: arr = [1,2,3]
Output: 0
Explanation: The array is already non-decreasing. We do not need to remove any elements.


Example 4:
Input: arr = [1]
Output: 0

Constraints:
`1 <= arr.length <= 10^5`
`0 <= arr[i] <= 10^9`",Medium,https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted,"Amazon,Flipkart","Array,Binary Search",532,,"given an integer array `arr`, remove a subarray (can be empty) from `arr` such that the remaining elements in `arr` are non-decreasing. a subarray is a contiguous subsequence of the array. return the length of the shortest subarray to remove.","input: arr = [1,2,3,10,4,2,3,5] output: 3 explanation: the shortest subarray we can remove is [10,4,2] of length 3. the remaining elements after that will be [1,2,3,3,5] which are sorted. another correct solution is to remove the subarray [3,10,4]. example 2: input: arr = [5,4,3,2,1] output: 4 explanation: since the array is strictly decreasing, we can only keep a single element. therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1]. example 3: input: arr = [1,2,3] output: 0 explanation: the array is already non-decreasing. we do not need to remove any elements. example 4: input: arr = [1] output: 0",`1 <= arr.length <= 10^5` `0 <= arr[i] <= 10^9`,
1575,Count All Possible Routes,"You are given an array of distinct positive integers locations where `locations[i]` represents the position of city `i`. You are also given integers `start`, `finish` and `fuel` representing the starting city, ending city, and the initial amount of fuel you have, respectively.

At each step, if you are at city `i`, you can pick any city `j` such that `j != i` and `0 <= j < locations.length` and move to city `j`. Moving from city `i` to city `j` reduces the amount of fuel you have by `|locations[i] - locations[j]|`. Please notice that `|x|` denotes the absolute value of `x`.

Notice that `fuel` cannot become negative at any point in time, and that you are allowed to visit any city more than once (including `start` and `finish`).

Return the count of all possible routes from `start` to `finish`.

Since the answer may be too large, return it modulo `10^9 + 7`.


Example 1:
Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5
Output: 4
Explanation: The following are all possible routes, each uses 5 units of fuel:
1 -> 3
1 -> 2 -> 3
1 -> 4 -> 3
1 -> 4 -> 2 -> 3

Example 2:
Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6
Output: 5
Explanation: The following are all possible routes:
1 -> 0, used fuel = 1
1 -> 2 -> 0, used fuel = 5
1 -> 2 -> 1 -> 0, used fuel = 5
1 -> 0 -> 1 -> 0, used fuel = 3
1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5

Example 3:
Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3
Output: 0
Explanation: It's impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.


Example 4:
Input: locations = [2,1,5], start = 0, finish = 0, fuel = 3
Output: 2
Explanation: There are two possible routes, 0 and 0 -> 1 -> 0.


Example 5:
Input: locations = [1,2,3], start = 0, finish = 2, fuel = 40
Output: 615088286
Explanation: The total number of possible routes is 2615088300. Taking this number modulo 10^9 + 7 gives us 615088286.


Constraints:
`2 <= locations.length <= 100`
`1 <= locations[i] <= 10^9`
All integers in `locations` are distinct.

`0 <= start, finish < locations.length`
`1 <= fuel <= 200`",Hard,https://leetcode.com/problems/count-all-possible-routes,TSYS,Dynamic Programming,214,,"you are given an array of distinct positive integers locations where `locations[i]` represents the position of city `i`. you are also given integers `start`, `finish` and `fuel` representing the starting city, ending city, and the initial amount of fuel you have, respectively. at each step, if you are at city `i`, you can pick any city `j` such that `j != i` and `0 <= j < locations.length` and move to city `j`. moving from city `i` to city `j` reduces the amount of fuel you have by `|locations[i] - locations[j]|`. please notice that `|x|` denotes the absolute value of `x`. notice that `fuel` cannot become negative at any point in time, and that you are allowed to visit any city more than once (including `start` and `finish`). return the count of all possible routes from `start` to `finish`. since the answer may be too large, return it modulo `10^9 + 7`.","input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5 output: 4 explanation: the following are all possible routes, each uses 5 units of fuel: 1 -> 3 1 -> 2 -> 3 1 -> 4 -> 3 1 -> 4 -> 2 -> 3 example 2: input: locations = [4,3,1], start = 1, finish = 0, fuel = 6 output: 5 explanation: the following are all possible routes: 1 -> 0, used fuel = 1 1 -> 2 -> 0, used fuel = 5 1 -> 2 -> 1 -> 0, used fuel = 5 1 -> 0 -> 1 -> 0, used fuel = 3 1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5 example 3: input: locations = [5,2,1], start = 0, finish = 2, fuel = 3 output: 0 explanation: it's impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel. example 4: input: locations = [2,1,5], start = 0, finish = 0, fuel = 3 output: 2 explanation: there are two possible routes, 0 and 0 -> 1 -> 0. example 5: input: locations = [1,2,3], start = 0, finish = 2, fuel = 40 output: 615088286 explanation: the total number of possible routes is 2615088300. taking this number modulo 10^9 + 7 gives us 615088286.","`2 <= locations.length <= 10^0` `1 <= locations[i] <= 10^9` all integers in `locations` are distinct. `0 <= start, finish < locations.length` `1 <= fuel <= 200`",
1576,Replace All ?'s to Avoid Consecutive Repeating Characters,"Given a string `s` containing only lower case English letters and the '?' character, convert all the '?' characters into lower case letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.

It is guaranteed that there are no consecutive repeating characters in the given string except for '?'.

Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.


Example 1:
Input: s = ""?zs""
Output: ""azs""
Explanation: There are 25 solutions for this problem. From ""azs"" to ""yzs"", all are valid. Only ""z"" is an invalid modification as the string will consist of consecutive repeating characters in ""zzs"".


Example 2:
Input: s = ""ubv?w""
Output: ""ubvaw""
Explanation: There are 24 solutions for this problem. Only ""v"" and ""w"" are invalid modifications as the strings will consist of consecutive repeating characters in ""ubvvw"" and ""ubvww"".


Example 3:
Input: s = ""j?qg??b""
Output: ""jaqgacb""

Example 4:
Input: s = ""??yw?ipkj?""
Output: ""acywaipkja""

Constraints:
`1 <= s.length <= 100`
`s` contains only lower case English letters and `'?'`.",Easy,https://leetcode.com/problems/replace-all-s-to-avoid-consecutive-repeating-characters,"Microsoft,Google",String,204,,"given a string `s` containing only lower case english letters and the '?' character, convert all the '?' characters into lower case letters such that the final string does not contain any consecutive repeating characters. you cannot modify the non '?' characters. it is guaranteed that there are no consecutive repeating characters in the given string except for '?'. return the final string after all the conversions (possibly zero) have been made. if there is more than one solution, return any of them. it can be shown that an answer is always possible with the given constraints.","input: s = ""?zs"" output: ""azs"" explanation: there are 25 solutions for this problem. from ""azs"" to ""yzs"", all are valid. only ""z"" is an invalid modification as the string will consist of consecutive repeating characters in ""zzs"". example 2: input: s = ""ubv?w"" output: ""ubvaw"" explanation: there are 24 solutions for this problem. only ""v"" and ""w"" are invalid modifications as the strings will consist of consecutive repeating characters in ""ubvvw"" and ""ubvww"". example 3: input: s = ""j?qg??b"" output: ""jaqgacb"" example 4: input: s = ""??yw?ipkj?"" output: ""acywaipkja""",`1 <= s.length <= 10^0` `s` contains only lower case english letters and `'?'`.,
1577,Number of Ways Where Square of Number Is Equal to Product of Two Numbers,"Given two arrays of integers `nums1` and `nums2`, return the number of triplets formed (type 1 and type 2) under the following rules:
Type 1: Triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`.

Type 2: Triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.


Example 1:
Input: nums1 = [7,4], nums2 = [5,2,8,9]
Output: 1
Explanation: Type 1: (1,1,2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8). 

Example 2:
Input: nums1 = [1,1], nums2 = [1,1,1]
Output: 9
Explanation: All Triplets are valid, because 1^2 = 1 * 1.

Type 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]^2 = nums2[j] * nums2[k].

Type 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]^2 = nums1[j] * nums1[k].


Example 3:
Input: nums1 = [7,7,8,3], nums2 = [1,2,9,7]
Output: 2
Explanation: There are 2 valid triplets.

Type 1: (3,0,2).  nums1[3]^2 = nums2[0] * nums2[2].

Type 2: (3,0,1).  nums2[3]^2 = nums1[0] * nums1[1].


Example 4:
Input: nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18]
Output: 0
Explanation: There are no valid triplets.


Constraints:
`1 <= nums1.length, nums2.length <= 1000`
`1 <= nums1[i], nums2[i] <= 10^5`",Medium,https://leetcode.com/problems/number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers,,,144,,"given two arrays of integers `nums1` and `nums2`, return the number of triplets formed (type 1 and type 2) under the following rules: type 1: triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`. type 2: triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.","input: nums1 = [7,4], nums2 = [5,2,8,9] output: 1 explanation: type 1: (1,1,2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8). example 2: input: nums1 = [1,1], nums2 = [1,1,1] output: 9 explanation: all triplets are valid, because 1^2 = 1 * 1. type 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2). nums1[i]^2 = nums2[j] * nums2[k]. type 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]^2 = nums1[j] * nums1[k]. example 3: input: nums1 = [7,7,8,3], nums2 = [1,2,9,7] output: 2 explanation: there are 2 valid triplets. type 1: (3,0,2). nums1[3]^2 = nums2[0] * nums2[2]. type 2: (3,0,1). nums2[3]^2 = nums1[0] * nums1[1]. example 4: input: nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18] output: 0 explanation: there are no valid triplets.","`1 <= nums1.length, nums2.length <= 1000` `1 <= nums1[i], nums2[i] <= 10^5`",
1578,Minimum Deletion Cost to Avoid Repeating Letters,"Given a string `s` and an array of integers `cost` where `cost[i]` is the cost of deleting the `ith` character in `s`.

Return the minimum cost of deletions such that there are no two identical letters next to each other.

Notice that you will delete the chosen characters at the same time, in other words, after deleting a character, the costs of deleting other characters will not change.


Example 1:
Input: s = ""abaac"", cost = [1,2,3,4,5]
Output: 3
Explanation: Delete the letter ""a"" with cost 3 to get ""abac"" (String without two identical letters next to each other).


Example 2:
Input: s = ""abc"", cost = [1,2,3]
Output: 0
Explanation: You don't need to delete any character because there are no identical letters next to each other.


Example 3:
Input: s = ""aabaa"", cost = [1,2,3,4,1]
Output: 2
Explanation: Delete the first and the last character, getting the string (""aba"").


Constraints:
`s.length == cost.length`
`1 <= s.length, cost.length <= 10^5`
`1 <= cost[i] <= 10^4`
`s` contains only lowercase English letters.",Medium,https://leetcode.com/problems/minimum-deletion-cost-to-avoid-repeating-letters,"Microsoft,Tesla",Greedy,376,,"given a string `s` and an array of integers `cost` where `cost[i]` is the cost of deleting the `ith` character in `s`. return the minimum cost of deletions such that there are no two identical letters next to each other. notice that you will delete the chosen characters at the same time, in other words, after deleting a character, the costs of deleting other characters will not change.","input: s = ""abaac"", cost = [1,2,3,4,5] output: 3 explanation: delete the letter ""a"" with cost 3 to get ""abac"" (string without two identical letters next to each other). example 2: input: s = ""abc"", cost = [1,2,3] output: 0 explanation: you don't need to delete any character because there are no identical letters next to each other. example 3: input: s = ""aabaa"", cost = [1,2,3,4,1] output: 2 explanation: delete the first and the last character, getting the string (""aba"").","`s.length == cost.length` `1 <= s.length, cost.length <= 10^5` `1 <= cost[i] <= 10^4` `s` contains only lowercase english letters.",
1579,Remove Max Number of Edges to Keep Graph Fully Traversable,"Alice and Bob have an undirected graph of `n` nodes and 3 types of edges:
Type 1: Can be traversed by Alice only.

Type 2: Can be traversed by Bob only.

Type 3: Can by traversed by both Alice and Bob.

Given an array `edges` where `edges[i] = [typei, ui, vi]` represents a bidirectional edge of type `typei` between nodes `ui` and `vi`, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.

Return the maximum number of edges you can remove, or return `-1` if it's impossible for the graph to be fully traversed by Alice and Bob.


Example 1:
Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]
Output: 2
Explanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.


Example 2:
Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]
Output: 0
Explanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.


Example 3:
Input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]
Output: -1
Explanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.


Constraints:
`1 <= n <= 10^5`
`1 <= edges.length <= min(10^5, 3 * n * (n-1) / 2)`
`edges[i].length == 3`
`1 <= edges[i][0] <= 3`
`1 <= edges[i][1] < edges[i][2] <= n`
All tuples `(typei, ui, vi)` are distinct.",Hard,https://leetcode.com/problems/remove-max-number-of-edges-to-keep-graph-fully-traversable,Uber,Union Find,307,,"alice and bob have an undirected graph of `n` nodes and 3 types of edges: type 1: can be traversed by alice only. type 2: can be traversed by bob only. type 3: can by traversed by both alice and bob. given an array `edges` where `edges[i] = [typei, ui, vi]` represents a bidirectional edge of type `typei` between nodes `ui` and `vi`, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both alice and bob. the graph is fully traversed by alice and bob if starting from any node, they can reach all other nodes. return the maximum number of edges you can remove, or return `-1` if it's impossible for the graph to be fully traversed by alice and bob.","input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]] output: 2 explanation: if we remove the 2 edges [1,1,2] and [1,1,3]. the graph will still be fully traversable by alice and bob. removing any additional edge will not make it so. so the maximum number of edges we can remove is 2. example 2: input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]] output: 0 explanation: notice that removing any edge will not make the graph fully traversable by alice and bob. example 3: input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]] output: -1 explanation: in the current graph, alice cannot reach node 4 from the other nodes. likewise, bob cannot reach 1. therefore it's impossible to make the graph fully traversable.","`1 <= n <= 10^5` `1 <= edges.length <= min(10^5, 3 * n * (n-1) / 2)` `edges[i].length == 3` `1 <= edges[i][0] <= 3` `1 <= edges[i][1] < edges[i][2] <= n` all tuples `(typei, ui, vi)` are distinct.",
1580,Put Boxes Into the Warehouse II,"You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labeled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.

Boxes are put into the warehouse by the following rules:
Boxes cannot be stacked.

You can rearrange the insertion order of the boxes.

Boxes can be pushed into the warehouse from either side (left or right)
If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.

Return the maximum number of boxes you can put into the warehouse.


Example 1:
Input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]
Output: 4
Explanation:
We can store the boxes in the following order:
1- Put the yellow box in room 2 from either the left or right side.

2- Put the orange box in room 3 from the right side.

3- Put the green box in room 1 from the left side.

4- Put the red box in room 0 from the left side.

Notice that there are other valid ways to put 4 boxes such as swapping the red and green boxes or the red and orange boxes.


Example 2:
Input: boxes = [3,5,5,2], warehouse = [2,1,3,4,5]
Output: 3
Explanation:
It's not possible to put the two boxes of height 5 in the warehouse since there's only 1 room of height >= 5.

Other valid solutions are to put the green box in room 2 or to put the orange box first in room 2 before putting the green and red boxes.


Example 3:
Input: boxes = [1,2,3], warehouse = [1,2,3,4]
Output: 3

Example 4:
Input: boxes = [4,5,6], warehouse = [3,3,3,3,3]
Output: 0

Constraints:
`n == warehouse.length`
`1 <= boxes.length, warehouse.length <= 105`
`1 <= boxes[i], warehouse[i] <= 109`",Medium,https://leetcode.com/problems/put-boxes-into-the-warehouse-ii,Google,Greedy,73,"[Put Boxes Into the Warehouse I, /problems/put-boxes-into-the-warehouse-i/, Medium]","you are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. the warehouse's rooms are labeled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room. boxes are put into the warehouse by the following rules: boxes cannot be stacked. you can rearrange the insertion order of the boxes. boxes can be pushed into the warehouse from either side (left or right) if the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room. return the maximum number of boxes you can put into the warehouse.","input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2] output: 4 explanation: we can store the boxes in the following order: 1- put the yellow box in room 2 from either the left or right side. 2- put the orange box in room 3 from the right side. 3- put the green box in room 1 from the left side. 4- put the red box in room 0 from the left side. notice that there are other valid ways to put 4 boxes such as swapping the red and green boxes or the red and orange boxes. example 2: input: boxes = [3,5,5,2], warehouse = [2,1,3,4,5] output: 3 explanation: it's not possible to put the two boxes of height 5 in the warehouse since there's only 1 room of height >= 5. other valid solutions are to put the green box in room 2 or to put the orange box first in room 2 before putting the green and red boxes. example 3: input: boxes = [1,2,3], warehouse = [1,2,3,4] output: 3 example 4: input: boxes = [4,5,6], warehouse = [3,3,3,3,3] output: 0","`n == warehouse.length` `1 <= boxes.length, warehouse.length <= 10^5` `1 <= boxes[i], warehouse[i] <= 10^9`",
1581,Customer Who Visited but Did Not Make Any Transactions,SQL Schema,Easy,https://leetcode.com/problems/customer-who-visited-but-did-not-make-any-transactions,NerdWallet,,40,,sql schema,,,
1582,Special Positions in a Binary Matrix,"Given a `rows x cols` matrix `mat`, where `mat[i][j]` is either `0` or `1`, return the number of special positions in `mat`.

A position `(i,j)` is called special if `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are 0-indexed).


Example 1:
Input: mat = [[1,0,0],
              [0,0,1],
              [1,0,0]]
Output: 1
Explanation: (1,2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.


Example 2:
Input: mat = [[1,0,0],
              [0,1,0],
              [0,0,1]]
Output: 3
Explanation: (0,0), (1,1) and (2,2) are special positions. 

Example 3:
Input: mat = [[0,0,0,1],
              [1,0,0,0],
              [0,1,1,0],
              [0,0,0,0]]
Output: 2

Example 4:
Input: mat = [[0,0,0,0,0],
              [1,0,0,0,0],
              [0,1,0,0,0],
              [0,0,1,0,0],
              [0,0,0,1,1]]
Output: 3

Constraints:
`rows == mat.length`
`cols == mat[i].length`
`1 <= rows, cols <= 100`
`mat[i][j]` is `0` or `1`.",Easy,https://leetcode.com/problems/special-positions-in-a-binary-matrix,Google,Array,233,,"given a `rows x cols` matrix `mat`, where `mat[i][j]` is either `0` or `1`, return the number of special positions in `mat`. a position `(i,j)` is called special if `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are 0-indexed).","input: mat = [[1,0,0], [0,0,1], [1,0,0]] output: 1 explanation: (1,2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0. example 2: input: mat = [[1,0,0], [0,1,0], [0,0,1]] output: 3 explanation: (0,0), (1,1) and (2,2) are special positions. example 3: input: mat = [[0,0,0,1], [1,0,0,0], [0,1,1,0], [0,0,0,0]] output: 2 example 4: input: mat = [[0,0,0,0,0], [1,0,0,0,0], [0,1,0,0,0], [0,0,1,0,0], [0,0,0,1,1]] output: 3","`rows == mat.length` `cols == mat[i].length` `1 <= rows, cols <= 10^0` `mat[i][j]` is `0` or `1`.",
1583,Count Unhappy Friends,"You are given a list of `preferences` for `n` friends, where `n` is always even.

For each person `i`, `preferences[i]` contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from `0` to `n-1`.

All the friends are divided into pairs. The pairings are given in a list `pairs`, where `pairs[i] = [xi, yi]` denotes `xi` is paired with `yi` and `yi` is paired with `xi`.

However, this pairing may cause some of the friends to be unhappy. A friend `x` is unhappy if `x` is paired with `y` and there exists a friend `u` who is paired with `v` but:
`x` prefers `u` over `y`, and
`u` prefers `x` over `v`.

Return the number of unhappy friends.


Example 1:
Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]
Output: 2
Explanation:
Friend 1 is unhappy because:
- 1 is paired with 0 but prefers 3 over 0, and
- 3 prefers 1 over 2.

Friend 3 is unhappy because:
- 3 is paired with 2 but prefers 1 over 2, and
- 1 prefers 3 over 0.

Friends 0 and 2 are happy.


Example 2:
Input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]
Output: 0
Explanation: Both friends 0 and 1 are happy.


Example 3:
Input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]
Output: 4

Constraints:
`2 <= n <= 500`
`n` is even.

`preferences.length == n`
`preferences[i].length == n - 1`
`0 <= preferences[i][j] <= n - 1`
`preferences[i]` does not contain `i`.

All values in `preferences[i]` are unique.

`pairs.length == n/2`
`pairs[i].length == 2`
`xi != yi`
`0 <= xi, yi <= n - 1`
Each person is contained in exactly one pair.",Medium,https://leetcode.com/problems/count-unhappy-friends,Bloomberg,Array,102,,"you are given a list of `preferences` for `n` friends, where `n` is always even. for each person `i`, `preferences[i]` contains a list of friends sorted in the order of preference. in other words, a friend earlier in the list is more preferred than a friend later in the list. friends in each list are denoted by integers from `0` to `n-1`. all the friends are divided into pairs. the pairings are given in a list `pairs`, where `pairs[i] = [xi, yi]` denotes `xi` is paired with `yi` and `yi` is paired with `xi`. however, this pairing may cause some of the friends to be unhappy. a friend `x` is unhappy if `x` is paired with `y` and there exists a friend `u` who is paired with `v` but: `x` prefers `u` over `y`, and `u` prefers `x` over `v`. return the number of unhappy friends.","input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]] output: 2 explanation: friend 1 is unhappy because: - 1 is paired with 0 but prefers 3 over 0, and - 3 prefers 1 over 2. friend 3 is unhappy because: - 3 is paired with 2 but prefers 1 over 2, and - 1 prefers 3 over 0. friends 0 and 2 are happy. example 2: input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]] output: 0 explanation: both friends 0 and 1 are happy. example 3: input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]] output: 4","`2 <= n <= 500` `n` is even. `preferences.length == n` `preferences[i].length == n - 1` `0 <= preferences[i][j] <= n - 1` `preferences[i]` does not contain `i`. all values in `preferences[i]` are unique. `pairs.length == n/2` `pairs[i].length == 2` `xi != yi` `0 <= xi, yi <= n - 1` each person is contained in exactly one pair.",
1584,Min Cost to Connect All Points,"You are given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`.

The cost of connecting two points `[xi, yi]` and `[xj, yj]` is the manhattan distance between them: `|xi - xj| + |yi - yj|`, where `|val|` denotes the absolute value of `val`.

Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.


Example 1:
Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
Output: 20
Explanation:
We can connect the points as shown above to get the minimum cost of 20.

Notice that there is a unique path between every pair of points.


Example 2:
Input: points = [[3,12],[-2,5],[-4,1]]
Output: 18

Example 3:
Input: points = [[0,0],[1,1],[1,0],[-1,1]]
Output: 4

Example 4:
Input: points = [[-1000000,-1000000],[1000000,1000000]]
Output: 4000000

Example 5:
Input: points = [[0,0]]
Output: 0

Constraints:
`1 <= points.length <= 1000`
`-106 <= xi, yi <= 106`
All pairs `(xi, yi)` are distinct.",Medium,https://leetcode.com/problems/min-cost-to-connect-all-points,Directi,Union Find,415,,"you are given an array `points` representing integer coordinates of some points on a 2d-plane, where `points[i] = [xi, yi]`. the cost of connecting two points `[xi, yi]` and `[xj, yj]` is the manhattan distance between them: `|xi - xj| + |yi - yj|`, where `|val|` denotes the absolute value of `val`. return the minimum cost to make all points connected. all points are connected if there is exactly one simple path between any two points.","input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]] output: 20 explanation: we can connect the points as shown above to get the minimum cost of 20. notice that there is a unique path between every pair of points. example 2: input: points = [[3,12],[-2,5],[-4,1]] output: 18 example 3: input: points = [[0,0],[1,1],[1,0],[-1,1]] output: 4 example 4: input: points = [[-1000000,-1000000],[1000000,1000000]] output: 4000000 example 5: input: points = [[0,0]] output: 0","`1 <= points.length <= 1000` `-10^6 <= xi, yi <= 10^6` all pairs `(xi, yi)` are distinct.",
1585,Check If String Is Transformable With Substring Sort Operations,"Given two strings `s` and `t`, you want to transform string `s` into string `t` using the following operation any number of times:
Choose a non-empty substring in `s` and sort it in-place so the characters are in ascending order.

For example, applying the operation on the underlined substring in `""14234""` results in `""12344""`.

Return `true` if it is possible to transform string `s` into string `t`. Otherwise, return `false`.

A substring is a contiguous sequence of characters within a string.


Example 1:
Input: s = ""84532"", t = ""34852""
Output: true
Explanation: You can transform s into t using the following sort operations:
""84532"" (from index 2 to 3) -> ""84352""
""84352"" (from index 0 to 2) -> ""34852""

Example 2:
Input: s = ""34521"", t = ""23415""
Output: true
Explanation: You can transform s into t using the following sort operations:
""34521"" -> ""23451""
""23451"" -> ""23415""

Example 3:
Input: s = ""12345"", t = ""12435""
Output: false

Example 4:
Input: s = ""1"", t = ""2""
Output: false

Constraints:
`s.length == t.length`
`1 <= s.length <= 105`
`s` and `t` only contain digits from `'0'` to `'9'`.",Hard,https://leetcode.com/problems/check-if-string-is-transformable-with-substring-sort-operations,Google,"String,Greedy",233,,"given two strings `s` and `t`, you want to transform string `s` into string `t` using the following operation any number of times: choose a non-empty substring in `s` and sort it in-place so the characters are in ascending order. for example, applying the operation on the underlined substring in `""14234""` results in `""12344""`. return `true` if it is possible to transform string `s` into string `t`. otherwise, return `false`. a substring is a contiguous sequence of characters within a string.","input: s = ""84532"", t = ""34852"" output: true explanation: you can transform s into t using the following sort operations: ""84532"" (from index 2 to 3) -> ""84352"" ""84352"" (from index 0 to 2) -> ""34852"" example 2: input: s = ""34521"", t = ""23415"" output: true explanation: you can transform s into t using the following sort operations: ""34521"" -> ""23451"" ""23451"" -> ""23415"" example 3: input: s = ""12345"", t = ""12435"" output: false example 4: input: s = ""1"", t = ""2"" output: false",`s.length == t.length` `1 <= s.length <= 10^5` `s` and `t` only contain digits from `'0'` to `'9'`.,
1586,Binary Search Tree Iterator II,"Implement the `BSTIterator` class that represents an iterator over the in-order traversal of a binary search tree (BST):
`BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.

`boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.

`int next()` Moves the pointer to the right, then returns the number at the pointer.

`boolean hasPrev()` Returns `true` if there exists a number in the traversal to the left of the pointer, otherwise returns `false`.

`int prev()` Moves the pointer to the left, then returns the number at the pointer.

Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.

You may assume that `next()` and `prev()` calls will always be valid. That is, there will be at least a next/previous number in the in-order traversal when `next()`/`prev()` is called.


Example 1:
Input
[""BSTIterator"", ""next"", ""next"", ""prev"", ""next"", ""hasNext"", ""next"", ""next"", ""next"", ""hasNext"", ""hasPrev"", ""prev"", ""prev""]
[[[7, 3, 15, null, null, 9, 20]], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null]]
Output
[null, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9]
Explanation
// The underlined element is where the pointer currently is.

BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); // state is   [3, 7, 9, 15, 20]
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 3
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 7
bSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 3
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 7
bSTIterator.hasNext(); // return true
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 9
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 15
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 20
bSTIterator.hasNext(); // return false
bSTIterator.hasPrev(); // return true
bSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 15
bSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 9

Constraints:
The number of nodes in the tree is in the range `[1, 105]`.

`0 <= Node.val <= 106`
At most `105` calls will be made to `hasNext`, `next`, `hasPrev`, and `prev`.

Follow up: Could you solve the problem without precalculating the values of the tree?",Medium,https://leetcode.com/problems/binary-search-tree-iterator-ii,Facebook,"Tree,Design",71,"[Binary Search Tree Iterator, /problems/binary-search-tree-iterator/, Medium]","implement the `bstiterator` class that represents an iterator over the in-order traversal of a binary search tree (bst): `bstiterator(treenode root)` initializes an object of the `bstiterator` class. the `root` of the bst is given as part of the constructor. the pointer should be initialized to a non-existent number smaller than any element in the bst. `boolean hasnext()` returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`. `int next()` moves the pointer to the right, then returns the number at the pointer. `boolean hasprev()` returns `true` if there exists a number in the traversal to the left of the pointer, otherwise returns `false`. `int prev()` moves the pointer to the left, then returns the number at the pointer. notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the bst. you may assume that `next()` and `prev()` calls will always be valid. that is, there will be at least a next/previous number in the in-order traversal when `next()`/`prev()` is called.","input [""bstiterator"", ""next"", ""next"", ""prev"", ""next"", ""hasnext"", ""next"", ""next"", ""next"", ""hasnext"", ""hasprev"", ""prev"", ""prev""] [[[7, 3, 15, null, null, 9, 20]], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null]] output [null, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9] explanation // the underlined element is where the pointer currently is. bstiterator bstiterator = new bstiterator([7, 3, 15, null, null, 9, 20]); // state is [3, 7, 9, 15, 20] bstiterator.next(); // state becomes [3, 7, 9, 15, 20], return 3 bstiterator.next(); // state becomes [3, 7, 9, 15, 20], return 7 bstiterator.prev(); // state becomes [3, 7, 9, 15, 20], return 3 bstiterator.next(); // state becomes [3, 7, 9, 15, 20], return 7 bstiterator.hasnext(); // return true bstiterator.next(); // state becomes [3, 7, 9, 15, 20], return 9 bstiterator.next(); // state becomes [3, 7, 9, 15, 20], return 15 bstiterator.next(); // state becomes [3, 7, 9, 15, 20], return 20 bstiterator.hasnext(); // return false bstiterator.hasprev(); // return true bstiterator.prev(); // state becomes [3, 7, 9, 15, 20], return 15 bstiterator.prev(); // state becomes [3, 7, 9, 15, 20], return 9","the number of nodes in the tree is in the range `[1, 10^5]`. `0 <= node.val <= 10^6` at most `10^5` calls will be made to `hasnext`, `next`, `hasprev`, and `prev`.",could you solve the problem without precalculating the values of the tree?
1587,Bank Account Summary II,SQL Schema,Easy,https://leetcode.com/problems/bank-account-summary-ii,,,42,,sql schema,,,
1588,Sum of All Odd Length Subarrays,"Given an array of positive integers `arr`, calculate the sum of all possible odd-length subarrays.

A subarray is a contiguous subsequence of the array.

Return the sum of all odd-length subarrays of `arr`.


Example 1:
Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58

Example 2:
Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.


Example 3:
Input: arr = [10,11,12]
Output: 66

Constraints:
`1 <= arr.length <= 100`
`1 <= arr[i] <= 1000`",Easy,https://leetcode.com/problems/sum-of-all-odd-length-subarrays,Bloomberg,Array,684,,"given an array of positive integers `arr`, calculate the sum of all possible odd-length subarrays. a subarray is a contiguous subsequence of the array. return the sum of all odd-length subarrays of `arr`.","input: arr = [1,4,2,5,3] output: 58 explanation: the odd-length subarrays of arr and their sums are: [1] = 1 [4] = 4 [2] = 2 [5] = 5 [3] = 3 [1,4,2] = 7 [4,2,5] = 11 [2,5,3] = 10 [1,4,2,5,3] = 15 if we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58 example 2: input: arr = [1,2] output: 3 explanation: there are only 2 subarrays of odd length, [1] and [2]. their sum is 3. example 3: input: arr = [10,11,12] output: 66",`1 <= arr.length <= 10^0` `1 <= arr[i] <= 1000`,
1589,Maximum Sum Obtained of Any Permutation,"We have an array of integers, `nums`, and an array of `requests` where `requests[i] = [starti, endi]`. The `ith` request asks for the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both `starti` and `endi` are 0-indexed.

Return the maximum total sum of all requests among all permutations of `nums`.

Since the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]
Output: 19
Explanation: One permutation of nums is [2,1,3,4,5] with the following result: 
requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8
requests[1] -> nums[0] + nums[1] = 2 + 1 = 3
Total sum: 8 + 3 = 11.

A permutation with a higher total sum is [3,5,4,2,1] with the following result:
requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11
requests[1] -> nums[0] + nums[1] = 3 + 5  = 8
Total sum: 11 + 8 = 19, which is the best that you can do.


Example 2:
Input: nums = [1,2,3,4,5,6], requests = [[0,1]]
Output: 11
Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].


Example 3:
Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]
Output: 47
Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].


Constraints:
`n == nums.length`
`1 <= n <= 105`
`0 <= nums[i] <= 105`
`1 <= requests.length <= 105`
`requests[i].length == 2`
`0 <= starti <= endi < n`",Medium,https://leetcode.com/problems/maximum-sum-obtained-of-any-permutation,Paypal,Greedy,296,,"we have an array of integers, `nums`, and an array of `requests` where `requests[i] = [starti, endi]`. the `ith` request asks for the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. both `starti` and `endi` are 0-indexed. return the maximum total sum of all requests among all permutations of `nums`. since the answer may be too large, return it modulo `109 + 7`.","input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]] output: 19 explanation: one permutation of nums is [2,1,3,4,5] with the following result: requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8 requests[1] -> nums[0] + nums[1] = 2 + 1 = 3 total sum: 8 + 3 = 11. a permutation with a higher total sum is [3,5,4,2,1] with the following result: requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11 requests[1] -> nums[0] + nums[1] = 3 + 5 = 8 total sum: 11 + 8 = 19, which is the best that you can do. example 2: input: nums = [1,2,3,4,5,6], requests = [[0,1]] output: 11 explanation: a permutation with the max total sum is [6,5,4,3,2,1] with request sums [11]. example 3: input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]] output: 47 explanation: a permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].",`n == nums.length` `1 <= n <= 10^5` `0 <= nums[i] <= 10^5` `1 <= requests.length <= 10^5` `requests[i].length == 2` `0 <= starti <= endi < n`,
1590,Make Sum Divisible by P,"Given an array of positive integers `nums`, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by `p`. It is not allowed to remove the whole array.

Return the length of the smallest subarray that you need to remove, or `-1` if it's impossible.

A subarray is defined as a contiguous block of elements in the array.


Example 1:
Input: nums = [3,1,4,2], p = 6
Output: 1
Explanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.


Example 2:
Input: nums = [6,3,5,2], p = 9
Output: 2
Explanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.


Example 3:
Input: nums = [1,2,3], p = 3
Output: 0
Explanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.


Example 4:
Input: nums = [1,2,3], p = 7
Output: -1
Explanation: There is no way to remove a subarray in order to get a sum divisible by 7.


Example 5:
Input: nums = [1000000000,1000000000,1000000000], p = 3
Output: 0

Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 109`
`1 <= p <= 109`",Medium,https://leetcode.com/problems/make-sum-divisible-by-p,Amazon,"Array,Hash Table,Math,Binary Search",461,"[Subarray Sums Divisible by K, /problems/subarray-sums-divisible-by-k/, Medium]","given an array of positive integers `nums`, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by `p`. it is not allowed to remove the whole array. return the length of the smallest subarray that you need to remove, or `-1` if it's impossible. a subarray is defined as a contiguous block of elements in the array.","input: nums = [3,1,4,2], p = 6 output: 1 explanation: the sum of the elements in nums is 10, which is not divisible by 6. we can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6. example 2: input: nums = [6,3,5,2], p = 9 output: 2 explanation: we cannot remove a single element to get a sum divisible by 9. the best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9. example 3: input: nums = [1,2,3], p = 3 output: 0 explanation: here the sum is 6. which is already divisible by 3. thus we do not need to remove anything. example 4: input: nums = [1,2,3], p = 7 output: -1 explanation: there is no way to remove a subarray in order to get a sum divisible by 7. example 5: input: nums = [1000000000,1000000000,1000000000], p = 3 output: 0",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 10^9` `1 <= p <= 10^9`,
1591,Strange Printer II,"There is a strange printer with the following two special requirements:
On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.

Once the printer has used a color for the above operation, the same color cannot be used again.

You are given a `m x n` matrix `targetGrid`, where `targetGrid[row][col]` is the color in the position `(row, col)` of the grid.

Return `true` if it is possible to print the matrix `targetGrid`, otherwise, return `false`.


Example 1:
Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
Output: true

Example 2:
Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
Output: true

Example 3:
Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]
Output: false
Explanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.


Example 4:
Input: targetGrid = [[1,1,1],[3,1,3]]
Output: false

Constraints:
`m == targetGrid.length`
`n == targetGrid[i].length`
`1 <= m, n <= 60`
`1 <= targetGrid[row][col] <= 60`",Hard,https://leetcode.com/problems/strange-printer-ii,Google,Greedy,179,"[Strange Printer, /problems/strange-printer/, Hard]","there is a strange printer with the following two special requirements: on each turn, the printer will print a solid rectangular pattern of a single color on the grid. this will cover up the existing colors in the rectangle. once the printer has used a color for the above operation, the same color cannot be used again. you are given a `m x n` matrix `targetgrid`, where `targetgrid[row][col]` is the color in the position `(row, col)` of the grid. return `true` if it is possible to print the matrix `targetgrid`, otherwise, return `false`.","input: targetgrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]] output: true example 2: input: targetgrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]] output: true example 3: input: targetgrid = [[1,2,1],[2,1,2],[1,2,1]] output: false explanation: it is impossible to form targetgrid because it is not allowed to print the same color in different turns. example 4: input: targetgrid = [[1,1,1],[3,1,3]] output: false","`m == targetgrid.length` `n == targetgrid[i].length` `1 <= m, n <= 60` `1 <= targetgrid[row][col] <= 60`",
1592,Rearrange Spaces Between Words,"You are given a string `text` of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that `text` contains at least one word.

Rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as `text`.

Return the string after rearranging the spaces.


Example 1:
Input: text = ""  this   is  a sentence ""
Output: ""this   is   a   sentence""
Explanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.


Example 2:
Input: text = "" practice   makes   perfect""
Output: ""practice   makes   perfect ""
Explanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.


Example 3:
Input: text = ""hello   world""
Output: ""hello   world""

Example 4:
Input: text = ""  walks  udp package   into  bar a""
Output: ""walks  udp  package  into  bar  a ""

Example 5:
Input: text = ""a""
Output: ""a""

Constraints:
`1 <= text.length <= 100`
`text` consists of lowercase English letters and `' '`.

`text` contains at least one word.",Easy,https://leetcode.com/problems/rearrange-spaces-between-words,Google,String,129,"[Text Justification, /problems/text-justification/, Hard]","you are given a string `text` of words that are placed among some number of spaces. each word consists of one or more lowercase english letters and are separated by at least one space. it's guaranteed that `text` contains at least one word. rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. if you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as `text`. return the string after rearranging the spaces.","input: text = "" this is a sentence "" output: ""this is a sentence"" explanation: there are a total of 9 spaces and 4 words. we can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces. example 2: input: text = "" practice makes perfect"" output: ""practice makes perfect "" explanation: there are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. we place this extra space at the end of the string. example 3: input: text = ""hello world"" output: ""hello world"" example 4: input: text = "" walks udp package into bar a"" output: ""walks udp package into bar a "" example 5: input: text = ""a"" output: ""a""",`1 <= text.length <= 10^0` `text` consists of lowercase english letters and `' '`. `text` contains at least one word.,
1593,Split a String Into the Max Number of Unique Substrings,"Given a string `s`, return the maximum number of unique substrings that the given string can be split into.

You can split string `s` into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.

A substring is a contiguous sequence of characters within a string.


Example 1:
Input: s = ""ababccc""
Output: 5
Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.


Example 2:
Input: s = ""aba""
Output: 2
Explanation: One way to split maximally is ['a', 'ba'].


Example 3:
Input: s = ""aa""
Output: 1
Explanation: It is impossible to split the string any further.


Constraints:
`1 <= s.length <= 16`
`s` contains only lower case English letters.",Medium,https://leetcode.com/problems/split-a-string-into-the-max-number-of-unique-substrings,Google,Backtracking,305,,"given a string `s`, return the maximum number of unique substrings that the given string can be split into. you can split string `s` into any list of non-empty substrings, where the concatenation of the substrings forms the original string. however, you must split the substrings such that all of them are unique. a substring is a contiguous sequence of characters within a string.","input: s = ""ababccc"" output: 5 explanation: one way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times. example 2: input: s = ""aba"" output: 2 explanation: one way to split maximally is ['a', 'ba']. example 3: input: s = ""aa"" output: 1 explanation: it is impossible to split the string any further.",`1 <= s.length <= 16` `s` contains only lower case english letters.,
1594,Maximum Non Negative Product in a Matrix,"You are given a `rows x cols` matrix `grid`. Initially, you are located at the top-left corner `(0, 0)`, and in each step, you can only move right or down in the matrix.

Among all possible paths starting from the top-left corner `(0, 0)` and ending in the bottom-right corner `(rows - 1, cols - 1)`, find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.

Return the maximum non-negative product modulo `109 + 7`. If the maximum product is negative return `-1`.

Notice that the modulo is performed after getting the maximum product.


Example 1:
Input: grid = [[-1,-2,-3],
               [-2,-3,-3],
               [-3,-3,-2]]
Output: -1
Explanation: It's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.


Example 2:
Input: grid = [[1,-2,1],
               [1,-2,1],
               [3,-4,1]]
Output: 8
Explanation: Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).


Example 3:
Input: grid = [[1, 3],
               [0,-4]]
Output: 0
Explanation: Maximum non-negative product is in bold (1 * 0 * -4 = 0).


Example 4:
Input: grid = [[ 1, 4,4,0],
               [-2, 0,0,1],
               [ 1,-1,1,1]]
Output: 2
Explanation: Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).


Constraints:
`1 <= rows, cols <= 15`
`-4 <= grid[i][j] <= 4`",Medium,https://leetcode.com/problems/maximum-non-negative-product-in-a-matrix,Google,"Dynamic Programming,Greedy",305,,"you are given a `rows x cols` matrix `grid`. initially, you are located at the top-left corner `(0, 0)`, and in each step, you can only move right or down in the matrix. among all possible paths starting from the top-left corner `(0, 0)` and ending in the bottom-right corner `(rows - 1, cols - 1)`, find the path with the maximum non-negative product. the product of a path is the product of all integers in the grid cells visited along the path. return the maximum non-negative product modulo `109 + 7`. if the maximum product is negative return `-1`. notice that the modulo is performed after getting the maximum product.","input: grid = [[-1,-2,-3], [-2,-3,-3], [-3,-3,-2]] output: -1 explanation: it's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1. example 2: input: grid = [[1,-2,1], [1,-2,1], [3,-4,1]] output: 8 explanation: maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8). example 3: input: grid = [[1, 3], [0,-4]] output: 0 explanation: maximum non-negative product is in bold (1 * 0 * -4 = 0). example 4: input: grid = [[ 1, 4,4,0], [-2, 0,0,1], [ 1,-1,1,1]] output: 2 explanation: maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).","`1 <= rows, cols <= 15` `-4 <= grid[i][j] <= 4`",
1595,Minimum Cost to Connect Two Groups of Points,"You are given two groups of points where the first group has `size1` points, the second group has `size2` points, and `size1 >= size2`.

The `cost` of the connection between any two points are given in an `size1 x size2` matrix where `cost[i][j]` is the cost of connecting point `i` of the first group and point `j` of the second group. The groups are connected if each point in both groups is connected to one or more points in the opposite group. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.

Return the minimum cost it takes to connect the two groups.


Example 1:
Input: cost = [[15, 96], [36, 2]]
Output: 17
Explanation: The optimal way of connecting the groups is:
1--A
2--B
This results in a total cost of 17.


Example 2:
Input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]
Output: 4
Explanation: The optimal way of connecting the groups is:
1--A
2--B
2--C
3--A
This results in a total cost of 4.

Note that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost.


Example 3:
Input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]
Output: 10

Constraints:
`size1 == cost.length`
`size2 == cost[i].length`
`1 <= size1, size2 <= 12`
`size1 >= size2`
`0 <= cost[i][j] <= 100`",Hard,https://leetcode.com/problems/minimum-cost-to-connect-two-groups-of-points,Google,"Dynamic Programming,Graph",207,,"you are given two groups of points where the first group has `size1` points, the second group has `size2` points, and `size1 >= size2`. the `cost` of the connection between any two points are given in an `size1 x size2` matrix where `cost[i][j]` is the cost of connecting point `i` of the first group and point `j` of the second group. the groups are connected if each point in both groups is connected to one or more points in the opposite group. in other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group. return the minimum cost it takes to connect the two groups.","input: cost = [[15, 96], [36, 2]] output: 17 explanation: the optimal way of connecting the groups is: 1--a 2--b this results in a total cost of 17. example 2: input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]] output: 4 explanation: the optimal way of connecting the groups is: 1--a 2--b 2--c 3--a this results in a total cost of 4. note that there are multiple points connected to point 2 in the first group and point a in the second group. this does not matter as there is no limit to the number of points that can be connected. we only care about the minimum total cost. example 3: input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]] output: 10","`size1 == cost.length` `size2 == cost[i].length` `1 <= size1, size2 <= 12` `size1 >= size2` `0 <= cost[i][j] <= 10^0`",
1596,The Most Frequently Ordered Products for Each Customer,SQL Schema,Medium,https://leetcode.com/problems/the-most-frequently-ordered-products-for-each-customer,Amazon,,67,,sql schema,,,
1597,Build Binary Expression Tree From Infix Expression,"A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with 2 children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).

For each internal node with operator `o`, the infix expression that it represents is `(A o B)`, where `A` is the expression the left subtree represents and `B` is the expression the right subtree represents.

You are given a string `s`, an infix expression containing operands, the operators described above, and parentheses `'('` and `')'`.

Return any valid binary expression tree, which its in-order traversal reproduces `s` after omitting the parenthesis from it (see examples below).

Please note that order of operations applies in `s`. That is, expressions in parentheses are evaluated first, and multiplication and division happen before addition and subtraction.

Operands must also appear in the same order in both `s` and the in-order traversal of the tree.


Example 1:
Input: s = ""3*4-2*5""
Output: [-,*,*,3,4,2,5]
Explanation: The tree above is the only valid tree whose inorder traversal produces s.


Example 2:
Input: s = ""2-3/(5*2)+1""
Output: [+,-,1,2,/,null,null,null,null,3,*,null,null,5,2]
Explanation: The inorder traversal of the tree above is 2-3/5*2+1 which is the same as s without the parenthesis. The tree also produces the correct result and its operands are in the same order as they appear in s.

The tree below is also a valid binary expression tree with the same inorder traversal as s, but it not a valid answer because it does not evaluate to the same value.

The third tree below is also not valid. Although it produces the same result and is equivalent to the above trees, its inorder traversal does not produce s and its operands are not in the same order as s.


Example 3:
Input: s = ""1+2+3+4+5""
Output: [+,+,5,+,4,null,null,+,3,null,null,1,2]
Explanation: The tree [+,+,5,+,+,null,null,1,2,3,4] is also one of many other valid trees.


Constraints:
`1 <= s.length <= 1000`
`s` consists of digits and the characters `'+'`, `'-'`, `'*'`, and `'/'`.

Operands in `s` are exactly 1 digit.

It is guaranteed that `s` is a valid expression.",Hard,https://leetcode.com/problems/build-binary-expression-tree-from-infix-expression,Amazon,"String,Tree",77,"[Basic Calculator III, /problems/basic-calculator-iii/, Hard], [Check If Two Expression Trees are Equivalent, /problems/check-if-two-expression-trees-are-equivalent/, Medium]","a binary expression tree is a kind of binary tree used to represent arithmetic expressions. each node of a binary expression tree has either zero or two children. leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with 2 children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division). for each internal node with operator `o`, the infix expression that it represents is `(a o b)`, where `a` is the expression the left subtree represents and `b` is the expression the right subtree represents. you are given a string `s`, an infix expression containing operands, the operators described above, and parentheses `'('` and `')'`. return any valid binary expression tree, which its in-order traversal reproduces `s` after omitting the parenthesis from it (see examples below). please note that order of operations applies in `s`. that is, expressions in parentheses are evaluated first, and multiplication and division happen before addition and subtraction. operands must also appear in the same order in both `s` and the in-order traversal of the tree.","input: s = ""3*4-2*5"" output: [-,*,*,3,4,2,5] explanation: the tree above is the only valid tree whose inorder traversal produces s. example 2: input: s = ""2-3/(5*2)+1"" output: [+,-,1,2,/,null,null,null,null,3,*,null,null,5,2] explanation: the inorder traversal of the tree above is 2-3/5*2+1 which is the same as s without the parenthesis. the tree also produces the correct result and its operands are in the same order as they appear in s. the tree below is also a valid binary expression tree with the same inorder traversal as s, but it not a valid answer because it does not evaluate to the same value. the third tree below is also not valid. although it produces the same result and is equivalent to the above trees, its inorder traversal does not produce s and its operands are not in the same order as s. example 3: input: s = ""1+2+3+4+5"" output: [+,+,5,+,4,null,null,+,3,null,null,1,2] explanation: the tree [+,+,5,+,+,null,null,1,2,3,4] is also one of many other valid trees.","`1 <= s.length <= 1000` `s` consists of digits and the characters `'+'`, `'-'`, `'*'`, and `'/'`. operands in `s` are exactly 1 digit. it is guaranteed that `s` is a valid expression.",
1598,Crawler Log Folder,"The Leetcode file system keeps a log each time some user performs a change folder operation.

The operations are described below:
`""../""` : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).

`""./""` : Remain in the same folder.

`""x/""` : Move to the child folder named `x` (This folder is guaranteed to always exist).

You are given a list of strings `logs` where `logs[i]` is the operation performed by the user at the `ith` step.

The file system starts in the main folder, then the operations in `logs` are performed.

Return the minimum number of operations needed to go back to the main folder after the change folder operations.


Example 1:
Input: logs = [""d1/"",""d2/"",""../"",""d21/"",""./""]
Output: 2
Explanation: Use this change folder operation ""../"" 2 times and go back to the main folder.


Example 2:
Input: logs = [""d1/"",""d2/"",""./"",""d3/"",""../"",""d31/""]
Output: 3

Example 3:
Input: logs = [""d1/"",""../"",""../"",""../""]
Output: 0

Constraints:
`1 <= logs.length <= 103`
`2 <= logs[i].length <= 10`
`logs[i]` contains lowercase English letters, digits, `'.'`, and `'/'`.

`logs[i]` follows the format described in the statement.

Folder names consist of lowercase English letters and digits.",Easy,https://leetcode.com/problems/crawler-log-folder,Mercari,Stack,199,"[Baseball Game, /problems/baseball-game/, Easy], [Backspace String Compare, /problems/backspace-string-compare/, Easy]","the leetcode file system keeps a log each time some user performs a change folder operation. the operations are described below: `""../""` : move to the parent folder of the current folder. (if you are already in the main folder, remain in the same folder). `""./""` : remain in the same folder. `""x/""` : move to the child folder named `x` (this folder is guaranteed to always exist). you are given a list of strings `logs` where `logs[i]` is the operation performed by the user at the `ith` step. the file system starts in the main folder, then the operations in `logs` are performed. return the minimum number of operations needed to go back to the main folder after the change folder operations.","input: logs = [""d1/"",""d2/"",""../"",""d21/"",""./""] output: 2 explanation: use this change folder operation ""../"" 2 times and go back to the main folder. example 2: input: logs = [""d1/"",""d2/"",""./"",""d3/"",""../"",""d31/""] output: 3 example 3: input: logs = [""d1/"",""../"",""../"",""../""] output: 0","`1 <= logs.length <= 10^3` `2 <= logs[i].length <= 10` `logs[i]` contains lowercase english letters, digits, `'.'`, and `'/'`. `logs[i]` follows the format described in the statement. folder names consist of lowercase english letters and digits.",
1599,Maximum Profit of Operating a Centennial Wheel,"You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you `runningCost` dollars.

You are given an array `customers` of length `n` where `customers[i]` is the number of new customers arriving just before the `ith` rotation (0-indexed). This means you must rotate the wheel `i` times before the `customers[i]` customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays `boardingCost` dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.

You can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.

Return the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return `-1`.


Example 1:
Input: customers = [8,3], boardingCost = 5, runningCost = 6
Output: 3
Explanation: The numbers written on the gondolas are the number of people currently there.

1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.

2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.

3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.

The highest profit was $37 after rotating the wheel 3 times.


Example 2:
Input: customers = [10,9,6], boardingCost = 6, runningCost = 4
Output: 7
Explanation:
1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.

2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.

3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.

4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.

5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.

6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.

7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.

The highest profit was $122 after rotating the wheel 7 times.


Example 3:
Input: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92
Output: -1
Explanation:
1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.

2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.

3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.

4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.

5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.

The profit was never positive, so return -1.


Example 4:
Input: customers = [10,10,6,4,7], boardingCost = 3, runningCost = 8
Output: 9
Explanation:
1. 10 customers arrive, 4 board and 6 wait, the wheel rotates. Current profit is 4 * $3 - 1 * $8 = $4.

2. 10 customers arrive, 4 board and 12 wait, the wheel rotates. Current profit is 8 * $3 - 2 * $8 = $8.

3. 6 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 12 * $3 - 3 * $8 = $12.

4. 4 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 16 * $3 - 4 * $8 = $16.

5. 7 customers arrive, 4 board and 17 wait, the wheel rotates. Current profit is 20 * $3 - 5 * $8 = $20.

6. 4 board and 13 wait, the wheel rotates. Current profit is 24 * $3 - 6 * $8 = $24.

7. 4 board and 9 wait, the wheel rotates. Current profit is 28 * $3 - 7 * $8 = $28.

8. 4 board and 5 wait, the wheel rotates. Current profit is 32 * $3 - 8 * $8 = $32.

9. 4 board and 1 waits, the wheel rotates. Current profit is 36 * $3 - 9 * $8 = $36.

10. 1 board and 0 wait, the wheel rotates. Current profit is 37 * $3 - 10 * $8 = $31.

The highest profit was $36 after rotating the wheel 9 times.


Constraints:
`n == customers.length`
`1 <= n <= 105`
`0 <= customers[i] <= 50`
`1 <= boardingCost, runningCost <= 100`",Medium,https://leetcode.com/problems/maximum-profit-of-operating-a-centennial-wheel,peak6,Greedy,52,,"you are the operator of a centennial wheel that has four gondolas, and each gondola has room for up to four people. you have the ability to rotate the gondolas counterclockwise, which costs you `runningcost` dollars. you are given an array `customers` of length `n` where `customers[i]` is the number of new customers arriving just before the `ith` rotation (0-indexed). this means you must rotate the wheel `i` times before the `customers[i]` customers arrive. you cannot make customers wait if there is room in the gondola. each customer pays `boardingcost` dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again. you can stop the wheel at any time, including before serving all customers. if you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation. return the minimum number of rotations you need to perform to maximize your profit. if there is no scenario where the profit is positive, return `-1`.","input: customers = [8,3], boardingcost = 5, runningcost = 6 output: 3 explanation: the numbers written on the gondolas are the number of people currently there. 1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. current profit is 4 * $5 - 1 * $6 = $14. 2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. current profit is 8 * $5 - 2 * $6 = $28. 3. the final 3 customers board the gondola, the wheel rotates. current profit is 11 * $5 - 3 * $6 = $37. the highest profit was $37 after rotating the wheel 3 times. example 2: input: customers = [10,9,6], boardingcost = 6, runningcost = 4 output: 7 explanation: 1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. current profit is 4 * $6 - 1 * $4 = $20. 2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. current profit is 8 * $6 - 2 * $4 = $40. 3. the final 6 customers arrive, 4 board and 13 wait, the wheel rotates. current profit is 12 * $6 - 3 * $4 = $60. 4. 4 board and 9 wait, the wheel rotates. current profit is 16 * $6 - 4 * $4 = $80. 5. 4 board and 5 wait, the wheel rotates. current profit is 20 * $6 - 5 * $4 = $100. 6. 4 board and 1 waits, the wheel rotates. current profit is 24 * $6 - 6 * $4 = $120. 7. 1 boards, the wheel rotates. current profit is 25 * $6 - 7 * $4 = $122. the highest profit was $122 after rotating the wheel 7 times. example 3: input: customers = [3,4,0,5,1], boardingcost = 1, runningcost = 92 output: -1 explanation: 1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. current profit is 3 * $1 - 1 * $92 = -$89. 2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. current profit is 7 * $1 - 2 * $92 = -$177. 3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. current profit is 7 * $1 - 3 * $92 = -$269. 4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. current profit is 11 * $1 - 4 * $92 = -$357. 5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. current profit is 13 * $1 - 5 * $92 = -$447. the profit was never positive, so return -1. example 4: input: customers = [10,10,6,4,7], boardingcost = 3, runningcost = 8 output: 9 explanation: 1. 10 customers arrive, 4 board and 6 wait, the wheel rotates. current profit is 4 * $3 - 1 * $8 = $4. 2. 10 customers arrive, 4 board and 12 wait, the wheel rotates. current profit is 8 * $3 - 2 * $8 = $8. 3. 6 customers arrive, 4 board and 14 wait, the wheel rotates. current profit is 12 * $3 - 3 * $8 = $12. 4. 4 customers arrive, 4 board and 14 wait, the wheel rotates. current profit is 16 * $3 - 4 * $8 = $16. 5. 7 customers arrive, 4 board and 17 wait, the wheel rotates. current profit is 20 * $3 - 5 * $8 = $20. 6. 4 board and 13 wait, the wheel rotates. current profit is 24 * $3 - 6 * $8 = $24. 7. 4 board and 9 wait, the wheel rotates. current profit is 28 * $3 - 7 * $8 = $28. 8. 4 board and 5 wait, the wheel rotates. current profit is 32 * $3 - 8 * $8 = $32. 9. 4 board and 1 waits, the wheel rotates. current profit is 36 * $3 - 9 * $8 = $36. 10. 1 board and 0 wait, the wheel rotates. current profit is 37 * $3 - 10 * $8 = $31. the highest profit was $36 after rotating the wheel 9 times.","`n == customers.length` `1 <= n <= 10^5` `0 <= customers[i] <= 50` `1 <= boardingcost, runningcost <= 10^0`",
1600,Throne Inheritance,"A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.

The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function `Successor(x, curOrder)`, which given a person `x` and the inheritance order so far, returns who should be the next person after `x` in the order of inheritance.

Successor(x, curOrder):
    if x has no children or all of x's children are in curOrder:
        if x is the king return null
        else return Successor(x's parent, curOrder)
    else return x's oldest child who's not in curOrder
For example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.

In the beginning, `curOrder` will be `[""king""]`.

Calling `Successor(king, curOrder)` will return Alice, so we append to `curOrder` to get `[""king"", ""Alice""]`.

Calling `Successor(Alice, curOrder)` will return Jack, so we append to `curOrder` to get `[""king"", ""Alice"", ""Jack""]`.

Calling `Successor(Jack, curOrder)` will return Bob, so we append to `curOrder` to get `[""king"", ""Alice"", ""Jack"", ""Bob""]`.

Calling `Successor(Bob, curOrder)` will return `null`. Thus the order of inheritance will be `[""king"", ""Alice"", ""Jack"", ""Bob""]`.

Using the above function, we can always obtain a unique order of inheritance.

Implement the `ThroneInheritance` class:
`ThroneInheritance(string kingName)` Initializes an object of the `ThroneInheritance` class. The name of the king is given as part of the constructor.

`void birth(string parentName, string childName)` Indicates that `parentName` gave birth to `childName`.

`void death(string name)` Indicates the death of `name`. The death of the person doesn't affect the `Successor` function nor the current inheritance order. You can treat it as just marking the person as dead.

`string[] getInheritanceOrder()` Returns a list representing the current order of inheritance excluding dead people.


Example 1:
Input
[""ThroneInheritance"", ""birth"", ""birth"", ""birth"", ""birth"", ""birth"", ""birth"", ""getInheritanceOrder"", ""death"", ""getInheritanceOrder""]
[[""king""], [""king"", ""andy""], [""king"", ""bob""], [""king"", ""catherine""], [""andy"", ""matthew""], [""bob"", ""alex""], [""bob"", ""asha""], [null], [""bob""], [null]]
Output
[null, null, null, null, null, null, null, [""king"", ""andy"", ""matthew"", ""bob"", ""alex"", ""asha"", ""catherine""], null, [""king"", ""andy"", ""matthew"", ""alex"", ""asha"", ""catherine""]]
Explanation
ThroneInheritance t= new ThroneInheritance(""king""); // order: king
t.birth(""king"", ""andy""); // order: king > andy
t.birth(""king"", ""bob""); // order: king > andy > bob
t.birth(""king"", ""catherine""); // order: king > andy > bob > catherine
t.birth(""andy"", ""matthew""); // order: king > andy > matthew > bob > catherine
t.birth(""bob"", ""alex""); // order: king > andy > matthew > bob > alex > catherine
t.birth(""bob"", ""asha""); // order: king > andy > matthew > bob > alex > asha > catherine
t.getInheritanceOrder(); // return [""king"", ""andy"", ""matthew"", ""bob"", ""alex"", ""asha"", ""catherine""]
t.death(""bob""); // order: king > andy > matthew > bob > alex > asha > catherine
t.getInheritanceOrder(); // return [""king"", ""andy"", ""matthew"", ""alex"", ""asha"", ""catherine""]

Constraints:
`1 <= kingName.length, parentName.length, childName.length, name.length <= 15`
`kingName`, `parentName`, `childName`, and `name` consist of lowercase English letters only.

All arguments `childName` and `kingName` are distinct.

All `name` arguments of `death` will be passed to either the constructor or as `childName` to `birth` first.

For each call to `birth(parentName, childName)`, it is guaranteed that `parentName` is alive.

At most `105` calls will be made to `birth` and `death`.

At most `10` calls will be made to `getInheritanceOrder`.",Medium,https://leetcode.com/problems/throne-inheritance,Amazon,"Tree,Design",105,,"a kingdom consists of a king, his children, his grandchildren, and so on. every once in a while, someone in the family dies or a child is born. the kingdom has a well-defined order of inheritance that consists of the king as the first member. let's define the recursive function `successor(x, curorder)`, which given a person `x` and the inheritance order so far, returns who should be the next person after `x` in the order of inheritance. successor(x, curorder): if x has no children or all of x's children are in curorder: if x is the king return null else return successor(x's parent, curorder) else return x's oldest child who's not in curorder for example, assume we have a kingdom that consists of the king, his children alice and bob (alice is older than bob), and finally alice's son jack. in the beginning, `curorder` will be `[""king""]`. calling `successor(king, curorder)` will return alice, so we append to `curorder` to get `[""king"", ""alice""]`. calling `successor(alice, curorder)` will return jack, so we append to `curorder` to get `[""king"", ""alice"", ""jack""]`. calling `successor(jack, curorder)` will return bob, so we append to `curorder` to get `[""king"", ""alice"", ""jack"", ""bob""]`. calling `successor(bob, curorder)` will return `null`. thus the order of inheritance will be `[""king"", ""alice"", ""jack"", ""bob""]`. using the above function, we can always obtain a unique order of inheritance. implement the `throneinheritance` class: `throneinheritance(string kingname)` initializes an object of the `throneinheritance` class. the name of the king is given as part of the constructor. `void birth(string parentname, string childname)` indicates that `parentname` gave birth to `childname`. `void death(string name)` indicates the death of `name`. the death of the person doesn't affect the `successor` function nor the current inheritance order. you can treat it as just marking the person as dead. `string[] getinheritanceorder()` returns a list representing the current order of inheritance excluding dead people.","input [""throneinheritance"", ""birth"", ""birth"", ""birth"", ""birth"", ""birth"", ""birth"", ""getinheritanceorder"", ""death"", ""getinheritanceorder""] [[""king""], [""king"", ""andy""], [""king"", ""bob""], [""king"", ""catherine""], [""andy"", ""matthew""], [""bob"", ""alex""], [""bob"", ""asha""], [null], [""bob""], [null]] output [null, null, null, null, null, null, null, [""king"", ""andy"", ""matthew"", ""bob"", ""alex"", ""asha"", ""catherine""], null, [""king"", ""andy"", ""matthew"", ""alex"", ""asha"", ""catherine""]] explanation throneinheritance t= new throneinheritance(""king""); // order: king t.birth(""king"", ""andy""); // order: king > andy t.birth(""king"", ""bob""); // order: king > andy > bob t.birth(""king"", ""catherine""); // order: king > andy > bob > catherine t.birth(""andy"", ""matthew""); // order: king > andy > matthew > bob > catherine t.birth(""bob"", ""alex""); // order: king > andy > matthew > bob > alex > catherine t.birth(""bob"", ""asha""); // order: king > andy > matthew > bob > alex > asha > catherine t.getinheritanceorder(); // return [""king"", ""andy"", ""matthew"", ""bob"", ""alex"", ""asha"", ""catherine""] t.death(""bob""); // order: king > andy > matthew > bob > alex > asha > catherine t.getinheritanceorder(); // return [""king"", ""andy"", ""matthew"", ""alex"", ""asha"", ""catherine""]","`1 <= kingname.length, parentname.length, childname.length, name.length <= 15` `kingname`, `parentname`, `childname`, and `name` consist of lowercase english letters only. all arguments `childname` and `kingname` are distinct. all `name` arguments of `death` will be passed to either the constructor or as `childname` to `birth` first. for each call to `birth(parentname, childname)`, it is guaranteed that `parentname` is alive. at most `10^5` calls will be made to `birth` and `death`. at most `10` calls will be made to `getinheritanceorder`.",
1601,Maximum Number of Achievable Transfer Requests,"We have `n` buildings numbered from `0` to `n - 1`. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.

You are given an array `requests` where `requests[i] = [fromi, toi]` represents an employee's request to transfer from building `fromi` to building `toi`.

All buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if `n = 3` and two employees are leaving building `0`, one is leaving building `1`, and one is leaving building `2`, there should be two employees moving to building `0`, one employee moving to building `1`, and one employee moving to building `2`.

Return the maximum number of achievable requests.


Example 1:
Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]
Output: 5
Explantion: Let's see the requests:
From building 0 we have employees x and y and both want to move to building 1.

From building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.

From building 2 we have employee z and they want to move to building 0.

From building 3 we have employee c and they want to move to building 4.

From building 4 we don't have any requests.

We can achieve the requests of users x and b by swapping their places.

We can achieve the requests of users y, a and z by swapping the places in the 3 buildings.


Example 2:
Input: n = 3, requests = [[0,0],[1,2],[2,1]]
Output: 3
Explantion: Let's see the requests:
From building 0 we have employee x and they want to stay in the same building 0.

From building 1 we have employee y and they want to move to building 2.

From building 2 we have employee z and they want to move to building 1.

We can achieve all the requests. 

Example 3:
Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]
Output: 4

Constraints:
`1 <= n <= 20`
`1 <= requests.length <= 16`
`requests[i].length == 2`
`0 <= fromi, toi < n`",Hard,https://leetcode.com/problems/maximum-number-of-achievable-transfer-requests,Amazon,Dynamic Programming,172,,"we have `n` buildings numbered from `0` to `n - 1`. each building has a number of employees. it's transfer season, and some employees want to change the building they reside in. you are given an array `requests` where `requests[i] = [fromi, toi]` represents an employee's request to transfer from building `fromi` to building `toi`. all buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. this means the number of employees leaving is equal to the number of employees moving in. for example if `n = 3` and two employees are leaving building `0`, one is leaving building `1`, and one is leaving building `2`, there should be two employees moving to building `0`, one employee moving to building `1`, and one employee moving to building `2`. return the maximum number of achievable requests.","input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]] output: 5 explantion: let's see the requests: from building 0 we have employees x and y and both want to move to building 1. from building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively. from building 2 we have employee z and they want to move to building 0. from building 3 we have employee c and they want to move to building 4. from building 4 we don't have any requests. we can achieve the requests of users x and b by swapping their places. we can achieve the requests of users y, a and z by swapping the places in the 3 buildings. example 2: input: n = 3, requests = [[0,0],[1,2],[2,1]] output: 3 explantion: let's see the requests: from building 0 we have employee x and they want to stay in the same building 0. from building 1 we have employee y and they want to move to building 2. from building 2 we have employee z and they want to move to building 1. we can achieve all the requests. example 3: input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]] output: 4","`1 <= n <= 20` `1 <= requests.length <= 16` `requests[i].length == 2` `0 <= fromi, toi < n`",
1602,Find Nearest Right Node in Binary Tree,"Given the `root` of a binary tree and a node `u` in the tree, return the nearest node on the same level that is to the right of `u`, or return `null` if `u` is the rightmost node in its level.


Example 1:
Input: root = [1,2,3,null,4,5,6], u = 4
Output: 5
Explanation: The nearest node on the same level to the right of node 4 is node 5.


Example 2:
Input: root = [3,null,4,2], u = 2
Output: null
Explanation: There are no nodes to the right of 2.


Example 3:
Input: root = [1], u = 1
Output: null

Example 4:
Input: root = [3,4,2,null,null,null,1], u = 4
Output: 2

Constraints:
The number of nodes in the tree is in the range `[1, 105]`.

`1 <= Node.val <= 105`
All values in the tree are distinct.

`u` is a node in the binary tree rooted at `root`.",Medium,https://leetcode.com/problems/find-nearest-right-node-in-binary-tree,Google,"Tree,Breadth-first Search",154,,"given the `root` of a binary tree and a node `u` in the tree, return the nearest node on the same level that is to the right of `u`, or return `null` if `u` is the rightmost node in its level.","input: root = [1,2,3,null,4,5,6], u = 4 output: 5 explanation: the nearest node on the same level to the right of node 4 is node 5. example 2: input: root = [3,null,4,2], u = 2 output: null explanation: there are no nodes to the right of 2. example 3: input: root = [1], u = 1 output: null example 4: input: root = [3,4,2,null,null,null,1], u = 4 output: 2","the number of nodes in the tree is in the range `[1, 10^5]`. `1 <= node.val <= 10^5` all values in the tree are distinct. `u` is a node in the binary tree rooted at `root`.",
1603,Design Parking System,"Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.

Implement the `ParkingSystem` class:
`ParkingSystem(int big, int medium, int small)` Initializes object of the `ParkingSystem` class. The number of slots for each parking space are given as part of the constructor.

`bool addCar(int carType)` Checks whether there is a parking space of `carType` for the car that wants to get into the parking lot. `carType` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. A car can only park in a parking space of its `carType`. If there is no space available, return `false`, else park the car in that size space and return `true`.


Example 1:
Input
[""ParkingSystem"", ""addCar"", ""addCar"", ""addCar"", ""addCar""]
[[1, 1, 0], [1], [2], [3], [1]]
Output
[null, true, true, false, false]
Explanation
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // return true because there is 1 available slot for a big car
parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car
parkingSystem.addCar(3); // return false because there is no available slot for a small car
parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.


Constraints:
`0 <= big, medium, small <= 1000`
`carType` is `1`, `2`, or `3`
At most `1000` calls will be made to `addCar`",Easy,https://leetcode.com/problems/design-parking-system,Amazon,Design,282,,"design a parking system for a parking lot. the parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size. implement the `parkingsystem` class: `parkingsystem(int big, int medium, int small)` initializes object of the `parkingsystem` class. the number of slots for each parking space are given as part of the constructor. `bool addcar(int cartype)` checks whether there is a parking space of `cartype` for the car that wants to get into the parking lot. `cartype` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. a car can only park in a parking space of its `cartype`. if there is no space available, return `false`, else park the car in that size space and return `true`.","input [""parkingsystem"", ""addcar"", ""addcar"", ""addcar"", ""addcar""] [[1, 1, 0], [1], [2], [3], [1]] output [null, true, true, false, false] explanation parkingsystem parkingsystem = new parkingsystem(1, 1, 0); parkingsystem.addcar(1); // return true because there is 1 available slot for a big car parkingsystem.addcar(2); // return true because there is 1 available slot for a medium car parkingsystem.addcar(3); // return false because there is no available slot for a small car parkingsystem.addcar(1); // return false because there is no available slot for a big car. it is already occupied.","`0 <= big, medium, small <= 1000` `cartype` is `1`, `2`, or `3` at most `1000` calls will be made to `addcar`",
1604,Alert Using Same Key-Card Three or More Times in a One Hour Period,"LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.

You are given a list of strings `keyName` and `keyTime` where `[keyName[i], keyTime[i]]` corresponds to a person's name and the time when their key-card was used in a single day.

Access times are given in the 24-hour time format ""HH:MM"", such as `""23:51""` and `""09:49""`.

Return a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.

Notice that `""10:00""` - `""11:00""` is considered to be within a one-hour period, while `""22:51""` - `""23:52""` is not considered to be within a one-hour period.


Example 1:
Input: keyName = [""daniel"",""daniel"",""daniel"",""luis"",""luis"",""luis"",""luis""], keyTime = [""10:00"",""10:40"",""11:00"",""09:00"",""11:00"",""13:00"",""15:00""]
Output: [""daniel""]
Explanation: ""daniel"" used the keycard 3 times in a one-hour period (""10:00"",""10:40"", ""11:00"").


Example 2:
Input: keyName = [""alice"",""alice"",""alice"",""bob"",""bob"",""bob"",""bob""], keyTime = [""12:01"",""12:00"",""18:00"",""21:00"",""21:20"",""21:30"",""23:00""]
Output: [""bob""]
Explanation: ""bob"" used the keycard 3 times in a one-hour period (""21:00"",""21:20"", ""21:30"").


Example 3:
Input: keyName = [""john"",""john"",""john""], keyTime = [""23:58"",""23:59"",""00:01""]
Output: []

Example 4:
Input: keyName = [""leslie"",""leslie"",""leslie"",""clare"",""clare"",""clare"",""clare""], keyTime = [""13:00"",""13:20"",""14:00"",""18:00"",""18:51"",""19:30"",""19:49""]
Output: [""clare"",""leslie""]

Constraints:
`1 <= keyName.length, keyTime.length <= 105`
`keyName.length == keyTime.length`
`keyTime[i]` is in the format ""HH:MM"".

`[keyName[i], keyTime[i]]` is unique.

`1 <= keyName[i].length <= 10`
`keyName[i] contains only lowercase English letters.`",Medium,https://leetcode.com/problems/alert-using-same-key-card-three-or-more-times-in-a-one-hour-period,Wayfair,"String,Ordered Map",82,,"leetcode company workers use key-cards to unlock office doors. each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. the system emits an alert if any worker uses the key-card three or more times in a one-hour period. you are given a list of strings `keyname` and `keytime` where `[keyname[i], keytime[i]]` corresponds to a person's name and the time when their key-card was used in a single day. access times are given in the 24-hour time format ""hh:mm"", such as `""23:51""` and `""09:49""`. return a list of unique worker names who received an alert for frequent keycard use. sort the names in ascending order alphabetically. notice that `""10:00""` - `""11:00""` is considered to be within a one-hour period, while `""22:51""` - `""23:52""` is not considered to be within a one-hour period.","input: keyname = [""daniel"",""daniel"",""daniel"",""luis"",""luis"",""luis"",""luis""], keytime = [""10:00"",""10:40"",""11:00"",""09:00"",""11:00"",""13:00"",""15:00""] output: [""daniel""] explanation: ""daniel"" used the keycard 3 times in a one-hour period (""10:00"",""10:40"", ""11:00""). example 2: input: keyname = [""alice"",""alice"",""alice"",""bob"",""bob"",""bob"",""bob""], keytime = [""12:01"",""12:00"",""18:00"",""21:00"",""21:20"",""21:30"",""23:00""] output: [""bob""] explanation: ""bob"" used the keycard 3 times in a one-hour period (""21:00"",""21:20"", ""21:30""). example 3: input: keyname = [""john"",""john"",""john""], keytime = [""23:58"",""23:59"",""00:01""] output: [] example 4: input: keyname = [""leslie"",""leslie"",""leslie"",""clare"",""clare"",""clare"",""clare""], keytime = [""13:00"",""13:20"",""14:00"",""18:00"",""18:51"",""19:30"",""19:49""] output: [""clare"",""leslie""]","`1 <= keyname.length, keytime.length <= 10^5` `keyname.length == keytime.length` `keytime[i]` is in the format ""hh:mm"". `[keyname[i], keytime[i]]` is unique. `1 <= keyname[i].length <= 10` `keyname[i] contains only lowercase english letters.`",
1605,Find Valid Matrix Given Row and Column Sums,"You are given two arrays `rowSum` and `colSum` of non-negative integers where `rowSum[i]` is the sum of the elements in the `ith` row and `colSum[j]` is the sum of the elements of the `jth` column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.

Find any matrix of non-negative integers of size `rowSum.length x colSum.length` that satisfies the `rowSum` and `colSum` requirements.

Return a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.


Example 1:
Input: rowSum = [3,8], colSum = [4,7]
Output: [[3,0],
         [1,7]]
Explanation:
0th row: 3 + 0 = 3 == rowSum[0]
1st row: 1 + 7 = 8 == rowSum[1]
0th column: 3 + 1 = 4 == colSum[0]
1st column: 0 + 7 = 7 == colSum[1]
The row and column sums match, and all matrix elements are non-negative.

Another possible matrix is: [[1,2],
                             [3,5]]

Example 2:
Input: rowSum = [5,7,10], colSum = [8,6,8]
Output: [[0,5,0],
         [6,1,0],
         [2,0,8]]

Example 3:
Input: rowSum = [14,9], colSum = [6,9,8]
Output: [[0,9,5],
         [6,0,3]]

Example 4:
Input: rowSum = [1,0], colSum = [1]
Output: [[1],
         [0]]

Example 5:
Input: rowSum = [0], colSum = [0]
Output: [[0]]

Constraints:
`1 <= rowSum.length, colSum.length <= 500`
`0 <= rowSum[i], colSum[i] <= 108`
`sum(rows) == sum(columns)`",Medium,https://leetcode.com/problems/find-valid-matrix-given-row-and-column-sums,Google,Greedy,418,"[Reconstruct a 2-Row Binary Matrix, /problems/reconstruct-a-2-row-binary-matrix/, Medium]","you are given two arrays `rowsum` and `colsum` of non-negative integers where `rowsum[i]` is the sum of the elements in the `ith` row and `colsum[j]` is the sum of the elements of the `jth` column of a 2d matrix. in other words, you do not know the elements of the matrix, but you do know the sums of each row and column. find any matrix of non-negative integers of size `rowsum.length x colsum.length` that satisfies the `rowsum` and `colsum` requirements. return a 2d array representing any matrix that fulfills the requirements. it's guaranteed that at least one matrix that fulfills the requirements exists.","input: rowsum = [3,8], colsum = [4,7] output: [[3,0], [1,7]] explanation: 0th row: 3 + 0 = 3 == rowsum[0] 1st row: 1 + 7 = 8 == rowsum[1] 0th column: 3 + 1 = 4 == colsum[0] 1st column: 0 + 7 = 7 == colsum[1] the row and column sums match, and all matrix elements are non-negative. another possible matrix is: [[1,2], [3,5]] example 2: input: rowsum = [5,7,10], colsum = [8,6,8] output: [[0,5,0], [6,1,0], [2,0,8]] example 3: input: rowsum = [14,9], colsum = [6,9,8] output: [[0,9,5], [6,0,3]] example 4: input: rowsum = [1,0], colsum = [1] output: [[1], [0]] example 5: input: rowsum = [0], colsum = [0] output: [[0]]","`1 <= rowsum.length, colsum.length <= 500` `0 <= rowsum[i], colsum[i] <= 10^8` `sum(rows) == sum(columns)`",
1606,Find Servers That Handled Most Number of Requests,"You have `k` servers numbered from `0` to `k-1` that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:
The `ith` (0-indexed) request arrives.

If all servers are busy, the request is dropped (not handled at all).

If the `(i % k)th` server is available, assign the request to that server.

Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the `ith` server is busy, try to assign the request to the `(i+1)th` server, then the `(i+2)th` server, and so on.

You are given a strictly increasing array `arrival` of positive integers, where `arrival[i]` represents the arrival time of the `ith` request, and another array `load`, where `load[i]` represents the load of the `ith` request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.

Return a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.


Example 1:
Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] 
Output: [1] 
Explanation:
All of the servers start out available.

The first 3 requests are handled by the first 3 servers in order.

Request 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.

Request 4 comes in. It cannot be handled since all servers are busy, so it is dropped.

Servers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.


Example 2:
Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]
Output: [0]
Explanation:
The first 3 requests are handled by first 3 servers.

Request 3 comes in. It is handled by server 0 since the server is available.

Server 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.


Example 3:
Input: k = 3, arrival = [1,2,3], load = [10,12,11]
Output: [0,1,2]
Explanation: Each server handles a single request, so they are all considered the busiest.


Example 4:
Input: k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]
Output: [1]

Example 5:
Input: k = 1, arrival = [1], load = [1]
Output: [0]

Constraints:
`1 <= k <= 105`
`1 <= arrival.length, load.length <= 105`
`arrival.length == load.length`
`1 <= arrival[i], load[i] <= 109`
`arrival` is strictly increasing.",Hard,https://leetcode.com/problems/find-servers-that-handled-most-number-of-requests,Wish,Ordered Map,191,,"you have `k` servers numbered from `0` to `k-1` that are being used to handle multiple requests simultaneously. each server has infinite computational capacity but cannot handle more than one request at a time. the requests are assigned to servers according to a specific algorithm: the `ith` (0-indexed) request arrives. if all servers are busy, the request is dropped (not handled at all). if the `(i % k)th` server is available, assign the request to that server. otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). for example, if the `ith` server is busy, try to assign the request to the `(i+1)th` server, then the `(i+2)th` server, and so on. you are given a strictly increasing array `arrival` of positive integers, where `arrival[i]` represents the arrival time of the `ith` request, and another array `load`, where `load[i]` represents the load of the `ith` request (the time it takes to complete). your goal is to find the busiest server(s). a server is considered busiest if it handled the most number of requests successfully among all the servers. return a list containing the ids (0-indexed) of the busiest server(s). you may return the ids in any order.","input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] output: [1] explanation: all of the servers start out available. the first 3 requests are handled by the first 3 servers in order. request 3 comes in. server 0 is busy, so it's assigned to the next available server, which is 1. request 4 comes in. it cannot be handled since all servers are busy, so it is dropped. servers 0 and 2 handled one request each, while server 1 handled two requests. hence server 1 is the busiest server. example 2: input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2] output: [0] explanation: the first 3 requests are handled by first 3 servers. request 3 comes in. it is handled by server 0 since the server is available. server 0 handled two requests, while servers 1 and 2 handled one request each. hence server 0 is the busiest server. example 3: input: k = 3, arrival = [1,2,3], load = [10,12,11] output: [0,1,2] explanation: each server handles a single request, so they are all considered the busiest. example 4: input: k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2] output: [1] example 5: input: k = 1, arrival = [1], load = [1] output: [0]","`1 <= k <= 10^5` `1 <= arrival.length, load.length <= 10^5` `arrival.length == load.length` `1 <= arrival[i], load[i] <= 10^9` `arrival` is strictly increasing.",
1607,Sellers With No Sales,SQL Schema,Easy,https://leetcode.com/problems/sellers-with-no-sales,,,23,,sql schema,,,
1608,Special Array With X Elements Greater Than or Equal X,"You are given an array `nums` of non-negative integers. `nums` is considered special if there exists a number `x` such that there are exactly `x` numbers in `nums` that are greater than or equal to `x`.

Notice that `x` does not have to be an element in `nums`.

Return `x` if the array is special, otherwise, return `-1`. It can be proven that if `nums` is special, the value for `x` is unique.


Example 1:
Input: nums = [3,5]
Output: 2
Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.


Example 2:
Input: nums = [0,0]
Output: -1
Explanation: No numbers fit the criteria for x.

If x = 0, there should be 0 numbers >= x, but there are 2.

If x = 1, there should be 1 number >= x, but there are 0.

If x = 2, there should be 2 numbers >= x, but there are 0.

x cannot be greater since there are only 2 numbers in nums.


Example 3:
Input: nums = [0,4,3,0,4]
Output: 3
Explanation: There are 3 values that are greater than or equal to 3.


Example 4:
Input: nums = [3,6,7,7,0]
Output: -1

Constraints:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 1000`",Easy,https://leetcode.com/problems/special-array-with-x-elements-greater-than-or-equal-x,Google,Array,240,,"you are given an array `nums` of non-negative integers. `nums` is considered special if there exists a number `x` such that there are exactly `x` numbers in `nums` that are greater than or equal to `x`. notice that `x` does not have to be an element in `nums`. return `x` if the array is special, otherwise, return `-1`. it can be proven that if `nums` is special, the value for `x` is unique.","input: nums = [3,5] output: 2 explanation: there are 2 values (3 and 5) that are greater than or equal to 2. example 2: input: nums = [0,0] output: -1 explanation: no numbers fit the criteria for x. if x = 0, there should be 0 numbers >= x, but there are 2. if x = 1, there should be 1 number >= x, but there are 0. if x = 2, there should be 2 numbers >= x, but there are 0. x cannot be greater since there are only 2 numbers in nums. example 3: input: nums = [0,4,3,0,4] output: 3 explanation: there are 3 values that are greater than or equal to 3. example 4: input: nums = [3,6,7,7,0] output: -1",`1 <= nums.length <= 10^0` `0 <= nums[i] <= 1000`,
1609,Even Odd Tree,"A binary tree is named Even-Odd if it meets the following conditions:
The root of the binary tree is at level index `0`, its children are at level index `1`, their children are at level index `2`, etc.

For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).

For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).

Given the `root` of a binary tree, return `true` if the binary tree is Even-Odd, otherwise return `false`.


Example 1:
Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
Output: true
Explanation: The node values on each level are:
Level 0: [1]
Level 1: [10,4]
Level 2: [3,7,9]
Level 3: [12,8,6,2]
Since levels 0 and 2 are all odd and increasing, and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.


Example 2:
Input: root = [5,4,2,3,3,7]
Output: false
Explanation: The node values on each level are:
Level 0: [5]
Level 1: [4,2]
Level 2: [3,3,7]
Node values in the level 2 must be in strictly increasing order, so the tree is not Even-Odd.


Example 3:
Input: root = [5,9,1,3,5,7]
Output: false
Explanation: Node values in the level 1 should be even integers.


Example 4:
Input: root = [1]
Output: true

Example 5:
Input: root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]
Output: true

Constraints:
The number of nodes in the tree is in the range `[1, 105]`.

`1 <= Node.val <= 106`",Medium,https://leetcode.com/problems/even-odd-tree,JPMorgan,Tree,275,,"a binary tree is named even-odd if it meets the following conditions: the root of the binary tree is at level index `0`, its children are at level index `1`, their children are at level index `2`, etc. for every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right). for every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right). given the `root` of a binary tree, return `true` if the binary tree is even-odd, otherwise return `false`.","input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2] output: true explanation: the node values on each level are: level 0: [1] level 1: [10,4] level 2: [3,7,9] level 3: [12,8,6,2] since levels 0 and 2 are all odd and increasing, and levels 1 and 3 are all even and decreasing, the tree is even-odd. example 2: input: root = [5,4,2,3,3,7] output: false explanation: the node values on each level are: level 0: [5] level 1: [4,2] level 2: [3,3,7] node values in the level 2 must be in strictly increasing order, so the tree is not even-odd. example 3: input: root = [5,9,1,3,5,7] output: false explanation: node values in the level 1 should be even integers. example 4: input: root = [1] output: true example 5: input: root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17] output: true","the number of nodes in the tree is in the range `[1, 10^5]`. `1 <= node.val <= 10^6`",
1610,Maximum Number of Visible Points,"You are given an array `points`, an integer `angle`, and your `location`, where `location = [posx, posy]` and `points[i] = [xi, yi]` both denote integral coordinates on the X-Y plane.

Initially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, `posx` and `posy` cannot be changed. Your field of view in degrees is represented by `angle`, determining how wide you can see from any given view direction. Let `d` be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles `[d - angle/2, d + angle/2]`.

Your browser does not support the video tag or this video format.

You can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.

There can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.

Return the maximum number of points you can see.


Example 1:
Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]
Output: 3
Explanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight.


Example 2:
Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]
Output: 4
Explanation: All points can be made visible in your field of view, including the one at your location.


Example 3:
Input: points = [[1,0],[2,1]], angle = 13, location = [1,1]
Output: 1
Explanation: You can only see one of the two points, as shown above.


Constraints:
`1 <= points.length <= 105`
`points[i].length == 2`
`location.length == 2`
`0 <= angle < 360`
`0 <= posx, posy, xi, yi <= 100`",Hard,https://leetcode.com/problems/maximum-number-of-visible-points,"Google,Amazon","Two Pointers,Geometry",148,,"you are given an array `points`, an integer `angle`, and your `location`, where `location = [posx, posy]` and `points[i] = [xi, yi]` both denote integral coordinates on the x-y plane. initially, you are facing directly east from your position. you cannot move from your position, but you can rotate. in other words, `posx` and `posy` cannot be changed. your field of view in degrees is represented by `angle`, determining how wide you can see from any given view direction. let `d` be the amount in degrees that you rotate counterclockwise. then, your field of view is the inclusive range of angles `[d - angle/2, d + angle/2]`. your browser does not support the video tag or this video format. you can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view. there can be multiple points at one coordinate. there may be points at your location, and you can always see these points regardless of your rotation. points do not obstruct your vision to other points. return the maximum number of points you can see.","input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1] output: 3 explanation: the shaded region represents your field of view. all points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight. example 2: input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1] output: 4 explanation: all points can be made visible in your field of view, including the one at your location. example 3: input: points = [[1,0],[2,1]], angle = 13, location = [1,1] output: 1 explanation: you can only see one of the two points, as shown above.","`1 <= points.length <= 10^5` `points[i].length == 2` `location.length == 2` `0 <= angle < 360` `0 <= posx, posy, xi, yi <= 10^0`",
1611,Minimum One Bit Operations to Make Integers Zero,"Given an integer `n`, you must transform it into `0` using the following operations any number of times:
Change the rightmost (`0th`) bit in the binary representation of `n`.

Change the `ith` bit in the binary representation of `n` if the `(i-1)th` bit is set to `1` and the `(i-2)th` through `0th` bits are set to `0`.

Return the minimum number of operations to transform `n` into `0`.


Example 1:
Input: n = 0
Output: 0

Example 2:
Input: n = 3
Output: 2
Explanation: The binary representation of 3 is ""11"".

""11"" -> ""01"" with the 2nd operation since the 0th bit is 1.

""01"" -> ""00"" with the 1st operation.


Example 3:
Input: n = 6
Output: 4
Explanation: The binary representation of 6 is ""110"".

""110"" -> ""010"" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.

""010"" -> ""011"" with the 1st operation.

""011"" -> ""001"" with the 2nd operation since the 0th bit is 1.

""001"" -> ""000"" with the 1st operation.


Example 4:
Input: n = 9
Output: 14

Example 5:
Input: n = 333
Output: 393

Constraints:
`0 <= n <= 109`",Hard,https://leetcode.com/problems/minimum-one-bit-operations-to-make-integers-zero,Expedia,"Dynamic Programming,Bit Manipulation",144,,"given an integer `n`, you must transform it into `0` using the following operations any number of times: change the rightmost (`0th`) bit in the binary representation of `n`. change the `ith` bit in the binary representation of `n` if the `(i-1)th` bit is set to `1` and the `(i-2)th` through `0th` bits are set to `0`. return the minimum number of operations to transform `n` into `0`.","input: n = 0 output: 0 example 2: input: n = 3 output: 2 explanation: the binary representation of 3 is ""11"". ""11"" -> ""01"" with the 2nd operation since the 0th bit is 1. ""01"" -> ""00"" with the 1st operation. example 3: input: n = 6 output: 4 explanation: the binary representation of 6 is ""110"". ""110"" -> ""010"" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0. ""010"" -> ""011"" with the 1st operation. ""011"" -> ""001"" with the 2nd operation since the 0th bit is 1. ""001"" -> ""000"" with the 1st operation. example 4: input: n = 9 output: 14 example 5: input: n = 333 output: 393",`0 <= n <= 10^9`,
1612,Check If Two Expression Trees are Equivalent,"A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (variables), and internal nodes (nodes with two children) correspond to the operators. In this problem, we only consider the `'+'` operator (i.e. addition).

You are given the roots of two binary expression trees, `root1` and `root2`. Return `true` if the two binary expression trees are equivalent. Otherwise, return `false`.

Two binary expression trees are equivalent if they evaluate to the same value regardless of what the variables are set to.

Follow up: What will you change in your solution if the tree also supports the `'-'` operator (i.e. subtraction)?

Example 1:
Input: root1 = [x], root2 = [x]
Output: true

Example 2:
Input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,c]
Output: true
Explaination: `a + (b + c) == (b + c) + a`

Example 3:
Input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,d]
Output: false
Explaination: `a + (b + c) != (b + d) + a`

Constraints:
The number of nodes in both trees are equal, odd and, in the range `[1, 4999]`.

`Node.val` is `'+'` or a lower-case English letter.

It's guaranteed that the tree given is a valid binary expression tree.",Medium,https://leetcode.com/problems/check-if-two-expression-trees-are-equivalent,Google,"Hash Table,Tree",58,"[Build Binary Expression Tree From Infix Expression, /problems/build-binary-expression-tree-from-infix-expression/, Hard]","a binary expression tree is a kind of binary tree used to represent arithmetic expressions. each node of a binary expression tree has either zero or two children. leaf nodes (nodes with 0 children) correspond to operands (variables), and internal nodes (nodes with two children) correspond to the operators. in this problem, we only consider the `'+'` operator (i.e. addition). you are given the roots of two binary expression trees, `root1` and `root2`. return `true` if the two binary expression trees are equivalent. otherwise, return `false`. two binary expression trees are equivalent if they evaluate to the same value regardless of what the variables are set to.","input: root1 = [x], root2 = [x] output: true example 2: input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,c] output: true explaination: `a + (b + c) == (b + c) + a` example 3: input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,d] output: false explaination: `a + (b + c) != (b + d) + a`","the number of nodes in both trees are equal, odd and, in the range `[1, 4999]`. `node.val` is `'+'` or a lower-case english letter. it's guaranteed that the tree given is a valid binary expression tree.","what will you change in your solution if the tree also supports the `'-'` operator (i.e. subtraction)? example 1: input: root1 = [x], root2 = [x] output: true example 2: input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,c] output: true explaination: `a + (b + c) == (b + c) + a` example 3: input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,d] output: false explaination: `a + (b + c) != (b + d) + a` constraints: the number of nodes in both trees are equal, odd and, in the range `[1, 4999]`. `node.val` is `'+'` or a lower-case english letter. it's guaranteed that the tree given is a valid binary expression tree."
1613,Find the Missing IDs,SQL Schema,Medium,https://leetcode.com/problems/find-the-missing-ids,Amazon,,65,,sql schema,,,
1614,Maximum Nesting Depth of the Parentheses,"A string is a valid parentheses string (denoted VPS) if it meets one of the following:
It is an empty string `""""`, or a single character not equal to `""(""` or `"")""`,
It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or
It can be written as `(A)`, where `A` is a VPS.

We can similarly define the nesting depth `depth(S)` of any VPS `S` as follows:
`depth("""") = 0`
`depth(C) = 0`, where `C` is a string with a single character not equal to `""(""` or `"")""`.

`depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's.

`depth(""("" + A + "")"") = 1 + depth(A)`, where `A` is a VPS.

For example, `""""`, `""()()""`, and `""()(()())""` are VPS's (with nesting depths 0, 1, and 2), and `"")(""` and `""(()""` are not VPS's.

Given a VPS represented as string `s`, return the nesting depth of `s`.


Example 1:
Input: s = ""(1+(2*3)+((8)/4))+1""
Output: 3
Explanation: Digit 8 is inside of 3 nested parentheses in the string.


Example 2:
Input: s = ""(1)+((2))+(((3)))""
Output: 3

Example 3:
Input: s = ""1+(2*3)/(2-1)""
Output: 1

Example 4:
Input: s = ""1""
Output: 0

Constraints:
`1 <= s.length <= 100`
`s` consists of digits `0-9` and characters `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.

It is guaranteed that parentheses expression `s` is a VPS.",Easy,https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses,"Bloomberg,Facebook",String,298,"[Maximum Nesting Depth of Two Valid Parentheses Strings, /problems/maximum-nesting-depth-of-two-valid-parentheses-strings/, Medium]","a string is a valid parentheses string (denoted vps) if it meets one of the following: it is an empty string `""""`, or a single character not equal to `""(""` or `"")""`, it can be written as `ab` (`a` concatenated with `b`), where `a` and `b` are vps's, or it can be written as `(a)`, where `a` is a vps. we can similarly define the nesting depth `depth(s)` of any vps `s` as follows: `depth("""") = 0` `depth(c) = 0`, where `c` is a string with a single character not equal to `""(""` or `"")""`. `depth(a + b) = max(depth(a), depth(b))`, where `a` and `b` are vps's. `depth(""("" + a + "")"") = 1 + depth(a)`, where `a` is a vps. for example, `""""`, `""()()""`, and `""()(()())""` are vps's (with nesting depths 0, 1, and 2), and `"")(""` and `""(()""` are not vps's. given a vps represented as string `s`, return the nesting depth of `s`.","input: s = ""(1+(2*3)+((8)/4))+1"" output: 3 explanation: digit 8 is inside of 3 nested parentheses in the string. example 2: input: s = ""(1)+((2))+(((3)))"" output: 3 example 3: input: s = ""1+(2*3)/(2-1)"" output: 1 example 4: input: s = ""1"" output: 0","`1 <= s.length <= 10^0` `s` consists of digits `0-9` and characters `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`. it is guaranteed that parentheses expression `s` is a vps.",
1615,Maximal Network Rank,"There is an infrastructure of `n` cities with some number of `roads` connecting these cities. Each `roads[i] = [ai, bi]` indicates that there is a bidirectional road between cities `ai` and `bi`.

The network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.

The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.

Given the integer `n` and the array `roads`, return the maximal network rank of the entire infrastructure.


Example 1:
Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]
Output: 4
Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.


Example 2:
Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]
Output: 5
Explanation: There are 5 roads that are connected to cities 1 or 2.


Example 3:
Input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]
Output: 5
Explanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.


Constraints:
`2 <= n <= 100`
`0 <= roads.length <= n * (n - 1) / 2`
`roads[i].length == 2`
`0 <= ai, bi <= n-1`
`ai != bi`
Each pair of cities has at most one road connecting them.",Medium,https://leetcode.com/problems/maximal-network-rank,"Microsoft,Amazon",Graph,218,,"there is an infrastructure of `n` cities with some number of `roads` connecting these cities. each `roads[i] = [ai, bi]` indicates that there is a bidirectional road between cities `ai` and `bi`. the network rank of two different cities is defined as the total number of directly connected roads to either city. if a road is directly connected to both cities, it is only counted once. the maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities. given the integer `n` and the array `roads`, return the maximal network rank of the entire infrastructure.","input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]] output: 4 explanation: the network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. the road between 0 and 1 is only counted once. example 2: input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]] output: 5 explanation: there are 5 roads that are connected to cities 1 or 2. example 3: input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]] output: 5 explanation: the network rank of 2 and 5 is 5. notice that all the cities do not have to be connected.","`2 <= n <= 10^0` `0 <= roads.length <= n * (n - 1) / 2` `roads[i].length == 2` `0 <= ai, bi <= n-1` `ai != bi` each pair of cities has at most one road connecting them.",
1616,Split Two Strings to Make Palindrome,"You are given two strings `a` and `b` of the same length. Choose an index and split both strings at the same index, splitting `a` into two strings: `aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into two strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. Check if `aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome.

When you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or `sprefix` is allowed to be empty. For example, if `s = ""abc""`, then `"""" + ""abc""`, `""a"" + ""bc""`, `""ab"" + ""c""` , and `""abc"" + """"` are valid splits.

Return `true` if it is possible to form a palindrome string, otherwise return `false`.

Notice that `x + y` denotes the concatenation of strings `x` and `y`.


Example 1:
Input: a = ""x"", b = ""y""
Output: true
Explaination: If either a or b are palindromes the answer is true since you can split in the following way:
aprefix = """", asuffix = ""x""
bprefix = """", bsuffix = ""y""
Then, aprefix + bsuffix = """" + ""y"" = ""y"", which is a palindrome.


Example 2:
Input: a = ""abdef"", b = ""fecab""
Output: true

Example 3:
Input: a = ""ulacfd"", b = ""jizalu""
Output: true
Explaination: Split them at index 3:
aprefix = ""ula"", asuffix = ""cfd""
bprefix = ""jiz"", bsuffix = ""alu""
Then, aprefix + bsuffix = ""ula"" + ""alu"" = ""ulaalu"", which is a palindrome.


Example 4:
Input: a = ""xbdef"", b = ""xecab""
Output: false

Constraints:
`1 <= a.length, b.length <= 105`
`a.length == b.length`
`a` and `b` consist of lowercase English letters",Medium,https://leetcode.com/problems/split-two-strings-to-make-palindrome,Google,"Two Pointers,String,Greedy",295,,"you are given two strings `a` and `b` of the same length. choose an index and split both strings at the same index, splitting `a` into two strings: `aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into two strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. check if `aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome. when you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or `sprefix` is allowed to be empty. for example, if `s = ""abc""`, then `"""" + ""abc""`, `""a"" + ""bc""`, `""ab"" + ""c""` , and `""abc"" + """"` are valid splits. return `true` if it is possible to form a palindrome string, otherwise return `false`. notice that `x + y` denotes the concatenation of strings `x` and `y`.","input: a = ""x"", b = ""y"" output: true explaination: if either a or b are palindromes the answer is true since you can split in the following way: aprefix = """", asuffix = ""x"" bprefix = """", bsuffix = ""y"" then, aprefix + bsuffix = """" + ""y"" = ""y"", which is a palindrome. example 2: input: a = ""abdef"", b = ""fecab"" output: true example 3: input: a = ""ulacfd"", b = ""jizalu"" output: true explaination: split them at index 3: aprefix = ""ula"", asuffix = ""cfd"" bprefix = ""jiz"", bsuffix = ""alu"" then, aprefix + bsuffix = ""ula"" + ""alu"" = ""ulaalu"", which is a palindrome. example 4: input: a = ""xbdef"", b = ""xecab"" output: false","`1 <= a.length, b.length <= 10^5` `a.length == b.length` `a` and `b` consist of lowercase english letters",
1617,Count Subtrees With Max Distance Between Cities,"There are `n` cities numbered from `1` to `n`. You are given an array `edges` of size `n-1`, where `edges[i] = [ui, vi]` represents a bidirectional edge between cities `ui` and `vi`. There exists a unique path between each pair of cities. In other words, the cities form a tree.

A subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.

For each `d` from `1` to `n-1`, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to `d`.

Return an array of size `n-1` where the `dth` element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to `d`.

Notice that the distance between the two cities is the number of edges in the path between them.


Example 1:
Input: n = 4, edges = [[1,2],[2,3],[2,4]]
Output: [3,4,0]
Explanation:
The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.

The subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.

No subtree has two nodes where the max distance between them is 3.


Example 2:
Input: n = 2, edges = [[1,2]]
Output: [1]

Example 3:
Input: n = 3, edges = [[1,2],[2,3]]
Output: [2,1]

Constraints:
`2 <= n <= 15`
`edges.length == n-1`
`edges[i].length == 2`
`1 <= ui, vi <= n`
All pairs `(ui, vi)` are distinct.",Hard,https://leetcode.com/problems/count-subtrees-with-max-distance-between-cities,Codenation,Backtracking,156,"[Tree Diameter, /problems/tree-diameter/, Medium]","there are `n` cities numbered from `1` to `n`. you are given an array `edges` of size `n-1`, where `edges[i] = [ui, vi]` represents a bidirectional edge between cities `ui` and `vi`. there exists a unique path between each pair of cities. in other words, the cities form a tree. a subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. two subtrees are different if there is a city in one subtree that is not present in the other. for each `d` from `1` to `n-1`, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to `d`. return an array of size `n-1` where the `dth` element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to `d`. notice that the distance between the two cities is the number of edges in the path between them.","input: n = 4, edges = [[1,2],[2,3],[2,4]] output: [3,4,0] explanation: the subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1. the subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2. no subtree has two nodes where the max distance between them is 3. example 2: input: n = 2, edges = [[1,2]] output: [1] example 3: input: n = 3, edges = [[1,2],[2,3]] output: [2,1]","`2 <= n <= 15` `edges.length == n-1` `edges[i].length == 2` `1 <= ui, vi <= n` all pairs `(ui, vi)` are distinct.",
1618,Maximum Font to Fit a Sentence in a Screen,"You are given a string `text`. We want to display `text` on a screen of width `w` and height `h`. You can choose any font size from array `fonts`, which contains the available font sizes in ascending order.

You can use the `FontInfo` interface to get the width and height of any character at any available font size.

The `FontInfo` interface is defined as such:
interface FontInfo {
  // Returns the width of character ch on the screen using font size fontSize.

  // O(1) per call
  public int getWidth(int fontSize, char ch);
  // Returns the height of any character on the screen using font size fontSize.

  // O(1) per call
  public int getHeight(int fontSize);
}
The calculated width of `text` for some `fontSize` is the sum of every `getWidth(fontSize, text[i])` call for each `0 <= i < text.length` (0-indexed). The calculated height of `text` for some `fontSize` is `getHeight(fontSize)`. Note that `text` is displayed on a single line.

It is guaranteed that `FontInfo` will return the same value if you call `getHeight` or `getWidth` with the same parameters.

It is also guaranteed that for any font size `fontSize` and any character `ch`:
`getHeight(fontSize) <= getHeight(fontSize+1)`
`getWidth(fontSize, ch) <= getWidth(fontSize+1, ch)`
Return the maximum font size you can use to display `text` on the screen. If `text` cannot fit on the display with any font size, return `-1`.


Example 1:
Input: text = ""helloworld"", w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36]
Output: 6

Example 2:
Input: text = ""leetcode"", w = 1000, h = 50, fonts = [1,2,4]
Output: 4

Example 3:
Input: text = ""easyquestion"", w = 100, h = 100, fonts = [10,15,20,25]
Output: -1

Constraints:
`1 <= text.length <= 50000`
`text` contains only lowercase English letters.

`1 <= w <= 107`
`1 <= h <= 104`
`1 <= fonts.length <= 105`
`1 <= fonts[i] <= 105`
`fonts` is sorted in ascending order and does not contain duplicates.",Medium,https://leetcode.com/problems/maximum-font-to-fit-a-sentence-in-a-screen,Google,"String,Binary Search",44,,"you are given a string `text`. we want to display `text` on a screen of width `w` and height `h`. you can choose any font size from array `fonts`, which contains the available font sizes in ascending order. you can use the `fontinfo` interface to get the width and height of any character at any available font size. the `fontinfo` interface is defined as such: interface fontinfo { // returns the width of character ch on the screen using font size fontsize. // o(1) per call public int getwidth(int fontsize, char ch); // returns the height of any character on the screen using font size fontsize. // o(1) per call public int getheight(int fontsize); } the calculated width of `text` for some `fontsize` is the sum of every `getwidth(fontsize, text[i])` call for each `0 <= i < text.length` (0-indexed). the calculated height of `text` for some `fontsize` is `getheight(fontsize)`. note that `text` is displayed on a single line. it is guaranteed that `fontinfo` will return the same value if you call `getheight` or `getwidth` with the same parameters. it is also guaranteed that for any font size `fontsize` and any character `ch`: `getheight(fontsize) <= getheight(fontsize+1)` `getwidth(fontsize, ch) <= getwidth(fontsize+1, ch)` return the maximum font size you can use to display `text` on the screen. if `text` cannot fit on the display with any font size, return `-1`.","input: text = ""helloworld"", w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36] output: 6 example 2: input: text = ""leetcode"", w = 1000, h = 50, fonts = [1,2,4] output: 4 example 3: input: text = ""easyquestion"", w = 100, h = 100, fonts = [10,15,20,25] output: -1",`1 <= text.length <= 50000` `text` contains only lowercase english letters. `1 <= w <= 10^7` `1 <= h <= 10^4` `1 <= fonts.length <= 10^5` `1 <= fonts[i] <= 10^5` `fonts` is sorted in ascending order and does not contain duplicates.,
1619,Mean of Array After Removing Some Elements,"Given an integer array `arr`, return the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements.

Answers within `10-5` of the actual answer will be considered accepted.


Example 1:
Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
Output: 2.00000
Explanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.


Example 2:
Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
Output: 4.00000

Example 3:
Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
Output: 4.77778

Example 4:
Input: arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]
Output: 5.27778

Example 5:
Input: arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]
Output: 5.29167

Constraints:
`20 <= arr.length <= 1000`
`arr.length` is a multiple of `20`.

`0 <= arr[i] <= 105`",Easy,https://leetcode.com/problems/mean-of-array-after-removing-some-elements,Google,Array,128,,"given an integer array `arr`, return the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements. answers within `10-5` of the actual answer will be considered accepted.","input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3] output: 2.00000 explanation: after erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2. example 2: input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0] output: 4.00000 example 3: input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4] output: 4.77778 example 4: input: arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3] output: 5.27778 example 5: input: arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1] output: 5.29167",`20 <= arr.length <= 1000` `arr.length` is a multiple of `20`. `0 <= arr[i] <= 10^5`,
1620,Coordinate With Maximum Network Quality,"You are given an array of network towers `towers` and an integer `radius`, where `towers[i] = [xi, yi, qi]` denotes the `ith` network tower with location `(xi, yi)` and quality factor `qi`. All the coordinates are integral coordinates on the X-Y plane, and the distance between two coordinates is the Euclidean distance.

The integer `radius` denotes the maximum distance in which the tower is reachable. The tower is reachable if the distance is less than or equal to `radius`. Outside that distance, the signal becomes garbled, and the tower is not reachable.

The signal quality of the `ith` tower at a coordinate `(x, y)` is calculated with the formula `⌊qi / (1 + d)⌋`, where `d` is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.

Return the integral coordinate where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum coordinate.

Note:
A coordinate `(x1, y1)` is lexicographically smaller than `(x2, y2)` if either `x1 < x2` or `x1 == x2` and `y1 < y2`.

`⌊val⌋` is the greatest integer less than or equal to `val` (the floor function).


Example 1:
Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2
Output: [2,1]
Explanation: 
At coordinate (2, 1) the total quality is 13
- Quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7
- Quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2
- Quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4
No other coordinate has higher quality.


Example 2:
Input: towers = [[23,11,21]], radius = 9
Output: [23,11]

Example 3:
Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2
Output: [1,2]

Example 4:
Input: towers = [[2,1,9],[0,1,9]], radius = 2
Output: [0,1]
Explanation: Both (0, 1) and (2, 1) are optimal in terms of quality but (0, 1) is lexicograpically minimal.


Constraints:
`1 <= towers.length <= 50`
`towers[i].length == 3`
`0 <= xi, yi, qi <= 50`
`1 <= radius <= 50`",Medium,https://leetcode.com/problems/coordinate-with-maximum-network-quality,peak6,Greedy,43,,"you are given an array of network towers `towers` and an integer `radius`, where `towers[i] = [xi, yi, qi]` denotes the `ith` network tower with location `(xi, yi)` and quality factor `qi`. all the coordinates are integral coordinates on the x-y plane, and the distance between two coordinates is the euclidean distance. the integer `radius` denotes the maximum distance in which the tower is reachable. the tower is reachable if the distance is less than or equal to `radius`. outside that distance, the signal becomes garbled, and the tower is not reachable. the signal quality of the `ith` tower at a coordinate `(x, y)` is calculated with the formula `⌊qi / (1 + d)⌋`, where `d` is the distance between the tower and the coordinate. the network quality at a coordinate is the sum of the signal qualities from all the reachable towers. return the integral coordinate where the network quality is maximum. if there are multiple coordinates with the same network quality, return the lexicographically minimum coordinate. note: a coordinate `(x1, y1)` is lexicographically smaller than `(x2, y2)` if either `x1 < x2` or `x1 == x2` and `y1 < y2`. `⌊val⌋` is the greatest integer less than or equal to `val` (the floor function).","input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2 output: [2,1] explanation: at coordinate (2, 1) the total quality is 13 - quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7 - quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2 - quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4 no other coordinate has higher quality. example 2: input: towers = [[23,11,21]], radius = 9 output: [23,11] example 3: input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2 output: [1,2] example 4: input: towers = [[2,1,9],[0,1,9]], radius = 2 output: [0,1] explanation: both (0, 1) and (2, 1) are optimal in terms of quality but (0, 1) is lexicograpically minimal.","`1 <= towers.length <= 50` `towers[i].length == 3` `0 <= xi, yi, qi <= 50` `1 <= radius <= 50`",
1621,Number of Sets of K Non-Overlapping Line Segments,"Given `n` points on a 1-D plane, where the `ith` point (from `0` to `n-1`) is at `x = i`, find the number of ways we can draw exactly `k` non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The `k` line segments do not have to cover all `n` points, and they are allowed to share endpoints.

Return the number of ways we can draw `k` non-overlapping line segments. Since this number can be huge, return it modulo `109 + 7`.


Example 1:
Input: n = 4, k = 2
Output: 5
Explanation: 
The two line segments are shown in red and blue.

The image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.


Example 2:
Input: n = 3, k = 1
Output: 3
Explanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.


Example 3:
Input: n = 30, k = 7
Output: 796297179
Explanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179.


Example 4:
Input: n = 5, k = 3
Output: 7

Example 5:
Input: n = 3, k = 2
Output: 1

Constraints:
`2 <= n <= 1000`
`1 <= k <= n-1`",Medium,https://leetcode.com/problems/number-of-sets-of-k-non-overlapping-line-segments,Amazon,Dynamic Programming,192,,"given `n` points on a 1-d plane, where the `ith` point (from `0` to `n-1`) is at `x = i`, find the number of ways we can draw exactly `k` non-overlapping line segments such that each segment covers two or more points. the endpoints of each segment must have integral coordinates. the `k` line segments do not have to cover all `n` points, and they are allowed to share endpoints. return the number of ways we can draw `k` non-overlapping line segments. since this number can be huge, return it modulo `109 + 7`.","input: n = 4, k = 2 output: 5 explanation: the two line segments are shown in red and blue. the image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}. example 2: input: n = 3, k = 1 output: 3 explanation: the 3 ways are {(0,1)}, {(0,2)}, {(1,2)}. example 3: input: n = 30, k = 7 output: 796297179 explanation: the total number of possible ways to draw 7 line segments is 3796297200. taking this number modulo 109 + 7 gives us 796297179. example 4: input: n = 5, k = 3 output: 7 example 5: input: n = 3, k = 2 output: 1",`2 <= n <= 1000` `1 <= k <= n-1`,
1622,Fancy Sequence,"Write an API that generates fancy sequences using the `append`, `addAll`, and `multAll` operations.

Implement the `Fancy` class:
`Fancy()` Initializes the object with an empty sequence.

`void append(val)` Appends an integer `val` to the end of the sequence.

`void addAll(inc)` Increments all existing values in the sequence by an integer `inc`.

`void multAll(m)` Multiplies all existing values in the sequence by an integer `m`.

`int getIndex(idx)` Gets the current value at index `idx` (0-indexed) of the sequence modulo `109 + 7`. If the index is greater or equal than the length of the sequence, return `-1`.


Example 1:
Input
[""Fancy"", ""append"", ""addAll"", ""append"", ""multAll"", ""getIndex"", ""addAll"", ""append"", ""multAll"", ""getIndex"", ""getIndex"", ""getIndex""]
[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]
Output
[null, null, null, null, null, 10, null, null, null, 26, 34, 20]
Explanation
Fancy fancy = new Fancy();
fancy.append(2);   // fancy sequence: [2]
fancy.addAll(3);   // fancy sequence: [2+3] -> [5]
fancy.append(7);   // fancy sequence: [5, 7]
fancy.multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14]
fancy.getIndex(0); // return 10
fancy.addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17]
fancy.append(10);  // fancy sequence: [13, 17, 10]
fancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]
fancy.getIndex(0); // return 26
fancy.getIndex(1); // return 34
fancy.getIndex(2); // return 20

Constraints:
`1 <= val, inc, m <= 100`
`0 <= idx <= 105`
At most `105` calls total will be made to `append`, `addAll`, `multAll`, and `getIndex`.",Hard,https://leetcode.com/problems/fancy-sequence,Google,"Math,Design",166,,"write an api that generates fancy sequences using the `append`, `addall`, and `multall` operations. implement the `fancy` class: `fancy()` initializes the object with an empty sequence. `void append(val)` appends an integer `val` to the end of the sequence. `void addall(inc)` increments all existing values in the sequence by an integer `inc`. `void multall(m)` multiplies all existing values in the sequence by an integer `m`. `int getindex(idx)` gets the current value at index `idx` (0-indexed) of the sequence modulo `109 + 7`. if the index is greater or equal than the length of the sequence, return `-1`.","input [""fancy"", ""append"", ""addall"", ""append"", ""multall"", ""getindex"", ""addall"", ""append"", ""multall"", ""getindex"", ""getindex"", ""getindex""] [[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]] output [null, null, null, null, null, 10, null, null, null, 26, 34, 20] explanation fancy fancy = new fancy(); fancy.append(2); // fancy sequence: [2] fancy.addall(3); // fancy sequence: [2+3] -> [5] fancy.append(7); // fancy sequence: [5, 7] fancy.multall(2); // fancy sequence: [5*2, 7*2] -> [10, 14] fancy.getindex(0); // return 10 fancy.addall(3); // fancy sequence: [10+3, 14+3] -> [13, 17] fancy.append(10); // fancy sequence: [13, 17, 10] fancy.multall(2); // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20] fancy.getindex(0); // return 26 fancy.getindex(1); // return 34 fancy.getindex(2); // return 20","`1 <= val, inc, m <= 10^0` `0 <= idx <= 10^5` at most `10^5` calls total will be made to `append`, `addall`, `multall`, and `getindex`.",
1623,All Valid Triplets That Can Represent a Country,SQL Schema,Easy,https://leetcode.com/problems/all-valid-triplets-that-can-represent-a-country,Amazon,,28,,sql schema,,,
1624,Largest Substring Between Two Equal Characters,"Given a string `s`, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return `-1`.

A substring is a contiguous sequence of characters within a string.


Example 1:
Input: s = ""aa""
Output: 0
Explanation: The optimal substring here is an empty substring between the two `'a's`.


Example 2:
Input: s = ""abca""
Output: 2
Explanation: The optimal substring here is ""bc"".


Example 3:
Input: s = ""cbzxy""
Output: -1
Explanation: There are no characters that appear twice in s.


Example 4:
Input: s = ""cabbac""
Output: 4
Explanation: The optimal substring here is ""abba"". Other non-optimal substrings include ""bb"" and """".


Constraints:
`1 <= s.length <= 300`
`s` contains only lowercase English letters.",Easy,https://leetcode.com/problems/largest-substring-between-two-equal-characters,,,201,,"given a string `s`, return the length of the longest substring between two equal characters, excluding the two characters. if there is no such substring return `-1`. a substring is a contiguous sequence of characters within a string.","input: s = ""aa"" output: 0 explanation: the optimal substring here is an empty substring between the two `'a's`. example 2: input: s = ""abca"" output: 2 explanation: the optimal substring here is ""bc"". example 3: input: s = ""cbzxy"" output: -1 explanation: there are no characters that appear twice in s. example 4: input: s = ""cabbac"" output: 4 explanation: the optimal substring here is ""abba"". other non-optimal substrings include ""bb"" and """".",`1 <= s.length <= 300` `s` contains only lowercase english letters.,
1625,Lexicographically Smallest String After Applying Operations,"You are given a string `s` of even length consisting of digits from `0` to `9`, and two integers `a` and `b`.

You can apply either of the following two operations any number of times and in any order on `s`:
Add `a` to all odd indices of `s` (0-indexed). Digits post `9` are cycled back to `0`. For example, if `s = ""3456""` and `a = 5`, `s` becomes `""3951""`.

Rotate `s` to the right by `b` positions. For example, if `s = ""3456""` and `b = 1`, `s` becomes `""6345""`.

Return the lexicographically smallest string you can obtain by applying the above operations any number of times on `s`.

A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `""0158""` is lexicographically smaller than `""0190""` because the first position they differ is at the third letter, and `'5'` comes before `'9'`.


Example 1:
Input: s = ""5525"", a = 9, b = 2
Output: ""2050""
Explanation: We can apply the following operations:
Start:  ""5525""
Rotate: ""2555""
Add:    ""2454""
Add:    ""2353""
Rotate: ""5323""
Add:    ""5222""
​​​​​​​Add:    ""5121""
​​​​​​​Rotate: ""2151""
​​​​​​​Add:    ""2050""​​​​​​​​​​​​
There is no way to obtain a string that is lexicographically smaller then ""2050"".


Example 2:
Input: s = ""74"", a = 5, b = 1
Output: ""24""
Explanation: We can apply the following operations:
Start:  ""74""
Rotate: ""47""
​​​​​​​Add:    ""42""
​​​​​​​Rotate: ""24""​​​​​​​​​​​​
There is no way to obtain a string that is lexicographically smaller then ""24"".


Example 3:
Input: s = ""0011"", a = 4, b = 2
Output: ""0011""
Explanation: There are no sequence of operations that will give us a lexicographically smaller string than ""0011"".


Example 4:
Input: s = ""43987654"", a = 7, b = 3
Output: ""00553311""

Constraints:
`2 <= s.length <= 100`
`s.length` is even.

`s` consists of digits from `0` to `9` only.

`1 <= a <= 9`
`1 <= b <= s.length - 1`",Medium,https://leetcode.com/problems/lexicographically-smallest-string-after-applying-operations,"JP Morgan,JPMorgan","Depth-first Search,Breadth-first Search",139,,"you are given a string `s` of even length consisting of digits from `0` to `9`, and two integers `a` and `b`. you can apply either of the following two operations any number of times and in any order on `s`: add `a` to all odd indices of `s` (0-indexed). digits post `9` are cycled back to `0`. for example, if `s = ""3456""` and `a = 5`, `s` becomes `""3951""`. rotate `s` to the right by `b` positions. for example, if `s = ""3456""` and `b = 1`, `s` becomes `""6345""`. return the lexicographically smallest string you can obtain by applying the above operations any number of times on `s`. a string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. for example, `""0158""` is lexicographically smaller than `""0190""` because the first position they differ is at the third letter, and `'5'` comes before `'9'`.","input: s = ""5525"", a = 9, b = 2 output: ""2050"" explanation: we can apply the following operations: start: ""5525"" rotate: ""2555"" add: ""2454"" add: ""2353"" rotate: ""5323"" add: ""5222"" ​​​​​​​add: ""5121"" ​​​​​​​rotate: ""2151"" ​​​​​​​add: ""2050""​​​​​​​​​​​​ there is no way to obtain a string that is lexicographically smaller then ""2050"". example 2: input: s = ""74"", a = 5, b = 1 output: ""24"" explanation: we can apply the following operations: start: ""74"" rotate: ""47"" ​​​​​​​add: ""42"" ​​​​​​​rotate: ""24""​​​​​​​​​​​​ there is no way to obtain a string that is lexicographically smaller then ""24"". example 3: input: s = ""0011"", a = 4, b = 2 output: ""0011"" explanation: there are no sequence of operations that will give us a lexicographically smaller string than ""0011"". example 4: input: s = ""43987654"", a = 7, b = 3 output: ""00553311""",`2 <= s.length <= 10^0` `s.length` is even. `s` consists of digits from `0` to `9` only. `1 <= a <= 9` `1 <= b <= s.length - 1`,
1626,Best Team With No Conflicts,"You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.

However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.

Given two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represents the score and age of the `ith` player, respectively, return the highest overall score of all possible basketball teams.


Example 1:
Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]
Output: 34
Explanation: You can choose all the players.


Example 2:
Input: scores = [4,5,6,5], ages = [2,1,2,1]
Output: 16
Explanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.


Example 3:
Input: scores = [1,2,3,5], ages = [8,9,10,1]
Output: 6
Explanation: It is best to choose the first 3 players. 

Constraints:
`1 <= scores.length, ages.length <= 1000`
`scores.length == ages.length`
`1 <= scores[i] <= 106`
`1 <= ages[i] <= 1000`",Medium,https://leetcode.com/problems/best-team-with-no-conflicts,Uber,Dynamic Programming,411,,"you are the manager of a basketball team. for the upcoming tournament, you want to choose the team with the highest overall score. the score of the team is the sum of scores of all the players in the team. however, the basketball team is not allowed to have conflicts. a conflict exists if a younger player has a strictly higher score than an older player. a conflict does not occur between players of the same age. given two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represents the score and age of the `ith` player, respectively, return the highest overall score of all possible basketball teams.","input: scores = [1,3,5,10,15], ages = [1,2,3,4,5] output: 34 explanation: you can choose all the players. example 2: input: scores = [4,5,6,5], ages = [2,1,2,1] output: 16 explanation: it is best to choose the last 3 players. notice that you are allowed to choose multiple people of the same age. example 3: input: scores = [1,2,3,5], ages = [8,9,10,1] output: 6 explanation: it is best to choose the first 3 players.","`1 <= scores.length, ages.length <= 1000` `scores.length == ages.length` `1 <= scores[i] <= 10^6` `1 <= ages[i] <= 1000`",
1627,Graph Connectivity With Threshold,"We have `n` cities labeled from `1` to `n`. Two different cities with labels `x` and `y` are directly connected by a bidirectional road if and only if `x` and `y` share a common divisor strictly greater than some `threshold`. More formally, cities with labels `x` and `y` have a road between them if there exists an integer `z` such that all of the following are true:
`x % z == 0`,
`y % z == 0`, and
`z > threshold`.

Given the two integers, `n` and `threshold`, and an array of `queries`, you must determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are connected directly or indirectly. (i.e. there is some path between them).

Return an array `answer`, where `answer.length == queries.length` and `answer[i]` is `true` if for the `ith` query, there is a path between `ai` and `bi`, or `answer[i]` is `false` if there is no path.


Example 1:
Input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]
Output: [false,false,true]
Explanation: The divisors for each number:
1:   1
2:   1, 2
3:   1, 3
4:   1, 2, 4
5:   1, 5
6:   1, 2, 3, 6
Using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the
only ones directly connected. The result of each query:
[1,4]   1 is not connected to 4
[2,5]   2 is not connected to 5
[3,6]   3 is connected to 6 through path 3--6

Example 2:
Input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]
Output: [true,true,true,true,true]
Explanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,
all divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.


Example 3:
Input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]
Output: [false,false,false,false,false]
Explanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.

Please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].


Constraints:
`2 <= n <= 104`
`0 <= threshold <= n`
`1 <= queries.length <= 105`
`queries[i].length == 2`
`1 <= ai, bi <= cities`
`ai != bi`",Hard,https://leetcode.com/problems/graph-connectivity-with-threshold,Trexquant,"Math,Union Find",163,,"we have `n` cities labeled from `1` to `n`. two different cities with labels `x` and `y` are directly connected by a bidirectional road if and only if `x` and `y` share a common divisor strictly greater than some `threshold`. more formally, cities with labels `x` and `y` have a road between them if there exists an integer `z` such that all of the following are true: `x % z == 0`, `y % z == 0`, and `z > threshold`. given the two integers, `n` and `threshold`, and an array of `queries`, you must determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are connected directly or indirectly. (i.e. there is some path between them). return an array `answer`, where `answer.length == queries.length` and `answer[i]` is `true` if for the `ith` query, there is a path between `ai` and `bi`, or `answer[i]` is `false` if there is no path.","input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]] output: [false,false,true] explanation: the divisors for each number: 1: 1 2: 1, 2 3: 1, 3 4: 1, 2, 4 5: 1, 5 6: 1, 2, 3, 6 using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the only ones directly connected. the result of each query: [1,4] 1 is not connected to 4 [2,5] 2 is not connected to 5 [3,6] 3 is connected to 6 through path 3--6 example 2: input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]] output: [true,true,true,true,true] explanation: the divisors for each number are the same as the previous example. however, since the threshold is 0, all divisors can be used. since all numbers share 1 as a divisor, all cities are connected. example 3: input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]] output: [false,false,false,false,false] explanation: only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected. please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].","`2 <= n <= 10^4` `0 <= threshold <= n` `1 <= queries.length <= 10^5` `queries[i].length == 2` `1 <= ai, bi <= cities` `ai != bi`",
1628,Design an Expression Tree With Evaluate Function,"Given the `postfix` tokens of an arithmetic expression, build and return the binary expression tree that represents this expression.

Postfix notation is a notation for writing arithmetic expressions in which the operands (numbers) appear before their operators. For example, the postfix tokens of the expression `4*(5-(7+2))` are represented in the array `postfix = [""4"",""5"",""7"",""2"",""+"",""-"",""*""]`.

The class `Node` is an interface you should use to implement the binary expression tree. The returned tree will be tested using the `evaluate` function, which is supposed to evaluate the tree's value. You should not remove the `Node` class; however, you can modify it as you wish, and you can define other classes to implement it if needed.

A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with two children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).

It's guaranteed that no subtree will yield a value that exceeds `109` in absolute value, and all the operations are valid (i.e., no division by zero).

Follow up: Could you design the expression tree such that it is more modular? For example, is your design able to support additional operators without making changes to your existing `evaluate` implementation?

Example 1:
Input: s = [""3"",""4"",""+"",""2"",""*"",""7"",""/""]
Output: 2
Explanation: this expression evaluates to the above binary tree with expression (`(3+4)*2)/7) = 14/7 = 2.`

Example 2:
Input: s = [""4"",""5"",""7"",""2"",""+"",""-"",""*""]
Output: -16
Explanation: this expression evaluates to the above binary tree with expression 4*(5-`(2+7)) = 4*(-4) = -16.`

Example 3:
Input: s = [""4"",""2"",""+"",""3"",""5"",""1"",""-"",""*"",""+""]
Output: 18

Example 4:
Input: s = [""100"",""200"",""+"",""2"",""/"",""5"",""*"",""7"",""+""]
Output: 757

Constraints:
`1 <= s.length < 100`
`s.length` is odd.

`s` consists of numbers and the characters `'+'`, `'-'`, `'*'`, and `'/'`.

If `s[i]` is a number, its integer representation is no more than `105`.

It is guaranteed that `s` is a valid expression.

The absolute value of the result and intermediate values will not exceed `109`.

It is guaranteed that no expression will include division by zero.",Medium,https://leetcode.com/problems/design-an-expression-tree-with-evaluate-function,Amazon,"Tree,Design,OOP",95,,"given the `postfix` tokens of an arithmetic expression, build and return the binary expression tree that represents this expression. postfix notation is a notation for writing arithmetic expressions in which the operands (numbers) appear before their operators. for example, the postfix tokens of the expression `4*(5-(7+2))` are represented in the array `postfix = [""4"",""5"",""7"",""2"",""+"",""-"",""*""]`. the class `node` is an interface you should use to implement the binary expression tree. the returned tree will be tested using the `evaluate` function, which is supposed to evaluate the tree's value. you should not remove the `node` class; however, you can modify it as you wish, and you can define other classes to implement it if needed. a binary expression tree is a kind of binary tree used to represent arithmetic expressions. each node of a binary expression tree has either zero or two children. leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with two children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division). it's guaranteed that no subtree will yield a value that exceeds `109` in absolute value, and all the operations are valid (i.e., no division by zero).","input: s = [""3"",""4"",""+"",""2"",""*"",""7"",""/""] output: 2 explanation: this expression evaluates to the above binary tree with expression (`(3+4)*2)/7) = 14/7 = 2.` example 2: input: s = [""4"",""5"",""7"",""2"",""+"",""-"",""*""] output: -16 explanation: this expression evaluates to the above binary tree with expression 4*(5-`(2+7)) = 4*(-4) = -16.` example 3: input: s = [""4"",""2"",""+"",""3"",""5"",""1"",""-"",""*"",""+""] output: 18 example 4: input: s = [""100"",""200"",""+"",""2"",""/"",""5"",""*"",""7"",""+""] output: 757","`1 <= s.length < 10^0` `s.length` is odd. `s` consists of numbers and the characters `'+'`, `'-'`, `'*'`, and `'/'`. if `s[i]` is a number, its integer representation is no more than `10^5`. it is guaranteed that `s` is a valid expression. the absolute value of the result and intermediate values will not exceed `10^9`. it is guaranteed that no expression will include division by zero.","could you design the expression tree such that it is more modular? for example, is your design able to support additional operators without making changes to your existing `evaluate` implementation? example 1: input: s = [""3"",""4"",""+"",""2"",""*"",""7"",""/""] output: 2 explanation: this expression evaluates to the above binary tree with expression (`(3+4)*2)/7) = 14/7 = 2.` example 2: input: s = [""4"",""5"",""7"",""2"",""+"",""-"",""*""] output: -16 explanation: this expression evaluates to the above binary tree with expression 4*(5-`(2+7)) = 4*(-4) = -16.` example 3: input: s = [""4"",""2"",""+"",""3"",""5"",""1"",""-"",""*"",""+""] output: 18 example 4: input: s = [""100"",""200"",""+"",""2"",""/"",""5"",""*"",""7"",""+""] output: 757 constraints: `1 <= s.length < 100` `s.length` is odd. `s` consists of numbers and the characters `'+'`, `'-'`, `'*'`, and `'/'`. if `s[i]` is a number, its integer representation is no more than `105`. it is guaranteed that `s` is a valid expression. the absolute value of the result and intermediate values will not exceed `109`. it is guaranteed that no expression will include division by zero."
1629,Slowest Key,"A newly designed keypad was tested, where a tester pressed a sequence of `n` keys, one at a time.

You are given a string `keysPressed` of length `n`, where `keysPressed[i]` was the `ith` key pressed in the testing sequence, and a sorted list `releaseTimes`, where `releaseTimes[i]` was the time the `ith` key was released. Both arrays are 0-indexed. The `0th` key was pressed at the time `0`, and every subsequent key was pressed at the exact time the previous key was released.

The tester wants to know the key of the keypress that had the longest duration. The `ith` keypress had a duration of `releaseTimes[i] - releaseTimes[i - 1]`, and the `0th` keypress had a duration of `releaseTimes[0]`.

Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.

Return the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.


Example 1:
Input: releaseTimes = [9,29,49,50], keysPressed = ""cbcd""
Output: ""c""
Explanation: The keypresses were as follows:
Keypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).

Keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).

Keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).

Keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).

The longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.

'c' is lexicographically larger than 'b', so the answer is 'c'.


Example 2:
Input: releaseTimes = [12,23,36,46,62], keysPressed = ""spuda""
Output: ""a""
Explanation: The keypresses were as follows:
Keypress for 's' had a duration of 12.

Keypress for 'p' had a duration of 23 - 12 = 11.

Keypress for 'u' had a duration of 36 - 23 = 13.

Keypress for 'd' had a duration of 46 - 36 = 10.

Keypress for 'a' had a duration of 62 - 46 = 16.

The longest of these was the keypress for 'a' with duration 16.


Constraints:
`releaseTimes.length == n`
`keysPressed.length == n`
`2 <= n <= 1000`
`1 <= releaseTimes[i] <= 109`
`releaseTimes[i] < releaseTimes[i+1]`
`keysPressed` contains only lowercase English letters.",Easy,https://leetcode.com/problems/slowest-key,Amazon,Array,190,,"a newly designed keypad was tested, where a tester pressed a sequence of `n` keys, one at a time. you are given a string `keyspressed` of length `n`, where `keyspressed[i]` was the `ith` key pressed in the testing sequence, and a sorted list `releasetimes`, where `releasetimes[i]` was the time the `ith` key was released. both arrays are 0-indexed. the `0th` key was pressed at the time `0`, and every subsequent key was pressed at the exact time the previous key was released. the tester wants to know the key of the keypress that had the longest duration. the `ith` keypress had a duration of `releasetimes[i] - releasetimes[i - 1]`, and the `0th` keypress had a duration of `releasetimes[0]`. note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration. return the key of the keypress that had the longest duration. if there are multiple such keypresses, return the lexicographically largest key of the keypresses.","input: releasetimes = [9,29,49,50], keyspressed = ""cbcd"" output: ""c"" explanation: the keypresses were as follows: keypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9). keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29). keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49). keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50). the longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20. 'c' is lexicographically larger than 'b', so the answer is 'c'. example 2: input: releasetimes = [12,23,36,46,62], keyspressed = ""spuda"" output: ""a"" explanation: the keypresses were as follows: keypress for 's' had a duration of 12. keypress for 'p' had a duration of 23 - 12 = 11. keypress for 'u' had a duration of 36 - 23 = 13. keypress for 'd' had a duration of 46 - 36 = 10. keypress for 'a' had a duration of 62 - 46 = 16. the longest of these was the keypress for 'a' with duration 16.",`releasetimes.length == n` `keyspressed.length == n` `2 <= n <= 1000` `1 <= releasetimes[i] <= 10^9` `releasetimes[i] < releasetimes[i+1]` `keyspressed` contains only lowercase english letters.,
1630,Arithmetic Subarrays,"A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence `s` is arithmetic if and only if `s[i+1] - s[i] == s[1] - s[0] `for all valid `i`.

For example, these are arithmetic sequences:
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic:
1, 1, 2, 5, 7
You are given an array of `n` integers, `nums`, and two arrays of `m` integers each, `l` and `r`, representing the `m` range queries, where the `ith` query is the range `[l[i], r[i]]`. All the arrays are 0-indexed.

Return a list of `boolean` elements `answer`, where `answer[i]` is `true` if the subarray `nums[l[i]], nums[l[i]+1], ... , nums[r[i]]` can be rearranged to form an arithmetic sequence, and `false` otherwise.


Example 1:
Input: nums = `[4,6,5,9,3,7]`, l = `[0,0,2]`, r = `[2,3,5]`
Output: `[true,false,true]`
Explanation:
In the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.

In the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.

In the 2nd query, the subarray is `[5,9,3,7]. This` can be rearranged as `[3,5,7,9]`, which is an arithmetic sequence.


Example 2:
Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]
Output: [false,true,false,false,true,true]

Constraints:
`n == nums.length`
`m == l.length`
`m == r.length`
`2 <= n <= 500`
`1 <= m <= 500`
`0 <= l[i] < r[i] < n`
`-105 <= nums[i] <= 105`",Medium,https://leetcode.com/problems/arithmetic-subarrays,Google,Sort,202,"[Arithmetic Slices, /problems/arithmetic-slices/, Medium], [Can Make Arithmetic Progression From Sequence, /problems/can-make-arithmetic-progression-from-sequence/, Easy]","a sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. more formally, a sequence `s` is arithmetic if and only if `s[i+1] - s[i] == s[1] - s[0] `for all valid `i`. for example, these are arithmetic sequences: 1, 3, 5, 7, 9 7, 7, 7, 7 3, -1, -5, -9 the following sequence is not arithmetic: 1, 1, 2, 5, 7 you are given an array of `n` integers, `nums`, and two arrays of `m` integers each, `l` and `r`, representing the `m` range queries, where the `ith` query is the range `[l[i], r[i]]`. all the arrays are 0-indexed. return a list of `boolean` elements `answer`, where `answer[i]` is `true` if the subarray `nums[l[i]], nums[l[i]+1], ... , nums[r[i]]` can be rearranged to form an arithmetic sequence, and `false` otherwise.","input: nums = `[4,6,5,9,3,7]`, l = `[0,0,2]`, r = `[2,3,5]` output: `[true,false,true]` explanation: in the 0th query, the subarray is [4,6,5]. this can be rearranged as [6,5,4], which is an arithmetic sequence. in the 1st query, the subarray is [4,6,5,9]. this cannot be rearranged as an arithmetic sequence. in the 2nd query, the subarray is `[5,9,3,7]. this` can be rearranged as `[3,5,7,9]`, which is an arithmetic sequence. example 2: input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10] output: [false,true,false,false,true,true]",`n == nums.length` `m == l.length` `m == r.length` `2 <= n <= 500` `1 <= m <= 500` `0 <= l[i] < r[i] < n` `-10^5 <= nums[i] <= 10^5`,
1631,Path With Minimum Effort,"You are a hiker preparing for an upcoming hike. You are given `heights`, a 2D array of size `rows x columns`, where `heights[row][col]` represents the height of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`, and you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.


Example 1:
Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.

This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.


Example 2:
Input: heights = [[1,2,3],[3,8,4],[5,3,5]]
Output: 1
Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].


Example 3:
Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
Output: 0
Explanation: This route does not require any effort.


Constraints:
`rows == heights.length`
`columns == heights[i].length`
`1 <= rows, columns <= 100`
`1 <= heights[i][j] <= 106`",Medium,https://leetcode.com/problems/path-with-minimum-effort,"Google,Houzz,ByteDance","Binary Search,Depth-first Search,Union Find,Graph",1027,"[Path With Maximum Minimum Value, /problems/path-with-maximum-minimum-value/, Medium]","you are a hiker preparing for an upcoming hike. you are given `heights`, a 2d array of size `rows x columns`, where `heights[row][col]` represents the height of cell `(row, col)`. you are situated in the top-left cell, `(0, 0)`, and you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e., 0-indexed). you can move up, down, left, or right, and you wish to find a route that requires the minimum effort. a route's effort is the maximum absolute difference in heights between two consecutive cells of the route. return the minimum effort required to travel from the top-left cell to the bottom-right cell.","input: heights = [[1,2,2],[3,8,2],[5,3,5]] output: 2 explanation: the route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells. this is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3. example 2: input: heights = [[1,2,3],[3,8,4],[5,3,5]] output: 1 explanation: the route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5]. example 3: input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]] output: 0 explanation: this route does not require any effort.","`rows == heights.length` `columns == heights[i].length` `1 <= rows, columns <= 10^0` `1 <= heights[i][j] <= 10^6`",
1632,Rank Transform of a Matrix,"Given an `m x n` `matrix`, return a new matrix `answer` where `answer[row][col]` is the rank of `matrix[row][col]`.

The rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:
The rank is an integer starting from `1`.

If two elements `p` and `q` are in the same row or column, then:
	
If `p < q` then `rank(p) < rank(q)`
If `p == q` then `rank(p) == rank(q)`
If `p > q` then `rank(p) > rank(q)`
The rank should be as small as possible.

It is guaranteed that `answer` is unique under the given rules.


Example 1:
Input: matrix = [[1,2],[3,4]]
Output: [[1,2],[2,3]]
Explanation:
The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.

The rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.

The rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.

The rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.


Example 2:
Input: matrix = [[7,7],[7,7]]
Output: [[1,1],[1,1]]

Example 3:
Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]

Example 4:
Input: matrix = [[7,3,6],[1,4,5],[9,8,2]]
Output: [[5,1,4],[1,2,3],[6,3,1]]

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 500`
`-109 <= matrix[row][col] <= 109`",Hard,https://leetcode.com/problems/rank-transform-of-a-matrix,Google,"Greedy,Union Find",193,"[Rank Transform of an Array, /problems/rank-transform-of-an-array/, Easy]","given an `m x n` `matrix`, return a new matrix `answer` where `answer[row][col]` is the rank of `matrix[row][col]`. the rank is an integer that represents how large an element is compared to other elements. it is calculated using the following rules: the rank is an integer starting from `1`. if two elements `p` and `q` are in the same row or column, then: if `p < q` then `rank(p) < rank(q)` if `p == q` then `rank(p) == rank(q)` if `p > q` then `rank(p) > rank(q)` the rank should be as small as possible. it is guaranteed that `answer` is unique under the given rules.","input: matrix = [[1,2],[3,4]] output: [[1,2],[2,3]] explanation: the rank of matrix[0][0] is 1 because it is the smallest integer in its row and column. the rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1. the rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1. the rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2. example 2: input: matrix = [[7,7],[7,7]] output: [[1,1],[1,1]] example 3: input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]] output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]] example 4: input: matrix = [[7,3,6],[1,4,5],[9,8,2]] output: [[5,1,4],[1,2,3],[6,3,1]]","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 500` `-10^9 <= matrix[row][col] <= 10^9`",
1633,Percentage of Users Attended a Contest,SQL Schema,Easy,https://leetcode.com/problems/percentage-of-users-attended-a-contest,,,18,,sql schema,,,
1634,Add Two Polynomials Represented as Linked Lists,"A polynomial linked list is a special type of linked list where every node represents a term in a polynomial expression.

Each node has three attributes:
`coefficient`: an integer representing the number multiplier of the term. The coefficient of the term `9x4` is `9`.

`power`: an integer representing the exponent. The power of the term `9x4` is `4`.

`next`: a pointer to the next node in the list, or `null` if it is the last node of the list.

For example, the polynomial `5x3 + 4x - 7` is represented by the polynomial linked list illustrated below:
The polynomial linked list must be in its standard form: the polynomial must be in strictly descending order by its `power` value. Also, terms with a `coefficient` of `0` are omitted.

Given two polynomial linked list heads, `poly1` and `poly2`, add the polynomials together and return the head of the sum of the polynomials.

`PolyNode` format:
The input/output format is as a list of `n` nodes, where each node is represented as its `[coefficient, power]`. For example, the polynomial `5x3 + 4x - 7` would be represented as: `[[5,3],[4,1],[-7,0]]`.


Example 1:
Input: poly1 = [[1,1]], poly2 = [[1,0]]
Output: [[1,1],[1,0]]
Explanation: poly1 = x. poly2 = 1. The sum is x + 1.


Example 2:
Input: poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]]
Output: [[5,2],[2,0]]
Explanation: poly1 = 2x2 + 4x + 3. poly2 = 3x2 - 4x - 1. The sum is 5x2 + 2. Notice that we omit the ""0x"" term.


Example 3:
Input: poly1 = [[1,2]], poly2 = [[-1,2]]
Output: []
Explanation: The sum is 0. We return an empty list.


Constraints:
`0 <= n <= 104`
`-109 <= PolyNode.coefficient <= 109`
`PolyNode.coefficient != 0`
`0 <= PolyNode.power <= 109`
`PolyNode.power > PolyNode.next.power`",Medium,https://leetcode.com/problems/add-two-polynomials-represented-as-linked-lists,Amazon,Linked List,38,"[Add Two Numbers, /problems/add-two-numbers/, Medium], [Merge Two Sorted Lists, /problems/merge-two-sorted-lists/, Easy], [Add Two Numbers II, /problems/add-two-numbers-ii/, Medium]","a polynomial linked list is a special type of linked list where every node represents a term in a polynomial expression. each node has three attributes: `coefficient`: an integer representing the number multiplier of the term. the coefficient of the term `9x4` is `9`. `power`: an integer representing the exponent. the power of the term `9x4` is `4`. `next`: a pointer to the next node in the list, or `null` if it is the last node of the list. for example, the polynomial `5x3 + 4x - 7` is represented by the polynomial linked list illustrated below: the polynomial linked list must be in its standard form: the polynomial must be in strictly descending order by its `power` value. also, terms with a `coefficient` of `0` are omitted. given two polynomial linked list heads, `poly1` and `poly2`, add the polynomials together and return the head of the sum of the polynomials. `polynode` format: the input/output format is as a list of `n` nodes, where each node is represented as its `[coefficient, power]`. for example, the polynomial `5x3 + 4x - 7` would be represented as: `[[5,3],[4,1],[-7,0]]`.","input: poly1 = [[1,1]], poly2 = [[1,0]] output: [[1,1],[1,0]] explanation: poly1 = x. poly2 = 1. the sum is x + 1. example 2: input: poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]] output: [[5,2],[2,0]] explanation: poly1 = 2x2 + 4x + 3. poly2 = 3x2 - 4x - 1. the sum is 5x2 + 2. notice that we omit the ""0x"" term. example 3: input: poly1 = [[1,2]], poly2 = [[-1,2]] output: [] explanation: the sum is 0. we return an empty list.",`0 <= n <= 10^4` `-10^9 <= polynode.coefficient <= 10^9` `polynode.coefficient != 0` `0 <= polynode.power <= 10^9` `polynode.power > polynode.next.power`,
1635,Hopper Company Queries I,SQL Schema,Hard,https://leetcode.com/problems/hopper-company-queries-i,Uber,,26,,sql schema,,,
1636,Sort Array by Increasing Frequency,"Given an array of integers `nums`, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.

Return the sorted array.


Example 1:
Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.


Example 2:
Input: nums = [2,3,1,3,2]
Output: [1,3,3,2,2]
Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.


Example 3:
Input: nums = [-1,1,-6,4,5,-6,1,4,1]
Output: [5,-1,4,4,-6,-6,1,1,1]

Constraints:
`1 <= nums.length <= 100`
`-100 <= nums[i] <= 100`",Easy,https://leetcode.com/problems/sort-array-by-increasing-frequency,"Twilio,Amazon,eBay","Array,Sort",388,"[Sort Characters By Frequency, /problems/sort-characters-by-frequency/, Medium]","given an array of integers `nums`, sort the array in increasing order based on the frequency of the values. if multiple values have the same frequency, sort them in decreasing order. return the sorted array.","input: nums = [1,1,2,2,2,3] output: [3,1,1,2,2,2] explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3. example 2: input: nums = [2,3,1,3,2] output: [1,3,3,2,2] explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order. example 3: input: nums = [-1,1,-6,4,5,-6,1,4,1] output: [5,-1,4,4,-6,-6,1,1,1]",`1 <= nums.length <= 10^0` `-10^0 <= nums[i] <= 10^0`,
1637,Widest Vertical Area Between Two Points Containing No Points,"Given `n` `points` on a 2D plane where `points[i] = [xi, yi]`, Return the widest vertical area between two points such that no points are inside the area.

A vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.

Note that points on the edge of a vertical area are not considered included in the area.


Example 1:
​
Input: points = [[8,7],[9,9],[7,4],[9,7]]
Output: 1
Explanation: Both the red and the blue area are optimal.


Example 2:
Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
Output: 3

Constraints:
`n == points.length`
`2 <= n <= 105`
`points[i].length == 2`
`0 <= xi, yi <= 109`",Medium,https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points,Microsoft,Sort,69,,"given `n` `points` on a 2d plane where `points[i] = [xi, yi]`, return the widest vertical area between two points such that no points are inside the area. a vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). the widest vertical area is the one with the maximum width. note that points on the edge of a vertical area are not considered included in the area.","​ input: points = [[8,7],[9,9],[7,4],[9,7]] output: 1 explanation: both the red and the blue area are optimal. example 2: input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]] output: 3","`n == points.length` `2 <= n <= 10^5` `points[i].length == 2` `0 <= xi, yi <= 10^9`",
1638,Count Substrings That Differ by One Character,"Given two strings `s` and `t`, find the number of ways you can choose a non-empty substring of `s` and replace a single character by a different character such that the resulting substring is a substring of `t`. In other words, find the number of substrings in `s` that differ from some substring in `t` by exactly one character.

For example, the underlined substrings in `""computer""` and `""computation""` only differ by the `'e'`/`'a'`, so this is a valid way.

Return the number of substrings that satisfy the condition above.

A substring is a contiguous sequence of characters within a string.


Example 1:
Input: s = ""aba"", t = ""baba""
Output: 6
Explanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
The underlined portions are the substrings that are chosen from s and t.


​​Example 2:
Input: s = ""ab"", t = ""bb""
Output: 3
Explanation: The following are the pairs of substrings from s and t that differ by 1 character:
(""ab"", ""bb"")
(""ab"", ""bb"")
(""ab"", ""bb"")
​​​​The underlined portions are the substrings that are chosen from s and t.


Example 3:
Input: s = ""a"", t = ""a""
Output: 0

Example 4:
Input: s = ""abe"", t = ""bbc""
Output: 10

Constraints:
`1 <= s.length, t.length <= 100`
`s` and `t` consist of lowercase English letters only.",Medium,https://leetcode.com/problems/count-substrings-that-differ-by-one-character,Microsoft,"Hash Table,String,Trie,Rolling Hash",196,,"given two strings `s` and `t`, find the number of ways you can choose a non-empty substring of `s` and replace a single character by a different character such that the resulting substring is a substring of `t`. in other words, find the number of substrings in `s` that differ from some substring in `t` by exactly one character. for example, the underlined substrings in `""computer""` and `""computation""` only differ by the `'e'`/`'a'`, so this is a valid way. return the number of substrings that satisfy the condition above. a substring is a contiguous sequence of characters within a string.","input: s = ""aba"", t = ""baba"" output: 6 explanation: the following are the pairs of substrings from s and t that differ by exactly 1 character: (""aba"", ""baba"") (""aba"", ""baba"") (""aba"", ""baba"") (""aba"", ""baba"") (""aba"", ""baba"") (""aba"", ""baba"") the underlined portions are the substrings that are chosen from s and t. ​​example 2: input: s = ""ab"", t = ""bb"" output: 3 explanation: the following are the pairs of substrings from s and t that differ by 1 character: (""ab"", ""bb"") (""ab"", ""bb"") (""ab"", ""bb"") ​​​​the underlined portions are the substrings that are chosen from s and t. example 3: input: s = ""a"", t = ""a"" output: 0 example 4: input: s = ""abe"", t = ""bbc"" output: 10","`1 <= s.length, t.length <= 10^0` `s` and `t` consist of lowercase english letters only.",
1639,Number of Ways to Form a Target String Given a Dictionary,"You are given a list of strings of the same length `words` and a string `target`.

Your task is to form `target` using the given `words` under the following rules:
`target` should be formed from left to right.

To form the `ith` character (0-indexed) of `target`, you can choose the `kth` character of the `jth` string in `words` if `target[i] = words[j][k]`.

Once you use the `kth` character of the `jth` string of `words`, you can no longer use the `xth` character of any string in `words` where `x <= k`. In other words, all characters to the left of or at index `k` become unusuable for every string.

Repeat the process until you form the string `target`.

Notice that you can use multiple characters from the same string in `words` provided the conditions above are met.

Return the number of ways to form `target` from `words`. Since the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: words = [""acca"",""bbbb"",""caca""], target = ""aba""
Output: 6
Explanation: There are 6 ways to form target.

""aba"" -> index 0 (""acca""), index 1 (""bbbb""), index 3 (""caca"")
""aba"" -> index 0 (""acca""), index 2 (""bbbb""), index 3 (""caca"")
""aba"" -> index 0 (""acca""), index 1 (""bbbb""), index 3 (""acca"")
""aba"" -> index 0 (""acca""), index 2 (""bbbb""), index 3 (""acca"")
""aba"" -> index 1 (""caca""), index 2 (""bbbb""), index 3 (""acca"")
""aba"" -> index 1 (""caca""), index 2 (""bbbb""), index 3 (""caca"")

Example 2:
Input: words = [""abba"",""baab""], target = ""bab""
Output: 4
Explanation: There are 4 ways to form target.

""bab"" -> index 0 (""baab""), index 1 (""baab""), index 2 (""abba"")
""bab"" -> index 0 (""baab""), index 1 (""baab""), index 3 (""baab"")
""bab"" -> index 0 (""baab""), index 2 (""baab""), index 3 (""baab"")
""bab"" -> index 1 (""abba""), index 2 (""baab""), index 3 (""baab"")

Example 3:
Input: words = [""abcd""], target = ""abcd""
Output: 1

Example 4:
Input: words = [""abab"",""baba"",""abba"",""baab""], target = ""abba""
Output: 16

Constraints:
`1 <= words.length <= 1000`
`1 <= words[i].length <= 1000`
All strings in `words` have the same length.

`1 <= target.length <= 1000`
`words[i]` and `target` contain only lowercase English letters.",Hard,https://leetcode.com/problems/number-of-ways-to-form-a-target-string-given-a-dictionary,Dunzo,Dynamic Programming,129,,"you are given a list of strings of the same length `words` and a string `target`. your task is to form `target` using the given `words` under the following rules: `target` should be formed from left to right. to form the `ith` character (0-indexed) of `target`, you can choose the `kth` character of the `jth` string in `words` if `target[i] = words[j][k]`. once you use the `kth` character of the `jth` string of `words`, you can no longer use the `xth` character of any string in `words` where `x <= k`. in other words, all characters to the left of or at index `k` become unusuable for every string. repeat the process until you form the string `target`. notice that you can use multiple characters from the same string in `words` provided the conditions above are met. return the number of ways to form `target` from `words`. since the answer may be too large, return it modulo `109 + 7`.","input: words = [""acca"",""bbbb"",""caca""], target = ""aba"" output: 6 explanation: there are 6 ways to form target. ""aba"" -> index 0 (""acca""), index 1 (""bbbb""), index 3 (""caca"") ""aba"" -> index 0 (""acca""), index 2 (""bbbb""), index 3 (""caca"") ""aba"" -> index 0 (""acca""), index 1 (""bbbb""), index 3 (""acca"") ""aba"" -> index 0 (""acca""), index 2 (""bbbb""), index 3 (""acca"") ""aba"" -> index 1 (""caca""), index 2 (""bbbb""), index 3 (""acca"") ""aba"" -> index 1 (""caca""), index 2 (""bbbb""), index 3 (""caca"") example 2: input: words = [""abba"",""baab""], target = ""bab"" output: 4 explanation: there are 4 ways to form target. ""bab"" -> index 0 (""baab""), index 1 (""baab""), index 2 (""abba"") ""bab"" -> index 0 (""baab""), index 1 (""baab""), index 3 (""baab"") ""bab"" -> index 0 (""baab""), index 2 (""baab""), index 3 (""baab"") ""bab"" -> index 1 (""abba""), index 2 (""baab""), index 3 (""baab"") example 3: input: words = [""abcd""], target = ""abcd"" output: 1 example 4: input: words = [""abab"",""baba"",""abba"",""baab""], target = ""abba"" output: 16",`1 <= words.length <= 1000` `1 <= words[i].length <= 1000` all strings in `words` have the same length. `1 <= target.length <= 1000` `words[i]` and `target` contain only lowercase english letters.,
1640,Check Array Formation Through Concatenation,"You are given an array of distinct integers `arr` and an array of integer arrays `pieces`, where the integers in `pieces` are distinct. Your goal is to form `arr` by concatenating the arrays in `pieces` in any order. However, you are not allowed to reorder the integers in each array `pieces[i]`.

Return `true` if it is possible to form the array `arr` from `pieces`. Otherwise, return `false`.


Example 1:
Input: arr = [85], pieces = [[85]]
Output: true

Example 2:
Input: arr = [15,88], pieces = [[88],[15]]
Output: true
Explanation: Concatenate `[15]` then `[88]`

Example 3:
Input: arr = [49,18,16], pieces = [[16,18,49]]
Output: false
Explanation: Even though the numbers match, we cannot reorder pieces[0].


Example 4:
Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]
Output: true
Explanation: Concatenate `[91]` then `[4,64]` then `[78]`

Example 5:
Input: arr = [1,3,5,7], pieces = [[2,4,6,8]]
Output: false

Constraints:
`1 <= pieces.length <= arr.length <= 100`
`sum(pieces[i].length) == arr.length`
`1 <= pieces[i].length <= arr.length`
`1 <= arr[i], pieces[i][j] <= 100`
The integers in `arr` are distinct.

The integers in `pieces` are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).",Easy,https://leetcode.com/problems/check-array-formation-through-concatenation,Uber,"Array,Hash Table,Sort",451,,"you are given an array of distinct integers `arr` and an array of integer arrays `pieces`, where the integers in `pieces` are distinct. your goal is to form `arr` by concatenating the arrays in `pieces` in any order. however, you are not allowed to reorder the integers in each array `pieces[i]`. return `true` if it is possible to form the array `arr` from `pieces`. otherwise, return `false`.","input: arr = [85], pieces = [[85]] output: true example 2: input: arr = [15,88], pieces = [[88],[15]] output: true explanation: concatenate `[15]` then `[88]` example 3: input: arr = [49,18,16], pieces = [[16,18,49]] output: false explanation: even though the numbers match, we cannot reorder pieces[0]. example 4: input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]] output: true explanation: concatenate `[91]` then `[4,64]` then `[78]` example 5: input: arr = [1,3,5,7], pieces = [[2,4,6,8]] output: false","`1 <= pieces.length <= arr.length <= 10^0` `sum(pieces[i].length) == arr.length` `1 <= pieces[i].length <= arr.length` `1 <= arr[i], pieces[i][j] <= 10^0` the integers in `arr` are distinct. the integers in `pieces` are distinct (i.e., if we flatten pieces in a 1d array, all the integers in this array are distinct).",
1641,Count Sorted Vowel Strings,"Given an integer `n`, return the number of strings of length `n` that consist only of vowels (`a`, `e`, `i`, `o`, `u`) and are lexicographically sorted.

A string `s` is lexicographically sorted if for all valid `i`, `s[i]` is the same as or comes before `s[i+1]` in the alphabet.


Example 1:
Input: n = 1
Output: 5
Explanation: The 5 sorted strings that consist of vowels only are `[""a"",""e"",""i"",""o"",""u""].`

Example 2:
Input: n = 2
Output: 15
Explanation: The 15 sorted strings that consist of vowels only are
[""aa"",""ae"",""ai"",""ao"",""au"",""ee"",""ei"",""eo"",""eu"",""ii"",""io"",""iu"",""oo"",""ou"",""uu""].

Note that ""ea"" is not a valid string since 'e' comes after 'a' in the alphabet.


Example 3:
Input: n = 33
Output: 66045

Constraints:
`1 <= n <= 50`",Medium,https://leetcode.com/problems/count-sorted-vowel-strings,Amazon,"Math,Dynamic Programming,Backtracking",856,,"given an integer `n`, return the number of strings of length `n` that consist only of vowels (`a`, `e`, `i`, `o`, `u`) and are lexicographically sorted. a string `s` is lexicographically sorted if for all valid `i`, `s[i]` is the same as or comes before `s[i+1]` in the alphabet.","input: n = 1 output: 5 explanation: the 5 sorted strings that consist of vowels only are `[""a"",""e"",""i"",""o"",""u""].` example 2: input: n = 2 output: 15 explanation: the 15 sorted strings that consist of vowels only are [""aa"",""ae"",""ai"",""ao"",""au"",""ee"",""ei"",""eo"",""eu"",""ii"",""io"",""iu"",""oo"",""ou"",""uu""]. note that ""ea"" is not a valid string since 'e' comes after 'a' in the alphabet. example 3: input: n = 33 output: 66045",`1 <= n <= 50`,
1642,Furthest Building You Can Reach,"You are given an integer array `heights` representing the heights of buildings, some `bricks`, and some `ladders`.

You start your journey from building `0` and move to the next building by possibly using bricks or ladders.

While moving from building `i` to building `i+1` (0-indexed),
If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.

If the current building's height is less than the next building's height, you can either use one ladder or `(h[i+1] - h[i])` bricks.

Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.


Example 1:
Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
Output: 4
Explanation: Starting at building 0, you can follow these steps:
- Go to building 1 without using ladders nor bricks since 4 >= 2.

- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.

- Go to building 3 without using ladders nor bricks since 7 >= 6.

- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.

It is impossible to go beyond building 4 because you do not have any more bricks or ladders.


Example 2:
Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2
Output: 7

Example 3:
Input: heights = [14,3,19,3], bricks = 17, ladders = 0
Output: 3

Constraints:
`1 <= heights.length <= 105`
`1 <= heights[i] <= 106`
`0 <= bricks <= 109`
`0 <= ladders <= heights.length`",Medium,https://leetcode.com/problems/furthest-building-you-can-reach,Google,"Binary Search,Heap",509,,"you are given an integer array `heights` representing the heights of buildings, some `bricks`, and some `ladders`. you start your journey from building `0` and move to the next building by possibly using bricks or ladders. while moving from building `i` to building `i+1` (0-indexed), if the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks. if the current building's height is less than the next building's height, you can either use one ladder or `(h[i+1] - h[i])` bricks. return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.","input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1 output: 4 explanation: starting at building 0, you can follow these steps: - go to building 1 without using ladders nor bricks since 4 >= 2. - go to building 2 using 5 bricks. you must use either bricks or ladders because 2 < 7. - go to building 3 without using ladders nor bricks since 7 >= 6. - go to building 4 using your only ladder. you must use either bricks or ladders because 6 < 9. it is impossible to go beyond building 4 because you do not have any more bricks or ladders. example 2: input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2 output: 7 example 3: input: heights = [14,3,19,3], bricks = 17, ladders = 0 output: 3",`1 <= heights.length <= 10^5` `1 <= heights[i] <= 10^6` `0 <= bricks <= 10^9` `0 <= ladders <= heights.length`,
1643,Kth Smallest Instructions,"Bob is standing at cell `(0, 0)`, and he wants to reach `destination`: `(row, column)`. He can only travel right and down. You are going to help Bob by providing instructions for him to reach `destination`.

The instructions are represented as a string, where each character is either:
`'H'`, meaning move horizontally (go right), or
`'V'`, meaning move vertically (go down).

Multiple instructions will lead Bob to `destination`. For example, if `destination` is `(2, 3)`, both `""HHHVV""` and `""HVHVH""` are valid instructions.

However, Bob is very picky. Bob has a lucky number `k`, and he wants the `kth` lexicographically smallest instructions that will lead him to `destination`. `k` is 1-indexed.

Given an integer array `destination` and an integer `k`, return the `kth` lexicographically smallest instructions that will take Bob to `destination`.


Example 1:
Input: destination = [2,3], k = 1
Output: ""HHHVV""
Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows:
[""HHHVV"", ""HHVHV"", ""HHVVH"", ""HVHHV"", ""HVHVH"", ""HVVHH"", ""VHHHV"", ""VHHVH"", ""VHVHH"", ""VVHHH""].


Example 2:
Input: destination = [2,3], k = 2
Output: ""HHVHV""

Example 3:
Input: destination = [2,3], k = 3
Output: ""HHVVH""

Constraints:
`destination.length == 2`
`1 <= row, column <= 15`
`1 <= k <= nCr(row + column, row)`, where `nCr(a, b)` denotes `a` choose `b`​​​​​.",Hard,https://leetcode.com/problems/kth-smallest-instructions,HeavyWater,Dynamic Programming,193,,"bob is standing at cell `(0, 0)`, and he wants to reach `destination`: `(row, column)`. he can only travel right and down. you are going to help bob by providing instructions for him to reach `destination`. the instructions are represented as a string, where each character is either: `'h'`, meaning move horizontally (go right), or `'v'`, meaning move vertically (go down). multiple instructions will lead bob to `destination`. for example, if `destination` is `(2, 3)`, both `""hhhvv""` and `""hvhvh""` are valid instructions. however, bob is very picky. bob has a lucky number `k`, and he wants the `kth` lexicographically smallest instructions that will lead him to `destination`. `k` is 1-indexed. given an integer array `destination` and an integer `k`, return the `kth` lexicographically smallest instructions that will take bob to `destination`.","input: destination = [2,3], k = 1 output: ""hhhvv"" explanation: all the instructions that reach (2, 3) in lexicographic order are as follows: [""hhhvv"", ""hhvhv"", ""hhvvh"", ""hvhhv"", ""hvhvh"", ""hvvhh"", ""vhhhv"", ""vhhvh"", ""vhvhh"", ""vvhhh""]. example 2: input: destination = [2,3], k = 2 output: ""hhvhv"" example 3: input: destination = [2,3], k = 3 output: ""hhvvh""","`destination.length == 2` `1 <= row, column <= 15` `1 <= k <= ncr(row + column, row)`, where `ncr(a, b)` denotes `a` choose `b`​​​​​.",
1644,Lowest Common Ancestor of a Binary Tree II,"Given the `root` of a binary tree, return the lowest common ancestor (LCA) of two given nodes, `p` and `q`. If either node `p` or `q` does not exist in the tree, return `null`. All values of the nodes in the tree are unique.

According to the definition of LCA on Wikipedia: ""The lowest common ancestor of two nodes `p` and `q` in a binary tree `T` is the lowest node that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself)"". A descendant of a node `x` is a node `y` that is on the path from node `x` to some leaf node.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the definition of LCA.


Example 3:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10
Output: null
Explanation: Node 10 does not exist in the tree, so return null.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
Follow up: Can you find the LCA traversing the tree, without checking nodes existence?",Medium,https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-ii,"Microsoft,Facebook",Tree,124,"[Lowest Common Ancestor of a Binary Search Tree, /problems/lowest-common-ancestor-of-a-binary-search-tree/, Easy], [Lowest Common Ancestor of a Binary Tree, /problems/lowest-common-ancestor-of-a-binary-tree/, Medium], [Lowest Common Ancestor of a Binary Tree III, /problems/lowest-common-ancestor-of-a-binary-tree-iii/, Medium], [Lowest Common Ancestor of a Binary Tree IV, /problems/lowest-common-ancestor-of-a-binary-tree-iv/, Medium]","given the `root` of a binary tree, return the lowest common ancestor (lca) of two given nodes, `p` and `q`. if either node `p` or `q` does not exist in the tree, return `null`. all values of the nodes in the tree are unique. according to the definition of lca on wikipedia: ""the lowest common ancestor of two nodes `p` and `q` in a binary tree `t` is the lowest node that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself)"". a descendant of a node `x` is a node `y` that is on the path from node `x` to some leaf node.","input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 output: 3 explanation: the lca of nodes 5 and 1 is 3. example 2: input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 output: 5 explanation: the lca of nodes 5 and 4 is 5. a node can be a descendant of itself according to the definition of lca. example 3: input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10 output: null explanation: node 10 does not exist in the tree, so return null.","the number of nodes in the tree is in the range `[1, 10^4]`. `-10^9 <= node.val <= 10^9` all `node.val` are unique. `p != q`","can you find the lca traversing the tree, without checking nodes existence?"
1645,Hopper Company Queries II,SQL Schema,Hard,https://leetcode.com/problems/hopper-company-queries-ii,Uber,,22,,sql schema,,,
1646,Get Maximum in Generated Array,"You are given an integer `n`. An array `nums` of length `n + 1` is generated in the following way:
`nums[0] = 0`
`nums[1] = 1`
`nums[2 * i] = nums[i]` when `2 <= 2 * i <= n`
`nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n`
Return the maximum integer in the array `nums`​​​.


Example 1:
Input: n = 7
Output: 3
Explanation: According to the given rules:
  nums[0] = 0
  nums[1] = 1
  nums[(1 * 2) = 2] = nums[1] = 1
  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2
  nums[(2 * 2) = 4] = nums[2] = 1
  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3
  nums[(3 * 2) = 6] = nums[3] = 2
  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3
Hence, nums = [0,1,1,2,1,3,2,3], and the maximum is 3.


Example 2:
Input: n = 2
Output: 1
Explanation: According to the given rules, the maximum between nums[0], nums[1], and nums[2] is 1.


Example 3:
Input: n = 3
Output: 2
Explanation: According to the given rules, the maximum between nums[0], nums[1], nums[2], and nums[3] is 2.


Constraints:
`0 <= n <= 100`",Easy,https://leetcode.com/problems/get-maximum-in-generated-array,,,150,,you are given an integer `n`. an array `nums` of length `n + 1` is generated in the following way: `nums[0] = 0` `nums[1] = 1` `nums[2 * i] = nums[i]` when `2 <= 2 * i <= n` `nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n` return the maximum integer in the array `nums`​​​.,"input: n = 7 output: 3 explanation: according to the given rules: nums[0] = 0 nums[1] = 1 nums[(1 * 2) = 2] = nums[1] = 1 nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2 nums[(2 * 2) = 4] = nums[2] = 1 nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3 nums[(3 * 2) = 6] = nums[3] = 2 nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3 hence, nums = [0,1,1,2,1,3,2,3], and the maximum is 3. example 2: input: n = 2 output: 1 explanation: according to the given rules, the maximum between nums[0], nums[1], and nums[2] is 1. example 3: input: n = 3 output: 2 explanation: according to the given rules, the maximum between nums[0], nums[1], nums[2], and nums[3] is 2.",`0 <= n <= 10^0`,
1647,Minimum Deletions to Make Character Frequencies Unique,"A string `s` is called good if there are no two different characters in `s` that have the same frequency.

Given a string `s`, return the minimum number of characters you need to delete to make `s` good.

The frequency of a character in a string is the number of times it appears in the string. For example, in the string `""aab""`, the frequency of `'a'` is `2`, while the frequency of `'b'` is `1`.


Example 1:
Input: s = ""aab""
Output: 0
Explanation: `s` is already good.


Example 2:
Input: s = ""aaabbbcc""
Output: 2
Explanation: You can delete two 'b's resulting in the good string ""aaabcc"".

Another way it to delete one 'b' and one 'c' resulting in the good string ""aaabbc"".


Example 3:
Input: s = ""ceabaacb""
Output: 2
Explanation: You can delete both 'c's resulting in the good string ""eabaab"".

Note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).


Constraints:
`1 <= s.length <= 105`
`s` contains only lowercase English letters.",Medium,https://leetcode.com/problems/minimum-deletions-to-make-character-frequencies-unique,"Microsoft,Amazon,Apple","Greedy,Sort",345,,"a string `s` is called good if there are no two different characters in `s` that have the same frequency. given a string `s`, return the minimum number of characters you need to delete to make `s` good. the frequency of a character in a string is the number of times it appears in the string. for example, in the string `""aab""`, the frequency of `'a'` is `2`, while the frequency of `'b'` is `1`.","input: s = ""aab"" output: 0 explanation: `s` is already good. example 2: input: s = ""aaabbbcc"" output: 2 explanation: you can delete two 'b's resulting in the good string ""aaabcc"". another way it to delete one 'b' and one 'c' resulting in the good string ""aaabbc"". example 3: input: s = ""ceabaacb"" output: 2 explanation: you can delete both 'c's resulting in the good string ""eabaab"". note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).",`1 <= s.length <= 10^5` `s` contains only lowercase english letters.,
1648,Sell Diminishing-Valued Colored Balls,"You have an `inventory` of different colored balls, and there is a customer that wants `orders` balls of any color.

The customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color you currently have in your `inventory`. For example, if you own `6` yellow balls, the customer would pay `6` for the first yellow ball. After the transaction, there are only `5` yellow balls left, so the next yellow ball is then valued at `5` (i.e., the value of the balls decreases as you sell more to the customer).

You are given an integer array, `inventory`, where `inventory[i]` represents the number of balls of the `ith` color that you initially own. You are also given an integer `orders`, which represents the total number of balls that the customer wants. You can sell the balls in any order.

Return the maximum total value that you can attain after selling `orders` colored balls. As the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: inventory = [2,5], orders = 4
Output: 14
Explanation: Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).

The maximum total value is 2 + 5 + 4 + 3 = 14.


Example 2:
Input: inventory = [3,5], orders = 6
Output: 19
Explanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).

The maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.


Example 3:
Input: inventory = [2,8,4,10,6], orders = 20
Output: 110

Example 4:
Input: inventory = [1000000000], orders = 1000000000
Output: 21
Explanation: Sell the 1st color 1000000000 times for a total value of 500000000500000000. 500000000500000000 modulo 109 + 7 = 21.


Constraints:
`1 <= inventory.length <= 105`
`1 <= inventory[i] <= 109`
`1 <= orders <= min(sum(inventory[i]), 109)`",Medium,https://leetcode.com/problems/sell-diminishing-valued-colored-balls,Amazon,"Math,Greedy,Sort",253,,"you have an `inventory` of different colored balls, and there is a customer that wants `orders` balls of any color. the customer weirdly values the colored balls. each colored ball's value is the number of balls of that color you currently have in your `inventory`. for example, if you own `6` yellow balls, the customer would pay `6` for the first yellow ball. after the transaction, there are only `5` yellow balls left, so the next yellow ball is then valued at `5` (i.e., the value of the balls decreases as you sell more to the customer). you are given an integer array, `inventory`, where `inventory[i]` represents the number of balls of the `ith` color that you initially own. you are also given an integer `orders`, which represents the total number of balls that the customer wants. you can sell the balls in any order. return the maximum total value that you can attain after selling `orders` colored balls. as the answer may be too large, return it modulo `109 + 7`.","input: inventory = [2,5], orders = 4 output: 14 explanation: sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3). the maximum total value is 2 + 5 + 4 + 3 = 14. example 2: input: inventory = [3,5], orders = 6 output: 19 explanation: sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2). the maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19. example 3: input: inventory = [2,8,4,10,6], orders = 20 output: 110 example 4: input: inventory = [1000000000], orders = 1000000000 output: 21 explanation: sell the 1st color 1000000000 times for a total value of 500000000500000000. 500000000500000000 modulo 109 + 7 = 21.","`1 <= inventory.length <= 10^5` `1 <= inventory[i] <= 10^9` `1 <= orders <= min(sum(inventory[i]), 10^9)`",
1649,Create Sorted Array through Instructions,"Given an integer array `instructions`, you are asked to create a sorted array from the elements in `instructions`. You start with an empty container `nums`. For each element from left to right in `instructions`, insert it into `nums`. The cost of each insertion is the minimum of the following:
The number of elements currently in `nums` that are strictly less than `instructions[i]`.

The number of elements currently in `nums` that are strictly greater than `instructions[i]`.

For example, if inserting element `3` into `nums = [1,2,3,5]`, the cost of insertion is `min(2, 1)` (elements `1` and `2` are less than `3`, element `5` is greater than `3`) and `nums` will become `[1,2,3,3,5]`.

Return the total cost to insert all elements from `instructions` into `nums`. Since the answer may be large, return it modulo `109 + 7`

Example 1:
Input: instructions = [1,5,6,2]
Output: 1
Explanation: Begin with nums = [].

Insert 1 with cost min(0, 0) = 0, now nums = [1].

Insert 5 with cost min(1, 0) = 0, now nums = [1,5].

Insert 6 with cost min(2, 0) = 0, now nums = [1,5,6].

Insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].

The total cost is 0 + 0 + 0 + 1 = 1.


Example 2:
Input: instructions = [1,2,3,6,5,4]
Output: 3
Explanation: Begin with nums = [].

Insert 1 with cost min(0, 0) = 0, now nums = [1].

Insert 2 with cost min(1, 0) = 0, now nums = [1,2].

Insert 3 with cost min(2, 0) = 0, now nums = [1,2,3].

Insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].

Insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].

Insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].

The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.


Example 3:
Input: instructions = [1,3,3,3,2,4,2,1,2]
Output: 4
Explanation: Begin with nums = [].

Insert 1 with cost min(0, 0) = 0, now nums = [1].

Insert 3 with cost min(1, 0) = 0, now nums = [1,3].

Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3].

Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].

Insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].

Insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].

​​​​​​​Insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].

​​​​​​​Insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].

​​​​​​​Insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].

The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.


Constraints:
`1 <= instructions.length <= 105`
`1 <= instructions[i] <= 105`",Hard,https://leetcode.com/problems/create-sorted-array-through-instructions,Akuna Capital,"Binary Search,Binary Indexed Tree,Segment Tree,Ordered Map",341,,"given an integer array `instructions`, you are asked to create a sorted array from the elements in `instructions`. you start with an empty container `nums`. for each element from left to right in `instructions`, insert it into `nums`. the cost of each insertion is the minimum of the following: the number of elements currently in `nums` that are strictly less than `instructions[i]`. the number of elements currently in `nums` that are strictly greater than `instructions[i]`. for example, if inserting element `3` into `nums = [1,2,3,5]`, the cost of insertion is `min(2, 1)` (elements `1` and `2` are less than `3`, element `5` is greater than `3`) and `nums` will become `[1,2,3,3,5]`. return the total cost to insert all elements from `instructions` into `nums`. since the answer may be large, return it modulo `109 + 7`","input: instructions = [1,5,6,2] output: 1 explanation: begin with nums = []. insert 1 with cost min(0, 0) = 0, now nums = [1]. insert 5 with cost min(1, 0) = 0, now nums = [1,5]. insert 6 with cost min(2, 0) = 0, now nums = [1,5,6]. insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6]. the total cost is 0 + 0 + 0 + 1 = 1. example 2: input: instructions = [1,2,3,6,5,4] output: 3 explanation: begin with nums = []. insert 1 with cost min(0, 0) = 0, now nums = [1]. insert 2 with cost min(1, 0) = 0, now nums = [1,2]. insert 3 with cost min(2, 0) = 0, now nums = [1,2,3]. insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6]. insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6]. insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6]. the total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3. example 3: input: instructions = [1,3,3,3,2,4,2,1,2] output: 4 explanation: begin with nums = []. insert 1 with cost min(0, 0) = 0, now nums = [1]. insert 3 with cost min(1, 0) = 0, now nums = [1,3]. insert 3 with cost min(1, 0) = 0, now nums = [1,3,3]. insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3]. insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3]. insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4]. ​​​​​​​insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4]. ​​​​​​​insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4]. ​​​​​​​insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4]. the total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.",`1 <= instructions.length <= 10^5` `1 <= instructions[i] <= 10^5`,
1650,Lowest Common Ancestor of a Binary Tree III,"Given two nodes of a binary tree `p` and `q`, return their lowest common ancestor (LCA).

Each node will have a reference to its parent node. The definition for `Node` is below:
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
According to the definition of LCA on Wikipedia: ""The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).""

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.


Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

Constraints:
The number of nodes in the tree is in the range `[2, 105]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
`p` and `q` exist in the tree.",Medium,https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iii,"Facebook,Microsoft,LinkedIn,Amazon",Tree,149,"[Lowest Common Ancestor of a Binary Search Tree, /problems/lowest-common-ancestor-of-a-binary-search-tree/, Easy], [Lowest Common Ancestor of a Binary Tree, /problems/lowest-common-ancestor-of-a-binary-tree/, Medium], [Lowest Common Ancestor of a Binary Tree II, /problems/lowest-common-ancestor-of-a-binary-tree-ii/, Medium], [Lowest Common Ancestor of a Binary Tree IV, /problems/lowest-common-ancestor-of-a-binary-tree-iv/, Medium]","given two nodes of a binary tree `p` and `q`, return their lowest common ancestor (lca). each node will have a reference to its parent node. the definition for `node` is below: class node { public int val; public node left; public node right; public node parent; } according to the definition of lca on wikipedia: ""the lowest common ancestor of two nodes p and q in a tree t is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).""","input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1 output: 3 explanation: the lca of nodes 5 and 1 is 3. example 2: input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4 output: 5 explanation: the lca of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the lca definition. example 3: input: root = [1,2], p = 1, q = 2 output: 1","the number of nodes in the tree is in the range `[2, 10^5]`. `-10^9 <= node.val <= 10^9` all `node.val` are unique. `p != q` `p` and `q` exist in the tree.",
1651,Hopper Company Queries III,SQL Schema,Hard,https://leetcode.com/problems/hopper-company-queries-iii,Uber,,9,,sql schema,,,
1652,Defuse the Bomb,"You have a bomb to defuse, and your time is running out! Your informer will provide you with a circular array `code` of length of `n` and a key `k`.

To decrypt the code, you must replace every number. All the numbers are replaced simultaneously.

If `k > 0`, replace the `ith` number with the sum of the next `k` numbers.

If `k < 0`, replace the `ith` number with the sum of the previous `k` numbers.

If `k == 0`, replace the `ith` number with `0`.

As `code` is circular, the next element of `code[n-1]` is `code[0]`, and the previous element of `code[0]` is `code[n-1]`.

Given the circular array `code` and an integer key `k`, return the decrypted code to defuse the bomb!

Example 1:
Input: code = [5,7,1,4], k = 3
Output: [12,10,16,13]
Explanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.


Example 2:
Input: code = [1,2,3,4], k = 0
Output: [0,0,0,0]
Explanation: When k is zero, the numbers are replaced by 0. 

Example 3:
Input: code = [2,4,9,3], k = -2
Output: [12,5,6,13]
Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the previous numbers.


Constraints:
`n == code.length`
`1 <= n <= 100`
`1 <= code[i] <= 100`
`-(n - 1) <= k <= n - 1`",Easy,https://leetcode.com/problems/defuse-the-bomb,,,204,,"you have a bomb to defuse, and your time is running out! your informer will provide you with a circular array `code` of length of `n` and a key `k`. to decrypt the code, you must replace every number. all the numbers are replaced simultaneously. if `k > 0`, replace the `ith` number with the sum of the next `k` numbers. if `k < 0`, replace the `ith` number with the sum of the previous `k` numbers. if `k == 0`, replace the `ith` number with `0`. as `code` is circular, the next element of `code[n-1]` is `code[0]`, and the previous element of `code[0]` is `code[n-1]`. given the circular array `code` and an integer key `k`, return the decrypted code to defuse the bomb!","input: code = [5,7,1,4], k = 3 output: [12,10,16,13] explanation: each number is replaced by the sum of the next 3 numbers. the decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. notice that the numbers wrap around. example 2: input: code = [1,2,3,4], k = 0 output: [0,0,0,0] explanation: when k is zero, the numbers are replaced by 0. example 3: input: code = [2,4,9,3], k = -2 output: [12,5,6,13] explanation: the decrypted code is [3+9, 2+3, 4+2, 9+4]. notice that the numbers wrap around again. if k is negative, the sum is of the previous numbers.",`n == code.length` `1 <= n <= 10^0` `1 <= code[i] <= 10^0` `-(n - 1) <= k <= n - 1`,
1653,Minimum Deletions to Make String Balanced,"You are given a string `s` consisting only of characters `'a'` and `'b'`​​​​.

You can delete any number of characters in `s` to make `s` balanced. `s` is balanced if there is no pair of indices `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j]= 'a'`.

Return the minimum number of deletions needed to make `s` balanced.


Example 1:
Input: s = ""aababbab""
Output: 2
Explanation: You can either:
Delete the characters at 0-indexed positions 2 and 6 (""aababbab"" -> ""aaabbb""), or
Delete the characters at 0-indexed positions 3 and 6 (""aababbab"" -> ""aabbbb"").


Example 2:
Input: s = ""bbaaaaabb""
Output: 2
Explanation: The only solution is to delete the first two characters.


Constraints:
`1 <= s.length <= 105`
`s[i]` is `'a'` or `'b'`​​.",Medium,https://leetcode.com/problems/minimum-deletions-to-make-string-balanced,Microsoft,"String,Greedy",281,,"you are given a string `s` consisting only of characters `'a'` and `'b'`​​​​. you can delete any number of characters in `s` to make `s` balanced. `s` is balanced if there is no pair of indices `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j]= 'a'`. return the minimum number of deletions needed to make `s` balanced.","input: s = ""aababbab"" output: 2 explanation: you can either: delete the characters at 0-indexed positions 2 and 6 (""aababbab"" -> ""aaabbb""), or delete the characters at 0-indexed positions 3 and 6 (""aababbab"" -> ""aabbbb""). example 2: input: s = ""bbaaaaabb"" output: 2 explanation: the only solution is to delete the first two characters.",`1 <= s.length <= 10^5` `s[i]` is `'a'` or `'b'`​​.,
1654,Minimum Jumps to Reach Home,"A certain bug's home is on the x-axis at position `x`. Help them get there from position `0`.

The bug jumps according to the following rules:
It can jump exactly `a` positions forward (to the right).

It can jump exactly `b` positions backward (to the left).

It cannot jump backward twice in a row.

It cannot jump to any `forbidden` positions.

The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.

Given an array of integers `forbidden`, where `forbidden[i]` means that the bug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and `x`, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position `x`, return `-1.`

Example 1:
Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
Output: 3
Explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.


Example 2:
Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
Output: -1

Example 3:
Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
Output: 2
Explanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.


Constraints:
`1 <= forbidden.length <= 1000`
`1 <= a, b, forbidden[i] <= 2000`
`0 <= x <= 2000`
All the elements in `forbidden` are distinct.

Position `x` is not forbidden.",Medium,https://leetcode.com/problems/minimum-jumps-to-reach-home,,,247,,"a certain bug's home is on the x-axis at position `x`. help them get there from position `0`. the bug jumps according to the following rules: it can jump exactly `a` positions forward (to the right). it can jump exactly `b` positions backward (to the left). it cannot jump backward twice in a row. it cannot jump to any `forbidden` positions. the bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers. given an array of integers `forbidden`, where `forbidden[i]` means that the bug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and `x`, return the minimum number of jumps needed for the bug to reach its home. if there is no possible sequence of jumps that lands the bug on position `x`, return `-1.`","input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9 output: 3 explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home. example 2: input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11 output: -1 example 3: input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7 output: 2 explanation: one jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.","`1 <= forbidden.length <= 1000` `1 <= a, b, forbidden[i] <= 2000` `0 <= x <= 2000` all the elements in `forbidden` are distinct. position `x` is not forbidden.",
1655,Distribute Repeating Integers,"You are given an array of `n` integers, `nums`, where there are at most `50` unique values in the array. You are also given an array of `m` customer order quantities, `quantity`, where `quantity[i]` is the amount of integers the `ith` customer ordered. Determine if it is possible to distribute `nums` such that:
The `ith` customer gets exactly `quantity[i]` integers,
The integers the `ith` customer gets are all equal, and
Every customer is satisfied.

Return `true` if it is possible to distribute `nums` according to the above conditions.


Example 1:
Input: nums = [1,2,3,4], quantity = [2]
Output: false
Explanation: The 0th customer cannot be given two different integers.


Example 2:
Input: nums = [1,2,3,3], quantity = [2]
Output: true
Explanation: The 0th customer is given [3,3]. The integers [1,2] are not used.


Example 3:
Input: nums = [1,1,2,2], quantity = [2,2]
Output: true
Explanation: The 0th customer is given [1,1], and the 1st customer is given [2,2].


Example 4:
Input: nums = [1,1,2,3], quantity = [2,2]
Output: false
Explanation: Although the 0th customer could be given [1,1], the 1st customer cannot be satisfied.


Example 5:
Input: nums = [1,1,1,1,1], quantity = [2,3]
Output: true
Explanation: The 0th customer is given [1,1], and the 1st customer is given [1,1,1].


Constraints:
`n == nums.length`
`1 <= n <= 105`
`1 <= nums[i] <= 1000`
`m == quantity.length`
`1 <= m <= 10`
`1 <= quantity[i] <= 105`
There are at most `50` unique values in `nums`.",Hard,https://leetcode.com/problems/distribute-repeating-integers,Google,"Dynamic Programming,Backtracking",115,,"you are given an array of `n` integers, `nums`, where there are at most `50` unique values in the array. you are also given an array of `m` customer order quantities, `quantity`, where `quantity[i]` is the amount of integers the `ith` customer ordered. determine if it is possible to distribute `nums` such that: the `ith` customer gets exactly `quantity[i]` integers, the integers the `ith` customer gets are all equal, and every customer is satisfied. return `true` if it is possible to distribute `nums` according to the above conditions.","input: nums = [1,2,3,4], quantity = [2] output: false explanation: the 0th customer cannot be given two different integers. example 2: input: nums = [1,2,3,3], quantity = [2] output: true explanation: the 0th customer is given [3,3]. the integers [1,2] are not used. example 3: input: nums = [1,1,2,2], quantity = [2,2] output: true explanation: the 0th customer is given [1,1], and the 1st customer is given [2,2]. example 4: input: nums = [1,1,2,3], quantity = [2,2] output: false explanation: although the 0th customer could be given [1,1], the 1st customer cannot be satisfied. example 5: input: nums = [1,1,1,1,1], quantity = [2,3] output: true explanation: the 0th customer is given [1,1], and the 1st customer is given [1,1,1].",`n == nums.length` `1 <= n <= 10^5` `1 <= nums[i] <= 1000` `m == quantity.length` `1 <= m <= 10` `1 <= quantity[i] <= 10^5` there are at most `50` unique values in `nums`.,
1656,Design an Ordered Stream,"There is a stream of `n` `(idKey, value)` pairs arriving in an arbitrary order, where `idKey` is an integer between `1` and `n` and `value` is a string. No two pairs have the same `id`.

Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.

Implement the `OrderedStream` class:
`OrderedStream(int n)` Constructs the stream to take `n` values.

`String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.


Example:
Input
[""OrderedStream"", ""insert"", ""insert"", ""insert"", ""insert"", ""insert""]
[[5], [3, ""ccccc""], [1, ""aaaaa""], [2, ""bbbbb""], [5, ""eeeee""], [4, ""ddddd""]]
Output
[null, [], [""aaaaa""], [""bbbbb"", ""ccccc""], [], [""ddddd"", ""eeeee""]]
Explanation
// Note that the values ordered by ID is [""aaaaa"", ""bbbbb"", ""ccccc"", ""ddddd"", ""eeeee""].

OrderedStream os = new OrderedStream(5);
os.insert(3, ""ccccc""); // Inserts (3, ""ccccc""), returns [].

os.insert(1, ""aaaaa""); // Inserts (1, ""aaaaa""), returns [""aaaaa""].

os.insert(2, ""bbbbb""); // Inserts (2, ""bbbbb""), returns [""bbbbb"", ""ccccc""].

os.insert(5, ""eeeee""); // Inserts (5, ""eeeee""), returns [].

os.insert(4, ""ddddd""); // Inserts (4, ""ddddd""), returns [""ddddd"", ""eeeee""].

// Concatentating all the chunks returned:
// [] + [""aaaaa""] + [""bbbbb"", ""ccccc""] + [] + [""ddddd"", ""eeeee""] = [""aaaaa"", ""bbbbb"", ""ccccc"", ""ddddd"", ""eeeee""]
// The resulting order is the same as the order above.


Constraints:
`1 <= n <= 1000`
`1 <= id <= n`
`value.length == 5`
`value` consists only of lowercase letters.

Each call to `insert` will have a unique `id.`
Exactly `n` calls will be made to `insert`.",Easy,https://leetcode.com/problems/design-an-ordered-stream,Bloomberg,"Array,Design",88,,"there is a stream of `n` `(idkey, value)` pairs arriving in an arbitrary order, where `idkey` is an integer between `1` and `n` and `value` is a string. no two pairs have the same `id`. design a stream that returns the values in increasing order of their ids by returning a chunk (list) of values after each insertion. the concatenation of all the chunks should result in a list of the sorted values. implement the `orderedstream` class: `orderedstream(int n)` constructs the stream to take `n` values. `string[] insert(int idkey, string value)` inserts the pair `(idkey, value)` into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.","input [""orderedstream"", ""insert"", ""insert"", ""insert"", ""insert"", ""insert""] [[5], [3, ""ccccc""], [1, ""aaaaa""], [2, ""bbbbb""], [5, ""eeeee""], [4, ""ddddd""]] output [null, [], [""aaaaa""], [""bbbbb"", ""ccccc""], [], [""ddddd"", ""eeeee""]] explanation // note that the values ordered by id is [""aaaaa"", ""bbbbb"", ""ccccc"", ""ddddd"", ""eeeee""]. orderedstream os = new orderedstream(5); os.insert(3, ""ccccc""); // inserts (3, ""ccccc""), returns []. os.insert(1, ""aaaaa""); // inserts (1, ""aaaaa""), returns [""aaaaa""]. os.insert(2, ""bbbbb""); // inserts (2, ""bbbbb""), returns [""bbbbb"", ""ccccc""]. os.insert(5, ""eeeee""); // inserts (5, ""eeeee""), returns []. os.insert(4, ""ddddd""); // inserts (4, ""ddddd""), returns [""ddddd"", ""eeeee""]. // concatentating all the chunks returned: // [] + [""aaaaa""] + [""bbbbb"", ""ccccc""] + [] + [""ddddd"", ""eeeee""] = [""aaaaa"", ""bbbbb"", ""ccccc"", ""ddddd"", ""eeeee""] // the resulting order is the same as the order above.",`1 <= n <= 1000` `1 <= id <= n` `value.length == 5` `value` consists only of lowercase letters. each call to `insert` will have a unique `id.` exactly `n` calls will be made to `insert`.,
1657,Determine if Two Strings Are Close,"Two strings are considered close if you can attain one from the other using the following operations:
Operation 1: Swap any two existing characters.

	
For example, `abcde -> aecdb`
Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.

	
For example, `aacabb -> bbcbaa` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s)
You can use the operations on either string as many times as necessary.

Given two strings, `word1` and `word2`, return `true` if `word1` and `word2` are close, and `false` otherwise.


Example 1:
Input: word1 = ""abc"", word2 = ""bca""
Output: true
Explanation: You can attain word2 from word1 in 2 operations.

Apply Operation 1: ""abc"" -> ""acb""
Apply Operation 1: ""acb"" -> ""bca""

Example 2:
Input: word1 = ""a"", word2 = ""aa""
Output: false
Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.


Example 3:
Input: word1 = ""cabbba"", word2 = ""abbccc""
Output: true
Explanation: You can attain word2 from word1 in 3 operations.

Apply Operation 1: ""cabbba"" -> ""caabbb""
`Apply Operation 2: ""`caabbb"" -> ""baaccc""
Apply Operation 2: ""baaccc"" -> ""abbccc""

Example 4:
Input: word1 = ""cabbba"", word2 = ""aabbss""
Output: false
Explanation: It is impossible to attain word2 from word1, or vice versa, in any amount of operations.


Constraints:
`1 <= word1.length, word2.length <= 105`
`word1` and `word2` contain only lowercase English letters.",Medium,https://leetcode.com/problems/determine-if-two-strings-are-close,Postmates,Greedy,416,"[Buddy Strings, /problems/buddy-strings/, Easy], [Minimum Swaps to Make Strings Equal, /problems/minimum-swaps-to-make-strings-equal/, Medium], [Minimum Number of Steps to Make Two Strings Anagram, /problems/minimum-number-of-steps-to-make-two-strings-anagram/, Medium]","two strings are considered close if you can attain one from the other using the following operations: operation 1: swap any two existing characters. for example, `abcde -> aecdb` operation 2: transform every occurrence of one existing character into another existing character, and do the same with the other character. for example, `aacabb -> bbcbaa` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s) you can use the operations on either string as many times as necessary. given two strings, `word1` and `word2`, return `true` if `word1` and `word2` are close, and `false` otherwise.","input: word1 = ""abc"", word2 = ""bca"" output: true explanation: you can attain word2 from word1 in 2 operations. apply operation 1: ""abc"" -> ""acb"" apply operation 1: ""acb"" -> ""bca"" example 2: input: word1 = ""a"", word2 = ""aa"" output: false explanation: it is impossible to attain word2 from word1, or vice versa, in any number of operations. example 3: input: word1 = ""cabbba"", word2 = ""abbccc"" output: true explanation: you can attain word2 from word1 in 3 operations. apply operation 1: ""cabbba"" -> ""caabbb"" `apply operation 2: ""`caabbb"" -> ""baaccc"" apply operation 2: ""baaccc"" -> ""abbccc"" example 4: input: word1 = ""cabbba"", word2 = ""aabbss"" output: false explanation: it is impossible to attain word2 from word1, or vice versa, in any amount of operations.","`1 <= word1.length, word2.length <= 10^5` `word1` and `word2` contain only lowercase english letters.",
1658,Minimum Operations to Reduce X to Zero,"You are given an integer array `nums` and an integer `x`. In one operation, you can either remove the leftmost or the rightmost element from the array `nums` and subtract its value from `x`. Note that this modifies the array for future operations.

Return the minimum number of operations to reduce `x` to exactly `0` if it's possible, otherwise, return `-1`.


Example 1:
Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to remove the last two elements to reduce x to zero.


Example 2:
Input: nums = [5,6,7,8,9], x = 4
Output: -1

Example 3:
Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.


Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 104`
`1 <= x <= 109`",Medium,https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero,Google,"Two Pointers,Binary Search,Greedy,Sliding Window",789,"[Minimum Size Subarray Sum, /problems/minimum-size-subarray-sum/, Medium], [Subarray Sum Equals K, /problems/subarray-sum-equals-k/, Medium]","you are given an integer array `nums` and an integer `x`. in one operation, you can either remove the leftmost or the rightmost element from the array `nums` and subtract its value from `x`. note that this modifies the array for future operations. return the minimum number of operations to reduce `x` to exactly `0` if it's possible, otherwise, return `-1`.","input: nums = [1,1,4,2,3], x = 5 output: 2 explanation: the optimal solution is to remove the last two elements to reduce x to zero. example 2: input: nums = [5,6,7,8,9], x = 4 output: -1 example 3: input: nums = [3,2,20,1,1,3], x = 10 output: 5 explanation: the optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 10^4` `1 <= x <= 10^9`,
1659,Maximize Grid Happiness,"You are given four integers, `m`, `n`, `introvertsCount`, and `extrovertsCount`. You have an `m x n` grid, and there are two types of people: introverts and extroverts. There are `introvertsCount` introverts and `extrovertsCount` extroverts.

You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid.

The happiness of each person is calculated as follows:
Introverts start with `120` happiness and lose `30` happiness for each neighbor (introvert or extrovert).

Extroverts start with `40` happiness and gain `20` happiness for each neighbor (introvert or extrovert).

Neighbors live in the directly adjacent cells north, east, south, and west of a person's cell.

The grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.


Example 1:
Input: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2
Output: 240
Explanation: Assume the grid is 1-indexed with coordinates (row, column).

We can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).

- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120
- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60
- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60
The grid happiness is 120 + 60 + 60 = 240.

The above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.


Example 2:
Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1
Output: 260
Explanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).

- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90
- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80
- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90
The grid happiness is 90 + 80 + 90 = 260.


Example 3:
Input: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0
Output: 240

Constraints:
`1 <= m, n <= 5`
`0 <= introvertsCount, extrovertsCount <= min(m * n, 6)`",Hard,https://leetcode.com/problems/maximize-grid-happiness,Salesforce,"Dynamic Programming,Backtracking",128,,"you are given four integers, `m`, `n`, `introvertscount`, and `extrovertscount`. you have an `m x n` grid, and there are two types of people: introverts and extroverts. there are `introvertscount` introverts and `extrovertscount` extroverts. you should decide how many people you want to live in the grid and assign each of them one grid cell. note that you do not have to have all the people living in the grid. the happiness of each person is calculated as follows: introverts start with `120` happiness and lose `30` happiness for each neighbor (introvert or extrovert). extroverts start with `40` happiness and gain `20` happiness for each neighbor (introvert or extrovert). neighbors live in the directly adjacent cells north, east, south, and west of a person's cell. the grid happiness is the sum of each person's happiness. return the maximum possible grid happiness.","input: m = 2, n = 3, introvertscount = 1, extrovertscount = 2 output: 240 explanation: assume the grid is 1-indexed with coordinates (row, column). we can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3). - introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120 - extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60 - extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60 the grid happiness is 120 + 60 + 60 = 240. the above figure shows the grid in this example with each person's happiness. the introvert stays in the light green cell while the extroverts live on the light purple cells. example 2: input: m = 3, n = 1, introvertscount = 2, extrovertscount = 1 output: 260 explanation: place the two introverts in (1,1) and (3,1) and the extrovert at (2,1). - introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90 - extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80 - introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90 the grid happiness is 90 + 80 + 90 = 260. example 3: input: m = 2, n = 2, introvertscount = 4, extrovertscount = 0 output: 240","`1 <= m, n <= 5` `0 <= introvertscount, extrovertscount <= min(m * n, 6)`",
1660,Correct a Binary Tree,"You have a binary tree with a small defect. There is exactly one invalid node where its right child incorrectly points to another node at the same depth but to the invalid node's right.

Given the root of the binary tree with this defect, `root`, return the root of the binary tree after removing this invalid node and every node underneath it (minus the node it incorrectly points to).

Custom testing:
The test input is read as 3 lines:
`TreeNode root`
`int fromNode` (not available to `correctBinaryTree`)
`int toNode` (not available to `correctBinaryTree`)
After the binary tree rooted at `root` is parsed, the `TreeNode` with value of `fromNode` will have its right child pointer pointing to the `TreeNode` with a value of `toNode`. Then, `root` is passed to `correctBinaryTree`.


Example 1:
Input: root = [1,2,3], fromNode = 2, toNode = 3
Output: [1,null,3]
Explanation: The node with value 2 is invalid, so remove it.


Example 2:
Input: root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4
Output: [8,3,1,null,null,9,4,null,null,5,6]
Explanation: The node with value 7 is invalid, so remove it and the node underneath it, node 2.


Constraints:
The number of nodes in the tree is in the range `[3, 104]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`fromNode != toNode`
`fromNode` and `toNode` will exist in the tree and will be on the same depth.

`toNode` is to the right of `fromNode`.

`fromNode.right` is `null` in the initial tree from the test data.",Medium,https://leetcode.com/problems/correct-a-binary-tree,Google,Tree,72,"[Flatten Binary Tree to Linked List, /problems/flatten-binary-tree-to-linked-list/, Medium], [Flatten a Multilevel Doubly Linked List, /problems/flatten-a-multilevel-doubly-linked-list/, Medium]","you have a binary tree with a small defect. there is exactly one invalid node where its right child incorrectly points to another node at the same depth but to the invalid node's right. given the root of the binary tree with this defect, `root`, return the root of the binary tree after removing this invalid node and every node underneath it (minus the node it incorrectly points to). custom testing: the test input is read as 3 lines: `treenode root` `int fromnode` (not available to `correctbinarytree`) `int tonode` (not available to `correctbinarytree`) after the binary tree rooted at `root` is parsed, the `treenode` with value of `fromnode` will have its right child pointer pointing to the `treenode` with a value of `tonode`. then, `root` is passed to `correctbinarytree`.","input: root = [1,2,3], fromnode = 2, tonode = 3 output: [1,null,3] explanation: the node with value 2 is invalid, so remove it. example 2: input: root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromnode = 7, tonode = 4 output: [8,3,1,null,null,9,4,null,null,5,6] explanation: the node with value 7 is invalid, so remove it and the node underneath it, node 2.","the number of nodes in the tree is in the range `[3, 10^4]`. `-10^9 <= node.val <= 10^9` all `node.val` are unique. `fromnode != tonode` `fromnode` and `tonode` will exist in the tree and will be on the same depth. `tonode` is to the right of `fromnode`. `fromnode.right` is `null` in the initial tree from the test data.",
1661,Average Time of Process per Machine,SQL Schema,Easy,https://leetcode.com/problems/average-time-of-process-per-machine,Facebook,,38,,sql schema,,,
1662,Check If Two String Arrays are Equivalent,"Given two string arrays `word1` and `word2`, return `true` if the two arrays represent the same string, and `false` otherwise.

A string is represented by an array if the array elements concatenated in order forms the string.


Example 1:
Input: word1 = [""ab"", ""c""], word2 = [""a"", ""bc""]
Output: true
Explanation:
word1 represents string ""ab"" + ""c"" -> ""abc""
word2 represents string ""a"" + ""bc"" -> ""abc""
The strings are the same, so return true.


Example 2:
Input: word1 = [""a"", ""cb""], word2 = [""ab"", ""c""]
Output: false

Example 3:
Input: word1  = [""abc"", ""d"", ""defg""], word2 = [""abcddefg""]
Output: true

Constraints:
`1 <= word1.length, word2.length <= 103`
`1 <= word1[i].length, word2[i].length <= 103`
`1 <= sum(word1[i].length), sum(word2[i].length) <= 103`
`word1[i]` and `word2[i]` consist of lowercase letters.",Easy,https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent,Facebook,String,336,,"given two string arrays `word1` and `word2`, return `true` if the two arrays represent the same string, and `false` otherwise. a string is represented by an array if the array elements concatenated in order forms the string.","input: word1 = [""ab"", ""c""], word2 = [""a"", ""bc""] output: true explanation: word1 represents string ""ab"" + ""c"" -> ""abc"" word2 represents string ""a"" + ""bc"" -> ""abc"" the strings are the same, so return true. example 2: input: word1 = [""a"", ""cb""], word2 = [""ab"", ""c""] output: false example 3: input: word1 = [""abc"", ""d"", ""defg""], word2 = [""abcddefg""] output: true","`1 <= word1.length, word2.length <= 10^3` `1 <= word1[i].length, word2[i].length <= 10^3` `1 <= sum(word1[i].length), sum(word2[i].length) <= 10^3` `word1[i]` and `word2[i]` consist of lowercase letters.",
1663,Smallest String With A Given Numeric Value,"The numeric value of a lowercase character is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on.

The numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string `""abe""` is equal to `1 + 2 + 5 = 8`.

You are given two integers `n` and `k`. Return the lexicographically smallest string with length equal to `n` and numeric value equal to `k`.

Note that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.


Example 1:
Input: n = 3, k = 27
Output: ""aay""
Explanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.


Example 2:
Input: n = 5, k = 73
Output: ""aaszz""

Constraints:
`1 <= n <= 105`
`n <= k <= 26 * n`",Medium,https://leetcode.com/problems/smallest-string-with-a-given-numeric-value,Lendingkart,Greedy,390,,"the numeric value of a lowercase character is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on. the numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. for example, the numeric value of the string `""abe""` is equal to `1 + 2 + 5 = 8`. you are given two integers `n` and `k`. return the lexicographically smallest string with length equal to `n` and numeric value equal to `k`. note that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.","input: n = 3, k = 27 output: ""aay"" explanation: the numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3. example 2: input: n = 5, k = 73 output: ""aaszz""",`1 <= n <= 10^5` `n <= k <= 26 * n`,
1664,Ways to Make a Fair Array,"You are given an integer array `nums`. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.

For example, if `nums = [6,1,7,4,1]`:
Choosing to remove index `1` results in `nums = [6,7,4,1]`.

Choosing to remove index `2` results in `nums = [6,1,4,1]`.

Choosing to remove index `4` results in `nums = [6,1,7,4]`.

An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.

Return the number of indices that you could choose such that after the removal, `nums` is fair. 

Example 1:
Input: nums = [2,1,6,4]
Output: 1
Explanation:
Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.

Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.

Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.

Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.

There is 1 index that you can remove to make nums fair.


Example 2:
Input: nums = [1,1,1]
Output: 3
Explanation: You can remove any index and the remaining array is fair.


Example 3:
Input: nums = [1,2,3]
Output: 0
Explanation: You cannot make a fair array after removing any index.


Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 104`",Medium,https://leetcode.com/problems/ways-to-make-a-fair-array,Microsoft,"Dynamic Programming,Greedy",401,,"you are given an integer array `nums`. you can choose exactly one index (0-indexed) and remove the element. notice that the index of the elements may change after the removal. for example, if `nums = [6,1,7,4,1]`: choosing to remove index `1` results in `nums = [6,7,4,1]`. choosing to remove index `2` results in `nums = [6,1,4,1]`. choosing to remove index `4` results in `nums = [6,1,7,4]`. an array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values. return the number of indices that you could choose such that after the removal, `nums` is fair.","input: nums = [2,1,6,4] output: 1 explanation: remove index 0: [1,6,4] -> even sum: 1 + 4 = 5. odd sum: 6. not fair. remove index 1: [2,6,4] -> even sum: 2 + 4 = 6. odd sum: 6. fair. remove index 2: [2,1,4] -> even sum: 2 + 4 = 6. odd sum: 1. not fair. remove index 3: [2,1,6] -> even sum: 2 + 6 = 8. odd sum: 1. not fair. there is 1 index that you can remove to make nums fair. example 2: input: nums = [1,1,1] output: 3 explanation: you can remove any index and the remaining array is fair. example 3: input: nums = [1,2,3] output: 0 explanation: you cannot make a fair array after removing any index.",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 10^4`,
1665,Minimum Initial Energy to Finish Tasks,"You are given an array `tasks` where `tasks[i] = [actuali, minimumi]`:
`actuali` is the actual amount of energy you spend to finish the `ith` task.

`minimumi` is the minimum amount of energy you require to begin the `ith` task.

For example, if the task is `[10, 12]` and your current energy is `11`, you cannot start this task. However, if your current energy is `13`, you can complete this task, and your energy will be `3` after finishing it.

You can finish the tasks in any order you like.

Return the minimum initial amount of energy you will need to finish all the tasks.


Example 1:
Input: tasks = [[1,2],[2,4],[4,8]]
Output: 8
Explanation:
Starting with 8 energy, we finish the tasks in the following order:
    - 3rd task. Now energy = 8 - 4 = 4.

    - 2nd task. Now energy = 4 - 2 = 2.

    - 1st task. Now energy = 2 - 1 = 1.

Notice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.


Example 2:
Input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]
Output: 32
Explanation:
Starting with 32 energy, we finish the tasks in the following order:
    - 1st task. Now energy = 32 - 1 = 31.

    - 2nd task. Now energy = 31 - 2 = 29.

    - 3rd task. Now energy = 29 - 10 = 19.

    - 4th task. Now energy = 19 - 10 = 9.

    - 5th task. Now energy = 9 - 8 = 1.


Example 3:
Input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]
Output: 27
Explanation:
Starting with 27 energy, we finish the tasks in the following order:
    - 5th task. Now energy = 27 - 5 = 22.

    - 2nd task. Now energy = 22 - 2 = 20.

    - 3rd task. Now energy = 20 - 3 = 17.

    - 1st task. Now energy = 17 - 1 = 16.

    - 4th task. Now energy = 16 - 4 = 12.

    - 6th task. Now energy = 12 - 6 = 6.


Constraints:
`1 <= tasks.length <= 105`
`1 <= actual​i <= minimumi <= 104`",Hard,https://leetcode.com/problems/minimum-initial-energy-to-finish-tasks,Akuna Capital,Greedy,207,,"you are given an array `tasks` where `tasks[i] = [actuali, minimumi]`: `actuali` is the actual amount of energy you spend to finish the `ith` task. `minimumi` is the minimum amount of energy you require to begin the `ith` task. for example, if the task is `[10, 12]` and your current energy is `11`, you cannot start this task. however, if your current energy is `13`, you can complete this task, and your energy will be `3` after finishing it. you can finish the tasks in any order you like. return the minimum initial amount of energy you will need to finish all the tasks.","input: tasks = [[1,2],[2,4],[4,8]] output: 8 explanation: starting with 8 energy, we finish the tasks in the following order: - 3rd task. now energy = 8 - 4 = 4. - 2nd task. now energy = 4 - 2 = 2. - 1st task. now energy = 2 - 1 = 1. notice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task. example 2: input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]] output: 32 explanation: starting with 32 energy, we finish the tasks in the following order: - 1st task. now energy = 32 - 1 = 31. - 2nd task. now energy = 31 - 2 = 29. - 3rd task. now energy = 29 - 10 = 19. - 4th task. now energy = 19 - 10 = 9. - 5th task. now energy = 9 - 8 = 1. example 3: input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]] output: 27 explanation: starting with 27 energy, we finish the tasks in the following order: - 5th task. now energy = 27 - 5 = 22. - 2nd task. now energy = 22 - 2 = 20. - 3rd task. now energy = 20 - 3 = 17. - 1st task. now energy = 17 - 1 = 16. - 4th task. now energy = 16 - 4 = 12. - 6th task. now energy = 12 - 6 = 6.",`1 <= tasks.length <= 10^5` `1 <= actual​i <= minimumi <= 10^4`,
1666,Change the Root of a Binary Tree,"Given the `root` of a binary tree and a `leaf` node, reroot the tree so that the `leaf` is the new root.

You can reroot the tree with the following steps for each node `cur` on the path starting from the `leaf` up to the `root`​​​ excluding the root:
If `cur` has a left child, then that child becomes `cur`'s right child.

`cur`'s original parent becomes `cur`'s left child. Note that in this process the original parent's pointer to `cur` becomes `null`, making it have at most one child.

Return the new root of the rerooted tree.

Note: Ensure that your solution sets the `Node.parent` pointers correctly after rerooting or you will receive ""Wrong Answer"".


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 7
Output: [7,2,null,5,4,3,6,null,null,null,1,null,null,0,8]

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 0
Output: [0,1,null,3,8,5,null,null,null,6,2,null,null,7,4]

Constraints:
The number of nodes in the tree is in the range `[2, 100]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`leaf` exist in the tree.",Medium,https://leetcode.com/problems/change-the-root-of-a-binary-tree,Google,"Tree,Depth-first Search",26,,"given the `root` of a binary tree and a `leaf` node, reroot the tree so that the `leaf` is the new root. you can reroot the tree with the following steps for each node `cur` on the path starting from the `leaf` up to the `root`​​​ excluding the root: if `cur` has a left child, then that child becomes `cur`'s right child. `cur`'s original parent becomes `cur`'s left child. note that in this process the original parent's pointer to `cur` becomes `null`, making it have at most one child. return the new root of the rerooted tree. note: ensure that your solution sets the `node.parent` pointers correctly after rerooting or you will receive ""wrong answer"".","input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 7 output: [7,2,null,5,4,3,6,null,null,null,1,null,null,0,8] example 2: input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 0 output: [0,1,null,3,8,5,null,null,null,6,2,null,null,7,4]","the number of nodes in the tree is in the range `[2, 10^0]`. `-10^9 <= node.val <= 10^9` all `node.val` are unique. `leaf` exist in the tree.",
1667,Fix Names in a Table,SQL Schema,Easy,https://leetcode.com/problems/fix-names-in-a-table,,,16,,sql schema,,,
1668,Maximum Repeating Substring,"For a string `sequence`, a string `word` is `k`-repeating if `word` concatenated `k` times is a substring of `sequence`. The `word`'s maximum `k`-repeating value is the highest value `k` where `word` is `k`-repeating in `sequence`. If `word` is not a substring of `sequence`, `word`'s maximum `k`-repeating value is `0`.

Given strings `sequence` and `word`, return the maximum `k`-repeating value of `word` in `sequence`.


Example 1:
Input: sequence = ""ababc"", word = ""ab""
Output: 2
Explanation: ""abab"" is a substring in ""ababc"".


Example 2:
Input: sequence = ""ababc"", word = ""ba""
Output: 1
Explanation: ""ba"" is a substring in ""ababc"". ""baba"" is not a substring in ""ababc"".


Example 3:
Input: sequence = ""ababc"", word = ""ac""
Output: 0
Explanation: ""ac"" is not a substring in ""ababc"". 

Constraints:
`1 <= sequence.length <= 100`
`1 <= word.length <= 100`
`sequence` and `word` contains only lowercase English letters.",Easy,https://leetcode.com/problems/maximum-repeating-substring,Uber,String,150,"[Detect Pattern of Length M Repeated K or More Times, /problems/detect-pattern-of-length-m-repeated-k-or-more-times/, Easy]","for a string `sequence`, a string `word` is `k`-repeating if `word` concatenated `k` times is a substring of `sequence`. the `word`'s maximum `k`-repeating value is the highest value `k` where `word` is `k`-repeating in `sequence`. if `word` is not a substring of `sequence`, `word`'s maximum `k`-repeating value is `0`. given strings `sequence` and `word`, return the maximum `k`-repeating value of `word` in `sequence`.","input: sequence = ""ababc"", word = ""ab"" output: 2 explanation: ""abab"" is a substring in ""ababc"". example 2: input: sequence = ""ababc"", word = ""ba"" output: 1 explanation: ""ba"" is a substring in ""ababc"". ""baba"" is not a substring in ""ababc"". example 3: input: sequence = ""ababc"", word = ""ac"" output: 0 explanation: ""ac"" is not a substring in ""ababc"".",`1 <= sequence.length <= 10^0` `1 <= word.length <= 10^0` `sequence` and `word` contains only lowercase english letters.,
1669,Merge In Between Linked Lists,"You are given two linked lists: `list1` and `list2` of sizes `n` and `m` respectively.

Remove `list1`'s nodes from the `ath` node to the `bth` node, and put `list2` in their place.

The blue edges and nodes in the following figure incidate the result:
Build the result list and return its head.


Example 1:
Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
Output: [0,1,2,1000000,1000001,1000002,5]
Explanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.


Example 2:
Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]
Output: [0,1,1000000,1000001,1000002,1000003,1000004,6]
Explanation: The blue edges and nodes in the above figure indicate the result.


Constraints:
`3 <= list1.length <= 104`
`1 <= a <= b < list1.length - 1`
`1 <= list2.length <= 104`",Medium,https://leetcode.com/problems/merge-in-between-linked-lists,VMware,Linked List,287,,"you are given two linked lists: `list1` and `list2` of sizes `n` and `m` respectively. remove `list1`'s nodes from the `ath` node to the `bth` node, and put `list2` in their place. the blue edges and nodes in the following figure incidate the result: build the result list and return its head.","input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002] output: [0,1,2,1000000,1000001,1000002,5] explanation: we remove the nodes 3 and 4 and put the entire list2 in their place. the blue edges and nodes in the above figure indicate the result. example 2: input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004] output: [0,1,1000000,1000001,1000002,1000003,1000004,6] explanation: the blue edges and nodes in the above figure indicate the result.",`3 <= list1.length <= 10^4` `1 <= a <= b < list1.length - 1` `1 <= list2.length <= 10^4`,
1670,Design Front Middle Back Queue,"Design a queue that supports `push` and `pop` operations in the front, middle, and back.

Implement the `FrontMiddleBack` class:
`FrontMiddleBack()` Initializes the queue.

`void pushFront(int val)` Adds `val` to the front of the queue.

`void pushMiddle(int val)` Adds `val` to the middle of the queue.

`void pushBack(int val)` Adds `val` to the back of the queue.

`int popFront()` Removes the front element of the queue and returns it. If the queue is empty, return `-1`.

`int popMiddle()` Removes the middle element of the queue and returns it. If the queue is empty, return `-1`.

`int popBack()` Removes the back element of the queue and returns it. If the queue is empty, return `-1`.

Notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:
Pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`.

Popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.


Example 1:
Input:
[""FrontMiddleBackQueue"", ""pushFront"", ""pushBack"", ""pushMiddle"", ""pushMiddle"", ""popFront"", ""popMiddle"", ""popMiddle"", ""popBack"", ""popFront""]
[[], [1], [2], [3], [4], [], [], [], [], []]
Output:
[null, null, null, null, null, 1, 3, 4, 2, -1]
Explanation:
FrontMiddleBackQueue q = new FrontMiddleBackQueue();
q.pushFront(1);   // [1]
q.pushBack(2);    // [1, 2]
q.pushMiddle(3);  // [1, 3, 2]
q.pushMiddle(4);  // [1, 4, 3, 2]
q.popFront();     // return 1 -> [4, 3, 2]
q.popMiddle();    // return 3 -> [4, 2]
q.popMiddle();    // return 4 -> [2]
q.popBack();      // return 2 -> []
q.popFront();     // return -1 -> [] (The queue is empty)

Constraints:
`1 <= val <= 109`
At most `1000` calls will be made to `pushFront`, `pushMiddle`, `pushBack`, `popFront`, `popMiddle`, and `popBack`.",Medium,https://leetcode.com/problems/design-front-middle-back-queue,Amazon,"Linked List,Design,Dequeue",185,"[Design Circular Deque, /problems/design-circular-deque/, Medium], [Design Circular Queue, /problems/design-circular-queue/, Medium]","design a queue that supports `push` and `pop` operations in the front, middle, and back. implement the `frontmiddleback` class: `frontmiddleback()` initializes the queue. `void pushfront(int val)` adds `val` to the front of the queue. `void pushmiddle(int val)` adds `val` to the middle of the queue. `void pushback(int val)` adds `val` to the back of the queue. `int popfront()` removes the front element of the queue and returns it. if the queue is empty, return `-1`. `int popmiddle()` removes the middle element of the queue and returns it. if the queue is empty, return `-1`. `int popback()` removes the back element of the queue and returns it. if the queue is empty, return `-1`. notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. for","pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`. popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`. example 1: input: [""frontmiddlebackqueue"", ""pushfront"", ""pushback"", ""pushmiddle"", ""pushmiddle"", ""popfront"", ""popmiddle"", ""popmiddle"", ""popback"", ""popfront""] [[], [1], [2], [3], [4], [], [], [], [], []] output: [null, null, null, null, null, 1, 3, 4, 2, -1] explanation: frontmiddlebackqueue q = new frontmiddlebackqueue(); q.pushfront(1); // [1] q.pushback(2); // [1, 2] q.pushmiddle(3); // [1, 3, 2] q.pushmiddle(4); // [1, 4, 3, 2] q.popfront(); // return 1 -> [4, 3, 2] q.popmiddle(); // return 3 -> [4, 2] q.popmiddle(); // return 4 -> [2] q.popback(); // return 2 -> [] q.popfront(); // return -1 -> [] (the queue is empty)","`1 <= val <= 10^9` at most `1000` calls will be made to `pushfront`, `pushmiddle`, `pushback`, `popfront`, `popmiddle`, and `popback`.",
1671,Minimum Number of Removals to Make Mountain Array,"You may recall that an array `arr` is a mountain array if and only if:
`arr.length >= 3`
There exists some index `i` (0-indexed) with `0 < i < arr.length - 1` such that:
	
`arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`
`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`
Given an integer array `nums`​​​, return the minimum number of elements to remove to make `nums​​​` a mountain array.


Example 1:
Input: nums = [1,3,1]
Output: 0
Explanation: The array itself is a mountain array so we do not need to remove any elements.


Example 2:
Input: nums = [2,1,1,5,6,2,3,1]
Output: 3
Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].


Example 3:
Input: nums = [4,3,2,1,1,2,3,1]
Output: 4

Example 4:
Input: nums = [1,2,3,4,4,3,2,1]
Output: 1

Constraints:
`3 <= nums.length <= 1000`
`1 <= nums[i] <= 109`
It is guaranteed that you can make a mountain array out of `nums`.",Hard,https://leetcode.com/problems/minimum-number-of-removals-to-make-mountain-array,Microsoft,Dynamic Programming,257,"[Longest Increasing Subsequence, /problems/longest-increasing-subsequence/, Medium], [Longest Mountain in Array, /problems/longest-mountain-in-array/, Medium], [Peak Index in a Mountain Array, /problems/peak-index-in-a-mountain-array/, Easy], [Valid Mountain Array, /problems/valid-mountain-array/, Easy], [Find in Mountain Array, /problems/find-in-mountain-array/, Hard]","you may recall that an array `arr` is a mountain array if and only if: `arr.length >= 3` there exists some index `i` (0-indexed) with `0 < i < arr.length - 1` such that: `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]` `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]` given an integer array `nums`​​​, return the minimum number of elements to remove to make `nums​​​` a mountain array.","input: nums = [1,3,1] output: 0 explanation: the array itself is a mountain array so we do not need to remove any elements. example 2: input: nums = [2,1,1,5,6,2,3,1] output: 3 explanation: one solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1]. example 3: input: nums = [4,3,2,1,1,2,3,1] output: 4 example 4: input: nums = [1,2,3,4,4,3,2,1] output: 1",`3 <= nums.length <= 1000` `1 <= nums[i] <= 10^9` it is guaranteed that you can make a mountain array out of `nums`.,
1672,Richest Customer Wealth,"You are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the amount of money the `i​​​​​​​​​​​th​​​​` customer has in the `j​​​​​​​​​​​th`​​​​ bank. Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.


Example 1:
Input: accounts = [[1,2,3],[3,2,1]]
Output: 6
Explanation:
`1st customer has wealth = 1 + 2 + 3 = 6
``2nd customer has wealth = 3 + 2 + 1 = 6
`Both customers are considered the richest with a wealth of 6 each, so return 6.


Example 2:
Input: accounts = [[1,5],[7,3],[3,5]]
Output: 10
Explanation: 
1st customer has wealth = 6
2nd customer has wealth = 10 
3rd customer has wealth = 8
The 2nd customer is the richest with a wealth of 10.


Example 3:
Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]
Output: 17

Constraints:
`m == accounts.length`
`n == accounts[i].length`
`1 <= m, n <= 50`
`1 <= accounts[i][j] <= 100`",Easy,https://leetcode.com/problems/richest-customer-wealth,Adobe,Array,413,,you are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the amount of money the `i​​​​​​​​​​​th​​​​` customer has in the `j​​​​​​​​​​​th`​​​​ bank. return the wealth that the richest customer has. a customer's wealth is the amount of money they have in all their bank accounts. the richest customer is the customer that has the maximum wealth.,"input: accounts = [[1,2,3],[3,2,1]] output: 6 explanation: `1st customer has wealth = 1 + 2 + 3 = 6 ``2nd customer has wealth = 3 + 2 + 1 = 6 `both customers are considered the richest with a wealth of 6 each, so return 6. example 2: input: accounts = [[1,5],[7,3],[3,5]] output: 10 explanation: 1st customer has wealth = 6 2nd customer has wealth = 10 3rd customer has wealth = 8 the 2nd customer is the richest with a wealth of 10. example 3: input: accounts = [[2,8,7],[7,1,3],[1,9,5]] output: 17","`m == accounts.length` `n == accounts[i].length` `1 <= m, n <= 50` `1 <= accounts[i][j] <= 10^0`",
1673,Find the Most Competitive Subsequence,"Given an integer array `nums` and a positive integer `k`, return the most competitive subsequence of `nums` of size `k`.

An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.

We define that a subsequence `a` is more competitive than a subsequence `b` (of the same length) if in the first position where `a` and `b` differ, subsequence `a` has a number less than the corresponding number in `b`. For example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is at the final number, and `4` is less than `5`.


Example 1:
Input: nums = [3,5,2,6], k = 2
Output: [2,6]
Explanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.


Example 2:
Input: nums = [2,4,3,3,5,4,9,6], k = 4
Output: [2,3,3,4]

Constraints:
`1 <= nums.length <= 105`
`0 <= nums[i] <= 109`
`1 <= k <= nums.length`",Medium,https://leetcode.com/problems/find-the-most-competitive-subsequence,Amazon,"Stack,Heap,Greedy,Queue",722,"[Remove K Digits, /problems/remove-k-digits/, Medium], [Smallest Subsequence of Distinct Characters, /problems/smallest-subsequence-of-distinct-characters/, Medium]","given an integer array `nums` and a positive integer `k`, return the most competitive subsequence of `nums` of size `k`. an array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array. we define that a subsequence `a` is more competitive than a subsequence `b` (of the same length) if in the first position where `a` and `b` differ, subsequence `a` has a number less than the corresponding number in `b`. for example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is at the final number, and `4` is less than `5`.","input: nums = [3,5,2,6], k = 2 output: [2,6] explanation: among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive. example 2: input: nums = [2,4,3,3,5,4,9,6], k = 4 output: [2,3,3,4]",`1 <= nums.length <= 10^5` `0 <= nums[i] <= 10^9` `1 <= k <= nums.length`,
1674,Minimum Moves to Make Array Complementary,"You are given an integer array `nums` of even length `n` and an integer `limit`. In one move, you can replace any integer from `nums` with another integer between `1` and `limit`, inclusive.

The array `nums` is complementary if for all indices `i` (0-indexed), `nums[i] + nums[n - 1 - i]` equals the same number. For example, the array `[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n - 1 - i] = 5`.

Return the minimum number of moves required to make `nums` complementary.


Example 1:
Input: nums = [1,2,4,3], limit = 4
Output: 1
Explanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).

nums[0] + nums[3] = 1 + 3 = 4.

nums[1] + nums[2] = 2 + 2 = 4.

nums[2] + nums[1] = 2 + 2 = 4.

nums[3] + nums[0] = 3 + 1 = 4.

Therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.


Example 2:
Input: nums = [1,2,2,1], limit = 2
Output: 2
Explanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.


Example 3:
Input: nums = [1,2,1,2], limit = 2
Output: 0
Explanation: nums is already complementary.


Constraints:
`n == nums.length`
`2 <= n <= 105`
`1 <= nums[i] <= limit <= 105`
`n` is even.",Medium,https://leetcode.com/problems/minimum-moves-to-make-array-complementary,CureFit,Greedy,269,,"you are given an integer array `nums` of even length `n` and an integer `limit`. in one move, you can replace any integer from `nums` with another integer between `1` and `limit`, inclusive. the array `nums` is complementary if for all indices `i` (0-indexed), `nums[i] + nums[n - 1 - i]` equals the same number. for example, the array `[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n - 1 - i] = 5`. return the minimum number of moves required to make `nums` complementary.","input: nums = [1,2,4,3], limit = 4 output: 1 explanation: in 1 move, you can change nums to [1,2,2,3] (underlined elements are changed). nums[0] + nums[3] = 1 + 3 = 4. nums[1] + nums[2] = 2 + 2 = 4. nums[2] + nums[1] = 2 + 2 = 4. nums[3] + nums[0] = 3 + 1 = 4. therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary. example 2: input: nums = [1,2,2,1], limit = 2 output: 2 explanation: in 2 moves, you can change nums to [2,2,2,2]. you cannot change any number to 3 since 3 > limit. example 3: input: nums = [1,2,1,2], limit = 2 output: 0 explanation: nums is already complementary.",`n == nums.length` `2 <= n <= 10^5` `1 <= nums[i] <= limit <= 10^5` `n` is even.,
1675,Minimize Deviation in Array,"You are given an array `nums` of `n` positive integers.

You can perform two types of operations on any element of the array any number of times:
If the element is even, divide it by `2`.

	
For example, if the array is `[1,2,3,4]`, then you can do this operation on the last element, and the array will be `[1,2,3,2].`
If the element is odd, multiply it by `2`.

	
For example, if the array is `[1,2,3,4]`, then you can do this operation on the first element, and the array will be `[2,2,3,4].`
The deviation of the array is the maximum difference between any two elements in the array.

Return the minimum deviation the array can have after performing some number of operations.


Example 1:
Input: nums = [1,2,3,4]
Output: 1
Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.


Example 2:
Input: nums = [4,1,5,20,3]
Output: 3
Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.


Example 3:
Input: nums = [2,10,8]
Output: 3

Constraints:
`n == nums.length`
`2 <= n <= 105`
`1 <= nums[i] <= 109`",Hard,https://leetcode.com/problems/minimize-deviation-in-array,Samsung,"Heap,Ordered Map",406,,"you are given an array `nums` of `n` positive integers. you can perform two types of operations on any element of the array any number of times: if the element is even, divide it by `2`. for example, if the array is `[1,2,3,4]`, then you can do this operation on the last element, and the array will be `[1,2,3,2].` if the element is odd, multiply it by `2`. for example, if the array is `[1,2,3,4]`, then you can do this operation on the first element, and the array will be `[2,2,3,4].` the deviation of the array is the maximum difference between any two elements in the array. return the minimum deviation the array can have after performing some number of operations.","input: nums = [1,2,3,4] output: 1 explanation: you can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1. example 2: input: nums = [4,1,5,20,3] output: 3 explanation: you can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3. example 3: input: nums = [2,10,8] output: 3",`n == nums.length` `2 <= n <= 10^5` `1 <= nums[i] <= 10^9`,
1676,Lowest Common Ancestor of a Binary Tree IV,"Given the `root` of a binary tree and an array of `TreeNode` objects `nodes`, return the lowest common ancestor (LCA) of all the nodes in `nodes`. All the nodes will exist in the tree, and all values of the tree's nodes are unique.

Extending the definition of LCA on Wikipedia: ""The lowest common ancestor of `n` nodes `p1`, `p2`, ..., `pn` in a binary tree `T` is the lowest node that has every `pi` as a descendant (where we allow a node to be a descendant of itself) for every valid `i`"". A descendant of a node `x` is a node `y` that is on the path from node `x` to some leaf node.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7]
Output: 2
Explanation: The lowest common ancestor of nodes 4 and 7 is node 2.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [1]
Output: 1
Explanation: The lowest common ancestor of a single node is the node itself.


Example 3:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [7,6,2,4]
Output: 5
Explanation: The lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5.


Example 4:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [0,1,2,3,4,5,6,7,8]
Output: 3
Explanation: The lowest common ancestor of all the nodes is the root node.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

All `nodes[i]` will exist in the tree.

All `nodes[i]` are distinct.",Medium,https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree-iv,Amazon,"Tree,Depth-first Search",97,"[Lowest Common Ancestor of a Binary Search Tree, /problems/lowest-common-ancestor-of-a-binary-search-tree/, Easy], [Lowest Common Ancestor of a Binary Tree, /problems/lowest-common-ancestor-of-a-binary-tree/, Medium], [Lowest Common Ancestor of Deepest Leaves, /problems/lowest-common-ancestor-of-deepest-leaves/, Medium], [Lowest Common Ancestor of a Binary Tree II, /problems/lowest-common-ancestor-of-a-binary-tree-ii/, Medium], [Lowest Common Ancestor of a Binary Tree III, /problems/lowest-common-ancestor-of-a-binary-tree-iii/, Medium], [Lowest Common Ancestor of a Binary Tree IV, /problems/lowest-common-ancestor-of-a-binary-tree-iv/, Medium]","given the `root` of a binary tree and an array of `treenode` objects `nodes`, return the lowest common ancestor (lca) of all the nodes in `nodes`. all the nodes will exist in the tree, and all values of the tree's nodes are unique. extending the definition of lca on wikipedia: ""the lowest common ancestor of `n` nodes `p1`, `p2`, ..., `pn` in a binary tree `t` is the lowest node that has every `pi` as a descendant (where we allow a node to be a descendant of itself) for every valid `i`"". a descendant of a node `x` is a node `y` that is on the path from node `x` to some leaf node.","input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7] output: 2 explanation: the lowest common ancestor of nodes 4 and 7 is node 2. example 2: input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [1] output: 1 explanation: the lowest common ancestor of a single node is the node itself. example 3: input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [7,6,2,4] output: 5 explanation: the lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5. example 4: input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [0,1,2,3,4,5,6,7,8] output: 3 explanation: the lowest common ancestor of all the nodes is the root node.","the number of nodes in the tree is in the range `[1, 10^4]`. `-10^9 <= node.val <= 10^9` all `node.val` are unique. all `nodes[i]` will exist in the tree. all `nodes[i]` are distinct.",
1677,Product's Worth Over Invoices,SQL Schema,Easy,https://leetcode.com/problems/products-worth-over-invoices,,,11,,sql schema,,,
1678,Goal Parser Interpretation,"You own a Goal Parser that can interpret a string `command`. The `command` consists of an alphabet of `""G""`, `""()""` and/or `""(al)""` in some order. The Goal Parser will interpret `""G""` as the string `""G""`, `""()""` as the string `""o""`, and `""(al)""` as the string `""al""`. The interpreted strings are then concatenated in the original order.

Given the string `command`, return the Goal Parser's interpretation of `command`.


Example 1:
Input: command = ""G()(al)""
Output: ""Goal""
Explanation: The Goal Parser interprets the command as follows:
G -> G
() -> o
(al) -> al
The final concatenated result is ""Goal"".


Example 2:
Input: command = ""G()()()()(al)""
Output: ""Gooooal""

Example 3:
Input: command = ""(al)G(al)()()G""
Output: ""alGalooG""

Constraints:
`1 <= command.length <= 100`
`command` consists of `""G""`, `""()""`, and/or `""(al)""` in some order.",Easy,https://leetcode.com/problems/goal-parser-interpretation,,,235,,"you own a goal parser that can interpret a string `command`. the `command` consists of an alphabet of `""g""`, `""()""` and/or `""(al)""` in some order. the goal parser will interpret `""g""` as the string `""g""`, `""()""` as the string `""o""`, and `""(al)""` as the string `""al""`. the interpreted strings are then concatenated in the original order. given the string `command`, return the goal parser's interpretation of `command`.","input: command = ""g()(al)"" output: ""goal"" explanation: the goal parser interprets the command as follows: g -> g () -> o (al) -> al the final concatenated result is ""goal"". example 2: input: command = ""g()()()()(al)"" output: ""gooooal"" example 3: input: command = ""(al)g(al)()()g"" output: ""algaloog""","`1 <= command.length <= 10^0` `command` consists of `""g""`, `""()""`, and/or `""(al)""` in some order.",
1679,Max Number of K-Sum Pairs,"You are given an integer array `nums` and an integer `k`.

In one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array.

Return the maximum number of operations you can perform on the array.


Example 1:
Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.


Example 2:
Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.


Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 109`
`1 <= k <= 109`",Medium,https://leetcode.com/problems/max-number-of-k-sum-pairs,DE Shaw,Hash Table,400,"[Two Sum, /problems/two-sum/, Easy], [Count Good Meals, /problems/count-good-meals/, Medium]","you are given an integer array `nums` and an integer `k`. in one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array. return the maximum number of operations you can perform on the array.","input: nums = [1,2,3,4], k = 5 output: 2 explanation: starting with nums = [1,2,3,4]: - remove numbers 1 and 4, then nums = [2,3] - remove numbers 2 and 3, then nums = [] there are no more pairs that sum up to 5, hence a total of 2 operations. example 2: input: nums = [3,1,3,4,3], k = 6 output: 1 explanation: starting with nums = [3,1,3,4,3]: - remove the first two 3's, then nums = [1,4,3] there are no more pairs that sum up to 6, hence a total of 1 operation.",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 10^9` `1 <= k <= 10^9`,
1680,Concatenation of Consecutive Binary Numbers,"Given an integer `n`, return the decimal value of the binary string formed by concatenating the binary representations of `1` to `n` in order, modulo `109 + 7`.


Example 1:
Input: n = 1
Output: 1
Explanation: ""1"" in binary corresponds to the decimal value 1. 

Example 2:
Input: n = 3
Output: 27
Explanation: In binary, 1, 2, and 3 corresponds to ""1"", ""10"", and ""11"".

After concatenating them, we have ""11011"", which corresponds to the decimal value 27.


Example 3:
Input: n = 12
Output: 505379714
Explanation: The concatenation results in ""1101110010111011110001001101010111100"".

The decimal value of that is 118505380540.

After modulo 109 + 7, the result is 505379714.


Constraints:
`1 <= n <= 105`",Medium,https://leetcode.com/problems/concatenation-of-consecutive-binary-numbers,Amazon,Math,234,,"given an integer `n`, return the decimal value of the binary string formed by concatenating the binary representations of `1` to `n` in order, modulo `109 + 7`.","input: n = 1 output: 1 explanation: ""1"" in binary corresponds to the decimal value 1. example 2: input: n = 3 output: 27 explanation: in binary, 1, 2, and 3 corresponds to ""1"", ""10"", and ""11"". after concatenating them, we have ""11011"", which corresponds to the decimal value 27. example 3: input: n = 12 output: 505379714 explanation: the concatenation results in ""1101110010111011110001001101010111100"". the decimal value of that is 118505380540. after modulo 109 + 7, the result is 505379714.",`1 <= n <= 10^5`,
1681,Minimum Incompatibility,"You are given an integer array `nums`​​​ and an integer `k`. You are asked to distribute this array into `k` subsets of equal size such that there are no two equal elements in the same subset.

A subset's incompatibility is the difference between the maximum and minimum elements in that array.

Return the minimum possible sum of incompatibilities of the `k` subsets after distributing the array optimally, or return `-1` if it is not possible.

A subset is a group integers that appear in the array with no particular order.


Example 1:
Input: nums = [1,2,1,4], k = 2
Output: 4
Explanation: The optimal distribution of subsets is [1,2] and [1,4].

The incompatibility is (2-1) + (4-1) = 4.

Note that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.


Example 2:
Input: nums = [6,3,8,1,3,1,2,2], k = 4
Output: 6
Explanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].

The incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.


Example 3:
Input: nums = [5,3,3,6,3,3], k = 3
Output: -1
Explanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.


Constraints:
`1 <= k <= nums.length <= 16`
`nums.length` is divisible by `k`
`1 <= nums[i] <= nums.length`",Hard,https://leetcode.com/problems/minimum-incompatibility,Microsoft,"Backtracking,Greedy",109,,"you are given an integer array `nums`​​​ and an integer `k`. you are asked to distribute this array into `k` subsets of equal size such that there are no two equal elements in the same subset. a subset's incompatibility is the difference between the maximum and minimum elements in that array. return the minimum possible sum of incompatibilities of the `k` subsets after distributing the array optimally, or return `-1` if it is not possible. a subset is a group integers that appear in the array with no particular order.","input: nums = [1,2,1,4], k = 2 output: 4 explanation: the optimal distribution of subsets is [1,2] and [1,4]. the incompatibility is (2-1) + (4-1) = 4. note that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements. example 2: input: nums = [6,3,8,1,3,1,2,2], k = 4 output: 6 explanation: the optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3]. the incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6. example 3: input: nums = [5,3,3,6,3,3], k = 3 output: -1 explanation: it is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.",`1 <= k <= nums.length <= 16` `nums.length` is divisible by `k` `1 <= nums[i] <= nums.length`,
1682,Longest Palindromic Subsequence II,"A subsequence of a string `s` is considered a good palindromic subsequence if:
It is a subsequence of `s`.

It is a palindrome (has the same value if reversed).

It has an even length.

No two consecutive characters are equal, except the two middle ones.

For example, if `s = ""abcabcabb""`, then `""abba""` is considered a good palindromic subsequence, while `""bcb""` (not even length) and `""bbbb""` (has equal consecutive characters) are not.

Given a string `s`, return the length of the longest good palindromic subsequence in `s`.


Example 1:
Input: s = ""bbabab""
Output: 4
Explanation: The longest good palindromic subsequence of s is ""baab"".


Example 2:
Input: s = ""dcbccacdb""
Output: 4
Explanation: The longest good palindromic subsequence of s is ""dccd"".


Constraints:
`1 <= s.length <= 250`
`s` consists of lowercase English letters.",Medium,https://leetcode.com/problems/longest-palindromic-subsequence-ii,Codenation,"String,Dynamic Programming",49,"[Longest Palindromic Subsequence, /problems/longest-palindromic-subsequence/, Medium]","a subsequence of a string `s` is considered a good palindromic subsequence if: it is a subsequence of `s`. it is a palindrome (has the same value if reversed). it has an even length. no two consecutive characters are equal, except the two middle ones. for example, if `s = ""abcabcabb""`, then `""abba""` is considered a good palindromic subsequence, while `""bcb""` (not even length) and `""bbbb""` (has equal consecutive characters) are not. given a string `s`, return the length of the longest good palindromic subsequence in `s`.","input: s = ""bbabab"" output: 4 explanation: the longest good palindromic subsequence of s is ""baab"". example 2: input: s = ""dcbccacdb"" output: 4 explanation: the longest good palindromic subsequence of s is ""dccd"".",`1 <= s.length <= 250` `s` consists of lowercase english letters.,
1683,Invalid Tweets,SQL Schema,Easy,https://leetcode.com/problems/invalid-tweets,Twitter,,32,,sql schema,,,
1684,Count the Number of Consistent Strings,"You are given a string `allowed` consisting of distinct characters and an array of strings `words`. A string is consistent if all characters in the string appear in the string `allowed`.

Return the number of consistent strings in the array `words`.


Example 1:
Input: allowed = ""ab"", words = [""ad"",""bd"",""aaab"",""baa"",""badab""]
Output: 2
Explanation: Strings ""aaab"" and ""baa"" are consistent since they only contain characters 'a' and 'b'.


Example 2:
Input: allowed = ""abc"", words = [""a"",""b"",""c"",""ab"",""ac"",""bc"",""abc""]
Output: 7
Explanation: All strings are consistent.


Example 3:
Input: allowed = ""cad"", words = [""cc"",""acd"",""b"",""ba"",""bac"",""bad"",""ac"",""d""]
Output: 4
Explanation: Strings ""cc"", ""acd"", ""ac"", and ""d"" are consistent.


Constraints:
`1 <= words.length <= 104`
`1 <= allowed.length <= 26`
`1 <= words[i].length <= 10`
The characters in `allowed` are distinct.

`words[i]` and `allowed` contain only lowercase English letters.",Easy,https://leetcode.com/problems/count-the-number-of-consistent-strings,Robinhood,String,255,,you are given a string `allowed` consisting of distinct characters and an array of strings `words`. a string is consistent if all characters in the string appear in the string `allowed`. return the number of consistent strings in the array `words`.,"input: allowed = ""ab"", words = [""ad"",""bd"",""aaab"",""baa"",""badab""] output: 2 explanation: strings ""aaab"" and ""baa"" are consistent since they only contain characters 'a' and 'b'. example 2: input: allowed = ""abc"", words = [""a"",""b"",""c"",""ab"",""ac"",""bc"",""abc""] output: 7 explanation: all strings are consistent. example 3: input: allowed = ""cad"", words = [""cc"",""acd"",""b"",""ba"",""bac"",""bad"",""ac"",""d""] output: 4 explanation: strings ""cc"", ""acd"", ""ac"", and ""d"" are consistent.",`1 <= words.length <= 10^4` `1 <= allowed.length <= 26` `1 <= words[i].length <= 10` the characters in `allowed` are distinct. `words[i]` and `allowed` contain only lowercase english letters.,
1685,Sum of Absolute Differences in a Sorted Array,"You are given an integer array `nums` sorted in non-decreasing order.

Build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of absolute differences between `nums[i]` and all the other elements in the array.

In other words, `result[i]` is equal to `sum(|nums[i]-nums[j]|)` where `0 <= j < nums.length` and `j != i` (0-indexed).


Example 1:
Input: nums = [2,3,5]
Output: [4,3,5]
Explanation: Assuming the arrays are 0-indexed, then
result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,
result[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,
result[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.


Example 2:
Input: nums = [1,4,6,8,10]
Output: [24,15,13,15,21]

Constraints:
`2 <= nums.length <= 105`
`1 <= nums[i] <= nums[i + 1] <= 104`",Medium,https://leetcode.com/problems/sum-of-absolute-differences-in-a-sorted-array,,,293,,"you are given an integer array `nums` sorted in non-decreasing order. build and return an integer array `result` with the same length as `nums` such that `result[i]` is equal to the summation of absolute differences between `nums[i]` and all the other elements in the array. in other words, `result[i]` is equal to `sum(|nums[i]-nums[j]|)` where `0 <= j < nums.length` and `j != i` (0-indexed).","input: nums = [2,3,5] output: [4,3,5] explanation: assuming the arrays are 0-indexed, then result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4, result[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3, result[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5. example 2: input: nums = [1,4,6,8,10] output: [24,15,13,15,21]",`2 <= nums.length <= 10^5` `1 <= nums[i] <= nums[i + 1] <= 10^4`,
1686,Stone Game VI,"Alice and Bob take turns playing a game, with Alice starting first.

There are `n` stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.

You are given two integer arrays of length `n`, `aliceValues` and `bobValues`. Each `aliceValues[i]` and `bobValues[i]` represents how Alice and Bob, respectively, value the `ith` stone.

The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally. Both players know the other's values.

Determine the result of the game, and:
If Alice wins, return `1`.

If Bob wins, return `-1`.

If the game results in a draw, return `0`.


Example 1:
Input: aliceValues = [1,3], bobValues = [2,1]
Output: 1
Explanation:
If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.

Bob can only choose stone 0, and will only receive 2 points.

Alice wins.


Example 2:
Input: aliceValues = [1,2], bobValues = [3,1]
Output: 0
Explanation:
If Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.

Draw.


Example 3:
Input: aliceValues = [2,4,3], bobValues = [1,6,7]
Output: -1
Explanation:
Regardless of how Alice plays, Bob will be able to have more points than Alice.

For example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.

Bob wins.


Constraints:
`n == aliceValues.length == bobValues.length`
`1 <= n <= 105`
`1 <= aliceValues[i], bobValues[i] <= 100`",Medium,https://leetcode.com/problems/stone-game-vi,APT Portfolio,Greedy,222,"[Stone Game, /problems/stone-game/, Medium], [Stone Game II, /problems/stone-game-ii/, Medium], [Stone Game III, /problems/stone-game-iii/, Hard], [Stone Game IV, /problems/stone-game-iv/, Hard], [Stone Game V, /problems/stone-game-v/, Hard], [Stone Game VII, /problems/stone-game-vii/, Medium]","alice and bob take turns playing a game, with alice starting first. there are `n` stones in a pile. on each player's turn, they can remove a stone from the pile and receive points based on the stone's value. alice and bob may value the stones differently. you are given two integer arrays of length `n`, `alicevalues` and `bobvalues`. each `alicevalues[i]` and `bobvalues[i]` represents how alice and bob, respectively, value the `ith` stone. the winner is the person with the most points after all the stones are chosen. if both players have the same amount of points, the game results in a draw. both players will play optimally. both players know the other's values. determine the result of the game, and: if alice wins, return `1`. if bob wins, return `-1`. if the game results in a draw, return `0`.","input: alicevalues = [1,3], bobvalues = [2,1] output: 1 explanation: if alice takes stone 1 (0-indexed) first, alice will receive 3 points. bob can only choose stone 0, and will only receive 2 points. alice wins. example 2: input: alicevalues = [1,2], bobvalues = [3,1] output: 0 explanation: if alice takes stone 0, and bob takes stone 1, they will both have 1 point. draw. example 3: input: alicevalues = [2,4,3], bobvalues = [1,6,7] output: -1 explanation: regardless of how alice plays, bob will be able to have more points than alice. for example, if alice takes stone 1, bob can take stone 2, and alice takes stone 0, alice will have 6 points to bob's 7. bob wins.","`n == alicevalues.length == bobvalues.length` `1 <= n <= 10^5` `1 <= alicevalues[i], bobvalues[i] <= 10^0`",
1687,Delivering Boxes from Storage to Ports,"You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry.

You are given an array `boxes`, where `boxes[i] = [ports​​i​, weighti]`, and three integers `portsCount`, `maxBoxes`, and `maxWeight`.

`ports​​i` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box.

`portsCount` is the number of ports.

`maxBoxes` and `maxWeight` are the respective box and weight limits of the ship.

The boxes need to be delivered in the order they are given. The ship will follow these steps:
The ship will take some number of boxes from the `boxes` queue, not violating the `maxBoxes` and `maxWeight` constraints.

For each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.

The ship then makes a return trip to storage to take more boxes from the queue.

The ship must end at storage after all the boxes have been delivered.

Return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.


Example 1:
Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3
Output: 4
Explanation: The optimal strategy is as follows: 
- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.

So the total number of trips is 4.

Note that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).


Example 2:
Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6
Output: 6
Explanation: The optimal strategy is as follows: 
- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.

- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.

- The ship takes the fifth box, goes to port 3, then returns to storage. 2 trips.

So the total number of trips is 2 + 2 + 2 = 6.


Example 3:
Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7
Output: 6
Explanation: The optimal strategy is as follows:
- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.

- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.

- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.

So the total number of trips is 2 + 2 + 2 = 6.


Example 4:
Input: boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7
Output: 14
Explanation: The optimal strategy is as follows:
- The ship takes the first box, goes to port 2, then storage. 2 trips.

- The ship takes the second box, goes to port 2, then storage. 2 trips.

- The ship takes the third and fourth boxes, goes to port 3, then storage. 2 trips.

- The ship takes the fifth box, goes to port 3, then storage. 2 trips.

- The ship takes the sixth and seventh boxes, goes to port 3, then port 4, then storage. 3 trips. 
- The ship takes the eighth and ninth boxes, goes to port 1, then port 5, then storage. 3 trips.

So the total number of trips is 2 + 2 + 2 + 2 + 3 + 3 = 14.


Constraints:
`1 <= boxes.length <= 105`
`1 <= portsCount, maxBoxes, maxWeight <= 105`
`1 <= ports​​i <= portsCount`
`1 <= weightsi <= maxWeight`",Hard,https://leetcode.com/problems/delivering-boxes-from-storage-to-ports,Nutanix,"Two Pointers,Dynamic Programming,Segment Tree,Dequeue",129,,"you have the task of delivering some boxes from storage to their ports using only one ship. however, this ship has a limit on the number of boxes and the total weight that it can carry. you are given an array `boxes`, where `boxes[i] = [ports​​i​, weighti]`, and three integers `portscount`, `maxboxes`, and `maxweight`. `ports​​i` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box. `portscount` is the number of ports. `maxboxes` and `maxweight` are the respective box and weight limits of the ship. the boxes need to be delivered in the order they are given. the ship will follow these steps: the ship will take some number of boxes from the `boxes` queue, not violating the `maxboxes` and `maxweight` constraints. for each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. if the ship is already at the correct port, no trip is needed, and the box can immediately be delivered. the ship then makes a return trip to storage to take more boxes from the queue. the ship must end at storage after all the boxes have been delivered. return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.","input: boxes = [[1,1],[2,1],[1,1]], portscount = 2, maxboxes = 3, maxweight = 3 output: 4 explanation: the optimal strategy is as follows: - the ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips. so the total number of trips is 4. note that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box). example 2: input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portscount = 3, maxboxes = 3, maxweight = 6 output: 6 explanation: the optimal strategy is as follows: - the ship takes the first box, goes to port 1, then returns to storage. 2 trips. - the ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips. - the ship takes the fifth box, goes to port 3, then returns to storage. 2 trips. so the total number of trips is 2 + 2 + 2 = 6. example 3: input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portscount = 3, maxboxes = 6, maxweight = 7 output: 6 explanation: the optimal strategy is as follows: - the ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips. - the ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips. - the ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips. so the total number of trips is 2 + 2 + 2 = 6. example 4: input: boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portscount = 5, maxboxes = 5, maxweight = 7 output: 14 explanation: the optimal strategy is as follows: - the ship takes the first box, goes to port 2, then storage. 2 trips. - the ship takes the second box, goes to port 2, then storage. 2 trips. - the ship takes the third and fourth boxes, goes to port 3, then storage. 2 trips. - the ship takes the fifth box, goes to port 3, then storage. 2 trips. - the ship takes the sixth and seventh boxes, goes to port 3, then port 4, then storage. 3 trips. - the ship takes the eighth and ninth boxes, goes to port 1, then port 5, then storage. 3 trips. so the total number of trips is 2 + 2 + 2 + 2 + 3 + 3 = 14.","`1 <= boxes.length <= 10^5` `1 <= portscount, maxboxes, maxweight <= 10^5` `1 <= ports​​i <= portscount` `1 <= weightsi <= maxweight`",
1688,Count of Matches in Tournament,"You are given an integer `n`, the number of teams in a tournament that has strange rules:
If the current number of teams is even, each team gets paired with another team. A total of `n / 2` matches are played, and `n / 2` teams advance to the next round.

If the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. A total of `(n - 1) / 2` matches are played, and `(n - 1) / 2 + 1` teams advance to the next round.

Return the number of matches played in the tournament until a winner is decided.


Example 1:
Input: n = 7
Output: 6
Explanation: Details of the tournament: 
- 1st Round: Teams = 7, Matches = 3, and 4 teams advance.

- 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.

- 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.

Total number of matches = 3 + 2 + 1 = 6.


Example 2:
Input: n = 14
Output: 13
Explanation: Details of the tournament:
- 1st Round: Teams = 14, Matches = 7, and 7 teams advance.

- 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.

- 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.

- 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.

Total number of matches = 7 + 3 + 2 + 1 = 13.


Constraints:
`1 <= n <= 200`",Easy,https://leetcode.com/problems/count-of-matches-in-tournament,,,258,,"you are given an integer `n`, the number of teams in a tournament that has strange rules: if the current number of teams is even, each team gets paired with another team. a total of `n / 2` matches are played, and `n / 2` teams advance to the next round. if the current number of teams is odd, one team randomly advances in the tournament, and the rest gets paired. a total of `(n - 1) / 2` matches are played, and `(n - 1) / 2 + 1` teams advance to the next round. return the number of matches played in the tournament until a winner is decided.","input: n = 7 output: 6 explanation: details of the tournament: - 1st round: teams = 7, matches = 3, and 4 teams advance. - 2nd round: teams = 4, matches = 2, and 2 teams advance. - 3rd round: teams = 2, matches = 1, and 1 team is declared the winner. total number of matches = 3 + 2 + 1 = 6. example 2: input: n = 14 output: 13 explanation: details of the tournament: - 1st round: teams = 14, matches = 7, and 7 teams advance. - 2nd round: teams = 7, matches = 3, and 4 teams advance. - 3rd round: teams = 4, matches = 2, and 2 teams advance. - 4th round: teams = 2, matches = 1, and 1 team is declared the winner. total number of matches = 7 + 3 + 2 + 1 = 13.",`1 <= n <= 200`,
1689,Partitioning Into Minimum Number Of Deci-Binary Numbers,"A decimal number is called deci-binary if each of its digits is either `0` or `1` without any leading zeros. For example, `101` and `1100` are deci-binary, while `112` and `3001` are not.

Given a string `n` that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to `n`.


Example 1:
Input: n = ""32""
Output: 3
Explanation: 10 + 11 + 11 = 32

Example 2:
Input: n = ""82734""
Output: 8

Example 3:
Input: n = ""27346209830709182346""
Output: 9

Constraints:
`1 <= n.length <= 105`
`n` consists of only digits.

`n` does not contain any leading zeros and represents a positive integer.",Medium,https://leetcode.com/problems/partitioning-into-minimum-number-of-deci-binary-numbers,Nutanix,Greedy,175,,"a decimal number is called deci-binary if each of its digits is either `0` or `1` without any leading zeros. for example, `101` and `1100` are deci-binary, while `112` and `3001` are not. given a string `n` that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to `n`.","input: n = ""32"" output: 3 explanation: 10 + 11 + 11 = 32 example 2: input: n = ""82734"" output: 8 example 3: input: n = ""27346209830709182346"" output: 9",`1 <= n.length <= 10^5` `n` consists of only digits. `n` does not contain any leading zeros and represents a positive integer.,
1690,Stone Game VII,"Alice and Bob take turns playing a game, with Alice starting first.

There are `n` stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.

Bob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.

Given an array of integers `stones` where `stones[i]` represents the value of the `ith` stone from the left, return the difference in Alice and Bob's score if they both play optimally.


Example 1:
Input: stones = [5,3,1,4,2]
Output: 6
Explanation: 
- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].

- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].

- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].

- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].

- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].

The score difference is 18 - 12 = 6.


Example 2:
Input: stones = [7,90,5,1,100,10,10,2]
Output: 122

Constraints:
`n == stones.length`
`2 <= n <= 1000`
`1 <= stones[i] <= 1000`",Medium,https://leetcode.com/problems/stone-game-vii,Dunzo,Dynamic Programming,214,"[Stone Game, /problems/stone-game/, Medium], [Stone Game II, /problems/stone-game-ii/, Medium], [Stone Game III, /problems/stone-game-iii/, Hard], [Stone Game IV, /problems/stone-game-iv/, Hard], [Stone Game V, /problems/stone-game-v/, Hard], [Stone Game VI, /problems/stone-game-vi/, Medium], [Maximum Score from Performing Multiplication Operations, /problems/maximum-score-from-performing-multiplication-operations/, Medium]","alice and bob take turns playing a game, with alice starting first. there are `n` stones arranged in a row. on each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. the winner is the one with the higher score when there are no stones left to remove. bob found that he will always lose this game (poor bob, he always loses), so he decided to minimize the score's difference. alice's goal is to maximize the difference in the score. given an array of integers `stones` where `stones[i]` represents the value of the `ith` stone from the left, return the difference in alice and bob's score if they both play optimally.","input: stones = [5,3,1,4,2] output: 6 explanation: - alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. alice = 13, bob = 0, stones = [5,3,1,4]. - bob removes 5 and gets 3 + 1 + 4 = 8 points. alice = 13, bob = 8, stones = [3,1,4]. - alice removes 3 and gets 1 + 4 = 5 points. alice = 18, bob = 8, stones = [1,4]. - bob removes 1 and gets 4 points. alice = 18, bob = 12, stones = [4]. - alice removes 4 and gets 0 points. alice = 18, bob = 12, stones = []. the score difference is 18 - 12 = 6. example 2: input: stones = [7,90,5,1,100,10,10,2] output: 122",`n == stones.length` `2 <= n <= 1000` `1 <= stones[i] <= 1000`,
1691,Maximum Height by Stacking Cuboids,"Given `n` `cuboids` where the dimensions of the `ith` cuboid is `cuboids[i] = [widthi, lengthi, heighti]` (0-indexed). Choose a subset of `cuboids` and place them on each other.

You can place cuboid `i` on cuboid `j` if `widthi <= widthj` and `lengthi <= lengthj` and `heighti <= heightj`. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.

Return the maximum height of the stacked `cuboids`.


Example 1:
Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]]
Output: 190
Explanation:
Cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.

Cuboid 0 is placed next with the 45x20 side facing down with height 50.

Cuboid 2 is placed next with the 23x12 side facing down with height 45.

The total height is 95 + 50 + 45 = 190.


Example 2:
Input: cuboids = [[38,25,45],[76,35,3]]
Output: 76
Explanation:
You can't place any of the cuboids on the other.

We choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.


Example 3:
Input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]
Output: 102
Explanation:
After rearranging the cuboids, you can see that all cuboids have the same dimension.

You can place the 11x7 side down on all cuboids so their heights are 17.

The maximum height of stacked cuboids is 6 * 17 = 102.


Constraints:
`n == cuboids.length`
`1 <= n <= 100`
`1 <= widthi, lengthi, heighti <= 100`",Hard,https://leetcode.com/problems/maximum-height-by-stacking-cuboids,Samsung,"Dynamic Programming,Sort",177,,"given `n` `cuboids` where the dimensions of the `ith` cuboid is `cuboids[i] = [widthi, lengthi, heighti]` (0-indexed). choose a subset of `cuboids` and place them on each other. you can place cuboid `i` on cuboid `j` if `widthi <= widthj` and `lengthi <= lengthj` and `heighti <= heightj`. you can rearrange any cuboid's dimensions by rotating it to put it on another cuboid. return the maximum height of the stacked `cuboids`.","input: cuboids = [[50,45,20],[95,37,53],[45,23,12]] output: 190 explanation: cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95. cuboid 0 is placed next with the 45x20 side facing down with height 50. cuboid 2 is placed next with the 23x12 side facing down with height 45. the total height is 95 + 50 + 45 = 190. example 2: input: cuboids = [[38,25,45],[76,35,3]] output: 76 explanation: you can't place any of the cuboids on the other. we choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76. example 3: input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]] output: 102 explanation: after rearranging the cuboids, you can see that all cuboids have the same dimension. you can place the 11x7 side down on all cuboids so their heights are 17. the maximum height of stacked cuboids is 6 * 17 = 102.","`n == cuboids.length` `1 <= n <= 10^0` `1 <= widthi, lengthi, heighti <= 10^0`",
1692,Count Ways to Distribute Candies,"There are `n` unique candies (labeled `1` through `n`) and `k` bags. You are asked to distribute all the candies into the bags such that every bag has at least one candy.

There can be multiple ways to distribute the candies. Two ways are considered different if the candies in one bag in the first way are not all in the same bag in the second way. The order of the bags and the order of the candies within each bag do not matter.

For example, `(1), (2,3)` and `(2), (1,3)` are considered different because candies `2` and `3` in the bag `(2,3)` in the first way are not in the same bag in the second way (they are split between the bags `(2)` and `(1,3)`). However, `(1), (2,3)` and `(3,2), (1)` are considered the same because the candies in each bag are all in the same bags in both ways.

Given two integers, `n` and `k`, return the number of different ways to distribute the candies. As the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: n = 3, k = 2
Output: 3
Explanation: You can distribute 3 candies into 2 bags in 3 ways:
(1), (2,3)
(1,2), (3)
(1,3), (2)

Example 2:
Input: n = 4, k = 2
Output: 7
Explanation: You can distribute 4 candies into 2 bags in 7 ways:
(1), (2,3,4)
(1,2), (3,4)
(1,3), (2,4)
(1,4), (2,3)
(1,2,3), (4)
(1,2,4), (3)
(1,3,4), (2)

Example 3:
Input: n = 20, k = 5
Output: 206085257
Explanation: You can distribute 20 candies into 5 bags in 1881780996 ways. 1881780996 modulo 109 + 7 = 206085257.


Constraints:
`1 <= k <= n <= 1000`",Hard,https://leetcode.com/problems/count-ways-to-distribute-candies,Google,Dynamic Programming,24,,"there are `n` unique candies (labeled `1` through `n`) and `k` bags. you are asked to distribute all the candies into the bags such that every bag has at least one candy. there can be multiple ways to distribute the candies. two ways are considered different if the candies in one bag in the first way are not all in the same bag in the second way. the order of the bags and the order of the candies within each bag do not matter. for example, `(1), (2,3)` and `(2), (1,3)` are considered different because candies `2` and `3` in the bag `(2,3)` in the first way are not in the same bag in the second way (they are split between the bags `(2)` and `(1,3)`). however, `(1), (2,3)` and `(3,2), (1)` are considered the same because the candies in each bag are all in the same bags in both ways. given two integers, `n` and `k`, return the number of different ways to distribute the candies. as the answer may be too large, return it modulo `109 + 7`.","input: n = 3, k = 2 output: 3 explanation: you can distribute 3 candies into 2 bags in 3 ways: (1), (2,3) (1,2), (3) (1,3), (2) example 2: input: n = 4, k = 2 output: 7 explanation: you can distribute 4 candies into 2 bags in 7 ways: (1), (2,3,4) (1,2), (3,4) (1,3), (2,4) (1,4), (2,3) (1,2,3), (4) (1,2,4), (3) (1,3,4), (2) example 3: input: n = 20, k = 5 output: 206085257 explanation: you can distribute 20 candies into 5 bags in 1881780996 ways. 1881780996 modulo 109 + 7 = 206085257.",`1 <= k <= n <= 1000`,
1693,Daily Leads and Partners,SQL Schema,Easy,https://leetcode.com/problems/daily-leads-and-partners,,,29,,sql schema,,,
1694,Reformat Phone Number,"You are given a phone number as a string `number`. `number` consists of digits, spaces `' '`, and/or dashes `'-'`.

You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:
2 digits: A single block of length 2.

3 digits: A single block of length 3.

4 digits: Two blocks of length 2 each.

The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.

Return the phone number after formatting.


Example 1:
Input: number = ""1-23-45 6""
Output: ""123-456""
Explanation: The digits are ""123456"".

Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is ""123"".

Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is ""456"".

Joining the blocks gives ""123-456"".


Example 2:
Input: number = ""123 4-567""
Output: ""123-45-67""
Explanation: The digits are ""1234567"".

Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is ""123"".

Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are ""45"" and ""67"".

Joining the blocks gives ""123-45-67"".


Example 3:
Input: number = ""123 4-5678""
Output: ""123-456-78""
Explanation: The digits are ""12345678"".

Step 1: The 1st block is ""123"".

Step 2: The 2nd block is ""456"".

Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is ""78"".

Joining the blocks gives ""123-456-78"".


Example 4:
Input: number = ""12""
Output: ""12""

Example 5:
Input: number = ""--17-5 229 35-39475 ""
Output: ""175-229-353-94-75""

Constraints:
`2 <= number.length <= 100`
`number` consists of digits and the characters `'-'` and `' '`.

There are at least two digits in `number`.",Easy,https://leetcode.com/problems/reformat-phone-number,Activision,String,103,,"you are given a phone number as a string `number`. `number` consists of digits, spaces `' '`, and/or dashes `'-'`. you would like to reformat the phone number in a certain manner. firstly, remove all spaces and dashes. then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. the final digits are then grouped as follows: 2 digits: a single block of length 2. 3 digits: a single block of length 3. 4 digits: two blocks of length 2 each. the blocks are then joined by dashes. notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2. return the phone number after formatting.","input: number = ""1-23-45 6"" output: ""123-456"" explanation: the digits are ""123456"". step 1: there are more than 4 digits, so group the next 3 digits. the 1st block is ""123"". step 2: there are 3 digits remaining, so put them in a single block of length 3. the 2nd block is ""456"". joining the blocks gives ""123-456"". example 2: input: number = ""123 4-567"" output: ""123-45-67"" explanation: the digits are ""1234567"". step 1: there are more than 4 digits, so group the next 3 digits. the 1st block is ""123"". step 2: there are 4 digits left, so split them into two blocks of length 2. the blocks are ""45"" and ""67"". joining the blocks gives ""123-45-67"". example 3: input: number = ""123 4-5678"" output: ""123-456-78"" explanation: the digits are ""12345678"". step 1: the 1st block is ""123"". step 2: the 2nd block is ""456"". step 3: there are 2 digits left, so put them in a single block of length 2. the 3rd block is ""78"". joining the blocks gives ""123-456-78"". example 4: input: number = ""12"" output: ""12"" example 5: input: number = ""--17-5 229 35-39475 "" output: ""175-229-353-94-75""",`2 <= number.length <= 10^0` `number` consists of digits and the characters `'-'` and `' '`. there are at least two digits in `number`.,
1695,Maximum Erasure Value,"You are given an array of positive integers `nums` and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array `b` is called to be a subarray of `a` if it forms a contiguous subsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some `(l,r)`.


Example 1:
Input: nums = [4,2,4,5,6]
Output: 17
Explanation: The optimal subarray here is [2,4,5,6].


Example 2:
Input: nums = [5,2,1,2,5,2,1,2,5]
Output: 8
Explanation: The optimal subarray here is [5,2,1] or [1,2,5].


Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 104`",Medium,https://leetcode.com/problems/maximum-erasure-value,Cashfree,Two Pointers,223,"[Longest Substring Without Repeating Characters, /problems/longest-substring-without-repeating-characters/, Medium]","you are given an array of positive integers `nums` and want to erase a subarray containing unique elements. the score you get by erasing the subarray is equal to the sum of its elements. return the maximum score you can get by erasing exactly one subarray. an array `b` is called to be a subarray of `a` if it forms a contiguous subsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some `(l,r)`.","input: nums = [4,2,4,5,6] output: 17 explanation: the optimal subarray here is [2,4,5,6]. example 2: input: nums = [5,2,1,2,5,2,1,2,5] output: 8 explanation: the optimal subarray here is [5,2,1] or [1,2,5].",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 10^4`,
1696,Jump Game VI,"You are given a 0-indexed integer array `nums` and an integer `k`.

You are initially standing at index `0`. In one move, you can jump at most `k` steps forward without going outside the boundaries of the array. That is, you can jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]` inclusive.

You want to reach the last index of the array (index `n - 1`). Your score is the sum of all `nums[j]` for each index `j` you visited in the array.

Return the maximum score you can get.


Example 1:
Input: nums = [1,-1,-2,4,-7,3], k = 2
Output: 7
Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.


Example 2:
Input: nums = [10,-5,-2,4,0,3], k = 3
Output: 17
Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.


Example 3:
Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
Output: 0

Constraints:
 `1 <= nums.length, k <= 105`
`-104 <= nums[i] <= 104`",Medium,https://leetcode.com/problems/jump-game-vi,Uber,Dequeue,341,"[Sliding Window Maximum, /problems/sliding-window-maximum/, Hard]","you are given a 0-indexed integer array `nums` and an integer `k`. you are initially standing at index `0`. in one move, you can jump at most `k` steps forward without going outside the boundaries of the array. that is, you can jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]` inclusive. you want to reach the last index of the array (index `n - 1`). your score is the sum of all `nums[j]` for each index `j` you visited in the array. return the maximum score you can get.","input: nums = [1,-1,-2,4,-7,3], k = 2 output: 7 explanation: you can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). the sum is 7. example 2: input: nums = [10,-5,-2,4,0,3], k = 3 output: 17 explanation: you can choose your jumps forming the subsequence [10,4,3] (underlined above). the sum is 17. example 3: input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2 output: 0","`1 <= nums.length, k <= 10^5` `-10^4 <= nums[i] <= 10^4`",
1697,Checking Existence of Edge Length Limited Paths,"An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be multiple edges between two nodes.

Given an array `queries`, where `queries[j] = [pj, qj, limitj]`, your task is to determine for each `queries[j]` whether there is a path between `pj` and `qj` such that each edge on the path has a distance strictly less than `limitj` .

Return a boolean array `answer`, where `answer.length == queries.length` and the `jth` value of `answer` is `true` if there is a path for `queries[j]` is `true`, and `false` otherwise.


Example 1:
Input: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]
Output: [false,true]
Explanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.

For the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.

For the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.


Example 2:
Input: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]
Output: [true,false]
Exaplanation: The above figure shows the given graph.


Constraints:
`2 <= n <= 105`
`1 <= edgeList.length, queries.length <= 105`
`edgeList[i].length == 3`
`queries[j].length == 3`
`0 <= ui, vi, pj, qj <= n - 1`
`ui != vi`
`pj != qj`
`1 <= disi, limitj <= 109`
There may be multiple edges between two nodes.",Hard,https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths,Google,"Sort,Union Find",266,"[Checking Existence of Edge Length Limited Paths II, /problems/checking-existence-of-edge-length-limited-paths-ii/, Hard]","an undirected graph of `n` nodes is defined by `edgelist`, where `edgelist[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. note that there may be multiple edges between two nodes. given an array `queries`, where `queries[j] = [pj, qj, limitj]`, your task is to determine for each `queries[j]` whether there is a path between `pj` and `qj` such that each edge on the path has a distance strictly less than `limitj` . return a boolean array `answer`, where `answer.length == queries.length` and the `jth` value of `answer` is `true` if there is a path for `queries[j]` is `true`, and `false` otherwise.","input: n = 3, edgelist = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]] output: [false,true] explanation: the above figure shows the given graph. note that there are two overlapping edges between 0 and 1 with distances 2 and 16. for the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query. for the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query. example 2: input: n = 5, edgelist = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]] output: [true,false] exaplanation: the above figure shows the given graph.","`2 <= n <= 10^5` `1 <= edgelist.length, queries.length <= 10^5` `edgelist[i].length == 3` `queries[j].length == 3` `0 <= ui, vi, pj, qj <= n - 1` `ui != vi` `pj != qj` `1 <= disi, limitj <= 10^9` there may be multiple edges between two nodes.",
1698,Number of Distinct Substrings in a String,"Given a string `s`, return the number of distinct substrings of `s`.

A substring of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.


Example 1:
Input: s = ""aabbaba""
Output: 21
Explanation: The set of distinct strings is [""a"",""b"",""aa"",""bb"",""ab"",""ba"",""aab"",""abb"",""bab"",""bba"",""aba"",""aabb"",""abba"",""bbab"",""baba"",""aabba"",""abbab"",""bbaba"",""aabbab"",""abbaba"",""aabbaba""]

Example 2:
Input: s = ""abcdefg""
Output: 28

Constraints:
`1 <= s.length <= 500`
`s` consists of lowercase English letters.

Follow up: Can you solve this problem in `O(n)` time complexity?",Medium,https://leetcode.com/problems/number-of-distinct-substrings-in-a-string,"Intuit,Dunzo","String,Trie,Rolling Hash,Suffix Array",43,,"given a string `s`, return the number of distinct substrings of `s`. a substring of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.","input: s = ""aabbaba"" output: 21 explanation: the set of distinct strings is [""a"",""b"",""aa"",""bb"",""ab"",""ba"",""aab"",""abb"",""bab"",""bba"",""aba"",""aabb"",""abba"",""bbab"",""baba"",""aabba"",""abbab"",""bbaba"",""aabbab"",""abbaba"",""aabbaba""] example 2: input: s = ""abcdefg"" output: 28",`1 <= s.length <= 500` `s` consists of lowercase english letters.,can you solve this problem in `o(n)` time complexity?
1699,Number of Calls Between Two Persons,SQL Schema,Medium,https://leetcode.com/problems/number-of-calls-between-two-persons,Amazon,,34,,sql schema,,,
1700,Number of Students Unable to Eat Lunch,"The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:
If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.

Otherwise, they will leave it and go to the queue's end.

This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `i​​​​​​th` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `j​​​​​​th` student in the initial queue (`j = 0` is the front of the queue). Return the number of students that are unable to eat.


Example 1:
Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
Output: 0 
Explanation:
- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].

- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].

- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].

- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].

- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].

- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].

- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].

- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].

Hence all students are able to eat.


Example 2:
Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]
Output: 3

Constraints:
`1 <= students.length, sandwiches.length <= 100`
`students.length == sandwiches.length`
`sandwiches[i]` is `0` or `1`.

`students[i]` is `0` or `1`.",Easy,https://leetcode.com/problems/number-of-students-unable-to-eat-lunch,Microsoft,Array,238,,"the school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. all students stand in a queue. each student either prefers square or circular sandwiches. the number of sandwiches in the cafeteria is equal to the number of students. the sandwiches are placed in a stack. at each step: if the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue. otherwise, they will leave it and go to the queue's end. this continues until none of the queue students want to take the top sandwich and are thus unable to eat. you are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `i​​​​​​th` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `j​​​​​​th` student in the initial queue (`j = 0` is the front of the queue). return the number of students that are unable to eat.","input: students = [1,1,0,0], sandwiches = [0,1,0,1] output: 0 explanation: - front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1]. - front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1]. - front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1]. - front student leaves the top sandwich and returns to the end of the line making students = [1,1,0]. - front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1]. - front student leaves the top sandwich and returns to the end of the line making students = [0,1]. - front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1]. - front student takes the top sandwich and leaves the line making students = [] and sandwiches = []. hence all students are able to eat. example 2: input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1] output: 3","`1 <= students.length, sandwiches.length <= 10^0` `students.length == sandwiches.length` `sandwiches[i]` is `0` or `1`. `students[i]` is `0` or `1`.",
1701,Average Waiting Time,"There is a restaurant with a single chef. You are given an array `customers`, where `customers[i] = [arrivali, timei]:`
`arrivali` is the arrival time of the `ith` customer. The arrival times are sorted in non-decreasing order.

`timei` is the time needed to prepare the order of the `ith` customer.

When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.

Return the average waiting time of all customers. Solutions within `10-5` from the actual answer are considered accepted.


Example 1:
Input: customers = [[1,2],[2,5],[4,3]]
Output: 5.00000
Explanation:
1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.

2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.

3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.

So the average waiting time = (2 + 6 + 7) / 3 = 5.


Example 2:
Input: customers = [[5,2],[5,4],[10,3],[20,1]]
Output: 3.25000
Explanation:
1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.

2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.

3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.

4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.

So the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.


Constraints:
`1 <= customers.length <= 105`
`1 <= arrivali, timei <= 104`
`arrivali <= arrivali+1`",Medium,https://leetcode.com/problems/average-waiting-time,Salesforce,Array,160,,"there is a restaurant with a single chef. you are given an array `customers`, where `customers[i] = [arrivali, timei]:` `arrivali` is the arrival time of the `ith` customer. the arrival times are sorted in non-decreasing order. `timei` is the time needed to prepare the order of the `ith` customer. when a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. the customer waits till the chef finishes preparing his order. the chef does not prepare food for more than one customer at a time. the chef prepares food for customers in the order they were given in the input. return the average waiting time of all customers. solutions within `10-5` from the actual answer are considered accepted.","input: customers = [[1,2],[2,5],[4,3]] output: 5.00000 explanation: 1) the first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2. 2) the second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6. 3) the third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7. so the average waiting time = (2 + 6 + 7) / 3 = 5. example 2: input: customers = [[5,2],[5,4],[10,3],[20,1]] output: 3.25000 explanation: 1) the first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2. 2) the second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6. 3) the third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4. 4) the fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1. so the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.","`1 <= customers.length <= 10^5` `1 <= arrivali, timei <= 10^4` `arrivali <= arrivali+1`",
1702,Maximum Binary String After Change,"You are given a binary string `binary` consisting of only `0`'s or `1`'s. You can apply each of the following operations any number of times:
Operation 1: If the number contains the substring `""00""`, you can replace it with `""10""`.

	
For example, `""00010"" -> ""10010`""
Operation 2: If the number contains the substring `""10""`, you can replace it with `""01""`.

	
For example, `""00010"" -> ""00001""`
Return the maximum binary string you can obtain after any number of operations. Binary string `x` is greater than binary string `y` if `x`'s decimal representation is greater than `y`'s decimal representation.


Example 1:
Input: binary = ""000110""
Output: ""111011""
Explanation: A valid transformation sequence can be:
""000110"" -> ""000101"" 
""000101"" -> ""100101"" 
""100101"" -> ""110101"" 
""110101"" -> ""110011"" 
""110011"" -> ""111011""

Example 2:
Input: binary = ""01""
Output: ""01""
Explanation: ""01"" cannot be transformed any further.


Constraints:
`1 <= binary.length <= 105`
`binary` consist of `'0'` and `'1'`.",Medium,https://leetcode.com/problems/maximum-binary-string-after-change,"Huwaei,Huawei",Greedy,196,,"you are given a binary string `binary` consisting of only `0`'s or `1`'s. you can apply each of the following operations any number of times: operation 1: if the number contains the substring `""00""`, you can replace it with `""10""`. for example, `""00010"" -> ""10010`"" operation 2: if the number contains the substring `""10""`, you can replace it with `""01""`. for example, `""00010"" -> ""00001""` return the maximum binary string you can obtain after any number of operations. binary string `x` is greater than binary string `y` if `x`'s decimal representation is greater than `y`'s decimal representation.","input: binary = ""000110"" output: ""111011"" explanation: a valid transformation sequence can be: ""000110"" -> ""000101"" ""000101"" -> ""100101"" ""100101"" -> ""110101"" ""110101"" -> ""110011"" ""110011"" -> ""111011"" example 2: input: binary = ""01"" output: ""01"" explanation: ""01"" cannot be transformed any further.",`1 <= binary.length <= 10^5` `binary` consist of `'0'` and `'1'`.,
1703,Minimum Adjacent Swaps for K Consecutive Ones,"You are given an integer array, `nums`, and an integer `k`. `nums` comprises of only `0`'s and `1`'s. In one move, you can choose two adjacent indices and swap their values.

Return the minimum number of moves required so that `nums` has `k` consecutive `1`'s.


Example 1:
Input: nums = [1,0,0,1,0,1], k = 2
Output: 1
Explanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.


Example 2:
Input: nums = [1,0,0,0,0,0,1,1], k = 3
Output: 5
Explanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].


Example 3:
Input: nums = [1,1,0,1], k = 2
Output: 0
Explanation: nums already has 2 consecutive 1's.


Constraints:
`1 <= nums.length <= 105`
`nums[i]` is `0` or `1`.

`1 <= k <= sum(nums)`",Hard,https://leetcode.com/problems/minimum-adjacent-swaps-for-k-consecutive-ones,Microsoft,Stack,187,"[Minimum Swaps to Group All 1's Together, /problems/minimum-swaps-to-group-all-1s-together/, Medium]","you are given an integer array, `nums`, and an integer `k`. `nums` comprises of only `0`'s and `1`'s. in one move, you can choose two adjacent indices and swap their values. return the minimum number of moves required so that `nums` has `k` consecutive `1`'s.","input: nums = [1,0,0,1,0,1], k = 2 output: 1 explanation: in 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's. example 2: input: nums = [1,0,0,0,0,0,1,1], k = 3 output: 5 explanation: in 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1]. example 3: input: nums = [1,1,0,1], k = 2 output: 0 explanation: nums already has 2 consecutive 1's.",`1 <= nums.length <= 10^5` `nums[i]` is `0` or `1`. `1 <= k <= sum(nums)`,
1704,Determine if String Halves Are Alike,"You are given a string `s` of even length. Split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half.

Two strings are alike if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that `s` contains uppercase and lowercase letters.

Return `true` if `a` and `b` are alike. Otherwise, return `false`.


Example 1:
Input: s = ""book""
Output: true
Explanation: a = ""bo"" and b = ""ok"". a has 1 vowel and b has 1 vowel. Therefore, they are alike.


Example 2:
Input: s = ""textbook""
Output: false
Explanation: a = ""text"" and b = ""book"". a has 1 vowel whereas b has 2. Therefore, they are not alike.

Notice that the vowel o is counted twice.


Example 3:
Input: s = ""MerryChristmas""
Output: false

Example 4:
Input: s = ""AbCdEfGh""
Output: true

Constraints:
`2 <= s.length <= 1000`
`s.length` is even.

`s` consists of uppercase and lowercase letters.",Easy,https://leetcode.com/problems/determine-if-string-halves-are-alike,,,261,,"you are given a string `s` of even length. split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half. two strings are alike if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'a'`, `'e'`, `'i'`, `'o'`, `'u'`). notice that `s` contains uppercase and lowercase letters. return `true` if `a` and `b` are alike. otherwise, return `false`.","input: s = ""book"" output: true explanation: a = ""bo"" and b = ""ok"". a has 1 vowel and b has 1 vowel. therefore, they are alike. example 2: input: s = ""textbook"" output: false explanation: a = ""text"" and b = ""book"". a has 1 vowel whereas b has 2. therefore, they are not alike. notice that the vowel o is counted twice. example 3: input: s = ""merrychristmas"" output: false example 4: input: s = ""abcdefgh"" output: true",`2 <= s.length <= 1000` `s.length` is even. `s` consists of uppercase and lowercase letters.,
1705,Maximum Number of Eaten Apples,"There is a special kind of apple tree that grows apples every day for `n` days. On the `ith` day, the tree grows `apples[i]` apples that will rot after `days[i]` days, that is on day `i + days[i]` the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by `apples[i] == 0` and `days[i] == 0`.

You decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first `n` days.

Given two integer arrays `days` and `apples` of length `n`, return the maximum number of apples you can eat.


Example 1:
Input: apples = [1,2,3,5,2], days = [3,2,1,4,2]
Output: 7
Explanation: You can eat 7 apples:
- On the first day, you eat an apple that grew on the first day.

- On the second day, you eat an apple that grew on the second day.

- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.

- On the fourth to the seventh days, you eat apples that grew on the fourth day.


Example 2:
Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]
Output: 5
Explanation: You can eat 5 apples:
- On the first to the third day you eat apples that grew on the first day.

- Do nothing on the fouth and fifth days.

- On the sixth and seventh days you eat apples that grew on the sixth day.


Constraints:
`apples.length == n`
`days.length == n`
`1 <= n <= 2 * 104`
`0 <= apples[i], days[i] <= 2 * 104`
`days[i] = 0` if and only if `apples[i] = 0`.",Medium,https://leetcode.com/problems/maximum-number-of-eaten-apples,Uber,"Heap,Greedy",266,,"there is a special kind of apple tree that grows apples every day for `n` days. on the `ith` day, the tree grows `apples[i]` apples that will rot after `days[i]` days, that is on day `i + days[i]` the apples will be rotten and cannot be eaten. on some days, the apple tree does not grow any apples, which are denoted by `apples[i] == 0` and `days[i] == 0`. you decided to eat at most one apple a day (to keep the doctors away). note that you can keep eating after the first `n` days. given two integer arrays `days` and `apples` of length `n`, return the maximum number of apples you can eat.","input: apples = [1,2,3,5,2], days = [3,2,1,4,2] output: 7 explanation: you can eat 7 apples: - on the first day, you eat an apple that grew on the first day. - on the second day, you eat an apple that grew on the second day. - on the third day, you eat an apple that grew on the second day. after this day, the apples that grew on the third day rot. - on the fourth to the seventh days, you eat apples that grew on the fourth day. example 2: input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2] output: 5 explanation: you can eat 5 apples: - on the first to the third day you eat apples that grew on the first day. - do nothing on the fouth and fifth days. - on the sixth and seventh days you eat apples that grew on the sixth day.","`apples.length == n` `days.length == n` `1 <= n <= 2 * 10^4` `0 <= apples[i], days[i] <= 2 * 10^4` `days[i] = 0` if and only if `apples[i] = 0`.",
1706,Where Will the Ball Fall,"You have a 2-D `grid` of size `m x n` representing a box, and you have `n` balls. The box is open on the top and bottom sides.

Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.

A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`.

A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`.

We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a ""V"" shaped pattern between two boards or if a board redirects the ball into either wall of the box.

Return an array `answer` of size `n` where `answer[i]` is the column that the ball falls out of at the bottom after dropping the ball from the `ith` column at the top, or `-1` if the ball gets stuck in the box.


Example 1:
Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
Output: [1,-1,-1,-1,-1]
Explanation: This example is shown in the photo.

Ball b0 is dropped at column 0 and falls out of the box at column 1.

Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.

Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.

Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.

Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.


Example 2:
Input: grid = [[-1]]
Output: [-1]
Explanation: The ball gets stuck against the left wall.


Example 3:
Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
Output: [0,1,2,3,4,-1]

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 100`
`grid[i][j]` is `1` or `-1`.",Medium,https://leetcode.com/problems/where-will-the-ball-fall,Google,Dynamic Programming,240,,"you have a 2-d `grid` of size `m x n` representing a box, and you have `n` balls. the box is open on the top and bottom sides. each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left. a board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`. a board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`. we drop one ball at the top of each column of the box. each ball can get stuck in the box or fall out of the bottom. a ball gets stuck if it hits a ""v"" shaped pattern between two boards or if a board redirects the ball into either wall of the box. return an array `answer` of size `n` where `answer[i]` is the column that the ball falls out of at the bottom after dropping the ball from the `ith` column at the top, or `-1` if the ball gets stuck in the box.","input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]] output: [1,-1,-1,-1,-1] explanation: this example is shown in the photo. ball b0 is dropped at column 0 and falls out of the box at column 1. ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1. ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0. ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0. ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1. example 2: input: grid = [[-1]] output: [-1] explanation: the ball gets stuck against the left wall. example 3: input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]] output: [0,1,2,3,4,-1]","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 10^0` `grid[i][j]` is `1` or `-1`.",
1707,Maximum XOR With an Element From Array,"You are given an array `nums` consisting of non-negative integers. You are also given a `queries` array, where `queries[i] = [xi, mi]`.

The answer to the `ith` query is the maximum bitwise `XOR` value of `xi` and any element of `nums` that does not exceed `mi`. In other words, the answer is `max(nums[j] XOR xi)` for all `j` such that `nums[j] <= mi`. If all elements in `nums` are larger than `mi`, then the answer is `-1`.

Return an integer array `answer` where `answer.length == queries.length` and `answer[i]` is the answer to the `ith` query.


Example 1:
Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]
Output: [3,3,7]
Explanation:
1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.

2) 1 XOR 2 = 3.

3) 5 XOR 2 = 7.


Example 2:
Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]
Output: [15,-1,5]

Constraints:
`1 <= nums.length, queries.length <= 105`
`queries[i].length == 2`
`0 <= nums[j], xi, mi <= 109`",Hard,https://leetcode.com/problems/maximum-xor-with-an-element-from-array,Google,"Bit Manipulation,Trie",190,"[Maximum XOR of Two Numbers in an Array, /problems/maximum-xor-of-two-numbers-in-an-array/, Medium]","you are given an array `nums` consisting of non-negative integers. you are also given a `queries` array, where `queries[i] = [xi, mi]`. the answer to the `ith` query is the maximum bitwise `xor` value of `xi` and any element of `nums` that does not exceed `mi`. in other words, the answer is `max(nums[j] xor xi)` for all `j` such that `nums[j] <= mi`. if all elements in `nums` are larger than `mi`, then the answer is `-1`. return an integer array `answer` where `answer.length == queries.length` and `answer[i]` is the answer to the `ith` query.","input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]] output: [3,3,7] explanation: 1) 0 and 1 are the only two integers not greater than 1. 0 xor 3 = 3 and 1 xor 3 = 2. the larger of the two is 3. 2) 1 xor 2 = 3. 3) 5 xor 2 = 7. example 2: input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]] output: [15,-1,5]","`1 <= nums.length, queries.length <= 10^5` `queries[i].length == 2` `0 <= nums[j], xi, mi <= 10^9`",
1708,Largest Subarray Length K,"An array `A` is larger than some array `B` if for the first index `i` where `A[i] != B[i]`, `A[i] > B[i]`.

For example, consider `0`-indexing:
`[1,3,2,4] > [1,2,2,4]`, since at index `1`, `3 > 2`.

`[1,4,4,4] < [2,1,1,1]`, since at index `0`, `1 < 2`.

A subarray is a contiguous subsequence of the array.

Given an integer array `nums` of distinct integers, return the largest subarray of `nums` of length `k`.


Example 1:
Input: nums = [1,4,5,2,3], k = 3
Output: [5,2,3]
Explanation: The subarrays of size 3 are: [1,4,5], [4,5,2], and [5,2,3].

Of these, [5,2,3] is the largest.


Example 2:
Input: nums = [1,4,5,2,3], k = 4
Output: [4,5,2,3]
Explanation: The subarrays of size 4 are: [1,4,5,2], and [4,5,2,3].

Of these, [4,5,2,3] is the largest.


Example 3:
Input: nums = [1,4,5,2,3], k = 1
Output: [5]

Constraints:
`1 <= k <= nums.length <= 105`
`1 <= nums[i] <= 109`
All the integers of `nums` are unique.

Follow up: What if the integers in `nums` are not distinct?",Easy,https://leetcode.com/problems/largest-subarray-length-k,Google,"Array,Greedy",30,,"an array `a` is larger than some array `b` if for the first index `i` where `a[i] != b[i]`, `a[i] > b[i]`. for example, consider `0`-indexing: `[1,3,2,4] > [1,2,2,4]`, since at index `1`, `3 > 2`. `[1,4,4,4] < [2,1,1,1]`, since at index `0`, `1 < 2`. a subarray is a contiguous subsequence of the array. given an integer array `nums` of distinct integers, return the largest subarray of `nums` of length `k`.","input: nums = [1,4,5,2,3], k = 3 output: [5,2,3] explanation: the subarrays of size 3 are: [1,4,5], [4,5,2], and [5,2,3]. of these, [5,2,3] is the largest. example 2: input: nums = [1,4,5,2,3], k = 4 output: [4,5,2,3] explanation: the subarrays of size 4 are: [1,4,5,2], and [4,5,2,3]. of these, [4,5,2,3] is the largest. example 3: input: nums = [1,4,5,2,3], k = 1 output: [5]",`1 <= k <= nums.length <= 10^5` `1 <= nums[i] <= 10^9` all the integers of `nums` are unique.,what if the integers in `nums` are not distinct?
1709,Biggest Window Between Visits,SQL Schema,Medium,https://leetcode.com/problems/biggest-window-between-visits,,,44,,sql schema,,,
1710,Maximum Units on a Truck,"You are assigned to put some amount of boxes onto one truck. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`:
`numberOfBoxesi` is the number of boxes of type `i`.

`numberOfUnitsPerBoxi` is the number of units in each box of the type `i`.

You are also given an integer `truckSize`, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed `truckSize`.

Return the maximum total number of units that can be put on the truck.


Example 1:
Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
Output: 8
Explanation: There are:
- 1 box of the first type that contains 3 units.

- 2 boxes of the second type that contain 2 units each.

- 3 boxes of the third type that contain 1 unit each.

You can take all the boxes of the first and second types, and one box of the third type.

The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.


Example 2:
Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10
Output: 91

Constraints:
`1 <= boxTypes.length <= 1000`
`1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000`
`1 <= truckSize <= 106`",Easy,https://leetcode.com/problems/maximum-units-on-a-truck,"Amazon,Roblox","Greedy,Sort",276,,"you are assigned to put some amount of boxes onto one truck. you are given a 2d array `boxtypes`, where `boxtypes[i] = [numberofboxesi, numberofunitsperboxi]`: `numberofboxesi` is the number of boxes of type `i`. `numberofunitsperboxi` is the number of units in each box of the type `i`. you are also given an integer `trucksize`, which is the maximum number of boxes that can be put on the truck. you can choose any boxes to put on the truck as long as the number of boxes does not exceed `trucksize`. return the maximum total number of units that can be put on the truck.","input: boxtypes = [[1,3],[2,2],[3,1]], trucksize = 4 output: 8 explanation: there are: - 1 box of the first type that contains 3 units. - 2 boxes of the second type that contain 2 units each. - 3 boxes of the third type that contain 1 unit each. you can take all the boxes of the first and second types, and one box of the third type. the total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8. example 2: input: boxtypes = [[5,10],[2,5],[4,7],[3,9]], trucksize = 10 output: 91","`1 <= boxtypes.length <= 1000` `1 <= numberofboxesi, numberofunitsperboxi <= 1000` `1 <= trucksize <= 10^6`",
1711,Count Good Meals,"A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.

You can pick any two different foods to make a good meal.

Given an array of integers `deliciousness` where `deliciousness[i]` is the deliciousness of the `i​​​​​​th​​​​`​​​​ item of food, return the number of different good meals you can make from this list modulo `109 + 7`.

Note that items with different indices are considered different even if they have the same deliciousness value.


Example 1:
Input: deliciousness = [1,3,5,7,9]
Output: 4
Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).

Their respective sums are 4, 8, 8, and 16, all of which are powers of 2.


Example 2:
Input: deliciousness = [1,1,1,3,3,3,7]
Output: 15
Explanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.


Constraints:
`1 <= deliciousness.length <= 105`
`0 <= deliciousness[i] <= 220`",Medium,https://leetcode.com/problems/count-good-meals,Adobe,"Array,Hash Table,Two Pointers",218,"[Two Sum, /problems/two-sum/, Easy], [Max Number of K-Sum Pairs, /problems/max-number-of-k-sum-pairs/, Medium]","a good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two. you can pick any two different foods to make a good meal. given an array of integers `deliciousness` where `deliciousness[i]` is the deliciousness of the `i​​​​​​th​​​​`​​​​ item of food, return the number of different good meals you can make from this list modulo `109 + 7`. note that items with different indices are considered different even if they have the same deliciousness value.","input: deliciousness = [1,3,5,7,9] output: 4 explanation: the good meals are (1,3), (1,7), (3,5) and, (7,9). their respective sums are 4, 8, 8, and 16, all of which are powers of 2. example 2: input: deliciousness = [1,1,1,3,3,3,7] output: 15 explanation: the good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.",`1 <= deliciousness.length <= 10^5` `0 <= deliciousness[i] <= 220`,
1712,Ways to Split Array Into Three Subarrays,"A split of an integer array is good if:
The array is split into three non-empty contiguous subarrays - named `left`, `mid`, `right` respectively from left to right.

The sum of the elements in `left` is less than or equal to the sum of the elements in `mid`, and the sum of the elements in `mid` is less than or equal to the sum of the elements in `right`.

Given `nums`, an array of non-negative integers, return the number of good ways to split `nums`. As the number may be too large, return it modulo `109 + 7`.


Example 1:
Input: nums = [1,1,1]
Output: 1
Explanation: The only good way to split nums is [1] [1] [1].


Example 2:
Input: nums = [1,2,2,2,5,0]
Output: 3
Explanation: There are three good ways of splitting nums:
[1] [2] [2,2,5,0]
[1] [2,2] [2,5,0]
[1,2] [2,2] [5,0]

Example 3:
Input: nums = [3,2,1]
Output: 0
Explanation: There is no good way to split nums.


Constraints:
`3 <= nums.length <= 105`
`0 <= nums[i] <= 104`",Medium,https://leetcode.com/problems/ways-to-split-array-into-three-subarrays,Robinhood,"Two Pointers,Binary Search",348,,"a split of an integer array is good if: the array is split into three non-empty contiguous subarrays - named `left`, `mid`, `right` respectively from left to right. the sum of the elements in `left` is less than or equal to the sum of the elements in `mid`, and the sum of the elements in `mid` is less than or equal to the sum of the elements in `right`. given `nums`, an array of non-negative integers, return the number of good ways to split `nums`. as the number may be too large, return it modulo `109 + 7`.","input: nums = [1,1,1] output: 1 explanation: the only good way to split nums is [1] [1] [1]. example 2: input: nums = [1,2,2,2,5,0] output: 3 explanation: there are three good ways of splitting nums: [1] [2] [2,2,5,0] [1] [2,2] [2,5,0] [1,2] [2,2] [5,0] example 3: input: nums = [3,2,1] output: 0 explanation: there is no good way to split nums.",`3 <= nums.length <= 10^5` `0 <= nums[i] <= 10^4`,
1713,Minimum Operations to Make a Subsequence,"You are given an array `target` that consists of distinct integers and another integer array `arr` that can have duplicates.

In one operation, you can insert any integer at any position in `arr`. For example, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it `[1,4,3,1,2]`. Note that you can insert the integer at the very beginning or end of the array.

Return the minimum number of operations needed to make `target` a subsequence of `arr`.

A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.


Example 1:
Input: target = [5,1,3], `arr` = [9,4,2,3,4]
Output: 2
Explanation: You can add 5 and 1 in such a way that makes `arr` = [5,9,4,1,2,3,4], then target will be a subsequence of `arr`.


Example 2:
Input: target = [6,4,8,1,3,2], `arr` = [4,7,6,2,3,8,6,1]
Output: 3

Constraints:
`1 <= target.length, arr.length <= 105`
`1 <= target[i], arr[i] <= 109`
`target` contains no duplicates.",Hard,https://leetcode.com/problems/minimum-operations-to-make-a-subsequence,Google,Greedy,223,,"you are given an array `target` that consists of distinct integers and another integer array `arr` that can have duplicates. in one operation, you can insert any integer at any position in `arr`. for example, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it `[1,4,3,1,2]`. note that you can insert the integer at the very beginning or end of the array. return the minimum number of operations needed to make `target` a subsequence of `arr`. a subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. for example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.","input: target = [5,1,3], `arr` = [9,4,2,3,4] output: 2 explanation: you can add 5 and 1 in such a way that makes `arr` = [5,9,4,1,2,3,4], then target will be a subsequence of `arr`. example 2: input: target = [6,4,8,1,3,2], `arr` = [4,7,6,2,3,8,6,1] output: 3","`1 <= target.length, arr.length <= 10^5` `1 <= target[i], arr[i] <= 10^9` `target` contains no duplicates.",
1714,Sum Of Special Evenly-Spaced Elements In Array,"You are given a 0-indexed integer array `nums` consisting of `n` non-negative integers.

You are also given an array `queries`, where `queries[i] = [xi, yi]`. The answer to the `ith` query is the sum of all `nums[j]` where `xi <= j < n` and `(j - xi)` is divisible by `yi`.

Return an array `answer` where `answer.length == queries.length` and `answer[i]` is the answer to the `ith` query modulo `109 + 7`.


Example 1:
Input: nums = [0,1,2,3,4,5,6,7], queries = [[0,3],[5,1],[4,2]]
Output: [9,18,10]
Explanation: The answers of the queries are as follows:
1) The j indices that satisfy this query are 0, 3, and 6. nums[0] + nums[3] + nums[6] = 9
2) The j indices that satisfy this query are 5, 6, and 7. nums[5] + nums[6] + nums[7] = 18
3) The j indices that satisfy this query are 4 and 6. nums[4] + nums[6] = 10

Example 2:
Input: nums = [100,200,101,201,102,202,103,203], queries = [[0,7]]
Output: [303]

Constraints:
`n == nums.length`
`1 <= n <= 5 * 104`
`0 <= nums[i] <= 109`
`1 <= queries.length <= 1.5 * 105`
`0 <= xi < n`
`1 <= yi <= 5 * 104`",Hard,https://leetcode.com/problems/sum-of-special-evenly-spaced-elements-in-array,"MakeMyTrip,Sprinklr",,10,,"you are given a 0-indexed integer array `nums` consisting of `n` non-negative integers. you are also given an array `queries`, where `queries[i] = [xi, yi]`. the answer to the `ith` query is the sum of all `nums[j]` where `xi <= j < n` and `(j - xi)` is divisible by `yi`. return an array `answer` where `answer.length == queries.length` and `answer[i]` is the answer to the `ith` query modulo `109 + 7`.","input: nums = [0,1,2,3,4,5,6,7], queries = [[0,3],[5,1],[4,2]] output: [9,18,10] explanation: the answers of the queries are as follows: 1) the j indices that satisfy this query are 0, 3, and 6. nums[0] + nums[3] + nums[6] = 9 2) the j indices that satisfy this query are 5, 6, and 7. nums[5] + nums[6] + nums[7] = 18 3) the j indices that satisfy this query are 4 and 6. nums[4] + nums[6] = 10 example 2: input: nums = [100,200,101,201,102,202,103,203], queries = [[0,7]] output: [303]",`n == nums.length` `1 <= n <= 5 * 10^4` `0 <= nums[i] <= 10^9` `1 <= queries.length <= 1.5 * 10^5` `0 <= xi < n` `1 <= yi <= 5 * 10^4`,
1715,Count Apples and Oranges,SQL Schema,Medium,https://leetcode.com/problems/count-apples-and-oranges,,,28,,sql schema,,,
1716,Calculate Money in Leetcode Bank,"Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.

He starts by putting in `$1` on Monday, the first day. Every day from Tuesday to Sunday, he will put in `$1` more than the day before. On every subsequent Monday, he will put in `$1` more than the previous Monday. 
Given `n`, return the total amount of money he will have in the Leetcode bank at the end of the `nth` day.


Example 1:
Input: n = 4
Output: 10
Explanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10.


Example 2:
Input: n = 10
Output: 37
Explanation: After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.


Example 3:
Input: n = 20
Output: 96
Explanation: After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.


Constraints:
`1 <= n <= 1000`",Easy,https://leetcode.com/problems/calculate-money-in-leetcode-bank,edabit,"Math,Greedy",215,,"hercy wants to save money for his first car. he puts money in the leetcode bank every day. he starts by putting in `$1` on monday, the first day. every day from tuesday to sunday, he will put in `$1` more than the day before. on every subsequent monday, he will put in `$1` more than the previous monday. given `n`, return the total amount of money he will have in the leetcode bank at the end of the `nth` day.","input: n = 4 output: 10 explanation: after the 4th day, the total is 1 + 2 + 3 + 4 = 10. example 2: input: n = 10 output: 37 explanation: after the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. notice that on the 2nd monday, hercy only puts in $2. example 3: input: n = 20 output: 96 explanation: after the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.",`1 <= n <= 1000`,
1717,Maximum Score From Removing Substrings,"You are given a string `s` and two integers `x` and `y`. You can perform two types of operations any number of times.

Remove substring `""ab""` and gain `x` points.

	
For example, when removing `""ab""` from `""cabxbae""` it becomes `""cxbae""`.

Remove substring `""ba""` and gain `y` points.

	
For example, when removing `""ba""` from `""cabxbae""` it becomes `""cabxe""`.

Return the maximum points you can gain after applying the above operations on `s`.


Example 1:
Input: s = ""cdbcbbaaabab"", x = 4, y = 5
Output: 19
Explanation:
- Remove the ""ba"" underlined in ""cdbcbbaaabab"". Now, s = ""cdbcbbaaab"" and 5 points are added to the score.

- Remove the ""ab"" underlined in ""cdbcbbaaab"". Now, s = ""cdbcbbaa"" and 4 points are added to the score.

- Remove the ""ba"" underlined in ""cdbcbbaa"". Now, s = ""cdbcba"" and 5 points are added to the score.

- Remove the ""ba"" underlined in ""cdbcba"". Now, s = ""cdbc"" and 5 points are added to the score.

Total score = 5 + 4 + 5 + 5 = 19.


Example 2:
Input: s = ""aabbaaxybbaabb"", x = 5, y = 4
Output: 20

Constraints:
`1 <= s.length <= 105`
`1 <= x, y <= 104`
`s` consists of lowercase English letters.",Medium,https://leetcode.com/problems/maximum-score-from-removing-substrings,Google,Greedy,220,,"you are given a string `s` and two integers `x` and `y`. you can perform two types of operations any number of times. remove substring `""ab""` and gain `x` points. for example, when removing `""ab""` from `""cabxbae""` it becomes `""cxbae""`. remove substring `""ba""` and gain `y` points. for example, when removing `""ba""` from `""cabxbae""` it becomes `""cabxe""`. return the maximum points you can gain after applying the above operations on `s`.","input: s = ""cdbcbbaaabab"", x = 4, y = 5 output: 19 explanation: - remove the ""ba"" underlined in ""cdbcbbaaabab"". now, s = ""cdbcbbaaab"" and 5 points are added to the score. - remove the ""ab"" underlined in ""cdbcbbaaab"". now, s = ""cdbcbbaa"" and 4 points are added to the score. - remove the ""ba"" underlined in ""cdbcbbaa"". now, s = ""cdbcba"" and 5 points are added to the score. - remove the ""ba"" underlined in ""cdbcba"". now, s = ""cdbc"" and 5 points are added to the score. total score = 5 + 4 + 5 + 5 = 19. example 2: input: s = ""aabbaaxybbaabb"", x = 5, y = 4 output: 20","`1 <= s.length <= 10^5` `1 <= x, y <= 10^4` `s` consists of lowercase english letters.",
1718,Construct the Lexicographically Largest Valid Sequence,"Given an integer `n`, find a sequence that satisfies all of the following:
The integer `1` occurs once in the sequence.

Each integer between `2` and `n` occurs twice in the sequence.

For every integer `i` between `2` and `n`, the distance between the two occurrences of `i` is exactly `i`.

The distance between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`.

Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution. 
A sequence `a` is lexicographically larger than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. For example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.


Example 1:
Input: n = 3
Output: [3,1,2,3,2]
Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.


Example 2:
Input: n = 5
Output: [5,3,1,4,3,5,2,4,2]

Constraints:
`1 <= n <= 20`",Medium,https://leetcode.com/problems/construct-the-lexicographically-largest-valid-sequence,Salesforce,"Backtracking,Recursion",198,,"given an integer `n`, find a sequence that satisfies all of the following: the integer `1` occurs once in the sequence. each integer between `2` and `n` occurs twice in the sequence. for every integer `i` between `2` and `n`, the distance between the two occurrences of `i` is exactly `i`. the distance between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`. return the lexicographically largest sequence. it is guaranteed that under the given constraints, there is always a solution. a sequence `a` is lexicographically larger than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. for example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.","input: n = 3 output: [3,1,2,3,2] explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence. example 2: input: n = 5 output: [5,3,1,4,3,5,2,4,2]",`1 <= n <= 20`,
1719,Number Of Ways To Reconstruct A Tree,"You are given an array `pairs`, where `pairs[i] = [xi, yi]`, and:
There are no duplicates.

`xi < yi`
Let `ways` be the number of rooted trees that satisfy the following conditions:
The tree consists of nodes whose values appeared in `pairs`.

A pair `[xi, yi]` exists in `pairs` if and only if `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`.

Note: the tree does not have to be a binary tree.

Two ways are considered to be different if there is at least one node that has different parents in both ways.

Return:
`0` if `ways == 0`
`1` if `ways == 1`
`2` if `ways > 1`
A rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.

An ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.


Example 1:
Input: pairs = [[1,2],[2,3]]
Output: 1
Explanation: There is exactly one valid rooted tree, which is shown in the above figure.


Example 2:
Input: pairs = [[1,2],[2,3],[1,3]]
Output: 2
Explanation: There are multiple valid rooted trees. Three of them are shown in the above figures.


Example 3:
Input: pairs = [[1,2],[2,3],[2,4],[1,5]]
Output: 0
Explanation: There are no valid rooted trees.


Constraints:
`1 <= pairs.length <= 105`
`1 <= xi < yi <= 500`
The elements in `pairs` are unique.",Hard,https://leetcode.com/problems/number-of-ways-to-reconstruct-a-tree,Uber,"Tree,Graph",64,,"you are given an array `pairs`, where `pairs[i] = [xi, yi]`, and: there are no duplicates. `xi < yi` let `ways` be the number of rooted trees that satisfy the following conditions: the tree consists of nodes whose values appeared in `pairs`. a pair `[xi, yi]` exists in `pairs` if and only if `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`. note: the tree does not have to be a binary tree. two ways are considered to be different if there is at least one node that has different parents in both ways. return: `0` if `ways == 0` `1` if `ways == 1` `2` if `ways > 1` a rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root. an ancestor of a node is any node on the path from the root to that node (excluding the node itself). the root has no ancestors.","input: pairs = [[1,2],[2,3]] output: 1 explanation: there is exactly one valid rooted tree, which is shown in the above figure. example 2: input: pairs = [[1,2],[2,3],[1,3]] output: 2 explanation: there are multiple valid rooted trees. three of them are shown in the above figures. example 3: input: pairs = [[1,2],[2,3],[2,4],[1,5]] output: 0 explanation: there are no valid rooted trees.",`1 <= pairs.length <= 10^5` `1 <= xi < yi <= 500` the elements in `pairs` are unique.,
1720,Decode XORed Array,"There is a hidden integer array `arr` that consists of `n` non-negative integers.

It was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`.

You are given the `encoded` array. You are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`.

Return the original array `arr`. It can be proved that the answer exists and is unique.


Example 1:
Input: encoded = [1,2,3], first = 1
Output: [1,0,2,1]
Explanation: If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]

Example 2:
Input: encoded = [6,2,7,3], first = 4
Output: [4,2,0,7,4]

Constraints:
`2 <= n <= 104`
`encoded.length == n - 1`
`0 <= encoded[i] <= 105`
`0 <= first <= 105`",Easy,https://leetcode.com/problems/decode-xored-array,,,209,,"there is a hidden integer array `arr` that consists of `n` non-negative integers. it was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] xor arr[i + 1]`. for example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`. you are given the `encoded` array. you are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`. return the original array `arr`. it can be proved that the answer exists and is unique.","input: encoded = [1,2,3], first = 1 output: [1,0,2,1] explanation: if arr = [1,0,2,1], then first = 1 and encoded = [1 xor 0, 0 xor 2, 2 xor 1] = [1,2,3] example 2: input: encoded = [6,2,7,3], first = 4 output: [4,2,0,7,4]",`2 <= n <= 10^4` `encoded.length == n - 1` `0 <= encoded[i] <= 10^5` `0 <= first <= 10^5`,
1721,Swapping Nodes in a Linked List,"You are given the `head` of a linked list, and an integer `k`.

Return the head of the linked list after swapping the values of the `kth` node from the beginning and the `kth` node from the end (the list is 1-indexed).


Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [1,4,3,2,5]

Example 2:
Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5
Output: [7,9,6,6,8,7,3,0,9,5]

Example 3:
Input: head = [1], k = 1
Output: [1]

Example 4:
Input: head = [1,2], k = 1
Output: [2,1]

Example 5:
Input: head = [1,2,3], k = 2
Output: [1,2,3]

Constraints:
The number of nodes in the list is `n`.

`1 <= k <= n <= 105`
`0 <= Node.val <= 100`",Medium,https://leetcode.com/problems/swapping-nodes-in-a-linked-list,Amazon,Linked List,472,"[Remove Nth Node From End of List, /problems/remove-nth-node-from-end-of-list/, Medium], [Swap Nodes in Pairs, /problems/swap-nodes-in-pairs/, Medium], [Reverse Nodes in k-Group, /problems/reverse-nodes-in-k-group/, Hard]","you are given the `head` of a linked list, and an integer `k`. return the head of the linked list after swapping the values of the `kth` node from the beginning and the `kth` node from the end (the list is 1-indexed).","input: head = [1,2,3,4,5], k = 2 output: [1,4,3,2,5] example 2: input: head = [7,9,6,6,7,8,3,0,9,5], k = 5 output: [7,9,6,6,8,7,3,0,9,5] example 3: input: head = [1], k = 1 output: [1] example 4: input: head = [1,2], k = 1 output: [2,1] example 5: input: head = [1,2,3], k = 2 output: [1,2,3]",the number of nodes in the list is `n`. `1 <= k <= n <= 10^5` `0 <= node.val <= 10^0`,
1722,Minimize Hamming Distance After Swap Operations,"You are given two integer arrays, `source` and `target`, both of length `n`. You are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai, bi]` indicates that you are allowed to swap the elements at index `ai` and index `bi` (0-indexed) of array `source`. Note that you can swap elements at a specific pair of indices multiple times and in any order.

The Hamming distance of two arrays of the same length, `source` and `target`, is the number of positions where the elements are different. Formally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]` (0-indexed).

Return the minimum Hamming distance of `source` and `target` after performing any amount of swap operations on array `source`.


Example 1:
Input: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]
Output: 1
Explanation: source can be transformed the following way:
- Swap indices 0 and 1: source = [2,1,3,4]
- Swap indices 2 and 3: source = [2,1,4,3]
The Hamming distance of source and target is 1 as they differ in 1 position: index 3.


Example 2:
Input: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []
Output: 2
Explanation: There are no allowed swaps.

The Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.


Example 3:
Input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]
Output: 0

Constraints:
`n == source.length == target.length`
`1 <= n <= 105`
`1 <= source[i], target[i] <= 105`
`0 <= allowedSwaps.length <= 105`
`allowedSwaps[i].length == 2`
`0 <= ai, bi <= n - 1`
`ai != bi`",Medium,https://leetcode.com/problems/minimize-hamming-distance-after-swap-operations,Google,"Greedy,Depth-first Search,Union Find",333,"[Smallest String With Swaps, /problems/smallest-string-with-swaps/, Medium]","you are given two integer arrays, `source` and `target`, both of length `n`. you are also given an array `allowedswaps` where each `allowedswaps[i] = [ai, bi]` indicates that you are allowed to swap the elements at index `ai` and index `bi` (0-indexed) of array `source`. note that you can swap elements at a specific pair of indices multiple times and in any order. the hamming distance of two arrays of the same length, `source` and `target`, is the number of positions where the elements are different. formally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]` (0-indexed). return the minimum hamming distance of `source` and `target` after performing any amount of swap operations on array `source`.","input: source = [1,2,3,4], target = [2,1,4,5], allowedswaps = [[0,1],[2,3]] output: 1 explanation: source can be transformed the following way: - swap indices 0 and 1: source = [2,1,3,4] - swap indices 2 and 3: source = [2,1,4,3] the hamming distance of source and target is 1 as they differ in 1 position: index 3. example 2: input: source = [1,2,3,4], target = [1,3,2,4], allowedswaps = [] output: 2 explanation: there are no allowed swaps. the hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2. example 3: input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedswaps = [[0,4],[4,2],[1,3],[1,4]] output: 0","`n == source.length == target.length` `1 <= n <= 10^5` `1 <= source[i], target[i] <= 10^5` `0 <= allowedswaps.length <= 10^5` `allowedswaps[i].length == 2` `0 <= ai, bi <= n - 1` `ai != bi`",
1723,Find Minimum Time to Finish All Jobs,"You are given an integer array `jobs`, where `jobs[i]` is the amount of time it takes to complete the `ith` job.

There are `k` workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.

Return the minimum possible maximum working time of any assignment. 

Example 1:
Input: jobs = [3,2,3], k = 3
Output: 3
Explanation: By assigning each person one job, the maximum time is 3.


Example 2:
Input: jobs = [1,2,4,7,8], k = 2
Output: 11
Explanation: Assign the jobs the following way:
Worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)
Worker 2: 4, 7 (working time = 4 + 7 = 11)
The maximum working time is 11.


Constraints:
`1 <= k <= jobs.length <= 12`
`1 <= jobs[i] <= 107`",Hard,https://leetcode.com/problems/find-minimum-time-to-finish-all-jobs,Amazon,"Backtracking,Recursion",211,,"you are given an integer array `jobs`, where `jobs[i]` is the amount of time it takes to complete the `ith` job. there are `k` workers that you can assign jobs to. each job should be assigned to exactly one worker. the working time of a worker is the sum of the time it takes to complete all jobs assigned to them. your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized. return the minimum possible maximum working time of any assignment.","input: jobs = [3,2,3], k = 3 output: 3 explanation: by assigning each person one job, the maximum time is 3. example 2: input: jobs = [1,2,4,7,8], k = 2 output: 11 explanation: assign the jobs the following way: worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11) worker 2: 4, 7 (working time = 4 + 7 = 11) the maximum working time is 11.",`1 <= k <= jobs.length <= 12` `1 <= jobs[i] <= 10^7`,
1724,Checking Existence of Edge Length Limited Paths II,"An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be multiple edges between two nodes, and the graph may not be connected.

Implement the `DistanceLimitedPathsExist` class:
`DistanceLimitedPathsExist(int n, int[][] edgeList)` Initializes the class with an undirected graph.

`boolean query(int p, int q, int limit)` Returns `true` if there exists a path from `p` to `q` such that each edge on the path has a distance strictly less than `limit`, and otherwise `false`.


Example 1:
Input
[""DistanceLimitedPathsExist"", ""query"", ""query"", ""query"", ""query""]
[[6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]], [2, 3, 2], [1, 3, 3], [2, 0, 3], [0, 5, 6]]
Output
[null, true, false, true, false]
Explanation
DistanceLimitedPathsExist distanceLimitedPathsExist = new DistanceLimitedPathsExist(6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]);
distanceLimitedPathsExist.query(2, 3, 2); // return true. There is an edge from 2 to 3 of distance 1, which is less than 2.

distanceLimitedPathsExist.query(1, 3, 3); // return false. There is no way to go from 1 to 3 with distances strictly less than 3.

distanceLimitedPathsExist.query(2, 0, 3); // return true. There is a way to go from 2 to 0 with distance < 3: travel from 2 to 3 to 0.

distanceLimitedPathsExist.query(0, 5, 6); // return false. There are no paths from 0 to 5.


`Constraints:`
`2 <= n <= 104`
`0 <= edgeList.length <= 104`
`edgeList[i].length == 3`
`0 <= ui, vi, p, q <= n-1`
`ui != vi`
`p != q`
`1 <= disi, limit <= 109`
At most `104` calls will be made to `query`.",Hard,https://leetcode.com/problems/checking-existence-of-edge-length-limited-paths-ii,Google,"Dynamic Programming,Union Find,Graph",17,"[Checking Existence of Edge Length Limited Paths, /problems/checking-existence-of-edge-length-limited-paths/, Hard]","an undirected graph of `n` nodes is defined by `edgelist`, where `edgelist[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. note that there may be multiple edges between two nodes, and the graph may not be connected. implement the `distancelimitedpathsexist` class: `distancelimitedpathsexist(int n, int[][] edgelist)` initializes the class with an undirected graph. `boolean query(int p, int q, int limit)` returns `true` if there exists a path from `p` to `q` such that each edge on the path has a distance strictly less than `limit`, and otherwise `false`.","input [""distancelimitedpathsexist"", ""query"", ""query"", ""query"", ""query""] [[6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]], [2, 3, 2], [1, 3, 3], [2, 0, 3], [0, 5, 6]] output [null, true, false, true, false] explanation distancelimitedpathsexist distancelimitedpathsexist = new distancelimitedpathsexist(6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]); distancelimitedpathsexist.query(2, 3, 2); // return true. there is an edge from 2 to 3 of distance 1, which is less than 2. distancelimitedpathsexist.query(1, 3, 3); // return false. there is no way to go from 1 to 3 with distances strictly less than 3. distancelimitedpathsexist.query(2, 0, 3); // return true. there is a way to go from 2 to 0 with distance < 3: travel from 2 to 3 to 0. distancelimitedpathsexist.query(0, 5, 6); // return false. there are no paths from 0 to 5. `","` `2 <= n <= 10^4` `0 <= edgelist.length <= 10^4` `edgelist[i].length == 3` `0 <= ui, vi, p, q <= n-1` `ui != vi` `p != q` `1 <= disi, limit <= 10^9` at most `10^4` calls will be made to `query`.",
1725,Number Of Rectangles That Can Form The Largest Square,"You are given an array `rectangles` where `rectangles[i] = [li, wi]` represents the `ith` rectangle of length `li` and width `wi`.

You can cut the `ith` rectangle to form a square with a side length of `k` if both `k <= li` and `k <= wi`. For example, if you have a rectangle `[4,6]`, you can cut it to get a square with a side length of at most `4`.

Let `maxLen` be the side length of the largest square you can obtain from any of the given rectangles.

Return the number of rectangles that can make a square with a side length of `maxLen`.


Example 1:
Input: rectangles = [[5,8],[3,9],[5,12],[16,5]]
Output: 3
Explanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].

The largest possible square is of length 5, and you can get it out of 3 rectangles.


Example 2:
Input: rectangles = [[2,3],[3,7],[4,3],[3,7]]
Output: 3

Constraints:
`1 <= rectangles.length <= 1000`
`rectangles[i].length == 2`
`1 <= li, wi <= 109`
`li != wi`",Easy,https://leetcode.com/problems/number-of-rectangles-that-can-form-the-largest-square,AllinCall,Greedy,141,,"you are given an array `rectangles` where `rectangles[i] = [li, wi]` represents the `ith` rectangle of length `li` and width `wi`. you can cut the `ith` rectangle to form a square with a side length of `k` if both `k <= li` and `k <= wi`. for example, if you have a rectangle `[4,6]`, you can cut it to get a square with a side length of at most `4`. let `maxlen` be the side length of the largest square you can obtain from any of the given rectangles. return the number of rectangles that can make a square with a side length of `maxlen`.","input: rectangles = [[5,8],[3,9],[5,12],[16,5]] output: 3 explanation: the largest squares you can get from each rectangle are of lengths [5,3,5,5]. the largest possible square is of length 5, and you can get it out of 3 rectangles. example 2: input: rectangles = [[2,3],[3,7],[4,3],[3,7]] output: 3","`1 <= rectangles.length <= 1000` `rectangles[i].length == 2` `1 <= li, wi <= 10^9` `li != wi`",
1726,Tuple with Same Product,"Given an array `nums` of distinct positive integers, return the number of tuples `(a, b, c, d)` such that `a * b = c * d` where `a`, `b`, `c`, and `d` are elements of `nums`, and `a != b != c != d`.


Example 1:
Input: nums = [2,3,4,6]
Output: 8
Explanation: There are 8 valid tuples:
(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)
(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)

Example 2:
Input: nums = [1,2,4,5,10]
Output: 16
Explanation: There are 16 valids tuples:
(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)
(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)
(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,4,5)
(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)

Example 3:
Input: nums = [2,3,4,6,8,12]
Output: 40

Example 4:
Input: nums = [2,3,5,7]
Output: 0

Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 104`
All elements in `nums` are distinct.",Medium,https://leetcode.com/problems/tuple-with-same-product,Google,"Array,Hash Table",208,,"given an array `nums` of distinct positive integers, return the number of tuples `(a, b, c, d)` such that `a * b = c * d` where `a`, `b`, `c`, and `d` are elements of `nums`, and `a != b != c != d`.","input: nums = [2,3,4,6] output: 8 explanation: there are 8 valid tuples: (2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3) (3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2) example 2: input: nums = [1,2,4,5,10] output: 16 explanation: there are 16 valids tuples: (1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2) (2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1) (2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,4,5) (4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2) example 3: input: nums = [2,3,4,6,8,12] output: 40 example 4: input: nums = [2,3,5,7] output: 0",`1 <= nums.length <= 1000` `1 <= nums[i] <= 10^4` all elements in `nums` are distinct.,
1727,Largest Submatrix With Rearrangements,"You are given a binary matrix `matrix` of size `m x n`, and you are allowed to rearrange the columns of the `matrix` in any order.

Return the area of the largest submatrix within `matrix` where every element of the submatrix is `1` after reordering the columns optimally.


Example 1:
Input: matrix = [[0,0,1],[1,1,1],[1,0,1]]
Output: 4
Explanation: You can rearrange the columns as shown above.

The largest submatrix of 1s, in bold, has an area of 4.


Example 2:
Input: matrix = [[1,0,1,0,1]]
Output: 3
Explanation: You can rearrange the columns as shown above.

The largest submatrix of 1s, in bold, has an area of 3.


Example 3:
Input: matrix = [[1,1,0],[1,0,1]]
Output: 2
Explanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.


Example 4:
Input: matrix = [[0,0],[0,0]]
Output: 0
Explanation: As there are no 1s, no submatrix of 1s can be formed and the area is 0.


Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m * n <= 105`
`matrix[i][j]` is `0` or `1`.",Medium,https://leetcode.com/problems/largest-submatrix-with-rearrangements,"Google,Directi","Greedy,Sort",346,"[Max Area of Island, /problems/max-area-of-island/, Medium]","you are given a binary matrix `matrix` of size `m x n`, and you are allowed to rearrange the columns of the `matrix` in any order. return the area of the largest submatrix within `matrix` where every element of the submatrix is `1` after reordering the columns optimally.","input: matrix = [[0,0,1],[1,1,1],[1,0,1]] output: 4 explanation: you can rearrange the columns as shown above. the largest submatrix of 1s, in bold, has an area of 4. example 2: input: matrix = [[1,0,1,0,1]] output: 3 explanation: you can rearrange the columns as shown above. the largest submatrix of 1s, in bold, has an area of 3. example 3: input: matrix = [[1,1,0],[1,0,1]] output: 2 explanation: notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2. example 4: input: matrix = [[0,0],[0,0]] output: 0 explanation: as there are no 1s, no submatrix of 1s can be formed and the area is 0.",`m == matrix.length` `n == matrix[i].length` `1 <= m * n <= 10^5` `matrix[i][j]` is `0` or `1`.,
1728,Cat and Mouse II,"A game is played by a cat and a mouse named Cat and Mouse.

The environment is represented by a `grid` of size `rows x cols`, where each element is a wall, floor, player (Cat, Mouse), or food.

Players are represented by the characters `'C'`(Cat)`,'M'`(Mouse).

Floors are represented by the character `'.'` and can be walked on.

Walls are represented by the character `'#'` and cannot be walked on.

Food is represented by the character `'F'` and can be walked on.

There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.

Mouse and Cat play according to the following rules:
Mouse moves first, then they take turns to move.

During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the `grid`.

`catJump, mouseJump` are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.

Staying in the same position is allowed.

Mouse can jump over Cat.

The game can end in 4 ways:
If Cat occupies the same position as Mouse, Cat wins.

If Cat reaches the food first, Cat wins.

If Mouse reaches the food first, Mouse wins.

If Mouse cannot get to the food within 1000 turns, Cat wins.

Given a `rows x cols` matrix `grid` and two integers `catJump` and `mouseJump`, return `true` if Mouse can win the game if both Cat and Mouse play optimally, otherwise return `false`.


Example 1:
Input: grid = [""####F"",""#C..."",""M....""], catJump = 1, mouseJump = 2
Output: true
Explanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse.


Example 2:
Input: grid = [""M.C...F""], catJump = 1, mouseJump = 4
Output: true

Example 3:
Input: grid = [""M.C...F""], catJump = 1, mouseJump = 3
Output: false

Example 4:
Input: grid = [""C...#"",""...#F"",""....#"",""M....""], catJump = 2, mouseJump = 5
Output: false

Example 5:
Input: grid = ["".M..."",""..#.."",""#..#."",""C#.#."",""...#F""], catJump = 3, mouseJump = 1
Output: true

Constraints:
`rows == grid.length`
`cols = grid[i].length`
`1 <= rows, cols <= 8`
`grid[i][j]` consist only of characters `'C'`, `'M'`, `'F'`, `'.'`, and `'#'`.

There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.

`1 <= catJump, mouseJump <= 8`",Hard,https://leetcode.com/problems/cat-and-mouse-ii,Google,Dynamic Programming,79,"[Escape The Ghosts, /problems/escape-the-ghosts/, Medium], [Cat and Mouse, /problems/cat-and-mouse/, Hard]","a game is played by a cat and a mouse named cat and mouse. the environment is represented by a `grid` of size `rows x cols`, where each element is a wall, floor, player (cat, mouse), or food. players are represented by the characters `'c'`(cat)`,'m'`(mouse). floors are represented by the character `'.'` and can be walked on. walls are represented by the character `'#'` and cannot be walked on. food is represented by the character `'f'` and can be walked on. there is only one of each character `'c'`, `'m'`, and `'f'` in `grid`. mouse and cat play according to the following rules: mouse moves first, then they take turns to move. during each turn, cat and mouse can jump in one of the four directions (left, right, up, down). they cannot jump over the wall nor outside of the `grid`. `catjump, mousejump` are the maximum lengths cat and mouse can jump at a time, respectively. cat and mouse can jump less than the maximum length. staying in the same position is allowed. mouse can jump over cat. the game can end in 4 ways: if cat occupies the same position as mouse, cat wins. if cat reaches the food first, cat wins. if mouse reaches the food first, mouse wins. if mouse cannot get to the food within 1000 turns, cat wins. given a `rows x cols` matrix `grid` and two integers `catjump` and `mousejump`, return `true` if mouse can win the game if both cat and mouse play optimally, otherwise return `false`.","input: grid = [""####f"",""#c..."",""m....""], catjump = 1, mousejump = 2 output: true explanation: cat cannot catch mouse on its turn nor can it get the food before mouse. example 2: input: grid = [""m.c...f""], catjump = 1, mousejump = 4 output: true example 3: input: grid = [""m.c...f""], catjump = 1, mousejump = 3 output: false example 4: input: grid = [""c...#"",""...#f"",""....#"",""m....""], catjump = 2, mousejump = 5 output: false example 5: input: grid = ["".m..."",""..#.."",""#..#."",""c#.#."",""...#f""], catjump = 3, mousejump = 1 output: true","`rows == grid.length` `cols = grid[i].length` `1 <= rows, cols <= 8` `grid[i][j]` consist only of characters `'c'`, `'m'`, `'f'`, `'.'`, and `'#'`. there is only one of each character `'c'`, `'m'`, and `'f'` in `grid`. `1 <= catjump, mousejump <= 8`",
1729,Find Followers Count,SQL Schema,Easy,https://leetcode.com/problems/find-followers-count,Tesla,,18,,sql schema,,,
1730,Shortest Path to Get Food,"You are starving and you want to eat food as quickly as possible. You want to find the shortest path to arrive at any food cell.

You are given an `m x n` character matrix, `grid`, of these different types of cells:
`'*'` is your location. There is exactly one `'*'` cell.

`'#'` is a food cell. There may be multiple food cells.

`'O'` is free space, and you can travel through these cells.

`'X'` is an obstacle, and you cannot travel through these cells.

You can travel to any adjacent cell north, east, south, or west of your current location if there is not an obstacle.

Return the length of the shortest path for you to reach any food cell. If there is no path for you to reach food, return `-1`.


Example 1:
Input: grid = [[""X"",""X"",""X"",""X"",""X"",""X""],[""X"",""*"",""O"",""O"",""O"",""X""],[""X"",""O"",""O"",""#"",""O"",""X""],[""X"",""X"",""X"",""X"",""X"",""X""]]
Output: 3
Explanation: It takes 3 steps to reach the food.


Example 2:
Input: grid = [[""X"",""X"",""X"",""X"",""X""],[""X"",""*"",""X"",""O"",""X""],[""X"",""O"",""X"",""#"",""X""],[""X"",""X"",""X"",""X"",""X""]]
Output: -1
Explanation: It is not possible to reach the food.


Example 3:
Input: grid = [[""X"",""X"",""X"",""X"",""X"",""X"",""X"",""X""],[""X"",""*"",""O"",""X"",""O"",""#"",""O"",""X""],[""X"",""O"",""O"",""X"",""O"",""O"",""X"",""X""],[""X"",""O"",""O"",""O"",""O"",""#"",""O"",""X""],[""X"",""X"",""X"",""X"",""X"",""X"",""X"",""X""]]
Output: 6
Explanation: There can be multiple food cells. It only takes 6 steps to reach the bottom food.


Example 4:
Input: grid = [[""O"",""*""],[""#"",""O""]]
Output: 2

Example 5:
Input: grid = [[""X"",""*""],[""#"",""X""]]
Output: -1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 200`
`grid[row][col]` is `'*'`, `'X'`, `'O'`, or `'#'`.

The `grid` contains exactly one `'*'`.",Medium,https://leetcode.com/problems/shortest-path-to-get-food,Bloomberg,"Depth-first Search,Breadth-first Search,Graph",62,"[01 Matrix, /problems/01-matrix/, Medium], [Shortest Path in a Grid with Obstacles Elimination, /problems/shortest-path-in-a-grid-with-obstacles-elimination/, Hard]","you are starving and you want to eat food as quickly as possible. you want to find the shortest path to arrive at any food cell. you are given an `m x n` character matrix, `grid`, of these different types of cells: `'*'` is your location. there is exactly one `'*'` cell. `'#'` is a food cell. there may be multiple food cells. `'o'` is free space, and you can travel through these cells. `'x'` is an obstacle, and you cannot travel through these cells. you can travel to any adjacent cell north, east, south, or west of your current location if there is not an obstacle. return the length of the shortest path for you to reach any food cell. if there is no path for you to reach food, return `-1`.","input: grid = [[""x"",""x"",""x"",""x"",""x"",""x""],[""x"",""*"",""o"",""o"",""o"",""x""],[""x"",""o"",""o"",""#"",""o"",""x""],[""x"",""x"",""x"",""x"",""x"",""x""]] output: 3 explanation: it takes 3 steps to reach the food. example 2: input: grid = [[""x"",""x"",""x"",""x"",""x""],[""x"",""*"",""x"",""o"",""x""],[""x"",""o"",""x"",""#"",""x""],[""x"",""x"",""x"",""x"",""x""]] output: -1 explanation: it is not possible to reach the food. example 3: input: grid = [[""x"",""x"",""x"",""x"",""x"",""x"",""x"",""x""],[""x"",""*"",""o"",""x"",""o"",""#"",""o"",""x""],[""x"",""o"",""o"",""x"",""o"",""o"",""x"",""x""],[""x"",""o"",""o"",""o"",""o"",""#"",""o"",""x""],[""x"",""x"",""x"",""x"",""x"",""x"",""x"",""x""]] output: 6 explanation: there can be multiple food cells. it only takes 6 steps to reach the bottom food. example 4: input: grid = [[""o"",""*""],[""#"",""o""]] output: 2 example 5: input: grid = [[""x"",""*""],[""#"",""x""]] output: -1","`m == grid.length` `n == grid[i].length` `1 <= m, n <= 200` `grid[row][col]` is `'*'`, `'x'`, `'o'`, or `'#'`. the `grid` contains exactly one `'*'`.",
1731,The Number of Employees Which Report to Each Employee,SQL Schema,Easy,https://leetcode.com/problems/the-number-of-employees-which-report-to-each-employee,CoderByte,,27,,sql schema,,,
1732,Find the Highest Altitude,"There is a biker going on a road trip. The road trip consists of `n + 1` points at different altitudes. The biker starts his trip on point `0` with altitude equal `0`.

You are given an integer array `gain` of length `n` where `gain[i]` is the net gain in altitude between points `i`​​​​​​ and `i + 1` for all (`0 <= i < n)`. Return the highest altitude of a point.


Example 1:
Input: gain = [-5,1,5,0,-7]
Output: 1
Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.


Example 2:
Input: gain = [-4,-3,-2,-1,4,3,2]
Output: 0
Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.


Constraints:
`n == gain.length`
`1 <= n <= 100`
`-100 <= gain[i] <= 100`",Easy,https://leetcode.com/problems/find-the-highest-altitude,,,228,,there is a biker going on a road trip. the road trip consists of `n + 1` points at different altitudes. the biker starts his trip on point `0` with altitude equal `0`. you are given an integer array `gain` of length `n` where `gain[i]` is the net gain in altitude between points `i`​​​​​​ and `i + 1` for all (`0 <= i < n)`. return the highest altitude of a point.,"input: gain = [-5,1,5,0,-7] output: 1 explanation: the altitudes are [0,-5,-4,1,1,-6]. the highest is 1. example 2: input: gain = [-4,-3,-2,-1,4,3,2] output: 0 explanation: the altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. the highest is 0.",`n == gain.length` `1 <= n <= 10^0` `-10^0 <= gain[i] <= 10^0`,
1733,Minimum Number of People to Teach,"On a social network consisting of `m` users and some friendships between users, two users can communicate with each other if they know a common language.

You are given an integer `n`, an array `languages`, and an array `friendships` where:
There are `n` languages numbered `1` through `n`,
`languages[i]` is the set of languages the `i​​​​​​th`​​​​ user knows, and
`friendships[i] = [u​​​​​​i​​​, v​​​​​​i]` denotes a friendship between the users `u​​​​​​​​​​​i`​​​​​ and `vi`.

You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.

Note that friendships are not transitive, meaning if `x` is a friend of `y` and `y` is a friend of `z`, this doesn't guarantee that `x` is a friend of `z`.


Example 1:
Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]
Output: 1
Explanation: You can either teach user 1 the second language or user 2 the first language.


Example 2:
Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]
Output: 2
Explanation: Teach the third language to users 1 and 3, yielding two users to teach.


Constraints:
`2 <= n <= 500`
`languages.length == m`
`1 <= m <= 500`
`1 <= languages[i].length <= n`
`1 <= languages[i][j] <= n`
`1 <= u​​​​​​i < v​​​​​​i <= languages.length`
`1 <= friendships.length <= 500`
All tuples `(u​​​​​i, v​​​​​​i)` are unique
`languages[i]` contains only unique values",Medium,https://leetcode.com/problems/minimum-number-of-people-to-teach,Duolingo,"Array,Greedy",83,,"on a social network consisting of `m` users and some friendships between users, two users can communicate with each other if they know a common language. you are given an integer `n`, an array `languages`, and an array `friendships` where: there are `n` languages numbered `1` through `n`, `languages[i]` is the set of languages the `i​​​​​​th`​​​​ user knows, and `friendships[i] = [u​​​​​​i​​​, v​​​​​​i]` denotes a friendship between the users `u​​​​​​​​​​​i`​​​​​ and `vi`. you can choose one language and teach it to some users so that all friends can communicate with each other. return the minimum number of users you need to teach. note that friendships are not transitive, meaning if `x` is a friend of `y` and `y` is a friend of `z`, this doesn't guarantee that `x` is a friend of `z`.","input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]] output: 1 explanation: you can either teach user 1 the second language or user 2 the first language. example 2: input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]] output: 2 explanation: teach the third language to users 1 and 3, yielding two users to teach.","`2 <= n <= 500` `languages.length == m` `1 <= m <= 500` `1 <= languages[i].length <= n` `1 <= languages[i][j] <= n` `1 <= u​​​​​​i < v​​​​​​i <= languages.length` `1 <= friendships.length <= 500` all tuples `(u​​​​​i, v​​​​​​i)` are unique `languages[i]` contains only unique values",
1734,Decode XORed Permutation,"There is an integer array `perm` that is a permutation of the first `n` positive integers, where `n` is always odd.

It was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = perm[i] XOR perm[i + 1]`. For example, if `perm = [1,3,2]`, then `encoded = [2,1]`.

Given the `encoded` array, return the original array `perm`. It is guaranteed that the answer exists and is unique.


Example 1:
Input: encoded = [3,1]
Output: [1,2,3]
Explanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]

Example 2:
Input: encoded = [6,5,4,6]
Output: [2,4,1,5,3]

Constraints:
`3 <= n < 105`
`n` is odd.

`encoded.length == n - 1`",Medium,https://leetcode.com/problems/decode-xored-permutation,Amazon,Bit Manipulation,266,,"there is an integer array `perm` that is a permutation of the first `n` positive integers, where `n` is always odd. it was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = perm[i] xor perm[i + 1]`. for example, if `perm = [1,3,2]`, then `encoded = [2,1]`. given the `encoded` array, return the original array `perm`. it is guaranteed that the answer exists and is unique.","input: encoded = [3,1] output: [1,2,3] explanation: if perm = [1,2,3], then encoded = [1 xor 2,2 xor 3] = [3,1] example 2: input: encoded = [6,5,4,6] output: [2,4,1,5,3]",`3 <= n < 10^5` `n` is odd. `encoded.length == n - 1`,
1735,Count Ways to Make Array With Product,"You are given a 2D integer array, `queries`. For each `queries[i]`, where `queries[i] = [ni, ki]`, find the number of different ways you can place positive integers into an array of size `ni` such that the product of the integers is `ki`. As the number of ways may be too large, the answer to the `ith` query is the number of ways modulo `109 + 7`.

Return an integer array `answer` where `answer.length == queries.length`, and `answer[i]` is the answer to the `ith` query.


Example 1:
Input: queries = [[2,6],[5,1],[73,660]]
Output: [4,1,50734910]
Explanation: Each query is independent.

[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].

[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].

[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910.


Example 2:
Input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]
Output: [1,2,3,10,5]

Constraints:
`1 <= queries.length <= 104 `
`1 <= ni, ki <= 104`",Hard,https://leetcode.com/problems/count-ways-to-make-array-with-product,Amazon,Math,92,,"you are given a 2d integer array, `queries`. for each `queries[i]`, where `queries[i] = [ni, ki]`, find the number of different ways you can place positive integers into an array of size `ni` such that the product of the integers is `ki`. as the number of ways may be too large, the answer to the `ith` query is the number of ways modulo `109 + 7`. return an integer array `answer` where `answer.length == queries.length`, and `answer[i]` is the answer to the `ith` query.","input: queries = [[2,6],[5,1],[73,660]] output: [4,1,50734910] explanation: each query is independent. [2,6]: there are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1]. [5,1]: there is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1]. [73,660]: there are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910. example 2: input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]] output: [1,2,3,10,5]","`1 <= queries.length <= 10^4 ` `1 <= ni, ki <= 10^4`",
1736,Latest Time by Replacing Hidden Digits,"You are given a string `time` in the form of ` hh:mm`, where some of the digits in the string are hidden (represented by `?`).

The valid times are those inclusively between `00:00` and `23:59`.

Return the latest valid time you can get from `time` by replacing the hidden digits.


Example 1:
Input: time = ""2?:?0""
Output: ""23:50""
Explanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.


Example 2:
Input: time = ""0?:3?""
Output: ""09:39""

Example 3:
Input: time = ""1?:22""
Output: ""19:22""

Constraints:
`time` is in the format `hh:mm`.

It is guaranteed that you can produce a valid time from the given string.",Easy,https://leetcode.com/problems/latest-time-by-replacing-hidden-digits,Google,"String,Greedy",98,,"you are given a string `time` in the form of ` hh:mm`, where some of the digits in the string are hidden (represented by `?`). the valid times are those inclusively between `00:00` and `23:59`. return the latest valid time you can get from `time` by replacing the hidden digits.","input: time = ""2?:?0"" output: ""23:50"" explanation: the latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50. example 2: input: time = ""0?:3?"" output: ""09:39"" example 3: input: time = ""1?:22"" output: ""19:22""",`time` is in the format `hh:mm`. it is guaranteed that you can produce a valid time from the given string.,
1737,Change Minimum Characters to Satisfy One of Three Conditions,"You are given two strings `a` and `b` that consist of lowercase letters. In one operation, you can change any character in `a` or `b` to any lowercase letter.

Your goal is to satisfy one of the following three conditions:
Every letter in `a` is strictly less than every letter in `b` in the alphabet.

Every letter in `b` is strictly less than every letter in `a` in the alphabet.

Both `a` and `b` consist of only one distinct letter.

Return the minimum number of operations needed to achieve your goal.


Example 1:
Input: a = ""aba"", b = ""caa""
Output: 2
Explanation: Consider the best way to make each condition true:
1) Change b to ""ccc"" in 2 operations, then every letter in a is less than every letter in b.

2) Change a to ""bbb"" and b to ""aaa"" in 3 operations, then every letter in b is less than every letter in a.

3) Change a to ""aaa"" and b to ""aaa"" in 2 operations, then a and b consist of one distinct letter.

The best way was done in 2 operations (either condition 1 or condition 3).


Example 2:
Input: a = ""dabadd"", b = ""cda""
Output: 3
Explanation: The best way is to make condition 1 true by changing b to ""eee"".


Constraints:
`1 <= a.length, b.length <= 105`
`a` and `b` consist only of lowercase letters.",Medium,https://leetcode.com/problems/change-minimum-characters-to-satisfy-one-of-three-conditions,Google,"String,Greedy",141,,"you are given two strings `a` and `b` that consist of lowercase letters. in one operation, you can change any character in `a` or `b` to any lowercase letter. your goal is to satisfy one of the following three conditions: every letter in `a` is strictly less than every letter in `b` in the alphabet. every letter in `b` is strictly less than every letter in `a` in the alphabet. both `a` and `b` consist of only one distinct letter. return the minimum number of operations needed to achieve your goal.","input: a = ""aba"", b = ""caa"" output: 2 explanation: consider the best way to make each condition true: 1) change b to ""ccc"" in 2 operations, then every letter in a is less than every letter in b. 2) change a to ""bbb"" and b to ""aaa"" in 3 operations, then every letter in b is less than every letter in a. 3) change a to ""aaa"" and b to ""aaa"" in 2 operations, then a and b consist of one distinct letter. the best way was done in 2 operations (either condition 1 or condition 3). example 2: input: a = ""dabadd"", b = ""cda"" output: 3 explanation: the best way is to make condition 1 true by changing b to ""eee"".","`1 <= a.length, b.length <= 10^5` `a` and `b` consist only of lowercase letters.",
1738,Find Kth Largest XOR Coordinate Value,"You are given a 2D `matrix` of size `m x n`, consisting of non-negative integers. You are also given an integer `k`.

The value of coordinate `(a, b)` of the matrix is the XOR of all `matrix[i][j]` where `0 <= i <= a < m` and `0 <= j <= b < n` (0-indexed).

Find the `kth` largest value (1-indexed) of all the coordinates of `matrix`.


Example 1:
Input: matrix = [[5,2],[1,6]], k = 1
Output: 7
Explanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.


Example 2:
Input: matrix = [[5,2],[1,6]], k = 2
Output: 5
Explanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.


Example 3:
Input: matrix = [[5,2],[1,6]], k = 3
Output: 4
Explanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.


Example 4:
Input: matrix = [[5,2],[1,6]], k = 4
Output: 0
Explanation: The value of coordinate (1,1) is 5 XOR 2 XOR 1 XOR 6 = 0, which is the 4th largest value.


Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 1000`
`0 <= matrix[i][j] <= 106`
`1 <= k <= m * n`",Medium,https://leetcode.com/problems/find-kth-largest-xor-coordinate-value,Google,Array,120,,"you are given a 2d `matrix` of size `m x n`, consisting of non-negative integers. you are also given an integer `k`. the value of coordinate `(a, b)` of the matrix is the xor of all `matrix[i][j]` where `0 <= i <= a < m` and `0 <= j <= b < n` (0-indexed). find the `kth` largest value (1-indexed) of all the coordinates of `matrix`.","input: matrix = [[5,2],[1,6]], k = 1 output: 7 explanation: the value of coordinate (0,1) is 5 xor 2 = 7, which is the largest value. example 2: input: matrix = [[5,2],[1,6]], k = 2 output: 5 explanation: the value of coordinate (0,0) is 5 = 5, which is the 2nd largest value. example 3: input: matrix = [[5,2],[1,6]], k = 3 output: 4 explanation: the value of coordinate (1,0) is 5 xor 1 = 4, which is the 3rd largest value. example 4: input: matrix = [[5,2],[1,6]], k = 4 output: 0 explanation: the value of coordinate (1,1) is 5 xor 2 xor 1 xor 6 = 0, which is the 4th largest value.","`m == matrix.length` `n == matrix[i].length` `1 <= m, n <= 1000` `0 <= matrix[i][j] <= 10^6` `1 <= k <= m * n`",
1739,Building Boxes,"You have a cubic storeroom where the width, length, and height of the room are all equal to `n` units. You are asked to place `n` boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:
You can place the boxes anywhere on the floor.

If box `x` is placed on top of the box `y`, then each side of the four vertical sides of the box `y` must either be adjacent to another box or to a wall.

Given an integer `n`, return the minimum possible number of boxes touching the floor.


Example 1:
Input: n = 3
Output: 3
Explanation: The figure above is for the placement of the three boxes.

These boxes are placed in the corner of the room, where the corner is on the left side.


Example 2:
Input: n = 4
Output: 3
Explanation: The figure above is for the placement of the four boxes.

These boxes are placed in the corner of the room, where the corner is on the left side.


Example 3:
Input: n = 10
Output: 6
Explanation: The figure above is for the placement of the ten boxes.

These boxes are placed in the corner of the room, where the corner is on the back side.


Constraints:
`1 <= n <= 109`",Hard,https://leetcode.com/problems/building-boxes,Codenation,"Math,Binary Search",130,,"you have a cubic storeroom where the width, length, and height of the room are all equal to `n` units. you are asked to place `n` boxes in this room where each box is a cube of unit side length. there are however some rules to placing the boxes: you can place the boxes anywhere on the floor. if box `x` is placed on top of the box `y`, then each side of the four vertical sides of the box `y` must either be adjacent to another box or to a wall. given an integer `n`, return the minimum possible number of boxes touching the floor.","input: n = 3 output: 3 explanation: the figure above is for the placement of the three boxes. these boxes are placed in the corner of the room, where the corner is on the left side. example 2: input: n = 4 output: 3 explanation: the figure above is for the placement of the four boxes. these boxes are placed in the corner of the room, where the corner is on the left side. example 3: input: n = 10 output: 6 explanation: the figure above is for the placement of the ten boxes. these boxes are placed in the corner of the room, where the corner is on the back side.",`1 <= n <= 10^9`,
1740,Find Distance in a Binary Tree,"Given the root of a binary tree and two integers `p` and `q`, return the distance between the nodes of value `p` and value `q` in the tree.

The distance between two nodes is the number of edges on the path from one to the other.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 0
Output: 3
Explanation: There are 3 edges between 5 and 0: 5-3-1-0.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 7
Output: 2
Explanation: There are 2 edges between 5 and 7: 5-2-7.


Example 3:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 5
Output: 0
Explanation: The distance between a node and itself is 0.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`0 <= Node.val <= 109`
All `Node.val` are unique.

`p` and `q` are values in the tree.",Medium,https://leetcode.com/problems/find-distance-in-a-binary-tree,Amazon,"Tree,Depth-first Search,Breadth-first Search",73,,"given the root of a binary tree and two integers `p` and `q`, return the distance between the nodes of value `p` and value `q` in the tree. the distance between two nodes is the number of edges on the path from one to the other.","input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 0 output: 3 explanation: there are 3 edges between 5 and 0: 5-3-1-0. example 2: input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 7 output: 2 explanation: there are 2 edges between 5 and 7: 5-2-7. example 3: input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 5 output: 0 explanation: the distance between a node and itself is 0.","the number of nodes in the tree is in the range `[1, 10^4]`. `0 <= node.val <= 10^9` all `node.val` are unique. `p` and `q` are values in the tree.",
1741,Find Total Time Spent by Each Employee,SQL Schema,Easy,https://leetcode.com/problems/find-total-time-spent-by-each-employee,Amazon,,24,,sql schema,,,
1742,Maximum Number of Balls in a Box,"You are working in a ball factory where you have `n` balls numbered from `lowLimit` up to `highLimit` inclusive (i.e., `n == highLimit - lowLimit + 1`), and an infinite number of boxes numbered from `1` to `infinity`.

Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number `321` will be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be put in the box number `1 + 0 = 1`.

Given two integers `lowLimit` and `highLimit`, return the number of balls in the box with the most balls.


Example 1:
Input: lowLimit = 1, highLimit = 10
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...

Ball Count:  2 1 1 1 1 1 1 1 1 0  0  ...

Box 1 has the most number of balls with 2 balls.


Example 2:
Input: lowLimit = 5, highLimit = 15
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...

Ball Count:  1 1 1 1 2 2 1 1 1 0  0  ...

Boxes 5 and 6 have the most number of balls with 2 balls in each.


Example 3:
Input: lowLimit = 19, highLimit = 28
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...

Ball Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...

Box 10 has the most number of balls with 2 balls.


Constraints:
`1 <= lowLimit <= highLimit <= 105`",Easy,https://leetcode.com/problems/maximum-number-of-balls-in-a-box,"AppDynamics,Lucid",Array,148,,"you are working in a ball factory where you have `n` balls numbered from `lowlimit` up to `highlimit` inclusive (i.e., `n == highlimit - lowlimit + 1`), and an infinite number of boxes numbered from `1` to `infinity`. your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. for example, the ball number `321` will be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be put in the box number `1 + 0 = 1`. given two integers `lowlimit` and `highlimit`, return the number of balls in the box with the most balls.","input: lowlimit = 1, highlimit = 10 output: 2 explanation: box number: 1 2 3 4 5 6 7 8 9 10 11 ... ball count: 2 1 1 1 1 1 1 1 1 0 0 ... box 1 has the most number of balls with 2 balls. example 2: input: lowlimit = 5, highlimit = 15 output: 2 explanation: box number: 1 2 3 4 5 6 7 8 9 10 11 ... ball count: 1 1 1 1 2 2 1 1 1 0 0 ... boxes 5 and 6 have the most number of balls with 2 balls in each. example 3: input: lowlimit = 19, highlimit = 28 output: 2 explanation: box number: 1 2 3 4 5 6 7 8 9 10 11 12 ... ball count: 0 1 1 1 1 1 1 1 1 2 0 0 ... box 10 has the most number of balls with 2 balls.",`1 <= lowlimit <= highlimit <= 10^5`,
1743,Restore the Array From Adjacent Pairs,"There is an integer array `nums` that consists of `n` unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in `nums`.

You are given a 2D integer array `adjacentPairs` of size `n - 1` where each `adjacentPairs[i] = [ui, vi]` indicates that the elements `ui` and `vi` are adjacent in `nums`.

It is guaranteed that every adjacent pair of elements `nums[i]` and `nums[i+1]` will exist in `adjacentPairs`, either as `[nums[i], nums[i+1]]` or `[nums[i+1], nums[i]]`. The pairs can appear in any order.

Return the original array `nums`. If there are multiple solutions, return any of them.


Example 1:
Input: adjacentPairs = [[2,1],[3,4],[3,2]]
Output: [1,2,3,4]
Explanation: This array has all its adjacent pairs in adjacentPairs.

Notice that adjacentPairs[i] may not be in left-to-right order.


Example 2:
Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
Output: [-2,4,1,-3]
Explanation: There can be negative numbers.

Another solution is [-3,1,4,-2], which would also be accepted.


Example 3:
Input: adjacentPairs = [[100000,-100000]]
Output: [100000,-100000]

Constraints:
`nums.length == n`
`adjacentPairs.length == n - 1`
`adjacentPairs[i].length == 2`
`2 <= n <= 105`
`-105 <= nums[i], ui, vi <= 105`
There exists some `nums` that has `adjacentPairs` as its pairs.",Medium,https://leetcode.com/problems/restore-the-array-from-adjacent-pairs,Robinhood,Greedy,231,,"there is an integer array `nums` that consists of `n` unique elements, but you have forgotten it. however, you do remember every pair of adjacent elements in `nums`. you are given a 2d integer array `adjacentpairs` of size `n - 1` where each `adjacentpairs[i] = [ui, vi]` indicates that the elements `ui` and `vi` are adjacent in `nums`. it is guaranteed that every adjacent pair of elements `nums[i]` and `nums[i+1]` will exist in `adjacentpairs`, either as `[nums[i], nums[i+1]]` or `[nums[i+1], nums[i]]`. the pairs can appear in any order. return the original array `nums`. if there are multiple solutions, return any of them.","input: adjacentpairs = [[2,1],[3,4],[3,2]] output: [1,2,3,4] explanation: this array has all its adjacent pairs in adjacentpairs. notice that adjacentpairs[i] may not be in left-to-right order. example 2: input: adjacentpairs = [[4,-2],[1,4],[-3,1]] output: [-2,4,1,-3] explanation: there can be negative numbers. another solution is [-3,1,4,-2], which would also be accepted. example 3: input: adjacentpairs = [[100000,-100000]] output: [100000,-100000]","`nums.length == n` `adjacentpairs.length == n - 1` `adjacentpairs[i].length == 2` `2 <= n <= 10^5` `-10^5 <= nums[i], ui, vi <= 10^5` there exists some `nums` that has `adjacentpairs` as its pairs.",
1744,Can You Eat Your Favorite Candy on Your Favorite Day?,"You are given a (0-indexed) array of positive integers `candiesCount` where `candiesCount[i]` represents the number of candies of the `ith` type you have. You are also given a 2D array `queries` where `queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]`.

You play a game with the following rules:
You start eating candies on day `0`.

You cannot eat any candy of type `i` unless you have eaten all candies of type `i - 1`.

You must eat at least one candy per day until you have eaten all the candies.

Construct a boolean array `answer` such that `answer.length == queries.length` and `answer[i]` is `true` if you can eat a candy of type `favoriteTypei` on day `favoriteDayi` without eating more than `dailyCapi` candies on any day, and `false` otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.

Return the constructed array `answer`.


Example 1:
Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]
Output: [true,false,true]
Explanation:
1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.

2- You can eat at most 4 candies each day.

   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.

   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.

3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.


Example 2:
Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]
Output: [false,true,true,false,false]

Constraints:
`1 <= candiesCount.length <= 105`
`1 <= candiesCount[i] <= 105`
`1 <= queries.length <= 105`
`queries[i].length == 3`
`0 <= favoriteTypei < candiesCount.length`
`0 <= favoriteDayi <= 109`
`1 <= dailyCapi <= 109`",Medium,https://leetcode.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day,Fleetx,Math,57,,"you are given a (0-indexed) array of positive integers `candiescount` where `candiescount[i]` represents the number of candies of the `ith` type you have. you are also given a 2d array `queries` where `queries[i] = [favoritetypei, favoritedayi, dailycapi]`. you play a game with the following rules: you start eating candies on day `0`. you cannot eat any candy of type `i` unless you have eaten all candies of type `i - 1`. you must eat at least one candy per day until you have eaten all the candies. construct a boolean array `answer` such that `answer.length == queries.length` and `answer[i]` is `true` if you can eat a candy of type `favoritetypei` on day `favoritedayi` without eating more than `dailycapi` candies on any day, and `false` otherwise. note that you can eat different types of candy on the same day, provided that you follow rule 2. return the constructed array `answer`.","input: candiescount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]] output: [true,false,true] explanation: 1- if you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2. 2- you can eat at most 4 candies each day. if you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1. on day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2. 3- if you eat 1 candy each day, you will eat a candy of type 2 on day 13. example 2: input: candiescount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]] output: [false,true,true,false,false]",`1 <= candiescount.length <= 10^5` `1 <= candiescount[i] <= 10^5` `1 <= queries.length <= 10^5` `queries[i].length == 3` `0 <= favoritetypei < candiescount.length` `0 <= favoritedayi <= 10^9` `1 <= dailycapi <= 10^9`,
1745,Palindrome Partitioning IV,"Given a string `s`, return `true` if it is possible to split the string `s` into three non-empty palindromic substrings. Otherwise, return `false`.​​​​​
A string is said to be palindrome if it the same string when reversed.


Example 1:
Input: s = ""abcbdd""
Output: true
Explanation: ""abcbdd"" = ""a"" + ""bcb"" + ""dd"", and all three substrings are palindromes.


Example 2:
Input: s = ""bcbddxy""
Output: false
Explanation: s cannot be split into 3 palindromes.


Constraints:
`3 <= s.length <= 2000`
`s`​​​​​​ consists only of lowercase English letters.",Hard,https://leetcode.com/problems/palindrome-partitioning-iv,tcs,"String,Dynamic Programming",204,"[Palindrome Partitioning, /problems/palindrome-partitioning/, Medium], [Palindrome Partitioning II, /problems/palindrome-partitioning-ii/, Hard], [Palindrome Partitioning III, /problems/palindrome-partitioning-iii/, Hard]","given a string `s`, return `true` if it is possible to split the string `s` into three non-empty palindromic substrings. otherwise, return `false`.​​​​​ a string is said to be palindrome if it the same string when reversed.","input: s = ""abcbdd"" output: true explanation: ""abcbdd"" = ""a"" + ""bcb"" + ""dd"", and all three substrings are palindromes. example 2: input: s = ""bcbddxy"" output: false explanation: s cannot be split into 3 palindromes.",`3 <= s.length <= 2000` `s`​​​​​​ consists only of lowercase english letters.,
1746,Maximum Subarray Sum After One Operation,"You are given an integer array `nums`. You must perform exactly one operation where you can replace one element `nums[i]` with `nums[i] * nums[i]`. 
Return the maximum possible subarray sum after exactly one operation. The subarray must be non-empty.


Example 1:
Input: nums = [2,-1,-4,-3]
Output: 17
Explanation: You can perform the operation on index 2 (0-indexed) to make nums = [2,-1,16,-3]. Now, the maximum subarray sum is 2 + -1 + 16 = 17.


Example 2:
Input: nums = [1,-1,1,1,-1,-1,1]
Output: 4
Explanation: You can perform the operation on index 1 (0-indexed) to make nums = [1,1,1,1,-1,-1,1]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4.


Constraints:
`1 <= nums.length <= 105`
`-104 <= nums[i] <= 104`",Medium,https://leetcode.com/problems/maximum-subarray-sum-after-one-operation,Sprinklr,Dynamic Programming,64,"[Maximum Subarray, /problems/maximum-subarray/, Easy]",you are given an integer array `nums`. you must perform exactly one operation where you can replace one element `nums[i]` with `nums[i] * nums[i]`. return the maximum possible subarray sum after exactly one operation. the subarray must be non-empty.,"input: nums = [2,-1,-4,-3] output: 17 explanation: you can perform the operation on index 2 (0-indexed) to make nums = [2,-1,16,-3]. now, the maximum subarray sum is 2 + -1 + 16 = 17. example 2: input: nums = [1,-1,1,1,-1,-1,1] output: 4 explanation: you can perform the operation on index 1 (0-indexed) to make nums = [1,1,1,1,-1,-1,1]. now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4.",`1 <= nums.length <= 10^5` `-10^4 <= nums[i] <= 10^4`,
1747,Leetflex Banned Accounts,SQL Schema,Medium,https://leetcode.com/problems/leetflex-banned-accounts,Audible,,32,,sql schema,,,
1748,Sum of Unique Elements,"You are given an integer array `nums`. The unique elements of an array are the elements that appear exactly once in the array.

Return the sum of all the unique elements of `nums`.


Example 1:
Input: nums = [1,2,3,2]
Output: 4
Explanation: The unique elements are [1,3], and the sum is 4.


Example 2:
Input: nums = [1,1,1,1,1]
Output: 0
Explanation: There are no unique elements, and the sum is 0.


Example 3:
Input: nums = [1,2,3,4,5]
Output: 15
Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.


Constraints:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",Easy,https://leetcode.com/problems/sum-of-unique-elements,Facebook,"Array,Hash Table",220,,you are given an integer array `nums`. the unique elements of an array are the elements that appear exactly once in the array. return the sum of all the unique elements of `nums`.,"input: nums = [1,2,3,2] output: 4 explanation: the unique elements are [1,3], and the sum is 4. example 2: input: nums = [1,1,1,1,1] output: 0 explanation: there are no unique elements, and the sum is 0. example 3: input: nums = [1,2,3,4,5] output: 15 explanation: the unique elements are [1,2,3,4,5], and the sum is 15.",`1 <= nums.length <= 10^0` `1 <= nums[i] <= 10^0`,
1749,Maximum Absolute Sum of Any Subarray,"You are given an integer array `nums`. The absolute sum of a subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is `abs(numsl + numsl+1 + ... + numsr-1 + numsr)`.

Return the maximum absolute sum of any (possibly empty) subarray of `nums`.

Note that `abs(x)` is defined as follows:
If `x` is a negative integer, then `abs(x) = -x`.

If `x` is a non-negative integer, then `abs(x) = x`.


Example 1:
Input: nums = [1,-3,2,3,-4]
Output: 5
Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.


Example 2:
Input: nums = [2,-5,1,-4,3,-2]
Output: 8
Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.


Constraints:
`1 <= nums.length <= 105`
`-104 <= nums[i] <= 104`",Medium,https://leetcode.com/problems/maximum-absolute-sum-of-any-subarray,,,234,,"you are given an integer array `nums`. the absolute sum of a subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is `abs(numsl + numsl+1 + ... + numsr-1 + numsr)`. return the maximum absolute sum of any (possibly empty) subarray of `nums`. note that `abs(x)` is defined as follows: if `x` is a negative integer, then `abs(x) = -x`. if `x` is a non-negative integer, then `abs(x) = x`.","input: nums = [1,-3,2,3,-4] output: 5 explanation: the subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5. example 2: input: nums = [2,-5,1,-4,3,-2] output: 8 explanation: the subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.",`1 <= nums.length <= 10^5` `-10^4 <= nums[i] <= 10^4`,
1750,Minimum Length of String After Deleting Similar Ends,"Given a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. You are asked to apply the following algorithm on the string any number of times:
Pick a non-empty prefix from the string `s` where all the characters in the prefix are equal.

Pick a non-empty suffix from the string `s` where all the characters in this suffix are equal.

The prefix and the suffix should not intersect at any index.

The characters from the prefix and suffix must be the same.

Delete both the prefix and the suffix.

Return the minimum length of `s` after performing the above operation any number of times (possibly zero times).


Example 1:
Input: s = ""ca""
Output: 2
Explanation: You can't remove any characters, so the string stays as is.


Example 2:
Input: s = ""cabaabac""
Output: 0
Explanation: An optimal sequence of operations is:
- Take prefix = ""c"" and suffix = ""c"" and remove them, s = ""abaaba"".

- Take prefix = ""a"" and suffix = ""a"" and remove them, s = ""baab"".

- Take prefix = ""b"" and suffix = ""b"" and remove them, s = ""aa"".

- Take prefix = ""a"" and suffix = ""a"" and remove them, s = """".


Example 3:
Input: s = ""aabccabba""
Output: 3
Explanation: An optimal sequence of operations is:
- Take prefix = ""aa"" and suffix = ""a"" and remove them, s = ""bccabb"".

- Take prefix = ""b"" and suffix = ""bb"" and remove them, s = ""cca"".


Constraints:
`1 <= s.length <= 105`
`s` only consists of characters `'a'`, `'b'`, and `'c'`.",Medium,https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends,"Goldman Sachs,Amazon",Two Pointers,116,,"given a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. you are asked to apply the following algorithm on the string any number of times: pick a non-empty prefix from the string `s` where all the characters in the prefix are equal. pick a non-empty suffix from the string `s` where all the characters in this suffix are equal. the prefix and the suffix should not intersect at any index. the characters from the prefix and suffix must be the same. delete both the prefix and the suffix. return the minimum length of `s` after performing the above operation any number of times (possibly zero times).","input: s = ""ca"" output: 2 explanation: you can't remove any characters, so the string stays as is. example 2: input: s = ""cabaabac"" output: 0 explanation: an optimal sequence of operations is: - take prefix = ""c"" and suffix = ""c"" and remove them, s = ""abaaba"". - take prefix = ""a"" and suffix = ""a"" and remove them, s = ""baab"". - take prefix = ""b"" and suffix = ""b"" and remove them, s = ""aa"". - take prefix = ""a"" and suffix = ""a"" and remove them, s = """". example 3: input: s = ""aabccabba"" output: 3 explanation: an optimal sequence of operations is: - take prefix = ""aa"" and suffix = ""a"" and remove them, s = ""bccabb"". - take prefix = ""b"" and suffix = ""bb"" and remove them, s = ""cca"".","`1 <= s.length <= 10^5` `s` only consists of characters `'a'`, `'b'`, and `'c'`.",
1751,Maximum Number of Events That Can Be Attended II,"You are given an array of `events` where `events[i] = [startDayi, endDayi, valuei]`. The `ith` event starts at `startDayi` and ends at `endDayi`, and if you attend this event, you will receive a value of `valuei`. You are also given an integer `k` which represents the maximum number of events you can attend.

You can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.

Return the maximum sum of values that you can receive by attending events.


Example 1:
Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2
Output: 7
Explanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.


Example 2:
Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2
Output: 10
Explanation: Choose event 2 for a total value of 10.

Notice that you cannot attend any other event as they overlap, and that you do not have to attend k events.


Example 3:
Input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3
Output: 9
Explanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.


Constraints:
`1 <= k <= events.length`
`1 <= k * events.length <= 106`
`1 <= startDayi <= endDayi <= 109`
`1 <= valuei <= 106`",Hard,https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended-ii,Amazon,"Binary Search,Dynamic Programming",179,"[Maximum Number of Events That Can Be Attended, /problems/maximum-number-of-events-that-can-be-attended/, Medium]","you are given an array of `events` where `events[i] = [startdayi, enddayi, valuei]`. the `ith` event starts at `startdayi` and ends at `enddayi`, and if you attend this event, you will receive a value of `valuei`. you are also given an integer `k` which represents the maximum number of events you can attend. you can only attend one event at a time. if you choose to attend an event, you must attend the entire event. note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day. return the maximum sum of values that you can receive by attending events.","input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2 output: 7 explanation: choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7. example 2: input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2 output: 10 explanation: choose event 2 for a total value of 10. notice that you cannot attend any other event as they overlap, and that you do not have to attend k events. example 3: input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3 output: 9 explanation: although the events do not overlap, you can only attend 3 events. pick the highest valued three.",`1 <= k <= events.length` `1 <= k * events.length <= 10^6` `1 <= startdayi <= enddayi <= 10^9` `1 <= valuei <= 10^6`,
1752,Check if Array Is Sorted and Rotated,"Given an array `nums`, return `true` if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return `false`.

There may be duplicates in the original array.

Note: An array `A` rotated by `x` positions results in an array `B` of the same length such that `A[i] == B[(i+x) % A.length]`, where `%` is the modulo operation.


Example 1:
Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.

You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].


Example 2:
Input: nums = [2,1,3,4]
Output: false
Explanation: There is no sorted array once rotated that can make nums.


Example 3:
Input: nums = [1,2,3]
Output: true
Explanation: [1,2,3] is the original sorted array.

You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.


Example 4:
Input: nums = [1,1,1]
Output: true
Explanation: [1,1,1] is the original sorted array.

You can rotate any number of positions to make nums.


Example 5:
Input: nums = [2,1]
Output: true
Explanation: [1,2] is the original sorted array.

You can rotate the array by x = 5 positions to begin on the element of value 2: [2,1].


Constraints:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",Easy,https://leetcode.com/problems/check-if-array-is-sorted-and-rotated,SoundHound,Array,171,,"given an array `nums`, return `true` if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). otherwise, return `false`. there may be duplicates in the original array. note: an array `a` rotated by `x` positions results in an array `b` of the same length such that `a[i] == b[(i+x) % a.length]`, where `%` is the modulo operation.","input: nums = [3,4,5,1,2] output: true explanation: [1,2,3,4,5] is the original sorted array. you can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2]. example 2: input: nums = [2,1,3,4] output: false explanation: there is no sorted array once rotated that can make nums. example 3: input: nums = [1,2,3] output: true explanation: [1,2,3] is the original sorted array. you can rotate the array by x = 0 positions (i.e. no rotation) to make nums. example 4: input: nums = [1,1,1] output: true explanation: [1,1,1] is the original sorted array. you can rotate any number of positions to make nums. example 5: input: nums = [2,1] output: true explanation: [1,2] is the original sorted array. you can rotate the array by x = 5 positions to begin on the element of value 2: [2,1].",`1 <= nums.length <= 10^0` `1 <= nums[i] <= 10^0`,
1753,Maximum Score From Removing Stones,"You are playing a solitaire game with three piles of stones of sizes `a`​​​​​​, `b`,​​​​​​ and `c`​​​​​​ respectively. Each turn you choose two different non-empty piles, take one stone from each, and add `1` point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).

Given three integers `a`​​​​​, `b`,​​​​​ and `c`​​​​​, return the maximum score you can get.


Example 1:
Input: a = 2, b = 4, c = 6
Output: 6
Explanation: The starting state is (2, 4, 6). One optimal set of moves is:
- Take from 1st and 3rd piles, state is now (1, 4, 5)
- Take from 1st and 3rd piles, state is now (0, 4, 4)
- Take from 2nd and 3rd piles, state is now (0, 3, 3)
- Take from 2nd and 3rd piles, state is now (0, 2, 2)
- Take from 2nd and 3rd piles, state is now (0, 1, 1)
- Take from 2nd and 3rd piles, state is now (0, 0, 0)
There are fewer than two non-empty piles, so the game ends. Total: 6 points.


Example 2:
Input: a = 4, b = 4, c = 6
Output: 7
Explanation: The starting state is (4, 4, 6). One optimal set of moves is:
- Take from 1st and 2nd piles, state is now (3, 3, 6)
- Take from 1st and 3rd piles, state is now (2, 3, 5)
- Take from 1st and 3rd piles, state is now (1, 3, 4)
- Take from 1st and 3rd piles, state is now (0, 3, 3)
- Take from 2nd and 3rd piles, state is now (0, 2, 2)
- Take from 2nd and 3rd piles, state is now (0, 1, 1)
- Take from 2nd and 3rd piles, state is now (0, 0, 0)
There are fewer than two non-empty piles, so the game ends. Total: 7 points.


Example 3:
Input: a = 1, b = 8, c = 8
Output: 8
Explanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.

After that, there are fewer than two non-empty piles, so the game ends.


Constraints:
`1 <= a, b, c <= 105`",Medium,https://leetcode.com/problems/maximum-score-from-removing-stones,Google,"Math,Heap",160,,"you are playing a solitaire game with three piles of stones of sizes `a`​​​​​​, `b`,​​​​​​ and `c`​​​​​​ respectively. each turn you choose two different non-empty piles, take one stone from each, and add `1` point to your score. the game stops when there are fewer than two non-empty piles (meaning there are no more available moves). given three integers `a`​​​​​, `b`,​​​​​ and `c`​​​​​, return the maximum score you can get.","input: a = 2, b = 4, c = 6 output: 6 explanation: the starting state is (2, 4, 6). one optimal set of moves is: - take from 1st and 3rd piles, state is now (1, 4, 5) - take from 1st and 3rd piles, state is now (0, 4, 4) - take from 2nd and 3rd piles, state is now (0, 3, 3) - take from 2nd and 3rd piles, state is now (0, 2, 2) - take from 2nd and 3rd piles, state is now (0, 1, 1) - take from 2nd and 3rd piles, state is now (0, 0, 0) there are fewer than two non-empty piles, so the game ends. total: 6 points. example 2: input: a = 4, b = 4, c = 6 output: 7 explanation: the starting state is (4, 4, 6). one optimal set of moves is: - take from 1st and 2nd piles, state is now (3, 3, 6) - take from 1st and 3rd piles, state is now (2, 3, 5) - take from 1st and 3rd piles, state is now (1, 3, 4) - take from 1st and 3rd piles, state is now (0, 3, 3) - take from 2nd and 3rd piles, state is now (0, 2, 2) - take from 2nd and 3rd piles, state is now (0, 1, 1) - take from 2nd and 3rd piles, state is now (0, 0, 0) there are fewer than two non-empty piles, so the game ends. total: 7 points. example 3: input: a = 1, b = 8, c = 8 output: 8 explanation: one optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty. after that, there are fewer than two non-empty piles, so the game ends.","`1 <= a, b, c <= 10^5`",
1754,Largest Merge Of Two Strings,"You are given two strings `word1` and `word2`. You want to construct a string `merge` in the following way: while either `word1` or `word2` are non-empty, choose one of the following options:
If `word1` is non-empty, append the first character in `word1` to `merge` and delete it from `word1`.

	
For example, if `word1 = ""abc"" `and `merge = ""dv""`, then after choosing this operation, `word1 = ""bc""` and `merge = ""dva""`.

If `word2` is non-empty, append the first character in `word2` to `merge` and delete it from `word2`.

	
For example, if `word2 = ""abc"" `and `merge = """"`, then after choosing this operation, `word2 = ""bc""` and `merge = ""a""`.

Return the lexicographically largest `merge` you can construct.

A string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`. For example, `""abcd""` is lexicographically larger than `""abcc""` because the first position they differ is at the fourth character, and `d` is greater than `c`.


Example 1:
Input: word1 = ""cabaa"", word2 = ""bcaaa""
Output: ""cbcabaaaaa""
Explanation: One way to get the lexicographically largest merge is:
- Take from word1: merge = ""c"", word1 = ""abaa"", word2 = ""bcaaa""
- Take from word2: merge = ""cb"", word1 = ""abaa"", word2 = ""caaa""
- Take from word2: merge = ""cbc"", word1 = ""abaa"", word2 = ""aaa""
- Take from word1: merge = ""cbca"", word1 = ""baa"", word2 = ""aaa""
- Take from word1: merge = ""cbcab"", word1 = ""aa"", word2 = ""aaa""
- Append the remaining 5 a's from word1 and word2 at the end of merge.


Example 2:
Input: word1 = ""abcabc"", word2 = ""abdcaba""
Output: ""abdcabcabcaba""

Constraints:
`1 <= word1.length, word2.length <= 3000`
`word1` and `word2` consist only of lowercase English letters.",Medium,https://leetcode.com/problems/largest-merge-of-two-strings,Snapchat,"Greedy,Suffix Array",179,,"you are given two strings `word1` and `word2`. you want to construct a string `merge` in the following way: while either `word1` or `word2` are non-empty, choose one of the following options: if `word1` is non-empty, append the first character in `word1` to `merge` and delete it from `word1`. for example, if `word1 = ""abc"" `and `merge = ""dv""`, then after choosing this operation, `word1 = ""bc""` and `merge = ""dva""`. if `word2` is non-empty, append the first character in `word2` to `merge` and delete it from `word2`. for example, if `word2 = ""abc"" `and `merge = """"`, then after choosing this operation, `word2 = ""bc""` and `merge = ""a""`. return the lexicographically largest `merge` you can construct. a string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`. for example, `""abcd""` is lexicographically larger than `""abcc""` because the first position they differ is at the fourth character, and `d` is greater than `c`.","input: word1 = ""cabaa"", word2 = ""bcaaa"" output: ""cbcabaaaaa"" explanation: one way to get the lexicographically largest merge is: - take from word1: merge = ""c"", word1 = ""abaa"", word2 = ""bcaaa"" - take from word2: merge = ""cb"", word1 = ""abaa"", word2 = ""caaa"" - take from word2: merge = ""cbc"", word1 = ""abaa"", word2 = ""aaa"" - take from word1: merge = ""cbca"", word1 = ""baa"", word2 = ""aaa"" - take from word1: merge = ""cbcab"", word1 = ""aa"", word2 = ""aaa"" - append the remaining 5 a's from word1 and word2 at the end of merge. example 2: input: word1 = ""abcabc"", word2 = ""abdcaba"" output: ""abdcabcabcaba""","`1 <= word1.length, word2.length <= 3000` `word1` and `word2` consist only of lowercase english letters.",
1755,Closest Subsequence Sum,"You are given an integer array `nums` and an integer `goal`.

You want to choose a subsequence of `nums` such that the sum of its elements is the closest possible to `goal`. That is, if the sum of the subsequence's elements is `sum`, then you want to minimize the absolute difference `abs(sum - goal)`.

Return the minimum possible value of `abs(sum - goal)`.

Note that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.


Example 1:
Input: nums = [5,-7,3,5], goal = 6
Output: 0
Explanation: Choose the whole array as a subsequence, with a sum of 6.

This is equal to the goal, so the absolute difference is 0.


Example 2:
Input: nums = [7,-9,15,-2], goal = -5
Output: 1
Explanation: Choose the subsequence [7,-9,-2], with a sum of -4.

The absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.


Example 3:
Input: nums = [1,2,3], goal = -7
Output: 7

Constraints:
`1 <= nums.length <= 40`
`-107 <= nums[i] <= 107`
`-109 <= goal <= 109`",Hard,https://leetcode.com/problems/closest-subsequence-sum,Sprinklr,"Divide and Conquer,Meet in the Middle",185,,"you are given an integer array `nums` and an integer `goal`. you want to choose a subsequence of `nums` such that the sum of its elements is the closest possible to `goal`. that is, if the sum of the subsequence's elements is `sum`, then you want to minimize the absolute difference `abs(sum - goal)`. return the minimum possible value of `abs(sum - goal)`. note that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.","input: nums = [5,-7,3,5], goal = 6 output: 0 explanation: choose the whole array as a subsequence, with a sum of 6. this is equal to the goal, so the absolute difference is 0. example 2: input: nums = [7,-9,15,-2], goal = -5 output: 1 explanation: choose the subsequence [7,-9,-2], with a sum of -4. the absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum. example 3: input: nums = [1,2,3], goal = -7 output: 7",`1 <= nums.length <= 40` `-10^7 <= nums[i] <= 10^7` `-10^9 <= goal <= 10^9`,
1756,Design Most Recently Used Queue,"Design a queue-like data structure that moves the most recently used element to the end of the queue.

Implement the `MRUQueue` class:
`MRUQueue(int n)` constructs the `MRUQueue` with `n` elements: `[1,2,3,...,n]`.

`fetch(int k)` moves the `kth` element (1-indexed) to the end of the queue and returns it.


Example 1:
Input:
[""MRUQueue"", ""fetch"", ""fetch"", ""fetch"", ""fetch""]
[[8], [3], [5], [2], [8]]
Output:
[null, 3, 6, 2, 2]
Explanation:
MRUQueue mRUQueue = new MRUQueue(8); // Initializes the queue to [1,2,3,4,5,6,7,8].

mRUQueue.fetch(3); // Moves the 3rd element (3) to the end of the queue to become [1,2,4,5,6,7,8,3] and returns it.

mRUQueue.fetch(5); // Moves the 5th element (6) to the end of the queue to become [1,2,4,5,7,8,3,6] and returns it.

mRUQueue.fetch(2); // Moves the 2nd element (2) to the end of the queue to become [1,4,5,7,8,3,6,2] and returns it.

mRUQueue.fetch(8); // The 8th element (2) is already at the end of the queue so just return it.


Constraints:
`1 <= n <= 2000`
`1 <= k <= n`
At most `2000` calls will be made to `fetch`.

Follow up: Finding an `O(n)` algorithm per `fetch` is a bit easy. Can you find an algorithm with a better complexity for each `fetch` call?",Medium,https://leetcode.com/problems/design-most-recently-used-queue,Google,"Array,Design,Dequeue",50,"[LRU Cache, /problems/lru-cache/, Medium]","design a queue-like data structure that moves the most recently used element to the end of the queue. implement the `mruqueue` class: `mruqueue(int n)` constructs the `mruqueue` with `n` elements: `[1,2,3,...,n]`. `fetch(int k)` moves the `kth` element (1-indexed) to the end of the queue and returns it.","input: [""mruqueue"", ""fetch"", ""fetch"", ""fetch"", ""fetch""] [[8], [3], [5], [2], [8]] output: [null, 3, 6, 2, 2] explanation: mruqueue mruqueue = new mruqueue(8); // initializes the queue to [1,2,3,4,5,6,7,8]. mruqueue.fetch(3); // moves the 3rd element (3) to the end of the queue to become [1,2,4,5,6,7,8,3] and returns it. mruqueue.fetch(5); // moves the 5th element (6) to the end of the queue to become [1,2,4,5,7,8,3,6] and returns it. mruqueue.fetch(2); // moves the 2nd element (2) to the end of the queue to become [1,4,5,7,8,3,6,2] and returns it. mruqueue.fetch(8); // the 8th element (2) is already at the end of the queue so just return it.",`1 <= n <= 2000` `1 <= k <= n` at most `2000` calls will be made to `fetch`.,finding an `o(n)` algorithm per `fetch` is a bit easy. can you find an algorithm with a better complexity for each `fetch` call?
1757,Recyclable and Low Fat Products,SQL Schema,Easy,https://leetcode.com/problems/recyclable-and-low-fat-products,Facebook,,23,,sql schema,,,
1758,Minimum Changes To Make Alternating Binary String,"You are given a string `s` consisting only of the characters `'0'` and `'1'`. In one operation, you can change any `'0'` to `'1'` or vice versa.

The string is called alternating if no two adjacent characters are equal. For example, the string `""010""` is alternating, while the string `""0100""` is not.

Return the minimum number of operations needed to make `s` alternating.


Example 1:
Input: s = ""0100""
Output: 1
Explanation: If you change the last character to '1', s will be ""0101"", which is alternating.


Example 2:
Input: s = ""10""
Output: 0
Explanation: s is already alternating.


Example 3:
Input: s = ""1111""
Output: 2
Explanation: You need two operations to reach ""0101"" or ""1010"".


Constraints:
`1 <= s.length <= 104`
`s[i]` is either `'0'` or `'1'`.",Easy,https://leetcode.com/problems/minimum-changes-to-make-alternating-binary-string,Tesla,"Array,Greedy",176,,"you are given a string `s` consisting only of the characters `'0'` and `'1'`. in one operation, you can change any `'0'` to `'1'` or vice versa. the string is called alternating if no two adjacent characters are equal. for example, the string `""010""` is alternating, while the string `""0100""` is not. return the minimum number of operations needed to make `s` alternating.","input: s = ""0100"" output: 1 explanation: if you change the last character to '1', s will be ""0101"", which is alternating. example 2: input: s = ""10"" output: 0 explanation: s is already alternating. example 3: input: s = ""1111"" output: 2 explanation: you need two operations to reach ""0101"" or ""1010"".",`1 <= s.length <= 10^4` `s[i]` is either `'0'` or `'1'`.,
1759,Count Number of Homogenous Substrings,"Given a string `s`, return the number of homogenous substrings of `s`. Since the answer may be too large, return it modulo `109 + 7`.

A string is homogenous if all the characters of the string are the same.

A substring is a contiguous sequence of characters within a string.


Example 1:
Input: s = ""abbcccaa""
Output: 13
Explanation: The homogenous substrings are listed as below:
""a""   appears 3 times.

""aa""  appears 1 time.

""b""   appears 2 times.

""bb""  appears 1 time.

""c""   appears 3 times.

""cc""  appears 2 times.

""ccc"" appears 1 time.

3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.


Example 2:
Input: s = ""xy""
Output: 2
Explanation: The homogenous substrings are ""x"" and ""y"".


Example 3:
Input: s = ""zzzzz""
Output: 15

Constraints:
`1 <= s.length <= 105`
`s` consists of lowercase letters.",Medium,https://leetcode.com/problems/count-number-of-homogenous-substrings,Virtu Financial,"String,Greedy",149,"[Consecutive Characters, /problems/consecutive-characters/, Easy], [Number of Substrings With Only 1s, /problems/number-of-substrings-with-only-1s/, Medium]","given a string `s`, return the number of homogenous substrings of `s`. since the answer may be too large, return it modulo `109 + 7`. a string is homogenous if all the characters of the string are the same. a substring is a contiguous sequence of characters within a string.","input: s = ""abbcccaa"" output: 13 explanation: the homogenous substrings are listed as below: ""a"" appears 3 times. ""aa"" appears 1 time. ""b"" appears 2 times. ""bb"" appears 1 time. ""c"" appears 3 times. ""cc"" appears 2 times. ""ccc"" appears 1 time. 3 + 1 + 2 + 1 + 3 + 2 + 1 = 13. example 2: input: s = ""xy"" output: 2 explanation: the homogenous substrings are ""x"" and ""y"". example 3: input: s = ""zzzzz"" output: 15",`1 <= s.length <= 10^5` `s` consists of lowercase letters.,
1760,Minimum Limit of Balls in a Bag,"You are given an integer array `nums` where the `ith` bag contains `nums[i]` balls. You are also given an integer `maxOperations`.

You can perform the following operation at most `maxOperations` times:
Take any bag of balls and divide it into two new bags with a positive number of balls.

	
For example, a bag of `5` balls can become two new bags of `1` and `4` balls, or two new bags of `2` and `3` balls.

Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.

Return the minimum possible penalty after performing the operations.


Example 1:
Input: nums = [9], maxOperations = 2
Output: 3
Explanation: 
- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].

- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].

The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.


Example 2:
Input: nums = [2,4,8,2], maxOperations = 4
Output: 2
Explanation:
- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].

- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].

- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].

- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].

The bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2.


Example 3:
Input: nums = [7,17], maxOperations = 2
Output: 7

Constraints:
`1 <= nums.length <= 105`
`1 <= maxOperations, nums[i] <= 109`",Medium,https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag,Flipkart,"Binary Search,Heap",363,,"you are given an integer array `nums` where the `ith` bag contains `nums[i]` balls. you are also given an integer `maxoperations`. you can perform the following operation at most `maxoperations` times: take any bag of balls and divide it into two new bags with a positive number of balls. for example, a bag of `5` balls can become two new bags of `1` and `4` balls, or two new bags of `2` and `3` balls. your penalty is the maximum number of balls in a bag. you want to minimize your penalty after the operations. return the minimum possible penalty after performing the operations.","input: nums = [9], maxoperations = 2 output: 3 explanation: - divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3]. - divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3]. the bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3. example 2: input: nums = [2,4,8,2], maxoperations = 4 output: 2 explanation: - divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2]. - divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2]. - divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2]. - divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2]. the bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2. example 3: input: nums = [7,17], maxoperations = 2 output: 7","`1 <= nums.length <= 10^5` `1 <= maxoperations, nums[i] <= 10^9`",
1761,Minimum Degree of a Connected Trio in a Graph,"You are given an undirected graph. You are given an integer `n` which is the number of nodes in the graph and an array `edges`, where each `edges[i] = [ui, vi]` indicates that there is an undirected edge between `ui` and `vi`.

A connected trio is a set of three nodes where there is an edge between every pair of them.

The degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.

Return the minimum degree of a connected trio in the graph, or `-1` if the graph has no connected trios.


Example 1:
Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]
Output: 3
Explanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.


Example 2:
Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]
Output: 0
Explanation: There are exactly three trios:
1) [1,4,3] with degree 0.

2) [2,5,6] with degree 2.

3) [5,6,7] with degree 2.


Constraints:
`2 <= n <= 400`
`edges[i].length == 2`
`1 <= edges.length <= n * (n-1) / 2`
`1 <= ui, vi <= n`
`ui != vi`
There are no repeated edges.",Hard,https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph,Amazon,Graph,65,,"you are given an undirected graph. you are given an integer `n` which is the number of nodes in the graph and an array `edges`, where each `edges[i] = [ui, vi]` indicates that there is an undirected edge between `ui` and `vi`. a connected trio is a set of three nodes where there is an edge between every pair of them. the degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not. return the minimum degree of a connected trio in the graph, or `-1` if the graph has no connected trios.","input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]] output: 3 explanation: there is exactly one trio, which is [1,2,3]. the edges that form its degree are bolded in the figure above. example 2: input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]] output: 0 explanation: there are exactly three trios: 1) [1,4,3] with degree 0. 2) [2,5,6] with degree 2. 3) [5,6,7] with degree 2.","`2 <= n <= 400` `edges[i].length == 2` `1 <= edges.length <= n * (n-1) / 2` `1 <= ui, vi <= n` `ui != vi` there are no repeated edges.",
1762,Buildings With an Ocean View,"There are `n` buildings in a line. You are given an integer array `heights` of size `n` that represents the heights of the buildings in the line.

The ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.

Return a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.


Example 1:
Input: heights = [4,2,3,1]
Output: [0,2,3]
Explanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.


Example 2:
Input: heights = [4,3,2,1]
Output: [0,1,2,3]
Explanation: All the buildings have an ocean view.


Example 3:
Input: heights = [1,3,2,4]
Output: [3]
Explanation: Only building 3 has an ocean view.


Example 4:
Input: heights = [2,2,2,2]
Output: [3]
Explanation: Buildings cannot see the ocean if there are buildings of the same height to its right.


Constraints:
`1 <= heights.length <= 105`
`1 <= heights[i] <= 109`",Medium,https://leetcode.com/problems/buildings-with-an-ocean-view,Facebook,Greedy,70,,"there are `n` buildings in a line. you are given an integer array `heights` of size `n` that represents the heights of the buildings in the line. the ocean is to the right of the buildings. a building has an ocean view if the building can see the ocean without obstructions. formally, a building has an ocean view if all the buildings to its right have a smaller height. return a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.","input: heights = [4,2,3,1] output: [0,2,3] explanation: building 1 (0-indexed) does not have an ocean view because building 2 is taller. example 2: input: heights = [4,3,2,1] output: [0,1,2,3] explanation: all the buildings have an ocean view. example 3: input: heights = [1,3,2,4] output: [3] explanation: only building 3 has an ocean view. example 4: input: heights = [2,2,2,2] output: [3] explanation: buildings cannot see the ocean if there are buildings of the same height to its right.",`1 <= heights.length <= 10^5` `1 <= heights[i] <= 10^9`,
1763,Longest Nice Substring,"A string `s` is nice if, for every letter of the alphabet that `s` contains, it appears both in uppercase and lowercase. For example, `""abABB""` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear. However, `""abA""` is not because `'b'` appears, but `'B'` does not.

Given a string `s`, return the longest substring of `s` that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.


Example 1:
Input: s = ""YazaAay""
Output: ""aAa""
Explanation: ""aAa"" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.

""aAa"" is the longest nice substring.


Example 2:
Input: s = ""Bb""
Output: ""Bb""
Explanation: ""Bb"" is a nice string because both 'B' and 'b' appear. The whole string is a substring.


Example 3:
Input: s = ""c""
Output: """"
Explanation: There are no nice substrings.


Example 4:
Input: s = ""dDzeE""
Output: ""dD""
Explanation: Both ""dD"" and ""eE"" are the longest nice substrings.

As there are multiple longest nice substrings, return ""dD"" since it occurs earlier.


Constraints:
`1 <= s.length <= 100`
`s` consists of uppercase and lowercase English letters.",Easy,https://leetcode.com/problems/longest-nice-substring,Microsoft,String,131,,"a string `s` is nice if, for every letter of the alphabet that `s` contains, it appears both in uppercase and lowercase. for example, `""ababb""` is nice because `'a'` and `'a'` appear, and `'b'` and `'b'` appear. however, `""aba""` is not because `'b'` appears, but `'b'` does not. given a string `s`, return the longest substring of `s` that is nice. if there are multiple, return the substring of the earliest occurrence. if there are none, return an empty string.","input: s = ""yazaaay"" output: ""aaa"" explanation: ""aaa"" is a nice string because 'a/a' is the only letter of the alphabet in s, and both 'a' and 'a' appear. ""aaa"" is the longest nice substring. example 2: input: s = ""bb"" output: ""bb"" explanation: ""bb"" is a nice string because both 'b' and 'b' appear. the whole string is a substring. example 3: input: s = ""c"" output: """" explanation: there are no nice substrings. example 4: input: s = ""ddzee"" output: ""dd"" explanation: both ""dd"" and ""ee"" are the longest nice substrings. as there are multiple longest nice substrings, return ""dd"" since it occurs earlier.",`1 <= s.length <= 10^0` `s` consists of uppercase and lowercase english letters.,
1764,Form Array by Concatenating Subarrays of Another Array,"You are given a 2D integer array `groups` of length `n`. You are also given an integer array `nums`.

You are asked if you can choose `n` disjoint subarrays from the array `nums` such that the `ith` subarray is equal to `groups[i]` (0-indexed), and if `i > 0`, the `(i-1)th` subarray appears before the `ith` subarray in `nums` (i.e. the subarrays must be in the same order as `groups`).

Return `true` if you can do this task, and `false` otherwise.

Note that the subarrays are disjoint if and only if there is no index `k` such that `nums[k]` belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.


Example 1:
Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]
Output: true
Explanation: You can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,3,-2,0].

These subarrays are disjoint as they share no common nums[k] element.


Example 2:
Input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]
Output: false
Explanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.

[10,-2] must come before [1,2,3,4].


Example 3:
Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]
Output: false
Explanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.

They share a common elements nums[4] (0-indexed).


Constraints:
`groups.length == n`
`1 <= n <= 103`
`1 <= groups[i].length, sum(groups[i].length) <= 103`
`1 <= nums.length <= 103`
`-107 <= groups[i][j], nums[k] <= 107`",Medium,https://leetcode.com/problems/form-array-by-concatenating-subarrays-of-another-array,Amazon,"Array,Greedy",102,,"you are given a 2d integer array `groups` of length `n`. you are also given an integer array `nums`. you are asked if you can choose `n` disjoint subarrays from the array `nums` such that the `ith` subarray is equal to `groups[i]` (0-indexed), and if `i > 0`, the `(i-1)th` subarray appears before the `ith` subarray in `nums` (i.e. the subarrays must be in the same order as `groups`). return `true` if you can do this task, and `false` otherwise. note that the subarrays are disjoint if and only if there is no index `k` such that `nums[k]` belongs to more than one subarray. a subarray is a contiguous sequence of elements within an array.","input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0] output: true explanation: you can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,3,-2,0]. these subarrays are disjoint as they share no common nums[k] element. example 2: input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2] output: false explanation: note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups. [10,-2] must come before [1,2,3,4]. example 3: input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7] output: false explanation: note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint. they share a common elements nums[4] (0-indexed).","`groups.length == n` `1 <= n <= 10^3` `1 <= groups[i].length, sum(groups[i].length) <= 10^3` `1 <= nums.length <= 10^3` `-10^7 <= groups[i][j], nums[k] <= 10^7`",
1765,Map of Highest Peak,"You are given an integer matrix `isWater` of size `m x n` that represents a map of land and water cells.

If `isWater[i][j] == 0`, cell `(i, j)` is a land cell.

If `isWater[i][j] == 1`, cell `(i, j)` is a water cell.

You must assign each cell a height in a way that follows these rules:
The height of each cell must be non-negative.

If the cell is a water cell, its height must be `0`.

Any two adjacent cells must have an absolute height difference of at most `1`. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).

Find an assignment of heights such that the maximum height in the matrix is maximized.

Return an integer matrix `height` of size `m x n` where `height[i][j]` is cell `(i, j)`'s height. If there are multiple solutions, return any of them.


Example 1:
Input: isWater = [[0,1],[0,0]]
Output: [[1,0],[2,1]]
Explanation: The image shows the assigned heights of each cell.

The blue cell is the water cell, and the green cells are the land cells.


Example 2:
Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]
Output: [[1,1,0],[0,1,1],[1,2,2]]
Explanation: A height of 2 is the maximum possible height of any assignment.

Any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.


Constraints:
`m == isWater.length`
`n == isWater[i].length`
`1 <= m, n <= 1000`
`isWater[i][j]` is `0` or `1`.

There is at least one water cell.",Medium,https://leetcode.com/problems/map-of-highest-peak,Google,"Breadth-first Search,Graph",187,,"you are given an integer matrix `iswater` of size `m x n` that represents a map of land and water cells. if `iswater[i][j] == 0`, cell `(i, j)` is a land cell. if `iswater[i][j] == 1`, cell `(i, j)` is a water cell. you must assign each cell a height in a way that follows these rules: the height of each cell must be non-negative. if the cell is a water cell, its height must be `0`. any two adjacent cells must have an absolute height difference of at most `1`. a cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching). find an assignment of heights such that the maximum height in the matrix is maximized. return an integer matrix `height` of size `m x n` where `height[i][j]` is cell `(i, j)`'s height. if there are multiple solutions, return any of them.","input: iswater = [[0,1],[0,0]] output: [[1,0],[2,1]] explanation: the image shows the assigned heights of each cell. the blue cell is the water cell, and the green cells are the land cells. example 2: input: iswater = [[0,0,1],[1,0,0],[0,0,0]] output: [[1,1,0],[0,1,1],[1,2,2]] explanation: a height of 2 is the maximum possible height of any assignment. any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.","`m == iswater.length` `n == iswater[i].length` `1 <= m, n <= 1000` `iswater[i][j]` is `0` or `1`. there is at least one water cell.",
1766,Tree of Coprimes,"There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. Each node has a value associated with it, and the root of the tree is node `0`.

To represent this tree, you are given an integer array `nums` and a 2D array `edges`. Each `nums[i]` represents the `ith` node's value, and each `edges[j] = [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree.

Two values `x` and `y` are coprime if `gcd(x, y) == 1` where `gcd(x, y)` is the greatest common divisor of `x` and `y`.

An ancestor of a node `i` is any other node on the shortest path from node `i` to the root. A node is not considered an ancestor of itself.

Return an array `ans` of size `n`, where `ans[i]` is the closest ancestor to node `i` such that `nums[i]` and `nums[ans[i]]` are coprime, or `-1` if there is no such ancestor.


Example 1:
Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]
Output: [-1,0,0,1]
Explanation: In the above figure, each node's value is in parentheses.

- Node 0 has no coprime ancestors.

- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).

- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's
  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.

- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its
  closest valid ancestor.


Example 2:
Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]
Output: [-1,0,-1,0,0,0,-1]

Constraints:
`nums.length == n`
`1 <= nums[i] <= 50`
`1 <= n <= 105`
`edges.length == n - 1`
`edges[j].length == 2`
`0 <= uj, vj < n`
`uj != vj`",Hard,https://leetcode.com/problems/tree-of-coprimes,Google,"Math,Tree,Depth-first Search,Breadth-first Search",119,,"there is a tree (i.e., a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. each node has a value associated with it, and the root of the tree is node `0`. to represent this tree, you are given an integer array `nums` and a 2d array `edges`. each `nums[i]` represents the `ith` node's value, and each `edges[j] = [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree. two values `x` and `y` are coprime if `gcd(x, y) == 1` where `gcd(x, y)` is the greatest common divisor of `x` and `y`. an ancestor of a node `i` is any other node on the shortest path from node `i` to the root. a node is not considered an ancestor of itself. return an array `ans` of size `n`, where `ans[i]` is the closest ancestor to node `i` such that `nums[i]` and `nums[ans[i]]` are coprime, or `-1` if there is no such ancestor.","input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]] output: [-1,0,0,1] explanation: in the above figure, each node's value is in parentheses. - node 0 has no coprime ancestors. - node 1 has only one ancestor, node 0. their values are coprime (gcd(2,3) == 1). - node 2 has two ancestors, nodes 1 and 0. node 1's value is not coprime (gcd(3,3) == 3), but node 0's value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor. - node 3 has two ancestors, nodes 1 and 0. it is coprime with node 1 (gcd(3,2) == 1), so node 1 is its closest valid ancestor. example 2: input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]] output: [-1,0,-1,0,0,0,-1]","`nums.length == n` `1 <= nums[i] <= 50` `1 <= n <= 10^5` `edges.length == n - 1` `edges[j].length == 2` `0 <= uj, vj < n` `uj != vj`",
1767,Find the Subtasks That Did Not Execute,SQL Schema,Hard,https://leetcode.com/problems/find-the-subtasks-that-did-not-execute,Google,,26,,sql schema,,,
1768,Merge Strings Alternately,"You are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.

Return the merged string.


Example 1:
Input: word1 = ""abc"", word2 = ""pqr""
Output: ""apbqcr""
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r

Example 2:
Input: word1 = ""ab"", word2 = ""pqrs""
Output: ""apbqrs""
Explanation: Notice that as word2 is longer, ""rs"" is appended to the end.

word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s

Example 3:
Input: word1 = ""abcd"", word2 = ""pq""
Output: ""apbqcd""
Explanation: Notice that as word1 is longer, ""cd"" is appended to the end.

word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d

Constraints:
`1 <= word1.length, word2.length <= 100`
`word1` and `word2` consist of lowercase English letters.",Easy,https://leetcode.com/problems/merge-strings-alternately,Uber,String,149,"[Zigzag Iterator, /problems/zigzag-iterator/, Medium]","you are given two strings `word1` and `word2`. merge the strings by adding letters in alternating order, starting with `word1`. if a string is longer than the other, append the additional letters onto the end of the merged string. return the merged string.","input: word1 = ""abc"", word2 = ""pqr"" output: ""apbqcr"" explanation: the merged string will be merged as so: word1: a b c word2: p q r merged: a p b q c r example 2: input: word1 = ""ab"", word2 = ""pqrs"" output: ""apbqrs"" explanation: notice that as word2 is longer, ""rs"" is appended to the end. word1: a b word2: p q r s merged: a p b q r s example 3: input: word1 = ""abcd"", word2 = ""pq"" output: ""apbqcd"" explanation: notice that as word1 is longer, ""cd"" is appended to the end. word1: a b c d word2: p q merged: a p b q c d","`1 <= word1.length, word2.length <= 10^0` `word1` and `word2` consist of lowercase english letters.",
1769,Minimum Number of Operations to Move All Balls to Each Box,"You have `n` boxes. You are given a binary string `boxes` of length `n`, where `boxes[i]` is `'0'` if the `ith` box is empty, and `'1'` if it contains one ball.

In one operation, you can move one ball from a box to an adjacent box. Box `i` is adjacent to box `j` if `abs(i - j) == 1`. Note that after doing so, there may be more than one ball in some boxes.

Return an array `answer` of size `n`, where `answer[i]` is the minimum number of operations needed to move all the balls to the `ith` box.

Each `answer[i]` is calculated considering the initial state of the boxes.


Example 1:
Input: boxes = ""110""
Output: [1,1,3]
Explanation: The answer for each box is as follows:
1) First box: you will have to move one ball from the second box to the first box in one operation.

2) Second box: you will have to move one ball from the first box to the second box in one operation.

3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.


Example 2:
Input: boxes = ""001011""
Output: [11,8,5,4,3,4]

Constraints:
`n == boxes.length`
`1 <= n <= 2000`
`boxes[i]` is either `'0'` or `'1'`.",Medium,https://leetcode.com/problems/minimum-number-of-operations-to-move-all-balls-to-each-box,Google,"Array,Greedy",301,"[Minimum Cost to Move Chips to The Same Position, /problems/minimum-cost-to-move-chips-to-the-same-position/, Easy]","you have `n` boxes. you are given a binary string `boxes` of length `n`, where `boxes[i]` is `'0'` if the `ith` box is empty, and `'1'` if it contains one ball. in one operation, you can move one ball from a box to an adjacent box. box `i` is adjacent to box `j` if `abs(i - j) == 1`. note that after doing so, there may be more than one ball in some boxes. return an array `answer` of size `n`, where `answer[i]` is the minimum number of operations needed to move all the balls to the `ith` box. each `answer[i]` is calculated considering the initial state of the boxes.","input: boxes = ""110"" output: [1,1,3] explanation: the answer for each box is as follows: 1) first box: you will have to move one ball from the second box to the first box in one operation. 2) second box: you will have to move one ball from the first box to the second box in one operation. 3) third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation. example 2: input: boxes = ""001011"" output: [11,8,5,4,3,4]",`n == boxes.length` `1 <= n <= 2000` `boxes[i]` is either `'0'` or `'1'`.,
1770,Maximum Score from Performing Multiplication Operations,"You are given two integer arrays `nums` and `multipliers` of size `n` and `m` respectively, where `n >= m`. The arrays are 1-indexed.

You begin with a score of `0`. You want to perform exactly `m` operations. On the `ith` operation (1-indexed), you will:
Choose one integer `x` from either the start or the end of the array `nums`.

Add `multipliers[i] * x` to your score.

Remove `x` from the array `nums`.

Return the maximum score after performing `m` operations.


Example 1:
Input: nums = [1,2,3], multipliers = [3,2,1]
Output: 14
Explanation: An optimal solution is as follows:
- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.

- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.

- Choose from the end, [1], adding 1 * 1 = 1 to the score.

The total score is 9 + 4 + 1 = 14.


Example 2:
Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]
Output: 102
Explanation: An optimal solution is as follows:
- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.

- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.

- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.

- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.

- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. 
The total score is 50 + 15 - 9 + 4 + 42 = 102.


Constraints:
`n == nums.length`
`m == multipliers.length`
`1 <= m <= 103`
`m <= n <= 105`` `
`-1000 <= nums[i], multipliers[i] <= 1000`",Medium,https://leetcode.com/problems/maximum-score-from-performing-multiplication-operations,Amazon,Dynamic Programming,254,"[Stone Game VII, /problems/stone-game-vii/, Medium]","you are given two integer arrays `nums` and `multipliers` of size `n` and `m` respectively, where `n >= m`. the arrays are 1-indexed. you begin with a score of `0`. you want to perform exactly `m` operations. on the `ith` operation (1-indexed), you will: choose one integer `x` from either the start or the end of the array `nums`. add `multipliers[i] * x` to your score. remove `x` from the array `nums`. return the maximum score after performing `m` operations.","input: nums = [1,2,3], multipliers = [3,2,1] output: 14 explanation: an optimal solution is as follows: - choose from the end, [1,2,3], adding 3 * 3 = 9 to the score. - choose from the end, [1,2], adding 2 * 2 = 4 to the score. - choose from the end, [1], adding 1 * 1 = 1 to the score. the total score is 9 + 4 + 1 = 14. example 2: input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6] output: 102 explanation: an optimal solution is as follows: - choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score. - choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score. - choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score. - choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score. - choose from the end, [-2,7], adding 7 * 6 = 42 to the score. the total score is 50 + 15 - 9 + 4 + 42 = 102.","`n == nums.length` `m == multipliers.length` `1 <= m <= 10^3` `m <= n <= 10^5`` ` `-1000 <= nums[i], multipliers[i] <= 1000`",
1771,Maximize Palindrome Length From Subsequences,"You are given two strings, `word1` and `word2`. You want to construct a string in the following manner:
Choose some non-empty subsequence `subsequence1` from `word1`.

Choose some non-empty subsequence `subsequence2` from `word2`.

Concatenate the subsequences: `subsequence1 + subsequence2`, to make the string.

Return the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return `0`.

A subsequence of a string `s` is a string that can be made by deleting some (possibly none) characters from `s` without changing the order of the remaining characters.

A palindrome is a string that reads the same forward as well as backward.


Example 1:
Input: word1 = ""cacb"", word2 = ""cbba""
Output: 5
Explanation: Choose ""ab"" from word1 and ""cba"" from word2 to make ""abcba"", which is a palindrome.


Example 2:
Input: word1 = ""ab"", word2 = ""ab""
Output: 3
Explanation: Choose ""ab"" from word1 and ""a"" from word2 to make ""aba"", which is a palindrome.


Example 3:
Input: word1 = ""aa"", word2 = ""bb""
Output: 0
Explanation: You cannot construct a palindrome from the described method, so return 0.


Constraints:
`1 <= word1.length, word2.length <= 1000`
`word1` and `word2` consist of lowercase English letters.",Hard,https://leetcode.com/problems/maximize-palindrome-length-from-subsequences,Goldman Sachs,Dynamic Programming,182,"[Longest Palindromic Subsequence, /problems/longest-palindromic-subsequence/, Medium]","you are given two strings, `word1` and `word2`. you want to construct a string in the following manner: choose some non-empty subsequence `subsequence1` from `word1`. choose some non-empty subsequence `subsequence2` from `word2`. concatenate the subsequences: `subsequence1 + subsequence2`, to make the string. return the length of the longest palindrome that can be constructed in the described manner. if no palindromes can be constructed, return `0`. a subsequence of a string `s` is a string that can be made by deleting some (possibly none) characters from `s` without changing the order of the remaining characters. a palindrome is a string that reads the same forward as well as backward.","input: word1 = ""cacb"", word2 = ""cbba"" output: 5 explanation: choose ""ab"" from word1 and ""cba"" from word2 to make ""abcba"", which is a palindrome. example 2: input: word1 = ""ab"", word2 = ""ab"" output: 3 explanation: choose ""ab"" from word1 and ""a"" from word2 to make ""aba"", which is a palindrome. example 3: input: word1 = ""aa"", word2 = ""bb"" output: 0 explanation: you cannot construct a palindrome from the described method, so return 0.","`1 <= word1.length, word2.length <= 1000` `word1` and `word2` consist of lowercase english letters.",
1772,Sort Features by Popularity,"You are given a string array `features` where `features[i]` is a single word that represents the name of a feature of the latest product you are working on. You have made a survey where users have reported which features they like. You are given a string array `responses`, where each `responses[i]` is a string containing space-separated words.

The popularity of a feature is the number of `responses[i]` that contain the feature. You want to sort the features in non-increasing order by their popularity. If two features have the same popularity, order them by their original index in `features`. Notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity.

Return the features in sorted order.


Example 1:
Input: features = [""cooler"",""lock"",""touch""], responses = [""i like cooler cooler"",""lock touch cool"",""locker like touch""]
Output: [""touch"",""cooler"",""lock""]
Explanation: appearances(""cooler"") = 1, appearances(""lock"") = 1, appearances(""touch"") = 2. Since ""cooler"" and ""lock"" both had 1 appearance, ""cooler"" comes first because ""cooler"" came first in the features array.


Example 2:
Input: features = [""a"",""aa"",""b"",""c""], responses = [""a"",""a aa"",""a a a a a"",""b a""]
Output: [""a"",""aa"",""b"",""c""]

Constraints:
`1 <= features.length <= 104`
`1 <= features[i].length <= 10`
`features` contains no duplicates.

`features[i]` consists of lowercase letters.

`1 <= responses.length <= 102`
`1 <= responses[i].length <= 103`
`responses[i]` consists of lowercase letters and spaces.

`responses[i]` contains no two consecutive spaces.

`responses[i]` has no leading or trailing spaces.",Medium,https://leetcode.com/problems/sort-features-by-popularity,Amazon,"Hash Table,Sort",19,"[Top K Frequent Elements, /problems/top-k-frequent-elements/, Medium], [Top K Frequent Words, /problems/top-k-frequent-words/, Medium]","you are given a string array `features` where `features[i]` is a single word that represents the name of a feature of the latest product you are working on. you have made a survey where users have reported which features they like. you are given a string array `responses`, where each `responses[i]` is a string containing space-separated words. the popularity of a feature is the number of `responses[i]` that contain the feature. you want to sort the features in non-increasing order by their popularity. if two features have the same popularity, order them by their original index in `features`. notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity. return the features in sorted order.","input: features = [""cooler"",""lock"",""touch""], responses = [""i like cooler cooler"",""lock touch cool"",""locker like touch""] output: [""touch"",""cooler"",""lock""] explanation: appearances(""cooler"") = 1, appearances(""lock"") = 1, appearances(""touch"") = 2. since ""cooler"" and ""lock"" both had 1 appearance, ""cooler"" comes first because ""cooler"" came first in the features array. example 2: input: features = [""a"",""aa"",""b"",""c""], responses = [""a"",""a aa"",""a a a a a"",""b a""] output: [""a"",""aa"",""b"",""c""]",`1 <= features.length <= 10^4` `1 <= features[i].length <= 10` `features` contains no duplicates. `features[i]` consists of lowercase letters. `1 <= responses.length <= 10^2` `1 <= responses[i].length <= 10^3` `responses[i]` consists of lowercase letters and spaces. `responses[i]` contains no two consecutive spaces. `responses[i]` has no leading or trailing spaces.,
1773,Count Items Matching a Rule,"You are given an array `items`, where each `items[i] = [typei, colori, namei]` describes the type, color, and name of the `ith` item. You are also given a rule represented by two strings, `ruleKey` and `ruleValue`.

The `ith` item is said to match the rule if one of the following is true:
`ruleKey == ""type""` and `ruleValue == typei`.

`ruleKey == ""color""` and `ruleValue == colori`.

`ruleKey == ""name""` and `ruleValue == namei`.

Return the number of items that match the given rule.


Example 1:
Input: items = [[""phone"",""blue"",""pixel""],[""computer"",""silver"",""lenovo""],[""phone"",""gold"",""iphone""]], ruleKey = ""color"", ruleValue = ""silver""
Output: 1
Explanation: There is only one item matching the given rule, which is [""computer"",""silver"",""lenovo""].


Example 2:
Input: items = [[""phone"",""blue"",""pixel""],[""computer"",""silver"",""phone""],[""phone"",""gold"",""iphone""]], ruleKey = ""type"", ruleValue = ""phone""
Output: 2
Explanation: There are only two items matching the given rule, which are [""phone"",""blue"",""pixel""] and [""phone"",""gold"",""iphone""]. Note that the item [""computer"",""silver"",""phone""] does not match.


Constraints:
`1 <= items.length <= 104`
`1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10`
`ruleKey` is equal to either `""type""`, `""color""`, or `""name""`.

All strings consist only of lowercase letters.",Easy,https://leetcode.com/problems/count-items-matching-a-rule,Facebook,"Array,String",197,,"you are given an array `items`, where each `items[i] = [typei, colori, namei]` describes the type, color, and name of the `ith` item. you are also given a rule represented by two strings, `rulekey` and `rulevalue`. the `ith` item is said to match the rule if one of the following is true: `rulekey == ""type""` and `rulevalue == typei`. `rulekey == ""color""` and `rulevalue == colori`. `rulekey == ""name""` and `rulevalue == namei`. return the number of items that match the given rule.","input: items = [[""phone"",""blue"",""pixel""],[""computer"",""silver"",""lenovo""],[""phone"",""gold"",""iphone""]], rulekey = ""color"", rulevalue = ""silver"" output: 1 explanation: there is only one item matching the given rule, which is [""computer"",""silver"",""lenovo""]. example 2: input: items = [[""phone"",""blue"",""pixel""],[""computer"",""silver"",""phone""],[""phone"",""gold"",""iphone""]], rulekey = ""type"", rulevalue = ""phone"" output: 2 explanation: there are only two items matching the given rule, which are [""phone"",""blue"",""pixel""] and [""phone"",""gold"",""iphone""]. note that the item [""computer"",""silver"",""phone""] does not match.","`1 <= items.length <= 10^4` `1 <= typei.length, colori.length, namei.length, rulevalue.length <= 10` `rulekey` is equal to either `""type""`, `""color""`, or `""name""`. all strings consist only of lowercase letters.",
1774,Closest Dessert Cost,"You would like to make dessert and are preparing to buy the ingredients. You have `n` ice cream base flavors and `m` types of toppings to choose from. You must follow these rules when making your dessert:
There must be exactly one ice cream base.

You can add one or more types of topping or have no toppings at all.

There are at most two of each type of topping.

You are given three inputs:
`baseCosts`, an integer array of length `n`, where each `baseCosts[i]` represents the price of the `ith` ice cream base flavor.

`toppingCosts`, an integer array of length `m`, where each `toppingCosts[i]` is the price of one of the `ith` topping.

`target`, an integer representing your target price for dessert.

You want to make a dessert with a total cost as close to `target` as possible.

Return the closest possible cost of the dessert to `target`. If there are multiple, return the lower one.


Example 1:
Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10
Output: 10
Explanation: Consider the following combination (all 0-indexed):
- Choose base 1: cost 7
- Take 1 of topping 0: cost 1 x 3 = 3
- Take 0 of topping 1: cost 0 x 4 = 0
Total: 7 + 3 + 0 = 10.


Example 2:
Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18
Output: 17
Explanation: Consider the following combination (all 0-indexed):
- Choose base 1: cost 3
- Take 1 of topping 0: cost 1 x 4 = 4
- Take 2 of topping 1: cost 2 x 5 = 10
- Take 0 of topping 2: cost 0 x 100 = 0
Total: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.


Example 3:
Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9
Output: 8
Explanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.


Example 4:
Input: baseCosts = [10], toppingCosts = [1], target = 1
Output: 10
Explanation: Notice that you don't have to have any toppings, but you must have exactly one base.


Constraints:
`n == baseCosts.length`
`m == toppingCosts.length`
`1 <= n, m <= 10`
`1 <= baseCosts[i], toppingCosts[i] <= 104`
`1 <= target <= 104`",Medium,https://leetcode.com/problems/closest-dessert-cost,Google,Greedy,186,,"you would like to make dessert and are preparing to buy the ingredients. you have `n` ice cream base flavors and `m` types of toppings to choose from. you must follow these rules when making your dessert: there must be exactly one ice cream base. you can add one or more types of topping or have no toppings at all. there are at most two of each type of topping. you are given three inputs: `basecosts`, an integer array of length `n`, where each `basecosts[i]` represents the price of the `ith` ice cream base flavor. `toppingcosts`, an integer array of length `m`, where each `toppingcosts[i]` is the price of one of the `ith` topping. `target`, an integer representing your target price for dessert. you want to make a dessert with a total cost as close to `target` as possible. return the closest possible cost of the dessert to `target`. if there are multiple, return the lower one.","input: basecosts = [1,7], toppingcosts = [3,4], target = 10 output: 10 explanation: consider the following combination (all 0-indexed): - choose base 1: cost 7 - take 1 of topping 0: cost 1 x 3 = 3 - take 0 of topping 1: cost 0 x 4 = 0 total: 7 + 3 + 0 = 10. example 2: input: basecosts = [2,3], toppingcosts = [4,5,100], target = 18 output: 17 explanation: consider the following combination (all 0-indexed): - choose base 1: cost 3 - take 1 of topping 0: cost 1 x 4 = 4 - take 2 of topping 1: cost 2 x 5 = 10 - take 0 of topping 2: cost 0 x 100 = 0 total: 3 + 4 + 10 + 0 = 17. you cannot make a dessert with a total cost of 18. example 3: input: basecosts = [3,10], toppingcosts = [2,5], target = 9 output: 8 explanation: it is possible to make desserts with cost 8 and 10. return 8 as it is the lower cost. example 4: input: basecosts = [10], toppingcosts = [1], target = 1 output: 10 explanation: notice that you don't have to have any toppings, but you must have exactly one base.","`n == basecosts.length` `m == toppingcosts.length` `1 <= n, m <= 10` `1 <= basecosts[i], toppingcosts[i] <= 10^4` `1 <= target <= 10^4`",
1775,Equal Sum Arrays With Minimum Number of Operations,"You are given two arrays of integers `nums1` and `nums2`, possibly of different lengths. The values in the arrays are between `1` and `6`, inclusive.

In one operation, you can change any integer's value in any of the arrays to any value between `1` and `6`, inclusive.

Return the minimum number of operations required to make the sum of values in `nums1` equal to the sum of values in `nums2`. Return `-1`​​​​​ if it is not possible to make the sum of the two arrays equal.


Example 1:
Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]
Output: 3
Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.

- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].

- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].

- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].


Example 2:
Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]
Output: -1
Explanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.


Example 3:
Input: nums1 = [6,6], nums2 = [1]
Output: 3
Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. 
- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].

- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].

- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].


Constraints:
`1 <= nums1.length, nums2.length <= 105`
`1 <= nums1[i], nums2[i] <= 6`",Medium,https://leetcode.com/problems/equal-sum-arrays-with-minimum-number-of-operations,HRT,Greedy,217,"[Number of Dice Rolls With Target Sum, /problems/number-of-dice-rolls-with-target-sum/, Medium]","you are given two arrays of integers `nums1` and `nums2`, possibly of different lengths. the values in the arrays are between `1` and `6`, inclusive. in one operation, you can change any integer's value in any of the arrays to any value between `1` and `6`, inclusive. return the minimum number of operations required to make the sum of values in `nums1` equal to the sum of values in `nums2`. return `-1`​​​​​ if it is not possible to make the sum of the two arrays equal.","input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2] output: 3 explanation: you can make the sums of nums1 and nums2 equal with 3 operations. all indices are 0-indexed. - change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2]. - change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2]. - change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2]. example 2: input: nums1 = [1,1,1,1,1,1,1], nums2 = [6] output: -1 explanation: there is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal. example 3: input: nums1 = [6,6], nums2 = [1] output: 3 explanation: you can make the sums of nums1 and nums2 equal with 3 operations. all indices are 0-indexed. - change nums1[0] to 2. nums1 = [2,6], nums2 = [1]. - change nums1[1] to 2. nums1 = [2,2], nums2 = [1]. - change nums2[0] to 4. nums1 = [2,2], nums2 = [4].","`1 <= nums1.length, nums2.length <= 10^5` `1 <= nums1[i], nums2[i] <= 6`",
1776,Car Fleet II,"There are `n` cars traveling at different speeds in the same direction along a one-lane road. You are given an array `cars` of length `n`, where `cars[i] = [positioni, speedi]` represents:
`positioni` is the distance between the `ith` car and the beginning of the road in meters. It is guaranteed that `positioni < positioni+1`.

`speedi` is the initial speed of the `ith` car in meters per second.

For simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.

Return an array `answer`, where `answer[i]` is the time, in seconds, at which the `ith` car collides with the next car, or `-1` if the car does not collide with the next car. Answers within `10-5` of the actual answers are accepted.


Example 1:
Input: cars = [[1,2],[2,1],[4,3],[7,2]]
Output: [1.00000,-1.00000,3.00000,-1.00000]
Explanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.


Example 2:
Input: cars = [[3,4],[5,4],[6,3],[9,1]]
Output: [2.00000,1.00000,1.50000,-1.00000]

Constraints:
`1 <= cars.length <= 105`
`1 <= positioni, speedi <= 106`
`positioni < positioni+1`",Hard,https://leetcode.com/problems/car-fleet-ii,Google,Math,167,"[Car Fleet, /problems/car-fleet/, Medium]","there are `n` cars traveling at different speeds in the same direction along a one-lane road. you are given an array `cars` of length `n`, where `cars[i] = [positioni, speedi]` represents: `positioni` is the distance between the `ith` car and the beginning of the road in meters. it is guaranteed that `positioni < positioni+1`. `speedi` is the initial speed of the `ith` car in meters per second. for simplicity, cars can be considered as points moving along the number line. two cars collide when they occupy the same position. once a car collides with another car, they unite and form a single car fleet. the cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet. return an array `answer`, where `answer[i]` is the time, in seconds, at which the `ith` car collides with the next car, or `-1` if the car does not collide with the next car. answers within `10-5` of the actual answers are accepted.","input: cars = [[1,2],[2,1],[4,3],[7,2]] output: [1.00000,-1.00000,3.00000,-1.00000] explanation: after exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. after exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s. example 2: input: cars = [[3,4],[5,4],[6,3],[9,1]] output: [2.00000,1.00000,1.50000,-1.00000]","`1 <= cars.length <= 10^5` `1 <= positioni, speedi <= 10^6` `positioni < positioni+1`",
1777,Product's Price for Each Store,SQL Schema,Easy,https://leetcode.com/problems/products-price-for-each-store,Amazon,,21,,sql schema,,,
1778,Shortest Path in a Hidden Grid,"This is an interactive problem.

There is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is guaranteed that the starting cell and the target cell are different, and neither of them is blocked.

You want to find the minimum distance to the target cell. However, you do not know the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.

Thr `GridMaster` class has the following functions:
`boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.

`void move(char direction)` Moves the robot in that direction. If this move would move the robot to a blocked cell or off the grid, the move will be ignored, and the robot will remain in the same position.

`boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.

Note that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.

Return the minimum distance between the robot's initial starting cell and the target cell. If there is no valid path between the cells, return `-1`.

Custom testing:
The test input is read as a 2D matrix `grid` of size `m x n` where:
`grid[i][j] == -1` indicates that the robot is in cell `(i, j)` (the starting cell).

`grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.

`grid[i][j] == 1` indicates that the cell `(i, j)` is empty.

`grid[i][j] == 2` indicates that the cell `(i, j)` is the target cell.

There is exactly one `-1` and `2` in `grid`. Remember that you will not have this information in your code.


Example 1:
Input: grid = [[1,2],[-1,0]]
Output: 2
Explanation: One possible interaction is described below:
The robot is initially standing on cell (1, 0), denoted by the -1.

- master.canMove('U') returns true.

- master.canMove('D') returns false.

- master.canMove('L') returns false.

- master.canMove('R') returns false.

- master.move('U') moves the robot to the cell (0, 0).

- master.isTarget() returns false.

- master.canMove('U') returns false.

- master.canMove('D') returns true.

- master.canMove('L') returns false.

- master.canMove('R') returns true.

- master.move('R') moves the robot to the cell (0, 1).

- master.isTarget() returns true. 
We now know that the target is the cell (0, 1), and the shortest path to the target cell is 2.


Example 2:
Input: grid = [[0,0,-1],[1,1,1],[2,0,0]]
Output: 4
Explanation: The minimum distance between the robot and the target cell is 4.


Example 3:
Input: grid = [[-1,0],[0,2]]
Output: -1
Explanation: There is no path from the robot to the target cell.


Constraints:
`1 <= n, m <= 500`
`m == grid.length`
`n == grid[i].length`
`grid[i][j]` is either `-1`, `0`, `1`, or `2`.

There is exactly one `-1` in `grid`.

There is exactly one `2` in `grid`.",Medium,https://leetcode.com/problems/shortest-path-in-a-hidden-grid,Google,"Depth-first Search,Breadth-first Search,Graph",32,"[Robot Room Cleaner, /problems/robot-room-cleaner/, Hard], [Minimum Path Cost in a Hidden Grid, /problems/minimum-path-cost-in-a-hidden-grid/, Medium]","this is an interactive problem. there is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. the grid is of size `m x n`, and each cell in the grid is either empty or blocked. it is guaranteed that the starting cell and the target cell are different, and neither of them is blocked. you want to find the minimum distance to the target cell. however, you do not know the grid's dimensions, the starting cell, nor the target cell. you are only allowed to ask queries to the `gridmaster` object. thr `gridmaster` class has the following functions: `boolean canmove(char direction)` returns `true` if the robot can move in that direction. otherwise, it returns `false`. `void move(char direction)` moves the robot in that direction. if this move would move the robot to a blocked cell or off the grid, the move will be ignored, and the robot will remain in the same position. `boolean istarget()` returns `true` if the robot is currently on the target cell. otherwise, it returns `false`. note that `direction` in the above functions should be a character from `{'u','d','l','r'}`, representing the directions up, down, left, and right, respectively. return the minimum distance between the robot's initial starting cell and the target cell. if there is no valid path between the cells, return `-1`. custom testing: the test input is read as a 2d matrix `grid` of size `m x n` where: `grid[i][j] == -1` indicates that the robot is in cell `(i, j)` (the starting cell). `grid[i][j] == 0` indicates that the cell `(i, j)` is blocked. `grid[i][j] == 1` indicates that the cell `(i, j)` is empty. `grid[i][j] == 2` indicates that the cell `(i, j)` is the target cell. there is exactly one `-1` and `2` in `grid`. remember that you will not have this information in your code.","input: grid = [[1,2],[-1,0]] output: 2 explanation: one possible interaction is described below: the robot is initially standing on cell (1, 0), denoted by the -1. - master.canmove('u') returns true. - master.canmove('d') returns false. - master.canmove('l') returns false. - master.canmove('r') returns false. - master.move('u') moves the robot to the cell (0, 0). - master.istarget() returns false. - master.canmove('u') returns false. - master.canmove('d') returns true. - master.canmove('l') returns false. - master.canmove('r') returns true. - master.move('r') moves the robot to the cell (0, 1). - master.istarget() returns true. we now know that the target is the cell (0, 1), and the shortest path to the target cell is 2. example 2: input: grid = [[0,0,-1],[1,1,1],[2,0,0]] output: 4 explanation: the minimum distance between the robot and the target cell is 4. example 3: input: grid = [[-1,0],[0,2]] output: -1 explanation: there is no path from the robot to the target cell.","`1 <= n, m <= 500` `m == grid.length` `n == grid[i].length` `grid[i][j]` is either `-1`, `0`, `1`, or `2`. there is exactly one `-1` in `grid`. there is exactly one `2` in `grid`.",
1779,Find Nearest Point That Has the Same X or Y Coordinate,"You are given two integers, `x` and `y`, which represent your current location on a Cartesian grid: `(x, y)`. You are also given an array `points` where each `points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.

Return the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return `-1`.

The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is `abs(x1 - x2) + abs(y1 - y2)`.


Example 1:
Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]
Output: 2
Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.


Example 2:
Input: x = 3, y = 4, points = [[3,4]]
Output: 0
Explanation: The answer is allowed to be on the same location as your current location.


Example 3:
Input: x = 3, y = 4, points = [[2,3]]
Output: -1
Explanation: There are no valid points.


Constraints:
`1 <= points.length <= 104`
`points[i].length == 2`
`1 <= x, y, ai, bi <= 104`",Easy,https://leetcode.com/problems/find-nearest-point-that-has-the-same-x-or-y-coordinate,Amazon,Array,74,"[K Closest Points to Origin, /problems/k-closest-points-to-origin/, Medium]","you are given two integers, `x` and `y`, which represent your current location on a cartesian grid: `(x, y)`. you are also given an array `points` where each `points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. a point is valid if it shares the same x-coordinate or the same y-coordinate as your location. return the index (0-indexed) of the valid point with the smallest manhattan distance from your current location. if there are multiple, return the valid point with the smallest index. if there are no valid points, return `-1`. the manhattan distance between two points `(x1, y1)` and `(x2, y2)` is `abs(x1 - x2) + abs(y1 - y2)`.","input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]] output: 2 explanation: of all the points, only [3,1], [2,4] and [4,4] are valid. of the valid points, [2,4] and [4,4] have the smallest manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2. example 2: input: x = 3, y = 4, points = [[3,4]] output: 0 explanation: the answer is allowed to be on the same location as your current location. example 3: input: x = 3, y = 4, points = [[2,3]] output: -1 explanation: there are no valid points.","`1 <= points.length <= 10^4` `points[i].length == 2` `1 <= x, y, ai, bi <= 10^4`",
1780,Check if Number is a Sum of Powers of Three,"Given an integer `n`, return `true` if it is possible to represent `n` as the sum of distinct powers of three. Otherwise, return `false`.

An integer `y` is a power of three if there exists an integer `x` such that `y == 3x`.


Example 1:
Input: n = 12
Output: true
Explanation: 12 = 31 + 32

Example 2:
Input: n = 91
Output: true
Explanation: 91 = 30 + 32 + 34

Example 3:
Input: n = 21
Output: false

Constraints:
`1 <= n <= 107`",Medium,https://leetcode.com/problems/check-if-number-is-a-sum-of-powers-of-three,Microsoft,"Math,Backtracking,Recursion",182,"[Power of Three, /problems/power-of-three/, Easy]","given an integer `n`, return `true` if it is possible to represent `n` as the sum of distinct powers of three. otherwise, return `false`. an integer `y` is a power of three if there exists an integer `x` such that `y == 3x`.",input: n = 12 output: true explanation: 12 = 31 + 32 example 2: input: n = 91 output: true explanation: 91 = 30 + 32 + 34 example 3: input: n = 21 output: false,`1 <= n <= 10^7`,
1781,Sum of Beauty of All Substrings,"The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.

For example, the beauty of `""abaacc""` is `3 - 1 = 2`.

Given a string `s`, return the sum of beauty of all of its substrings.


Example 1:
Input: s = ""aabcb""
Output: 5
Explanation: The substrings with non-zero beauty are [""aab"",""aabc"",""aabcb"",""abcb"",""bcb""], each with beauty equal to 1.


Example 2:
Input: s = ""aabcbaa""
Output: 17

Constraints:
`1 <= s.length <= 500`
`s` consists of only lowercase English letters.",Medium,https://leetcode.com/problems/sum-of-beauty-of-all-substrings,Google,"Hash Table,String",118,,"the beauty of a string is the difference in frequencies between the most frequent and least frequent characters. for example, the beauty of `""abaacc""` is `3 - 1 = 2`. given a string `s`, return the sum of beauty of all of its substrings.","input: s = ""aabcb"" output: 5 explanation: the substrings with non-zero beauty are [""aab"",""aabc"",""aabcb"",""abcb"",""bcb""], each with beauty equal to 1. example 2: input: s = ""aabcbaa"" output: 17",`1 <= s.length <= 500` `s` consists of only lowercase english letters.,
1782,Count Pairs Of Nodes,"You are given an undirected graph represented by an integer `n`, which is the number of nodes, and `edges`, where `edges[i] = [ui, vi]` which indicates that there is an undirected edge between `ui` and `vi`. You are also given an integer array `queries`.

The answer to the `jth` query is the number of pairs of nodes `(a, b)` that satisfy the following conditions:
`a < b`
`cnt` is strictly greater than `queries[j]`, where `cnt` is the number of edges incident to `a` or `b`.

Return an array `answers` such that `answers.length == queries.length` and `answers[j]` is the answer of the `jth` query.

Note that there can be repeated edges.


Example 1:
Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]
Output: [6,5]
Explanation: The number of edges incident to at least one of each pair is shown above.


Example 2:
Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]
Output: [10,10,9,8,6]

Constraints:
`2 <= n <= 2 * 104`
`1 <= edges.length <= 105`
`1 <= ui, vi <= n`
`ui != vi`
`1 <= queries.length <= 20`
`0 <= queries[j] < edges.length`",Hard,https://leetcode.com/problems/count-pairs-of-nodes,Google,Graph,101,,"you are given an undirected graph represented by an integer `n`, which is the number of nodes, and `edges`, where `edges[i] = [ui, vi]` which indicates that there is an undirected edge between `ui` and `vi`. you are also given an integer array `queries`. the answer to the `jth` query is the number of pairs of nodes `(a, b)` that satisfy the following conditions: `a < b` `cnt` is strictly greater than `queries[j]`, where `cnt` is the number of edges incident to `a` or `b`. return an array `answers` such that `answers.length == queries.length` and `answers[j]` is the answer of the `jth` query. note that there can be repeated edges.","input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3] output: [6,5] explanation: the number of edges incident to at least one of each pair is shown above. example 2: input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5] output: [10,10,9,8,6]","`2 <= n <= 2 * 10^4` `1 <= edges.length <= 10^5` `1 <= ui, vi <= n` `ui != vi` `1 <= queries.length <= 20` `0 <= queries[j] < edges.length`",
1783,Grand Slam Titles,SQL Schema,Medium,https://leetcode.com/problems/grand-slam-titles,Amazon,,26,,sql schema,,,
1784,Check if Binary String Has at Most One Segment of Ones,"Given a binary string `s` ​​​​​without leading zeros, return `true`​​​ if `s` contains at most one contiguous segment of ones. Otherwise, return `false`.


Example 1:
Input: s = ""1001""
Output: false
Explanation: The ones do not form a contiguous segment.


Example 2:
Input: s = ""110""
Output: true

Constraints:
`1 <= s.length <= 100`
`s[i]`​​​​ is either `'0'` or `'1'`.

`s[0]` is `'1'`.",Easy,https://leetcode.com/problems/check-if-binary-string-has-at-most-one-segment-of-ones,Cisco,Greedy,70,,"given a binary string `s` ​​​​​without leading zeros, return `true`​​​ if `s` contains at most one contiguous segment of ones. otherwise, return `false`.","input: s = ""1001"" output: false explanation: the ones do not form a contiguous segment. example 2: input: s = ""110"" output: true",`1 <= s.length <= 10^0` `s[i]`​​​​ is either `'0'` or `'1'`. `s[0]` is `'1'`.,
1785,Minimum Elements to Add to Form a Given Sum,"You are given an integer array `nums` and two integers `limit` and `goal`. The array `nums` has an interesting property that `abs(nums[i]) <= limit`.

Return the minimum number of elements you need to add to make the sum of the array equal to `goal`. The array must maintain its property that `abs(nums[i]) <= limit`.

Note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.


Example 1:
Input: nums = [1,-1,1], limit = 3, goal = -4
Output: 2
Explanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.


Example 2:
Input: nums = [1,-10,9,1], limit = 100, goal = 0
Output: 1

Constraints:
`1 <= nums.length <= 105`
`1 <= limit <= 106`
`-limit <= nums[i] <= limit`
`-109 <= goal <= 109`",Medium,https://leetcode.com/problems/minimum-elements-to-add-to-form-a-given-sum,Twitter,Greedy,85,,"you are given an integer array `nums` and two integers `limit` and `goal`. the array `nums` has an interesting property that `abs(nums[i]) <= limit`. return the minimum number of elements you need to add to make the sum of the array equal to `goal`. the array must maintain its property that `abs(nums[i]) <= limit`. note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.","input: nums = [1,-1,1], limit = 3, goal = -4 output: 2 explanation: you can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4. example 2: input: nums = [1,-10,9,1], limit = 100, goal = 0 output: 1",`1 <= nums.length <= 10^5` `1 <= limit <= 10^6` `-limit <= nums[i] <= limit` `-10^9 <= goal <= 10^9`,
1786,Number of Restricted Paths From First to Last Node,"There is an undirected weighted connected graph. You are given a positive integer `n` which denotes that the graph has `n` nodes labeled from `1` to `n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes that there is an edge between nodes `ui` and `vi` with weight equal to `weighti`.

A path from node `start` to node `end` is a sequence of nodes `[z0, z1, z2, ..., zk]` such that `z0 = start` and `zk = end` and there is an edge between `zi` and `zi+1` where `0 <= i <= k-1`.

The distance of a path is the sum of the weights on the edges of the path. Let `distanceToLastNode(x)` denote the shortest distance of a path between node `n` and node `x`. A restricted path is a path that also satisfies that `distanceToLastNode(zi) > distanceToLastNode(zi+1)` where `0 <= i <= k-1`.

Return the number of restricted paths from node `1` to node `n`. Since that number may be too large, return it modulo `109 + 7`.


Example 1:
Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]
Output: 3
Explanation: Each circle contains the node number in black and its `distanceToLastNode value in blue. `The three restricted paths are:
1) 1 --> 2 --> 5
2) 1 --> 2 --> 3 --> 5
3) 1 --> 3 --> 5

Example 2:
Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]
Output: 1
Explanation: Each circle contains the node number in black and its `distanceToLastNode value in blue. `The only restricted path is 1 --> 3 --> 7.


Constraints:
`1 <= n <= 2 * 104`
`n - 1 <= edges.length <= 4 * 104`
`edges[i].length == 3`
`1 <= ui, vi <= n`
`ui != vi`
`1 <= weighti <= 105`
There is at most one edge between any two nodes.

There is at least one path between any two nodes.",Medium,https://leetcode.com/problems/number-of-restricted-paths-from-first-to-last-node,Google,"Dynamic Programming,Graph",243,,"there is an undirected weighted connected graph. you are given a positive integer `n` which denotes that the graph has `n` nodes labeled from `1` to `n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes that there is an edge between nodes `ui` and `vi` with weight equal to `weighti`. a path from node `start` to node `end` is a sequence of nodes `[z0, z1, z2, ..., zk]` such that `z0 = start` and `zk = end` and there is an edge between `zi` and `zi+1` where `0 <= i <= k-1`. the distance of a path is the sum of the weights on the edges of the path. let `distancetolastnode(x)` denote the shortest distance of a path between node `n` and node `x`. a restricted path is a path that also satisfies that `distancetolastnode(zi) > distancetolastnode(zi+1)` where `0 <= i <= k-1`. return the number of restricted paths from node `1` to node `n`. since that number may be too large, return it modulo `109 + 7`.","input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]] output: 3 explanation: each circle contains the node number in black and its `distancetolastnode value in blue. `the three restricted paths are: 1) 1 --> 2 --> 5 2) 1 --> 2 --> 3 --> 5 3) 1 --> 3 --> 5 example 2: input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]] output: 1 explanation: each circle contains the node number in black and its `distancetolastnode value in blue. `the only restricted path is 1 --> 3 --> 7.","`1 <= n <= 2 * 10^4` `n - 1 <= edges.length <= 4 * 10^4` `edges[i].length == 3` `1 <= ui, vi <= n` `ui != vi` `1 <= weighti <= 10^5` there is at most one edge between any two nodes. there is at least one path between any two nodes.",
1787,Make the XOR of All Segments Equal to Zero,"You are given an array `nums`​​​ and an integer `k`​​​​​. The XOR of a segment `[left, right]` where `left <= right` is the `XOR` of all the elements with indices between `left` and `right`, inclusive: `nums[left] XOR nums[left+1] XOR ... XOR nums[right]`.

Return the minimum number of elements to change in the array such that the `XOR` of all segments of size `k`​​​​​​ is equal to zero.


Example 1:
Input: nums = [1,2,0,3,0], k = 1
Output: 3
Explanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].


Example 2:
Input: nums = [3,4,5,2,1,7,3,4,7], k = 3
Output: 3
Explanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].


Example 3:
Input: nums = [1,2,4,1,2,5,1,2,6], k = 3
Output: 3
Explanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].


Constraints:
`1 <= k <= nums.length <= 2000`
`​​​​​​0 <= nums[i] < 210`",Hard,https://leetcode.com/problems/make-the-xor-of-all-segments-equal-to-zero,"Media.net,codeagon",Dynamic Programming,144,,"you are given an array `nums`​​​ and an integer `k`​​​​​. the xor of a segment `[left, right]` where `left <= right` is the `xor` of all the elements with indices between `left` and `right`, inclusive: `nums[left] xor nums[left+1] xor ... xor nums[right]`. return the minimum number of elements to change in the array such that the `xor` of all segments of size `k`​​​​​​ is equal to zero.","input: nums = [1,2,0,3,0], k = 1 output: 3 explanation: modify the array from [1,2,0,3,0] to from [0,0,0,0,0]. example 2: input: nums = [3,4,5,2,1,7,3,4,7], k = 3 output: 3 explanation: modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7]. example 3: input: nums = [1,2,4,1,2,5,1,2,6], k = 3 output: 3 explanation: modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].",`1 <= k <= nums.length <= 2000` `​​​​​​0 <= nums[i] < 210`,
1788,Maximize the Beauty of the Garden,"There is a garden of `n` flowers, and each flower has an integer beauty value. The flowers are arranged in a line. You are given an integer array `flowers` of size `n` and each `flowers[i]` represents the beauty of the `ith` flower.

A garden is valid if it meets these conditions:
The garden has at least two flowers.

The first and the last flower of the garden have the same beauty value.

As the appointed gardener, you have the ability to remove any (possibly none) flowers from the garden. You want to remove flowers in a way that makes the remaining garden valid. The beauty of the garden is the sum of the beauty of all the remaining flowers.

Return the maximum possible beauty of some valid garden after you have removed any (possibly none) flowers.


Example 1:
Input: flowers = [1,2,3,1,2]
Output: 8
Explanation: You can produce the valid garden [2,3,1,2] to have a total beauty of 2 + 3 + 1 + 2 = 8.


Example 2:
Input: flowers = [100,1,1,-3,1]
Output: 3
Explanation: You can produce the valid garden [1,1,1] to have a total beauty of 1 + 1 + 1 = 3.


Example 3:
Input: flowers = [-1,-2,0,-1]
Output: -2
Explanation: You can produce the valid garden [-1,-1] to have a total beauty of -1 + -1 = -2.


Constraints:
`2 <= flowers.length <= 105`
`-104 <= flowers[i] <= 104`
It is possible to create a valid garden by removing some (possibly none) flowers.",Hard,https://leetcode.com/problems/maximize-the-beauty-of-the-garden,Amazon,Greedy,18,,"there is a garden of `n` flowers, and each flower has an integer beauty value. the flowers are arranged in a line. you are given an integer array `flowers` of size `n` and each `flowers[i]` represents the beauty of the `ith` flower. a garden is valid if it meets these conditions: the garden has at least two flowers. the first and the last flower of the garden have the same beauty value. as the appointed gardener, you have the ability to remove any (possibly none) flowers from the garden. you want to remove flowers in a way that makes the remaining garden valid. the beauty of the garden is the sum of the beauty of all the remaining flowers. return the maximum possible beauty of some valid garden after you have removed any (possibly none) flowers.","input: flowers = [1,2,3,1,2] output: 8 explanation: you can produce the valid garden [2,3,1,2] to have a total beauty of 2 + 3 + 1 + 2 = 8. example 2: input: flowers = [100,1,1,-3,1] output: 3 explanation: you can produce the valid garden [1,1,1] to have a total beauty of 1 + 1 + 1 = 3. example 3: input: flowers = [-1,-2,0,-1] output: -2 explanation: you can produce the valid garden [-1,-1] to have a total beauty of -1 + -1 = -2.",`2 <= flowers.length <= 10^5` `-10^4 <= flowers[i] <= 10^4` it is possible to create a valid garden by removing some (possibly none) flowers.,
1789,Primary Department for Each Employee,SQL Schema,Easy,https://leetcode.com/problems/primary-department-for-each-employee,,,15,,sql schema,,,
1790,Check if One String Swap Can Make Strings Equal,"You are given two strings `s1` and `s2` of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.

Return `true` if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return `false`.


Example 1:
Input: s1 = ""bank"", s2 = ""kanb""
Output: true
Explanation: For example, swap the first character with the last character of s2 to make ""bank"".


Example 2:
Input: s1 = ""attack"", s2 = ""defend""
Output: false
Explanation: It is impossible to make them equal with one string swap.


Example 3:
Input: s1 = ""kelb"", s2 = ""kelb""
Output: true
Explanation: The two strings are already equal, so no string swap operation is required.


Example 4:
Input: s1 = ""abcd"", s2 = ""dcba""
Output: false

Constraints:
`1 <= s1.length, s2.length <= 100`
`s1.length == s2.length`
`s1` and `s2` consist of only lowercase English letters.",Easy,https://leetcode.com/problems/check-if-one-string-swap-can-make-strings-equal,Facebook,String,125,"[Buddy Strings, /problems/buddy-strings/, Easy]","you are given two strings `s1` and `s2` of equal length. a string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices. return `true` if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. otherwise, return `false`.","input: s1 = ""bank"", s2 = ""kanb"" output: true explanation: for example, swap the first character with the last character of s2 to make ""bank"". example 2: input: s1 = ""attack"", s2 = ""defend"" output: false explanation: it is impossible to make them equal with one string swap. example 3: input: s1 = ""kelb"", s2 = ""kelb"" output: true explanation: the two strings are already equal, so no string swap operation is required. example 4: input: s1 = ""abcd"", s2 = ""dcba"" output: false","`1 <= s1.length, s2.length <= 10^0` `s1.length == s2.length` `s1` and `s2` consist of only lowercase english letters.",
1791,Find Center of Star Graph,"There is an undirected star graph consisting of `n` nodes labeled from `1` to `n`. A star graph is a graph where there is one center node and exactly `n - 1` edges that connect the center node with every other node.

You are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Return the center of the given star graph.


Example 1:
Input: edges = [[1,2],[2,3],[4,2]]
Output: 2
Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.


Example 2:
Input: edges = [[1,2],[5,1],[1,3],[1,4]]
Output: 1

Constraints:
`3 <= n <= 105`
`edges.length == n - 1`
`edges[i].length == 2`
`1 <= ui, vi <= n`
`ui != vi`
The given `edges` represent a valid star graph.",Medium,https://leetcode.com/problems/find-center-of-star-graph,Microsoft,Graph,73,,"there is an undirected star graph consisting of `n` nodes labeled from `1` to `n`. a star graph is a graph where there is one center node and exactly `n - 1` edges that connect the center node with every other node. you are given a 2d integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. return the center of the given star graph.","input: edges = [[1,2],[2,3],[4,2]] output: 2 explanation: as shown in the figure above, node 2 is connected to every other node, so 2 is the center. example 2: input: edges = [[1,2],[5,1],[1,3],[1,4]] output: 1","`3 <= n <= 10^5` `edges.length == n - 1` `edges[i].length == 2` `1 <= ui, vi <= n` `ui != vi` the given `edges` represent a valid star graph.",
1792,Maximum Average Pass Ratio,"There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array `classes`, where `classes[i] = [passi, totali]`. You know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam.

You are also given an integer `extraStudents`. There are another `extraStudents` brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the `extraStudents` students to a class in a way that maximizes the average pass ratio across all the classes.

The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.

Return the maximum possible average pass ratio after assigning the `extraStudents` students. Answers within `10-5` of the actual answer will be accepted.


Example 1:
Input: classes = [[1,2],[3,5],[2,2]], `extraStudents` = 2
Output: 0.78333
Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.


Example 2:
Input: classes = [[2,4],[3,9],[4,5],[2,10]], `extraStudents` = 4
Output: 0.53485

Constraints:
`1 <= classes.length <= 105`
`classes[i].length == 2`
`1 <= passi <= totali <= 105`
`1 <= extraStudents <= 105`",Medium,https://leetcode.com/problems/maximum-average-pass-ratio,Amazon,Heap,242,,"there is a school that has classes of students and each class will be having a final exam. you are given a 2d integer array `classes`, where `classes[i] = [passi, totali]`. you know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam. you are also given an integer `extrastudents`. there are another `extrastudents` brilliant students that are guaranteed to pass the exam of any class they are assigned to. you want to assign each of the `extrastudents` students to a class in a way that maximizes the average pass ratio across all the classes. the pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. the average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes. return the maximum possible average pass ratio after assigning the `extrastudents` students. answers within `10-5` of the actual answer will be accepted.","input: classes = [[1,2],[3,5],[2,2]], `extrastudents` = 2 output: 0.78333 explanation: you can assign the two extra students to the first class. the average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333. example 2: input: classes = [[2,4],[3,9],[4,5],[2,10]], `extrastudents` = 4 output: 0.53485",`1 <= classes.length <= 10^5` `classes[i].length == 2` `1 <= passi <= totali <= 10^5` `1 <= extrastudents <= 10^5`,
1793,Maximum Score of a Good Subarray,"You are given an array of integers `nums` (0-indexed) and an integer `k`.

The score of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. A good subarray is a subarray where `i <= k <= j`.

Return the maximum possible score of a good subarray.


Example 1:
Input: nums = [1,4,3,7,4,5], k = 3
Output: 15
Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. 

Example 2:
Input: nums = [5,5,4,5,4,1,1,1], k = 0
Output: 20
Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.


Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 2 * 104`
`0 <= k < nums.length`",Hard,https://leetcode.com/problems/maximum-score-of-a-good-subarray,Google,Greedy,231,"[Largest Rectangle in Histogram, /problems/largest-rectangle-in-histogram/, Hard]","you are given an array of integers `nums` (0-indexed) and an integer `k`. the score of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. a good subarray is a subarray where `i <= k <= j`. return the maximum possible score of a good subarray.","input: nums = [1,4,3,7,4,5], k = 3 output: 15 explanation: the optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. example 2: input: nums = [5,5,4,5,4,1,1,1], k = 0 output: 20 explanation: the optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 2 * 10^4` `0 <= k < nums.length`,
1794,Count Pairs of Equal Substrings With Minimum Difference,"You are given two strings `firstString` and `secondString` that are 0-indexed and consist only of lowercase English letters. Count the number of index quadruples `(i,j,a,b)` that satisfy the following conditions:
`0 <= i <= j < firstString.length`
`0 <= a <= b < secondString.length`
The substring of `firstString` that starts at the `ith` character and ends at the `jth` character (inclusive) is equal to the substring of `secondString` that starts at the `ath` character and ends at the `bth` character (inclusive).

`j - a` is the minimum possible value among all quadruples that satisfy the previous conditions.

Return the number of such quadruples.


Example 1:
Input: firstString = ""abcd"", secondString = ""bccda""
Output: 1
Explanation: The quadruple (0,0,4,4) is the only one that satisfies all the conditions and minimizes j - a.


Example 2:
Input: firstString = ""ab"", secondString = ""cd""
Output: 0
Explanation: There are no quadruples satisfying all the conditions.


Constraints:
`1 <= firstString.length, secondString.length <= 2 * 105`
Both strings consist only of lowercase English letters.",Medium,https://leetcode.com/problems/count-pairs-of-equal-substrings-with-minimum-difference,Google,"String,Greedy",12,,"you are given two strings `firststring` and `secondstring` that are 0-indexed and consist only of lowercase english letters. count the number of index quadruples `(i,j,a,b)` that satisfy the following conditions: `0 <= i <= j < firststring.length` `0 <= a <= b < secondstring.length` the substring of `firststring` that starts at the `ith` character and ends at the `jth` character (inclusive) is equal to the substring of `secondstring` that starts at the `ath` character and ends at the `bth` character (inclusive). `j - a` is the minimum possible value among all quadruples that satisfy the previous conditions. return the number of such quadruples.","input: firststring = ""abcd"", secondstring = ""bccda"" output: 1 explanation: the quadruple (0,0,4,4) is the only one that satisfies all the conditions and minimizes j - a. example 2: input: firststring = ""ab"", secondstring = ""cd"" output: 0 explanation: there are no quadruples satisfying all the conditions.","`1 <= firststring.length, secondstring.length <= 2 * 10^5` both strings consist only of lowercase english letters.",
1795,Rearrange Products Table,SQL Schema,Easy,https://leetcode.com/problems/rearrange-products-table,Amazon,,14,,sql schema,,,
1796,Second Largest Digit in a String,"Given an alphanumeric string `s`, return the second largest numerical digit that appears in `s`, or `-1` if it does not exist.

An alphanumeric string is a string consisting of lowercase English letters and digits.


Example 1:
Input: s = ""dfa12321afd""
Output: 2
Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.


Example 2:
Input: s = ""abc1111""
Output: -1
Explanation: The digits that appear in s are [1]. There is no second largest digit. 

Constraints:
`1 <= s.length <= 500`
`s` consists of only lowercase English letters and/or digits.",Easy,https://leetcode.com/problems/second-largest-digit-in-a-string,Softwire,String,61,,"given an alphanumeric string `s`, return the second largest numerical digit that appears in `s`, or `-1` if it does not exist. an alphanumeric string is a string consisting of lowercase english letters and digits.","input: s = ""dfa12321afd"" output: 2 explanation: the digits that appear in s are [1, 2, 3]. the second largest digit is 2. example 2: input: s = ""abc1111"" output: -1 explanation: the digits that appear in s are [1]. there is no second largest digit.",`1 <= s.length <= 500` `s` consists of only lowercase english letters and/or digits.,
1797,Design Authentication Manager,"There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire `timeToLive` seconds after the `currentTime`. If the token is renewed, the expiry time will be extended to expire `timeToLive` seconds after the (potentially different) `currentTime`.

Implement the `AuthenticationManager` class:
`AuthenticationManager(int timeToLive)` constructs the `AuthenticationManager` and sets the `timeToLive`.

`generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds.

`renew(string tokenId, int currentTime)` renews the unexpired token with the given `tokenId` at the given `currentTime` in seconds. If there are no unexpired tokens with the given `tokenId`, the request is ignored, and nothing happens.

`countUnexpiredTokens(int currentTime)` returns the number of unexpired tokens at the given currentTime.

Note that if a token expires at time `t`, and another action happens on time `t` (`renew` or `countUnexpiredTokens`), the expiration takes place before the other actions.


Example 1:
Input
[""AuthenticationManager"", ""`renew`"", ""generate"", ""`countUnexpiredTokens`"", ""generate"", ""`renew`"", ""`renew`"", ""`countUnexpiredTokens`""]
[[5], [""aaa"", 1], [""aaa"", 2], [6], [""bbb"", 7], [""aaa"", 8], [""bbb"", 10], [15]]
Output
[null, null, null, 1, null, null, null, 0]
Explanation
AuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with `timeToLive` = 5 seconds.

authenticationManager.`renew`(""aaa"", 1); // No token exists with tokenId ""aaa"" at time 1, so nothing happens.

authenticationManager.generate(""aaa"", 2); // Generates a new token with tokenId ""aaa"" at time 2.

authenticationManager.`countUnexpiredTokens`(6); // The token with tokenId ""aaa"" is the only unexpired one at time 6, so return 1.

authenticationManager.generate(""bbb"", 7); // Generates a new token with tokenId ""bbb"" at time 7.

authenticationManager.`renew`(""aaa"", 8); // The token with tokenId ""aaa"" expired at time 7, and 8 >= 7, so at time 8 the `renew` request is ignored, and nothing happens.

authenticationManager.`renew`(""bbb"", 10); // The token with tokenId ""bbb"" is unexpired at time 10, so the `renew` request is fulfilled and now the token will expire at time 15.

authenticationManager.`countUnexpiredTokens`(15); // The token with tokenId ""bbb"" expires at time 15, and the token with tokenId ""aaa"" expired at time 7, so currently no token is unexpired, so return 0.


Constraints:
`1 <= timeToLive <= 108`
`1 <= currentTime <= 108`
`1 <= tokenId.length <= 5`
`tokenId` consists only of lowercase letters.

All calls to `generate` will contain unique values of `tokenId`.

The values of `currentTime` across all the function calls will be strictly increasing.

At most `2000` calls will be made to all functions combined.",Medium,https://leetcode.com/problems/design-authentication-manager,Twitter,"Hash Table,Design",72,,"there is an authentication system that works with authentication tokens. for each session, the user will receive a new authentication token that will expire `timetolive` seconds after the `currenttime`. if the token is renewed, the expiry time will be extended to expire `timetolive` seconds after the (potentially different) `currenttime`. implement the `authenticationmanager` class: `authenticationmanager(int timetolive)` constructs the `authenticationmanager` and sets the `timetolive`. `generate(string tokenid, int currenttime)` generates a new token with the given `tokenid` at the given `currenttime` in seconds. `renew(string tokenid, int currenttime)` renews the unexpired token with the given `tokenid` at the given `currenttime` in seconds. if there are no unexpired tokens with the given `tokenid`, the request is ignored, and nothing happens. `countunexpiredtokens(int currenttime)` returns the number of unexpired tokens at the given currenttime. note that if a token expires at time `t`, and another action happens on time `t` (`renew` or `countunexpiredtokens`), the expiration takes place before the other actions.","input [""authenticationmanager"", ""`renew`"", ""generate"", ""`countunexpiredtokens`"", ""generate"", ""`renew`"", ""`renew`"", ""`countunexpiredtokens`""] [[5], [""aaa"", 1], [""aaa"", 2], [6], [""bbb"", 7], [""aaa"", 8], [""bbb"", 10], [15]] output [null, null, null, 1, null, null, null, 0] explanation authenticationmanager authenticationmanager = new authenticationmanager(5); // constructs the authenticationmanager with `timetolive` = 5 seconds. authenticationmanager.`renew`(""aaa"", 1); // no token exists with tokenid ""aaa"" at time 1, so nothing happens. authenticationmanager.generate(""aaa"", 2); // generates a new token with tokenid ""aaa"" at time 2. authenticationmanager.`countunexpiredtokens`(6); // the token with tokenid ""aaa"" is the only unexpired one at time 6, so return 1. authenticationmanager.generate(""bbb"", 7); // generates a new token with tokenid ""bbb"" at time 7. authenticationmanager.`renew`(""aaa"", 8); // the token with tokenid ""aaa"" expired at time 7, and 8 >= 7, so at time 8 the `renew` request is ignored, and nothing happens. authenticationmanager.`renew`(""bbb"", 10); // the token with tokenid ""bbb"" is unexpired at time 10, so the `renew` request is fulfilled and now the token will expire at time 15. authenticationmanager.`countunexpiredtokens`(15); // the token with tokenid ""bbb"" expires at time 15, and the token with tokenid ""aaa"" expired at time 7, so currently no token is unexpired, so return 0.",`1 <= timetolive <= 10^8` `1 <= currenttime <= 10^8` `1 <= tokenid.length <= 5` `tokenid` consists only of lowercase letters. all calls to `generate` will contain unique values of `tokenid`. the values of `currenttime` across all the function calls will be strictly increasing. at most `2000` calls will be made to all functions combined.,
1798,Maximum Number of Consecutive Values You Can Make,"You are given an integer array `coins` of length `n` which represents the `n` coins that you own. The value of the `ith` coin is `coins[i]`. You can make some value `x` if you can choose some of your `n` coins such that their values sum up to `x`.

Return the maximum number of consecutive integer values that you can make with your coins starting from and including `0`.

Note that you may have multiple coins of the same value.


Example 1:
Input: coins = [1,3]
Output: 2
Explanation: You can make the following values:
- 0: take []
- 1: take [1]
You can make 2 consecutive integer values starting from 0.


Example 2:
Input: coins = [1,1,1,4]
Output: 8
Explanation: You can make the following values:
- 0: take []
- 1: take [1]
- 2: take [1,1]
- 3: take [1,1,1]
- 4: take [4]
- 5: take [4,1]
- 6: take [4,1,1]
- 7: take [4,1,1,1]
You can make 8 consecutive integer values starting from 0.


Example 3:
Input: nums = [1,4,10,3,1]
Output: 20

Constraints:
`coins.length == n`
`1 <= n <= 4 * 104`
`1 <= coins[i] <= 4 * 104`",Medium,https://leetcode.com/problems/maximum-number-of-consecutive-values-you-can-make,Infosys,Greedy,223,"[Patching Array, /problems/patching-array/, Hard]",you are given an integer array `coins` of length `n` which represents the `n` coins that you own. the value of the `ith` coin is `coins[i]`. you can make some value `x` if you can choose some of your `n` coins such that their values sum up to `x`. return the maximum number of consecutive integer values that you can make with your coins starting from and including `0`. note that you may have multiple coins of the same value.,"input: coins = [1,3] output: 2 explanation: you can make the following values: - 0: take [] - 1: take [1] you can make 2 consecutive integer values starting from 0. example 2: input: coins = [1,1,1,4] output: 8 explanation: you can make the following values: - 0: take [] - 1: take [1] - 2: take [1,1] - 3: take [1,1,1] - 4: take [4] - 5: take [4,1] - 6: take [4,1,1] - 7: take [4,1,1,1] you can make 8 consecutive integer values starting from 0. example 3: input: nums = [1,4,10,3,1] output: 20",`coins.length == n` `1 <= n <= 4 * 10^4` `1 <= coins[i] <= 4 * 10^4`,
1799,Maximize Score After N Operations,"You are given `nums`, an array of positive integers of size `2 * n`. You must perform `n` operations on this array.

In the `ith` operation (1-indexed), you will:
Choose two elements, `x` and `y`.

Receive a score of `i * gcd(x, y)`.

Remove `x` and `y` from `nums`.

Return the maximum score you can receive after performing `n` operations.

The function `gcd(x, y)` is the greatest common divisor of `x` and `y`.


Example 1:
Input: nums = [1,2]
Output: 1
Explanation: The optimal choice of operations is:
(1 * gcd(1, 2)) = 1

Example 2:
Input: nums = [3,4,6,8]
Output: 11
Explanation: The optimal choice of operations is:
(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11

Example 3:
Input: nums = [1,2,3,4,5,6]
Output: 14
Explanation: The optimal choice of operations is:
(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14

Constraints:
`1 <= n <= 7`
`nums.length == 2 * n`
`1 <= nums[i] <= 106`",Hard,https://leetcode.com/problems/maximize-score-after-n-operations,Amazon,"Dynamic Programming,Backtracking,Recursion",127,,"you are given `nums`, an array of positive integers of size `2 * n`. you must perform `n` operations on this array. in the `ith` operation (1-indexed), you will: choose two elements, `x` and `y`. receive a score of `i * gcd(x, y)`. remove `x` and `y` from `nums`. return the maximum score you can receive after performing `n` operations. the function `gcd(x, y)` is the greatest common divisor of `x` and `y`.","input: nums = [1,2] output: 1 explanation: the optimal choice of operations is: (1 * gcd(1, 2)) = 1 example 2: input: nums = [3,4,6,8] output: 11 explanation: the optimal choice of operations is: (1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11 example 3: input: nums = [1,2,3,4,5,6] output: 14 explanation: the optimal choice of operations is: (1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14",`1 <= n <= 7` `nums.length == 2 * n` `1 <= nums[i] <= 10^6`,
1800,Maximum Ascending Subarray Sum,"Given an array of positive integers `nums`, return the maximum possible sum of an ascending subarray in `nums`.

A subarray is defined as a contiguous sequence of numbers in an array.

A subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is ascending if for all `i` where `l <= i < r`, `numsi  < numsi+1`. Note that a subarray of size `1` is ascending.


Example 1:
Input: nums = [10,20,30,5,10,50]
Output: 65
Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65.


Example 2:
Input: nums = [10,20,30,40,50]
Output: 150
Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.


Example 3:
Input: nums = [12,17,15,13,10,11,12]
Output: 33
Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33.


Example 4:
Input: nums = [100,10,1]
Output: 100

Constraints:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",Easy,https://leetcode.com/problems/maximum-ascending-subarray-sum,tcs,Two Pointers,109,,"given an array of positive integers `nums`, return the maximum possible sum of an ascending subarray in `nums`. a subarray is defined as a contiguous sequence of numbers in an array. a subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is ascending if for all `i` where `l <= i < r`, `numsi < numsi+1`. note that a subarray of size `1` is ascending.","input: nums = [10,20,30,5,10,50] output: 65 explanation: [5,10,50] is the ascending subarray with the maximum sum of 65. example 2: input: nums = [10,20,30,40,50] output: 150 explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150. example 3: input: nums = [12,17,15,13,10,11,12] output: 33 explanation: [10,11,12] is the ascending subarray with the maximum sum of 33. example 4: input: nums = [100,10,1] output: 100",`1 <= nums.length <= 10^0` `1 <= nums[i] <= 10^0`,
1801,Number of Orders in the Backlog,"You are given a 2D integer array `orders`, where each `orders[i] = [pricei, amounti, orderTypei]` denotes that `amounti` orders have been placed of type `orderTypei` at the price `pricei`. The `orderTypei` is:
`0` if it is a batch of `buy` orders, or
`1` if it is a batch of `sell` orders.

Note that `orders[i]` represents a batch of `amounti` independent orders with the same price and order type. All orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]` for all valid `i`.

There is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:
If the order is a `buy` order, you look at the `sell` order with the smallest price in the backlog. If that `sell` order's price is smaller than or equal to the current `buy` order's price, they will match and be executed, and that `sell` order will be removed from the backlog. Else, the `buy` order is added to the backlog.

Vice versa, if the order is a `sell` order, you look at the `buy` order with the largest price in the backlog. If that `buy` order's price is larger than or equal to the current `sell` order's price, they will match and be executed, and that `buy` order will be removed from the backlog. Else, the `sell` order is added to the backlog.

Return the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo `109 + 7`.


Example 1:
Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
Output: 6
Explanation: Here is what happens with the orders:
- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.

- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.

- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.

- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.

Finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.


Example 2:
Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
Output: 999999984
Explanation: Here is what happens with the orders:
- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.

- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.

- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.

- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.

Finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).


Constraints:
`1 <= orders.length <= 105`
`orders[i].length == 3`
`1 <= pricei, amounti <= 109`
`orderTypei` is either `0` or `1`.",Medium,https://leetcode.com/problems/number-of-orders-in-the-backlog,Robinhood,"Heap,Greedy",85,,"you are given a 2d integer array `orders`, where each `orders[i] = [pricei, amounti, ordertypei]` denotes that `amounti` orders have been placed of type `ordertypei` at the price `pricei`. the `ordertypei` is: `0` if it is a batch of `buy` orders, or `1` if it is a batch of `sell` orders. note that `orders[i]` represents a batch of `amounti` independent orders with the same price and order type. all orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]` for all valid `i`. there is a backlog that consists of orders that have not been executed. the backlog is initially empty. when an order is placed, the following happens: if the order is a `buy` order, you look at the `sell` order with the smallest price in the backlog. if that `sell` order's price is smaller than or equal to the current `buy` order's price, they will match and be executed, and that `sell` order will be removed from the backlog. else, the `buy` order is added to the backlog. vice versa, if the order is a `sell` order, you look at the `buy` order with the largest price in the backlog. if that `buy` order's price is larger than or equal to the current `sell` order's price, they will match and be executed, and that `buy` order will be removed from the backlog. else, the `sell` order is added to the backlog. return the total amount of orders in the backlog after placing all the orders from the input. since this number can be large, return it modulo `109 + 7`.","input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]] output: 6 explanation: here is what happens with the orders: - 5 orders of type buy with price 10 are placed. there are no sell orders, so the 5 orders are added to the backlog. - 2 orders of type sell with price 15 are placed. there are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog. - 1 order of type sell with price 25 is placed. there are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog. - 4 orders of type buy with price 30 are placed. the first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. the 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. then, there are no more sell orders in the backlog, so the 4th order is added to the backlog. finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. so the total number of orders in the backlog is 6. example 2: input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]] output: 999999984 explanation: here is what happens with the orders: - 109 orders of type sell with price 7 are placed. there are no buy orders, so the 109 orders are added to the backlog. - 3 orders of type buy with price 15 are placed. they are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog. - 999999995 orders of type buy with price 5 are placed. the least price of a sell order is 7, so the 999999995 orders are added to the backlog. - 1 order of type sell with price 5 is placed. it is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog. finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. so the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).","`1 <= orders.length <= 10^5` `orders[i].length == 3` `1 <= pricei, amounti <= 10^9` `ordertypei` is either `0` or `1`.",
1802,Maximum Value at a Given Index in a Bounded Array,"You are given three positive integers: `n`, `index`, and `maxSum`. You want to construct an array `nums` (0-indexed) that satisfies the following conditions:
`nums.length == n`
`nums[i]` is a positive integer where `0 <= i < n`.

`abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`.

The sum of all the elements of `nums` does not exceed `maxSum`.

`nums[index]` is maximized.

Return `nums[index]` of the constructed array.

Note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.


Example 1:
Input: n = 4, index = 2,  maxSum = 6
Output: 2
Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions.

There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].


Example 2:
Input: n = 6, index = 1,  maxSum = 10
Output: 3

Constraints:
`1 <= n <= maxSum <= 109`
`0 <= index < n`",Medium,https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array,Microsoft,"Binary Search,Greedy",203,,"you are given three positive integers: `n`, `index`, and `maxsum`. you want to construct an array `nums` (0-indexed) that satisfies the following conditions: `nums.length == n` `nums[i]` is a positive integer where `0 <= i < n`. `abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`. the sum of all the elements of `nums` does not exceed `maxsum`. `nums[index]` is maximized. return `nums[index]` of the constructed array. note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.","input: n = 4, index = 2, maxsum = 6 output: 2 explanation: nums = [1,2,2,1] is one array that satisfies all the conditions. there are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2]. example 2: input: n = 6, index = 1, maxsum = 10 output: 3",`1 <= n <= maxsum <= 10^9` `0 <= index < n`,
1803,Count Pairs With XOR in a Range,"Given a (0-indexed) integer array `nums` and two integers `low` and `high`, return the number of nice pairs.

A nice pair is a pair `(i, j)` where `0 <= i < j < nums.length` and `low <= (nums[i] XOR nums[j]) <= high`.


Example 1:
Input: nums = [1,4,2,7], low = 2, high = 6
Output: 6
Explanation: All nice pairs (i, j) are as follows:
    - (0, 1): nums[0] XOR nums[1] = 5 
    - (0, 2): nums[0] XOR nums[2] = 3
    - (0, 3): nums[0] XOR nums[3] = 6
    - (1, 2): nums[1] XOR nums[2] = 6
    - (1, 3): nums[1] XOR nums[3] = 3
    - (2, 3): nums[2] XOR nums[3] = 5

Example 2:
Input: nums = [9,8,4,2,1], low = 5, high = 14
Output: 8
Explanation: All nice pairs (i, j) are as follows:
​​​​​    - (0, 2): nums[0] XOR nums[2] = 13
    - (0, 3): nums[0] XOR nums[3] = 11
    - (0, 4): nums[0] XOR nums[4] = 8
    - (1, 2): nums[1] XOR nums[2] = 12
    - (1, 3): nums[1] XOR nums[3] = 10
    - (1, 4): nums[1] XOR nums[4] = 9
    - (2, 3): nums[2] XOR nums[3] = 6
    - (2, 4): nums[2] XOR nums[4] = 5

Constraints:
`1 <= nums.length <= 2 * 104`
`1 <= nums[i] <= 2 * 104`
`1 <= low <= high <= 2 * 104`",Hard,https://leetcode.com/problems/count-pairs-with-xor-in-a-range,Vimeo,Trie,122,,"given a (0-indexed) integer array `nums` and two integers `low` and `high`, return the number of nice pairs. a nice pair is a pair `(i, j)` where `0 <= i < j < nums.length` and `low <= (nums[i] xor nums[j]) <= high`.","input: nums = [1,4,2,7], low = 2, high = 6 output: 6 explanation: all nice pairs (i, j) are as follows: - (0, 1): nums[0] xor nums[1] = 5 - (0, 2): nums[0] xor nums[2] = 3 - (0, 3): nums[0] xor nums[3] = 6 - (1, 2): nums[1] xor nums[2] = 6 - (1, 3): nums[1] xor nums[3] = 3 - (2, 3): nums[2] xor nums[3] = 5 example 2: input: nums = [9,8,4,2,1], low = 5, high = 14 output: 8 explanation: all nice pairs (i, j) are as follows: ​​​​​ - (0, 2): nums[0] xor nums[2] = 13 - (0, 3): nums[0] xor nums[3] = 11 - (0, 4): nums[0] xor nums[4] = 8 - (1, 2): nums[1] xor nums[2] = 12 - (1, 3): nums[1] xor nums[3] = 10 - (1, 4): nums[1] xor nums[4] = 9 - (2, 3): nums[2] xor nums[3] = 6 - (2, 4): nums[2] xor nums[4] = 5",`1 <= nums.length <= 2 * 10^4` `1 <= nums[i] <= 2 * 10^4` `1 <= low <= high <= 2 * 10^4`,
1804,Implement Trie II (Prefix Tree),"A trie (pronounced as ""try"") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.

Implement the Trie class:
`Trie()` Initializes the trie object.

`void insert(String word)` Inserts the string `word` into the trie.

`int countWordsEqualTo(String word)` Returns the number of instances of the string `word` in the trie.

`int countWordsStartingWith(String prefix)` Returns the number of strings in the trie that have the string `prefix` as a prefix.

`void erase(String word)` Erases the string `word` from the trie.


Example 1:
Input
[""Trie"", ""insert"", ""insert"", ""countWordsEqualTo"", ""countWordsStartingWith"", ""erase"", ""countWordsEqualTo"", ""countWordsStartingWith"", ""erase"", ""countWordsStartingWith""]
[[], [""apple""], [""apple""], [""apple""], [""app""], [""apple""], [""apple""], [""app""], [""apple""], [""app""]]
Output
[null, null, null, 2, 2, null, 1, 1, null, 0]
Explanation
Trie trie = new Trie();
trie.insert(""apple"");               // Inserts ""apple"".

trie.insert(""apple"");               // Inserts another ""apple"".

trie.countWordsEqualTo(""apple"");    // There are two instances of ""apple"" so return 2.

trie.countWordsStartingWith(""app""); // ""app"" is a prefix of ""apple"" so return 2.

trie.erase(""apple"");                // Erases one ""apple"".

trie.countWordsEqualTo(""apple"");    // Now there is only one instance of ""apple"" so return 1.

trie.countWordsStartingWith(""app""); // return 1
trie.erase(""apple"");                // Erases ""apple"". Now the trie is empty.

trie.countWordsStartingWith(""app""); // return 0

Constraints:
`1 <= word.length, prefix.length <= 2000`
`word` and `prefix` consist only of lowercase English letters.

At most `3 * 104` calls in total will be made to `insert`, `countWordsEqualTo`, `countWordsStartingWith`, and `erase`.

It is guaranteed that for any function call to `erase`, the string `word` will exist in the trie.",Medium,https://leetcode.com/problems/implement-trie-ii-prefix-tree,,,37,,"a trie (pronounced as ""try"") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. there are various applications of this data structure, such as autocomplete and spellchecker. implement the trie class: `trie()` initializes the trie object. `void insert(string word)` inserts the string `word` into the trie. `int countwordsequalto(string word)` returns the number of instances of the string `word` in the trie. `int countwordsstartingwith(string prefix)` returns the number of strings in the trie that have the string `prefix` as a prefix. `void erase(string word)` erases the string `word` from the trie.","input [""trie"", ""insert"", ""insert"", ""countwordsequalto"", ""countwordsstartingwith"", ""erase"", ""countwordsequalto"", ""countwordsstartingwith"", ""erase"", ""countwordsstartingwith""] [[], [""apple""], [""apple""], [""apple""], [""app""], [""apple""], [""apple""], [""app""], [""apple""], [""app""]] output [null, null, null, 2, 2, null, 1, 1, null, 0] explanation trie trie = new trie(); trie.insert(""apple""); // inserts ""apple"". trie.insert(""apple""); // inserts another ""apple"". trie.countwordsequalto(""apple""); // there are two instances of ""apple"" so return 2. trie.countwordsstartingwith(""app""); // ""app"" is a prefix of ""apple"" so return 2. trie.erase(""apple""); // erases one ""apple"". trie.countwordsequalto(""apple""); // now there is only one instance of ""apple"" so return 1. trie.countwordsstartingwith(""app""); // return 1 trie.erase(""apple""); // erases ""apple"". now the trie is empty. trie.countwordsstartingwith(""app""); // return 0","`1 <= word.length, prefix.length <= 2000` `word` and `prefix` consist only of lowercase english letters. at most `3 * 10^4` calls in total will be made to `insert`, `countwordsequalto`, `countwordsstartingwith`, and `erase`. it is guaranteed that for any function call to `erase`, the string `word` will exist in the trie.",
1805,Number of Different Integers in a String,"You are given a string `word` that consists of digits and lowercase English letters.

You will replace every non-digit character with a space. For example, `""a123bc34d8ef34""` will become `"" 123  34 8  34""`. Notice that you are left with some integers that are separated by at least one space: `""123""`, `""34""`, `""8""`, and `""34""`.

Return the number of different integers after performing the replacement operations on `word`.

Two integers are considered different if their decimal representations without any leading zeros are different.


Example 1:
Input: word = ""a123bc34d8ef34""
Output: 3
Explanation: The three different integers are ""123"", ""34"", and ""8"". Notice that ""34"" is only counted once.


Example 2:
Input: word = ""leet1234code234""
Output: 2

Example 3:
Input: word = ""a1b01c001""
Output: 1
Explanation: The three integers ""1"", ""01"", and ""001"" all represent the same integer because
the leading zeros are ignored when comparing their decimal values.


Constraints:
`1 <= word.length <= 1000`
`word` consists of digits and lowercase English letters.",Easy,https://leetcode.com/problems/number-of-different-integers-in-a-string,,,106,,"you are given a string `word` that consists of digits and lowercase english letters. you will replace every non-digit character with a space. for example, `""a123bc34d8ef34""` will become `"" 123 34 8 34""`. notice that you are left with some integers that are separated by at least one space: `""123""`, `""34""`, `""8""`, and `""34""`. return the number of different integers after performing the replacement operations on `word`. two integers are considered different if their decimal representations without any leading zeros are different.","input: word = ""a123bc34d8ef34"" output: 3 explanation: the three different integers are ""123"", ""34"", and ""8"". notice that ""34"" is only counted once. example 2: input: word = ""leet1234code234"" output: 2 example 3: input: word = ""a1b01c001"" output: 1 explanation: the three integers ""1"", ""01"", and ""001"" all represent the same integer because the leading zeros are ignored when comparing their decimal values.",`1 <= word.length <= 1000` `word` consists of digits and lowercase english letters.,
1806,Minimum Number of Operations to Reinitialize a Permutation,"You are given an even integer `n`​​​​​​. You initially have a permutation `perm` of size `n`​​ where `perm[i] == i`​ (0-indexed)​​​​.

In one operation, you will create a new array `arr`, and for each `i`:
If `i % 2 == 0`, then `arr[i] = perm[i / 2]`.

If `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`.

You will then assign `arr`​​​​ to `perm`.

Return the minimum non-zero number of operations you need to perform on `perm` to return the permutation to its initial value.


Example 1:
Input: n = 2
Output: 1
Explanation: perm = [0,1] initially.

After the 1st operation, perm = [0,1]
So it takes only 1 operation.


Example 2:
Input: n = 4
Output: 2
Explanation: perm = [0,1,2,3] initially.

After the 1st operation, perm = [0,2,1,3]
After the 2nd operation, perm = [0,1,2,3]
So it takes only 2 operations.


Example 3:
Input: n = 6
Output: 4

Constraints:
`2 <= n <= 1000`
`n`​​​​​​ is even.",Medium,https://leetcode.com/problems/minimum-number-of-operations-to-reinitialize-a-permutation,Google,"Array,Greedy",83,,"you are given an even integer `n`​​​​​​. you initially have a permutation `perm` of size `n`​​ where `perm[i] == i`​ (0-indexed)​​​​. in one operation, you will create a new array `arr`, and for each `i`: if `i % 2 == 0`, then `arr[i] = perm[i / 2]`. if `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`. you will then assign `arr`​​​​ to `perm`. return the minimum non-zero number of operations you need to perform on `perm` to return the permutation to its initial value.","input: n = 2 output: 1 explanation: perm = [0,1] initially. after the 1st operation, perm = [0,1] so it takes only 1 operation. example 2: input: n = 4 output: 2 explanation: perm = [0,1,2,3] initially. after the 1st operation, perm = [0,2,1,3] after the 2nd operation, perm = [0,1,2,3] so it takes only 2 operations. example 3: input: n = 6 output: 4",`2 <= n <= 1000` `n`​​​​​​ is even.,
1807,Evaluate the Bracket Pairs of a String,"You are given a string `s` that contains some bracket pairs, with each pair containing a non-empty key.

For example, in the string `""(name)is(age)yearsold""`, there are two bracket pairs that contain the keys `""name""` and `""age""`.

You know the values of a wide range of keys. This is represented by a 2D string array `knowledge` where each `knowledge[i] = [keyi, valuei]` indicates that key `keyi` has a value of `valuei`.

You are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key `keyi`, you will:
Replace `keyi` and the bracket pair with the key's corresponding `valuei`.

If you do not know the value of the key, you will replace `keyi` and the bracket pair with a question mark `""?""` (without the quotation marks).

Each key will appear at most once in your `knowledge`. There will not be any nested brackets in `s`.

Return the resulting string after evaluating all of the bracket pairs.


Example 1:
Input: s = ""(name)is(age)yearsold"", knowledge = [[""name"",""bob""],[""age"",""two""]]
Output: ""bobistwoyearsold""
Explanation:
The key ""name"" has a value of ""bob"", so replace ""(name)"" with ""bob"".

The key ""age"" has a value of ""two"", so replace ""(age)"" with ""two"".


Example 2:
Input: s = ""hi(name)"", knowledge = [[""a"",""b""]]
Output: ""hi?""
Explanation: As you do not know the value of the key ""name"", replace ""(name)"" with ""?"".


Example 3:
Input: s = ""(a)(a)(a)aaa"", knowledge = [[""a"",""yes""]]
Output: ""yesyesyesaaa""
Explanation: The same key can appear multiple times.

The key ""a"" has a value of ""yes"", so replace all occurrences of ""(a)"" with ""yes"".

Notice that the ""a""s not in a bracket pair are not evaluated.


Example 4:
Input: s = ""(a)(b)"", knowledge = [[""a"",""b""],[""b"",""a""]]
Output: ""ba""

Constraints:
`1 <= s.length <= 105`
`0 <= knowledge.length <= 105`
`knowledge[i].length == 2`
`1 <= keyi.length, valuei.length <= 10`
`s` consists of lowercase English letters and round brackets `'('` and `')'`.

Every open bracket `'('` in `s` will have a corresponding close bracket `')'`.

The key in each bracket pair of `s` will be non-empty.

There will not be any nested bracket pairs in `s`.

`keyi` and `valuei` consist of lowercase English letters.

Each `keyi` in `knowledge` is unique.",Medium,https://leetcode.com/problems/evaluate-the-bracket-pairs-of-a-string,Google,"Hash Table,String",94,,"you are given a string `s` that contains some bracket pairs, with each pair containing a non-empty key. for example, in the string `""(name)is(age)yearsold""`, there are two bracket pairs that contain the keys `""name""` and `""age""`. you know the values of a wide range of keys. this is represented by a 2d string array `knowledge` where each `knowledge[i] = [keyi, valuei]` indicates that key `keyi` has a value of `valuei`. you are tasked to evaluate all of the bracket pairs. when you evaluate a bracket pair that contains some key `keyi`, you will: replace `keyi` and the bracket pair with the key's corresponding `valuei`. if you do not know the value of the key, you will replace `keyi` and the bracket pair with a question mark `""?""` (without the quotation marks). each key will appear at most once in your `knowledge`. there will not be any nested brackets in `s`. return the resulting string after evaluating all of the bracket pairs.","input: s = ""(name)is(age)yearsold"", knowledge = [[""name"",""bob""],[""age"",""two""]] output: ""bobistwoyearsold"" explanation: the key ""name"" has a value of ""bob"", so replace ""(name)"" with ""bob"". the key ""age"" has a value of ""two"", so replace ""(age)"" with ""two"". example 2: input: s = ""hi(name)"", knowledge = [[""a"",""b""]] output: ""hi?"" explanation: as you do not know the value of the key ""name"", replace ""(name)"" with ""?"". example 3: input: s = ""(a)(a)(a)aaa"", knowledge = [[""a"",""yes""]] output: ""yesyesyesaaa"" explanation: the same key can appear multiple times. the key ""a"" has a value of ""yes"", so replace all occurrences of ""(a)"" with ""yes"". notice that the ""a""s not in a bracket pair are not evaluated. example 4: input: s = ""(a)(b)"", knowledge = [[""a"",""b""],[""b"",""a""]] output: ""ba""","`1 <= s.length <= 10^5` `0 <= knowledge.length <= 10^5` `knowledge[i].length == 2` `1 <= keyi.length, valuei.length <= 10` `s` consists of lowercase english letters and round brackets `'('` and `')'`. every open bracket `'('` in `s` will have a corresponding close bracket `')'`. the key in each bracket pair of `s` will be non-empty. there will not be any nested bracket pairs in `s`. `keyi` and `valuei` consist of lowercase english letters. each `keyi` in `knowledge` is unique.",
1808,Maximize Number of Nice Divisors,"You are given a positive integer `primeFactors`. You are asked to construct a positive integer `n` that satisfies the following conditions:
The number of prime factors of `n` (not necessarily distinct) is at most `primeFactors`.

The number of nice divisors of `n` is maximized. Note that a divisor of `n` is nice if it is divisible by every prime factor of `n`. For example, if `n = 12`, then its prime factors are `[2,2,3]`, then `6` and `12` are nice divisors, while `3` and `4` are not.

Return the number of nice divisors of `n`. Since that number can be too large, return it modulo `109 + 7`.

Note that a prime number is a natural number greater than `1` that is not a product of two smaller natural numbers. The prime factors of a number `n` is a list of prime numbers such that their product equals `n`.


Example 1:
Input: primeFactors = 5
Output: 6
Explanation: 200 is a valid value of n.

It has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].

There is not other value of n that has at most 5 prime factors and more nice divisors.


Example 2:
Input: primeFactors = 8
Output: 18

Constraints:
`1 <= primeFactors <= 109`",Hard,https://leetcode.com/problems/maximize-number-of-nice-divisors,Microsoft,Math,95,"[Integer Break, /problems/integer-break/, Medium]","you are given a positive integer `primefactors`. you are asked to construct a positive integer `n` that satisfies the following conditions: the number of prime factors of `n` (not necessarily distinct) is at most `primefactors`. the number of nice divisors of `n` is maximized. note that a divisor of `n` is nice if it is divisible by every prime factor of `n`. for example, if `n = 12`, then its prime factors are `[2,2,3]`, then `6` and `12` are nice divisors, while `3` and `4` are not. return the number of nice divisors of `n`. since that number can be too large, return it modulo `109 + 7`. note that a prime number is a natural number greater than `1` that is not a product of two smaller natural numbers. the prime factors of a number `n` is a list of prime numbers such that their product equals `n`.","input: primefactors = 5 output: 6 explanation: 200 is a valid value of n. it has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200]. there is not other value of n that has at most 5 prime factors and more nice divisors. example 2: input: primefactors = 8 output: 18",`1 <= primefactors <= 10^9`,
1809,Ad-Free Sessions,SQL Schema,Easy,https://leetcode.com/problems/ad-free-sessions,Amazon,,11,,sql schema,,,
1810,Minimum Path Cost in a Hidden Grid,"This is an interactive problem.

There is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is guaranteed that the starting cell and the target cell are different, and neither of them is blocked.

Each cell has a cost that you need to pay each time you move to the cell. The starting cell's cost is not applied before the robot moves.

You want to find the minimum total cost to move the robot to the target cell. However, you do not know the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.

The `GridMaster` class has the following functions:
`boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.

`int move(char direction)` Moves the robot in that direction and returns the cost of moving to that cell. If this move would move the robot to a blocked cell or off the grid, the move will be ignored, the robot will remain in the same position, and the function will return `-1`.

`boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.

Note that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.

Return the minimum total cost to get the robot from its initial starting cell to the target cell. If there is no valid path between the cells, return `-1`.

Custom testing:
The test input is read as a 2D matrix `grid` of size `m x n` and four integers `r1`, `c1`, `r2`, and `c2` where:
`grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.

`grid[i][j] >= 1` indicates that the cell `(i, j)` is empty and `grid[i][j]` is the cost to move to that cell.

`(r1, c1)` is the starting cell of the robot.

`(r2, c2)` is the target cell of the robot.

Remember that you will not have this information in your code.


Example 1:
Input: grid = [[2,3],[1,1]], r1 = 0, c1 = 1, r2 = 1, c2 = 0
Output: 2
Explanation: One possible interaction is described below:
The robot is initially standing on cell (0, 1), denoted by the 3.

- master.canMove('U') returns false.

- master.canMove('D') returns true.

- master.canMove('L') returns true.

- master.canMove('R') returns false.

- master.move('L') moves the robot to the cell (0, 0) and returns 2.

- master.isTarget() returns false.

- master.canMove('U') returns false.

- master.canMove('D') returns true.

- master.canMove('L') returns false.

- master.canMove('R') returns true.

- master.move('D') moves the robot to the cell (1, 0) and returns 1.

- master.isTarget() returns true.

- master.move('L') doesn't move the robot and returns -1.

- master.move('R') moves the robot to the cell (1, 1) and returns 1.

We now know that the target is the cell (0, 1), and the minimum total cost to reach it is 2. 

Example 2:
Input: grid = [[0,3,1],[3,4,2],[1,2,0]], r1 = 2, c1 = 0, r2 = 0, c2 = 2
Output: 9
Explanation: The minimum cost path is (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2).


Example 3:
Input: grid = [[1,0],[0,1]], r1 = 0, c1 = 0, r2 = 1, c2 = 1
Output: -1
Explanation: There is no path from the robot to the target cell.


Constraints:
`1 <= n, m <= 100`
`m == grid.length`
`n == grid[i].length`
`0 <= grid[i][j] <= 100`",Medium,https://leetcode.com/problems/minimum-path-cost-in-a-hidden-grid,"Google,Facebook","Heap,Depth-first Search,Graph",10,"[Robot Room Cleaner, /problems/robot-room-cleaner/, Hard], [Shortest Path in a Hidden Grid, /problems/shortest-path-in-a-hidden-grid/, Medium]","this is an interactive problem. there is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. the grid is of size `m x n`, and each cell in the grid is either empty or blocked. it is guaranteed that the starting cell and the target cell are different, and neither of them is blocked. each cell has a cost that you need to pay each time you move to the cell. the starting cell's cost is not applied before the robot moves. you want to find the minimum total cost to move the robot to the target cell. however, you do not know the grid's dimensions, the starting cell, nor the target cell. you are only allowed to ask queries to the `gridmaster` object. the `gridmaster` class has the following functions: `boolean canmove(char direction)` returns `true` if the robot can move in that direction. otherwise, it returns `false`. `int move(char direction)` moves the robot in that direction and returns the cost of moving to that cell. if this move would move the robot to a blocked cell or off the grid, the move will be ignored, the robot will remain in the same position, and the function will return `-1`. `boolean istarget()` returns `true` if the robot is currently on the target cell. otherwise, it returns `false`. note that `direction` in the above functions should be a character from `{'u','d','l','r'}`, representing the directions up, down, left, and right, respectively. return the minimum total cost to get the robot from its initial starting cell to the target cell. if there is no valid path between the cells, return `-1`. custom testing: the test input is read as a 2d matrix `grid` of size `m x n` and four integers `r1`, `c1`, `r2`, and `c2` where: `grid[i][j] == 0` indicates that the cell `(i, j)` is blocked. `grid[i][j] >= 1` indicates that the cell `(i, j)` is empty and `grid[i][j]` is the cost to move to that cell. `(r1, c1)` is the starting cell of the robot. `(r2, c2)` is the target cell of the robot. remember that you will not have this information in your code.","input: grid = [[2,3],[1,1]], r1 = 0, c1 = 1, r2 = 1, c2 = 0 output: 2 explanation: one possible interaction is described below: the robot is initially standing on cell (0, 1), denoted by the 3. - master.canmove('u') returns false. - master.canmove('d') returns true. - master.canmove('l') returns true. - master.canmove('r') returns false. - master.move('l') moves the robot to the cell (0, 0) and returns 2. - master.istarget() returns false. - master.canmove('u') returns false. - master.canmove('d') returns true. - master.canmove('l') returns false. - master.canmove('r') returns true. - master.move('d') moves the robot to the cell (1, 0) and returns 1. - master.istarget() returns true. - master.move('l') doesn't move the robot and returns -1. - master.move('r') moves the robot to the cell (1, 1) and returns 1. we now know that the target is the cell (0, 1), and the minimum total cost to reach it is 2. example 2: input: grid = [[0,3,1],[3,4,2],[1,2,0]], r1 = 2, c1 = 0, r2 = 0, c2 = 2 output: 9 explanation: the minimum cost path is (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2). example 3: input: grid = [[1,0],[0,1]], r1 = 0, c1 = 0, r2 = 1, c2 = 1 output: -1 explanation: there is no path from the robot to the target cell.","`1 <= n, m <= 10^0` `m == grid.length` `n == grid[i].length` `0 <= grid[i][j] <= 10^0`",
1811,Find Interview Candidates,SQL Schema,Medium,https://leetcode.com/problems/find-interview-candidates,Amazon,,16,,sql schema,,,
1812,Determine Color of a Chessboard Square,"You are given `coordinates`, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.

Return `true` if the square is white, and `false` if the square is black.

The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.


Example 1:
Input: coordinates = ""a1""
Output: false
Explanation: From the chessboard above, the square with coordinates ""a1"" is black, so return false.


Example 2:
Input: coordinates = ""h3""
Output: true
Explanation: From the chessboard above, the square with coordinates ""h3"" is white, so return true.


Example 3:
Input: coordinates = ""c7""
Output: false

Constraints:
`coordinates.length == 2`
`'a' <= coordinates[0] <= 'h'`
`'1' <= coordinates[1] <= '8'`",Easy,https://leetcode.com/problems/determine-color-of-a-chessboard-square,JPMorgan,String,67,,"you are given `coordinates`, a string that represents the coordinates of a square of the chessboard. below is a chessboard for your reference. return `true` if the square is white, and `false` if the square is black. the coordinate will always represent a valid chessboard square. the coordinate will always have the letter first, and the number second.","input: coordinates = ""a1"" output: false explanation: from the chessboard above, the square with coordinates ""a1"" is black, so return false. example 2: input: coordinates = ""h3"" output: true explanation: from the chessboard above, the square with coordinates ""h3"" is white, so return true. example 3: input: coordinates = ""c7"" output: false",`coordinates.length == 2` `'a' <= coordinates[0] <= 'h'` `'1' <= coordinates[1] <= '8'`,
1813,Sentence Similarity III,"A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, `""Hello World""`, `""HELLO""`, `""hello world hello world""` are all sentences. Words consist of only uppercase and lowercase English letters.

Two sentences `sentence1` and `sentence2` are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, `sentence1 = ""Hello my name is Jane""` and `sentence2 = ""Hello Jane""` can be made equal by inserting `""my name is""` between `""Hello""` and `""Jane""` in `sentence2`.

Given two sentences `sentence1` and `sentence2`, return `true` if `sentence1` and `sentence2` are similar. Otherwise, return `false`.


Example 1:
Input: sentence1 = ""My name is Haley"", sentence2 = ""My Haley""
Output: true
Explanation: sentence2 can be turned to sentence1 by inserting ""name is"" between ""My"" and ""Haley"".


Example 2:
Input: sentence1 = ""of"", sentence2 = ""A lot of words""
Output: false
Explanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.


Example 3:
Input: sentence1 = ""Eating right now"", sentence2 = ""Eating""
Output: true
Explanation: sentence2 can be turned to sentence1 by inserting ""right now"" at the end of the sentence.


Example 4:
Input: sentence1 = ""Luky"", sentence2 = ""Lucccky""
Output: false

Constraints:
`1 <= sentence1.length, sentence2.length <= 100`
`sentence1` and `sentence2` consist of lowercase and uppercase English letters and spaces.

The words in `sentence1` and `sentence2` are separated by a single space.",Medium,https://leetcode.com/problems/sentence-similarity-iii,Google,String,75,,"a sentence is a list of words that are separated by a single space with no leading or trailing spaces. for example, `""hello world""`, `""hello""`, `""hello world hello world""` are all sentences. words consist of only uppercase and lowercase english letters. two sentences `sentence1` and `sentence2` are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. for example, `sentence1 = ""hello my name is jane""` and `sentence2 = ""hello jane""` can be made equal by inserting `""my name is""` between `""hello""` and `""jane""` in `sentence2`. given two sentences `sentence1` and `sentence2`, return `true` if `sentence1` and `sentence2` are similar. otherwise, return `false`.","input: sentence1 = ""my name is haley"", sentence2 = ""my haley"" output: true explanation: sentence2 can be turned to sentence1 by inserting ""name is"" between ""my"" and ""haley"". example 2: input: sentence1 = ""of"", sentence2 = ""a lot of words"" output: false explanation: no single sentence can be inserted inside one of the sentences to make it equal to the other. example 3: input: sentence1 = ""eating right now"", sentence2 = ""eating"" output: true explanation: sentence2 can be turned to sentence1 by inserting ""right now"" at the end of the sentence. example 4: input: sentence1 = ""luky"", sentence2 = ""lucccky"" output: false","`1 <= sentence1.length, sentence2.length <= 10^0` `sentence1` and `sentence2` consist of lowercase and uppercase english letters and spaces. the words in `sentence1` and `sentence2` are separated by a single space.",
1814,Count Nice Pairs in an Array,"You are given an array `nums` that consists of non-negative integers. Let us define `rev(x)` as the reverse of the non-negative integer `x`. For example, `rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is nice if it satisfies all of the following conditions:
`0 <= i < j < nums.length`
`nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`
Return the number of nice pairs of indices. Since that number can be too large, return it modulo `109 + 7`.


Example 1:
Input: nums = [42,11,1,97]
Output: 2
Explanation: The two pairs are:
 - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.

 - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.


Example 2:
Input: nums = [13,10,35,24,76]
Output: 4

Constraints:
`1 <= nums.length <= 105`
`0 <= nums[i] <= 109`",Medium,https://leetcode.com/problems/count-nice-pairs-in-an-array,Square,"Array,Hash Table",150,,"you are given an array `nums` that consists of non-negative integers. let us define `rev(x)` as the reverse of the non-negative integer `x`. for example, `rev(123) = 321`, and `rev(120) = 21`. a pair of indices `(i, j)` is nice if it satisfies all of the following conditions: `0 <= i < j < nums.length` `nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])` return the number of nice pairs of indices. since that number can be too large, return it modulo `109 + 7`.","input: nums = [42,11,1,97] output: 2 explanation: the two pairs are: - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121. - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12. example 2: input: nums = [13,10,35,24,76] output: 4",`1 <= nums.length <= 10^5` `0 <= nums[i] <= 10^9`,
1815,Maximum Number of Groups Getting Fresh Donuts,"There is a donuts shop that bakes donuts in batches of `batchSize`. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer `batchSize` and an integer array `groups`, where `groups[i]` denotes that there is a group of `groups[i]` customers that will visit the shop. Each customer will get exactly one donut.

When a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.

You can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.


Example 1:
Input: batchSize = 3, groups = [1,2,3,4,5,6]
Output: 4
Explanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy.


Example 2:
Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]
Output: 4

Constraints:
`1 <= batchSize <= 9`
`1 <= groups.length <= 30`
`1 <= groups[i] <= 109`",Hard,https://leetcode.com/problems/maximum-number-of-groups-getting-fresh-donuts,Google,Dynamic Programming,94,,"there is a donuts shop that bakes donuts in batches of `batchsize`. they have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. you are given an integer `batchsize` and an integer array `groups`, where `groups[i]` denotes that there is a group of `groups[i]` customers that will visit the shop. each customer will get exactly one donut. when a group visits the shop, all customers of the group must be served before serving any of the following groups. a group will be happy if they all get fresh donuts. that is, the first customer of the group does not receive a donut that was left over from the previous group. you can freely rearrange the ordering of the groups. return the maximum possible number of happy groups after rearranging the groups.","input: batchsize = 3, groups = [1,2,3,4,5,6] output: 4 explanation: you can arrange the groups as [6,2,4,5,1,3]. then the 1st, 2nd, 4th, and 6th groups will be happy. example 2: input: batchsize = 4, groups = [1,3,2,5,2,2,1,6] output: 4",`1 <= batchsize <= 9` `1 <= groups.length <= 30` `1 <= groups[i] <= 10^9`,
1816,Truncate Sentence,"A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).

For example, `""Hello World""`, `""HELLO""`, and `""hello world hello world""` are all sentences.

You are given a sentence `s`​​​​​​ and an integer `k`​​​​​​. You want to truncate `s`​​​​​​ such that it contains only the first `k`​​​​​​ words. Return `s`​​​​​​ after truncating it.


Example 1:
Input: s = ""Hello how are you Contestant"", k = 4
Output: ""Hello how are you""
Explanation:
The words in s are [""Hello"", ""how"" ""are"", ""you"", ""Contestant""].

The first 4 words are [""Hello"", ""how"", ""are"", ""you""].

Hence, you should return ""Hello how are you"".


Example 2:
Input: s = ""What is the solution to this problem"", k = 4
Output: ""What is the solution""
Explanation:
The words in s are [""What"", ""is"" ""the"", ""solution"", ""to"", ""this"", ""problem""].

The first 4 words are [""What"", ""is"", ""the"", ""solution""].

Hence, you should return ""What is the solution"".


Example 3:
Input: s = ""chopper is not a tanuki"", k = 5
Output: ""chopper is not a tanuki""

Constraints:
`1 <= s.length <= 500`
`k` is in the range `[1, the number of words in s]`.

`s` consist of only lowercase and uppercase English letters and spaces.

The words in `s` are separated by a single space.

There are no leading or trailing spaces.",Easy,https://leetcode.com/problems/truncate-sentence,Bloomberg,String,73,,"a sentence is a list of words that are separated by a single space with no leading or trailing spaces. each of the words consists of only uppercase and lowercase english letters (no punctuation). for example, `""hello world""`, `""hello""`, and `""hello world hello world""` are all sentences. you are given a sentence `s`​​​​​​ and an integer `k`​​​​​​. you want to truncate `s`​​​​​​ such that it contains only the first `k`​​​​​​ words. return `s`​​​​​​ after truncating it.","input: s = ""hello how are you contestant"", k = 4 output: ""hello how are you"" explanation: the words in s are [""hello"", ""how"" ""are"", ""you"", ""contestant""]. the first 4 words are [""hello"", ""how"", ""are"", ""you""]. hence, you should return ""hello how are you"". example 2: input: s = ""what is the solution to this problem"", k = 4 output: ""what is the solution"" explanation: the words in s are [""what"", ""is"" ""the"", ""solution"", ""to"", ""this"", ""problem""]. the first 4 words are [""what"", ""is"", ""the"", ""solution""]. hence, you should return ""what is the solution"". example 3: input: s = ""chopper is not a tanuki"", k = 5 output: ""chopper is not a tanuki""","`1 <= s.length <= 500` `k` is in the range `[1, the number of words in s]`. `s` consist of only lowercase and uppercase english letters and spaces. the words in `s` are separated by a single space. there are no leading or trailing spaces.",
1817,Finding the Users Active Minutes,"You are given the logs for users' actions on LeetCode, and an integer `k`. The logs are represented by a 2D integer array `logs` where each `logs[i] = [IDi, timei]` indicates that the user with `IDi` performed an action at the minute `timei`.

Multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.

The user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.

You are to calculate a 1-indexed array `answer` of size `k` such that, for each `j` (`1 <= j <= k`), `answer[j]` is the number of users whose UAM equals `j`.

Return the array `answer` as described above.


Example 1:
Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5
Output: [0,2,0,0,0]
Explanation:
The user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).

The user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.

Since both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.


Example 2:
Input: logs = [[1,1],[2,2],[2,3]], k = 4
Output: [1,1,0,0]
Explanation:
The user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.

The user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.

There is one user with a UAM of 1 and one with a UAM of 2.

Hence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.


Constraints:
`1 <= logs.length <= 104`
`0 <= IDi <= 109`
`1 <= timei <= 105`
`k` is in the range `[The maximum UAM for a user, 105]`.",Medium,https://leetcode.com/problems/finding-the-users-active-minutes,Twitter,Hash Table,80,,"you are given the logs for users' actions on leetcode, and an integer `k`. the logs are represented by a 2d integer array `logs` where each `logs[i] = [idi, timei]` indicates that the user with `idi` performed an action at the minute `timei`. multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute. the user active minutes (uam) for a given user is defined as the number of unique minutes in which the user performed an action on leetcode. a minute can only be counted once, even if multiple actions occur during it. you are to calculate a 1-indexed array `answer` of size `k` such that, for each `j` (`1 <= j <= k`), `answer[j]` is the number of users whose uam equals `j`. return the array `answer` as described above.","input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5 output: [0,2,0,0,0] explanation: the user with id=0 performed actions at minutes 5, 2, and 5 again. hence, they have a uam of 2 (minute 5 is only counted once). the user with id=1 performed actions at minutes 2 and 3. hence, they have a uam of 2. since both users have a uam of 2, answer[2] is 2, and the remaining answer[j] values are 0. example 2: input: logs = [[1,1],[2,2],[2,3]], k = 4 output: [1,1,0,0] explanation: the user with id=1 performed a single action at minute 1. hence, they have a uam of 1. the user with id=2 performed actions at minutes 2 and 3. hence, they have a uam of 2. there is one user with a uam of 1 and one with a uam of 2. hence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.","`1 <= logs.length <= 10^4` `0 <= idi <= 10^9` `1 <= timei <= 10^5` `k` is in the range `[the maximum uam for a user, 10^5]`.",
1818,Minimum Absolute Sum Difference,"You are given two positive integer arrays `nums1` and `nums2`, both of length `n`.

The absolute sum difference of arrays `nums1` and `nums2` is defined as the sum of `|nums1[i] - nums2[i]|` for each `0 <= i < n` (0-indexed).

You can replace at most one element of `nums1` with any other element in `nums1` to minimize the absolute sum difference.

Return the minimum absolute sum difference after replacing at most one element in the array `nums1`. Since the answer may be large, return it modulo `109 + 7`.

`|x|` is defined as:
`x` if `x >= 0`, or
`-x` if `x < 0`.


Example 1:
Input: nums1 = [1,7,5], nums2 = [2,3,5]
Output: 3
Explanation: There are two possible optimal solutions:
- Replace the second element with the first: [1,7,5] => [1,1,5], or
- Replace the second element with the third: [1,7,5] => [1,5,5].

Both will yield an absolute sum difference of `|1-2| + (|1-3| or |5-3|) + |5-5| = `3.


Example 2:
Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]
Output: 0
Explanation: nums1 is equal to nums2 so no replacement is needed. This will result in an 
absolute sum difference of 0.


Example 3:
Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]
Output: 20
Explanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].

This yields an absolute sum difference of `|10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20`

Constraints:
`n == nums1.length`
`n == nums2.length`
`1 <= n <= 105`
`1 <= nums1[i], nums2[i] <= 105`",Medium,https://leetcode.com/problems/minimum-absolute-sum-difference,Uber,"Binary Search,Greedy",127,,"you are given two positive integer arrays `nums1` and `nums2`, both of length `n`. the absolute sum difference of arrays `nums1` and `nums2` is defined as the sum of `|nums1[i] - nums2[i]|` for each `0 <= i < n` (0-indexed). you can replace at most one element of `nums1` with any other element in `nums1` to minimize the absolute sum difference. return the minimum absolute sum difference after replacing at most one element in the array `nums1`. since the answer may be large, return it modulo `109 + 7`. `|x|` is defined as: `x` if `x >= 0`, or `-x` if `x < 0`.","input: nums1 = [1,7,5], nums2 = [2,3,5] output: 3 explanation: there are two possible optimal solutions: - replace the second element with the first: [1,7,5] => [1,1,5], or - replace the second element with the third: [1,7,5] => [1,5,5]. both will yield an absolute sum difference of `|1-2| + (|1-3| or |5-3|) + |5-5| = `3. example 2: input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10] output: 0 explanation: nums1 is equal to nums2 so no replacement is needed. this will result in an absolute sum difference of 0. example 3: input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4] output: 20 explanation: replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7]. this yields an absolute sum difference of `|10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20`","`n == nums1.length` `n == nums2.length` `1 <= n <= 10^5` `1 <= nums1[i], nums2[i] <= 10^5`",
1819,Number of Different Subsequences GCDs,"You are given an array `nums` that consists of positive integers.

The GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.

For example, the GCD of the sequence `[4,6,16]` is `2`.

A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

For example, `[2,5,10]` is a subsequence of `[1,2,1,2,4,1,5,10]`.

Return the number of different GCDs among all non-empty subsequences of `nums`.


Example 1:
Input: nums = [6,10,3]
Output: 5
Explanation: The figure shows all the non-empty subsequences and their GCDs.

The different GCDs are 6, 10, 3, 2, and 1.


Example 2:
Input: nums = [5,15,40,5,6]
Output: 7

Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 2 * 105`",Hard,https://leetcode.com/problems/number-of-different-subsequences-gcds,Akuna Capital,Math,131,,"you are given an array `nums` that consists of positive integers. the gcd of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly. for example, the gcd of the sequence `[4,6,16]` is `2`. a subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array. for example, `[2,5,10]` is a subsequence of `[1,2,1,2,4,1,5,10]`. return the number of different gcds among all non-empty subsequences of `nums`.","input: nums = [6,10,3] output: 5 explanation: the figure shows all the non-empty subsequences and their gcds. the different gcds are 6, 10, 3, 2, and 1. example 2: input: nums = [5,15,40,5,6] output: 7",`1 <= nums.length <= 10^5` `1 <= nums[i] <= 2 * 10^5`,
1820,Maximum Number of Accepted Invitations,"There are `m` boys and `n` girls in a class attending an upcoming party.

You are given an `m x n` integer matrix `grid`, where `grid[i][j]` equals `0` or `1`. If `grid[i][j] == 1`, then that means the `ith` boy can invite the `jth` girl to the party. A boy can invite at most one girl, and a girl can accept at most one invitation from a boy.

Return the maximum possible number of accepted invitations.


Example 1:
Input: grid = [[1,1,1],
               [1,0,1],
               [0,0,1]]
Output: 3
Explanation: The invitations are sent as follows:
- The 1st boy invites the 2nd girl.

- The 2nd boy invites the 1st girl.

- The 3rd boy invites the 3rd girl.


Example 2:
Input: grid = [[1,0,1,0],
               [1,0,0,0],
               [0,0,1,0],
               [1,1,1,0]]
Output: 3
Explanation: The invitations are sent as follows:
-The 1st boy invites the 3rd girl.

-The 2nd boy invites the 1st girl.

-The 3rd boy invites no one.

-The 4th boy invites the 2nd girl.


Constraints:
`grid.length == m`
`grid[i].length == n`
`1 <= m, n <= 200`
`grid[i][j]` is either `0` or `1`.",Medium,https://leetcode.com/problems/maximum-number-of-accepted-invitations,Bloomberg,Graph,14,,"there are `m` boys and `n` girls in a class attending an upcoming party. you are given an `m x n` integer matrix `grid`, where `grid[i][j]` equals `0` or `1`. if `grid[i][j] == 1`, then that means the `ith` boy can invite the `jth` girl to the party. a boy can invite at most one girl, and a girl can accept at most one invitation from a boy. return the maximum possible number of accepted invitations.","input: grid = [[1,1,1], [1,0,1], [0,0,1]] output: 3 explanation: the invitations are sent as follows: - the 1st boy invites the 2nd girl. - the 2nd boy invites the 1st girl. - the 3rd boy invites the 3rd girl. example 2: input: grid = [[1,0,1,0], [1,0,0,0], [0,0,1,0], [1,1,1,0]] output: 3 explanation: the invitations are sent as follows: -the 1st boy invites the 3rd girl. -the 2nd boy invites the 1st girl. -the 3rd boy invites no one. -the 4th boy invites the 2nd girl.","`grid.length == m` `grid[i].length == n` `1 <= m, n <= 200` `grid[i][j]` is either `0` or `1`.",
1821,Find Customers With Positive Revenue this Year,SQL Schema,Easy,https://leetcode.com/problems/find-customers-with-positive-revenue-this-year,Google,,2,,sql schema,,,
1822,Sign of the Product of an Array,"There is a function `signFunc(x)` that returns:
`1` if `x` is positive.

`-1` if `x` is negative.

`0` if `x` is equal to `0`.

You are given an integer array `nums`. Let `product` be the product of all values in the array `nums`.

Return `signFunc(product)`.


Example 1:
Input: nums = [-1,-2,-3,-4,3,2,1]
Output: 1
Explanation: The product of all values in the array is 144, and signFunc(144) = 1

Example 2:
Input: nums = [1,5,0,2,-3]
Output: 0
Explanation: The product of all values in the array is 0, and signFunc(0) = 0

Example 3:
Input: nums = [-1,1,-1,1,-1]
Output: -1
Explanation: The product of all values in the array is -1, and signFunc(-1) = -1

Constraints:
`1 <= nums.length <= 1000`
`-100 <= nums[i] <= 100`",Easy,https://leetcode.com/problems/sign-of-the-product-of-an-array,Microsoft,Math,37,,there is a function `signfunc(x)` that returns: `1` if `x` is positive. `-1` if `x` is negative. `0` if `x` is equal to `0`. you are given an integer array `nums`. let `product` be the product of all values in the array `nums`. return `signfunc(product)`.,"input: nums = [-1,-2,-3,-4,3,2,1] output: 1 explanation: the product of all values in the array is 144, and signfunc(144) = 1 example 2: input: nums = [1,5,0,2,-3] output: 0 explanation: the product of all values in the array is 0, and signfunc(0) = 0 example 3: input: nums = [-1,1,-1,1,-1] output: -1 explanation: the product of all values in the array is -1, and signfunc(-1) = -1",`1 <= nums.length <= 1000` `-10^0 <= nums[i] <= 10^0`,
1823,Find the Winner of the Circular Game,"There are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in clockwise order. More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend.

The rules of the game are as follows:
Start at the `1st` friend.

Count the next `k` friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.

The last friend you counted leaves the circle and loses the game.

If there is still more than one friend in the circle, go back to step `2` starting from the friend immediately clockwise of the friend who just lost and repeat.

Else, the last friend in the circle wins the game.

Given the number of friends, `n`, and an integer `k`, return the winner of the game.


Example 1:
Input: n = 5, k = 2
Output: 3
Explanation: Here are the steps of the game:
1) Start at friend 1.

2) Count 2 friends clockwise, which are friends 1 and 2.

3) Friend 2 leaves the circle. Next start is friend 3.

4) Count 2 friends clockwise, which are friends 3 and 4.

5) Friend 4 leaves the circle. Next start is friend 5.

6) Count 2 friends clockwise, which are friends 5 and 1.

7) Friend 1 leaves the circle. Next start is friend 3.

8) Count 2 friends clockwise, which are friends 3 and 5.

9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.


Example 2:
Input: n = 6, k = 5
Output: 1
Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.


Constraints:
`1 <= k <= n <= 500`",Medium,https://leetcode.com/problems/find-the-winner-of-the-circular-game,Bloomberg,Array,81,,"there are `n` friends that are playing a game. the friends are sitting in a circle and are numbered from `1` to `n` in clockwise order. more formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend. the rules of the game are as follows: start at the `1st` friend. count the next `k` friends in the clockwise direction including the friend you started at. the counting wraps around the circle and may count some friends more than once. the last friend you counted leaves the circle and loses the game. if there is still more than one friend in the circle, go back to step `2` starting from the friend immediately clockwise of the friend who just lost and repeat. else, the last friend in the circle wins the game. given the number of friends, `n`, and an integer `k`, return the winner of the game.","input: n = 5, k = 2 output: 3 explanation: here are the steps of the game: 1) start at friend 1. 2) count 2 friends clockwise, which are friends 1 and 2. 3) friend 2 leaves the circle. next start is friend 3. 4) count 2 friends clockwise, which are friends 3 and 4. 5) friend 4 leaves the circle. next start is friend 5. 6) count 2 friends clockwise, which are friends 5 and 1. 7) friend 1 leaves the circle. next start is friend 3. 8) count 2 friends clockwise, which are friends 3 and 5. 9) friend 5 leaves the circle. only friend 3 is left, so they are the winner. example 2: input: n = 6, k = 5 output: 1 explanation: the friends leave in this order: 5, 4, 6, 2, 3. the winner is friend 1.",`1 <= k <= n <= 500`,
1824,Minimum Sideway Jumps,"There is a 3 lane road of length `n` that consists of `n + 1` points labeled from `0` to `n`. A frog starts at point `0` in the second lane and wants to jump to point `n`. However, there could be obstacles along the way.

You are given an array `obstacles` of length `n + 1` where each `obstacles[i]` (ranging from 0 to 3) describes an obstacle on the lane `obstacles[i]` at point `i`. If `obstacles[i] == 0`, there are no obstacles at point `i`. There will be at most one obstacle in the 3 lanes at each point.

For example, if `obstacles[2] == 1`, then there is an obstacle on lane 1 at point 2.

The frog can only travel from point `i` to point `i + 1` on the same lane if there is not an obstacle on the lane at point `i + 1`. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.

For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.

Return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane `2` at point 0.

Note: There will be no obstacles on points `0` and `n`.


Example 1:
Input: obstacles = [0,1,2,3,0]
Output: 2 
Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).

Note that the frog can jump over obstacles only when making side jumps (as shown at point 2).


Example 2:
Input: obstacles = [0,1,1,3,3,0]
Output: 0
Explanation: There are no obstacles on lane 2. No side jumps are required.


Example 3:
Input: obstacles = [0,2,1,0,3,0]
Output: 2
Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps.


Constraints:
`obstacles.length == n + 1`
`1 <= n <= 5 * 105`
`0 <= obstacles[i] <= 3`
`obstacles[0] == obstacles[n] == 0`",Medium,https://leetcode.com/problems/minimum-sideway-jumps,Pony.ai,"Dynamic Programming,Breadth-first Search",147,"[Frog Jump, /problems/frog-jump/, Hard]","there is a 3 lane road of length `n` that consists of `n + 1` points labeled from `0` to `n`. a frog starts at point `0` in the second lane and wants to jump to point `n`. however, there could be obstacles along the way. you are given an array `obstacles` of length `n + 1` where each `obstacles[i]` (ranging from 0 to 3) describes an obstacle on the lane `obstacles[i]` at point `i`. if `obstacles[i] == 0`, there are no obstacles at point `i`. there will be at most one obstacle in the 3 lanes at each point. for example, if `obstacles[2] == 1`, then there is an obstacle on lane 1 at point 2. the frog can only travel from point `i` to point `i + 1` on the same lane if there is not an obstacle on the lane at point `i + 1`. to avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane. for example, the frog can jump from lane 3 at point 3 to lane 1 at point 3. return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane `2` at point 0. note: there will be no obstacles on points `0` and `n`.","input: obstacles = [0,1,2,3,0] output: 2 explanation: the optimal solution is shown by the arrows above. there are 2 side jumps (red arrows). note that the frog can jump over obstacles only when making side jumps (as shown at point 2). example 2: input: obstacles = [0,1,1,3,3,0] output: 0 explanation: there are no obstacles on lane 2. no side jumps are required. example 3: input: obstacles = [0,2,1,0,3,0] output: 2 explanation: the optimal solution is shown by the arrows above. there are 2 side jumps.",`obstacles.length == n + 1` `1 <= n <= 5 * 10^5` `0 <= obstacles[i] <= 3` `obstacles[0] == obstacles[n] == 0`,
1825,Finding MK Average,"You are given two integers, `m` and `k`, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.

The MKAverage can be calculated using these steps:
If the number of the elements in the stream is less than `m` you should consider the MKAverage to be `-1`. Otherwise, copy the last `m` elements of the stream to a separate container.

Remove the smallest `k` elements and the largest `k` elements from the container.

Calculate the average value for the rest of the elements rounded down to the nearest integer.

Implement the `MKAverage` class:
`MKAverage(int m, int k)` Initializes the MKAverage object with an empty stream and the two integers `m` and `k`.

`void addElement(int num)` Inserts a new element `num` into the stream.

`int calculateMKAverage()` Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.


Example 1:
Input
[""MKAverage"", ""addElement"", ""addElement"", ""calculateMKAverage"", ""addElement"", ""calculateMKAverage"", ""addElement"", ""addElement"", ""addElement"", ""calculateMKAverage""]
[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]
Output
[null, null, null, -1, null, 3, null, null, null, 5]
Explanation
MKAverage obj = new MKAverage(3, 1); 
obj.addElement(3);        // current elements are [3]
obj.addElement(1);        // current elements are [3,1]
obj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.

obj.addElement(10);       // current elements are [3,1,10]
obj.calculateMKAverage(); // The last 3 elements are [3,1,10].

                          // After removing smallest and largest 1 element the container will be `[3].

                          // The average of [3] equals 3/1 = 3, return 3
obj.addElement(5);        // current elements are [3,1,10,5]
obj.addElement(5);        // current elements are [3,1,10,5,5]
obj.addElement(5);        // current elements are [3,1,10,5,5,5]
obj.calculateMKAverage(); // The last 3 elements are [5,5,5].

                          // After removing smallest and largest 1 element the container will be `[5].

                          // The average of [5] equals 5/1 = 5, return 5
``

Constraints:
`3 <= m <= 105`
`1 <= k*2 < m`
`1 <= num <= 105`
At most `105` calls will be made to `addElement` and `calculateMKAverage`.",Hard,https://leetcode.com/problems/finding-mk-average,Google,"Heap,Design,Queue",52,"[Find Median from Data Stream, /problems/find-median-from-data-stream/, Hard], [Kth Largest Element in a Stream, /problems/kth-largest-element-in-a-stream/, Easy]","you are given two integers, `m` and `k`, and a stream of integers. you are tasked to implement a data structure that calculates the mkaverage for the stream. the mkaverage can be calculated using these steps: if the number of the elements in the stream is less than `m` you should consider the mkaverage to be `-1`. otherwise, copy the last `m` elements of the stream to a separate container. remove the smallest `k` elements and the largest `k` elements from the container. calculate the average value for the rest of the elements rounded down to the nearest integer. implement the `mkaverage` class: `mkaverage(int m, int k)` initializes the mkaverage object with an empty stream and the two integers `m` and `k`. `void addelement(int num)` inserts a new element `num` into the stream. `int calculatemkaverage()` calculates and returns the mkaverage for the current stream rounded down to the nearest integer.","input [""mkaverage"", ""addelement"", ""addelement"", ""calculatemkaverage"", ""addelement"", ""calculatemkaverage"", ""addelement"", ""addelement"", ""addelement"", ""calculatemkaverage""] [[3, 1], [3], [1], [], [10], [], [5], [5], [5], []] output [null, null, null, -1, null, 3, null, null, null, 5] explanation mkaverage obj = new mkaverage(3, 1); obj.addelement(3); // current elements are [3] obj.addelement(1); // current elements are [3,1] obj.calculatemkaverage(); // return -1, because m = 3 and only 2 elements exist. obj.addelement(10); // current elements are [3,1,10] obj.calculatemkaverage(); // the last 3 elements are [3,1,10]. // after removing smallest and largest 1 element the container will be `[3]. // the average of [3] equals 3/1 = 3, return 3 obj.addelement(5); // current elements are [3,1,10,5] obj.addelement(5); // current elements are [3,1,10,5,5] obj.addelement(5); // current elements are [3,1,10,5,5,5] obj.calculatemkaverage(); // the last 3 elements are [5,5,5]. // after removing smallest and largest 1 element the container will be `[5]. // the average of [5] equals 5/1 = 5, return 5 ``",`3 <= m <= 10^5` `1 <= k*2 < m` `1 <= num <= 10^5` at most `10^5` calls will be made to `addelement` and `calculatemkaverage`.,
