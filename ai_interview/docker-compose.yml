services:
# ----------------------
# frontend Services
# ----------------------

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.front
    container_name: ai_interview_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      # Point Next.js proxy to the backend service when running in Docker
      - NEXT_PUBLIC_BACKEND_ORIGIN=http://ai_interview_backend:8080
    command: npm run dev
    depends_on:
      - db
      - backend
    networks:
      - ai_interview_network
    restart: unless-stopped
  
  # ----------------------
  # backend Services
  # ----------------------

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.server
    container_name: ai_interview_backend
    ports:
      - "8080:8080"               # hostport:containerport
    environment:
      - GO_ENV=development
    env_file:
      - ./.env
    depends_on:
      - db
    networks:
      - ai_interview_network
    restart: unless-stopped
  
  # ----------------------
  # db Services
  # ----------------------

  db:
    image: postgres:16
    container_name: ai_interview_db
    environment: # env variables from .env file
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./db/pgdata:/var/lib/postgresql/data
      - ./db/migrations/init:/docker-entrypoint-initdb.d:ro
    networks:
      - ai_interview_network
    restart: unless-stopped
  
  # ----------------------
  # pgadmin Services (GUI)
  # ----------------------

  pgadmin:
    image: dpage/pgadmin4:8
    container_name: ai_interview_pgadmin
    restart: unless-stopped
    environment: # env variables from .env file
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL} 
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - db
    volumes:
      - ./db/pgadmin/data:/var/lib/pgadmin
    networks:
      - ai_interview_network
    
# ----------------------
# shared persisted volumes
# ----------------------

volumes:
  pgdata:

# ------------------------
# shared networks between containers
# ------------------------

networks:
  ai_interview_network:
    name: ai_interview_network
    driver: bridge
    external: true